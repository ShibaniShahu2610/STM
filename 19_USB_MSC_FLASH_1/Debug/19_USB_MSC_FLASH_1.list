
19_USB_MSC_FLASH_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08008ba4  08008ba4  00018ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c4c  08008c4c  00020134  2**0
                  CONTENTS
  4 .ARM          00000000  08008c4c  08008c4c  00020134  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c4c  08008c4c  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c4c  08008c4c  00018c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c50  08008c50  00018c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  08008c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013884  20000134  08008d88  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200139b8  08008d88  000239b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c66  00000000  00000000  000201a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003459  00000000  00000000  00030e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  00034268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aff  00000000  00000000  00035150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000287cc  00000000  00000000  00035c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e61  00000000  00000000  0005e41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e679f  00000000  00000000  0007227c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ab8  00000000  00000000  00158a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0015c4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000134 	.word	0x20000134
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008b8c 	.word	0x08008b8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000138 	.word	0x20000138
 80001c4:	08008b8c 	.word	0x08008b8c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f913 	bl	80003f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f805 	bl	80001de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f852 	bl	800027c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80001d8:	f007 fe5a 	bl	8007e90 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001dc:	e7fe      	b.n	80001dc <main+0x14>

080001de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001de:	b580      	push	{r7, lr}
 80001e0:	b096      	sub	sp, #88	; 0x58
 80001e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	2244      	movs	r2, #68	; 0x44
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f008 fc93 	bl	8008b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f2:	463b      	mov	r3, r7
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
 80001fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000200:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000204:	f001 fe2e 	bl	8001e64 <HAL_PWREx_ControlVoltageScaling>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800020e:	f000 f859 	bl	80002c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000212:	2301      	movs	r3, #1
 8000214:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021c:	2302      	movs	r3, #2
 800021e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000220:	2303      	movs	r3, #3
 8000222:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000224:	2301      	movs	r3, #1
 8000226:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000228:	2314      	movs	r3, #20
 800022a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800022c:	2307      	movs	r3, #7
 800022e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000230:	2302      	movs	r3, #2
 8000232:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000234:	2302      	movs	r3, #2
 8000236:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	4618      	mov	r0, r3
 800023e:	f001 fe77 	bl	8001f30 <HAL_RCC_OscConfig>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000248:	f000 f83c 	bl	80002c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024c:	230f      	movs	r3, #15
 800024e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000250:	2303      	movs	r3, #3
 8000252:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000260:	463b      	mov	r3, r7
 8000262:	2104      	movs	r1, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f002 fa3f 	bl	80026e8 <HAL_RCC_ClockConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000270:	f000 f828 	bl	80002c4 <Error_Handler>
  }
}
 8000274:	bf00      	nop
 8000276:	3758      	adds	r7, #88	; 0x58
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000282:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <MX_GPIO_Init+0x44>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000286:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <MX_GPIO_Init+0x44>)
 8000288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800028c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800028e:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <MX_GPIO_Init+0x44>)
 8000290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029a:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <MX_GPIO_Init+0x44>)
 800029c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800029e:	4a08      	ldr	r2, [pc, #32]	; (80002c0 <MX_GPIO_Init+0x44>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <MX_GPIO_Init+0x44>)
 80002a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	603b      	str	r3, [r7, #0]
 80002b0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40021000 	.word	0x40021000

080002c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c8:	b672      	cpsid	i
}
 80002ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002cc:	e7fe      	b.n	80002cc <Error_Handler+0x8>
	...

080002d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <HAL_MspInit+0x44>)
 80002d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002da:	4a0e      	ldr	r2, [pc, #56]	; (8000314 <HAL_MspInit+0x44>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6613      	str	r3, [r2, #96]	; 0x60
 80002e2:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <HAL_MspInit+0x44>)
 80002e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	607b      	str	r3, [r7, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <HAL_MspInit+0x44>)
 80002f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002f2:	4a08      	ldr	r2, [pc, #32]	; (8000314 <HAL_MspInit+0x44>)
 80002f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002f8:	6593      	str	r3, [r2, #88]	; 0x58
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <HAL_MspInit+0x44>)
 80002fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000302:	603b      	str	r3, [r7, #0]
 8000304:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40021000 	.word	0x40021000

08000318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800031c:	e7fe      	b.n	800031c <NMI_Handler+0x4>

0800031e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000322:	e7fe      	b.n	8000322 <HardFault_Handler+0x4>

08000324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000328:	e7fe      	b.n	8000328 <MemManage_Handler+0x4>

0800032a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800032a:	b480      	push	{r7}
 800032c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800032e:	e7fe      	b.n	800032e <BusFault_Handler+0x4>

08000330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000334:	e7fe      	b.n	8000334 <UsageFault_Handler+0x4>

08000336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr

08000352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000364:	f000 f89c 	bl	80004a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}

0800036c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000370:	4802      	ldr	r0, [pc, #8]	; (800037c <OTG_FS_IRQHandler+0x10>)
 8000372:	f000 fce8 	bl	8000d46 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20013234 	.word	0x20013234

08000380 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <SystemInit+0x20>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a05      	ldr	r2, [pc, #20]	; (80003a0 <SystemInit+0x20>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	e000ed00 	.word	0xe000ed00

080003a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80003a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003a8:	f7ff ffea 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003ac:	480c      	ldr	r0, [pc, #48]	; (80003e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ae:	490d      	ldr	r1, [pc, #52]	; (80003e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b0:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <LoopForever+0xe>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b4:	e002      	b.n	80003bc <LoopCopyDataInit>

080003b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ba:	3304      	adds	r3, #4

080003bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c0:	d3f9      	bcc.n	80003b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c2:	4a0a      	ldr	r2, [pc, #40]	; (80003ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c4:	4c0a      	ldr	r4, [pc, #40]	; (80003f0 <LoopForever+0x16>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c8:	e001      	b.n	80003ce <LoopFillZerobss>

080003ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003cc:	3204      	adds	r2, #4

080003ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d0:	d3fb      	bcc.n	80003ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003d2:	f008 fba9 	bl	8008b28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003d6:	f7ff fef7 	bl	80001c8 <main>

080003da <LoopForever>:

LoopForever:
    b LoopForever
 80003da:	e7fe      	b.n	80003da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80003dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e4:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 80003e8:	08008c54 	.word	0x08008c54
  ldr r2, =_sbss
 80003ec:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 80003f0:	200139b8 	.word	0x200139b8

080003f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003f4:	e7fe      	b.n	80003f4 <ADC1_2_IRQHandler>

080003f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80003fc:	2300      	movs	r3, #0
 80003fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000400:	2003      	movs	r0, #3
 8000402:	f000 f961 	bl	80006c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000406:	2000      	movs	r0, #0
 8000408:	f000 f80e 	bl	8000428 <HAL_InitTick>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d002      	beq.n	8000418 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000412:	2301      	movs	r3, #1
 8000414:	71fb      	strb	r3, [r7, #7]
 8000416:	e001      	b.n	800041c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000418:	f7ff ff5a 	bl	80002d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800041c:	79fb      	ldrb	r3, [r7, #7]
}
 800041e:	4618      	mov	r0, r3
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000430:	2300      	movs	r3, #0
 8000432:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000434:	4b17      	ldr	r3, [pc, #92]	; (8000494 <HAL_InitTick+0x6c>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d023      	beq.n	8000484 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800043c:	4b16      	ldr	r3, [pc, #88]	; (8000498 <HAL_InitTick+0x70>)
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	4b14      	ldr	r3, [pc, #80]	; (8000494 <HAL_InitTick+0x6c>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	4619      	mov	r1, r3
 8000446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800044a:	fbb3 f3f1 	udiv	r3, r3, r1
 800044e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000452:	4618      	mov	r0, r3
 8000454:	f000 f96d 	bl	8000732 <HAL_SYSTICK_Config>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d10f      	bne.n	800047e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2b0f      	cmp	r3, #15
 8000462:	d809      	bhi.n	8000478 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000464:	2200      	movs	r2, #0
 8000466:	6879      	ldr	r1, [r7, #4]
 8000468:	f04f 30ff 	mov.w	r0, #4294967295
 800046c:	f000 f937 	bl	80006de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000470:	4a0a      	ldr	r2, [pc, #40]	; (800049c <HAL_InitTick+0x74>)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6013      	str	r3, [r2, #0]
 8000476:	e007      	b.n	8000488 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000478:	2301      	movs	r3, #1
 800047a:	73fb      	strb	r3, [r7, #15]
 800047c:	e004      	b.n	8000488 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800047e:	2301      	movs	r3, #1
 8000480:	73fb      	strb	r3, [r7, #15]
 8000482:	e001      	b.n	8000488 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000484:	2301      	movs	r3, #1
 8000486:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000488:	7bfb      	ldrb	r3, [r7, #15]
}
 800048a:	4618      	mov	r0, r3
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000008 	.word	0x20000008
 8000498:	20000000 	.word	0x20000000
 800049c:	20000004 	.word	0x20000004

080004a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <HAL_IncTick+0x20>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	461a      	mov	r2, r3
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <HAL_IncTick+0x24>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4413      	add	r3, r2
 80004b0:	4a04      	ldr	r2, [pc, #16]	; (80004c4 <HAL_IncTick+0x24>)
 80004b2:	6013      	str	r3, [r2, #0]
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	20000008 	.word	0x20000008
 80004c4:	20000150 	.word	0x20000150

080004c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  return uwTick;
 80004cc:	4b03      	ldr	r3, [pc, #12]	; (80004dc <HAL_GetTick+0x14>)
 80004ce:	681b      	ldr	r3, [r3, #0]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	20000150 	.word	0x20000150

080004e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004e8:	f7ff ffee 	bl	80004c8 <HAL_GetTick>
 80004ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004f8:	d005      	beq.n	8000506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <HAL_Delay+0x44>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	461a      	mov	r2, r3
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	4413      	add	r3, r2
 8000504:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000506:	bf00      	nop
 8000508:	f7ff ffde 	bl	80004c8 <HAL_GetTick>
 800050c:	4602      	mov	r2, r0
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	68fa      	ldr	r2, [r7, #12]
 8000514:	429a      	cmp	r2, r3
 8000516:	d8f7      	bhi.n	8000508 <HAL_Delay+0x28>
  {
  }
}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000008 	.word	0x20000008

08000528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f003 0307 	and.w	r3, r3, #7
 8000536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <__NVIC_SetPriorityGrouping+0x44>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800053e:	68ba      	ldr	r2, [r7, #8]
 8000540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000544:	4013      	ands	r3, r2
 8000546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800055a:	4a04      	ldr	r2, [pc, #16]	; (800056c <__NVIC_SetPriorityGrouping+0x44>)
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	60d3      	str	r3, [r2, #12]
}
 8000560:	bf00      	nop
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <__NVIC_GetPriorityGrouping+0x18>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	0a1b      	lsrs	r3, r3, #8
 800057a:	f003 0307 	and.w	r3, r3, #7
}
 800057e:	4618      	mov	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	e000ed00 	.word	0xe000ed00

0800058c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	db0b      	blt.n	80005b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f003 021f 	and.w	r2, r3, #31
 80005a4:	4907      	ldr	r1, [pc, #28]	; (80005c4 <__NVIC_EnableIRQ+0x38>)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	095b      	lsrs	r3, r3, #5
 80005ac:	2001      	movs	r0, #1
 80005ae:	fa00 f202 	lsl.w	r2, r0, r2
 80005b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000e100 	.word	0xe000e100

080005c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	db0a      	blt.n	80005f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	490c      	ldr	r1, [pc, #48]	; (8000614 <__NVIC_SetPriority+0x4c>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	0112      	lsls	r2, r2, #4
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	440b      	add	r3, r1
 80005ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005f0:	e00a      	b.n	8000608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4908      	ldr	r1, [pc, #32]	; (8000618 <__NVIC_SetPriority+0x50>)
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	f003 030f 	and.w	r3, r3, #15
 80005fe:	3b04      	subs	r3, #4
 8000600:	0112      	lsls	r2, r2, #4
 8000602:	b2d2      	uxtb	r2, r2
 8000604:	440b      	add	r3, r1
 8000606:	761a      	strb	r2, [r3, #24]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000e100 	.word	0xe000e100
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800061c:	b480      	push	{r7}
 800061e:	b089      	sub	sp, #36	; 0x24
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f003 0307 	and.w	r3, r3, #7
 800062e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	f1c3 0307 	rsb	r3, r3, #7
 8000636:	2b04      	cmp	r3, #4
 8000638:	bf28      	it	cs
 800063a:	2304      	movcs	r3, #4
 800063c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	3304      	adds	r3, #4
 8000642:	2b06      	cmp	r3, #6
 8000644:	d902      	bls.n	800064c <NVIC_EncodePriority+0x30>
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	3b03      	subs	r3, #3
 800064a:	e000      	b.n	800064e <NVIC_EncodePriority+0x32>
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000650:	f04f 32ff 	mov.w	r2, #4294967295
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	43da      	mvns	r2, r3
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	401a      	ands	r2, r3
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000664:	f04f 31ff 	mov.w	r1, #4294967295
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	fa01 f303 	lsl.w	r3, r1, r3
 800066e:	43d9      	mvns	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	4313      	orrs	r3, r2
         );
}
 8000676:	4618      	mov	r0, r3
 8000678:	3724      	adds	r7, #36	; 0x24
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	3b01      	subs	r3, #1
 8000690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000694:	d301      	bcc.n	800069a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000696:	2301      	movs	r3, #1
 8000698:	e00f      	b.n	80006ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <SysTick_Config+0x40>)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3b01      	subs	r3, #1
 80006a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006a2:	210f      	movs	r1, #15
 80006a4:	f04f 30ff 	mov.w	r0, #4294967295
 80006a8:	f7ff ff8e 	bl	80005c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <SysTick_Config+0x40>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006b2:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <SysTick_Config+0x40>)
 80006b4:	2207      	movs	r2, #7
 80006b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	e000e010 	.word	0xe000e010

080006c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff ff29 	bl	8000528 <__NVIC_SetPriorityGrouping>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b086      	sub	sp, #24
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	4603      	mov	r3, r0
 80006e6:	60b9      	str	r1, [r7, #8]
 80006e8:	607a      	str	r2, [r7, #4]
 80006ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80006f0:	f7ff ff3e 	bl	8000570 <__NVIC_GetPriorityGrouping>
 80006f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	68b9      	ldr	r1, [r7, #8]
 80006fa:	6978      	ldr	r0, [r7, #20]
 80006fc:	f7ff ff8e 	bl	800061c <NVIC_EncodePriority>
 8000700:	4602      	mov	r2, r0
 8000702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000706:	4611      	mov	r1, r2
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff5d 	bl	80005c8 <__NVIC_SetPriority>
}
 800070e:	bf00      	nop
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
 800071c:	4603      	mov	r3, r0
 800071e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff31 	bl	800058c <__NVIC_EnableIRQ>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff ffa2 	bl	8000684 <SysTick_Config>
 8000740:	4603      	mov	r3, r0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800074c:	b480      	push	{r7}
 800074e:	b087      	sub	sp, #28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800075a:	e17f      	b.n	8000a5c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	2101      	movs	r1, #1
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	fa01 f303 	lsl.w	r3, r1, r3
 8000768:	4013      	ands	r3, r2
 800076a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2b00      	cmp	r3, #0
 8000770:	f000 8171 	beq.w	8000a56 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	f003 0303 	and.w	r3, r3, #3
 800077c:	2b01      	cmp	r3, #1
 800077e:	d005      	beq.n	800078c <HAL_GPIO_Init+0x40>
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	f003 0303 	and.w	r3, r3, #3
 8000788:	2b02      	cmp	r3, #2
 800078a:	d130      	bne.n	80007ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	2203      	movs	r2, #3
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	43db      	mvns	r3, r3
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	4013      	ands	r3, r2
 80007a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	693a      	ldr	r2, [r7, #16]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	693a      	ldr	r2, [r7, #16]
 80007ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007c2:	2201      	movs	r2, #1
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43db      	mvns	r3, r3
 80007cc:	693a      	ldr	r2, [r7, #16]
 80007ce:	4013      	ands	r3, r2
 80007d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	091b      	lsrs	r3, r3, #4
 80007d8:	f003 0201 	and.w	r2, r3, #1
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	693a      	ldr	r2, [r7, #16]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f003 0303 	and.w	r3, r3, #3
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	d118      	bne.n	800082c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000800:	2201      	movs	r2, #1
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	43db      	mvns	r3, r3
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	4013      	ands	r3, r2
 800080e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	08db      	lsrs	r3, r3, #3
 8000816:	f003 0201 	and.w	r2, r3, #1
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	693a      	ldr	r2, [r7, #16]
 8000822:	4313      	orrs	r3, r2
 8000824:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	f003 0303 	and.w	r3, r3, #3
 8000834:	2b03      	cmp	r3, #3
 8000836:	d017      	beq.n	8000868 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	2203      	movs	r2, #3
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	43db      	mvns	r3, r3
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	4013      	ands	r3, r2
 800084e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	689a      	ldr	r2, [r3, #8]
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	693a      	ldr	r2, [r7, #16]
 800085e:	4313      	orrs	r3, r2
 8000860:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	693a      	ldr	r2, [r7, #16]
 8000866:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	f003 0303 	and.w	r3, r3, #3
 8000870:	2b02      	cmp	r3, #2
 8000872:	d123      	bne.n	80008bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	08da      	lsrs	r2, r3, #3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3208      	adds	r2, #8
 800087c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000880:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	f003 0307 	and.w	r3, r3, #7
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	220f      	movs	r2, #15
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	43db      	mvns	r3, r3
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	4013      	ands	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	691a      	ldr	r2, [r3, #16]
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	08da      	lsrs	r2, r3, #3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3208      	adds	r2, #8
 80008b6:	6939      	ldr	r1, [r7, #16]
 80008b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	2203      	movs	r2, #3
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	f003 0203 	and.w	r2, r3, #3
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	f000 80ac 	beq.w	8000a56 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	4b5f      	ldr	r3, [pc, #380]	; (8000a7c <HAL_GPIO_Init+0x330>)
 8000900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000902:	4a5e      	ldr	r2, [pc, #376]	; (8000a7c <HAL_GPIO_Init+0x330>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6613      	str	r3, [r2, #96]	; 0x60
 800090a:	4b5c      	ldr	r3, [pc, #368]	; (8000a7c <HAL_GPIO_Init+0x330>)
 800090c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000916:	4a5a      	ldr	r2, [pc, #360]	; (8000a80 <HAL_GPIO_Init+0x334>)
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	089b      	lsrs	r3, r3, #2
 800091c:	3302      	adds	r3, #2
 800091e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000922:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	f003 0303 	and.w	r3, r3, #3
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	220f      	movs	r2, #15
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4013      	ands	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000940:	d025      	beq.n	800098e <HAL_GPIO_Init+0x242>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a4f      	ldr	r2, [pc, #316]	; (8000a84 <HAL_GPIO_Init+0x338>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d01f      	beq.n	800098a <HAL_GPIO_Init+0x23e>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a4e      	ldr	r2, [pc, #312]	; (8000a88 <HAL_GPIO_Init+0x33c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d019      	beq.n	8000986 <HAL_GPIO_Init+0x23a>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a4d      	ldr	r2, [pc, #308]	; (8000a8c <HAL_GPIO_Init+0x340>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d013      	beq.n	8000982 <HAL_GPIO_Init+0x236>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a4c      	ldr	r2, [pc, #304]	; (8000a90 <HAL_GPIO_Init+0x344>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d00d      	beq.n	800097e <HAL_GPIO_Init+0x232>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a4b      	ldr	r2, [pc, #300]	; (8000a94 <HAL_GPIO_Init+0x348>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d007      	beq.n	800097a <HAL_GPIO_Init+0x22e>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a4a      	ldr	r2, [pc, #296]	; (8000a98 <HAL_GPIO_Init+0x34c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d101      	bne.n	8000976 <HAL_GPIO_Init+0x22a>
 8000972:	2306      	movs	r3, #6
 8000974:	e00c      	b.n	8000990 <HAL_GPIO_Init+0x244>
 8000976:	2307      	movs	r3, #7
 8000978:	e00a      	b.n	8000990 <HAL_GPIO_Init+0x244>
 800097a:	2305      	movs	r3, #5
 800097c:	e008      	b.n	8000990 <HAL_GPIO_Init+0x244>
 800097e:	2304      	movs	r3, #4
 8000980:	e006      	b.n	8000990 <HAL_GPIO_Init+0x244>
 8000982:	2303      	movs	r3, #3
 8000984:	e004      	b.n	8000990 <HAL_GPIO_Init+0x244>
 8000986:	2302      	movs	r3, #2
 8000988:	e002      	b.n	8000990 <HAL_GPIO_Init+0x244>
 800098a:	2301      	movs	r3, #1
 800098c:	e000      	b.n	8000990 <HAL_GPIO_Init+0x244>
 800098e:	2300      	movs	r3, #0
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	f002 0203 	and.w	r2, r2, #3
 8000996:	0092      	lsls	r2, r2, #2
 8000998:	4093      	lsls	r3, r2
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009a0:	4937      	ldr	r1, [pc, #220]	; (8000a80 <HAL_GPIO_Init+0x334>)
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	089b      	lsrs	r3, r3, #2
 80009a6:	3302      	adds	r3, #2
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009ae:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <HAL_GPIO_Init+0x350>)
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	43db      	mvns	r3, r3
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	4013      	ands	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d003      	beq.n	80009d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009d2:	4a32      	ldr	r2, [pc, #200]	; (8000a9c <HAL_GPIO_Init+0x350>)
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009d8:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <HAL_GPIO_Init+0x350>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	43db      	mvns	r3, r3
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	4013      	ands	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d003      	beq.n	80009fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80009fc:	4a27      	ldr	r2, [pc, #156]	; (8000a9c <HAL_GPIO_Init+0x350>)
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a02:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <HAL_GPIO_Init+0x350>)
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d003      	beq.n	8000a26 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a26:	4a1d      	ldr	r2, [pc, #116]	; (8000a9c <HAL_GPIO_Init+0x350>)
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <HAL_GPIO_Init+0x350>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	43db      	mvns	r3, r3
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d003      	beq.n	8000a50 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a50:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <HAL_GPIO_Init+0x350>)
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	fa22 f303 	lsr.w	r3, r2, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f47f ae78 	bne.w	800075c <HAL_GPIO_Init+0x10>
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	371c      	adds	r7, #28
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010000 	.word	0x40010000
 8000a84:	48000400 	.word	0x48000400
 8000a88:	48000800 	.word	0x48000800
 8000a8c:	48000c00 	.word	0x48000c00
 8000a90:	48001000 	.word	0x48001000
 8000a94:	48001400 	.word	0x48001400
 8000a98:	48001800 	.word	0x48001800
 8000a9c:	40010400 	.word	0x40010400

08000aa0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa2:	b08f      	sub	sp, #60	; 0x3c
 8000aa4:	af0a      	add	r7, sp, #40	; 0x28
 8000aa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d101      	bne.n	8000ab2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e116      	b.n	8000ce0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d106      	bne.n	8000ad2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f007 fba9 	bl	8008224 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d102      	bne.n	8000aec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f002 fd86 	bl	8003602 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	687e      	ldr	r6, [r7, #4]
 8000afe:	466d      	mov	r5, sp
 8000b00:	f106 0410 	add.w	r4, r6, #16
 8000b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b10:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b14:	1d33      	adds	r3, r6, #4
 8000b16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b18:	6838      	ldr	r0, [r7, #0]
 8000b1a:	f002 fc99 	bl	8003450 <USB_CoreInit>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d005      	beq.n	8000b30 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2202      	movs	r2, #2
 8000b28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e0d7      	b.n	8000ce0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f002 fd74 	bl	8003624 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	e04a      	b.n	8000bd8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b42:	7bfa      	ldrb	r2, [r7, #15]
 8000b44:	6879      	ldr	r1, [r7, #4]
 8000b46:	4613      	mov	r3, r2
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	4413      	add	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	440b      	add	r3, r1
 8000b50:	333d      	adds	r3, #61	; 0x3d
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b56:	7bfa      	ldrb	r2, [r7, #15]
 8000b58:	6879      	ldr	r1, [r7, #4]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	4413      	add	r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	440b      	add	r3, r1
 8000b64:	333c      	adds	r3, #60	; 0x3c
 8000b66:	7bfa      	ldrb	r2, [r7, #15]
 8000b68:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b6a:	7bfa      	ldrb	r2, [r7, #15]
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	b298      	uxth	r0, r3
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	4613      	mov	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	4413      	add	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	3356      	adds	r3, #86	; 0x56
 8000b7e:	4602      	mov	r2, r0
 8000b80:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b82:	7bfa      	ldrb	r2, [r7, #15]
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	4613      	mov	r3, r2
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	440b      	add	r3, r1
 8000b90:	3340      	adds	r3, #64	; 0x40
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b96:	7bfa      	ldrb	r2, [r7, #15]
 8000b98:	6879      	ldr	r1, [r7, #4]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	4413      	add	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	3344      	adds	r3, #68	; 0x44
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000baa:	7bfa      	ldrb	r2, [r7, #15]
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	4413      	add	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	3348      	adds	r3, #72	; 0x48
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000bbe:	7bfa      	ldrb	r2, [r7, #15]
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4413      	add	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	440b      	add	r3, r1
 8000bcc:	334c      	adds	r3, #76	; 0x4c
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
 8000bd8:	7bfa      	ldrb	r2, [r7, #15]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d3af      	bcc.n	8000b42 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000be2:	2300      	movs	r3, #0
 8000be4:	73fb      	strb	r3, [r7, #15]
 8000be6:	e044      	b.n	8000c72 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000be8:	7bfa      	ldrb	r2, [r7, #15]
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	4613      	mov	r3, r2
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	4413      	add	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000bfe:	7bfa      	ldrb	r2, [r7, #15]
 8000c00:	6879      	ldr	r1, [r7, #4]
 8000c02:	4613      	mov	r3, r2
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	4413      	add	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000c10:	7bfa      	ldrb	r2, [r7, #15]
 8000c12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c14:	7bfa      	ldrb	r2, [r7, #15]
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	440b      	add	r3, r1
 8000c22:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c2a:	7bfa      	ldrb	r2, [r7, #15]
 8000c2c:	6879      	ldr	r1, [r7, #4]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	4413      	add	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	440b      	add	r3, r1
 8000c38:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c40:	7bfa      	ldrb	r2, [r7, #15]
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	4613      	mov	r3, r2
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	4413      	add	r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c56:	7bfa      	ldrb	r2, [r7, #15]
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	4413      	add	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	440b      	add	r3, r1
 8000c64:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
 8000c72:	7bfa      	ldrb	r2, [r7, #15]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d3b5      	bcc.n	8000be8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	687e      	ldr	r6, [r7, #4]
 8000c84:	466d      	mov	r5, sp
 8000c86:	f106 0410 	add.w	r4, r6, #16
 8000c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c96:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c9a:	1d33      	adds	r3, r6, #4
 8000c9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c9e:	6838      	ldr	r0, [r7, #0]
 8000ca0:	f002 fd0c 	bl	80036bc <USB_DevInit>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d005      	beq.n	8000cb6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2202      	movs	r2, #2
 8000cae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e014      	b.n	8000ce0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d102      	bne.n	8000cd4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f001 f896 	bl	8001e00 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 fcba 	bl	8004652 <USB_DevDisconnect>

  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ce8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d101      	bne.n	8000d04 <HAL_PCD_Start+0x1c>
 8000d00:	2302      	movs	r3, #2
 8000d02:	e01c      	b.n	8000d3e <HAL_PCD_Start+0x56>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2201      	movs	r2, #1
 8000d08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d105      	bne.n	8000d20 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f002 fc5b 	bl	80035e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f003 fc6e 	bl	8004610 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d46:	b590      	push	{r4, r7, lr}
 8000d48:	b08d      	sub	sp, #52	; 0x34
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000d54:	6a3b      	ldr	r3, [r7, #32]
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 fd2c 	bl	80047ba <USB_GetMode>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f040 847e 	bne.w	8001666 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f003 fc90 	bl	8004694 <USB_ReadInterrupts>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 8474 	beq.w	8001664 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f003 fc7d 	bl	8004694 <USB_ReadInterrupts>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d107      	bne.n	8000db4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	695a      	ldr	r2, [r3, #20]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f002 0202 	and.w	r2, r2, #2
 8000db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f003 fc6b 	bl	8004694 <USB_ReadInterrupts>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	f003 0310 	and.w	r3, r3, #16
 8000dc4:	2b10      	cmp	r3, #16
 8000dc6:	d161      	bne.n	8000e8c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	699a      	ldr	r2, [r3, #24]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f022 0210 	bic.w	r2, r2, #16
 8000dd6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000dd8:	6a3b      	ldr	r3, [r7, #32]
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	f003 020f 	and.w	r2, r3, #15
 8000de4:	4613      	mov	r3, r2
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	4413      	add	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	4413      	add	r3, r2
 8000df4:	3304      	adds	r3, #4
 8000df6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	0c5b      	lsrs	r3, r3, #17
 8000dfc:	f003 030f 	and.w	r3, r3, #15
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d124      	bne.n	8000e4e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d035      	beq.n	8000e7c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	091b      	lsrs	r3, r3, #4
 8000e18:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	461a      	mov	r2, r3
 8000e22:	6a38      	ldr	r0, [r7, #32]
 8000e24:	f003 faa2 	bl	800436c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e34:	441a      	add	r2, r3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	695a      	ldr	r2, [r3, #20]
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	091b      	lsrs	r3, r3, #4
 8000e42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e46:	441a      	add	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	615a      	str	r2, [r3, #20]
 8000e4c:	e016      	b.n	8000e7c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	0c5b      	lsrs	r3, r3, #17
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d110      	bne.n	8000e7c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8000e60:	2208      	movs	r2, #8
 8000e62:	4619      	mov	r1, r3
 8000e64:	6a38      	ldr	r0, [r7, #32]
 8000e66:	f003 fa81 	bl	800436c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	695a      	ldr	r2, [r3, #20]
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	091b      	lsrs	r3, r3, #4
 8000e72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e76:	441a      	add	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	699a      	ldr	r2, [r3, #24]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 0210 	orr.w	r2, r2, #16
 8000e8a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f003 fbff 	bl	8004694 <USB_ReadInterrupts>
 8000e96:	4603      	mov	r3, r0
 8000e98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000ea0:	f040 80a7 	bne.w	8000ff2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f003 fc04 	bl	80046ba <USB_ReadDevAllOutEpInterrupt>
 8000eb2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000eb4:	e099      	b.n	8000fea <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 808e 	beq.w	8000fde <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f003 fc28 	bl	8004722 <USB_ReadDevOutEPInterrupt>
 8000ed2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00c      	beq.n	8000ef8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee0:	015a      	lsls	r2, r3, #5
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000eea:	461a      	mov	r2, r3
 8000eec:	2301      	movs	r3, #1
 8000eee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 feaa 	bl	8001c4c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00c      	beq.n	8000f1c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	015a      	lsls	r2, r3, #5
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	4413      	add	r3, r2
 8000f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f0e:	461a      	mov	r2, r3
 8000f10:	2308      	movs	r3, #8
 8000f12:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000f14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 fee6 	bl	8001ce8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d008      	beq.n	8000f38 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	015a      	lsls	r2, r3, #5
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f32:	461a      	mov	r2, r3
 8000f34:	2310      	movs	r3, #16
 8000f36:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d030      	beq.n	8000fa4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8000f42:	6a3b      	ldr	r3, [r7, #32]
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4a:	2b80      	cmp	r3, #128	; 0x80
 8000f4c:	d109      	bne.n	8000f62 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	69fa      	ldr	r2, [r7, #28]
 8000f58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000f5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f60:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8000f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f64:	4613      	mov	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	4413      	add	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	3304      	adds	r3, #4
 8000f76:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	78db      	ldrb	r3, [r3, #3]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d108      	bne.n	8000f92 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	2200      	movs	r2, #0
 8000f84:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f007 fa9d 	bl	80084cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	015a      	lsls	r2, r3, #5
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	4413      	add	r3, r2
 8000f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	f003 0320 	and.w	r3, r3, #32
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d008      	beq.n	8000fc0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	015a      	lsls	r2, r3, #5
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fba:	461a      	mov	r2, r3
 8000fbc:	2320      	movs	r3, #32
 8000fbe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d009      	beq.n	8000fde <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	015a      	lsls	r2, r3, #5
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fdc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe6:	085b      	lsrs	r3, r3, #1
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8000fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f47f af62 	bne.w	8000eb6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 fb4c 	bl	8004694 <USB_ReadInterrupts>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001002:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001006:	f040 80a4 	bne.w	8001152 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f003 fb6d 	bl	80046ee <USB_ReadDevAllInEpInterrupt>
 8001014:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800101a:	e096      	b.n	800114a <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 808b 	beq.w	800113e <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	4611      	mov	r1, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f003 fb93 	bl	800475e <USB_ReadDevInEPInterrupt>
 8001038:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d020      	beq.n	8001086 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	2201      	movs	r2, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	43db      	mvns	r3, r3
 800105e:	69f9      	ldr	r1, [r7, #28]
 8001060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001064:	4013      	ands	r3, r2
 8001066:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106a:	015a      	lsls	r2, r3, #5
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	4413      	add	r3, r2
 8001070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001074:	461a      	mov	r2, r3
 8001076:	2301      	movs	r3, #1
 8001078:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4619      	mov	r1, r3
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f007 f98e 	bl	80083a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	f003 0308 	and.w	r3, r3, #8
 800108c:	2b00      	cmp	r3, #0
 800108e:	d008      	beq.n	80010a2 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	015a      	lsls	r2, r3, #5
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	4413      	add	r3, r2
 8001098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800109c:	461a      	mov	r2, r3
 800109e:	2308      	movs	r3, #8
 80010a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	f003 0310 	and.w	r3, r3, #16
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d008      	beq.n	80010be <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	015a      	lsls	r2, r3, #5
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	4413      	add	r3, r2
 80010b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010b8:	461a      	mov	r2, r3
 80010ba:	2310      	movs	r3, #16
 80010bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d008      	beq.n	80010da <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	015a      	lsls	r2, r3, #5
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	4413      	add	r3, r2
 80010d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010d4:	461a      	mov	r2, r3
 80010d6:	2340      	movs	r3, #64	; 0x40
 80010d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d023      	beq.n	800112c <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80010e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010e6:	6a38      	ldr	r0, [r7, #32]
 80010e8:	f002 fc2a 	bl	8003940 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80010ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ee:	4613      	mov	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	4413      	add	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	3338      	adds	r3, #56	; 0x38
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	3304      	adds	r3, #4
 80010fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	78db      	ldrb	r3, [r3, #3]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d108      	bne.n	800111a <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	2200      	movs	r2, #0
 800110c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4619      	mov	r1, r3
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f007 f9eb 	bl	80084f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	015a      	lsls	r2, r3, #5
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	4413      	add	r3, r2
 8001122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001126:	461a      	mov	r2, r3
 8001128:	2302      	movs	r3, #2
 800112a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001136:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 fcff 	bl	8001b3c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	3301      	adds	r3, #1
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001146:	085b      	lsrs	r3, r3, #1
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114c:	2b00      	cmp	r3, #0
 800114e:	f47f af65 	bne.w	800101c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f003 fa9c 	bl	8004694 <USB_ReadInterrupts>
 800115c:	4603      	mov	r3, r0
 800115e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001162:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001166:	d122      	bne.n	80011ae <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	69fa      	ldr	r2, [r7, #28]
 8001172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001176:	f023 0301 	bic.w	r3, r3, #1
 800117a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001182:	2b01      	cmp	r3, #1
 8001184:	d108      	bne.n	8001198 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800118e:	2100      	movs	r1, #0
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f007 fc55 	bl	8008a40 <HAL_PCDEx_LPM_Callback>
 8001196:	e002      	b.n	800119e <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f007 f96f 	bl	800847c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	695a      	ldr	r2, [r3, #20]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80011ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f003 fa6e 	bl	8004694 <USB_ReadInterrupts>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011c2:	d112      	bne.n	80011ea <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d102      	bne.n	80011da <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f007 f92b 	bl	8008430 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	695a      	ldr	r2, [r3, #20]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80011e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 fa50 	bl	8004694 <USB_ReadInterrupts>
 80011f4:	4603      	mov	r3, r0
 80011f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80011fe:	d121      	bne.n	8001244 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	695a      	ldr	r2, [r3, #20]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800120e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001216:	2b00      	cmp	r3, #0
 8001218:	d111      	bne.n	800123e <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	f003 020f 	and.w	r2, r3, #15
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001234:	2101      	movs	r1, #1
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f007 fc02 	bl	8008a40 <HAL_PCDEx_LPM_Callback>
 800123c:	e002      	b.n	8001244 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f007 f8f6 	bl	8008430 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f003 fa23 	bl	8004694 <USB_ReadInterrupts>
 800124e:	4603      	mov	r3, r0
 8001250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001258:	f040 80b5 	bne.w	80013c6 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800126a:	f023 0301 	bic.w	r3, r3, #1
 800126e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2110      	movs	r1, #16
 8001276:	4618      	mov	r0, r3
 8001278:	f002 fb62 	bl	8003940 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001280:	e046      	b.n	8001310 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	4413      	add	r3, r2
 800128a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800128e:	461a      	mov	r2, r3
 8001290:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001294:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001298:	015a      	lsls	r2, r3, #5
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	4413      	add	r3, r2
 800129e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012a6:	0151      	lsls	r1, r2, #5
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	440a      	add	r2, r1
 80012ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80012b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80012b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b8:	015a      	lsls	r2, r3, #5
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	4413      	add	r3, r2
 80012be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012c2:	461a      	mov	r2, r3
 80012c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80012ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012cc:	015a      	lsls	r2, r3, #5
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	4413      	add	r3, r2
 80012d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012da:	0151      	lsls	r1, r2, #5
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	440a      	add	r2, r1
 80012e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80012e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80012ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ec:	015a      	lsls	r2, r3, #5
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	4413      	add	r3, r2
 80012f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012fa:	0151      	lsls	r1, r2, #5
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	440a      	add	r2, r1
 8001300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001304:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001308:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800130a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130c:	3301      	adds	r3, #1
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001316:	429a      	cmp	r2, r3
 8001318:	d3b3      	bcc.n	8001282 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	69fa      	ldr	r2, [r7, #28]
 8001324:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001328:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800132c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	2b00      	cmp	r3, #0
 8001334:	d016      	beq.n	8001364 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800133c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001346:	f043 030b 	orr.w	r3, r3, #11
 800134a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800135c:	f043 030b 	orr.w	r3, r3, #11
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	e015      	b.n	8001390 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001372:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001376:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800137a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800138a:	f043 030b 	orr.w	r3, r3, #11
 800138e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800139e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80013a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4610      	mov	r0, r2
 80013b2:	f003 fa33 	bl	800481c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	695a      	ldr	r2, [r3, #20]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80013c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 f962 	bl	8004694 <USB_ReadInterrupts>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013da:	d124      	bne.n	8001426 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f003 f9f8 	bl	80047d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 fb25 	bl	8003a3a <USB_GetDevSpeed>
 80013f0:	4603      	mov	r3, r0
 80013f2:	461a      	mov	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681c      	ldr	r4, [r3, #0]
 80013fc:	f001 fb00 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8001400:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001406:	b2db      	uxtb	r3, r3
 8001408:	461a      	mov	r2, r3
 800140a:	4620      	mov	r0, r4
 800140c:	f002 f84c 	bl	80034a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f006 ffee 	bl	80083f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	695a      	ldr	r2, [r3, #20]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001424:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f003 f932 	bl	8004694 <USB_ReadInterrupts>
 8001430:	4603      	mov	r3, r0
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b08      	cmp	r3, #8
 8001438:	d10a      	bne.n	8001450 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f006 ffcb 	bl	80083d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	695a      	ldr	r2, [r3, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f002 0208 	and.w	r2, r2, #8
 800144e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f003 f91d 	bl	8004694 <USB_ReadInterrupts>
 800145a:	4603      	mov	r3, r0
 800145c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001460:	2b80      	cmp	r3, #128	; 0x80
 8001462:	d122      	bne.n	80014aa <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001470:	2301      	movs	r3, #1
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
 8001474:	e014      	b.n	80014a0 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800147a:	4613      	mov	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d105      	bne.n	800149a <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	b2db      	uxtb	r3, r3
 8001492:	4619      	mov	r1, r3
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 faf3 	bl	8001a80 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	3301      	adds	r3, #1
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d3e5      	bcc.n	8001476 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 f8f0 	bl	8004694 <USB_ReadInterrupts>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014be:	d13b      	bne.n	8001538 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80014c0:	2301      	movs	r3, #1
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
 80014c4:	e02b      	b.n	800151e <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	015a      	lsls	r2, r3, #5
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	4413      	add	r3, r2
 80014ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	3340      	adds	r3, #64	; 0x40
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d115      	bne.n	8001518 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80014ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	da12      	bge.n	8001518 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	333f      	adds	r3, #63	; 0x3f
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800150e:	b2db      	uxtb	r3, r3
 8001510:	4619      	mov	r1, r3
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 fab4 	bl	8001a80 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	3301      	adds	r3, #1
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001524:	429a      	cmp	r2, r3
 8001526:	d3ce      	bcc.n	80014c6 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	695a      	ldr	r2, [r3, #20]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001536:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f003 f8a9 	bl	8004694 <USB_ReadInterrupts>
 8001542:	4603      	mov	r3, r0
 8001544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001548:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800154c:	d155      	bne.n	80015fa <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800154e:	2301      	movs	r3, #1
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
 8001552:	e045      	b.n	80015e0 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	015a      	lsls	r2, r3, #5
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	4413      	add	r3, r2
 800155c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001568:	4613      	mov	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d12e      	bne.n	80015da <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800157c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800157e:	2b00      	cmp	r3, #0
 8001580:	da2b      	bge.n	80015da <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800158e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001592:	429a      	cmp	r2, r3
 8001594:	d121      	bne.n	80015da <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159a:	4613      	mov	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	440b      	add	r3, r1
 80015a4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80015a8:	2201      	movs	r2, #1
 80015aa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10a      	bne.n	80015da <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	69fa      	ldr	r2, [r7, #28]
 80015ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015d6:	6053      	str	r3, [r2, #4]
            break;
 80015d8:	e007      	b.n	80015ea <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	3301      	adds	r3, #1
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d3b4      	bcc.n	8001554 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80015f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f003 f848 	bl	8004694 <USB_ReadInterrupts>
 8001604:	4603      	mov	r3, r0
 8001606:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800160a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800160e:	d10a      	bne.n	8001626 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f006 ff7f 	bl	8008514 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	695a      	ldr	r2, [r3, #20]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001624:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f003 f832 	bl	8004694 <USB_ReadInterrupts>
 8001630:	4603      	mov	r3, r0
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	2b04      	cmp	r3, #4
 8001638:	d115      	bne.n	8001666 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f006 ff6f 	bl	8008530 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	e000      	b.n	8001666 <HAL_PCD_IRQHandler+0x920>
      return;
 8001664:	bf00      	nop
    }
  }
}
 8001666:	3734      	adds	r7, #52	; 0x34
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}

0800166c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_PCD_SetAddress+0x1a>
 8001682:	2302      	movs	r3, #2
 8001684:	e013      	b.n	80016ae <HAL_PCD_SetAddress+0x42>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	78fa      	ldrb	r2, [r7, #3]
 8001692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 ff90 	bl	80045c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	4608      	mov	r0, r1
 80016c0:	4611      	mov	r1, r2
 80016c2:	461a      	mov	r2, r3
 80016c4:	4603      	mov	r3, r0
 80016c6:	70fb      	strb	r3, [r7, #3]
 80016c8:	460b      	mov	r3, r1
 80016ca:	803b      	strh	r3, [r7, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	da0f      	bge.n	80016fc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	f003 020f 	and.w	r2, r3, #15
 80016e2:	4613      	mov	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	3338      	adds	r3, #56	; 0x38
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	4413      	add	r3, r2
 80016f0:	3304      	adds	r3, #4
 80016f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2201      	movs	r2, #1
 80016f8:	705a      	strb	r2, [r3, #1]
 80016fa:	e00f      	b.n	800171c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	f003 020f 	and.w	r2, r3, #15
 8001702:	4613      	mov	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	3304      	adds	r3, #4
 8001714:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	b2da      	uxtb	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001728:	883a      	ldrh	r2, [r7, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	78ba      	ldrb	r2, [r7, #2]
 8001732:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	785b      	ldrb	r3, [r3, #1]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d004      	beq.n	8001746 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b29a      	uxth	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001746:	78bb      	ldrb	r3, [r7, #2]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d102      	bne.n	8001752 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <HAL_PCD_EP_Open+0xaa>
 800175c:	2302      	movs	r3, #2
 800175e:	e00e      	b.n	800177e <HAL_PCD_EP_Open+0xc8>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68f9      	ldr	r1, [r7, #12]
 800176e:	4618      	mov	r0, r3
 8001770:	f002 f982 	bl	8003a78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800177c:	7afb      	ldrb	r3, [r7, #11]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b084      	sub	sp, #16
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	460b      	mov	r3, r1
 8001790:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001792:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001796:	2b00      	cmp	r3, #0
 8001798:	da0f      	bge.n	80017ba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	f003 020f 	and.w	r2, r3, #15
 80017a0:	4613      	mov	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	3338      	adds	r3, #56	; 0x38
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	3304      	adds	r3, #4
 80017b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2201      	movs	r2, #1
 80017b6:	705a      	strb	r2, [r3, #1]
 80017b8:	e00f      	b.n	80017da <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	f003 020f 	and.w	r2, r3, #15
 80017c0:	4613      	mov	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	4413      	add	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	4413      	add	r3, r2
 80017d0:	3304      	adds	r3, #4
 80017d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d101      	bne.n	80017f4 <HAL_PCD_EP_Close+0x6e>
 80017f0:	2302      	movs	r3, #2
 80017f2:	e00e      	b.n	8001812 <HAL_PCD_EP_Close+0x8c>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68f9      	ldr	r1, [r7, #12]
 8001802:	4618      	mov	r0, r3
 8001804:	f002 f9c0 	bl	8003b88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	460b      	mov	r3, r1
 8001828:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800182a:	7afb      	ldrb	r3, [r7, #11]
 800182c:	f003 020f 	and.w	r2, r3, #15
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	3304      	adds	r3, #4
 8001842:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	2200      	movs	r2, #0
 8001854:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2200      	movs	r2, #0
 800185a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800185c:	7afb      	ldrb	r3, [r7, #11]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	b2da      	uxtb	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6979      	ldr	r1, [r7, #20]
 800186e:	4618      	mov	r0, r3
 8001870:	f002 fa66 	bl	8003d40 <USB_EPStartXfer>

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	460b      	mov	r3, r1
 8001888:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	f003 020f 	and.w	r2, r3, #15
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80018a0:	681b      	ldr	r3, [r3, #0]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	460b      	mov	r3, r1
 80018bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018be:	7afb      	ldrb	r3, [r7, #11]
 80018c0:	f003 020f 	and.w	r2, r3, #15
 80018c4:	4613      	mov	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	3338      	adds	r3, #56	; 0x38
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	4413      	add	r3, r2
 80018d2:	3304      	adds	r3, #4
 80018d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	2200      	movs	r2, #0
 80018e6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2201      	movs	r2, #1
 80018ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018ee:	7afb      	ldrb	r3, [r7, #11]
 80018f0:	f003 030f 	and.w	r3, r3, #15
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6979      	ldr	r1, [r7, #20]
 8001900:	4618      	mov	r0, r3
 8001902:	f002 fa1d 	bl	8003d40 <USB_EPStartXfer>

  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800191c:	78fb      	ldrb	r3, [r7, #3]
 800191e:	f003 020f 	and.w	r2, r3, #15
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	429a      	cmp	r2, r3
 8001928:	d901      	bls.n	800192e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e04e      	b.n	80019cc <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800192e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001932:	2b00      	cmp	r3, #0
 8001934:	da0f      	bge.n	8001956 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	f003 020f 	and.w	r2, r3, #15
 800193c:	4613      	mov	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	3338      	adds	r3, #56	; 0x38
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	3304      	adds	r3, #4
 800194c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2201      	movs	r2, #1
 8001952:	705a      	strb	r2, [r3, #1]
 8001954:	e00d      	b.n	8001972 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	4613      	mov	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	4413      	add	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	4413      	add	r3, r2
 8001968:	3304      	adds	r3, #4
 800196a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2201      	movs	r2, #1
 8001976:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	b2da      	uxtb	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_PCD_EP_SetStall+0x82>
 800198e:	2302      	movs	r3, #2
 8001990:	e01c      	b.n	80019cc <HAL_PCD_EP_SetStall+0xbc>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68f9      	ldr	r1, [r7, #12]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fd3b 	bl	800441c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d108      	bne.n	80019c2 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80019ba:	4619      	mov	r1, r3
 80019bc:	4610      	mov	r0, r2
 80019be:	f002 ff2d 	bl	800481c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	f003 020f 	and.w	r2, r3, #15
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d901      	bls.n	80019f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e042      	b.n	8001a78 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	da0f      	bge.n	8001a1a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	f003 020f 	and.w	r2, r3, #15
 8001a00:	4613      	mov	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	3338      	adds	r3, #56	; 0x38
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3304      	adds	r3, #4
 8001a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2201      	movs	r2, #1
 8001a16:	705a      	strb	r2, [r3, #1]
 8001a18:	e00f      	b.n	8001a3a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	f003 020f 	and.w	r2, r3, #15
 8001a20:	4613      	mov	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4413      	add	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	3304      	adds	r3, #4
 8001a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_PCD_EP_ClrStall+0x86>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e00e      	b.n	8001a78 <HAL_PCD_EP_ClrStall+0xa4>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68f9      	ldr	r1, [r7, #12]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f002 fd45 	bl	80044f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001a8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	da0c      	bge.n	8001aae <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	f003 020f 	and.w	r2, r3, #15
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	3338      	adds	r3, #56	; 0x38
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	e00c      	b.n	8001ac8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	f003 020f 	and.w	r2, r3, #15
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68f9      	ldr	r1, [r7, #12]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 fb68 	bl	80041a4 <USB_EPStopXfer>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001ad8:	7afb      	ldrb	r3, [r7, #11]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	460b      	mov	r3, r1
 8001aec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <HAL_PCD_EP_Flush+0x1a>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e01b      	b.n	8001b34 <HAL_PCD_EP_Flush+0x52>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8001b04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	da09      	bge.n	8001b20 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	4619      	mov	r1, r3
 8001b18:	4610      	mov	r0, r2
 8001b1a:	f001 ff11 	bl	8003940 <USB_FlushTxFifo>
 8001b1e:	e004      	b.n	8001b2a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f001 ff3f 	bl	80039a8 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	3338      	adds	r3, #56	; 0x38
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	3304      	adds	r3, #4
 8001b62:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d901      	bls.n	8001b74 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e067      	b.n	8001c44 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d902      	bls.n	8001b90 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	3303      	adds	r3, #3
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001b98:	e026      	b.n	8001be8 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	691a      	ldr	r2, [r3, #16]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d902      	bls.n	8001bb6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3303      	adds	r3, #3
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	68d9      	ldr	r1, [r3, #12]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	6978      	ldr	r0, [r7, #20]
 8001bcc:	f002 fb94 	bl	80042f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	441a      	add	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	695a      	ldr	r2, [r3, #20]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	441a      	add	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	015a      	lsls	r2, r3, #5
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4413      	add	r3, r2
 8001bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d809      	bhi.n	8001c12 <PCD_WriteEmptyTxFifo+0xd6>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d203      	bcs.n	8001c12 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1c3      	bne.n	8001b9a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	691a      	ldr	r2, [r3, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d811      	bhi.n	8001c42 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	2201      	movs	r2, #1
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	6939      	ldr	r1, [r7, #16]
 8001c3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c3e:	4013      	ands	r3, r2
 8001c40:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3720      	adds	r7, #32
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	333c      	adds	r3, #60	; 0x3c
 8001c64:	3304      	adds	r3, #4
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	015a      	lsls	r2, r3, #5
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4413      	add	r3, r2
 8001c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4a19      	ldr	r2, [pc, #100]	; (8001ce4 <PCD_EP_OutXfrComplete_int+0x98>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d124      	bne.n	8001ccc <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00a      	beq.n	8001ca2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	015a      	lsls	r2, r3, #5
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4413      	add	r3, r2
 8001c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c98:	461a      	mov	r2, r3
 8001c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c9e:	6093      	str	r3, [r2, #8]
 8001ca0:	e01a      	b.n	8001cd8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f003 0320 	and.w	r3, r3, #32
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	015a      	lsls	r2, r3, #5
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb8:	461a      	mov	r2, r3
 8001cba:	2320      	movs	r3, #32
 8001cbc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f006 fb51 	bl	800836c <HAL_PCD_DataOutStageCallback>
 8001cca:	e005      	b.n	8001cd8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f006 fb4a 	bl	800836c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	4f54310a 	.word	0x4f54310a

08001ce8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	333c      	adds	r3, #60	; 0x3c
 8001d00:	3304      	adds	r3, #4
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <PCD_EP_OutSetupPacket_int+0x64>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d90e      	bls.n	8001d3c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d009      	beq.n	8001d3c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	015a      	lsls	r2, r3, #5
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d34:	461a      	mov	r2, r3
 8001d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d3a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f006 fb03 	bl	8008348 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	4f54300a 	.word	0x4f54300a

08001d50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	70fb      	strb	r3, [r7, #3]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d107      	bne.n	8001d7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001d6e:	883b      	ldrh	r3, [r7, #0]
 8001d70:	0419      	lsls	r1, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	629a      	str	r2, [r3, #40]	; 0x28
 8001d7c:	e028      	b.n	8001dd0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	0c1b      	lsrs	r3, r3, #16
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	4413      	add	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	e00d      	b.n	8001dae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	3340      	adds	r3, #64	; 0x40
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	0c1b      	lsrs	r3, r3, #16
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	4413      	add	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	3301      	adds	r3, #1
 8001dac:	73fb      	strb	r3, [r7, #15]
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d3ec      	bcc.n	8001d92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001db8:	883b      	ldrh	r3, [r7, #0]
 8001dba:	0418      	lsls	r0, r3, #16
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6819      	ldr	r1, [r3, #0]
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	4302      	orrs	r2, r0
 8001dc8:	3340      	adds	r3, #64	; 0x40
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	460b      	mov	r3, r1
 8001de8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e32:	f043 0303 	orr.w	r3, r3, #3
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40007000 	.word	0x40007000

08001e64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e72:	d130      	bne.n	8001ed6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e74:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e80:	d038      	beq.n	8001ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e8a:	4a1e      	ldr	r2, [pc, #120]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2232      	movs	r2, #50	; 0x32
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	4a1b      	ldr	r2, [pc, #108]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	0c9b      	lsrs	r3, r3, #18
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ea8:	e002      	b.n	8001eb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ebc:	d102      	bne.n	8001ec4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f2      	bne.n	8001eaa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed0:	d110      	bne.n	8001ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e00f      	b.n	8001ef6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee2:	d007      	beq.n	8001ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eec:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ef2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40007000 	.word	0x40007000
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	431bde83 	.word	0x431bde83

08001f10 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_PWREx_EnableVddUSB+0x1c>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <HAL_PWREx_EnableVddUSB+0x1c>)
 8001f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1e:	6053      	str	r3, [r2, #4]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40007000 	.word	0x40007000

08001f30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e3ca      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f42:	4b97      	ldr	r3, [pc, #604]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f4c:	4b94      	ldr	r3, [pc, #592]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80e4 	beq.w	800212c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d007      	beq.n	8001f7a <HAL_RCC_OscConfig+0x4a>
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	2b0c      	cmp	r3, #12
 8001f6e:	f040 808b 	bne.w	8002088 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	f040 8087 	bne.w	8002088 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f7a:	4b89      	ldr	r3, [pc, #548]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_RCC_OscConfig+0x62>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e3a2      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1a      	ldr	r2, [r3, #32]
 8001f96:	4b82      	ldr	r3, [pc, #520]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d004      	beq.n	8001fac <HAL_RCC_OscConfig+0x7c>
 8001fa2:	4b7f      	ldr	r3, [pc, #508]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001faa:	e005      	b.n	8001fb8 <HAL_RCC_OscConfig+0x88>
 8001fac:	4b7c      	ldr	r3, [pc, #496]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb2:	091b      	lsrs	r3, r3, #4
 8001fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d223      	bcs.n	8002004 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fd29 	bl	8002a18 <RCC_SetFlashLatencyFromMSIRange>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e383      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd0:	4b73      	ldr	r3, [pc, #460]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a72      	ldr	r2, [pc, #456]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001fd6:	f043 0308 	orr.w	r3, r3, #8
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b70      	ldr	r3, [pc, #448]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	496d      	ldr	r1, [pc, #436]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fee:	4b6c      	ldr	r3, [pc, #432]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	4968      	ldr	r1, [pc, #416]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
 8002002:	e025      	b.n	8002050 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002004:	4b66      	ldr	r3, [pc, #408]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a65      	ldr	r2, [pc, #404]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 800200a:	f043 0308 	orr.w	r3, r3, #8
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b63      	ldr	r3, [pc, #396]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4960      	ldr	r1, [pc, #384]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002022:	4b5f      	ldr	r3, [pc, #380]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	495b      	ldr	r1, [pc, #364]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002032:	4313      	orrs	r3, r2
 8002034:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d109      	bne.n	8002050 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fce9 	bl	8002a18 <RCC_SetFlashLatencyFromMSIRange>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e343      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002050:	f000 fc4a 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 8002054:	4602      	mov	r2, r0
 8002056:	4b52      	ldr	r3, [pc, #328]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	091b      	lsrs	r3, r3, #4
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	4950      	ldr	r1, [pc, #320]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8002062:	5ccb      	ldrb	r3, [r1, r3]
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	fa22 f303 	lsr.w	r3, r2, r3
 800206c:	4a4e      	ldr	r2, [pc, #312]	; (80021a8 <HAL_RCC_OscConfig+0x278>)
 800206e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002070:	4b4e      	ldr	r3, [pc, #312]	; (80021ac <HAL_RCC_OscConfig+0x27c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe f9d7 	bl	8000428 <HAL_InitTick>
 800207a:	4603      	mov	r3, r0
 800207c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d052      	beq.n	800212a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	e327      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d032      	beq.n	80020f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002090:	4b43      	ldr	r3, [pc, #268]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a42      	ldr	r2, [pc, #264]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800209c:	f7fe fa14 	bl	80004c8 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020a4:	f7fe fa10 	bl	80004c8 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e310      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020b6:	4b3a      	ldr	r3, [pc, #232]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c2:	4b37      	ldr	r3, [pc, #220]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a36      	ldr	r2, [pc, #216]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020c8:	f043 0308 	orr.w	r3, r3, #8
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4931      	ldr	r1, [pc, #196]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e0:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	492c      	ldr	r1, [pc, #176]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
 80020f4:	e01a      	b.n	800212c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020f6:	4b2a      	ldr	r3, [pc, #168]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a29      	ldr	r2, [pc, #164]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002102:	f7fe f9e1 	bl	80004c8 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800210a:	f7fe f9dd 	bl	80004c8 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e2dd      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800211c:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f0      	bne.n	800210a <HAL_RCC_OscConfig+0x1da>
 8002128:	e000      	b.n	800212c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800212a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d074      	beq.n	8002222 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2b08      	cmp	r3, #8
 800213c:	d005      	beq.n	800214a <HAL_RCC_OscConfig+0x21a>
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b0c      	cmp	r3, #12
 8002142:	d10e      	bne.n	8002162 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b03      	cmp	r3, #3
 8002148:	d10b      	bne.n	8002162 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d064      	beq.n	8002220 <HAL_RCC_OscConfig+0x2f0>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d160      	bne.n	8002220 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e2ba      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216a:	d106      	bne.n	800217a <HAL_RCC_OscConfig+0x24a>
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0b      	ldr	r2, [pc, #44]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	e026      	b.n	80021c8 <HAL_RCC_OscConfig+0x298>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002182:	d115      	bne.n	80021b0 <HAL_RCC_OscConfig+0x280>
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 800218a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a02      	ldr	r2, [pc, #8]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	e014      	b.n	80021c8 <HAL_RCC_OscConfig+0x298>
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08008be8 	.word	0x08008be8
 80021a8:	20000000 	.word	0x20000000
 80021ac:	20000004 	.word	0x20000004
 80021b0:	4ba0      	ldr	r3, [pc, #640]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a9f      	ldr	r2, [pc, #636]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80021b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b9d      	ldr	r3, [pc, #628]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a9c      	ldr	r2, [pc, #624]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80021c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe f97a 	bl	80004c8 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d8:	f7fe f976 	bl	80004c8 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e276      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ea:	4b92      	ldr	r3, [pc, #584]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x2a8>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7fe f966 	bl	80004c8 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7fe f962 	bl	80004c8 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e262      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002212:	4b88      	ldr	r3, [pc, #544]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x2d0>
 800221e:	e000      	b.n	8002222 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d060      	beq.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	2b04      	cmp	r3, #4
 8002232:	d005      	beq.n	8002240 <HAL_RCC_OscConfig+0x310>
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d119      	bne.n	800226e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d116      	bne.n	800226e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002240:	4b7c      	ldr	r3, [pc, #496]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_OscConfig+0x328>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e23f      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002258:	4b76      	ldr	r3, [pc, #472]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	4973      	ldr	r1, [pc, #460]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800226c:	e040      	b.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d023      	beq.n	80022be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002276:	4b6f      	ldr	r3, [pc, #444]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a6e      	ldr	r2, [pc, #440]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002282:	f7fe f921 	bl	80004c8 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228a:	f7fe f91d 	bl	80004c8 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e21d      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800229c:	4b65      	ldr	r3, [pc, #404]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a8:	4b62      	ldr	r3, [pc, #392]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	061b      	lsls	r3, r3, #24
 80022b6:	495f      	ldr	r1, [pc, #380]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]
 80022bc:	e018      	b.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022be:	4b5d      	ldr	r3, [pc, #372]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a5c      	ldr	r2, [pc, #368]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80022c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ca:	f7fe f8fd 	bl	80004c8 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d2:	f7fe f8f9 	bl	80004c8 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e1f9      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022e4:	4b53      	ldr	r3, [pc, #332]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f0      	bne.n	80022d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d03c      	beq.n	8002376 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01c      	beq.n	800233e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002304:	4b4b      	ldr	r3, [pc, #300]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800230a:	4a4a      	ldr	r2, [pc, #296]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7fe f8d8 	bl	80004c8 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231c:	f7fe f8d4 	bl	80004c8 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e1d4      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800232e:	4b41      	ldr	r3, [pc, #260]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0ef      	beq.n	800231c <HAL_RCC_OscConfig+0x3ec>
 800233c:	e01b      	b.n	8002376 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233e:	4b3d      	ldr	r3, [pc, #244]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002344:	4a3b      	ldr	r2, [pc, #236]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002346:	f023 0301 	bic.w	r3, r3, #1
 800234a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7fe f8bb 	bl	80004c8 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002356:	f7fe f8b7 	bl	80004c8 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e1b7      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002368:	4b32      	ldr	r3, [pc, #200]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 800236a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1ef      	bne.n	8002356 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80a6 	beq.w	80024d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002384:	2300      	movs	r3, #0
 8002386:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002388:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10d      	bne.n	80023b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002394:	4b27      	ldr	r3, [pc, #156]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	4a26      	ldr	r2, [pc, #152]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 800239a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239e:	6593      	str	r3, [r2, #88]	; 0x58
 80023a0:	4b24      	ldr	r3, [pc, #144]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ac:	2301      	movs	r3, #1
 80023ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b0:	4b21      	ldr	r3, [pc, #132]	; (8002438 <HAL_RCC_OscConfig+0x508>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d118      	bne.n	80023ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_RCC_OscConfig+0x508>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <HAL_RCC_OscConfig+0x508>)
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c8:	f7fe f87e 	bl	80004c8 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d0:	f7fe f87a 	bl	80004c8 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e17a      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_RCC_OscConfig+0x508>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d108      	bne.n	8002408 <HAL_RCC_OscConfig+0x4d8>
 80023f6:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80023f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fc:	4a0d      	ldr	r2, [pc, #52]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002406:	e029      	b.n	800245c <HAL_RCC_OscConfig+0x52c>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b05      	cmp	r3, #5
 800240e:	d115      	bne.n	800243c <HAL_RCC_OscConfig+0x50c>
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002416:	4a07      	ldr	r2, [pc, #28]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002418:	f043 0304 	orr.w	r3, r3, #4
 800241c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002426:	4a03      	ldr	r2, [pc, #12]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002430:	e014      	b.n	800245c <HAL_RCC_OscConfig+0x52c>
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
 8002438:	40007000 	.word	0x40007000
 800243c:	4b9c      	ldr	r3, [pc, #624]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002442:	4a9b      	ldr	r2, [pc, #620]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800244c:	4b98      	ldr	r3, [pc, #608]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002452:	4a97      	ldr	r2, [pc, #604]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 8002454:	f023 0304 	bic.w	r3, r3, #4
 8002458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d016      	beq.n	8002492 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002464:	f7fe f830 	bl	80004c8 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800246a:	e00a      	b.n	8002482 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246c:	f7fe f82c 	bl	80004c8 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e12a      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002482:	4b8b      	ldr	r3, [pc, #556]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 8002484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0ed      	beq.n	800246c <HAL_RCC_OscConfig+0x53c>
 8002490:	e015      	b.n	80024be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002492:	f7fe f819 	bl	80004c8 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe f815 	bl	80004c8 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e113      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024b0:	4b7f      	ldr	r3, [pc, #508]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1ed      	bne.n	800249a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024be:	7ffb      	ldrb	r3, [r7, #31]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d105      	bne.n	80024d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c4:	4b7a      	ldr	r3, [pc, #488]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	4a79      	ldr	r2, [pc, #484]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 80024ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80fe 	beq.w	80026d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	2b02      	cmp	r3, #2
 80024e0:	f040 80d0 	bne.w	8002684 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024e4:	4b72      	ldr	r3, [pc, #456]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f003 0203 	and.w	r2, r3, #3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d130      	bne.n	800255a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	3b01      	subs	r3, #1
 8002504:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002506:	429a      	cmp	r2, r3
 8002508:	d127      	bne.n	800255a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002514:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002516:	429a      	cmp	r2, r3
 8002518:	d11f      	bne.n	800255a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002524:	2a07      	cmp	r2, #7
 8002526:	bf14      	ite	ne
 8002528:	2201      	movne	r2, #1
 800252a:	2200      	moveq	r2, #0
 800252c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800252e:	4293      	cmp	r3, r2
 8002530:	d113      	bne.n	800255a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253c:	085b      	lsrs	r3, r3, #1
 800253e:	3b01      	subs	r3, #1
 8002540:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002542:	429a      	cmp	r2, r3
 8002544:	d109      	bne.n	800255a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	085b      	lsrs	r3, r3, #1
 8002552:	3b01      	subs	r3, #1
 8002554:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d06e      	beq.n	8002638 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	2b0c      	cmp	r3, #12
 800255e:	d069      	beq.n	8002634 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002560:	4b53      	ldr	r3, [pc, #332]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800256c:	4b50      	ldr	r3, [pc, #320]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0ad      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800257c:	4b4c      	ldr	r3, [pc, #304]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a4b      	ldr	r2, [pc, #300]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 8002582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002586:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002588:	f7fd ff9e 	bl	80004c8 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002590:	f7fd ff9a 	bl	80004c8 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e09a      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a2:	4b43      	ldr	r3, [pc, #268]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ae:	4b40      	ldr	r3, [pc, #256]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	4b40      	ldr	r3, [pc, #256]	; (80026b4 <HAL_RCC_OscConfig+0x784>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025be:	3a01      	subs	r2, #1
 80025c0:	0112      	lsls	r2, r2, #4
 80025c2:	4311      	orrs	r1, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025c8:	0212      	lsls	r2, r2, #8
 80025ca:	4311      	orrs	r1, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025d0:	0852      	lsrs	r2, r2, #1
 80025d2:	3a01      	subs	r2, #1
 80025d4:	0552      	lsls	r2, r2, #21
 80025d6:	4311      	orrs	r1, r2
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025dc:	0852      	lsrs	r2, r2, #1
 80025de:	3a01      	subs	r2, #1
 80025e0:	0652      	lsls	r2, r2, #25
 80025e2:	4311      	orrs	r1, r2
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025e8:	0912      	lsrs	r2, r2, #4
 80025ea:	0452      	lsls	r2, r2, #17
 80025ec:	430a      	orrs	r2, r1
 80025ee:	4930      	ldr	r1, [pc, #192]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025f4:	4b2e      	ldr	r3, [pc, #184]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a2d      	ldr	r2, [pc, #180]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 80025fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002600:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4a2a      	ldr	r2, [pc, #168]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 8002606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800260a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800260c:	f7fd ff5c 	bl	80004c8 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7fd ff58 	bl	80004c8 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e058      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002626:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002632:	e050      	b.n	80026d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e04f      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d148      	bne.n	80026d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002644:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a19      	ldr	r2, [pc, #100]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 800264a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800264e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002650:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4a16      	ldr	r2, [pc, #88]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 8002656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800265a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800265c:	f7fd ff34 	bl	80004c8 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002664:	f7fd ff30 	bl	80004c8 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e030      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002676:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x734>
 8002682:	e028      	b.n	80026d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2b0c      	cmp	r3, #12
 8002688:	d023      	beq.n	80026d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a08      	ldr	r2, [pc, #32]	; (80026b0 <HAL_RCC_OscConfig+0x780>)
 8002690:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002696:	f7fd ff17 	bl	80004c8 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800269c:	e00c      	b.n	80026b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269e:	f7fd ff13 	bl	80004c8 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d905      	bls.n	80026b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e013      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
 80026b0:	40021000 	.word	0x40021000
 80026b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b8:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_RCC_OscConfig+0x7b0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1ec      	bne.n	800269e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_RCC_OscConfig+0x7b0>)
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	4905      	ldr	r1, [pc, #20]	; (80026e0 <HAL_RCC_OscConfig+0x7b0>)
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_RCC_OscConfig+0x7b4>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	60cb      	str	r3, [r1, #12]
 80026d0:	e001      	b.n	80026d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3720      	adds	r7, #32
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000
 80026e4:	feeefffc 	.word	0xfeeefffc

080026e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0e7      	b.n	80028cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026fc:	4b75      	ldr	r3, [pc, #468]	; (80028d4 <HAL_RCC_ClockConfig+0x1ec>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d910      	bls.n	800272c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270a:	4b72      	ldr	r3, [pc, #456]	; (80028d4 <HAL_RCC_ClockConfig+0x1ec>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 0207 	bic.w	r2, r3, #7
 8002712:	4970      	ldr	r1, [pc, #448]	; (80028d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	4313      	orrs	r3, r2
 8002718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b6e      	ldr	r3, [pc, #440]	; (80028d4 <HAL_RCC_ClockConfig+0x1ec>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0cf      	b.n	80028cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d010      	beq.n	800275a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	4b66      	ldr	r3, [pc, #408]	; (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002744:	429a      	cmp	r2, r3
 8002746:	d908      	bls.n	800275a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002748:	4b63      	ldr	r3, [pc, #396]	; (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4960      	ldr	r1, [pc, #384]	; (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d04c      	beq.n	8002800 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b03      	cmp	r3, #3
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276e:	4b5a      	ldr	r3, [pc, #360]	; (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d121      	bne.n	80027be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e0a6      	b.n	80028cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002786:	4b54      	ldr	r3, [pc, #336]	; (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d115      	bne.n	80027be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e09a      	b.n	80028cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800279e:	4b4e      	ldr	r3, [pc, #312]	; (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e08e      	b.n	80028cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ae:	4b4a      	ldr	r3, [pc, #296]	; (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e086      	b.n	80028cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027be:	4b46      	ldr	r3, [pc, #280]	; (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f023 0203 	bic.w	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4943      	ldr	r1, [pc, #268]	; (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d0:	f7fd fe7a 	bl	80004c8 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d8:	f7fd fe76 	bl	80004c8 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e06e      	b.n	80028cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	4b3a      	ldr	r3, [pc, #232]	; (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 020c 	and.w	r2, r3, #12
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d1eb      	bne.n	80027d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d010      	beq.n	800282e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	4b31      	ldr	r3, [pc, #196]	; (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002818:	429a      	cmp	r2, r3
 800281a:	d208      	bcs.n	800282e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800281c:	4b2e      	ldr	r3, [pc, #184]	; (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	492b      	ldr	r1, [pc, #172]	; (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800282e:	4b29      	ldr	r3, [pc, #164]	; (80028d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d210      	bcs.n	800285e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283c:	4b25      	ldr	r3, [pc, #148]	; (80028d4 <HAL_RCC_ClockConfig+0x1ec>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 0207 	bic.w	r2, r3, #7
 8002844:	4923      	ldr	r1, [pc, #140]	; (80028d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	4313      	orrs	r3, r2
 800284a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284c:	4b21      	ldr	r3, [pc, #132]	; (80028d4 <HAL_RCC_ClockConfig+0x1ec>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d001      	beq.n	800285e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e036      	b.n	80028cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	2b00      	cmp	r3, #0
 8002868:	d008      	beq.n	800287c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800286a:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	4918      	ldr	r1, [pc, #96]	; (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002878:	4313      	orrs	r3, r2
 800287a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d009      	beq.n	800289c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002888:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4910      	ldr	r1, [pc, #64]	; (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002898:	4313      	orrs	r3, r2
 800289a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800289c:	f000 f824 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <HAL_RCC_ClockConfig+0x1f0>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	490b      	ldr	r1, [pc, #44]	; (80028dc <HAL_RCC_ClockConfig+0x1f4>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
 80028b8:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <HAL_RCC_ClockConfig+0x1f8>)
 80028ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028bc:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_RCC_ClockConfig+0x1fc>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fd fdb1 	bl	8000428 <HAL_InitTick>
 80028c6:	4603      	mov	r3, r0
 80028c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80028ca:	7afb      	ldrb	r3, [r7, #11]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40022000 	.word	0x40022000
 80028d8:	40021000 	.word	0x40021000
 80028dc:	08008be8 	.word	0x08008be8
 80028e0:	20000000 	.word	0x20000000
 80028e4:	20000004 	.word	0x20000004

080028e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	; 0x24
 80028ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f6:	4b3e      	ldr	r3, [pc, #248]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002900:	4b3b      	ldr	r3, [pc, #236]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x34>
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	2b0c      	cmp	r3, #12
 8002914:	d121      	bne.n	800295a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d11e      	bne.n	800295a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800291c:	4b34      	ldr	r3, [pc, #208]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b00      	cmp	r3, #0
 8002926:	d107      	bne.n	8002938 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002928:	4b31      	ldr	r3, [pc, #196]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800292a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	61fb      	str	r3, [r7, #28]
 8002936:	e005      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002938:	4b2d      	ldr	r3, [pc, #180]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002944:	4a2b      	ldr	r2, [pc, #172]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10d      	bne.n	8002970 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002958:	e00a      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	2b04      	cmp	r3, #4
 800295e:	d102      	bne.n	8002966 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002960:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002962:	61bb      	str	r3, [r7, #24]
 8002964:	e004      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2b08      	cmp	r3, #8
 800296a:	d101      	bne.n	8002970 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800296c:	4b23      	ldr	r3, [pc, #140]	; (80029fc <HAL_RCC_GetSysClockFreq+0x114>)
 800296e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	2b0c      	cmp	r3, #12
 8002974:	d134      	bne.n	80029e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002976:	4b1e      	ldr	r3, [pc, #120]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d003      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0xa6>
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b03      	cmp	r3, #3
 800298a:	d003      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0xac>
 800298c:	e005      	b.n	800299a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800298e:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002990:	617b      	str	r3, [r7, #20]
      break;
 8002992:	e005      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002994:	4b19      	ldr	r3, [pc, #100]	; (80029fc <HAL_RCC_GetSysClockFreq+0x114>)
 8002996:	617b      	str	r3, [r7, #20]
      break;
 8002998:	e002      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	617b      	str	r3, [r7, #20]
      break;
 800299e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029a0:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	3301      	adds	r3, #1
 80029ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	0a1b      	lsrs	r3, r3, #8
 80029b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	fb03 f202 	mul.w	r2, r3, r2
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029c6:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	0e5b      	lsrs	r3, r3, #25
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	3301      	adds	r3, #1
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	fbb2 f3f3 	udiv	r3, r2, r3
 80029de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029e0:	69bb      	ldr	r3, [r7, #24]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3724      	adds	r7, #36	; 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	08008bf8 	.word	0x08008bf8
 80029f8:	00f42400 	.word	0x00f42400
 80029fc:	007a1200 	.word	0x007a1200

08002a00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000000 	.word	0x20000000

08002a18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a20:	2300      	movs	r3, #0
 8002a22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a24:	4b2a      	ldr	r3, [pc, #168]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a30:	f7ff fa0a 	bl	8001e48 <HAL_PWREx_GetVoltageRange>
 8002a34:	6178      	str	r0, [r7, #20]
 8002a36:	e014      	b.n	8002a62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a38:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3c:	4a24      	ldr	r2, [pc, #144]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a42:	6593      	str	r3, [r2, #88]	; 0x58
 8002a44:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a50:	f7ff f9fa 	bl	8001e48 <HAL_PWREx_GetVoltageRange>
 8002a54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a56:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a68:	d10b      	bne.n	8002a82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b80      	cmp	r3, #128	; 0x80
 8002a6e:	d919      	bls.n	8002aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2ba0      	cmp	r3, #160	; 0xa0
 8002a74:	d902      	bls.n	8002a7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a76:	2302      	movs	r3, #2
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	e013      	b.n	8002aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	e010      	b.n	8002aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b80      	cmp	r3, #128	; 0x80
 8002a86:	d902      	bls.n	8002a8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a88:	2303      	movs	r3, #3
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	e00a      	b.n	8002aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b80      	cmp	r3, #128	; 0x80
 8002a92:	d102      	bne.n	8002a9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a94:	2302      	movs	r3, #2
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	e004      	b.n	8002aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b70      	cmp	r3, #112	; 0x70
 8002a9e:	d101      	bne.n	8002aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 0207 	bic.w	r2, r3, #7
 8002aac:	4909      	ldr	r1, [pc, #36]	; (8002ad4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ab4:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d001      	beq.n	8002ac6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40022000 	.word	0x40022000

08002ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d041      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002af8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002afc:	d02a      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002afe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b02:	d824      	bhi.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b08:	d008      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b0e:	d81e      	bhi.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b18:	d010      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b1a:	e018      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b1c:	4b86      	ldr	r3, [pc, #536]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a85      	ldr	r2, [pc, #532]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b28:	e015      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 fabb 	bl	80030ac <RCCEx_PLLSAI1_Config>
 8002b36:	4603      	mov	r3, r0
 8002b38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b3a:	e00c      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3320      	adds	r3, #32
 8002b40:	2100      	movs	r1, #0
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fba6 	bl	8003294 <RCCEx_PLLSAI2_Config>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b4c:	e003      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	74fb      	strb	r3, [r7, #19]
      break;
 8002b52:	e000      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b56:	7cfb      	ldrb	r3, [r7, #19]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10b      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b5c:	4b76      	ldr	r3, [pc, #472]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b6a:	4973      	ldr	r1, [pc, #460]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b72:	e001      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b74:	7cfb      	ldrb	r3, [r7, #19]
 8002b76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d041      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b8c:	d02a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b92:	d824      	bhi.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b98:	d008      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b9e:	d81e      	bhi.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00a      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba8:	d010      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002baa:	e018      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bac:	4b62      	ldr	r3, [pc, #392]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4a61      	ldr	r2, [pc, #388]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bb8:	e015      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 fa73 	bl	80030ac <RCCEx_PLLSAI1_Config>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bca:	e00c      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3320      	adds	r3, #32
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 fb5e 	bl	8003294 <RCCEx_PLLSAI2_Config>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bdc:	e003      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	74fb      	strb	r3, [r7, #19]
      break;
 8002be2:	e000      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002be6:	7cfb      	ldrb	r3, [r7, #19]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10b      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bec:	4b52      	ldr	r3, [pc, #328]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bfa:	494f      	ldr	r1, [pc, #316]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c02:	e001      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c04:	7cfb      	ldrb	r3, [r7, #19]
 8002c06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80a0 	beq.w	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c16:	2300      	movs	r3, #0
 8002c18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c1a:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00d      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c30:	4b41      	ldr	r3, [pc, #260]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	4a40      	ldr	r2, [pc, #256]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c3c:	4b3e      	ldr	r3, [pc, #248]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c4c:	4b3b      	ldr	r3, [pc, #236]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a3a      	ldr	r2, [pc, #232]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c58:	f7fd fc36 	bl	80004c8 <HAL_GetTick>
 8002c5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c5e:	e009      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c60:	f7fd fc32 	bl	80004c8 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d902      	bls.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	74fb      	strb	r3, [r7, #19]
        break;
 8002c72:	e005      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c74:	4b31      	ldr	r3, [pc, #196]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0ef      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c80:	7cfb      	ldrb	r3, [r7, #19]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d15c      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c86:	4b2c      	ldr	r3, [pc, #176]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d01f      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d019      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ca4:	4b24      	ldr	r3, [pc, #144]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cb0:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb6:	4a20      	ldr	r2, [pc, #128]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc6:	4a1c      	ldr	r2, [pc, #112]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cd0:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d016      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce2:	f7fd fbf1 	bl	80004c8 <HAL_GetTick>
 8002ce6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce8:	e00b      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7fd fbed 	bl	80004c8 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d902      	bls.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	74fb      	strb	r3, [r7, #19]
            break;
 8002d00:	e006      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0ec      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d10:	7cfb      	ldrb	r3, [r7, #19]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10c      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d16:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d26:	4904      	ldr	r1, [pc, #16]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d2e:	e009      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	74bb      	strb	r3, [r7, #18]
 8002d34:	e006      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d40:	7cfb      	ldrb	r3, [r7, #19]
 8002d42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d44:	7c7b      	ldrb	r3, [r7, #17]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d105      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4a:	4b9e      	ldr	r3, [pc, #632]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4e:	4a9d      	ldr	r2, [pc, #628]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d62:	4b98      	ldr	r3, [pc, #608]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d68:	f023 0203 	bic.w	r2, r3, #3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	4994      	ldr	r1, [pc, #592]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d84:	4b8f      	ldr	r3, [pc, #572]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	f023 020c 	bic.w	r2, r3, #12
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d92:	498c      	ldr	r1, [pc, #560]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002da6:	4b87      	ldr	r3, [pc, #540]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	4983      	ldr	r1, [pc, #524]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dc8:	4b7e      	ldr	r3, [pc, #504]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	497b      	ldr	r1, [pc, #492]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dea:	4b76      	ldr	r3, [pc, #472]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df8:	4972      	ldr	r1, [pc, #456]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e0c:	4b6d      	ldr	r3, [pc, #436]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1a:	496a      	ldr	r1, [pc, #424]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e2e:	4b65      	ldr	r3, [pc, #404]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3c:	4961      	ldr	r1, [pc, #388]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e50:	4b5c      	ldr	r3, [pc, #368]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e5e:	4959      	ldr	r1, [pc, #356]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e72:	4b54      	ldr	r3, [pc, #336]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e80:	4950      	ldr	r1, [pc, #320]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e94:	4b4b      	ldr	r3, [pc, #300]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea2:	4948      	ldr	r1, [pc, #288]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eb6:	4b43      	ldr	r3, [pc, #268]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec4:	493f      	ldr	r1, [pc, #252]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d028      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ed8:	4b3a      	ldr	r3, [pc, #232]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ee6:	4937      	ldr	r1, [pc, #220]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ef2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ef6:	d106      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ef8:	4b32      	ldr	r3, [pc, #200]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4a31      	ldr	r2, [pc, #196]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f02:	60d3      	str	r3, [r2, #12]
 8002f04:	e011      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f0e:	d10c      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3304      	adds	r3, #4
 8002f14:	2101      	movs	r1, #1
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 f8c8 	bl	80030ac <RCCEx_PLLSAI1_Config>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f26:	7cfb      	ldrb	r3, [r7, #19]
 8002f28:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d028      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f36:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	491f      	ldr	r1, [pc, #124]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f54:	d106      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f56:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	4a1a      	ldr	r2, [pc, #104]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f60:	60d3      	str	r3, [r2, #12]
 8002f62:	e011      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3304      	adds	r3, #4
 8002f72:	2101      	movs	r1, #1
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 f899 	bl	80030ac <RCCEx_PLLSAI1_Config>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f7e:	7cfb      	ldrb	r3, [r7, #19]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f84:	7cfb      	ldrb	r3, [r7, #19]
 8002f86:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d02b      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa2:	4908      	ldr	r1, [pc, #32]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fb2:	d109      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fb4:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4a02      	ldr	r2, [pc, #8]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fbe:	60d3      	str	r3, [r2, #12]
 8002fc0:	e014      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fd0:	d10c      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 f867 	bl	80030ac <RCCEx_PLLSAI1_Config>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fe2:	7cfb      	ldrb	r3, [r7, #19]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002fe8:	7cfb      	ldrb	r3, [r7, #19]
 8002fea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d02f      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ff8:	4b2b      	ldr	r3, [pc, #172]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003006:	4928      	ldr	r1, [pc, #160]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003016:	d10d      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3304      	adds	r3, #4
 800301c:	2102      	movs	r1, #2
 800301e:	4618      	mov	r0, r3
 8003020:	f000 f844 	bl	80030ac <RCCEx_PLLSAI1_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d014      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800302e:	7cfb      	ldrb	r3, [r7, #19]
 8003030:	74bb      	strb	r3, [r7, #18]
 8003032:	e011      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800303c:	d10c      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3320      	adds	r3, #32
 8003042:	2102      	movs	r1, #2
 8003044:	4618      	mov	r0, r3
 8003046:	f000 f925 	bl	8003294 <RCCEx_PLLSAI2_Config>
 800304a:	4603      	mov	r3, r0
 800304c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800304e:	7cfb      	ldrb	r3, [r7, #19]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003054:	7cfb      	ldrb	r3, [r7, #19]
 8003056:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003064:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003072:	490d      	ldr	r1, [pc, #52]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00b      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003096:	4904      	ldr	r1, [pc, #16]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800309e:	7cbb      	ldrb	r3, [r7, #18]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40021000 	.word	0x40021000

080030ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030ba:	4b75      	ldr	r3, [pc, #468]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d018      	beq.n	80030f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030c6:	4b72      	ldr	r3, [pc, #456]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0203 	and.w	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d10d      	bne.n	80030f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
       ||
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030de:	4b6c      	ldr	r3, [pc, #432]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	091b      	lsrs	r3, r3, #4
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
       ||
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d047      	beq.n	8003182 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
 80030f6:	e044      	b.n	8003182 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d018      	beq.n	8003132 <RCCEx_PLLSAI1_Config+0x86>
 8003100:	2b03      	cmp	r3, #3
 8003102:	d825      	bhi.n	8003150 <RCCEx_PLLSAI1_Config+0xa4>
 8003104:	2b01      	cmp	r3, #1
 8003106:	d002      	beq.n	800310e <RCCEx_PLLSAI1_Config+0x62>
 8003108:	2b02      	cmp	r3, #2
 800310a:	d009      	beq.n	8003120 <RCCEx_PLLSAI1_Config+0x74>
 800310c:	e020      	b.n	8003150 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800310e:	4b60      	ldr	r3, [pc, #384]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d11d      	bne.n	8003156 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800311e:	e01a      	b.n	8003156 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003120:	4b5b      	ldr	r3, [pc, #364]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003128:	2b00      	cmp	r3, #0
 800312a:	d116      	bne.n	800315a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003130:	e013      	b.n	800315a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003132:	4b57      	ldr	r3, [pc, #348]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10f      	bne.n	800315e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800313e:	4b54      	ldr	r3, [pc, #336]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800314e:	e006      	b.n	800315e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
      break;
 8003154:	e004      	b.n	8003160 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003156:	bf00      	nop
 8003158:	e002      	b.n	8003160 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800315a:	bf00      	nop
 800315c:	e000      	b.n	8003160 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800315e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10d      	bne.n	8003182 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003166:	4b4a      	ldr	r3, [pc, #296]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6819      	ldr	r1, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	3b01      	subs	r3, #1
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	430b      	orrs	r3, r1
 800317c:	4944      	ldr	r1, [pc, #272]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 800317e:	4313      	orrs	r3, r2
 8003180:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d17d      	bne.n	8003284 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003188:	4b41      	ldr	r3, [pc, #260]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a40      	ldr	r2, [pc, #256]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 800318e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003194:	f7fd f998 	bl	80004c8 <HAL_GetTick>
 8003198:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800319a:	e009      	b.n	80031b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800319c:	f7fd f994 	bl	80004c8 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d902      	bls.n	80031b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	73fb      	strb	r3, [r7, #15]
        break;
 80031ae:	e005      	b.n	80031bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031b0:	4b37      	ldr	r3, [pc, #220]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1ef      	bne.n	800319c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d160      	bne.n	8003284 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d111      	bne.n	80031ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031c8:	4b31      	ldr	r3, [pc, #196]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6892      	ldr	r2, [r2, #8]
 80031d8:	0211      	lsls	r1, r2, #8
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	68d2      	ldr	r2, [r2, #12]
 80031de:	0912      	lsrs	r2, r2, #4
 80031e0:	0452      	lsls	r2, r2, #17
 80031e2:	430a      	orrs	r2, r1
 80031e4:	492a      	ldr	r1, [pc, #168]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	610b      	str	r3, [r1, #16]
 80031ea:	e027      	b.n	800323c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d112      	bne.n	8003218 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031f2:	4b27      	ldr	r3, [pc, #156]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80031fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6892      	ldr	r2, [r2, #8]
 8003202:	0211      	lsls	r1, r2, #8
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6912      	ldr	r2, [r2, #16]
 8003208:	0852      	lsrs	r2, r2, #1
 800320a:	3a01      	subs	r2, #1
 800320c:	0552      	lsls	r2, r2, #21
 800320e:	430a      	orrs	r2, r1
 8003210:	491f      	ldr	r1, [pc, #124]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003212:	4313      	orrs	r3, r2
 8003214:	610b      	str	r3, [r1, #16]
 8003216:	e011      	b.n	800323c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003218:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003220:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6892      	ldr	r2, [r2, #8]
 8003228:	0211      	lsls	r1, r2, #8
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6952      	ldr	r2, [r2, #20]
 800322e:	0852      	lsrs	r2, r2, #1
 8003230:	3a01      	subs	r2, #1
 8003232:	0652      	lsls	r2, r2, #25
 8003234:	430a      	orrs	r2, r1
 8003236:	4916      	ldr	r1, [pc, #88]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003238:	4313      	orrs	r3, r2
 800323a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800323c:	4b14      	ldr	r3, [pc, #80]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a13      	ldr	r2, [pc, #76]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003242:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003246:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003248:	f7fd f93e 	bl	80004c8 <HAL_GetTick>
 800324c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800324e:	e009      	b.n	8003264 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003250:	f7fd f93a 	bl	80004c8 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d902      	bls.n	8003264 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	73fb      	strb	r3, [r7, #15]
          break;
 8003262:	e005      	b.n	8003270 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003264:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0ef      	beq.n	8003250 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	4904      	ldr	r1, [pc, #16]	; (8003290 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003280:	4313      	orrs	r3, r2
 8003282:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003284:	7bfb      	ldrb	r3, [r7, #15]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000

08003294 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032a2:	4b6a      	ldr	r3, [pc, #424]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d018      	beq.n	80032e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032ae:	4b67      	ldr	r3, [pc, #412]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f003 0203 	and.w	r2, r3, #3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d10d      	bne.n	80032da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
       ||
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d009      	beq.n	80032da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80032c6:	4b61      	ldr	r3, [pc, #388]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
       ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d047      	beq.n	800336a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	73fb      	strb	r3, [r7, #15]
 80032de:	e044      	b.n	800336a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d018      	beq.n	800331a <RCCEx_PLLSAI2_Config+0x86>
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d825      	bhi.n	8003338 <RCCEx_PLLSAI2_Config+0xa4>
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d002      	beq.n	80032f6 <RCCEx_PLLSAI2_Config+0x62>
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d009      	beq.n	8003308 <RCCEx_PLLSAI2_Config+0x74>
 80032f4:	e020      	b.n	8003338 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032f6:	4b55      	ldr	r3, [pc, #340]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d11d      	bne.n	800333e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003306:	e01a      	b.n	800333e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003308:	4b50      	ldr	r3, [pc, #320]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003310:	2b00      	cmp	r3, #0
 8003312:	d116      	bne.n	8003342 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003318:	e013      	b.n	8003342 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800331a:	4b4c      	ldr	r3, [pc, #304]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10f      	bne.n	8003346 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003326:	4b49      	ldr	r3, [pc, #292]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003336:	e006      	b.n	8003346 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
      break;
 800333c:	e004      	b.n	8003348 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800333e:	bf00      	nop
 8003340:	e002      	b.n	8003348 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003342:	bf00      	nop
 8003344:	e000      	b.n	8003348 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003346:	bf00      	nop
    }

    if(status == HAL_OK)
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10d      	bne.n	800336a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800334e:	4b3f      	ldr	r3, [pc, #252]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6819      	ldr	r1, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	3b01      	subs	r3, #1
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	430b      	orrs	r3, r1
 8003364:	4939      	ldr	r1, [pc, #228]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003366:	4313      	orrs	r3, r2
 8003368:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d167      	bne.n	8003440 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003370:	4b36      	ldr	r3, [pc, #216]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a35      	ldr	r2, [pc, #212]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800337c:	f7fd f8a4 	bl	80004c8 <HAL_GetTick>
 8003380:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003382:	e009      	b.n	8003398 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003384:	f7fd f8a0 	bl	80004c8 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d902      	bls.n	8003398 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	73fb      	strb	r3, [r7, #15]
        break;
 8003396:	e005      	b.n	80033a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003398:	4b2c      	ldr	r3, [pc, #176]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1ef      	bne.n	8003384 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d14a      	bne.n	8003440 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d111      	bne.n	80033d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033b0:	4b26      	ldr	r3, [pc, #152]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6892      	ldr	r2, [r2, #8]
 80033c0:	0211      	lsls	r1, r2, #8
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68d2      	ldr	r2, [r2, #12]
 80033c6:	0912      	lsrs	r2, r2, #4
 80033c8:	0452      	lsls	r2, r2, #17
 80033ca:	430a      	orrs	r2, r1
 80033cc:	491f      	ldr	r1, [pc, #124]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	614b      	str	r3, [r1, #20]
 80033d2:	e011      	b.n	80033f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033d4:	4b1d      	ldr	r3, [pc, #116]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6892      	ldr	r2, [r2, #8]
 80033e4:	0211      	lsls	r1, r2, #8
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6912      	ldr	r2, [r2, #16]
 80033ea:	0852      	lsrs	r2, r2, #1
 80033ec:	3a01      	subs	r2, #1
 80033ee:	0652      	lsls	r2, r2, #25
 80033f0:	430a      	orrs	r2, r1
 80033f2:	4916      	ldr	r1, [pc, #88]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033f8:	4b14      	ldr	r3, [pc, #80]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a13      	ldr	r2, [pc, #76]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003402:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003404:	f7fd f860 	bl	80004c8 <HAL_GetTick>
 8003408:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800340a:	e009      	b.n	8003420 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800340c:	f7fd f85c 	bl	80004c8 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d902      	bls.n	8003420 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	73fb      	strb	r3, [r7, #15]
          break;
 800341e:	e005      	b.n	800342c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0ef      	beq.n	800340c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	4904      	ldr	r1, [pc, #16]	; (800344c <RCCEx_PLLSAI2_Config+0x1b8>)
 800343c:	4313      	orrs	r3, r2
 800343e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003440:	7bfb      	ldrb	r3, [r7, #15]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40021000 	.word	0x40021000

08003450 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003450:	b084      	sub	sp, #16
 8003452:	b580      	push	{r7, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	f107 001c 	add.w	r0, r7, #28
 800345e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f001 fa1c 	bl	80048ac <USB_CoreReset>
 8003474:	4603      	mov	r3, r0
 8003476:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	639a      	str	r2, [r3, #56]	; 0x38
 800348a:	e005      	b.n	8003498 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003498:	7bfb      	ldrb	r3, [r7, #15]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034a4:	b004      	add	sp, #16
 80034a6:	4770      	bx	lr

080034a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	4613      	mov	r3, r2
 80034b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d165      	bne.n	8003588 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4a3e      	ldr	r2, [pc, #248]	; (80035b8 <USB_SetTurnaroundTime+0x110>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d906      	bls.n	80034d2 <USB_SetTurnaroundTime+0x2a>
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4a3d      	ldr	r2, [pc, #244]	; (80035bc <USB_SetTurnaroundTime+0x114>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d202      	bcs.n	80034d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80034cc:	230f      	movs	r3, #15
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	e05c      	b.n	800358c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4a39      	ldr	r2, [pc, #228]	; (80035bc <USB_SetTurnaroundTime+0x114>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d306      	bcc.n	80034e8 <USB_SetTurnaroundTime+0x40>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4a38      	ldr	r2, [pc, #224]	; (80035c0 <USB_SetTurnaroundTime+0x118>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d202      	bcs.n	80034e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80034e2:	230e      	movs	r3, #14
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	e051      	b.n	800358c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4a35      	ldr	r2, [pc, #212]	; (80035c0 <USB_SetTurnaroundTime+0x118>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d306      	bcc.n	80034fe <USB_SetTurnaroundTime+0x56>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4a34      	ldr	r2, [pc, #208]	; (80035c4 <USB_SetTurnaroundTime+0x11c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d202      	bcs.n	80034fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80034f8:	230d      	movs	r3, #13
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e046      	b.n	800358c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	4a30      	ldr	r2, [pc, #192]	; (80035c4 <USB_SetTurnaroundTime+0x11c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d306      	bcc.n	8003514 <USB_SetTurnaroundTime+0x6c>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4a2f      	ldr	r2, [pc, #188]	; (80035c8 <USB_SetTurnaroundTime+0x120>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d802      	bhi.n	8003514 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800350e:	230c      	movs	r3, #12
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	e03b      	b.n	800358c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4a2c      	ldr	r2, [pc, #176]	; (80035c8 <USB_SetTurnaroundTime+0x120>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d906      	bls.n	800352a <USB_SetTurnaroundTime+0x82>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4a2b      	ldr	r2, [pc, #172]	; (80035cc <USB_SetTurnaroundTime+0x124>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d802      	bhi.n	800352a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003524:	230b      	movs	r3, #11
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	e030      	b.n	800358c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4a27      	ldr	r2, [pc, #156]	; (80035cc <USB_SetTurnaroundTime+0x124>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d906      	bls.n	8003540 <USB_SetTurnaroundTime+0x98>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4a26      	ldr	r2, [pc, #152]	; (80035d0 <USB_SetTurnaroundTime+0x128>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d802      	bhi.n	8003540 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800353a:	230a      	movs	r3, #10
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	e025      	b.n	800358c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4a23      	ldr	r2, [pc, #140]	; (80035d0 <USB_SetTurnaroundTime+0x128>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d906      	bls.n	8003556 <USB_SetTurnaroundTime+0xae>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4a22      	ldr	r2, [pc, #136]	; (80035d4 <USB_SetTurnaroundTime+0x12c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d202      	bcs.n	8003556 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003550:	2309      	movs	r3, #9
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e01a      	b.n	800358c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	4a1e      	ldr	r2, [pc, #120]	; (80035d4 <USB_SetTurnaroundTime+0x12c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d306      	bcc.n	800356c <USB_SetTurnaroundTime+0xc4>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4a1d      	ldr	r2, [pc, #116]	; (80035d8 <USB_SetTurnaroundTime+0x130>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d802      	bhi.n	800356c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003566:	2308      	movs	r3, #8
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	e00f      	b.n	800358c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	4a1a      	ldr	r2, [pc, #104]	; (80035d8 <USB_SetTurnaroundTime+0x130>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d906      	bls.n	8003582 <USB_SetTurnaroundTime+0xda>
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4a19      	ldr	r2, [pc, #100]	; (80035dc <USB_SetTurnaroundTime+0x134>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d202      	bcs.n	8003582 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800357c:	2307      	movs	r3, #7
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	e004      	b.n	800358c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003582:	2306      	movs	r3, #6
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	e001      	b.n	800358c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003588:	2309      	movs	r3, #9
 800358a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	029b      	lsls	r3, r3, #10
 80035a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80035a4:	431a      	orrs	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	371c      	adds	r7, #28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	00d8acbf 	.word	0x00d8acbf
 80035bc:	00e4e1c0 	.word	0x00e4e1c0
 80035c0:	00f42400 	.word	0x00f42400
 80035c4:	01067380 	.word	0x01067380
 80035c8:	011a499f 	.word	0x011a499f
 80035cc:	01312cff 	.word	0x01312cff
 80035d0:	014ca43f 	.word	0x014ca43f
 80035d4:	016e3600 	.word	0x016e3600
 80035d8:	01a6ab1f 	.word	0x01a6ab1f
 80035dc:	01e84800 	.word	0x01e84800

080035e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f043 0201 	orr.w	r2, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f023 0201 	bic.w	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d115      	bne.n	8003672 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003652:	2001      	movs	r0, #1
 8003654:	f7fc ff44 	bl	80004e0 <HAL_Delay>
      ms++;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	3301      	adds	r3, #1
 800365c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f001 f8ab 	bl	80047ba <USB_GetMode>
 8003664:	4603      	mov	r3, r0
 8003666:	2b01      	cmp	r3, #1
 8003668:	d01e      	beq.n	80036a8 <USB_SetCurrentMode+0x84>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b31      	cmp	r3, #49	; 0x31
 800366e:	d9f0      	bls.n	8003652 <USB_SetCurrentMode+0x2e>
 8003670:	e01a      	b.n	80036a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d115      	bne.n	80036a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003684:	2001      	movs	r0, #1
 8003686:	f7fc ff2b 	bl	80004e0 <HAL_Delay>
      ms++;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	3301      	adds	r3, #1
 800368e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f001 f892 	bl	80047ba <USB_GetMode>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <USB_SetCurrentMode+0x84>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b31      	cmp	r3, #49	; 0x31
 80036a0:	d9f0      	bls.n	8003684 <USB_SetCurrentMode+0x60>
 80036a2:	e001      	b.n	80036a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e005      	b.n	80036b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b32      	cmp	r3, #50	; 0x32
 80036ac:	d101      	bne.n	80036b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036bc:	b084      	sub	sp, #16
 80036be:	b580      	push	{r7, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80036ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80036d6:	2300      	movs	r3, #0
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	e009      	b.n	80036f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	3340      	adds	r3, #64	; 0x40
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	2200      	movs	r2, #0
 80036e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	3301      	adds	r3, #1
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	2b0e      	cmp	r3, #14
 80036f4:	d9f2      	bls.n	80036dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d11c      	bne.n	8003736 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800370a:	f043 0302 	orr.w	r3, r3, #2
 800370e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	e005      	b.n	8003742 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003748:	461a      	mov	r2, r3
 800374a:	2300      	movs	r3, #0
 800374c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800374e:	2103      	movs	r1, #3
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f959 	bl	8003a08 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003756:	2110      	movs	r1, #16
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f8f1 	bl	8003940 <USB_FlushTxFifo>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f91d 	bl	80039a8 <USB_FlushRxFifo>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377e:	461a      	mov	r2, r3
 8003780:	2300      	movs	r3, #0
 8003782:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378a:	461a      	mov	r2, r3
 800378c:	2300      	movs	r3, #0
 800378e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003796:	461a      	mov	r2, r3
 8003798:	2300      	movs	r3, #0
 800379a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	e043      	b.n	800382a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037b8:	d118      	bne.n	80037ec <USB_DevInit+0x130>
    {
      if (i == 0U)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037cc:	461a      	mov	r2, r3
 80037ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	e013      	b.n	80037fe <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e2:	461a      	mov	r2, r3
 80037e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e008      	b.n	80037fe <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f8:	461a      	mov	r2, r3
 80037fa:	2300      	movs	r3, #0
 80037fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380a:	461a      	mov	r2, r3
 800380c:	2300      	movs	r3, #0
 800380e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381c:	461a      	mov	r2, r3
 800381e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003822:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	3301      	adds	r3, #1
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	429a      	cmp	r2, r3
 8003830:	d3b7      	bcc.n	80037a2 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	e043      	b.n	80038c0 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800384a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800384e:	d118      	bne.n	8003882 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10a      	bne.n	800386c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003862:	461a      	mov	r2, r3
 8003864:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	e013      	b.n	8003894 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003878:	461a      	mov	r2, r3
 800387a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800387e:	6013      	str	r3, [r2, #0]
 8003880:	e008      	b.n	8003894 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388e:	461a      	mov	r2, r3
 8003890:	2300      	movs	r3, #0
 8003892:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a0:	461a      	mov	r2, r3
 80038a2:	2300      	movs	r3, #0
 80038a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b2:	461a      	mov	r2, r3
 80038b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	3301      	adds	r3, #1
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d3b7      	bcc.n	8003838 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f043 0210 	orr.w	r2, r3, #16
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	4b10      	ldr	r3, [pc, #64]	; (800393c <USB_DevInit+0x280>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	f043 0208 	orr.w	r2, r3, #8
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003922:	f043 0304 	orr.w	r3, r3, #4
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800392a:	7dfb      	ldrb	r3, [r7, #23]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003936:	b004      	add	sp, #16
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	803c3800 	.word	0x803c3800

08003940 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3301      	adds	r3, #1
 8003952:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4a13      	ldr	r2, [pc, #76]	; (80039a4 <USB_FlushTxFifo+0x64>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d901      	bls.n	8003960 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e01b      	b.n	8003998 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	daf2      	bge.n	800394e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	019b      	lsls	r3, r3, #6
 8003970:	f043 0220 	orr.w	r2, r3, #32
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	3301      	adds	r3, #1
 800397c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <USB_FlushTxFifo+0x64>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e006      	b.n	8003998 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b20      	cmp	r3, #32
 8003994:	d0f0      	beq.n	8003978 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	00030d40 	.word	0x00030d40

080039a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	3301      	adds	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4a11      	ldr	r2, [pc, #68]	; (8003a04 <USB_FlushRxFifo+0x5c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e018      	b.n	80039f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	daf2      	bge.n	80039b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2210      	movs	r2, #16
 80039d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3301      	adds	r3, #1
 80039dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4a08      	ldr	r2, [pc, #32]	; (8003a04 <USB_FlushRxFifo+0x5c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e006      	b.n	80039f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b10      	cmp	r3, #16
 80039f4:	d0f0      	beq.n	80039d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	00030d40 	.word	0x00030d40

08003a08 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	78fb      	ldrb	r3, [r7, #3]
 8003a22:	68f9      	ldr	r1, [r7, #12]
 8003a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b087      	sub	sp, #28
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 0306 	and.w	r3, r3, #6
 8003a52:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d002      	beq.n	8003a60 <USB_GetDevSpeed+0x26>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b06      	cmp	r3, #6
 8003a5e:	d102      	bne.n	8003a66 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003a60:	2302      	movs	r3, #2
 8003a62:	75fb      	strb	r3, [r7, #23]
 8003a64:	e001      	b.n	8003a6a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003a66:	230f      	movs	r3, #15
 8003a68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	785b      	ldrb	r3, [r3, #1]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d13a      	bne.n	8003b0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a9a:	69da      	ldr	r2, [r3, #28]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	68f9      	ldr	r1, [r7, #12]
 8003aae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d155      	bne.n	8003b78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	791b      	ldrb	r3, [r3, #4]
 8003ae6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ae8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	059b      	lsls	r3, r3, #22
 8003aee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003af0:	4313      	orrs	r3, r2
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	0151      	lsls	r1, r2, #5
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	440a      	add	r2, r1
 8003afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	e036      	b.n	8003b78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b10:	69da      	ldr	r2, [r3, #28]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	041b      	lsls	r3, r3, #16
 8003b22:	68f9      	ldr	r1, [r7, #12]
 8003b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d11a      	bne.n	8003b78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	791b      	ldrb	r3, [r3, #4]
 8003b5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	4313      	orrs	r3, r2
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	0151      	lsls	r1, r2, #5
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	440a      	add	r2, r1
 8003b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	785b      	ldrb	r3, [r3, #1]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d161      	bne.n	8003c68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bba:	d11f      	bne.n	8003bfc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	0151      	lsls	r1, r2, #5
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	440a      	add	r2, r1
 8003bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	0151      	lsls	r1, r2, #5
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	440a      	add	r2, r1
 8003bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	f003 030f 	and.w	r3, r3, #15
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	43db      	mvns	r3, r3
 8003c16:	68f9      	ldr	r1, [r7, #12]
 8003c18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c26:	69da      	ldr	r2, [r3, #28]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	2101      	movs	r1, #1
 8003c32:	fa01 f303 	lsl.w	r3, r1, r3
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	68f9      	ldr	r1, [r7, #12]
 8003c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c40:	4013      	ands	r3, r2
 8003c42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	0159      	lsls	r1, r3, #5
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	440b      	add	r3, r1
 8003c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4b35      	ldr	r3, [pc, #212]	; (8003d38 <USB_DeactivateEndpoint+0x1b0>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]
 8003c66:	e060      	b.n	8003d2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c7e:	d11f      	bne.n	8003cc0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	0151      	lsls	r1, r2, #5
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	440a      	add	r2, r1
 8003c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	0151      	lsls	r1, r2, #5
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	440a      	add	r2, r1
 8003cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd6:	041b      	lsls	r3, r3, #16
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	68f9      	ldr	r1, [r7, #12]
 8003cdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cea:	69da      	ldr	r2, [r3, #28]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfa:	041b      	lsls	r3, r3, #16
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	68f9      	ldr	r1, [r7, #12]
 8003d00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d04:	4013      	ands	r3, r2
 8003d06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	0159      	lsls	r1, r3, #5
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	440b      	add	r3, r1
 8003d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d22:	4619      	mov	r1, r3
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <USB_DeactivateEndpoint+0x1b4>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	ec337800 	.word	0xec337800
 8003d3c:	eff37800 	.word	0xeff37800

08003d40 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	785b      	ldrb	r3, [r3, #1]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	f040 8128 	bne.w	8003fae <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d132      	bne.n	8003dcc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	0151      	lsls	r1, r2, #5
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	440a      	add	r2, r1
 8003d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	0151      	lsls	r1, r2, #5
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	440a      	add	r2, r1
 8003da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003da4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003da8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	0151      	lsls	r1, r2, #5
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	440a      	add	r2, r1
 8003dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc4:	0cdb      	lsrs	r3, r3, #19
 8003dc6:	04db      	lsls	r3, r3, #19
 8003dc8:	6113      	str	r3, [r2, #16]
 8003dca:	e092      	b.n	8003ef2 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	0151      	lsls	r1, r2, #5
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	440a      	add	r2, r1
 8003de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de6:	0cdb      	lsrs	r3, r3, #19
 8003de8:	04db      	lsls	r3, r3, #19
 8003dea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	0151      	lsls	r1, r2, #5
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	440a      	add	r2, r1
 8003e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e0e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d11a      	bne.n	8003e4c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	691a      	ldr	r2, [r3, #16]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d903      	bls.n	8003e2a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	0151      	lsls	r1, r2, #5
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	440a      	add	r2, r1
 8003e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e48:	6113      	str	r3, [r2, #16]
 8003e4a:	e01b      	b.n	8003e84 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e58:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	6919      	ldr	r1, [r3, #16]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	440b      	add	r3, r1
 8003e64:	1e59      	subs	r1, r3, #1
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e6e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e70:	4b8d      	ldr	r3, [pc, #564]	; (80040a8 <USB_EPStartXfer+0x368>)
 8003e72:	400b      	ands	r3, r1
 8003e74:	6939      	ldr	r1, [r7, #16]
 8003e76:	0148      	lsls	r0, r1, #5
 8003e78:	6979      	ldr	r1, [r7, #20]
 8003e7a:	4401      	add	r1, r0
 8003e7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e80:	4313      	orrs	r3, r2
 8003e82:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e9a:	6939      	ldr	r1, [r7, #16]
 8003e9c:	0148      	lsls	r0, r1, #5
 8003e9e:	6979      	ldr	r1, [r7, #20]
 8003ea0:	4401      	add	r1, r0
 8003ea2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	791b      	ldrb	r3, [r3, #4]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d11f      	bne.n	8003ef2 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	0151      	lsls	r1, r2, #5
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	440a      	add	r2, r1
 8003ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ecc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003ed0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	0151      	lsls	r1, r2, #5
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	440a      	add	r2, r1
 8003ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ef0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	0151      	lsls	r1, r2, #5
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	440a      	add	r2, r1
 8003f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f10:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	791b      	ldrb	r3, [r3, #4]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d015      	beq.n	8003f46 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 8139 	beq.w	8004196 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	f003 030f 	and.w	r3, r3, #15
 8003f34:	2101      	movs	r1, #1
 8003f36:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3a:	6979      	ldr	r1, [r7, #20]
 8003f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f40:	4313      	orrs	r3, r2
 8003f42:	634b      	str	r3, [r1, #52]	; 0x34
 8003f44:	e127      	b.n	8004196 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d110      	bne.n	8003f78 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	0151      	lsls	r1, r2, #5
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	440a      	add	r2, r1
 8003f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	e00f      	b.n	8003f98 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	0151      	lsls	r1, r2, #5
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	440a      	add	r2, r1
 8003f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f96:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	68d9      	ldr	r1, [r3, #12]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781a      	ldrb	r2, [r3, #0]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f9a6 	bl	80042f8 <USB_WritePacket>
 8003fac:	e0f3      	b.n	8004196 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc8:	0cdb      	lsrs	r3, r3, #19
 8003fca:	04db      	lsls	r3, r3, #19
 8003fcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	0151      	lsls	r1, r2, #5
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	440a      	add	r2, r1
 8003fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ff0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d12f      	bne.n	8004058 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004026:	6939      	ldr	r1, [r7, #16]
 8004028:	0148      	lsls	r0, r1, #5
 800402a:	6979      	ldr	r1, [r7, #20]
 800402c:	4401      	add	r1, r0
 800402e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004032:	4313      	orrs	r3, r2
 8004034:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	0151      	lsls	r1, r2, #5
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	440a      	add	r2, r1
 800404c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004050:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004054:	6113      	str	r3, [r2, #16]
 8004056:	e061      	b.n	800411c <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d125      	bne.n	80040ac <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004076:	6939      	ldr	r1, [r7, #16]
 8004078:	0148      	lsls	r0, r1, #5
 800407a:	6979      	ldr	r1, [r7, #20]
 800407c:	4401      	add	r1, r0
 800407e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004082:	4313      	orrs	r3, r2
 8004084:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	0151      	lsls	r1, r2, #5
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	440a      	add	r2, r1
 800409c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040a4:	6113      	str	r3, [r2, #16]
 80040a6:	e039      	b.n	800411c <USB_EPStartXfer+0x3dc>
 80040a8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4413      	add	r3, r2
 80040b6:	1e5a      	subs	r2, r3, #1
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c0:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	89fa      	ldrh	r2, [r7, #14]
 80040c8:	fb03 f202 	mul.w	r2, r3, r2
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	89fb      	ldrh	r3, [r7, #14]
 80040e0:	04d9      	lsls	r1, r3, #19
 80040e2:	4b2f      	ldr	r3, [pc, #188]	; (80041a0 <USB_EPStartXfer+0x460>)
 80040e4:	400b      	ands	r3, r1
 80040e6:	6939      	ldr	r1, [r7, #16]
 80040e8:	0148      	lsls	r0, r1, #5
 80040ea:	6979      	ldr	r1, [r7, #20]
 80040ec:	4401      	add	r1, r0
 80040ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040f2:	4313      	orrs	r3, r2
 80040f4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410c:	6939      	ldr	r1, [r7, #16]
 800410e:	0148      	lsls	r0, r1, #5
 8004110:	6979      	ldr	r1, [r7, #20]
 8004112:	4401      	add	r1, r0
 8004114:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004118:	4313      	orrs	r3, r2
 800411a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	791b      	ldrb	r3, [r3, #4]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d128      	bne.n	8004176 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d110      	bne.n	8004156 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	0151      	lsls	r1, r2, #5
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	440a      	add	r2, r1
 800414a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800414e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	e00f      	b.n	8004176 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	0151      	lsls	r1, r2, #5
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	440a      	add	r2, r1
 800416c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004174:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	0151      	lsls	r1, r2, #5
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	440a      	add	r2, r1
 800418c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004190:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004194:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	1ff80000 	.word	0x1ff80000

080041a4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	785b      	ldrb	r3, [r3, #1]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d14a      	bne.n	8004258 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041da:	f040 8086 	bne.w	80042ea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	7812      	ldrb	r2, [r2, #0]
 80041f2:	0151      	lsls	r1, r2, #5
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	440a      	add	r2, r1
 80041f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004200:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	7812      	ldrb	r2, [r2, #0]
 8004216:	0151      	lsls	r1, r2, #5
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	440a      	add	r2, r1
 800421c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004220:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004224:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3301      	adds	r3, #1
 800422a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004232:	4293      	cmp	r3, r2
 8004234:	d902      	bls.n	800423c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	75fb      	strb	r3, [r7, #23]
          break;
 800423a:	e056      	b.n	80042ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004254:	d0e7      	beq.n	8004226 <USB_EPStopXfer+0x82>
 8004256:	e048      	b.n	80042ea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800426c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004270:	d13b      	bne.n	80042ea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	7812      	ldrb	r2, [r2, #0]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	440a      	add	r2, r1
 800428c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004290:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004294:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	7812      	ldrb	r2, [r2, #0]
 80042aa:	0151      	lsls	r1, r2, #5
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	440a      	add	r2, r1
 80042b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3301      	adds	r3, #1
 80042be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d902      	bls.n	80042d0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	75fb      	strb	r3, [r7, #23]
          break;
 80042ce:	e00c      	b.n	80042ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042e8:	d0e7      	beq.n	80042ba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b089      	sub	sp, #36	; 0x24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	4611      	mov	r1, r2
 8004304:	461a      	mov	r2, r3
 8004306:	460b      	mov	r3, r1
 8004308:	71fb      	strb	r3, [r7, #7]
 800430a:	4613      	mov	r3, r2
 800430c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004316:	88bb      	ldrh	r3, [r7, #4]
 8004318:	3303      	adds	r3, #3
 800431a:	089b      	lsrs	r3, r3, #2
 800431c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800431e:	2300      	movs	r3, #0
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	e018      	b.n	8004356 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	031a      	lsls	r2, r3, #12
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	4413      	add	r3, r2
 800432c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004330:	461a      	mov	r2, r3
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	3301      	adds	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3301      	adds	r3, #1
 8004342:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	3301      	adds	r3, #1
 8004348:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	3301      	adds	r3, #1
 800434e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	3301      	adds	r3, #1
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	429a      	cmp	r2, r3
 800435c:	d3e2      	bcc.n	8004324 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3724      	adds	r7, #36	; 0x24
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800436c:	b480      	push	{r7}
 800436e:	b08b      	sub	sp, #44	; 0x2c
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	4613      	mov	r3, r2
 8004378:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	089b      	lsrs	r3, r3, #2
 8004386:	b29b      	uxth	r3, r3
 8004388:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800438a:	88fb      	ldrh	r3, [r7, #6]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004392:	2300      	movs	r3, #0
 8004394:	623b      	str	r3, [r7, #32]
 8004396:	e014      	b.n	80043c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	3301      	adds	r3, #1
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	3301      	adds	r3, #1
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	3301      	adds	r3, #1
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	3301      	adds	r3, #1
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	3301      	adds	r3, #1
 80043c0:	623b      	str	r3, [r7, #32]
 80043c2:	6a3a      	ldr	r2, [r7, #32]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d3e6      	bcc.n	8004398 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80043ca:	8bfb      	ldrh	r3, [r7, #30]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01e      	beq.n	800440e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043da:	461a      	mov	r2, r3
 80043dc:	f107 0310 	add.w	r3, r7, #16
 80043e0:	6812      	ldr	r2, [r2, #0]
 80043e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	701a      	strb	r2, [r3, #0]
      i++;
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	3301      	adds	r3, #1
 80043fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	3301      	adds	r3, #1
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004402:	8bfb      	ldrh	r3, [r7, #30]
 8004404:	3b01      	subs	r3, #1
 8004406:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004408:	8bfb      	ldrh	r3, [r7, #30]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1ea      	bne.n	80043e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004410:	4618      	mov	r0, r3
 8004412:	372c      	adds	r7, #44	; 0x2c
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	785b      	ldrb	r3, [r3, #1]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d12c      	bne.n	8004492 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	db12      	blt.n	8004470 <USB_EPSetStall+0x54>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00f      	beq.n	8004470 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	0151      	lsls	r1, r2, #5
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	440a      	add	r2, r1
 8004466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800446a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800446e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	0151      	lsls	r1, r2, #5
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	440a      	add	r2, r1
 8004486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800448a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	e02b      	b.n	80044ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4413      	add	r3, r2
 800449a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	db12      	blt.n	80044ca <USB_EPSetStall+0xae>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00f      	beq.n	80044ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	0151      	lsls	r1, r2, #5
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	440a      	add	r2, r1
 80044c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	0151      	lsls	r1, r2, #5
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	440a      	add	r2, r1
 80044e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	785b      	ldrb	r3, [r3, #1]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d128      	bne.n	8004566 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	0151      	lsls	r1, r2, #5
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	440a      	add	r2, r1
 800452a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800452e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004532:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	791b      	ldrb	r3, [r3, #4]
 8004538:	2b03      	cmp	r3, #3
 800453a:	d003      	beq.n	8004544 <USB_EPClearStall+0x4c>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	791b      	ldrb	r3, [r3, #4]
 8004540:	2b02      	cmp	r3, #2
 8004542:	d138      	bne.n	80045b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	0151      	lsls	r1, r2, #5
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	440a      	add	r2, r1
 800455a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800455e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	e027      	b.n	80045b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	0151      	lsls	r1, r2, #5
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	440a      	add	r2, r1
 800457c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004580:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004584:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	791b      	ldrb	r3, [r3, #4]
 800458a:	2b03      	cmp	r3, #3
 800458c:	d003      	beq.n	8004596 <USB_EPClearStall+0x9e>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	791b      	ldrb	r3, [r3, #4]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d10f      	bne.n	80045b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4413      	add	r3, r2
 800459e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	0151      	lsls	r1, r2, #5
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	440a      	add	r2, r1
 80045ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80045e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80045f8:	68f9      	ldr	r1, [r7, #12]
 80045fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045fe:	4313      	orrs	r3, r2
 8004600:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800462a:	f023 0303 	bic.w	r3, r3, #3
 800462e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800463e:	f023 0302 	bic.w	r3, r3, #2
 8004642:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004652:	b480      	push	{r7}
 8004654:	b085      	sub	sp, #20
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800466c:	f023 0303 	bic.w	r3, r3, #3
 8004670:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004680:	f043 0302 	orr.w	r3, r3, #2
 8004684:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4013      	ands	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80046ac:	68fb      	ldr	r3, [r7, #12]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b085      	sub	sp, #20
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	4013      	ands	r3, r2
 80046dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	0c1b      	lsrs	r3, r3, #16
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b085      	sub	sp, #20
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	4013      	ands	r3, r2
 8004710:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	b29b      	uxth	r3, r3
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004722:	b480      	push	{r7}
 8004724:	b085      	sub	sp, #20
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	460b      	mov	r3, r1
 800472c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	4013      	ands	r3, r2
 800474e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004750:	68bb      	ldr	r3, [r7, #8]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800475e:	b480      	push	{r7}
 8004760:	b087      	sub	sp, #28
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	460b      	mov	r3, r1
 8004768:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004780:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004782:	78fb      	ldrb	r3, [r7, #3]
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	fa22 f303 	lsr.w	r3, r2, r3
 800478e:	01db      	lsls	r3, r3, #7
 8004790:	b2db      	uxtb	r3, r3
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004798:	78fb      	ldrb	r3, [r7, #3]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4013      	ands	r3, r2
 80047aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80047ac:	68bb      	ldr	r3, [r7, #8]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f003 0301 	and.w	r3, r3, #1
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b085      	sub	sp, #20
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80047f4:	f023 0307 	bic.w	r3, r3, #7
 80047f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	333c      	adds	r3, #60	; 0x3c
 800482e:	3304      	adds	r3, #4
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4a1c      	ldr	r2, [pc, #112]	; (80048a8 <USB_EP0_OutStart+0x8c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d90a      	bls.n	8004852 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800484c:	d101      	bne.n	8004852 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	e024      	b.n	800489c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004858:	461a      	mov	r2, r3
 800485a:	2300      	movs	r3, #0
 800485c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800486c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004870:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004880:	f043 0318 	orr.w	r3, r3, #24
 8004884:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004894:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004898:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	4f54300a 	.word	0x4f54300a

080048ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4a13      	ldr	r2, [pc, #76]	; (8004910 <USB_CoreReset+0x64>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e01b      	b.n	8004902 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	daf2      	bge.n	80048b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f043 0201 	orr.w	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3301      	adds	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4a09      	ldr	r2, [pc, #36]	; (8004910 <USB_CoreReset+0x64>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d901      	bls.n	80048f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e006      	b.n	8004902 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d0f0      	beq.n	80048e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	00030d40 	.word	0x00030d40

08004914 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8004920:	f44f 701d 	mov.w	r0, #628	; 0x274
 8004924:	f004 f8da 	bl	8008adc <USBD_static_malloc>
 8004928:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d109      	bne.n	8004944 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	32b0      	adds	r2, #176	; 0xb0
 800493a:	2100      	movs	r1, #0
 800493c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004940:	2302      	movs	r3, #2
 8004942:	e06e      	b.n	8004a22 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	32b0      	adds	r2, #176	; 0xb0
 800494e:	68f9      	ldr	r1, [r7, #12]
 8004950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	32b0      	adds	r2, #176	; 0xb0
 800495e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	7c1b      	ldrb	r3, [r3, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d12b      	bne.n	80049c8 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004970:	4b2e      	ldr	r3, [pc, #184]	; (8004a2c <USBD_MSC_Init+0x118>)
 8004972:	7819      	ldrb	r1, [r3, #0]
 8004974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004978:	2202      	movs	r2, #2
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f003 fe64 	bl	8008648 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8004980:	4b2a      	ldr	r3, [pc, #168]	; (8004a2c <USBD_MSC_Init+0x118>)
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	f003 020f 	and.w	r2, r3, #15
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	4613      	mov	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	440b      	add	r3, r1
 8004994:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004998:	2201      	movs	r2, #1
 800499a:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800499c:	4b24      	ldr	r3, [pc, #144]	; (8004a30 <USBD_MSC_Init+0x11c>)
 800499e:	7819      	ldrb	r1, [r3, #0]
 80049a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049a4:	2202      	movs	r2, #2
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f003 fe4e 	bl	8008648 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80049ac:	4b20      	ldr	r3, [pc, #128]	; (8004a30 <USBD_MSC_Init+0x11c>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	f003 020f 	and.w	r2, r3, #15
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	440b      	add	r3, r1
 80049c0:	3324      	adds	r3, #36	; 0x24
 80049c2:	2201      	movs	r2, #1
 80049c4:	801a      	strh	r2, [r3, #0]
 80049c6:	e028      	b.n	8004a1a <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80049c8:	4b18      	ldr	r3, [pc, #96]	; (8004a2c <USBD_MSC_Init+0x118>)
 80049ca:	7819      	ldrb	r1, [r3, #0]
 80049cc:	2340      	movs	r3, #64	; 0x40
 80049ce:	2202      	movs	r2, #2
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f003 fe39 	bl	8008648 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80049d6:	4b15      	ldr	r3, [pc, #84]	; (8004a2c <USBD_MSC_Init+0x118>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	f003 020f 	and.w	r2, r3, #15
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	4613      	mov	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	440b      	add	r3, r1
 80049ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80049ee:	2201      	movs	r2, #1
 80049f0:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80049f2:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <USBD_MSC_Init+0x11c>)
 80049f4:	7819      	ldrb	r1, [r3, #0]
 80049f6:	2340      	movs	r3, #64	; 0x40
 80049f8:	2202      	movs	r2, #2
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f003 fe24 	bl	8008648 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <USBD_MSC_Init+0x11c>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	f003 020f 	and.w	r2, r3, #15
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	440b      	add	r3, r1
 8004a14:	3324      	adds	r3, #36	; 0x24
 8004a16:	2201      	movs	r2, #1
 8004a18:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fa2c 	bl	8004e78 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	2000006f 	.word	0x2000006f
 8004a30:	2000006e 	.word	0x2000006e

08004a34 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8004a40:	4b26      	ldr	r3, [pc, #152]	; (8004adc <USBD_MSC_DeInit+0xa8>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	4619      	mov	r1, r3
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f003 fe3c 	bl	80086c4 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8004a4c:	4b23      	ldr	r3, [pc, #140]	; (8004adc <USBD_MSC_DeInit+0xa8>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	f003 020f 	and.w	r2, r3, #15
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	440b      	add	r3, r1
 8004a60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004a64:	2200      	movs	r2, #0
 8004a66:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8004a68:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <USBD_MSC_DeInit+0xac>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f003 fe28 	bl	80086c4 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8004a74:	4b1a      	ldr	r3, [pc, #104]	; (8004ae0 <USBD_MSC_DeInit+0xac>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	f003 020f 	and.w	r2, r3, #15
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	3324      	adds	r3, #36	; 0x24
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	32b0      	adds	r2, #176	; 0xb0
 8004a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d018      	beq.n	8004ad2 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fa67 	bl	8004f74 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	32b0      	adds	r2, #176	; 0xb0
 8004ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f004 f81f 	bl	8008af8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	32b0      	adds	r2, #176	; 0xb0
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	2000006f 	.word	0x2000006f
 8004ae0:	2000006e 	.word	0x2000006e

08004ae4 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	32b0      	adds	r2, #176	; 0xb0
 8004af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004afc:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e0e1      	b.n	8004cd4 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d053      	beq.n	8004bc4 <USBD_MSC_Setup+0xe0>
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	f040 80d1 	bne.w	8004cc4 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	785b      	ldrb	r3, [r3, #1]
 8004b26:	2bfe      	cmp	r3, #254	; 0xfe
 8004b28:	d002      	beq.n	8004b30 <USBD_MSC_Setup+0x4c>
 8004b2a:	2bff      	cmp	r3, #255	; 0xff
 8004b2c:	d02a      	beq.n	8004b84 <USBD_MSC_Setup+0xa0>
 8004b2e:	e041      	b.n	8004bb4 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	885b      	ldrh	r3, [r3, #2]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d11e      	bne.n	8004b76 <USBD_MSC_Setup+0x92>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	88db      	ldrh	r3, [r3, #6]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d11a      	bne.n	8004b76 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	da15      	bge.n	8004b76 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	33b0      	adds	r3, #176	; 0xb0
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	4798      	blx	r3
 8004b5e:	4603      	mov	r3, r0
 8004b60:	461a      	mov	r2, r3
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f003 f92b 	bl	8007dc8 <USBD_CtlSendData>
 8004b72:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004b74:	e025      	b.n	8004bc2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8004b76:	6839      	ldr	r1, [r7, #0]
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f003 f8b4 	bl	8007ce6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	75fb      	strb	r3, [r7, #23]
          break;
 8004b82:	e01e      	b.n	8004bc2 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	885b      	ldrh	r3, [r3, #2]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10c      	bne.n	8004ba6 <USBD_MSC_Setup+0xc2>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	88db      	ldrh	r3, [r3, #6]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d108      	bne.n	8004ba6 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	db03      	blt.n	8004ba6 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f9b4 	bl	8004f0c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ba4:	e00d      	b.n	8004bc2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8004ba6:	6839      	ldr	r1, [r7, #0]
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f003 f89c 	bl	8007ce6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	75fb      	strb	r3, [r7, #23]
          break;
 8004bb2:	e006      	b.n	8004bc2 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8004bb4:	6839      	ldr	r1, [r7, #0]
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f003 f895 	bl	8007ce6 <USBD_CtlError>
          ret = USBD_FAIL;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	75fb      	strb	r3, [r7, #23]
          break;
 8004bc0:	bf00      	nop
      }
      break;
 8004bc2:	e086      	b.n	8004cd2 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	785b      	ldrb	r3, [r3, #1]
 8004bc8:	2b0b      	cmp	r3, #11
 8004bca:	d872      	bhi.n	8004cb2 <USBD_MSC_Setup+0x1ce>
 8004bcc:	a201      	add	r2, pc, #4	; (adr r2, 8004bd4 <USBD_MSC_Setup+0xf0>)
 8004bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd2:	bf00      	nop
 8004bd4:	08004c05 	.word	0x08004c05
 8004bd8:	08004c81 	.word	0x08004c81
 8004bdc:	08004cb3 	.word	0x08004cb3
 8004be0:	08004cb3 	.word	0x08004cb3
 8004be4:	08004cb3 	.word	0x08004cb3
 8004be8:	08004cb3 	.word	0x08004cb3
 8004bec:	08004cb3 	.word	0x08004cb3
 8004bf0:	08004cb3 	.word	0x08004cb3
 8004bf4:	08004cb3 	.word	0x08004cb3
 8004bf8:	08004cb3 	.word	0x08004cb3
 8004bfc:	08004c2f 	.word	0x08004c2f
 8004c00:	08004c59 	.word	0x08004c59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d107      	bne.n	8004c20 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004c10:	f107 030e 	add.w	r3, r7, #14
 8004c14:	2202      	movs	r2, #2
 8004c16:	4619      	mov	r1, r3
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f003 f8d5 	bl	8007dc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c1e:	e050      	b.n	8004cc2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8004c20:	6839      	ldr	r1, [r7, #0]
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f003 f85f 	bl	8007ce6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	75fb      	strb	r3, [r7, #23]
          break;
 8004c2c:	e049      	b.n	8004cc2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	d107      	bne.n	8004c4a <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	2201      	movs	r2, #1
 8004c40:	4619      	mov	r1, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f003 f8c0 	bl	8007dc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c48:	e03b      	b.n	8004cc2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8004c4a:	6839      	ldr	r1, [r7, #0]
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f003 f84a 	bl	8007ce6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c52:	2303      	movs	r3, #3
 8004c54:	75fb      	strb	r3, [r7, #23]
          break;
 8004c56:	e034      	b.n	8004cc2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d106      	bne.n	8004c72 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	885b      	ldrh	r3, [r3, #2]
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c70:	e027      	b.n	8004cc2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8004c72:	6839      	ldr	r1, [r7, #0]
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f003 f836 	bl	8007ce6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	75fb      	strb	r3, [r7, #23]
          break;
 8004c7e:	e020      	b.n	8004cc2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d119      	bne.n	8004cc0 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	885b      	ldrh	r3, [r3, #2]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d115      	bne.n	8004cc0 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	889b      	ldrh	r3, [r3, #4]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f003 fd47 	bl	8008730 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	889b      	ldrh	r3, [r3, #4]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	4619      	mov	r1, r3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fb2e 	bl	800530c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8004cb0:	e006      	b.n	8004cc0 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8004cb2:	6839      	ldr	r1, [r7, #0]
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f003 f816 	bl	8007ce6 <USBD_CtlError>
          ret = USBD_FAIL;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	75fb      	strb	r3, [r7, #23]
          break;
 8004cbe:	e000      	b.n	8004cc2 <USBD_MSC_Setup+0x1de>
          break;
 8004cc0:	bf00      	nop
      }
      break;
 8004cc2:	e006      	b.n	8004cd2 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8004cc4:	6839      	ldr	r1, [r7, #0]
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f003 f80d 	bl	8007ce6 <USBD_CtlError>
      ret = USBD_FAIL;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	75fb      	strb	r3, [r7, #23]
      break;
 8004cd0:	bf00      	nop
  }

  return (uint8_t)ret;
 8004cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	4619      	mov	r1, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f959 	bl	8004fa4 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f983 	bl	8005018 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8004d24:	2181      	movs	r1, #129	; 0x81
 8004d26:	4812      	ldr	r0, [pc, #72]	; (8004d70 <USBD_MSC_GetHSCfgDesc+0x54>)
 8004d28:	f002 f97a 	bl	8007020 <USBD_GetEpDesc>
 8004d2c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8004d2e:	2101      	movs	r1, #1
 8004d30:	480f      	ldr	r0, [pc, #60]	; (8004d70 <USBD_MSC_GetHSCfgDesc+0x54>)
 8004d32:	f002 f975 	bl	8007020 <USBD_GetEpDesc>
 8004d36:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d006      	beq.n	8004d4c <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	711a      	strb	r2, [r3, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f042 0202 	orr.w	r2, r2, #2
 8004d4a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d006      	beq.n	8004d60 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2200      	movs	r2, #0
 8004d56:	711a      	strb	r2, [r3, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f042 0202 	orr.w	r2, r2, #2
 8004d5e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8004d66:	4b02      	ldr	r3, [pc, #8]	; (8004d70 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	20000044 	.word	0x20000044

08004d74 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8004d7c:	2181      	movs	r1, #129	; 0x81
 8004d7e:	4812      	ldr	r0, [pc, #72]	; (8004dc8 <USBD_MSC_GetFSCfgDesc+0x54>)
 8004d80:	f002 f94e 	bl	8007020 <USBD_GetEpDesc>
 8004d84:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8004d86:	2101      	movs	r1, #1
 8004d88:	480f      	ldr	r0, [pc, #60]	; (8004dc8 <USBD_MSC_GetFSCfgDesc+0x54>)
 8004d8a:	f002 f949 	bl	8007020 <USBD_GetEpDesc>
 8004d8e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d006      	beq.n	8004da4 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d9e:	711a      	strb	r2, [r3, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d006      	beq.n	8004db8 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db2:	711a      	strb	r2, [r3, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8004dbe:	4b02      	ldr	r3, [pc, #8]	; (8004dc8 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	20000044 	.word	0x20000044

08004dcc <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8004dd4:	2181      	movs	r1, #129	; 0x81
 8004dd6:	4812      	ldr	r0, [pc, #72]	; (8004e20 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8004dd8:	f002 f922 	bl	8007020 <USBD_GetEpDesc>
 8004ddc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8004dde:	2101      	movs	r1, #1
 8004de0:	480f      	ldr	r0, [pc, #60]	; (8004e20 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8004de2:	f002 f91d 	bl	8007020 <USBD_GetEpDesc>
 8004de6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d006      	beq.n	8004dfc <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004df6:	711a      	strb	r2, [r3, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d006      	beq.n	8004e10 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e0a:	711a      	strb	r2, [r3, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8004e16:	4b02      	ldr	r3, [pc, #8]	; (8004e20 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	20000044 	.word	0x20000044

08004e24 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	220a      	movs	r2, #10
 8004e30:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8004e32:	4b03      	ldr	r3, [pc, #12]	; (8004e40 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	20000064 	.word	0x20000064

08004e44 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e009      	b.n	8004e6c <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	33b0      	adds	r3, #176	; 0xb0
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	32b0      	adds	r2, #176	; 0xb0
 8004e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e8e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d032      	beq.n	8004efc <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	33b0      	adds	r3, #176	; 0xb0
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2000      	movs	r0, #0
 8004ece:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8004ed0:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <MSC_BOT_Init+0x8c>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f003 fc2a 	bl	8008730 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8004edc:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <MSC_BOT_Init+0x90>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f003 fc24 	bl	8008730 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8004ee8:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <MSC_BOT_Init+0x8c>)
 8004eea:	7819      	ldrb	r1, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004ef2:	231f      	movs	r3, #31
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f003 fd57 	bl	80089a8 <USBD_LL_PrepareReceive>
 8004efa:	e000      	b.n	8004efe <MSC_BOT_Init+0x86>
    return;
 8004efc:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	2000006f 	.word	0x2000006f
 8004f08:	2000006e 	.word	0x2000006e

08004f0c <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	32b0      	adds	r2, #176	; 0xb0
 8004f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f22:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d01b      	beq.n	8004f62 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2201      	movs	r2, #1
 8004f34:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8004f36:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <MSC_BOT_Reset+0x60>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f003 fc63 	bl	8008808 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8004f42:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <MSC_BOT_Reset+0x64>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	4619      	mov	r1, r3
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f003 fc5d 	bl	8008808 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8004f4e:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <MSC_BOT_Reset+0x64>)
 8004f50:	7819      	ldrb	r1, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004f58:	231f      	movs	r3, #31
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f003 fd24 	bl	80089a8 <USBD_LL_PrepareReceive>
 8004f60:	e000      	b.n	8004f64 <MSC_BOT_Reset+0x58>
    return;
 8004f62:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	2000006e 	.word	0x2000006e
 8004f70:	2000006f 	.word	0x2000006f

08004f74 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	32b0      	adds	r2, #176	; 0xb0
 8004f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f8a:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	721a      	strb	r2, [r3, #8]
  }
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	32b0      	adds	r2, #176	; 0xb0
 8004fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fbe:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d020      	beq.n	8005008 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	7a1b      	ldrb	r3, [r3, #8]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d005      	beq.n	8004fda <MSC_BOT_DataIn+0x36>
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	db1c      	blt.n	800500c <MSC_BOT_DataIn+0x68>
 8004fd2:	3b03      	subs	r3, #3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d819      	bhi.n	800500c <MSC_BOT_DataIn+0x68>
 8004fd8:	e011      	b.n	8004ffe <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f9c9 	bl	8005380 <SCSI_ProcessCmd>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	da0d      	bge.n	8005010 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f90c 	bl	8005214 <MSC_BOT_SendCSW>
      }
      break;
 8004ffc:	e008      	b.n	8005010 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8004ffe:	2100      	movs	r1, #0
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f907 	bl	8005214 <MSC_BOT_SendCSW>
      break;
 8005006:	e004      	b.n	8005012 <MSC_BOT_DataIn+0x6e>
    return;
 8005008:	bf00      	nop
 800500a:	e002      	b.n	8005012 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800500c:	bf00      	nop
 800500e:	e000      	b.n	8005012 <MSC_BOT_DataIn+0x6e>
      break;
 8005010:	bf00      	nop
  }
}
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	32b0      	adds	r2, #176	; 0xb0
 800502e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005032:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d01c      	beq.n	8005074 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	7a1b      	ldrb	r3, [r3, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <MSC_BOT_DataOut+0x30>
 8005042:	2b01      	cmp	r3, #1
 8005044:	d004      	beq.n	8005050 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8005046:	e018      	b.n	800507a <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f819 	bl	8005080 <MSC_BOT_CBW_Decode>
      break;
 800504e:	e014      	b.n	800507a <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800505c:	461a      	mov	r2, r3
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f98e 	bl	8005380 <SCSI_ProcessCmd>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	da06      	bge.n	8005078 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800506a:	2101      	movs	r1, #1
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f8d1 	bl	8005214 <MSC_BOT_SendCSW>
      break;
 8005072:	e001      	b.n	8005078 <MSC_BOT_DataOut+0x60>
    return;
 8005074:	bf00      	nop
 8005076:	e000      	b.n	800507a <MSC_BOT_DataOut+0x62>
      break;
 8005078:	bf00      	nop
  }
}
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	32b0      	adds	r2, #176	; 0xb0
 8005092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005096:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d079      	beq.n	8005192 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80050b6:	4b3a      	ldr	r3, [pc, #232]	; (80051a0 <MSC_BOT_CBW_Decode+0x120>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	4619      	mov	r1, r3
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f003 fcab 	bl	8008a18 <USBD_LL_GetRxDataSize>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b1f      	cmp	r3, #31
 80050c6:	d114      	bne.n	80050f2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80050ce:	4a35      	ldr	r2, [pc, #212]	; (80051a4 <MSC_BOT_CBW_Decode+0x124>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d10e      	bne.n	80050f2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d809      	bhi.n	80050f2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d004      	beq.n	80050f2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80050ee:	2b10      	cmp	r3, #16
 80050f0:	d90e      	bls.n	8005110 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80050f8:	2320      	movs	r3, #32
 80050fa:	2205      	movs	r2, #5
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fe2a 	bl	8005d56 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2202      	movs	r2, #2
 8005106:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f8bd 	bl	8005288 <MSC_BOT_Abort>
 800510e:	e043      	b.n	8005198 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800511c:	461a      	mov	r2, r3
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f92e 	bl	8005380 <SCSI_ProcessCmd>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	da0c      	bge.n	8005144 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	7a1b      	ldrb	r3, [r3, #8]
 800512e:	2b05      	cmp	r3, #5
 8005130:	d104      	bne.n	800513c <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005132:	2101      	movs	r1, #1
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f86d 	bl	8005214 <MSC_BOT_SendCSW>
 800513a:	e02d      	b.n	8005198 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f8a3 	bl	8005288 <MSC_BOT_Abort>
 8005142:	e029      	b.n	8005198 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	7a1b      	ldrb	r3, [r3, #8]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d024      	beq.n	8005196 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005150:	2b01      	cmp	r3, #1
 8005152:	d020      	beq.n	8005196 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005158:	2b03      	cmp	r3, #3
 800515a:	d01c      	beq.n	8005196 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d009      	beq.n	8005178 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f103 0110 	add.w	r1, r3, #16
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	461a      	mov	r2, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f819 	bl	80051a8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8005176:	e00f      	b.n	8005198 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d104      	bne.n	800518a <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005180:	2100      	movs	r1, #0
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f846 	bl	8005214 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8005188:	e006      	b.n	8005198 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f87c 	bl	8005288 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8005190:	e002      	b.n	8005198 <MSC_BOT_CBW_Decode+0x118>
    return;
 8005192:	bf00      	nop
 8005194:	e000      	b.n	8005198 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8005196:	bf00      	nop
    }
  }
}
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	2000006f 	.word	0x2000006f
 80051a4:	43425355 	.word	0x43425355

080051a8 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	32b0      	adds	r2, #176	; 0xb0
 80051be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051c2:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01e      	beq.n	8005208 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	4293      	cmp	r3, r2
 80051d4:	bf28      	it	cs
 80051d6:	4613      	movcs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	1ad2      	subs	r2, r2, r3
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2204      	movs	r2, #4
 80051f6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 80051f8:	4b05      	ldr	r3, [pc, #20]	; (8005210 <MSC_BOT_SendData+0x68>)
 80051fa:	7819      	ldrb	r1, [r3, #0]
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f003 fb99 	bl	8008938 <USBD_LL_Transmit>
 8005206:	e000      	b.n	800520a <MSC_BOT_SendData+0x62>
    return;
 8005208:	bf00      	nop
}
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	2000006e 	.word	0x2000006e

08005214 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	460b      	mov	r3, r1
 800521e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	32b0      	adds	r2, #176	; 0xb0
 800522a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800522e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d01d      	beq.n	8005272 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4a10      	ldr	r2, [pc, #64]	; (800527c <MSC_BOT_SendCSW+0x68>)
 800523a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	78fa      	ldrb	r2, [r7, #3]
 8005242:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800524c:	4b0c      	ldr	r3, [pc, #48]	; (8005280 <MSC_BOT_SendCSW+0x6c>)
 800524e:	7819      	ldrb	r1, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8005256:	230d      	movs	r3, #13
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f003 fb6d 	bl	8008938 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800525e:	4b09      	ldr	r3, [pc, #36]	; (8005284 <MSC_BOT_SendCSW+0x70>)
 8005260:	7819      	ldrb	r1, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8005268:	231f      	movs	r3, #31
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f003 fb9c 	bl	80089a8 <USBD_LL_PrepareReceive>
 8005270:	e000      	b.n	8005274 <MSC_BOT_SendCSW+0x60>
    return;
 8005272:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	53425355 	.word	0x53425355
 8005280:	2000006e 	.word	0x2000006e
 8005284:	2000006f 	.word	0x2000006f

08005288 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	32b0      	adds	r2, #176	; 0xb0
 800529a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800529e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d02a      	beq.n	80052fc <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10e      	bne.n	80052ce <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d009      	beq.n	80052ce <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d105      	bne.n	80052ce <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80052c2:	4b10      	ldr	r3, [pc, #64]	; (8005304 <MSC_BOT_Abort+0x7c>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	4619      	mov	r1, r3
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f003 fa67 	bl	800879c <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80052ce:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <MSC_BOT_Abort+0x80>)
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	4619      	mov	r1, r3
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f003 fa61 	bl	800879c <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	7a5b      	ldrb	r3, [r3, #9]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d10d      	bne.n	80052fe <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80052e2:	4b09      	ldr	r3, [pc, #36]	; (8005308 <MSC_BOT_Abort+0x80>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	4619      	mov	r1, r3
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f003 fa57 	bl	800879c <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80052ee:	4b05      	ldr	r3, [pc, #20]	; (8005304 <MSC_BOT_Abort+0x7c>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	4619      	mov	r1, r3
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f003 fa51 	bl	800879c <USBD_LL_StallEP>
 80052fa:	e000      	b.n	80052fe <MSC_BOT_Abort+0x76>
    return;
 80052fc:	bf00      	nop
  }
}
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	2000006f 	.word	0x2000006f
 8005308:	2000006e 	.word	0x2000006e

0800530c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	32b0      	adds	r2, #176	; 0xb0
 8005322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005326:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d01d      	beq.n	800536a <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	7a5b      	ldrb	r3, [r3, #9]
 8005332:	2b02      	cmp	r3, #2
 8005334:	d10c      	bne.n	8005350 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8005336:	4b10      	ldr	r3, [pc, #64]	; (8005378 <MSC_BOT_CplClrFeature+0x6c>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	4619      	mov	r1, r3
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f003 fa2d 	bl	800879c <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8005342:	4b0e      	ldr	r3, [pc, #56]	; (800537c <MSC_BOT_CplClrFeature+0x70>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	4619      	mov	r1, r3
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f003 fa27 	bl	800879c <USBD_LL_StallEP>
 800534e:	e00f      	b.n	8005370 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8005350:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005354:	2b00      	cmp	r3, #0
 8005356:	da0a      	bge.n	800536e <MSC_BOT_CplClrFeature+0x62>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	7a5b      	ldrb	r3, [r3, #9]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d006      	beq.n	800536e <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005360:	2101      	movs	r1, #1
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7ff ff56 	bl	8005214 <MSC_BOT_SendCSW>
 8005368:	e002      	b.n	8005370 <MSC_BOT_CplClrFeature+0x64>
    return;
 800536a:	bf00      	nop
 800536c:	e000      	b.n	8005370 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800536e:	bf00      	nop
  }
}
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	2000006e 	.word	0x2000006e
 800537c:	2000006f 	.word	0x2000006f

08005380 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	460b      	mov	r3, r1
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	32b0      	adds	r2, #176	; 0xb0
 8005398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800539c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d102      	bne.n	80053aa <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80053a4:	f04f 33ff 	mov.w	r3, #4294967295
 80053a8:	e168      	b.n	800567c <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2baa      	cmp	r3, #170	; 0xaa
 80053b0:	f000 8144 	beq.w	800563c <SCSI_ProcessCmd+0x2bc>
 80053b4:	2baa      	cmp	r3, #170	; 0xaa
 80053b6:	f300 8153 	bgt.w	8005660 <SCSI_ProcessCmd+0x2e0>
 80053ba:	2ba8      	cmp	r3, #168	; 0xa8
 80053bc:	f000 812c 	beq.w	8005618 <SCSI_ProcessCmd+0x298>
 80053c0:	2ba8      	cmp	r3, #168	; 0xa8
 80053c2:	f300 814d 	bgt.w	8005660 <SCSI_ProcessCmd+0x2e0>
 80053c6:	2b5a      	cmp	r3, #90	; 0x5a
 80053c8:	f300 80c0 	bgt.w	800554c <SCSI_ProcessCmd+0x1cc>
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f2c0 8147 	blt.w	8005660 <SCSI_ProcessCmd+0x2e0>
 80053d2:	2b5a      	cmp	r3, #90	; 0x5a
 80053d4:	f200 8144 	bhi.w	8005660 <SCSI_ProcessCmd+0x2e0>
 80053d8:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <SCSI_ProcessCmd+0x60>)
 80053da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053de:	bf00      	nop
 80053e0:	08005553 	.word	0x08005553
 80053e4:	08005661 	.word	0x08005661
 80053e8:	08005661 	.word	0x08005661
 80053ec:	08005565 	.word	0x08005565
 80053f0:	08005661 	.word	0x08005661
 80053f4:	08005661 	.word	0x08005661
 80053f8:	08005661 	.word	0x08005661
 80053fc:	08005661 	.word	0x08005661
 8005400:	08005661 	.word	0x08005661
 8005404:	08005661 	.word	0x08005661
 8005408:	08005661 	.word	0x08005661
 800540c:	08005661 	.word	0x08005661
 8005410:	08005661 	.word	0x08005661
 8005414:	08005661 	.word	0x08005661
 8005418:	08005661 	.word	0x08005661
 800541c:	08005661 	.word	0x08005661
 8005420:	08005661 	.word	0x08005661
 8005424:	08005661 	.word	0x08005661
 8005428:	08005577 	.word	0x08005577
 800542c:	08005661 	.word	0x08005661
 8005430:	08005661 	.word	0x08005661
 8005434:	08005661 	.word	0x08005661
 8005438:	08005661 	.word	0x08005661
 800543c:	08005661 	.word	0x08005661
 8005440:	08005661 	.word	0x08005661
 8005444:	08005661 	.word	0x08005661
 8005448:	080055ad 	.word	0x080055ad
 800544c:	08005589 	.word	0x08005589
 8005450:	08005661 	.word	0x08005661
 8005454:	08005661 	.word	0x08005661
 8005458:	0800559b 	.word	0x0800559b
 800545c:	08005661 	.word	0x08005661
 8005460:	08005661 	.word	0x08005661
 8005464:	08005661 	.word	0x08005661
 8005468:	08005661 	.word	0x08005661
 800546c:	080055d1 	.word	0x080055d1
 8005470:	08005661 	.word	0x08005661
 8005474:	080055e3 	.word	0x080055e3
 8005478:	08005661 	.word	0x08005661
 800547c:	08005661 	.word	0x08005661
 8005480:	08005607 	.word	0x08005607
 8005484:	08005661 	.word	0x08005661
 8005488:	0800562b 	.word	0x0800562b
 800548c:	08005661 	.word	0x08005661
 8005490:	08005661 	.word	0x08005661
 8005494:	08005661 	.word	0x08005661
 8005498:	08005661 	.word	0x08005661
 800549c:	0800564f 	.word	0x0800564f
 80054a0:	08005661 	.word	0x08005661
 80054a4:	08005661 	.word	0x08005661
 80054a8:	08005661 	.word	0x08005661
 80054ac:	08005661 	.word	0x08005661
 80054b0:	08005661 	.word	0x08005661
 80054b4:	08005661 	.word	0x08005661
 80054b8:	08005661 	.word	0x08005661
 80054bc:	08005661 	.word	0x08005661
 80054c0:	08005661 	.word	0x08005661
 80054c4:	08005661 	.word	0x08005661
 80054c8:	08005661 	.word	0x08005661
 80054cc:	08005661 	.word	0x08005661
 80054d0:	08005661 	.word	0x08005661
 80054d4:	08005661 	.word	0x08005661
 80054d8:	08005661 	.word	0x08005661
 80054dc:	08005661 	.word	0x08005661
 80054e0:	08005661 	.word	0x08005661
 80054e4:	08005661 	.word	0x08005661
 80054e8:	08005661 	.word	0x08005661
 80054ec:	08005661 	.word	0x08005661
 80054f0:	08005661 	.word	0x08005661
 80054f4:	08005661 	.word	0x08005661
 80054f8:	08005661 	.word	0x08005661
 80054fc:	08005661 	.word	0x08005661
 8005500:	08005661 	.word	0x08005661
 8005504:	08005661 	.word	0x08005661
 8005508:	08005661 	.word	0x08005661
 800550c:	08005661 	.word	0x08005661
 8005510:	08005661 	.word	0x08005661
 8005514:	08005661 	.word	0x08005661
 8005518:	08005661 	.word	0x08005661
 800551c:	08005661 	.word	0x08005661
 8005520:	08005661 	.word	0x08005661
 8005524:	08005661 	.word	0x08005661
 8005528:	08005661 	.word	0x08005661
 800552c:	08005661 	.word	0x08005661
 8005530:	08005661 	.word	0x08005661
 8005534:	08005661 	.word	0x08005661
 8005538:	08005661 	.word	0x08005661
 800553c:	08005661 	.word	0x08005661
 8005540:	08005661 	.word	0x08005661
 8005544:	08005661 	.word	0x08005661
 8005548:	080055bf 	.word	0x080055bf
 800554c:	2b9e      	cmp	r3, #158	; 0x9e
 800554e:	d051      	beq.n	80055f4 <SCSI_ProcessCmd+0x274>
 8005550:	e086      	b.n	8005660 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8005552:	7afb      	ldrb	r3, [r7, #11]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	4619      	mov	r1, r3
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f893 	bl	8005684 <SCSI_TestUnitReady>
 800555e:	4603      	mov	r3, r0
 8005560:	75fb      	strb	r3, [r7, #23]
      break;
 8005562:	e089      	b.n	8005678 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8005564:	7afb      	ldrb	r3, [r7, #11]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	4619      	mov	r1, r3
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 fb70 	bl	8005c50 <SCSI_RequestSense>
 8005570:	4603      	mov	r3, r0
 8005572:	75fb      	strb	r3, [r7, #23]
      break;
 8005574:	e080      	b.n	8005678 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8005576:	7afb      	ldrb	r3, [r7, #11]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	4619      	mov	r1, r3
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f8db 	bl	8005738 <SCSI_Inquiry>
 8005582:	4603      	mov	r3, r0
 8005584:	75fb      	strb	r3, [r7, #23]
      break;
 8005586:	e077      	b.n	8005678 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8005588:	7afb      	ldrb	r3, [r7, #11]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	4619      	mov	r1, r3
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 fc2c 	bl	8005dec <SCSI_StartStopUnit>
 8005594:	4603      	mov	r3, r0
 8005596:	75fb      	strb	r3, [r7, #23]
      break;
 8005598:	e06e      	b.n	8005678 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800559a:	7afb      	ldrb	r3, [r7, #11]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	4619      	mov	r1, r3
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 fc78 	bl	8005e96 <SCSI_AllowPreventRemovable>
 80055a6:	4603      	mov	r3, r0
 80055a8:	75fb      	strb	r3, [r7, #23]
      break;
 80055aa:	e065      	b.n	8005678 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80055ac:	7afb      	ldrb	r3, [r7, #11]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	4619      	mov	r1, r3
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 faec 	bl	8005b90 <SCSI_ModeSense6>
 80055b8:	4603      	mov	r3, r0
 80055ba:	75fb      	strb	r3, [r7, #23]
      break;
 80055bc:	e05c      	b.n	8005678 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80055be:	7afb      	ldrb	r3, [r7, #11]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	4619      	mov	r1, r3
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 fb13 	bl	8005bf0 <SCSI_ModeSense10>
 80055ca:	4603      	mov	r3, r0
 80055cc:	75fb      	strb	r3, [r7, #23]
      break;
 80055ce:	e053      	b.n	8005678 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80055d0:	7afb      	ldrb	r3, [r7, #11]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	4619      	mov	r1, r3
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 fa5e 	bl	8005a98 <SCSI_ReadFormatCapacity>
 80055dc:	4603      	mov	r3, r0
 80055de:	75fb      	strb	r3, [r7, #23]
      break;
 80055e0:	e04a      	b.n	8005678 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80055e2:	7afb      	ldrb	r3, [r7, #11]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	4619      	mov	r1, r3
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 f923 	bl	8005834 <SCSI_ReadCapacity10>
 80055ee:	4603      	mov	r3, r0
 80055f0:	75fb      	strb	r3, [r7, #23]
      break;
 80055f2:	e041      	b.n	8005678 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80055f4:	7afb      	ldrb	r3, [r7, #11]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	4619      	mov	r1, r3
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 f998 	bl	8005930 <SCSI_ReadCapacity16>
 8005600:	4603      	mov	r3, r0
 8005602:	75fb      	strb	r3, [r7, #23]
      break;
 8005604:	e038      	b.n	8005678 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8005606:	7afb      	ldrb	r3, [r7, #11]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	4619      	mov	r1, r3
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 fc6f 	bl	8005ef0 <SCSI_Read10>
 8005612:	4603      	mov	r3, r0
 8005614:	75fb      	strb	r3, [r7, #23]
      break;
 8005616:	e02f      	b.n	8005678 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8005618:	7afb      	ldrb	r3, [r7, #11]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	4619      	mov	r1, r3
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 fd10 	bl	8006044 <SCSI_Read12>
 8005624:	4603      	mov	r3, r0
 8005626:	75fb      	strb	r3, [r7, #23]
      break;
 8005628:	e026      	b.n	8005678 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800562a:	7afb      	ldrb	r3, [r7, #11]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	4619      	mov	r1, r3
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 fdbb 	bl	80061ac <SCSI_Write10>
 8005636:	4603      	mov	r3, r0
 8005638:	75fb      	strb	r3, [r7, #23]
      break;
 800563a:	e01d      	b.n	8005678 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800563c:	7afb      	ldrb	r3, [r7, #11]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	4619      	mov	r1, r3
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 fe88 	bl	8006358 <SCSI_Write12>
 8005648:	4603      	mov	r3, r0
 800564a:	75fb      	strb	r3, [r7, #23]
      break;
 800564c:	e014      	b.n	8005678 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800564e:	7afb      	ldrb	r3, [r7, #11]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	4619      	mov	r1, r3
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 ff65 	bl	8006524 <SCSI_Verify10>
 800565a:	4603      	mov	r3, r0
 800565c:	75fb      	strb	r3, [r7, #23]
      break;
 800565e:	e00b      	b.n	8005678 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8005660:	7af9      	ldrb	r1, [r7, #11]
 8005662:	2320      	movs	r3, #32
 8005664:	2205      	movs	r2, #5
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 fb75 	bl	8005d56 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2202      	movs	r2, #2
 8005670:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8005672:	23ff      	movs	r3, #255	; 0xff
 8005674:	75fb      	strb	r3, [r7, #23]
      break;
 8005676:	bf00      	nop
  }

  return ret;
 8005678:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	460b      	mov	r3, r1
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	32b0      	adds	r2, #176	; 0xb0
 800569c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d102      	bne.n	80056ae <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 80056a8:	f04f 33ff 	mov.w	r3, #4294967295
 80056ac:	e03f      	b.n	800572e <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80056be:	2320      	movs	r3, #32
 80056c0:	2205      	movs	r2, #5
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 fb47 	bl	8005d56 <SCSI_SenseCode>

    return -1;
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295
 80056cc:	e02f      	b.n	800572e <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d10b      	bne.n	80056f0 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80056d8:	7af9      	ldrb	r1, [r7, #11]
 80056da:	233a      	movs	r3, #58	; 0x3a
 80056dc:	2202      	movs	r2, #2
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 fb39 	bl	8005d56 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2205      	movs	r2, #5
 80056e8:	721a      	strb	r2, [r3, #8]
    return -1;
 80056ea:	f04f 33ff 	mov.w	r3, #4294967295
 80056ee:	e01e      	b.n	800572e <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	33b0      	adds	r3, #176	; 0xb0
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	7afa      	ldrb	r2, [r7, #11]
 8005704:	4610      	mov	r0, r2
 8005706:	4798      	blx	r3
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00b      	beq.n	8005726 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800570e:	7af9      	ldrb	r1, [r7, #11]
 8005710:	233a      	movs	r3, #58	; 0x3a
 8005712:	2202      	movs	r2, #2
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 fb1e 	bl	8005d56 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2205      	movs	r2, #5
 800571e:	721a      	strb	r2, [r3, #8]

    return -1;
 8005720:	f04f 33ff 	mov.w	r3, #4294967295
 8005724:	e003      	b.n	800572e <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2200      	movs	r2, #0
 800572a:	60da      	str	r2, [r3, #12]

  return 0;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3718      	adds	r7, #24
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
	...

08005738 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	460b      	mov	r3, r1
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	32b0      	adds	r2, #176	; 0xb0
 8005750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005754:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <SCSI_Inquiry+0x2a>
  {
    return -1;
 800575c:	f04f 33ff 	mov.w	r3, #4294967295
 8005760:	e05f      	b.n	8005822 <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10a      	bne.n	8005782 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005772:	2320      	movs	r3, #32
 8005774:	2205      	movs	r2, #5
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 faed 	bl	8005d56 <SCSI_SenseCode>
    return -1;
 800577c:	f04f 33ff 	mov.w	r3, #4294967295
 8005780:	e04f      	b.n	8005822 <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	3301      	adds	r3, #1
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d020      	beq.n	80057d2 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3302      	adds	r3, #2
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d105      	bne.n	80057a6 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800579a:	2206      	movs	r2, #6
 800579c:	4923      	ldr	r1, [pc, #140]	; (800582c <SCSI_Inquiry+0xf4>)
 800579e:	69b8      	ldr	r0, [r7, #24]
 80057a0:	f001 f846 	bl	8006830 <SCSI_UpdateBotData>
 80057a4:	e03c      	b.n	8005820 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3302      	adds	r3, #2
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b80      	cmp	r3, #128	; 0x80
 80057ae:	d105      	bne.n	80057bc <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80057b0:	2208      	movs	r2, #8
 80057b2:	491f      	ldr	r1, [pc, #124]	; (8005830 <SCSI_Inquiry+0xf8>)
 80057b4:	69b8      	ldr	r0, [r7, #24]
 80057b6:	f001 f83b 	bl	8006830 <SCSI_UpdateBotData>
 80057ba:	e031      	b.n	8005820 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80057c2:	2324      	movs	r3, #36	; 0x24
 80057c4:	2205      	movs	r2, #5
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 fac5 	bl	8005d56 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80057cc:	f04f 33ff 	mov.w	r3, #4294967295
 80057d0:	e027      	b.n	8005822 <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	33b0      	adds	r3, #176	; 0xb0
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80057e2:	69d9      	ldr	r1, [r3, #28]
 80057e4:	7afa      	ldrb	r2, [r7, #11]
 80057e6:	4613      	mov	r3, r2
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 80057ee:	440b      	add	r3, r1
 80057f0:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	3304      	adds	r3, #4
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	3305      	adds	r3, #5
 80057fc:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3304      	adds	r3, #4
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	8bfa      	ldrh	r2, [r7, #30]
 8005808:	429a      	cmp	r2, r3
 800580a:	d303      	bcc.n	8005814 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3304      	adds	r3, #4
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8005814:	8bfb      	ldrh	r3, [r7, #30]
 8005816:	461a      	mov	r2, r3
 8005818:	6979      	ldr	r1, [r7, #20]
 800581a:	69b8      	ldr	r0, [r7, #24]
 800581c:	f001 f808 	bl	8006830 <SCSI_UpdateBotData>
  }

  return 0;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3720      	adds	r7, #32
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20000070 	.word	0x20000070
 8005830:	20000078 	.word	0x20000078

08005834 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	460b      	mov	r3, r1
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	32b0      	adds	r2, #176	; 0xb0
 800584c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005850:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d102      	bne.n	800585e <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8005858:	f04f 33ff 	mov.w	r3, #4294967295
 800585c:	e064      	b.n	8005928 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	33b0      	adds	r3, #176	; 0xb0
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800587c:	7af8      	ldrb	r0, [r7, #11]
 800587e:	4798      	blx	r3
 8005880:	4603      	mov	r3, r0
 8005882:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005884:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d104      	bne.n	8005896 <SCSI_ReadCapacity10+0x62>
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005892:	2b02      	cmp	r3, #2
 8005894:	d108      	bne.n	80058a8 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005896:	7af9      	ldrb	r1, [r7, #11]
 8005898:	233a      	movs	r3, #58	; 0x3a
 800589a:	2202      	movs	r2, #2
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 fa5a 	bl	8005d56 <SCSI_SenseCode>
    return -1;
 80058a2:	f04f 33ff 	mov.w	r3, #4294967295
 80058a6:	e03f      	b.n	8005928 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80058ae:	3b01      	subs	r3, #1
 80058b0:	0e1b      	lsrs	r3, r3, #24
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80058be:	3b01      	subs	r3, #1
 80058c0:	0c1b      	lsrs	r3, r3, #16
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80058ce:	3b01      	subs	r3, #1
 80058d0:	0a1b      	lsrs	r3, r3, #8
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80058ee:	161b      	asrs	r3, r3, #24
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80058fc:	141b      	asrs	r3, r3, #16
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800590a:	0a1b      	lsrs	r3, r3, #8
 800590c:	b29b      	uxth	r3, r3
 800590e:	b2da      	uxtb	r2, r3
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800591a:	b2da      	uxtb	r2, r3
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2208      	movs	r2, #8
 8005924:	60da      	str	r2, [r3, #12]

  return 0;
 8005926:	2300      	movs	r3, #0

}
 8005928:	4618      	mov	r0, r3
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	460b      	mov	r3, r1
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	32b0      	adds	r2, #176	; 0xb0
 8005948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800594c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d102      	bne.n	800595a <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8005954:	f04f 33ff 	mov.w	r3, #4294967295
 8005958:	e09a      	b.n	8005a90 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	33b0      	adds	r3, #176	; 0xb0
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8005978:	7af8      	ldrb	r0, [r7, #11]
 800597a:	4798      	blx	r3
 800597c:	4603      	mov	r3, r0
 800597e:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005980:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d104      	bne.n	8005992 <SCSI_ReadCapacity16+0x62>
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800598e:	2b02      	cmp	r3, #2
 8005990:	d108      	bne.n	80059a4 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005992:	7af9      	ldrb	r1, [r7, #11]
 8005994:	233a      	movs	r3, #58	; 0x3a
 8005996:	2202      	movs	r2, #2
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f9dc 	bl	8005d56 <SCSI_SenseCode>
    return -1;
 800599e:	f04f 33ff 	mov.w	r3, #4294967295
 80059a2:	e075      	b.n	8005a90 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	330a      	adds	r3, #10
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	330b      	adds	r3, #11
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80059b4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	330c      	adds	r3, #12
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80059be:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	320d      	adds	r2, #13
 80059c4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80059c6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80059cc:	2300      	movs	r3, #0
 80059ce:	61fb      	str	r3, [r7, #28]
 80059d0:	e008      	b.n	80059e4 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	4413      	add	r3, r2
 80059d8:	3310      	adds	r3, #16
 80059da:	2200      	movs	r2, #0
 80059dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	3301      	adds	r3, #1
 80059e2:	61fb      	str	r3, [r7, #28]
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d3f1      	bcc.n	80059d2 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80059f4:	3b01      	subs	r3, #1
 80059f6:	0e1b      	lsrs	r3, r3, #24
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005a04:	3b01      	subs	r3, #1
 8005a06:	0c1b      	lsrs	r3, r3, #16
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005a14:	3b01      	subs	r3, #1
 8005a16:	0a1b      	lsrs	r3, r3, #8
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005a34:	161b      	asrs	r3, r3, #24
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005a42:	141b      	asrs	r3, r3, #16
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005a50:	0a1b      	lsrs	r3, r3, #8
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	330a      	adds	r3, #10
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	330b      	adds	r3, #11
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005a76:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	330c      	adds	r3, #12
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005a80:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	320d      	adds	r2, #13
 8005a86:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8005a88:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	60da      	str	r2, [r3, #12]

  return 0;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3720      	adds	r7, #32
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b088      	sub	sp, #32
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	32b0      	adds	r2, #176	; 0xb0
 8005ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d102      	bne.n	8005ac2 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8005abc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac0:	e061      	b.n	8005b86 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	33b0      	adds	r3, #176	; 0xb0
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f107 0214 	add.w	r2, r7, #20
 8005ad8:	f107 0110 	add.w	r1, r7, #16
 8005adc:	7af8      	ldrb	r0, [r7, #11]
 8005ade:	4798      	blx	r3
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005ae4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d104      	bne.n	8005af6 <SCSI_ReadFormatCapacity+0x5e>
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d108      	bne.n	8005b08 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005af6:	7af9      	ldrb	r1, [r7, #11]
 8005af8:	233a      	movs	r3, #58	; 0x3a
 8005afa:	2202      	movs	r2, #2
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 f92a 	bl	8005d56 <SCSI_SenseCode>
    return -1;
 8005b02:	f04f 33ff 	mov.w	r3, #4294967295
 8005b06:	e03e      	b.n	8005b86 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8005b08:	2300      	movs	r3, #0
 8005b0a:	83fb      	strh	r3, [r7, #30]
 8005b0c:	e007      	b.n	8005b1e <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8005b0e:	8bfb      	ldrh	r3, [r7, #30]
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	4413      	add	r3, r2
 8005b14:	2200      	movs	r2, #0
 8005b16:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8005b18:	8bfb      	ldrh	r3, [r7, #30]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	83fb      	strh	r3, [r7, #30]
 8005b1e:	8bfb      	ldrh	r3, [r7, #30]
 8005b20:	2b0b      	cmp	r3, #11
 8005b22:	d9f4      	bls.n	8005b0e <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2208      	movs	r2, #8
 8005b28:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	0e1b      	lsrs	r3, r3, #24
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	0c1b      	lsrs	r3, r3, #16
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	0a1b      	lsrs	r3, r3, #8
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8005b60:	8abb      	ldrh	r3, [r7, #20]
 8005b62:	141b      	asrs	r3, r3, #16
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8005b6a:	8abb      	ldrh	r3, [r7, #20]
 8005b6c:	0a1b      	lsrs	r3, r3, #8
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8005b76:	8abb      	ldrh	r3, [r7, #20]
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	220c      	movs	r2, #12
 8005b82:	60da      	str	r2, [r3, #12]

  return 0;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3720      	adds	r7, #32
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
	...

08005b90 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	32b0      	adds	r2, #176	; 0xb0
 8005ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bac:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8005bae:	2317      	movs	r3, #23
 8005bb0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d102      	bne.n	8005bbe <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8005bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bbc:	e011      	b.n	8005be2 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	8afa      	ldrh	r2, [r7, #22]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d303      	bcc.n	8005bd4 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8005bd4:	8afb      	ldrh	r3, [r7, #22]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	4904      	ldr	r1, [pc, #16]	; (8005bec <SCSI_ModeSense6+0x5c>)
 8005bda:	6938      	ldr	r0, [r7, #16]
 8005bdc:	f000 fe28 	bl	8006830 <SCSI_UpdateBotData>

  return 0;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20000080 	.word	0x20000080

08005bf0 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	32b0      	adds	r2, #176	; 0xb0
 8005c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c0c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8005c0e:	231b      	movs	r3, #27
 8005c10:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d102      	bne.n	8005c1e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8005c18:	f04f 33ff 	mov.w	r3, #4294967295
 8005c1c:	e011      	b.n	8005c42 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3308      	adds	r3, #8
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	8afa      	ldrh	r2, [r7, #22]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d303      	bcc.n	8005c34 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3308      	adds	r3, #8
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8005c34:	8afb      	ldrh	r3, [r7, #22]
 8005c36:	461a      	mov	r2, r3
 8005c38:	4904      	ldr	r1, [pc, #16]	; (8005c4c <SCSI_ModeSense10+0x5c>)
 8005c3a:	6938      	ldr	r0, [r7, #16]
 8005c3c:	f000 fdf8 	bl	8006830 <SCSI_UpdateBotData>

  return 0;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20000098 	.word	0x20000098

08005c50 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	32b0      	adds	r2, #176	; 0xb0
 8005c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c6c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d102      	bne.n	8005c7a <SCSI_RequestSense+0x2a>
  {
    return -1;
 8005c74:	f04f 33ff 	mov.w	r3, #4294967295
 8005c78:	e069      	b.n	8005d4e <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10a      	bne.n	8005c9a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005c8a:	2320      	movs	r3, #32
 8005c8c:	2205      	movs	r2, #5
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 f861 	bl	8005d56 <SCSI_SenseCode>
    return -1;
 8005c94:	f04f 33ff 	mov.w	r3, #4294967295
 8005c98:	e059      	b.n	8005d4e <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	75fb      	strb	r3, [r7, #23]
 8005c9e:	e007      	b.n	8005cb0 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005caa:	7dfb      	ldrb	r3, [r7, #23]
 8005cac:	3301      	adds	r3, #1
 8005cae:	75fb      	strb	r3, [r7, #23]
 8005cb0:	7dfb      	ldrb	r3, [r7, #23]
 8005cb2:	2b11      	cmp	r3, #17
 8005cb4:	d9f4      	bls.n	8005ca0 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2270      	movs	r2, #112	; 0x70
 8005cba:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	220c      	movs	r2, #12
 8005cc0:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d02e      	beq.n	8005d30 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005cd8:	461a      	mov	r2, r3
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	3248      	adds	r2, #72	; 0x48
 8005cde:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	3348      	adds	r3, #72	; 0x48
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	4413      	add	r3, r2
 8005cf4:	791a      	ldrb	r2, [r3, #4]
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	3348      	adds	r3, #72	; 0x48
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	4413      	add	r3, r2
 8005d08:	795a      	ldrb	r2, [r3, #5]
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005d14:	3301      	adds	r3, #1
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005d24:	2b04      	cmp	r3, #4
 8005d26:	d103      	bne.n	8005d30 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	2212      	movs	r2, #18
 8005d34:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	3304      	adds	r3, #4
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2b12      	cmp	r3, #18
 8005d3e:	d805      	bhi.n	8005d4c <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3304      	adds	r3, #4
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b085      	sub	sp, #20
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	4608      	mov	r0, r1
 8005d60:	4611      	mov	r1, r2
 8005d62:	461a      	mov	r2, r3
 8005d64:	4603      	mov	r3, r0
 8005d66:	70fb      	strb	r3, [r7, #3]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	70bb      	strb	r3, [r7, #2]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	32b0      	adds	r2, #176	; 0xb0
 8005d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d7e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d02c      	beq.n	8005de0 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3248      	adds	r2, #72	; 0x48
 8005d92:	78b9      	ldrb	r1, [r7, #2]
 8005d94:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	3348      	adds	r3, #72	; 0x48
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	4413      	add	r3, r2
 8005da6:	787a      	ldrb	r2, [r7, #1]
 8005da8:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	3348      	adds	r3, #72	; 0x48
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	4413      	add	r3, r2
 8005db8:	2200      	movs	r2, #0
 8005dba:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d105      	bne.n	8005de2 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8005dde:	e000      	b.n	8005de2 <SCSI_SenseCode+0x8c>
    return;
 8005de0:	bf00      	nop
  }
}
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	460b      	mov	r3, r1
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	32b0      	adds	r2, #176	; 0xb0
 8005e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e08:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8005e10:	f04f 33ff 	mov.w	r3, #4294967295
 8005e14:	e03b      	b.n	8005e8e <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d10f      	bne.n	8005e40 <SCSI_StartStopUnit+0x54>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3304      	adds	r3, #4
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d108      	bne.n	8005e40 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8005e2e:	7af9      	ldrb	r1, [r7, #11]
 8005e30:	2324      	movs	r3, #36	; 0x24
 8005e32:	2205      	movs	r2, #5
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7ff ff8e 	bl	8005d56 <SCSI_SenseCode>

    return -1;
 8005e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e3e:	e026      	b.n	8005e8e <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3304      	adds	r3, #4
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d104      	bne.n	8005e58 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005e56:	e016      	b.n	8005e86 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d104      	bne.n	8005e70 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005e6e:	e00a      	b.n	8005e86 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3304      	adds	r3, #4
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d103      	bne.n	8005e86 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	60da      	str	r2, [r3, #12]

  return 0;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b087      	sub	sp, #28
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	607a      	str	r2, [r7, #4]
 8005ea2:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	32b0      	adds	r2, #176	; 0xb0
 8005eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d102      	bne.n	8005ec0 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8005eba:	f04f 33ff 	mov.w	r3, #4294967295
 8005ebe:	e011      	b.n	8005ee4 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d104      	bne.n	8005ed4 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005ed2:	e003      	b.n	8005edc <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	60da      	str	r2, [r3, #12]

  return 0;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	371c      	adds	r7, #28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	32b0      	adds	r2, #176	; 0xb0
 8005f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d102      	bne.n	8005f1a <SCSI_Read10+0x2a>
  {
    return -1;
 8005f14:	f04f 33ff 	mov.w	r3, #4294967295
 8005f18:	e090      	b.n	800603c <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	7a1b      	ldrb	r3, [r3, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f040 8082 	bne.w	8006028 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005f2a:	b25b      	sxtb	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	db0a      	blt.n	8005f46 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005f36:	2320      	movs	r3, #32
 8005f38:	2205      	movs	r2, #5
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f7ff ff0b 	bl	8005d56 <SCSI_SenseCode>
      return -1;
 8005f40:	f04f 33ff 	mov.w	r3, #4294967295
 8005f44:	e07a      	b.n	800603c <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d108      	bne.n	8005f62 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005f50:	7af9      	ldrb	r1, [r7, #11]
 8005f52:	233a      	movs	r3, #58	; 0x3a
 8005f54:	2202      	movs	r2, #2
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f7ff fefd 	bl	8005d56 <SCSI_SenseCode>

      return -1;
 8005f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f60:	e06c      	b.n	800603c <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	33b0      	adds	r3, #176	; 0xb0
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	7afa      	ldrb	r2, [r7, #11]
 8005f76:	4610      	mov	r0, r2
 8005f78:	4798      	blx	r3
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d008      	beq.n	8005f92 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005f80:	7af9      	ldrb	r1, [r7, #11]
 8005f82:	233a      	movs	r3, #58	; 0x3a
 8005f84:	2202      	movs	r2, #2
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f7ff fee5 	bl	8005d56 <SCSI_SenseCode>
      return -1;
 8005f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f90:	e054      	b.n	800603c <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3302      	adds	r3, #2
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3303      	adds	r3, #3
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005fa2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005fac:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	3205      	adds	r2, #5
 8005fb2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8005fb4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	3307      	adds	r3, #7
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	021b      	lsls	r3, r3, #8
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	3208      	adds	r2, #8
 8005fc8:	7812      	ldrb	r2, [r2, #0]
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005fde:	7af9      	ldrb	r1, [r7, #11]
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 fadc 	bl	800659e <SCSI_CheckAddressRange>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	da02      	bge.n	8005ff2 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005fec:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff0:	e024      	b.n	800603c <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005ffe:	6979      	ldr	r1, [r7, #20]
 8006000:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8006004:	fb01 f303 	mul.w	r3, r1, r3
 8006008:	429a      	cmp	r2, r3
 800600a:	d00a      	beq.n	8006022 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006012:	2320      	movs	r3, #32
 8006014:	2205      	movs	r2, #5
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f7ff fe9d 	bl	8005d56 <SCSI_SenseCode>
      return -1;
 800601c:	f04f 33ff 	mov.w	r3, #4294967295
 8006020:	e00c      	b.n	800603c <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2202      	movs	r2, #2
 8006026:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800602e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8006030:	7afb      	ldrb	r3, [r7, #11]
 8006032:	4619      	mov	r1, r3
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 fadf 	bl	80065f8 <SCSI_ProcessRead>
 800603a:	4603      	mov	r3, r0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	460b      	mov	r3, r1
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	32b0      	adds	r2, #176	; 0xb0
 800605c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006060:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d102      	bne.n	800606e <SCSI_Read12+0x2a>
  {
    return -1;
 8006068:	f04f 33ff 	mov.w	r3, #4294967295
 800606c:	e09a      	b.n	80061a4 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	7a1b      	ldrb	r3, [r3, #8]
 8006072:	2b00      	cmp	r3, #0
 8006074:	f040 808c 	bne.w	8006190 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800607e:	b25b      	sxtb	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	db0a      	blt.n	800609a <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800608a:	2320      	movs	r3, #32
 800608c:	2205      	movs	r2, #5
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7ff fe61 	bl	8005d56 <SCSI_SenseCode>
      return -1;
 8006094:	f04f 33ff 	mov.w	r3, #4294967295
 8006098:	e084      	b.n	80061a4 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d108      	bne.n	80060b6 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80060a4:	7af9      	ldrb	r1, [r7, #11]
 80060a6:	233a      	movs	r3, #58	; 0x3a
 80060a8:	2202      	movs	r2, #2
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f7ff fe53 	bl	8005d56 <SCSI_SenseCode>
      return -1;
 80060b0:	f04f 33ff 	mov.w	r3, #4294967295
 80060b4:	e076      	b.n	80061a4 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	33b0      	adds	r3, #176	; 0xb0
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	7afa      	ldrb	r2, [r7, #11]
 80060ca:	4610      	mov	r0, r2
 80060cc:	4798      	blx	r3
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d008      	beq.n	80060e6 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80060d4:	7af9      	ldrb	r1, [r7, #11]
 80060d6:	233a      	movs	r3, #58	; 0x3a
 80060d8:	2202      	movs	r2, #2
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f7ff fe3b 	bl	8005d56 <SCSI_SenseCode>
      return -1;
 80060e0:	f04f 33ff 	mov.w	r3, #4294967295
 80060e4:	e05e      	b.n	80061a4 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	3302      	adds	r3, #2
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3303      	adds	r3, #3
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80060f6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3304      	adds	r3, #4
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006100:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	3205      	adds	r2, #5
 8006106:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8006108:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	3306      	adds	r3, #6
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3307      	adds	r3, #7
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006120:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	3308      	adds	r3, #8
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800612a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	3209      	adds	r2, #9
 8006130:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8006132:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006146:	7af9      	ldrb	r1, [r7, #11]
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 fa28 	bl	800659e <SCSI_CheckAddressRange>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	da02      	bge.n	800615a <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006154:	f04f 33ff 	mov.w	r3, #4294967295
 8006158:	e024      	b.n	80061a4 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006166:	6979      	ldr	r1, [r7, #20]
 8006168:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800616c:	fb01 f303 	mul.w	r3, r1, r3
 8006170:	429a      	cmp	r2, r3
 8006172:	d00a      	beq.n	800618a <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800617a:	2320      	movs	r3, #32
 800617c:	2205      	movs	r2, #5
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f7ff fde9 	bl	8005d56 <SCSI_SenseCode>
      return -1;
 8006184:	f04f 33ff 	mov.w	r3, #4294967295
 8006188:	e00c      	b.n	80061a4 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2202      	movs	r2, #2
 800618e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006196:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8006198:	7afb      	ldrb	r3, [r7, #11]
 800619a:	4619      	mov	r1, r3
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 fa2b 	bl	80065f8 <SCSI_ProcessRead>
 80061a2:	4603      	mov	r3, r0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	460b      	mov	r3, r1
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	32b0      	adds	r2, #176	; 0xb0
 80061c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d102      	bne.n	80061d6 <SCSI_Write10+0x2a>
  {
    return -1;
 80061d0:	f04f 33ff 	mov.w	r3, #4294967295
 80061d4:	e0ba      	b.n	800634c <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	7a1b      	ldrb	r3, [r3, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f040 80b0 	bne.w	8006340 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10a      	bne.n	8006200 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80061f0:	2320      	movs	r3, #32
 80061f2:	2205      	movs	r2, #5
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f7ff fdae 	bl	8005d56 <SCSI_SenseCode>
      return -1;
 80061fa:	f04f 33ff 	mov.w	r3, #4294967295
 80061fe:	e0a5      	b.n	800634c <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8006206:	b25b      	sxtb	r3, r3
 8006208:	2b00      	cmp	r3, #0
 800620a:	da0a      	bge.n	8006222 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006212:	2320      	movs	r3, #32
 8006214:	2205      	movs	r2, #5
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f7ff fd9d 	bl	8005d56 <SCSI_SenseCode>
      return -1;
 800621c:	f04f 33ff 	mov.w	r3, #4294967295
 8006220:	e094      	b.n	800634c <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	33b0      	adds	r3, #176	; 0xb0
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	7afa      	ldrb	r2, [r7, #11]
 8006236:	4610      	mov	r0, r2
 8006238:	4798      	blx	r3
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d008      	beq.n	8006252 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006240:	7af9      	ldrb	r1, [r7, #11]
 8006242:	233a      	movs	r3, #58	; 0x3a
 8006244:	2202      	movs	r2, #2
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f7ff fd85 	bl	8005d56 <SCSI_SenseCode>
      return -1;
 800624c:	f04f 33ff 	mov.w	r3, #4294967295
 8006250:	e07c      	b.n	800634c <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	33b0      	adds	r3, #176	; 0xb0
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	7afa      	ldrb	r2, [r7, #11]
 8006266:	4610      	mov	r0, r2
 8006268:	4798      	blx	r3
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d008      	beq.n	8006282 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8006270:	7af9      	ldrb	r1, [r7, #11]
 8006272:	2327      	movs	r3, #39	; 0x27
 8006274:	2202      	movs	r2, #2
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f7ff fd6d 	bl	8005d56 <SCSI_SenseCode>
      return -1;
 800627c:	f04f 33ff 	mov.w	r3, #4294967295
 8006280:	e064      	b.n	800634c <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3302      	adds	r3, #2
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3303      	adds	r3, #3
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006292:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3304      	adds	r3, #4
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800629c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	3205      	adds	r2, #5
 80062a2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80062a4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3307      	adds	r3, #7
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	3208      	adds	r2, #8
 80062b8:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80062ba:	431a      	orrs	r2, r3
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80062ce:	7af9      	ldrb	r1, [r7, #11]
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 f964 	bl	800659e <SCSI_CheckAddressRange>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	da02      	bge.n	80062e2 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80062dc:	f04f 33ff 	mov.w	r3, #4294967295
 80062e0:	e034      	b.n	800634c <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80062ee:	fb02 f303 	mul.w	r3, r2, r3
 80062f2:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d00a      	beq.n	8006316 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006306:	2320      	movs	r3, #32
 8006308:	2205      	movs	r2, #5
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f7ff fd23 	bl	8005d56 <SCSI_SenseCode>
      return -1;
 8006310:	f04f 33ff 	mov.w	r3, #4294967295
 8006314:	e01a      	b.n	800634c <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800631c:	bf28      	it	cs
 800631e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006322:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2201      	movs	r2, #1
 8006328:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800632a:	4b0a      	ldr	r3, [pc, #40]	; (8006354 <SCSI_Write10+0x1a8>)
 800632c:	7819      	ldrb	r1, [r3, #0]
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f103 0210 	add.w	r2, r3, #16
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f002 fb36 	bl	80089a8 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800633c:	2300      	movs	r3, #0
 800633e:	e005      	b.n	800634c <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8006340:	7afb      	ldrb	r3, [r7, #11]
 8006342:	4619      	mov	r1, r3
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 f9dd 	bl	8006704 <SCSI_ProcessWrite>
 800634a:	4603      	mov	r3, r0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	2000006f 	.word	0x2000006f

08006358 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	460b      	mov	r3, r1
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	32b0      	adds	r2, #176	; 0xb0
 8006370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006374:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d102      	bne.n	8006382 <SCSI_Write12+0x2a>
  {
    return -1;
 800637c:	f04f 33ff 	mov.w	r3, #4294967295
 8006380:	e0ca      	b.n	8006518 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	7a1b      	ldrb	r3, [r3, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	f040 80c0 	bne.w	800650c <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10a      	bne.n	80063ac <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800639c:	2320      	movs	r3, #32
 800639e:	2205      	movs	r2, #5
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f7ff fcd8 	bl	8005d56 <SCSI_SenseCode>
      return -1;
 80063a6:	f04f 33ff 	mov.w	r3, #4294967295
 80063aa:	e0b5      	b.n	8006518 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80063b2:	b25b      	sxtb	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	da0a      	bge.n	80063ce <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80063be:	2320      	movs	r3, #32
 80063c0:	2205      	movs	r2, #5
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f7ff fcc7 	bl	8005d56 <SCSI_SenseCode>
      return -1;
 80063c8:	f04f 33ff 	mov.w	r3, #4294967295
 80063cc:	e0a4      	b.n	8006518 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	33b0      	adds	r3, #176	; 0xb0
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	7afa      	ldrb	r2, [r7, #11]
 80063e2:	4610      	mov	r0, r2
 80063e4:	4798      	blx	r3
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00b      	beq.n	8006404 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80063ec:	7af9      	ldrb	r1, [r7, #11]
 80063ee:	233a      	movs	r3, #58	; 0x3a
 80063f0:	2202      	movs	r2, #2
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f7ff fcaf 	bl	8005d56 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	2205      	movs	r2, #5
 80063fc:	721a      	strb	r2, [r3, #8]
      return -1;
 80063fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006402:	e089      	b.n	8006518 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	33b0      	adds	r3, #176	; 0xb0
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	7afa      	ldrb	r2, [r7, #11]
 8006418:	4610      	mov	r0, r2
 800641a:	4798      	blx	r3
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00b      	beq.n	800643a <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8006422:	7af9      	ldrb	r1, [r7, #11]
 8006424:	2327      	movs	r3, #39	; 0x27
 8006426:	2202      	movs	r2, #2
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f7ff fc94 	bl	8005d56 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2205      	movs	r2, #5
 8006432:	721a      	strb	r2, [r3, #8]
      return -1;
 8006434:	f04f 33ff 	mov.w	r3, #4294967295
 8006438:	e06e      	b.n	8006518 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	3302      	adds	r3, #2
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	3303      	adds	r3, #3
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800644a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3304      	adds	r3, #4
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006454:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	3205      	adds	r2, #5
 800645a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800645c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3306      	adds	r3, #6
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3307      	adds	r3, #7
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006474:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3308      	adds	r3, #8
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800647e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	3209      	adds	r2, #9
 8006484:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8006486:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800649a:	7af9      	ldrb	r1, [r7, #11]
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 f87e 	bl	800659e <SCSI_CheckAddressRange>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	da02      	bge.n	80064ae <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80064a8:	f04f 33ff 	mov.w	r3, #4294967295
 80064ac:	e034      	b.n	8006518 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80064ba:	fb02 f303 	mul.w	r3, r2, r3
 80064be:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d00a      	beq.n	80064e2 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80064d2:	2320      	movs	r3, #32
 80064d4:	2205      	movs	r2, #5
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f7ff fc3d 	bl	8005d56 <SCSI_SenseCode>
      return -1;
 80064dc:	f04f 33ff 	mov.w	r3, #4294967295
 80064e0:	e01a      	b.n	8006518 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064e8:	bf28      	it	cs
 80064ea:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80064ee:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2201      	movs	r2, #1
 80064f4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80064f6:	4b0a      	ldr	r3, [pc, #40]	; (8006520 <SCSI_Write12+0x1c8>)
 80064f8:	7819      	ldrb	r1, [r3, #0]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f103 0210 	add.w	r2, r3, #16
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f002 fa50 	bl	80089a8 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8006508:	2300      	movs	r3, #0
 800650a:	e005      	b.n	8006518 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800650c:	7afb      	ldrb	r3, [r7, #11]
 800650e:	4619      	mov	r1, r3
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f8f7 	bl	8006704 <SCSI_ProcessWrite>
 8006516:	4603      	mov	r3, r0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	2000006f 	.word	0x2000006f

08006524 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	460b      	mov	r3, r1
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	32b0      	adds	r2, #176	; 0xb0
 800653c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006540:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d102      	bne.n	800654e <SCSI_Verify10+0x2a>
  {
    return -1;
 8006548:	f04f 33ff 	mov.w	r3, #4294967295
 800654c:	e023      	b.n	8006596 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3301      	adds	r3, #1
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d008      	beq.n	800656e <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800655c:	7af9      	ldrb	r1, [r7, #11]
 800655e:	2324      	movs	r3, #36	; 0x24
 8006560:	2205      	movs	r2, #5
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f7ff fbf7 	bl	8005d56 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8006568:	f04f 33ff 	mov.w	r3, #4294967295
 800656c:	e013      	b.n	8006596 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800657a:	7af9      	ldrb	r1, [r7, #11]
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 f80e 	bl	800659e <SCSI_CheckAddressRange>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	da02      	bge.n	800658e <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8006588:	f04f 33ff 	mov.w	r3, #4294967295
 800658c:	e003      	b.n	8006596 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2200      	movs	r2, #0
 8006592:	60da      	str	r2, [r3, #12]

  return 0;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b086      	sub	sp, #24
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
 80065aa:	460b      	mov	r3, r1
 80065ac:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	32b0      	adds	r2, #176	; 0xb0
 80065b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065bc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d102      	bne.n	80065ca <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 80065c4:	f04f 33ff 	mov.w	r3, #4294967295
 80065c8:	e011      	b.n	80065ee <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	441a      	add	r2, r3
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d908      	bls.n	80065ec <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80065da:	7af9      	ldrb	r1, [r7, #11]
 80065dc:	2321      	movs	r3, #33	; 0x21
 80065de:	2205      	movs	r2, #5
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f7ff fbb8 	bl	8005d56 <SCSI_SenseCode>
    return -1;
 80065e6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ea:	e000      	b.n	80065ee <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80065f8:	b590      	push	{r4, r7, lr}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	32b0      	adds	r2, #176	; 0xb0
 800660e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006612:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d102      	bne.n	8006620 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800661a:	f04f 33ff 	mov.w	r3, #4294967295
 800661e:	e06a      	b.n	80066f6 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800662c:	fb02 f303 	mul.w	r3, r2, r3
 8006630:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006638:	bf28      	it	cs
 800663a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800663e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	33b0      	adds	r3, #176	; 0xb0
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	691c      	ldr	r4, [r3, #16]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f103 0110 	add.w	r1, r3, #16
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006664:	4618      	mov	r0, r3
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800666c:	b29b      	uxth	r3, r3
 800666e:	78f8      	ldrb	r0, [r7, #3]
 8006670:	47a0      	blx	r4
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	da08      	bge.n	800668a <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8006678:	78f9      	ldrb	r1, [r7, #3]
 800667a:	2311      	movs	r3, #17
 800667c:	2204      	movs	r2, #4
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff fb69 	bl	8005d56 <SCSI_SenseCode>
    return -1;
 8006684:	f04f 33ff 	mov.w	r3, #4294967295
 8006688:	e035      	b.n	80066f6 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800668a:	4b1d      	ldr	r3, [pc, #116]	; (8006700 <SCSI_ProcessRead+0x108>)
 800668c:	7819      	ldrb	r1, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f103 0210 	add.w	r2, r3, #16
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f002 f94e 	bl	8008938 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80066a8:	4619      	mov	r1, r3
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80066b0:	441a      	add	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80066c4:	4619      	mov	r1, r3
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80066cc:	1ad2      	subs	r2, r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	1ad2      	subs	r2, r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d102      	bne.n	80066f4 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2203      	movs	r2, #3
 80066f2:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd90      	pop	{r4, r7, pc}
 80066fe:	bf00      	nop
 8006700:	2000006e 	.word	0x2000006e

08006704 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8006704:	b590      	push	{r4, r7, lr}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	460b      	mov	r3, r1
 800670e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	32b0      	adds	r2, #176	; 0xb0
 800671a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800671e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d102      	bne.n	800672c <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8006726:	f04f 33ff 	mov.w	r3, #4294967295
 800672a:	e07a      	b.n	8006822 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006738:	fb02 f303 	mul.w	r3, r2, r3
 800673c:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006744:	bf28      	it	cs
 8006746:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800674a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	33b0      	adds	r3, #176	; 0xb0
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	695c      	ldr	r4, [r3, #20]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f103 0110 	add.w	r1, r3, #16
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006770:	4618      	mov	r0, r3
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8006778:	b29b      	uxth	r3, r3
 800677a:	78f8      	ldrb	r0, [r7, #3]
 800677c:	47a0      	blx	r4
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	da08      	bge.n	8006796 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8006784:	78f9      	ldrb	r1, [r7, #3]
 8006786:	2303      	movs	r3, #3
 8006788:	2204      	movs	r2, #4
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff fae3 	bl	8005d56 <SCSI_SenseCode>
    return -1;
 8006790:	f04f 33ff 	mov.w	r3, #4294967295
 8006794:	e045      	b.n	8006822 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80067a2:	4619      	mov	r1, r3
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80067aa:	441a      	add	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80067be:	4619      	mov	r1, r3
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80067c6:	1ad2      	subs	r2, r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	1ad2      	subs	r2, r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d104      	bne.n	80067f2 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80067e8:	2100      	movs	r1, #0
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7fe fd12 	bl	8005214 <MSC_BOT_SendCSW>
 80067f0:	e016      	b.n	8006820 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80067fe:	fb02 f303 	mul.w	r3, r2, r3
 8006802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006806:	bf28      	it	cs
 8006808:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800680c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800680e:	4b07      	ldr	r3, [pc, #28]	; (800682c <SCSI_ProcessWrite+0x128>)
 8006810:	7819      	ldrb	r1, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f103 0210 	add.w	r2, r3, #16
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f002 f8c4 	bl	80089a8 <USBD_LL_PrepareReceive>
  }

  return 0;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	bd90      	pop	{r4, r7, pc}
 800682a:	bf00      	nop
 800682c:	2000006f 	.word	0x2000006f

08006830 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	4613      	mov	r3, r2
 800683c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800683e:	88fb      	ldrh	r3, [r7, #6]
 8006840:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d102      	bne.n	800684e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8006848:	f04f 33ff 	mov.w	r3, #4294967295
 800684c:	e013      	b.n	8006876 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800684e:	8afa      	ldrh	r2, [r7, #22]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8006854:	e00b      	b.n	800686e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8006856:	8afb      	ldrh	r3, [r7, #22]
 8006858:	3b01      	subs	r3, #1
 800685a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800685c:	8afb      	ldrh	r3, [r7, #22]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	441a      	add	r2, r3
 8006862:	8afb      	ldrh	r3, [r7, #22]
 8006864:	7811      	ldrb	r1, [r2, #0]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4413      	add	r3, r2
 800686a:	460a      	mov	r2, r1
 800686c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800686e:	8afb      	ldrh	r3, [r7, #22]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1f0      	bne.n	8006856 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b086      	sub	sp, #24
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	4613      	mov	r3, r2
 800688e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006896:	2303      	movs	r3, #3
 8006898:	e01f      	b.n	80068da <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	79fa      	ldrb	r2, [r7, #7]
 80068cc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f001 fe3c 	bl	800854c <USBD_LL_Init>
 80068d4:	4603      	mov	r3, r0
 80068d6:	75fb      	strb	r3, [r7, #23]

  return ret;
 80068d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e025      	b.n	8006946 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	32ae      	adds	r2, #174	; 0xae
 800690c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00f      	beq.n	8006936 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	32ae      	adds	r2, #174	; 0xae
 8006920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	f107 020e 	add.w	r2, r7, #14
 800692a:	4610      	mov	r0, r2
 800692c:	4798      	blx	r3
 800692e:	4602      	mov	r2, r0
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f001 fe44 	bl	80085e4 <USBD_LL_Start>
 800695c:	4603      	mov	r3, r0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800696e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	460b      	mov	r3, r1
 8006986:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006992:	2b00      	cmp	r3, #0
 8006994:	d009      	beq.n	80069aa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	78fa      	ldrb	r2, [r7, #3]
 80069a0:	4611      	mov	r1, r2
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3
 80069a6:	4603      	mov	r3, r0
 80069a8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	78fa      	ldrb	r2, [r7, #3]
 80069ce:	4611      	mov	r1, r2
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	4798      	blx	r3
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80069da:	2303      	movs	r3, #3
 80069dc:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069de:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f001 f939 	bl	8007c72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006a0e:	461a      	mov	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a1c:	f003 031f 	and.w	r3, r3, #31
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d01a      	beq.n	8006a5a <USBD_LL_SetupStage+0x72>
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d822      	bhi.n	8006a6e <USBD_LL_SetupStage+0x86>
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d002      	beq.n	8006a32 <USBD_LL_SetupStage+0x4a>
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d00a      	beq.n	8006a46 <USBD_LL_SetupStage+0x5e>
 8006a30:	e01d      	b.n	8006a6e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fb66 	bl	800710c <USBD_StdDevReq>
 8006a40:	4603      	mov	r3, r0
 8006a42:	73fb      	strb	r3, [r7, #15]
      break;
 8006a44:	e020      	b.n	8006a88 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fbce 	bl	80071f0 <USBD_StdItfReq>
 8006a54:	4603      	mov	r3, r0
 8006a56:	73fb      	strb	r3, [r7, #15]
      break;
 8006a58:	e016      	b.n	8006a88 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a60:	4619      	mov	r1, r3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fc30 	bl	80072c8 <USBD_StdEPReq>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a6c:	e00c      	b.n	8006a88 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f001 fe8d 	bl	800879c <USBD_LL_StallEP>
 8006a82:	4603      	mov	r3, r0
 8006a84:	73fb      	strb	r3, [r7, #15]
      break;
 8006a86:	bf00      	nop
  }

  return ret;
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b086      	sub	sp, #24
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	60f8      	str	r0, [r7, #12]
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	607a      	str	r2, [r7, #4]
 8006a9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006aa4:	7afb      	ldrb	r3, [r7, #11]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d16e      	bne.n	8006b88 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006ab0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	f040 8098 	bne.w	8006bee <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	689a      	ldr	r2, [r3, #8]
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d913      	bls.n	8006af2 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	1ad2      	subs	r2, r2, r3
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	bf28      	it	cs
 8006ae4:	4613      	movcs	r3, r2
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	6879      	ldr	r1, [r7, #4]
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f001 f998 	bl	8007e20 <USBD_CtlContinueRx>
 8006af0:	e07d      	b.n	8006bee <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006af8:	f003 031f 	and.w	r3, r3, #31
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d014      	beq.n	8006b2a <USBD_LL_DataOutStage+0x98>
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d81d      	bhi.n	8006b40 <USBD_LL_DataOutStage+0xae>
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <USBD_LL_DataOutStage+0x7c>
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d003      	beq.n	8006b14 <USBD_LL_DataOutStage+0x82>
 8006b0c:	e018      	b.n	8006b40 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	75bb      	strb	r3, [r7, #22]
            break;
 8006b12:	e018      	b.n	8006b46 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 fa64 	bl	8006fec <USBD_CoreFindIF>
 8006b24:	4603      	mov	r3, r0
 8006b26:	75bb      	strb	r3, [r7, #22]
            break;
 8006b28:	e00d      	b.n	8006b46 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	4619      	mov	r1, r3
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 fa66 	bl	8007006 <USBD_CoreFindEP>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	75bb      	strb	r3, [r7, #22]
            break;
 8006b3e:	e002      	b.n	8006b46 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	75bb      	strb	r3, [r7, #22]
            break;
 8006b44:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006b46:	7dbb      	ldrb	r3, [r7, #22]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d119      	bne.n	8006b80 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b03      	cmp	r3, #3
 8006b56:	d113      	bne.n	8006b80 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006b58:	7dba      	ldrb	r2, [r7, #22]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	32ae      	adds	r2, #174	; 0xae
 8006b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00b      	beq.n	8006b80 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006b68:	7dba      	ldrb	r2, [r7, #22]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006b70:	7dba      	ldrb	r2, [r7, #22]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	32ae      	adds	r2, #174	; 0xae
 8006b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f001 f95e 	bl	8007e42 <USBD_CtlSendStatus>
 8006b86:	e032      	b.n	8006bee <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006b88:	7afb      	ldrb	r3, [r7, #11]
 8006b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	4619      	mov	r1, r3
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 fa37 	bl	8007006 <USBD_CoreFindEP>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b9c:	7dbb      	ldrb	r3, [r7, #22]
 8006b9e:	2bff      	cmp	r3, #255	; 0xff
 8006ba0:	d025      	beq.n	8006bee <USBD_LL_DataOutStage+0x15c>
 8006ba2:	7dbb      	ldrb	r3, [r7, #22]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d122      	bne.n	8006bee <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b03      	cmp	r3, #3
 8006bb2:	d117      	bne.n	8006be4 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006bb4:	7dba      	ldrb	r2, [r7, #22]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	32ae      	adds	r2, #174	; 0xae
 8006bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00f      	beq.n	8006be4 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006bc4:	7dba      	ldrb	r2, [r7, #22]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006bcc:	7dba      	ldrb	r2, [r7, #22]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	32ae      	adds	r2, #174	; 0xae
 8006bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	7afa      	ldrb	r2, [r7, #11]
 8006bda:	4611      	mov	r1, r2
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	4798      	blx	r3
 8006be0:	4603      	mov	r3, r0
 8006be2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006be4:	7dfb      	ldrb	r3, [r7, #23]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006bea:	7dfb      	ldrb	r3, [r7, #23]
 8006bec:	e000      	b.n	8006bf0 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3718      	adds	r7, #24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	460b      	mov	r3, r1
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d16f      	bne.n	8006cec <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	3314      	adds	r3, #20
 8006c10:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d15a      	bne.n	8006cd2 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d914      	bls.n	8006c52 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	1ad2      	subs	r2, r2, r3
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f001 f8dd 	bl	8007dfe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c44:	2300      	movs	r3, #0
 8006c46:	2200      	movs	r2, #0
 8006c48:	2100      	movs	r1, #0
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f001 feac 	bl	80089a8 <USBD_LL_PrepareReceive>
 8006c50:	e03f      	b.n	8006cd2 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d11c      	bne.n	8006c98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d316      	bcc.n	8006c98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d20f      	bcs.n	8006c98 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f001 f8be 	bl	8007dfe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2100      	movs	r1, #0
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f001 fe89 	bl	80089a8 <USBD_LL_PrepareReceive>
 8006c96:	e01c      	b.n	8006cd2 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b03      	cmp	r3, #3
 8006ca2:	d10f      	bne.n	8006cc4 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d009      	beq.n	8006cc4 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cc4:	2180      	movs	r1, #128	; 0x80
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f001 fd68 	bl	800879c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f001 f8cb 	bl	8007e68 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d03a      	beq.n	8006d52 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f7ff fe42 	bl	8006966 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006cea:	e032      	b.n	8006d52 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006cec:	7afb      	ldrb	r3, [r7, #11]
 8006cee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 f985 	bl	8007006 <USBD_CoreFindEP>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d00:	7dfb      	ldrb	r3, [r7, #23]
 8006d02:	2bff      	cmp	r3, #255	; 0xff
 8006d04:	d025      	beq.n	8006d52 <USBD_LL_DataInStage+0x15a>
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d122      	bne.n	8006d52 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d11c      	bne.n	8006d52 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006d18:	7dfa      	ldrb	r2, [r7, #23]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	32ae      	adds	r2, #174	; 0xae
 8006d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d014      	beq.n	8006d52 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006d28:	7dfa      	ldrb	r2, [r7, #23]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006d30:	7dfa      	ldrb	r2, [r7, #23]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	32ae      	adds	r2, #174	; 0xae
 8006d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	7afa      	ldrb	r2, [r7, #11]
 8006d3e:	4611      	mov	r1, r2
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	4798      	blx	r3
 8006d44:	4603      	mov	r3, r0
 8006d46:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006d48:	7dbb      	ldrb	r3, [r7, #22]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006d4e:	7dbb      	ldrb	r3, [r7, #22]
 8006d50:	e000      	b.n	8006d54 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3718      	adds	r7, #24
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d014      	beq.n	8006dc2 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00e      	beq.n	8006dc2 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6852      	ldr	r2, [r2, #4]
 8006db0:	b2d2      	uxtb	r2, r2
 8006db2:	4611      	mov	r1, r2
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	4798      	blx	r3
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dc2:	2340      	movs	r3, #64	; 0x40
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 fc3d 	bl	8008648 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2240      	movs	r2, #64	; 0x40
 8006dda:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dde:	2340      	movs	r3, #64	; 0x40
 8006de0:	2200      	movs	r2, #0
 8006de2:	2180      	movs	r1, #128	; 0x80
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 fc2f 	bl	8008648 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2240      	movs	r2, #64	; 0x40
 8006df4:	621a      	str	r2, [r3, #32]

  return ret;
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	78fa      	ldrb	r2, [r7, #3]
 8006e10:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b04      	cmp	r3, #4
 8006e32:	d006      	beq.n	8006e42 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2204      	movs	r2, #4
 8006e46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	d106      	bne.n	8006e7a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b03      	cmp	r3, #3
 8006e9a:	d110      	bne.n	8006ebe <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00b      	beq.n	8006ebe <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d005      	beq.n	8006ebe <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	32ae      	adds	r2, #174	; 0xae
 8006ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e01c      	b.n	8006f24 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d115      	bne.n	8006f22 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	32ae      	adds	r2, #174	; 0xae
 8006f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00b      	beq.n	8006f22 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	32ae      	adds	r2, #174	; 0xae
 8006f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	78fa      	ldrb	r2, [r7, #3]
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	32ae      	adds	r2, #174	; 0xae
 8006f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e01c      	b.n	8006f88 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d115      	bne.n	8006f86 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	32ae      	adds	r2, #174	; 0xae
 8006f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00b      	beq.n	8006f86 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	32ae      	adds	r2, #174	; 0xae
 8006f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	78fa      	ldrb	r2, [r7, #3]
 8006f80:	4611      	mov	r1, r2
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00e      	beq.n	8006fe2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6852      	ldr	r2, [r2, #4]
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	4798      	blx	r3
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ff8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007006:	b480      	push	{r7}
 8007008:	b083      	sub	sp, #12
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007012:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007014:	4618      	mov	r0, r3
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	460b      	mov	r3, r1
 800702a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007034:	2300      	movs	r3, #0
 8007036:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	885b      	ldrh	r3, [r3, #2]
 800703c:	b29a      	uxth	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	b29b      	uxth	r3, r3
 8007044:	429a      	cmp	r2, r3
 8007046:	d920      	bls.n	800708a <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	b29b      	uxth	r3, r3
 800704e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007050:	e013      	b.n	800707a <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007052:	f107 030a 	add.w	r3, r7, #10
 8007056:	4619      	mov	r1, r3
 8007058:	6978      	ldr	r0, [r7, #20]
 800705a:	f000 f81b 	bl	8007094 <USBD_GetNextDesc>
 800705e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	785b      	ldrb	r3, [r3, #1]
 8007064:	2b05      	cmp	r3, #5
 8007066:	d108      	bne.n	800707a <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	789b      	ldrb	r3, [r3, #2]
 8007070:	78fa      	ldrb	r2, [r7, #3]
 8007072:	429a      	cmp	r2, r3
 8007074:	d008      	beq.n	8007088 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007076:	2300      	movs	r3, #0
 8007078:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	885b      	ldrh	r3, [r3, #2]
 800707e:	b29a      	uxth	r2, r3
 8007080:	897b      	ldrh	r3, [r7, #10]
 8007082:	429a      	cmp	r2, r3
 8007084:	d8e5      	bhi.n	8007052 <USBD_GetEpDesc+0x32>
 8007086:	e000      	b.n	800708a <USBD_GetEpDesc+0x6a>
          break;
 8007088:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800708a:	693b      	ldr	r3, [r7, #16]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	881a      	ldrh	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	4413      	add	r3, r2
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	461a      	mov	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4413      	add	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80070c0:	68fb      	ldr	r3, [r7, #12]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b087      	sub	sp, #28
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	3301      	adds	r3, #1
 80070e4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070ec:	8a3b      	ldrh	r3, [r7, #16]
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	b21a      	sxth	r2, r3
 80070f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	b21b      	sxth	r3, r3
 80070fa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80070fc:	89fb      	ldrh	r3, [r7, #14]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	371c      	adds	r7, #28
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
	...

0800710c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007122:	2b40      	cmp	r3, #64	; 0x40
 8007124:	d005      	beq.n	8007132 <USBD_StdDevReq+0x26>
 8007126:	2b40      	cmp	r3, #64	; 0x40
 8007128:	d857      	bhi.n	80071da <USBD_StdDevReq+0xce>
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00f      	beq.n	800714e <USBD_StdDevReq+0x42>
 800712e:	2b20      	cmp	r3, #32
 8007130:	d153      	bne.n	80071da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	32ae      	adds	r2, #174	; 0xae
 800713c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	4798      	blx	r3
 8007148:	4603      	mov	r3, r0
 800714a:	73fb      	strb	r3, [r7, #15]
      break;
 800714c:	e04a      	b.n	80071e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	785b      	ldrb	r3, [r3, #1]
 8007152:	2b09      	cmp	r3, #9
 8007154:	d83b      	bhi.n	80071ce <USBD_StdDevReq+0xc2>
 8007156:	a201      	add	r2, pc, #4	; (adr r2, 800715c <USBD_StdDevReq+0x50>)
 8007158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715c:	080071b1 	.word	0x080071b1
 8007160:	080071c5 	.word	0x080071c5
 8007164:	080071cf 	.word	0x080071cf
 8007168:	080071bb 	.word	0x080071bb
 800716c:	080071cf 	.word	0x080071cf
 8007170:	0800718f 	.word	0x0800718f
 8007174:	08007185 	.word	0x08007185
 8007178:	080071cf 	.word	0x080071cf
 800717c:	080071a7 	.word	0x080071a7
 8007180:	08007199 	.word	0x08007199
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fa3c 	bl	8007604 <USBD_GetDescriptor>
          break;
 800718c:	e024      	b.n	80071d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fbcb 	bl	800792c <USBD_SetAddress>
          break;
 8007196:	e01f      	b.n	80071d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fc0a 	bl	80079b4 <USBD_SetConfig>
 80071a0:	4603      	mov	r3, r0
 80071a2:	73fb      	strb	r3, [r7, #15]
          break;
 80071a4:	e018      	b.n	80071d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fcad 	bl	8007b08 <USBD_GetConfig>
          break;
 80071ae:	e013      	b.n	80071d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fcde 	bl	8007b74 <USBD_GetStatus>
          break;
 80071b8:	e00e      	b.n	80071d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80071ba:	6839      	ldr	r1, [r7, #0]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fd0d 	bl	8007bdc <USBD_SetFeature>
          break;
 80071c2:	e009      	b.n	80071d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fd31 	bl	8007c2e <USBD_ClrFeature>
          break;
 80071cc:	e004      	b.n	80071d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fd88 	bl	8007ce6 <USBD_CtlError>
          break;
 80071d6:	bf00      	nop
      }
      break;
 80071d8:	e004      	b.n	80071e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fd82 	bl	8007ce6 <USBD_CtlError>
      break;
 80071e2:	bf00      	nop
  }

  return ret;
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop

080071f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007206:	2b40      	cmp	r3, #64	; 0x40
 8007208:	d005      	beq.n	8007216 <USBD_StdItfReq+0x26>
 800720a:	2b40      	cmp	r3, #64	; 0x40
 800720c:	d852      	bhi.n	80072b4 <USBD_StdItfReq+0xc4>
 800720e:	2b00      	cmp	r3, #0
 8007210:	d001      	beq.n	8007216 <USBD_StdItfReq+0x26>
 8007212:	2b20      	cmp	r3, #32
 8007214:	d14e      	bne.n	80072b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800721c:	b2db      	uxtb	r3, r3
 800721e:	3b01      	subs	r3, #1
 8007220:	2b02      	cmp	r3, #2
 8007222:	d840      	bhi.n	80072a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	889b      	ldrh	r3, [r3, #4]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b01      	cmp	r3, #1
 800722c:	d836      	bhi.n	800729c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	889b      	ldrh	r3, [r3, #4]
 8007232:	b2db      	uxtb	r3, r3
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7ff fed8 	bl	8006fec <USBD_CoreFindIF>
 800723c:	4603      	mov	r3, r0
 800723e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007240:	7bbb      	ldrb	r3, [r7, #14]
 8007242:	2bff      	cmp	r3, #255	; 0xff
 8007244:	d01d      	beq.n	8007282 <USBD_StdItfReq+0x92>
 8007246:	7bbb      	ldrb	r3, [r7, #14]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d11a      	bne.n	8007282 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800724c:	7bba      	ldrb	r2, [r7, #14]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	32ae      	adds	r2, #174	; 0xae
 8007252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00f      	beq.n	800727c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800725c:	7bba      	ldrb	r2, [r7, #14]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007264:	7bba      	ldrb	r2, [r7, #14]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	32ae      	adds	r2, #174	; 0xae
 800726a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	4798      	blx	r3
 8007276:	4603      	mov	r3, r0
 8007278:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800727a:	e004      	b.n	8007286 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800727c:	2303      	movs	r3, #3
 800727e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007280:	e001      	b.n	8007286 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007282:	2303      	movs	r3, #3
 8007284:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	88db      	ldrh	r3, [r3, #6]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d110      	bne.n	80072b0 <USBD_StdItfReq+0xc0>
 800728e:	7bfb      	ldrb	r3, [r7, #15]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10d      	bne.n	80072b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fdd4 	bl	8007e42 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800729a:	e009      	b.n	80072b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fd21 	bl	8007ce6 <USBD_CtlError>
          break;
 80072a4:	e004      	b.n	80072b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fd1c 	bl	8007ce6 <USBD_CtlError>
          break;
 80072ae:	e000      	b.n	80072b2 <USBD_StdItfReq+0xc2>
          break;
 80072b0:	bf00      	nop
      }
      break;
 80072b2:	e004      	b.n	80072be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fd15 	bl	8007ce6 <USBD_CtlError>
      break;
 80072bc:	bf00      	nop
  }

  return ret;
 80072be:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	889b      	ldrh	r3, [r3, #4]
 80072da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072e4:	2b40      	cmp	r3, #64	; 0x40
 80072e6:	d007      	beq.n	80072f8 <USBD_StdEPReq+0x30>
 80072e8:	2b40      	cmp	r3, #64	; 0x40
 80072ea:	f200 817f 	bhi.w	80075ec <USBD_StdEPReq+0x324>
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d02a      	beq.n	8007348 <USBD_StdEPReq+0x80>
 80072f2:	2b20      	cmp	r3, #32
 80072f4:	f040 817a 	bne.w	80075ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80072f8:	7bbb      	ldrb	r3, [r7, #14]
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7ff fe82 	bl	8007006 <USBD_CoreFindEP>
 8007302:	4603      	mov	r3, r0
 8007304:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007306:	7b7b      	ldrb	r3, [r7, #13]
 8007308:	2bff      	cmp	r3, #255	; 0xff
 800730a:	f000 8174 	beq.w	80075f6 <USBD_StdEPReq+0x32e>
 800730e:	7b7b      	ldrb	r3, [r7, #13]
 8007310:	2b00      	cmp	r3, #0
 8007312:	f040 8170 	bne.w	80075f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007316:	7b7a      	ldrb	r2, [r7, #13]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800731e:	7b7a      	ldrb	r2, [r7, #13]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	32ae      	adds	r2, #174	; 0xae
 8007324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 8163 	beq.w	80075f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007330:	7b7a      	ldrb	r2, [r7, #13]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	32ae      	adds	r2, #174	; 0xae
 8007336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	4798      	blx	r3
 8007342:	4603      	mov	r3, r0
 8007344:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007346:	e156      	b.n	80075f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	785b      	ldrb	r3, [r3, #1]
 800734c:	2b03      	cmp	r3, #3
 800734e:	d008      	beq.n	8007362 <USBD_StdEPReq+0x9a>
 8007350:	2b03      	cmp	r3, #3
 8007352:	f300 8145 	bgt.w	80075e0 <USBD_StdEPReq+0x318>
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 809b 	beq.w	8007492 <USBD_StdEPReq+0x1ca>
 800735c:	2b01      	cmp	r3, #1
 800735e:	d03c      	beq.n	80073da <USBD_StdEPReq+0x112>
 8007360:	e13e      	b.n	80075e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b02      	cmp	r3, #2
 800736c:	d002      	beq.n	8007374 <USBD_StdEPReq+0xac>
 800736e:	2b03      	cmp	r3, #3
 8007370:	d016      	beq.n	80073a0 <USBD_StdEPReq+0xd8>
 8007372:	e02c      	b.n	80073ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007374:	7bbb      	ldrb	r3, [r7, #14]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00d      	beq.n	8007396 <USBD_StdEPReq+0xce>
 800737a:	7bbb      	ldrb	r3, [r7, #14]
 800737c:	2b80      	cmp	r3, #128	; 0x80
 800737e:	d00a      	beq.n	8007396 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007380:	7bbb      	ldrb	r3, [r7, #14]
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f001 fa09 	bl	800879c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800738a:	2180      	movs	r1, #128	; 0x80
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f001 fa05 	bl	800879c <USBD_LL_StallEP>
 8007392:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007394:	e020      	b.n	80073d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fca4 	bl	8007ce6 <USBD_CtlError>
              break;
 800739e:	e01b      	b.n	80073d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	885b      	ldrh	r3, [r3, #2]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10e      	bne.n	80073c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073a8:	7bbb      	ldrb	r3, [r7, #14]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00b      	beq.n	80073c6 <USBD_StdEPReq+0xfe>
 80073ae:	7bbb      	ldrb	r3, [r7, #14]
 80073b0:	2b80      	cmp	r3, #128	; 0x80
 80073b2:	d008      	beq.n	80073c6 <USBD_StdEPReq+0xfe>
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	88db      	ldrh	r3, [r3, #6]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d104      	bne.n	80073c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80073bc:	7bbb      	ldrb	r3, [r7, #14]
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 f9eb 	bl	800879c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fd3b 	bl	8007e42 <USBD_CtlSendStatus>

              break;
 80073cc:	e004      	b.n	80073d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fc88 	bl	8007ce6 <USBD_CtlError>
              break;
 80073d6:	bf00      	nop
          }
          break;
 80073d8:	e107      	b.n	80075ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d002      	beq.n	80073ec <USBD_StdEPReq+0x124>
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d016      	beq.n	8007418 <USBD_StdEPReq+0x150>
 80073ea:	e04b      	b.n	8007484 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073ec:	7bbb      	ldrb	r3, [r7, #14]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00d      	beq.n	800740e <USBD_StdEPReq+0x146>
 80073f2:	7bbb      	ldrb	r3, [r7, #14]
 80073f4:	2b80      	cmp	r3, #128	; 0x80
 80073f6:	d00a      	beq.n	800740e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073f8:	7bbb      	ldrb	r3, [r7, #14]
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 f9cd 	bl	800879c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007402:	2180      	movs	r1, #128	; 0x80
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f001 f9c9 	bl	800879c <USBD_LL_StallEP>
 800740a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800740c:	e040      	b.n	8007490 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fc68 	bl	8007ce6 <USBD_CtlError>
              break;
 8007416:	e03b      	b.n	8007490 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	885b      	ldrh	r3, [r3, #2]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d136      	bne.n	800748e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007426:	2b00      	cmp	r3, #0
 8007428:	d004      	beq.n	8007434 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f001 f9ea 	bl	8008808 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fd04 	bl	8007e42 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7ff fde1 	bl	8007006 <USBD_CoreFindEP>
 8007444:	4603      	mov	r3, r0
 8007446:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007448:	7b7b      	ldrb	r3, [r7, #13]
 800744a:	2bff      	cmp	r3, #255	; 0xff
 800744c:	d01f      	beq.n	800748e <USBD_StdEPReq+0x1c6>
 800744e:	7b7b      	ldrb	r3, [r7, #13]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d11c      	bne.n	800748e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007454:	7b7a      	ldrb	r2, [r7, #13]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800745c:	7b7a      	ldrb	r2, [r7, #13]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	32ae      	adds	r2, #174	; 0xae
 8007462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d010      	beq.n	800748e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800746c:	7b7a      	ldrb	r2, [r7, #13]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	32ae      	adds	r2, #174	; 0xae
 8007472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	4798      	blx	r3
 800747e:	4603      	mov	r3, r0
 8007480:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007482:	e004      	b.n	800748e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fc2d 	bl	8007ce6 <USBD_CtlError>
              break;
 800748c:	e000      	b.n	8007490 <USBD_StdEPReq+0x1c8>
              break;
 800748e:	bf00      	nop
          }
          break;
 8007490:	e0ab      	b.n	80075ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b02      	cmp	r3, #2
 800749c:	d002      	beq.n	80074a4 <USBD_StdEPReq+0x1dc>
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d032      	beq.n	8007508 <USBD_StdEPReq+0x240>
 80074a2:	e097      	b.n	80075d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d007      	beq.n	80074ba <USBD_StdEPReq+0x1f2>
 80074aa:	7bbb      	ldrb	r3, [r7, #14]
 80074ac:	2b80      	cmp	r3, #128	; 0x80
 80074ae:	d004      	beq.n	80074ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fc17 	bl	8007ce6 <USBD_CtlError>
                break;
 80074b8:	e091      	b.n	80075de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	da0b      	bge.n	80074da <USBD_StdEPReq+0x212>
 80074c2:	7bbb      	ldrb	r3, [r7, #14]
 80074c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074c8:	4613      	mov	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4413      	add	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	3310      	adds	r3, #16
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	4413      	add	r3, r2
 80074d6:	3304      	adds	r3, #4
 80074d8:	e00b      	b.n	80074f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074da:	7bbb      	ldrb	r3, [r7, #14]
 80074dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074e0:	4613      	mov	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	4413      	add	r3, r2
 80074f0:	3304      	adds	r3, #4
 80074f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2200      	movs	r2, #0
 80074f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2202      	movs	r2, #2
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fc61 	bl	8007dc8 <USBD_CtlSendData>
              break;
 8007506:	e06a      	b.n	80075de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800750c:	2b00      	cmp	r3, #0
 800750e:	da11      	bge.n	8007534 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	f003 020f 	and.w	r2, r3, #15
 8007516:	6879      	ldr	r1, [r7, #4]
 8007518:	4613      	mov	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	440b      	add	r3, r1
 8007522:	3324      	adds	r3, #36	; 0x24
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d117      	bne.n	800755a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fbda 	bl	8007ce6 <USBD_CtlError>
                  break;
 8007532:	e054      	b.n	80075de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007534:	7bbb      	ldrb	r3, [r7, #14]
 8007536:	f003 020f 	and.w	r2, r3, #15
 800753a:	6879      	ldr	r1, [r7, #4]
 800753c:	4613      	mov	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	440b      	add	r3, r1
 8007546:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d104      	bne.n	800755a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fbc7 	bl	8007ce6 <USBD_CtlError>
                  break;
 8007558:	e041      	b.n	80075de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800755a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800755e:	2b00      	cmp	r3, #0
 8007560:	da0b      	bge.n	800757a <USBD_StdEPReq+0x2b2>
 8007562:	7bbb      	ldrb	r3, [r7, #14]
 8007564:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007568:	4613      	mov	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	3310      	adds	r3, #16
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	4413      	add	r3, r2
 8007576:	3304      	adds	r3, #4
 8007578:	e00b      	b.n	8007592 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800757a:	7bbb      	ldrb	r3, [r7, #14]
 800757c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007580:	4613      	mov	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	4413      	add	r3, r2
 8007590:	3304      	adds	r3, #4
 8007592:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <USBD_StdEPReq+0x2d8>
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	2b80      	cmp	r3, #128	; 0x80
 800759e:	d103      	bne.n	80075a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	e00e      	b.n	80075c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80075a8:	7bbb      	ldrb	r3, [r7, #14]
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 f961 	bl	8008874 <USBD_LL_IsStallEP>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2201      	movs	r2, #1
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	e002      	b.n	80075c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2200      	movs	r2, #0
 80075c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2202      	movs	r2, #2
 80075ca:	4619      	mov	r1, r3
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fbfb 	bl	8007dc8 <USBD_CtlSendData>
              break;
 80075d2:	e004      	b.n	80075de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fb85 	bl	8007ce6 <USBD_CtlError>
              break;
 80075dc:	bf00      	nop
          }
          break;
 80075de:	e004      	b.n	80075ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fb7f 	bl	8007ce6 <USBD_CtlError>
          break;
 80075e8:	bf00      	nop
      }
      break;
 80075ea:	e005      	b.n	80075f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fb79 	bl	8007ce6 <USBD_CtlError>
      break;
 80075f4:	e000      	b.n	80075f8 <USBD_StdEPReq+0x330>
      break;
 80075f6:	bf00      	nop
  }

  return ret;
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
	...

08007604 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007612:	2300      	movs	r3, #0
 8007614:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007616:	2300      	movs	r3, #0
 8007618:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	885b      	ldrh	r3, [r3, #2]
 800761e:	0a1b      	lsrs	r3, r3, #8
 8007620:	b29b      	uxth	r3, r3
 8007622:	3b01      	subs	r3, #1
 8007624:	2b0e      	cmp	r3, #14
 8007626:	f200 8152 	bhi.w	80078ce <USBD_GetDescriptor+0x2ca>
 800762a:	a201      	add	r2, pc, #4	; (adr r2, 8007630 <USBD_GetDescriptor+0x2c>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	080076a1 	.word	0x080076a1
 8007634:	080076b9 	.word	0x080076b9
 8007638:	080076f9 	.word	0x080076f9
 800763c:	080078cf 	.word	0x080078cf
 8007640:	080078cf 	.word	0x080078cf
 8007644:	0800786f 	.word	0x0800786f
 8007648:	0800789b 	.word	0x0800789b
 800764c:	080078cf 	.word	0x080078cf
 8007650:	080078cf 	.word	0x080078cf
 8007654:	080078cf 	.word	0x080078cf
 8007658:	080078cf 	.word	0x080078cf
 800765c:	080078cf 	.word	0x080078cf
 8007660:	080078cf 	.word	0x080078cf
 8007664:	080078cf 	.word	0x080078cf
 8007668:	0800766d 	.word	0x0800766d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00b      	beq.n	8007690 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	7c12      	ldrb	r2, [r2, #16]
 8007684:	f107 0108 	add.w	r1, r7, #8
 8007688:	4610      	mov	r0, r2
 800768a:	4798      	blx	r3
 800768c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800768e:	e126      	b.n	80078de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fb27 	bl	8007ce6 <USBD_CtlError>
        err++;
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	3301      	adds	r3, #1
 800769c:	72fb      	strb	r3, [r7, #11]
      break;
 800769e:	e11e      	b.n	80078de <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	7c12      	ldrb	r2, [r2, #16]
 80076ac:	f107 0108 	add.w	r1, r7, #8
 80076b0:	4610      	mov	r0, r2
 80076b2:	4798      	blx	r3
 80076b4:	60f8      	str	r0, [r7, #12]
      break;
 80076b6:	e112      	b.n	80078de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	7c1b      	ldrb	r3, [r3, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10d      	bne.n	80076dc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c8:	f107 0208 	add.w	r2, r7, #8
 80076cc:	4610      	mov	r0, r2
 80076ce:	4798      	blx	r3
 80076d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3301      	adds	r3, #1
 80076d6:	2202      	movs	r2, #2
 80076d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80076da:	e100      	b.n	80078de <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	f107 0208 	add.w	r2, r7, #8
 80076e8:	4610      	mov	r0, r2
 80076ea:	4798      	blx	r3
 80076ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	3301      	adds	r3, #1
 80076f2:	2202      	movs	r2, #2
 80076f4:	701a      	strb	r2, [r3, #0]
      break;
 80076f6:	e0f2      	b.n	80078de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	885b      	ldrh	r3, [r3, #2]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b05      	cmp	r3, #5
 8007700:	f200 80ac 	bhi.w	800785c <USBD_GetDescriptor+0x258>
 8007704:	a201      	add	r2, pc, #4	; (adr r2, 800770c <USBD_GetDescriptor+0x108>)
 8007706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770a:	bf00      	nop
 800770c:	08007725 	.word	0x08007725
 8007710:	08007759 	.word	0x08007759
 8007714:	0800778d 	.word	0x0800778d
 8007718:	080077c1 	.word	0x080077c1
 800771c:	080077f5 	.word	0x080077f5
 8007720:	08007829 	.word	0x08007829
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00b      	beq.n	8007748 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	7c12      	ldrb	r2, [r2, #16]
 800773c:	f107 0108 	add.w	r1, r7, #8
 8007740:	4610      	mov	r0, r2
 8007742:	4798      	blx	r3
 8007744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007746:	e091      	b.n	800786c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 facb 	bl	8007ce6 <USBD_CtlError>
            err++;
 8007750:	7afb      	ldrb	r3, [r7, #11]
 8007752:	3301      	adds	r3, #1
 8007754:	72fb      	strb	r3, [r7, #11]
          break;
 8007756:	e089      	b.n	800786c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00b      	beq.n	800777c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	7c12      	ldrb	r2, [r2, #16]
 8007770:	f107 0108 	add.w	r1, r7, #8
 8007774:	4610      	mov	r0, r2
 8007776:	4798      	blx	r3
 8007778:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800777a:	e077      	b.n	800786c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fab1 	bl	8007ce6 <USBD_CtlError>
            err++;
 8007784:	7afb      	ldrb	r3, [r7, #11]
 8007786:	3301      	adds	r3, #1
 8007788:	72fb      	strb	r3, [r7, #11]
          break;
 800778a:	e06f      	b.n	800786c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00b      	beq.n	80077b0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	7c12      	ldrb	r2, [r2, #16]
 80077a4:	f107 0108 	add.w	r1, r7, #8
 80077a8:	4610      	mov	r0, r2
 80077aa:	4798      	blx	r3
 80077ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ae:	e05d      	b.n	800786c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fa97 	bl	8007ce6 <USBD_CtlError>
            err++;
 80077b8:	7afb      	ldrb	r3, [r7, #11]
 80077ba:	3301      	adds	r3, #1
 80077bc:	72fb      	strb	r3, [r7, #11]
          break;
 80077be:	e055      	b.n	800786c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00b      	beq.n	80077e4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	7c12      	ldrb	r2, [r2, #16]
 80077d8:	f107 0108 	add.w	r1, r7, #8
 80077dc:	4610      	mov	r0, r2
 80077de:	4798      	blx	r3
 80077e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077e2:	e043      	b.n	800786c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fa7d 	bl	8007ce6 <USBD_CtlError>
            err++;
 80077ec:	7afb      	ldrb	r3, [r7, #11]
 80077ee:	3301      	adds	r3, #1
 80077f0:	72fb      	strb	r3, [r7, #11]
          break;
 80077f2:	e03b      	b.n	800786c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00b      	beq.n	8007818 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	7c12      	ldrb	r2, [r2, #16]
 800780c:	f107 0108 	add.w	r1, r7, #8
 8007810:	4610      	mov	r0, r2
 8007812:	4798      	blx	r3
 8007814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007816:	e029      	b.n	800786c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fa63 	bl	8007ce6 <USBD_CtlError>
            err++;
 8007820:	7afb      	ldrb	r3, [r7, #11]
 8007822:	3301      	adds	r3, #1
 8007824:	72fb      	strb	r3, [r7, #11]
          break;
 8007826:	e021      	b.n	800786c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00b      	beq.n	800784c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	7c12      	ldrb	r2, [r2, #16]
 8007840:	f107 0108 	add.w	r1, r7, #8
 8007844:	4610      	mov	r0, r2
 8007846:	4798      	blx	r3
 8007848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800784a:	e00f      	b.n	800786c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fa49 	bl	8007ce6 <USBD_CtlError>
            err++;
 8007854:	7afb      	ldrb	r3, [r7, #11]
 8007856:	3301      	adds	r3, #1
 8007858:	72fb      	strb	r3, [r7, #11]
          break;
 800785a:	e007      	b.n	800786c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fa41 	bl	8007ce6 <USBD_CtlError>
          err++;
 8007864:	7afb      	ldrb	r3, [r7, #11]
 8007866:	3301      	adds	r3, #1
 8007868:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800786a:	bf00      	nop
      }
      break;
 800786c:	e037      	b.n	80078de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	7c1b      	ldrb	r3, [r3, #16]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d109      	bne.n	800788a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787e:	f107 0208 	add.w	r2, r7, #8
 8007882:	4610      	mov	r0, r2
 8007884:	4798      	blx	r3
 8007886:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007888:	e029      	b.n	80078de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fa2a 	bl	8007ce6 <USBD_CtlError>
        err++;
 8007892:	7afb      	ldrb	r3, [r7, #11]
 8007894:	3301      	adds	r3, #1
 8007896:	72fb      	strb	r3, [r7, #11]
      break;
 8007898:	e021      	b.n	80078de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	7c1b      	ldrb	r3, [r3, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10d      	bne.n	80078be <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078aa:	f107 0208 	add.w	r2, r7, #8
 80078ae:	4610      	mov	r0, r2
 80078b0:	4798      	blx	r3
 80078b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3301      	adds	r3, #1
 80078b8:	2207      	movs	r2, #7
 80078ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078bc:	e00f      	b.n	80078de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fa10 	bl	8007ce6 <USBD_CtlError>
        err++;
 80078c6:	7afb      	ldrb	r3, [r7, #11]
 80078c8:	3301      	adds	r3, #1
 80078ca:	72fb      	strb	r3, [r7, #11]
      break;
 80078cc:	e007      	b.n	80078de <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fa08 	bl	8007ce6 <USBD_CtlError>
      err++;
 80078d6:	7afb      	ldrb	r3, [r7, #11]
 80078d8:	3301      	adds	r3, #1
 80078da:	72fb      	strb	r3, [r7, #11]
      break;
 80078dc:	bf00      	nop
  }

  if (err != 0U)
 80078de:	7afb      	ldrb	r3, [r7, #11]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d11e      	bne.n	8007922 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	88db      	ldrh	r3, [r3, #6]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d016      	beq.n	800791a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80078ec:	893b      	ldrh	r3, [r7, #8]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00e      	beq.n	8007910 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	88da      	ldrh	r2, [r3, #6]
 80078f6:	893b      	ldrh	r3, [r7, #8]
 80078f8:	4293      	cmp	r3, r2
 80078fa:	bf28      	it	cs
 80078fc:	4613      	movcs	r3, r2
 80078fe:	b29b      	uxth	r3, r3
 8007900:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007902:	893b      	ldrh	r3, [r7, #8]
 8007904:	461a      	mov	r2, r3
 8007906:	68f9      	ldr	r1, [r7, #12]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fa5d 	bl	8007dc8 <USBD_CtlSendData>
 800790e:	e009      	b.n	8007924 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f9e7 	bl	8007ce6 <USBD_CtlError>
 8007918:	e004      	b.n	8007924 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fa91 	bl	8007e42 <USBD_CtlSendStatus>
 8007920:	e000      	b.n	8007924 <USBD_GetDescriptor+0x320>
    return;
 8007922:	bf00      	nop
  }
}
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop

0800792c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	889b      	ldrh	r3, [r3, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d131      	bne.n	80079a2 <USBD_SetAddress+0x76>
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	88db      	ldrh	r3, [r3, #6]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d12d      	bne.n	80079a2 <USBD_SetAddress+0x76>
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	885b      	ldrh	r3, [r3, #2]
 800794a:	2b7f      	cmp	r3, #127	; 0x7f
 800794c:	d829      	bhi.n	80079a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	885b      	ldrh	r3, [r3, #2]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007958:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b03      	cmp	r3, #3
 8007964:	d104      	bne.n	8007970 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f9bc 	bl	8007ce6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800796e:	e01d      	b.n	80079ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	7bfa      	ldrb	r2, [r7, #15]
 8007974:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 ffa5 	bl	80088cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fa5d 	bl	8007e42 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007988:	7bfb      	ldrb	r3, [r7, #15]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d004      	beq.n	8007998 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2202      	movs	r2, #2
 8007992:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007996:	e009      	b.n	80079ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079a0:	e004      	b.n	80079ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f99e 	bl	8007ce6 <USBD_CtlError>
  }
}
 80079aa:	bf00      	nop
 80079ac:	bf00      	nop
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	885b      	ldrh	r3, [r3, #2]
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	4b4e      	ldr	r3, [pc, #312]	; (8007b04 <USBD_SetConfig+0x150>)
 80079ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80079cc:	4b4d      	ldr	r3, [pc, #308]	; (8007b04 <USBD_SetConfig+0x150>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d905      	bls.n	80079e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f985 	bl	8007ce6 <USBD_CtlError>
    return USBD_FAIL;
 80079dc:	2303      	movs	r3, #3
 80079de:	e08c      	b.n	8007afa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d002      	beq.n	80079f2 <USBD_SetConfig+0x3e>
 80079ec:	2b03      	cmp	r3, #3
 80079ee:	d029      	beq.n	8007a44 <USBD_SetConfig+0x90>
 80079f0:	e075      	b.n	8007ade <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80079f2:	4b44      	ldr	r3, [pc, #272]	; (8007b04 <USBD_SetConfig+0x150>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d020      	beq.n	8007a3c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80079fa:	4b42      	ldr	r3, [pc, #264]	; (8007b04 <USBD_SetConfig+0x150>)
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	461a      	mov	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a04:	4b3f      	ldr	r3, [pc, #252]	; (8007b04 <USBD_SetConfig+0x150>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7fe ffb6 	bl	800697c <USBD_SetClassConfig>
 8007a10:	4603      	mov	r3, r0
 8007a12:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d008      	beq.n	8007a2c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f962 	bl	8007ce6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2202      	movs	r2, #2
 8007a26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a2a:	e065      	b.n	8007af8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fa08 	bl	8007e42 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2203      	movs	r2, #3
 8007a36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a3a:	e05d      	b.n	8007af8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fa00 	bl	8007e42 <USBD_CtlSendStatus>
      break;
 8007a42:	e059      	b.n	8007af8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a44:	4b2f      	ldr	r3, [pc, #188]	; (8007b04 <USBD_SetConfig+0x150>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d112      	bne.n	8007a72 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007a54:	4b2b      	ldr	r3, [pc, #172]	; (8007b04 <USBD_SetConfig+0x150>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a5e:	4b29      	ldr	r3, [pc, #164]	; (8007b04 <USBD_SetConfig+0x150>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7fe ffa5 	bl	80069b4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f9e9 	bl	8007e42 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a70:	e042      	b.n	8007af8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007a72:	4b24      	ldr	r3, [pc, #144]	; (8007b04 <USBD_SetConfig+0x150>)
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	461a      	mov	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d02a      	beq.n	8007ad6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7fe ff93 	bl	80069b4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a8e:	4b1d      	ldr	r3, [pc, #116]	; (8007b04 <USBD_SetConfig+0x150>)
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	461a      	mov	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a98:	4b1a      	ldr	r3, [pc, #104]	; (8007b04 <USBD_SetConfig+0x150>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7fe ff6c 	bl	800697c <USBD_SetClassConfig>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00f      	beq.n	8007ace <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f918 	bl	8007ce6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7fe ff78 	bl	80069b4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007acc:	e014      	b.n	8007af8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f9b7 	bl	8007e42 <USBD_CtlSendStatus>
      break;
 8007ad4:	e010      	b.n	8007af8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f9b3 	bl	8007e42 <USBD_CtlSendStatus>
      break;
 8007adc:	e00c      	b.n	8007af8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f900 	bl	8007ce6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ae6:	4b07      	ldr	r3, [pc, #28]	; (8007b04 <USBD_SetConfig+0x150>)
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7fe ff61 	bl	80069b4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007af2:	2303      	movs	r3, #3
 8007af4:	73fb      	strb	r3, [r7, #15]
      break;
 8007af6:	bf00      	nop
  }

  return ret;
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	20000154 	.word	0x20000154

08007b08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	88db      	ldrh	r3, [r3, #6]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d004      	beq.n	8007b24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f8e2 	bl	8007ce6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b22:	e023      	b.n	8007b6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	dc02      	bgt.n	8007b36 <USBD_GetConfig+0x2e>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	dc03      	bgt.n	8007b3c <USBD_GetConfig+0x34>
 8007b34:	e015      	b.n	8007b62 <USBD_GetConfig+0x5a>
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d00b      	beq.n	8007b52 <USBD_GetConfig+0x4a>
 8007b3a:	e012      	b.n	8007b62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	3308      	adds	r3, #8
 8007b46:	2201      	movs	r2, #1
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f93c 	bl	8007dc8 <USBD_CtlSendData>
        break;
 8007b50:	e00c      	b.n	8007b6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3304      	adds	r3, #4
 8007b56:	2201      	movs	r2, #1
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f934 	bl	8007dc8 <USBD_CtlSendData>
        break;
 8007b60:	e004      	b.n	8007b6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f8be 	bl	8007ce6 <USBD_CtlError>
        break;
 8007b6a:	bf00      	nop
}
 8007b6c:	bf00      	nop
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	3b01      	subs	r3, #1
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d81e      	bhi.n	8007bca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	88db      	ldrh	r3, [r3, #6]
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d004      	beq.n	8007b9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f8a5 	bl	8007ce6 <USBD_CtlError>
        break;
 8007b9c:	e01a      	b.n	8007bd4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d005      	beq.n	8007bba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	f043 0202 	orr.w	r2, r3, #2
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	330c      	adds	r3, #12
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f900 	bl	8007dc8 <USBD_CtlSendData>
      break;
 8007bc8:	e004      	b.n	8007bd4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f88a 	bl	8007ce6 <USBD_CtlError>
      break;
 8007bd2:	bf00      	nop
  }
}
 8007bd4:	bf00      	nop
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	885b      	ldrh	r3, [r3, #2]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d107      	bne.n	8007bfe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f923 	bl	8007e42 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007bfc:	e013      	b.n	8007c26 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	885b      	ldrh	r3, [r3, #2]
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d10b      	bne.n	8007c1e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	889b      	ldrh	r3, [r3, #4]
 8007c0a:	0a1b      	lsrs	r3, r3, #8
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f913 	bl	8007e42 <USBD_CtlSendStatus>
}
 8007c1c:	e003      	b.n	8007c26 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007c1e:	6839      	ldr	r1, [r7, #0]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f860 	bl	8007ce6 <USBD_CtlError>
}
 8007c26:	bf00      	nop
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	3b01      	subs	r3, #1
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d80b      	bhi.n	8007c5e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	885b      	ldrh	r3, [r3, #2]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d10c      	bne.n	8007c68 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f8f3 	bl	8007e42 <USBD_CtlSendStatus>
      }
      break;
 8007c5c:	e004      	b.n	8007c68 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f840 	bl	8007ce6 <USBD_CtlError>
      break;
 8007c66:	e000      	b.n	8007c6a <USBD_ClrFeature+0x3c>
      break;
 8007c68:	bf00      	nop
  }
}
 8007c6a:	bf00      	nop
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b084      	sub	sp, #16
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	781a      	ldrb	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	781a      	ldrb	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f7ff fa16 	bl	80070ce <SWAPBYTE>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3301      	adds	r3, #1
 8007cae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f7ff fa09 	bl	80070ce <SWAPBYTE>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f7ff f9fc 	bl	80070ce <SWAPBYTE>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	461a      	mov	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	80da      	strh	r2, [r3, #6]
}
 8007cde:	bf00      	nop
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cf0:	2180      	movs	r1, #128	; 0x80
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fd52 	bl	800879c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fd4e 	bl	800879c <USBD_LL_StallEP>
}
 8007d00:	bf00      	nop
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d036      	beq.n	8007d8c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007d22:	6938      	ldr	r0, [r7, #16]
 8007d24:	f000 f836 	bl	8007d94 <USBD_GetLen>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	005b      	lsls	r3, r3, #1
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d36:	7dfb      	ldrb	r3, [r7, #23]
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	7812      	ldrb	r2, [r2, #0]
 8007d40:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d42:	7dfb      	ldrb	r3, [r7, #23]
 8007d44:	3301      	adds	r3, #1
 8007d46:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d48:	7dfb      	ldrb	r3, [r7, #23]
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	2203      	movs	r2, #3
 8007d50:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d52:	7dfb      	ldrb	r3, [r7, #23]
 8007d54:	3301      	adds	r3, #1
 8007d56:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d58:	e013      	b.n	8007d82 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007d5a:	7dfb      	ldrb	r3, [r7, #23]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	4413      	add	r3, r2
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	7812      	ldrb	r2, [r2, #0]
 8007d64:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	613b      	str	r3, [r7, #16]
    idx++;
 8007d6c:	7dfb      	ldrb	r3, [r7, #23]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d72:	7dfb      	ldrb	r3, [r7, #23]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	4413      	add	r3, r2
 8007d78:	2200      	movs	r2, #0
 8007d7a:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1e7      	bne.n	8007d5a <USBD_GetString+0x52>
 8007d8a:	e000      	b.n	8007d8e <USBD_GetString+0x86>
    return;
 8007d8c:	bf00      	nop
  }
}
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007da4:	e005      	b.n	8007db2 <USBD_GetLen+0x1e>
  {
    len++;
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
 8007da8:	3301      	adds	r3, #1
 8007daa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	3301      	adds	r3, #1
 8007db0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1f5      	bne.n	8007da6 <USBD_GetLen+0x12>
  }

  return len;
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	2100      	movs	r1, #0
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 fda2 	bl	8008938 <USBD_LL_Transmit>

  return USBD_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b084      	sub	sp, #16
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	60f8      	str	r0, [r7, #12]
 8007e06:	60b9      	str	r1, [r7, #8]
 8007e08:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	2100      	movs	r1, #0
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 fd91 	bl	8008938 <USBD_LL_Transmit>

  return USBD_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	2100      	movs	r1, #0
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f000 fdb8 	bl	80089a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b082      	sub	sp, #8
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2204      	movs	r2, #4
 8007e4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e52:	2300      	movs	r3, #0
 8007e54:	2200      	movs	r2, #0
 8007e56:	2100      	movs	r1, #0
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fd6d 	bl	8008938 <USBD_LL_Transmit>

  return USBD_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2205      	movs	r2, #5
 8007e74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e78:	2300      	movs	r3, #0
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fd92 	bl	80089a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e94:	2200      	movs	r2, #0
 8007e96:	4912      	ldr	r1, [pc, #72]	; (8007ee0 <MX_USB_DEVICE_Init+0x50>)
 8007e98:	4812      	ldr	r0, [pc, #72]	; (8007ee4 <MX_USB_DEVICE_Init+0x54>)
 8007e9a:	f7fe fcf2 	bl	8006882 <USBD_Init>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ea4:	f7f8 fa0e 	bl	80002c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8007ea8:	490f      	ldr	r1, [pc, #60]	; (8007ee8 <MX_USB_DEVICE_Init+0x58>)
 8007eaa:	480e      	ldr	r0, [pc, #56]	; (8007ee4 <MX_USB_DEVICE_Init+0x54>)
 8007eac:	f7fe fd19 	bl	80068e2 <USBD_RegisterClass>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007eb6:	f7f8 fa05 	bl	80002c4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8007eba:	490c      	ldr	r1, [pc, #48]	; (8007eec <MX_USB_DEVICE_Init+0x5c>)
 8007ebc:	4809      	ldr	r0, [pc, #36]	; (8007ee4 <MX_USB_DEVICE_Init+0x54>)
 8007ebe:	f7fc ffc1 	bl	8004e44 <USBD_MSC_RegisterStorage>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ec8:	f7f8 f9fc 	bl	80002c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ecc:	4805      	ldr	r0, [pc, #20]	; (8007ee4 <MX_USB_DEVICE_Init+0x54>)
 8007ece:	f7fe fd3e 	bl	800694e <USBD_Start>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ed8:	f7f8 f9f4 	bl	80002c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007edc:	bf00      	nop
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	200000b4 	.word	0x200000b4
 8007ee4:	20000158 	.word	0x20000158
 8007ee8:	2000000c 	.word	0x2000000c
 8007eec:	20000114 	.word	0x20000114

08007ef0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	6039      	str	r1, [r7, #0]
 8007efa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	2212      	movs	r2, #18
 8007f00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f02:	4b03      	ldr	r3, [pc, #12]	; (8007f10 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	200000d4 	.word	0x200000d4

08007f14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	6039      	str	r1, [r7, #0]
 8007f1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	2204      	movs	r2, #4
 8007f24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f26:	4b03      	ldr	r3, [pc, #12]	; (8007f34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	200000f4 	.word	0x200000f4

08007f38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	6039      	str	r1, [r7, #0]
 8007f42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d105      	bne.n	8007f56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	4907      	ldr	r1, [pc, #28]	; (8007f6c <USBD_FS_ProductStrDescriptor+0x34>)
 8007f4e:	4808      	ldr	r0, [pc, #32]	; (8007f70 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f50:	f7ff feda 	bl	8007d08 <USBD_GetString>
 8007f54:	e004      	b.n	8007f60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	4904      	ldr	r1, [pc, #16]	; (8007f6c <USBD_FS_ProductStrDescriptor+0x34>)
 8007f5a:	4805      	ldr	r0, [pc, #20]	; (8007f70 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f5c:	f7ff fed4 	bl	8007d08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f60:	4b02      	ldr	r3, [pc, #8]	; (8007f6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20000434 	.word	0x20000434
 8007f70:	08008ba4 	.word	0x08008ba4

08007f74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	6039      	str	r1, [r7, #0]
 8007f7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f80:	683a      	ldr	r2, [r7, #0]
 8007f82:	4904      	ldr	r1, [pc, #16]	; (8007f94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f84:	4804      	ldr	r0, [pc, #16]	; (8007f98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f86:	f7ff febf 	bl	8007d08 <USBD_GetString>
  return USBD_StrDesc;
 8007f8a:	4b02      	ldr	r3, [pc, #8]	; (8007f94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	20000434 	.word	0x20000434
 8007f98:	08008bb8 	.word	0x08008bb8

08007f9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	6039      	str	r1, [r7, #0]
 8007fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	221a      	movs	r2, #26
 8007fac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007fae:	f000 f855 	bl	800805c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007fb2:	4b02      	ldr	r3, [pc, #8]	; (8007fbc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	200000f8 	.word	0x200000f8

08007fc0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	6039      	str	r1, [r7, #0]
 8007fca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007fcc:	79fb      	ldrb	r3, [r7, #7]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d105      	bne.n	8007fde <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	4907      	ldr	r1, [pc, #28]	; (8007ff4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007fd6:	4808      	ldr	r0, [pc, #32]	; (8007ff8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fd8:	f7ff fe96 	bl	8007d08 <USBD_GetString>
 8007fdc:	e004      	b.n	8007fe8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	4904      	ldr	r1, [pc, #16]	; (8007ff4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007fe2:	4805      	ldr	r0, [pc, #20]	; (8007ff8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fe4:	f7ff fe90 	bl	8007d08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fe8:	4b02      	ldr	r3, [pc, #8]	; (8007ff4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20000434 	.word	0x20000434
 8007ff8:	08008bcc 	.word	0x08008bcc

08007ffc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	4603      	mov	r3, r0
 8008004:	6039      	str	r1, [r7, #0]
 8008006:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008008:	79fb      	ldrb	r3, [r7, #7]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d105      	bne.n	800801a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	4907      	ldr	r1, [pc, #28]	; (8008030 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008012:	4808      	ldr	r0, [pc, #32]	; (8008034 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008014:	f7ff fe78 	bl	8007d08 <USBD_GetString>
 8008018:	e004      	b.n	8008024 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	4904      	ldr	r1, [pc, #16]	; (8008030 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800801e:	4805      	ldr	r0, [pc, #20]	; (8008034 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008020:	f7ff fe72 	bl	8007d08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008024:	4b02      	ldr	r3, [pc, #8]	; (8008030 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008026:	4618      	mov	r0, r3
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	20000434 	.word	0x20000434
 8008034:	08008bd8 	.word	0x08008bd8

08008038 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	4603      	mov	r3, r0
 8008040:	6039      	str	r1, [r7, #0]
 8008042:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	220c      	movs	r2, #12
 8008048:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800804a:	4b03      	ldr	r3, [pc, #12]	; (8008058 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	200000e8 	.word	0x200000e8

0800805c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008062:	4b0f      	ldr	r3, [pc, #60]	; (80080a0 <Get_SerialNum+0x44>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008068:	4b0e      	ldr	r3, [pc, #56]	; (80080a4 <Get_SerialNum+0x48>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800806e:	4b0e      	ldr	r3, [pc, #56]	; (80080a8 <Get_SerialNum+0x4c>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4413      	add	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d009      	beq.n	8008096 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008082:	2208      	movs	r2, #8
 8008084:	4909      	ldr	r1, [pc, #36]	; (80080ac <Get_SerialNum+0x50>)
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f000 f814 	bl	80080b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800808c:	2204      	movs	r2, #4
 800808e:	4908      	ldr	r1, [pc, #32]	; (80080b0 <Get_SerialNum+0x54>)
 8008090:	68b8      	ldr	r0, [r7, #8]
 8008092:	f000 f80f 	bl	80080b4 <IntToUnicode>
  }
}
 8008096:	bf00      	nop
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	1fff7590 	.word	0x1fff7590
 80080a4:	1fff7594 	.word	0x1fff7594
 80080a8:	1fff7598 	.word	0x1fff7598
 80080ac:	200000fa 	.word	0x200000fa
 80080b0:	2000010a 	.word	0x2000010a

080080b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b087      	sub	sp, #28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	4613      	mov	r3, r2
 80080c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80080c2:	2300      	movs	r3, #0
 80080c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80080c6:	2300      	movs	r3, #0
 80080c8:	75fb      	strb	r3, [r7, #23]
 80080ca:	e027      	b.n	800811c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	0f1b      	lsrs	r3, r3, #28
 80080d0:	2b09      	cmp	r3, #9
 80080d2:	d80b      	bhi.n	80080ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	0f1b      	lsrs	r3, r3, #28
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	7dfb      	ldrb	r3, [r7, #23]
 80080dc:	005b      	lsls	r3, r3, #1
 80080de:	4619      	mov	r1, r3
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	440b      	add	r3, r1
 80080e4:	3230      	adds	r2, #48	; 0x30
 80080e6:	b2d2      	uxtb	r2, r2
 80080e8:	701a      	strb	r2, [r3, #0]
 80080ea:	e00a      	b.n	8008102 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	0f1b      	lsrs	r3, r3, #28
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	7dfb      	ldrb	r3, [r7, #23]
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	4619      	mov	r1, r3
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	440b      	add	r3, r1
 80080fc:	3237      	adds	r2, #55	; 0x37
 80080fe:	b2d2      	uxtb	r2, r2
 8008100:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	011b      	lsls	r3, r3, #4
 8008106:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008108:	7dfb      	ldrb	r3, [r7, #23]
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	3301      	adds	r3, #1
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	4413      	add	r3, r2
 8008112:	2200      	movs	r2, #0
 8008114:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008116:	7dfb      	ldrb	r3, [r7, #23]
 8008118:	3301      	adds	r3, #1
 800811a:	75fb      	strb	r3, [r7, #23]
 800811c:	7dfa      	ldrb	r2, [r7, #23]
 800811e:	79fb      	ldrb	r3, [r7, #7]
 8008120:	429a      	cmp	r2, r3
 8008122:	d3d3      	bcc.n	80080cc <IntToUnicode+0x18>
  }
}
 8008124:	bf00      	nop
 8008126:	bf00      	nop
 8008128:	371c      	adds	r7, #28
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr

08008132 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8008132:	b480      	push	{r7}
 8008134:	b083      	sub	sp, #12
 8008136:	af00      	add	r7, sp, #0
 8008138:	4603      	mov	r3, r0
 800813a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800813c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800813e:	4618      	mov	r0, r3
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800814a:	b480      	push	{r7}
 800814c:	b085      	sub	sp, #20
 800814e:	af00      	add	r7, sp, #0
 8008150:	4603      	mov	r3, r0
 8008152:	60b9      	str	r1, [r7, #8]
 8008154:	607a      	str	r2, [r7, #4]
 8008156:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2296      	movs	r2, #150	; 0x96
 800815c:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008164:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8008166:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008168:	4618      	mov	r0, r3
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	4603      	mov	r3, r0
 800817c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800817e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008180:	4618      	mov	r0, r3
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008196:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008198:	4618      	mov	r0, r3
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60b9      	str	r1, [r7, #8]
 80081ac:	607a      	str	r2, [r7, #4]
 80081ae:	461a      	mov	r2, r3
 80081b0:	4603      	mov	r3, r0
 80081b2:	73fb      	strb	r3, [r7, #15]
 80081b4:	4613      	mov	r3, r2
 80081b6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	memcpy(buf,&buffer[blk_addr*STORAGE_BLK_SIZ],blk_len*STORAGE_BLK_SIZ );
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	025b      	lsls	r3, r3, #9
 80081bc:	4a06      	ldr	r2, [pc, #24]	; (80081d8 <STORAGE_Read_FS+0x34>)
 80081be:	1899      	adds	r1, r3, r2
 80081c0:	89bb      	ldrh	r3, [r7, #12]
 80081c2:	025b      	lsls	r3, r3, #9
 80081c4:	461a      	mov	r2, r3
 80081c6:	68b8      	ldr	r0, [r7, #8]
 80081c8:	f000 fcd2 	bl	8008b70 <memcpy>
  return (USBD_OK);
 80081cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	20000634 	.word	0x20000634

080081dc <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60b9      	str	r1, [r7, #8]
 80081e4:	607a      	str	r2, [r7, #4]
 80081e6:	461a      	mov	r2, r3
 80081e8:	4603      	mov	r3, r0
 80081ea:	73fb      	strb	r3, [r7, #15]
 80081ec:	4613      	mov	r3, r2
 80081ee:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
//
	memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ],buf,blk_len*STORAGE_BLK_SIZ );
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	025b      	lsls	r3, r3, #9
 80081f4:	4a06      	ldr	r2, [pc, #24]	; (8008210 <STORAGE_Write_FS+0x34>)
 80081f6:	1898      	adds	r0, r3, r2
 80081f8:	89bb      	ldrh	r3, [r7, #12]
 80081fa:	025b      	lsls	r3, r3, #9
 80081fc:	461a      	mov	r2, r3
 80081fe:	68b9      	ldr	r1, [r7, #8]
 8008200:	f000 fcb6 	bl	8008b70 <memcpy>
  return (USBD_OK);
 8008204:	2300      	movs	r3, #0
//	        // File creation successful
//	        return USBD_OK;
//	    }
//	return write_data_to_flash( buf, blk_addr, blk_len );
  /* USER CODE END 7 */
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	20000634 	.word	0x20000634

08008214 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8008214:	b480      	push	{r7}
 8008216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8008218:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800821a:	4618      	mov	r0, r3
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b0ac      	sub	sp, #176	; 0xb0
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800822c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008230:	2200      	movs	r2, #0
 8008232:	601a      	str	r2, [r3, #0]
 8008234:	605a      	str	r2, [r3, #4]
 8008236:	609a      	str	r2, [r3, #8]
 8008238:	60da      	str	r2, [r3, #12]
 800823a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800823c:	f107 0314 	add.w	r3, r7, #20
 8008240:	2288      	movs	r2, #136	; 0x88
 8008242:	2100      	movs	r1, #0
 8008244:	4618      	mov	r0, r3
 8008246:	f000 fc67 	bl	8008b18 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008252:	d173      	bne.n	800833c <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008258:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800825a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800825e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8008262:	2303      	movs	r3, #3
 8008264:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008266:	2301      	movs	r3, #1
 8008268:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800826a:	230c      	movs	r3, #12
 800826c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800826e:	2307      	movs	r3, #7
 8008270:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008272:	2302      	movs	r3, #2
 8008274:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008276:	2302      	movs	r3, #2
 8008278:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800827a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800827e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008280:	f107 0314 	add.w	r3, r7, #20
 8008284:	4618      	mov	r0, r3
 8008286:	f7fa fc27 	bl	8002ad8 <HAL_RCCEx_PeriphCLKConfig>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8008290:	f7f8 f818 	bl	80002c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008294:	4b2b      	ldr	r3, [pc, #172]	; (8008344 <HAL_PCD_MspInit+0x120>)
 8008296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008298:	4a2a      	ldr	r2, [pc, #168]	; (8008344 <HAL_PCD_MspInit+0x120>)
 800829a:	f043 0301 	orr.w	r3, r3, #1
 800829e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082a0:	4b28      	ldr	r3, [pc, #160]	; (8008344 <HAL_PCD_MspInit+0x120>)
 80082a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	613b      	str	r3, [r7, #16]
 80082aa:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80082ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80082b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082b4:	2302      	movs	r3, #2
 80082b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ba:	2300      	movs	r3, #0
 80082bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082c0:	2303      	movs	r3, #3
 80082c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80082c6:	230a      	movs	r3, #10
 80082c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80082d0:	4619      	mov	r1, r3
 80082d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80082d6:	f7f8 fa39 	bl	800074c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082da:	4b1a      	ldr	r3, [pc, #104]	; (8008344 <HAL_PCD_MspInit+0x120>)
 80082dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082de:	4a19      	ldr	r2, [pc, #100]	; (8008344 <HAL_PCD_MspInit+0x120>)
 80082e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80082e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082e6:	4b17      	ldr	r3, [pc, #92]	; (8008344 <HAL_PCD_MspInit+0x120>)
 80082e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082ee:	60fb      	str	r3, [r7, #12]
 80082f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082f2:	4b14      	ldr	r3, [pc, #80]	; (8008344 <HAL_PCD_MspInit+0x120>)
 80082f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d114      	bne.n	8008328 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082fe:	4b11      	ldr	r3, [pc, #68]	; (8008344 <HAL_PCD_MspInit+0x120>)
 8008300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008302:	4a10      	ldr	r2, [pc, #64]	; (8008344 <HAL_PCD_MspInit+0x120>)
 8008304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008308:	6593      	str	r3, [r2, #88]	; 0x58
 800830a:	4b0e      	ldr	r3, [pc, #56]	; (8008344 <HAL_PCD_MspInit+0x120>)
 800830c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800830e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008312:	60bb      	str	r3, [r7, #8]
 8008314:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008316:	f7f9 fdfb 	bl	8001f10 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800831a:	4b0a      	ldr	r3, [pc, #40]	; (8008344 <HAL_PCD_MspInit+0x120>)
 800831c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800831e:	4a09      	ldr	r2, [pc, #36]	; (8008344 <HAL_PCD_MspInit+0x120>)
 8008320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008324:	6593      	str	r3, [r2, #88]	; 0x58
 8008326:	e001      	b.n	800832c <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008328:	f7f9 fdf2 	bl	8001f10 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800832c:	2200      	movs	r2, #0
 800832e:	2100      	movs	r1, #0
 8008330:	2043      	movs	r0, #67	; 0x43
 8008332:	f7f8 f9d4 	bl	80006de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008336:	2043      	movs	r0, #67	; 0x43
 8008338:	f7f8 f9ed 	bl	8000716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800833c:	bf00      	nop
 800833e:	37b0      	adds	r7, #176	; 0xb0
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	40021000 	.word	0x40021000

08008348 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800835c:	4619      	mov	r1, r3
 800835e:	4610      	mov	r0, r2
 8008360:	f7fe fb42 	bl	80069e8 <USBD_LL_SetupStage>
}
 8008364:	bf00      	nop
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800837e:	78fa      	ldrb	r2, [r7, #3]
 8008380:	6879      	ldr	r1, [r7, #4]
 8008382:	4613      	mov	r3, r2
 8008384:	00db      	lsls	r3, r3, #3
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	440b      	add	r3, r1
 800838c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	78fb      	ldrb	r3, [r7, #3]
 8008394:	4619      	mov	r1, r3
 8008396:	f7fe fb7c 	bl	8006a92 <USBD_LL_DataOutStage>
}
 800839a:	bf00      	nop
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b082      	sub	sp, #8
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	460b      	mov	r3, r1
 80083ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80083b4:	78fa      	ldrb	r2, [r7, #3]
 80083b6:	6879      	ldr	r1, [r7, #4]
 80083b8:	4613      	mov	r3, r2
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	4413      	add	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	440b      	add	r3, r1
 80083c2:	3348      	adds	r3, #72	; 0x48
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	78fb      	ldrb	r3, [r7, #3]
 80083c8:	4619      	mov	r1, r3
 80083ca:	f7fe fc15 	bl	8006bf8 <USBD_LL_DataInStage>
}
 80083ce:	bf00      	nop
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b082      	sub	sp, #8
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fe fd4f 	bl	8006e88 <USBD_LL_SOF>
}
 80083ea:	bf00      	nop
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083fa:	2301      	movs	r3, #1
 80083fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	2b02      	cmp	r3, #2
 8008404:	d001      	beq.n	800840a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008406:	f7f7 ff5d 	bl	80002c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008410:	7bfa      	ldrb	r2, [r7, #15]
 8008412:	4611      	mov	r1, r2
 8008414:	4618      	mov	r0, r3
 8008416:	f7fe fcf3 	bl	8006e00 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008420:	4618      	mov	r0, r3
 8008422:	f7fe fc9b 	bl	8006d5c <USBD_LL_Reset>
}
 8008426:	bf00      	nop
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
	...

08008430 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	6812      	ldr	r2, [r2, #0]
 8008446:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800844a:	f043 0301 	orr.w	r3, r3, #1
 800844e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe fce2 	bl	8006e20 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d005      	beq.n	8008470 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008464:	4b04      	ldr	r3, [pc, #16]	; (8008478 <HAL_PCD_SuspendCallback+0x48>)
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	4a03      	ldr	r2, [pc, #12]	; (8008478 <HAL_PCD_SuspendCallback+0x48>)
 800846a:	f043 0306 	orr.w	r3, r3, #6
 800846e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008470:	bf00      	nop
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	e000ed00 	.word	0xe000ed00

0800847c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	6812      	ldr	r2, [r2, #0]
 8008492:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008496:	f023 0301 	bic.w	r3, r3, #1
 800849a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a1b      	ldr	r3, [r3, #32]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d007      	beq.n	80084b4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084a4:	4b08      	ldr	r3, [pc, #32]	; (80084c8 <HAL_PCD_ResumeCallback+0x4c>)
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	4a07      	ldr	r2, [pc, #28]	; (80084c8 <HAL_PCD_ResumeCallback+0x4c>)
 80084aa:	f023 0306 	bic.w	r3, r3, #6
 80084ae:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80084b0:	f000 fb2c 	bl	8008b0c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe fccc 	bl	8006e58 <USBD_LL_Resume>
}
 80084c0:	bf00      	nop
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	e000ed00 	.word	0xe000ed00

080084cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084de:	78fa      	ldrb	r2, [r7, #3]
 80084e0:	4611      	mov	r1, r2
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fe fd22 	bl	8006f2c <USBD_LL_IsoOUTIncomplete>
}
 80084e8:	bf00      	nop
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008502:	78fa      	ldrb	r2, [r7, #3]
 8008504:	4611      	mov	r1, r2
 8008506:	4618      	mov	r0, r3
 8008508:	f7fe fcde 	bl	8006ec8 <USBD_LL_IsoINIncomplete>
}
 800850c:	bf00      	nop
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008522:	4618      	mov	r0, r3
 8008524:	f7fe fd34 	bl	8006f90 <USBD_LL_DevConnected>
}
 8008528:	bf00      	nop
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800853e:	4618      	mov	r0, r3
 8008540:	f7fe fd31 	bl	8006fa6 <USBD_LL_DevDisconnected>
}
 8008544:	bf00      	nop
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d13c      	bne.n	80085d6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800855c:	4a20      	ldr	r2, [pc, #128]	; (80085e0 <USBD_LL_Init+0x94>)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a1e      	ldr	r2, [pc, #120]	; (80085e0 <USBD_LL_Init+0x94>)
 8008568:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800856c:	4b1c      	ldr	r3, [pc, #112]	; (80085e0 <USBD_LL_Init+0x94>)
 800856e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008572:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008574:	4b1a      	ldr	r3, [pc, #104]	; (80085e0 <USBD_LL_Init+0x94>)
 8008576:	2206      	movs	r2, #6
 8008578:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800857a:	4b19      	ldr	r3, [pc, #100]	; (80085e0 <USBD_LL_Init+0x94>)
 800857c:	2202      	movs	r2, #2
 800857e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008580:	4b17      	ldr	r3, [pc, #92]	; (80085e0 <USBD_LL_Init+0x94>)
 8008582:	2202      	movs	r2, #2
 8008584:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008586:	4b16      	ldr	r3, [pc, #88]	; (80085e0 <USBD_LL_Init+0x94>)
 8008588:	2200      	movs	r2, #0
 800858a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800858c:	4b14      	ldr	r3, [pc, #80]	; (80085e0 <USBD_LL_Init+0x94>)
 800858e:	2200      	movs	r2, #0
 8008590:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008592:	4b13      	ldr	r3, [pc, #76]	; (80085e0 <USBD_LL_Init+0x94>)
 8008594:	2200      	movs	r2, #0
 8008596:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008598:	4b11      	ldr	r3, [pc, #68]	; (80085e0 <USBD_LL_Init+0x94>)
 800859a:	2200      	movs	r2, #0
 800859c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800859e:	4b10      	ldr	r3, [pc, #64]	; (80085e0 <USBD_LL_Init+0x94>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80085a4:	4b0e      	ldr	r3, [pc, #56]	; (80085e0 <USBD_LL_Init+0x94>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80085aa:	480d      	ldr	r0, [pc, #52]	; (80085e0 <USBD_LL_Init+0x94>)
 80085ac:	f7f8 fa78 	bl	8000aa0 <HAL_PCD_Init>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80085b6:	f7f7 fe85 	bl	80002c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80085ba:	2180      	movs	r1, #128	; 0x80
 80085bc:	4808      	ldr	r0, [pc, #32]	; (80085e0 <USBD_LL_Init+0x94>)
 80085be:	f7f9 fc0e 	bl	8001dde <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80085c2:	2240      	movs	r2, #64	; 0x40
 80085c4:	2100      	movs	r1, #0
 80085c6:	4806      	ldr	r0, [pc, #24]	; (80085e0 <USBD_LL_Init+0x94>)
 80085c8:	f7f9 fbc2 	bl	8001d50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80085cc:	2280      	movs	r2, #128	; 0x80
 80085ce:	2101      	movs	r1, #1
 80085d0:	4803      	ldr	r0, [pc, #12]	; (80085e0 <USBD_LL_Init+0x94>)
 80085d2:	f7f9 fbbd 	bl	8001d50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	20013234 	.word	0x20013234

080085e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085f0:	2300      	movs	r3, #0
 80085f2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7f8 fb74 	bl	8000ce8 <HAL_PCD_Start>
 8008600:	4603      	mov	r3, r0
 8008602:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008604:	7bbb      	ldrb	r3, [r7, #14]
 8008606:	2b03      	cmp	r3, #3
 8008608:	d816      	bhi.n	8008638 <USBD_LL_Start+0x54>
 800860a:	a201      	add	r2, pc, #4	; (adr r2, 8008610 <USBD_LL_Start+0x2c>)
 800860c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008610:	08008621 	.word	0x08008621
 8008614:	08008627 	.word	0x08008627
 8008618:	0800862d 	.word	0x0800862d
 800861c:	08008633 	.word	0x08008633
    case HAL_OK :
      usb_status = USBD_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	73fb      	strb	r3, [r7, #15]
    break;
 8008624:	e00b      	b.n	800863e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008626:	2303      	movs	r3, #3
 8008628:	73fb      	strb	r3, [r7, #15]
    break;
 800862a:	e008      	b.n	800863e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800862c:	2301      	movs	r3, #1
 800862e:	73fb      	strb	r3, [r7, #15]
    break;
 8008630:	e005      	b.n	800863e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008632:	2303      	movs	r3, #3
 8008634:	73fb      	strb	r3, [r7, #15]
    break;
 8008636:	e002      	b.n	800863e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008638:	2303      	movs	r3, #3
 800863a:	73fb      	strb	r3, [r7, #15]
    break;
 800863c:	bf00      	nop
  }
  return usb_status;
 800863e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	4608      	mov	r0, r1
 8008652:	4611      	mov	r1, r2
 8008654:	461a      	mov	r2, r3
 8008656:	4603      	mov	r3, r0
 8008658:	70fb      	strb	r3, [r7, #3]
 800865a:	460b      	mov	r3, r1
 800865c:	70bb      	strb	r3, [r7, #2]
 800865e:	4613      	mov	r3, r2
 8008660:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008662:	2300      	movs	r3, #0
 8008664:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008670:	78bb      	ldrb	r3, [r7, #2]
 8008672:	883a      	ldrh	r2, [r7, #0]
 8008674:	78f9      	ldrb	r1, [r7, #3]
 8008676:	f7f9 f81e 	bl	80016b6 <HAL_PCD_EP_Open>
 800867a:	4603      	mov	r3, r0
 800867c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800867e:	7bbb      	ldrb	r3, [r7, #14]
 8008680:	2b03      	cmp	r3, #3
 8008682:	d817      	bhi.n	80086b4 <USBD_LL_OpenEP+0x6c>
 8008684:	a201      	add	r2, pc, #4	; (adr r2, 800868c <USBD_LL_OpenEP+0x44>)
 8008686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868a:	bf00      	nop
 800868c:	0800869d 	.word	0x0800869d
 8008690:	080086a3 	.word	0x080086a3
 8008694:	080086a9 	.word	0x080086a9
 8008698:	080086af 	.word	0x080086af
    case HAL_OK :
      usb_status = USBD_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	73fb      	strb	r3, [r7, #15]
    break;
 80086a0:	e00b      	b.n	80086ba <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086a2:	2303      	movs	r3, #3
 80086a4:	73fb      	strb	r3, [r7, #15]
    break;
 80086a6:	e008      	b.n	80086ba <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086a8:	2301      	movs	r3, #1
 80086aa:	73fb      	strb	r3, [r7, #15]
    break;
 80086ac:	e005      	b.n	80086ba <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086ae:	2303      	movs	r3, #3
 80086b0:	73fb      	strb	r3, [r7, #15]
    break;
 80086b2:	e002      	b.n	80086ba <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80086b4:	2303      	movs	r3, #3
 80086b6:	73fb      	strb	r3, [r7, #15]
    break;
 80086b8:	bf00      	nop
  }
  return usb_status;
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086d4:	2300      	movs	r3, #0
 80086d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086de:	78fa      	ldrb	r2, [r7, #3]
 80086e0:	4611      	mov	r1, r2
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7f9 f84f 	bl	8001786 <HAL_PCD_EP_Close>
 80086e8:	4603      	mov	r3, r0
 80086ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d816      	bhi.n	8008720 <USBD_LL_CloseEP+0x5c>
 80086f2:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <USBD_LL_CloseEP+0x34>)
 80086f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f8:	08008709 	.word	0x08008709
 80086fc:	0800870f 	.word	0x0800870f
 8008700:	08008715 	.word	0x08008715
 8008704:	0800871b 	.word	0x0800871b
    case HAL_OK :
      usb_status = USBD_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	73fb      	strb	r3, [r7, #15]
    break;
 800870c:	e00b      	b.n	8008726 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800870e:	2303      	movs	r3, #3
 8008710:	73fb      	strb	r3, [r7, #15]
    break;
 8008712:	e008      	b.n	8008726 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008714:	2301      	movs	r3, #1
 8008716:	73fb      	strb	r3, [r7, #15]
    break;
 8008718:	e005      	b.n	8008726 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800871a:	2303      	movs	r3, #3
 800871c:	73fb      	strb	r3, [r7, #15]
    break;
 800871e:	e002      	b.n	8008726 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008720:	2303      	movs	r3, #3
 8008722:	73fb      	strb	r3, [r7, #15]
    break;
 8008724:	bf00      	nop
  }
  return usb_status;
 8008726:	7bfb      	ldrb	r3, [r7, #15]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	460b      	mov	r3, r1
 800873a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008740:	2300      	movs	r3, #0
 8008742:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800874a:	78fa      	ldrb	r2, [r7, #3]
 800874c:	4611      	mov	r1, r2
 800874e:	4618      	mov	r0, r3
 8008750:	f7f9 f9c7 	bl	8001ae2 <HAL_PCD_EP_Flush>
 8008754:	4603      	mov	r3, r0
 8008756:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008758:	7bbb      	ldrb	r3, [r7, #14]
 800875a:	2b03      	cmp	r3, #3
 800875c:	d816      	bhi.n	800878c <USBD_LL_FlushEP+0x5c>
 800875e:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <USBD_LL_FlushEP+0x34>)
 8008760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008764:	08008775 	.word	0x08008775
 8008768:	0800877b 	.word	0x0800877b
 800876c:	08008781 	.word	0x08008781
 8008770:	08008787 	.word	0x08008787
    case HAL_OK :
      usb_status = USBD_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	73fb      	strb	r3, [r7, #15]
    break;
 8008778:	e00b      	b.n	8008792 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800877a:	2303      	movs	r3, #3
 800877c:	73fb      	strb	r3, [r7, #15]
    break;
 800877e:	e008      	b.n	8008792 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008780:	2301      	movs	r3, #1
 8008782:	73fb      	strb	r3, [r7, #15]
    break;
 8008784:	e005      	b.n	8008792 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008786:	2303      	movs	r3, #3
 8008788:	73fb      	strb	r3, [r7, #15]
    break;
 800878a:	e002      	b.n	8008792 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800878c:	2303      	movs	r3, #3
 800878e:	73fb      	strb	r3, [r7, #15]
    break;
 8008790:	bf00      	nop
  }
  return usb_status;
 8008792:	7bfb      	ldrb	r3, [r7, #15]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	460b      	mov	r3, r1
 80087a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087b6:	78fa      	ldrb	r2, [r7, #3]
 80087b8:	4611      	mov	r1, r2
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7f9 f8a8 	bl	8001910 <HAL_PCD_EP_SetStall>
 80087c0:	4603      	mov	r3, r0
 80087c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d816      	bhi.n	80087f8 <USBD_LL_StallEP+0x5c>
 80087ca:	a201      	add	r2, pc, #4	; (adr r2, 80087d0 <USBD_LL_StallEP+0x34>)
 80087cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d0:	080087e1 	.word	0x080087e1
 80087d4:	080087e7 	.word	0x080087e7
 80087d8:	080087ed 	.word	0x080087ed
 80087dc:	080087f3 	.word	0x080087f3
    case HAL_OK :
      usb_status = USBD_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	73fb      	strb	r3, [r7, #15]
    break;
 80087e4:	e00b      	b.n	80087fe <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80087e6:	2303      	movs	r3, #3
 80087e8:	73fb      	strb	r3, [r7, #15]
    break;
 80087ea:	e008      	b.n	80087fe <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80087ec:	2301      	movs	r3, #1
 80087ee:	73fb      	strb	r3, [r7, #15]
    break;
 80087f0:	e005      	b.n	80087fe <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087f2:	2303      	movs	r3, #3
 80087f4:	73fb      	strb	r3, [r7, #15]
    break;
 80087f6:	e002      	b.n	80087fe <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80087f8:	2303      	movs	r3, #3
 80087fa:	73fb      	strb	r3, [r7, #15]
    break;
 80087fc:	bf00      	nop
  }
  return usb_status;
 80087fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	460b      	mov	r3, r1
 8008812:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008822:	78fa      	ldrb	r2, [r7, #3]
 8008824:	4611      	mov	r1, r2
 8008826:	4618      	mov	r0, r3
 8008828:	f7f9 f8d4 	bl	80019d4 <HAL_PCD_EP_ClrStall>
 800882c:	4603      	mov	r3, r0
 800882e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	2b03      	cmp	r3, #3
 8008834:	d816      	bhi.n	8008864 <USBD_LL_ClearStallEP+0x5c>
 8008836:	a201      	add	r2, pc, #4	; (adr r2, 800883c <USBD_LL_ClearStallEP+0x34>)
 8008838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883c:	0800884d 	.word	0x0800884d
 8008840:	08008853 	.word	0x08008853
 8008844:	08008859 	.word	0x08008859
 8008848:	0800885f 	.word	0x0800885f
    case HAL_OK :
      usb_status = USBD_OK;
 800884c:	2300      	movs	r3, #0
 800884e:	73fb      	strb	r3, [r7, #15]
    break;
 8008850:	e00b      	b.n	800886a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008852:	2303      	movs	r3, #3
 8008854:	73fb      	strb	r3, [r7, #15]
    break;
 8008856:	e008      	b.n	800886a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008858:	2301      	movs	r3, #1
 800885a:	73fb      	strb	r3, [r7, #15]
    break;
 800885c:	e005      	b.n	800886a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800885e:	2303      	movs	r3, #3
 8008860:	73fb      	strb	r3, [r7, #15]
    break;
 8008862:	e002      	b.n	800886a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008864:	2303      	movs	r3, #3
 8008866:	73fb      	strb	r3, [r7, #15]
    break;
 8008868:	bf00      	nop
  }
  return usb_status;
 800886a:	7bfb      	ldrb	r3, [r7, #15]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	460b      	mov	r3, r1
 800887e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008886:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008888:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800888c:	2b00      	cmp	r3, #0
 800888e:	da0b      	bge.n	80088a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008890:	78fb      	ldrb	r3, [r7, #3]
 8008892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008896:	68f9      	ldr	r1, [r7, #12]
 8008898:	4613      	mov	r3, r2
 800889a:	00db      	lsls	r3, r3, #3
 800889c:	4413      	add	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	440b      	add	r3, r1
 80088a2:	333e      	adds	r3, #62	; 0x3e
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	e00b      	b.n	80088c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80088a8:	78fb      	ldrb	r3, [r7, #3]
 80088aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088ae:	68f9      	ldr	r1, [r7, #12]
 80088b0:	4613      	mov	r3, r2
 80088b2:	00db      	lsls	r3, r3, #3
 80088b4:	4413      	add	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	440b      	add	r3, r1
 80088ba:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80088be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088dc:	2300      	movs	r3, #0
 80088de:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088e6:	78fa      	ldrb	r2, [r7, #3]
 80088e8:	4611      	mov	r1, r2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7f8 febe 	bl	800166c <HAL_PCD_SetAddress>
 80088f0:	4603      	mov	r3, r0
 80088f2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80088f4:	7bbb      	ldrb	r3, [r7, #14]
 80088f6:	2b03      	cmp	r3, #3
 80088f8:	d816      	bhi.n	8008928 <USBD_LL_SetUSBAddress+0x5c>
 80088fa:	a201      	add	r2, pc, #4	; (adr r2, 8008900 <USBD_LL_SetUSBAddress+0x34>)
 80088fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008900:	08008911 	.word	0x08008911
 8008904:	08008917 	.word	0x08008917
 8008908:	0800891d 	.word	0x0800891d
 800890c:	08008923 	.word	0x08008923
    case HAL_OK :
      usb_status = USBD_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	73fb      	strb	r3, [r7, #15]
    break;
 8008914:	e00b      	b.n	800892e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008916:	2303      	movs	r3, #3
 8008918:	73fb      	strb	r3, [r7, #15]
    break;
 800891a:	e008      	b.n	800892e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800891c:	2301      	movs	r3, #1
 800891e:	73fb      	strb	r3, [r7, #15]
    break;
 8008920:	e005      	b.n	800892e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008922:	2303      	movs	r3, #3
 8008924:	73fb      	strb	r3, [r7, #15]
    break;
 8008926:	e002      	b.n	800892e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008928:	2303      	movs	r3, #3
 800892a:	73fb      	strb	r3, [r7, #15]
    break;
 800892c:	bf00      	nop
  }
  return usb_status;
 800892e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	607a      	str	r2, [r7, #4]
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	460b      	mov	r3, r1
 8008946:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008956:	7af9      	ldrb	r1, [r7, #11]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	f7f8 ffa7 	bl	80018ae <HAL_PCD_EP_Transmit>
 8008960:	4603      	mov	r3, r0
 8008962:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008964:	7dbb      	ldrb	r3, [r7, #22]
 8008966:	2b03      	cmp	r3, #3
 8008968:	d816      	bhi.n	8008998 <USBD_LL_Transmit+0x60>
 800896a:	a201      	add	r2, pc, #4	; (adr r2, 8008970 <USBD_LL_Transmit+0x38>)
 800896c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008970:	08008981 	.word	0x08008981
 8008974:	08008987 	.word	0x08008987
 8008978:	0800898d 	.word	0x0800898d
 800897c:	08008993 	.word	0x08008993
    case HAL_OK :
      usb_status = USBD_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	75fb      	strb	r3, [r7, #23]
    break;
 8008984:	e00b      	b.n	800899e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008986:	2303      	movs	r3, #3
 8008988:	75fb      	strb	r3, [r7, #23]
    break;
 800898a:	e008      	b.n	800899e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800898c:	2301      	movs	r3, #1
 800898e:	75fb      	strb	r3, [r7, #23]
    break;
 8008990:	e005      	b.n	800899e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008992:	2303      	movs	r3, #3
 8008994:	75fb      	strb	r3, [r7, #23]
    break;
 8008996:	e002      	b.n	800899e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008998:	2303      	movs	r3, #3
 800899a:	75fb      	strb	r3, [r7, #23]
    break;
 800899c:	bf00      	nop
  }
  return usb_status;
 800899e:	7dfb      	ldrb	r3, [r7, #23]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3718      	adds	r7, #24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	607a      	str	r2, [r7, #4]
 80089b2:	603b      	str	r3, [r7, #0]
 80089b4:	460b      	mov	r3, r1
 80089b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80089c6:	7af9      	ldrb	r1, [r7, #11]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	f7f8 ff25 	bl	800181a <HAL_PCD_EP_Receive>
 80089d0:	4603      	mov	r3, r0
 80089d2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80089d4:	7dbb      	ldrb	r3, [r7, #22]
 80089d6:	2b03      	cmp	r3, #3
 80089d8:	d816      	bhi.n	8008a08 <USBD_LL_PrepareReceive+0x60>
 80089da:	a201      	add	r2, pc, #4	; (adr r2, 80089e0 <USBD_LL_PrepareReceive+0x38>)
 80089dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e0:	080089f1 	.word	0x080089f1
 80089e4:	080089f7 	.word	0x080089f7
 80089e8:	080089fd 	.word	0x080089fd
 80089ec:	08008a03 	.word	0x08008a03
    case HAL_OK :
      usb_status = USBD_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	75fb      	strb	r3, [r7, #23]
    break;
 80089f4:	e00b      	b.n	8008a0e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80089f6:	2303      	movs	r3, #3
 80089f8:	75fb      	strb	r3, [r7, #23]
    break;
 80089fa:	e008      	b.n	8008a0e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80089fc:	2301      	movs	r3, #1
 80089fe:	75fb      	strb	r3, [r7, #23]
    break;
 8008a00:	e005      	b.n	8008a0e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a02:	2303      	movs	r3, #3
 8008a04:	75fb      	strb	r3, [r7, #23]
    break;
 8008a06:	e002      	b.n	8008a0e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	75fb      	strb	r3, [r7, #23]
    break;
 8008a0c:	bf00      	nop
  }
  return usb_status;
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3718      	adds	r7, #24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a2a:	78fa      	ldrb	r2, [r7, #3]
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7f8 ff25 	bl	800187e <HAL_PCD_EP_GetRxCount>
 8008a34:	4603      	mov	r3, r0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
	...

08008a40 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	460b      	mov	r3, r1
 8008a4a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008a4c:	78fb      	ldrb	r3, [r7, #3]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <HAL_PCDEx_LPM_Callback+0x18>
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d01f      	beq.n	8008a96 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008a56:	e03b      	b.n	8008ad0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a1b      	ldr	r3, [r3, #32]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d007      	beq.n	8008a70 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008a60:	f000 f854 	bl	8008b0c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a64:	4b1c      	ldr	r3, [pc, #112]	; (8008ad8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	4a1b      	ldr	r2, [pc, #108]	; (8008ad8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008a6a:	f023 0306 	bic.w	r3, r3, #6
 8008a6e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	6812      	ldr	r2, [r2, #0]
 8008a7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a82:	f023 0301 	bic.w	r3, r3, #1
 8008a86:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fe f9e2 	bl	8006e58 <USBD_LL_Resume>
    break;
 8008a94:	e01c      	b.n	8008ad0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	6812      	ldr	r2, [r2, #0]
 8008aa4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008aa8:	f043 0301 	orr.w	r3, r3, #1
 8008aac:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fe f9b3 	bl	8006e20 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d005      	beq.n	8008ace <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ac2:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	4a04      	ldr	r2, [pc, #16]	; (8008ad8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008ac8:	f043 0306 	orr.w	r3, r3, #6
 8008acc:	6113      	str	r3, [r2, #16]
    break;
 8008ace:	bf00      	nop
}
 8008ad0:	bf00      	nop
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	e000ed00 	.word	0xe000ed00

08008adc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ae4:	4b03      	ldr	r3, [pc, #12]	; (8008af4 <USBD_static_malloc+0x18>)
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	20013740 	.word	0x20013740

08008af8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]

}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008b10:	f7f7 fb65 	bl	80001de <SystemClock_Config>
}
 8008b14:	bf00      	nop
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <memset>:
 8008b18:	4402      	add	r2, r0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d100      	bne.n	8008b22 <memset+0xa>
 8008b20:	4770      	bx	lr
 8008b22:	f803 1b01 	strb.w	r1, [r3], #1
 8008b26:	e7f9      	b.n	8008b1c <memset+0x4>

08008b28 <__libc_init_array>:
 8008b28:	b570      	push	{r4, r5, r6, lr}
 8008b2a:	4d0d      	ldr	r5, [pc, #52]	; (8008b60 <__libc_init_array+0x38>)
 8008b2c:	4c0d      	ldr	r4, [pc, #52]	; (8008b64 <__libc_init_array+0x3c>)
 8008b2e:	1b64      	subs	r4, r4, r5
 8008b30:	10a4      	asrs	r4, r4, #2
 8008b32:	2600      	movs	r6, #0
 8008b34:	42a6      	cmp	r6, r4
 8008b36:	d109      	bne.n	8008b4c <__libc_init_array+0x24>
 8008b38:	4d0b      	ldr	r5, [pc, #44]	; (8008b68 <__libc_init_array+0x40>)
 8008b3a:	4c0c      	ldr	r4, [pc, #48]	; (8008b6c <__libc_init_array+0x44>)
 8008b3c:	f000 f826 	bl	8008b8c <_init>
 8008b40:	1b64      	subs	r4, r4, r5
 8008b42:	10a4      	asrs	r4, r4, #2
 8008b44:	2600      	movs	r6, #0
 8008b46:	42a6      	cmp	r6, r4
 8008b48:	d105      	bne.n	8008b56 <__libc_init_array+0x2e>
 8008b4a:	bd70      	pop	{r4, r5, r6, pc}
 8008b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b50:	4798      	blx	r3
 8008b52:	3601      	adds	r6, #1
 8008b54:	e7ee      	b.n	8008b34 <__libc_init_array+0xc>
 8008b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b5a:	4798      	blx	r3
 8008b5c:	3601      	adds	r6, #1
 8008b5e:	e7f2      	b.n	8008b46 <__libc_init_array+0x1e>
 8008b60:	08008c4c 	.word	0x08008c4c
 8008b64:	08008c4c 	.word	0x08008c4c
 8008b68:	08008c4c 	.word	0x08008c4c
 8008b6c:	08008c50 	.word	0x08008c50

08008b70 <memcpy>:
 8008b70:	440a      	add	r2, r1
 8008b72:	4291      	cmp	r1, r2
 8008b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b78:	d100      	bne.n	8008b7c <memcpy+0xc>
 8008b7a:	4770      	bx	lr
 8008b7c:	b510      	push	{r4, lr}
 8008b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b86:	4291      	cmp	r1, r2
 8008b88:	d1f9      	bne.n	8008b7e <memcpy+0xe>
 8008b8a:	bd10      	pop	{r4, pc}

08008b8c <_init>:
 8008b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8e:	bf00      	nop
 8008b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b92:	bc08      	pop	{r3}
 8008b94:	469e      	mov	lr, r3
 8008b96:	4770      	bx	lr

08008b98 <_fini>:
 8008b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9a:	bf00      	nop
 8008b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b9e:	bc08      	pop	{r3}
 8008ba0:	469e      	mov	lr, r3
 8008ba2:	4770      	bx	lr
