
17_TIM_COUNTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a14  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003ad4  08003ad4  00013ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b6c  08003b6c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b74  08003b74  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000068  08003be4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08003be4  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c66b  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d21  00000000  00000000  0002c73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b80  00000000  00000000  0002e460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008e5  00000000  00000000  0002efe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000152dc  00000000  00000000  0002f8c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d9a7  00000000  00000000  00044ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080864  00000000  00000000  00052548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f68  00000000  00000000  000d2dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000d5d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003abc 	.word	0x08003abc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003abc 	.word	0x08003abc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
//  UNUSED(htim);

	printf("Period Elapsed Callback function is called\r\n");
 80004b0:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f002 ff32 	bl	800331c <puts>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	08003ad4 	.word	0x08003ad4

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fa84 	bl	80009d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f80e 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f904 	bl	80006dc <MX_GPIO_Init>
  MX_TIM2_Init();
 80004d4:	f000 f87c 	bl	80005d0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004d8:	f000 f8d0 	bl	800067c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 80004dc:	4b02      	ldr	r3, [pc, #8]	; (80004e8 <main+0x24>)
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 fcf2 	bl	8001ec8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <main+0x20>
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	20000084 	.word	0x20000084

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b09d      	sub	sp, #116	; 0x74
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	2438      	movs	r4, #56	; 0x38
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	0018      	movs	r0, r3
 80004f8:	2338      	movs	r3, #56	; 0x38
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f003 f809 	bl	8003514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000502:	2324      	movs	r3, #36	; 0x24
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	0018      	movs	r0, r3
 8000508:	2314      	movs	r3, #20
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f003 f801 	bl	8003514 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000512:	003b      	movs	r3, r7
 8000514:	0018      	movs	r0, r3
 8000516:	2324      	movs	r3, #36	; 0x24
 8000518:	001a      	movs	r2, r3
 800051a:	2100      	movs	r1, #0
 800051c:	f002 fffa 	bl	8003514 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000520:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <SystemClock_Config+0xdc>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a29      	ldr	r2, [pc, #164]	; (80005cc <SystemClock_Config+0xe0>)
 8000526:	401a      	ands	r2, r3
 8000528:	4b27      	ldr	r3, [pc, #156]	; (80005c8 <SystemClock_Config+0xdc>)
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	0109      	lsls	r1, r1, #4
 800052e:	430a      	orrs	r2, r1
 8000530:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000532:	0021      	movs	r1, r4
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2202      	movs	r2, #2
 8000538:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2201      	movs	r2, #1
 800053e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2210      	movs	r2, #16
 8000544:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2202      	movs	r2, #2
 800054a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2280      	movs	r2, #128	; 0x80
 800055c:	0412      	lsls	r2, r2, #16
 800055e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000560:	187b      	adds	r3, r7, r1
 8000562:	0018      	movs	r0, r3
 8000564:	f000 fcfa 	bl	8000f5c <HAL_RCC_OscConfig>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800056c:	f000 f8cc 	bl	8000708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	2124      	movs	r1, #36	; 0x24
 8000572:	187b      	adds	r3, r7, r1
 8000574:	220f      	movs	r2, #15
 8000576:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2203      	movs	r2, #3
 800057c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2100      	movs	r1, #0
 8000594:	0018      	movs	r0, r3
 8000596:	f001 f8a5 	bl	80016e4 <HAL_RCC_ClockConfig>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800059e:	f000 f8b3 	bl	8000708 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005a2:	003b      	movs	r3, r7
 80005a4:	2201      	movs	r2, #1
 80005a6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005a8:	003b      	movs	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ae:	003b      	movs	r3, r7
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fabb 	bl	8001b2c <HAL_RCCEx_PeriphCLKConfig>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005ba:	f000 f8a5 	bl	8000708 <Error_Handler>
  }
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b01d      	add	sp, #116	; 0x74
 80005c4:	bd90      	pop	{r4, r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	40007000 	.word	0x40007000
 80005cc:	ffffe7ff 	.word	0xffffe7ff

080005d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005d6:	2308      	movs	r3, #8
 80005d8:	18fb      	adds	r3, r7, r3
 80005da:	0018      	movs	r0, r3
 80005dc:	2310      	movs	r3, #16
 80005de:	001a      	movs	r2, r3
 80005e0:	2100      	movs	r1, #0
 80005e2:	f002 ff97 	bl	8003514 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e6:	003b      	movs	r3, r7
 80005e8:	0018      	movs	r0, r3
 80005ea:	2308      	movs	r3, #8
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f002 ff90 	bl	8003514 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <MX_TIM2_Init+0xa0>)
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	05d2      	lsls	r2, r2, #23
 80005fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80005fc:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <MX_TIM2_Init+0xa0>)
 80005fe:	4a1d      	ldr	r2, [pc, #116]	; (8000674 <MX_TIM2_Init+0xa4>)
 8000600:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000602:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_TIM2_Init+0xa0>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7199;
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <MX_TIM2_Init+0xa0>)
 800060a:	4a1b      	ldr	r2, [pc, #108]	; (8000678 <MX_TIM2_Init+0xa8>)
 800060c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_TIM2_Init+0xa0>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_TIM2_Init+0xa0>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_TIM2_Init+0xa0>)
 800061c:	0018      	movs	r0, r3
 800061e:	f001 fc13 	bl	8001e48 <HAL_TIM_Base_Init>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000626:	f000 f86f 	bl	8000708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800062a:	2108      	movs	r1, #8
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	0152      	lsls	r2, r2, #5
 8000632:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000634:	187a      	adds	r2, r7, r1
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_TIM2_Init+0xa0>)
 8000638:	0011      	movs	r1, r2
 800063a:	0018      	movs	r0, r3
 800063c:	f001 fd78 	bl	8002130 <HAL_TIM_ConfigClockSource>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000644:	f000 f860 	bl	8000708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000648:	003b      	movs	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064e:	003b      	movs	r3, r7
 8000650:	2200      	movs	r2, #0
 8000652:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000654:	003a      	movs	r2, r7
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_TIM2_Init+0xa0>)
 8000658:	0011      	movs	r1, r2
 800065a:	0018      	movs	r0, r3
 800065c:	f001 ff4a 	bl	80024f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000664:	f000 f850 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b006      	add	sp, #24
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000084 	.word	0x20000084
 8000674:	000003e7 	.word	0x000003e7
 8000678:	00001c1f 	.word	0x00001c1f

0800067c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 8000682:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <MX_USART1_UART_Init+0x5c>)
 8000684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 8000688:	22e1      	movs	r2, #225	; 0xe1
 800068a:	0252      	lsls	r2, r2, #9
 800068c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006c0:	0018      	movs	r0, r3
 80006c2:	f001 ff6f 	bl	80025a4 <HAL_UART_Init>
 80006c6:	1e03      	subs	r3, r0, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ca:	f000 f81d 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200000c4 	.word	0x200000c4
 80006d8:	40013800 	.word	0x40013800

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_GPIO_Init+0x28>)
 80006e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006e6:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_GPIO_Init+0x28>)
 80006e8:	2101      	movs	r1, #1
 80006ea:	430a      	orrs	r2, r1
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <MX_GPIO_Init+0x28>)
 80006f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f2:	2201      	movs	r2, #1
 80006f4:	4013      	ands	r3, r2
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b002      	add	sp, #8
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	40021000 	.word	0x40021000

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	e7fe      	b.n	8000710 <Error_Handler+0x8>
	...

08000714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <HAL_MspInit+0x24>)
 800071a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_MspInit+0x24>)
 800071e:	2101      	movs	r1, #1
 8000720:	430a      	orrs	r2, r1
 8000722:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <HAL_MspInit+0x24>)
 8000726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <HAL_MspInit+0x24>)
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	0549      	lsls	r1, r1, #21
 800072e:	430a      	orrs	r2, r1
 8000730:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40021000 	.word	0x40021000

0800073c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	429a      	cmp	r2, r3
 800074e:	d10d      	bne.n	800076c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_TIM_Base_MspInit+0x38>)
 8000752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <HAL_TIM_Base_MspInit+0x38>)
 8000756:	2101      	movs	r1, #1
 8000758:	430a      	orrs	r2, r1
 800075a:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2100      	movs	r1, #0
 8000760:	200f      	movs	r0, #15
 8000762:	f000 fa53 	bl	8000c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000766:	200f      	movs	r0, #15
 8000768:	f000 fa65 	bl	8000c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b002      	add	sp, #8
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021000 	.word	0x40021000

08000778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b089      	sub	sp, #36	; 0x24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	240c      	movs	r4, #12
 8000782:	193b      	adds	r3, r7, r4
 8000784:	0018      	movs	r0, r3
 8000786:	2314      	movs	r3, #20
 8000788:	001a      	movs	r2, r3
 800078a:	2100      	movs	r1, #0
 800078c:	f002 fec2 	bl	8003514 <memset>
  if(huart->Instance==USART1)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a18      	ldr	r2, [pc, #96]	; (80007f8 <HAL_UART_MspInit+0x80>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d12a      	bne.n	80007f0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <HAL_UART_MspInit+0x84>)
 800079c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <HAL_UART_MspInit+0x84>)
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	01c9      	lsls	r1, r1, #7
 80007a4:	430a      	orrs	r2, r1
 80007a6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <HAL_UART_MspInit+0x84>)
 80007aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <HAL_UART_MspInit+0x84>)
 80007ae:	2101      	movs	r1, #1
 80007b0:	430a      	orrs	r2, r1
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <HAL_UART_MspInit+0x84>)
 80007b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b8:	2201      	movs	r2, #1
 80007ba:	4013      	ands	r3, r2
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_USART1_TX_Pin|BSP_USART1_RX_Pin;
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	22c0      	movs	r2, #192	; 0xc0
 80007c4:	00d2      	lsls	r2, r2, #3
 80007c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	0021      	movs	r1, r4
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2202      	movs	r2, #2
 80007ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2203      	movs	r2, #3
 80007da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2204      	movs	r2, #4
 80007e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	187a      	adds	r2, r7, r1
 80007e4:	23a0      	movs	r3, #160	; 0xa0
 80007e6:	05db      	lsls	r3, r3, #23
 80007e8:	0011      	movs	r1, r2
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 fa40 	bl	8000c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b009      	add	sp, #36	; 0x24
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	40013800 	.word	0x40013800
 80007fc:	40021000 	.word	0x40021000

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000804:	e7fe      	b.n	8000804 <NMI_Handler+0x4>

08000806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <HardFault_Handler+0x4>

0800080c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000824:	f000 f92a 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <TIM2_IRQHandler+0x14>)
 8000836:	0018      	movs	r0, r3
 8000838:	f001 fb92 	bl	8001f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	20000084 	.word	0x20000084

08000848 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	e00a      	b.n	8000870 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800085a:	e000      	b.n	800085e <_read+0x16>
 800085c:	bf00      	nop
 800085e:	0001      	movs	r1, r0
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	60ba      	str	r2, [r7, #8]
 8000866:	b2ca      	uxtb	r2, r1
 8000868:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	3301      	adds	r3, #1
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	429a      	cmp	r2, r3
 8000876:	dbf0      	blt.n	800085a <_read+0x12>
  }

  return len;
 8000878:	687b      	ldr	r3, [r7, #4]
}
 800087a:	0018      	movs	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	b006      	add	sp, #24
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&huart1, (unsigned char *) ptr ,len, 1000);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	b29a      	uxth	r2, r3
 8000894:	23fa      	movs	r3, #250	; 0xfa
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	68b9      	ldr	r1, [r7, #8]
 800089a:	4804      	ldr	r0, [pc, #16]	; (80008ac <_write+0x28>)
 800089c:	f001 fed6 	bl	800264c <HAL_UART_Transmit>
  return len;
 80008a0:	687b      	ldr	r3, [r7, #4]
}
 80008a2:	0018      	movs	r0, r3
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b004      	add	sp, #16
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	200000c4 	.word	0x200000c4

080008b0 <_close>:

int _close(int file)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	425b      	negs	r3, r3
}
 80008bc:	0018      	movs	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	b002      	add	sp, #8
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	0192      	lsls	r2, r2, #6
 80008d4:	605a      	str	r2, [r3, #4]
  return 0;
 80008d6:	2300      	movs	r3, #0
}
 80008d8:	0018      	movs	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	b002      	add	sp, #8
 80008de:	bd80      	pop	{r7, pc}

080008e0 <_isatty>:

int _isatty(int file)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008e8:	2301      	movs	r3, #1
}
 80008ea:	0018      	movs	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b002      	add	sp, #8
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b084      	sub	sp, #16
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	60f8      	str	r0, [r7, #12]
 80008fa:	60b9      	str	r1, [r7, #8]
 80008fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008fe:	2300      	movs	r3, #0
}
 8000900:	0018      	movs	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	b004      	add	sp, #16
 8000906:	bd80      	pop	{r7, pc}

08000908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000910:	4a14      	ldr	r2, [pc, #80]	; (8000964 <_sbrk+0x5c>)
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <_sbrk+0x60>)
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d102      	bne.n	800092a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <_sbrk+0x64>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <_sbrk+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	18d3      	adds	r3, r2, r3
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	429a      	cmp	r2, r3
 8000936:	d207      	bcs.n	8000948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000938:	f002 fe42 	bl	80035c0 <__errno>
 800093c:	0003      	movs	r3, r0
 800093e:	220c      	movs	r2, #12
 8000940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000942:	2301      	movs	r3, #1
 8000944:	425b      	negs	r3, r3
 8000946:	e009      	b.n	800095c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800094e:	4b07      	ldr	r3, [pc, #28]	; (800096c <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	18d2      	adds	r2, r2, r3
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <_sbrk+0x64>)
 8000958:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	b006      	add	sp, #24
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20002000 	.word	0x20002000
 8000968:	00000400 	.word	0x00000400
 800096c:	2000014c 	.word	0x2000014c
 8000970:	200002a0 	.word	0x200002a0

08000974 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000982:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000984:	f7ff fff6 	bl	8000974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <LoopForever+0x6>)
  ldr r1, =_edata
 800098a:	490d      	ldr	r1, [pc, #52]	; (80009c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800098c:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <LoopForever+0xe>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a0:	4c0a      	ldr	r4, [pc, #40]	; (80009cc <LoopForever+0x16>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ae:	f002 fe0d 	bl	80035cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b2:	f7ff fd87 	bl	80004c4 <main>

080009b6 <LoopForever>:

LoopForever:
    b LoopForever
 80009b6:	e7fe      	b.n	80009b6 <LoopForever>
  ldr   r0, =_estack
 80009b8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009c4:	08003b7c 	.word	0x08003b7c
  ldr r2, =_sbss
 80009c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80009cc:	200002a0 	.word	0x200002a0

080009d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC1_COMP_IRQHandler>
	...

080009d4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_Init+0x3c>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_Init+0x3c>)
 80009e6:	2140      	movs	r1, #64	; 0x40
 80009e8:	430a      	orrs	r2, r1
 80009ea:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009ec:	2000      	movs	r0, #0
 80009ee:	f000 f811 	bl	8000a14 <HAL_InitTick>
 80009f2:	1e03      	subs	r3, r0, #0
 80009f4:	d003      	beq.n	80009fe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
 80009fc:	e001      	b.n	8000a02 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009fe:	f7ff fe89 	bl	8000714 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781b      	ldrb	r3, [r3, #0]
}
 8000a06:	0018      	movs	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b002      	add	sp, #8
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	40022000 	.word	0x40022000

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <HAL_InitTick+0x5c>)
 8000a1e:	681c      	ldr	r4, [r3, #0]
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_InitTick+0x60>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	0019      	movs	r1, r3
 8000a26:	23fa      	movs	r3, #250	; 0xfa
 8000a28:	0098      	lsls	r0, r3, #2
 8000a2a:	f7ff fb6d 	bl	8000108 <__udivsi3>
 8000a2e:	0003      	movs	r3, r0
 8000a30:	0019      	movs	r1, r3
 8000a32:	0020      	movs	r0, r4
 8000a34:	f7ff fb68 	bl	8000108 <__udivsi3>
 8000a38:	0003      	movs	r3, r0
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 f90b 	bl	8000c56 <HAL_SYSTICK_Config>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a44:	2301      	movs	r3, #1
 8000a46:	e00f      	b.n	8000a68 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b03      	cmp	r3, #3
 8000a4c:	d80b      	bhi.n	8000a66 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	2301      	movs	r3, #1
 8000a52:	425b      	negs	r3, r3
 8000a54:	2200      	movs	r2, #0
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 f8d8 	bl	8000c0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_InitTick+0x64>)
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e000      	b.n	8000a68 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	0018      	movs	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b003      	add	sp, #12
 8000a6e:	bd90      	pop	{r4, r7, pc}
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20000004 	.word	0x20000004

08000a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_IncTick+0x1c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	001a      	movs	r2, r3
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_IncTick+0x20>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	18d2      	adds	r2, r2, r3
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <HAL_IncTick+0x20>)
 8000a8e:	601a      	str	r2, [r3, #0]
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000150 	.word	0x20000150

08000aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b02      	ldr	r3, [pc, #8]	; (8000ab0 <HAL_GetTick+0x10>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	20000150 	.word	0x20000150

08000ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	0002      	movs	r2, r0
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ac0:	1dfb      	adds	r3, r7, #7
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ac6:	d809      	bhi.n	8000adc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac8:	1dfb      	adds	r3, r7, #7
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	001a      	movs	r2, r3
 8000ace:	231f      	movs	r3, #31
 8000ad0:	401a      	ands	r2, r3
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_EnableIRQ+0x30>)
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4091      	lsls	r1, r2
 8000ad8:	000a      	movs	r2, r1
 8000ada:	601a      	str	r2, [r3, #0]
  }
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b002      	add	sp, #8
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	e000e100 	.word	0xe000e100

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	0002      	movs	r2, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b7f      	cmp	r3, #127	; 0x7f
 8000afc:	d828      	bhi.n	8000b50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000afe:	4a2f      	ldr	r2, [pc, #188]	; (8000bbc <__NVIC_SetPriority+0xd4>)
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b25b      	sxtb	r3, r3
 8000b06:	089b      	lsrs	r3, r3, #2
 8000b08:	33c0      	adds	r3, #192	; 0xc0
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	589b      	ldr	r3, [r3, r2]
 8000b0e:	1dfa      	adds	r2, r7, #7
 8000b10:	7812      	ldrb	r2, [r2, #0]
 8000b12:	0011      	movs	r1, r2
 8000b14:	2203      	movs	r2, #3
 8000b16:	400a      	ands	r2, r1
 8000b18:	00d2      	lsls	r2, r2, #3
 8000b1a:	21ff      	movs	r1, #255	; 0xff
 8000b1c:	4091      	lsls	r1, r2
 8000b1e:	000a      	movs	r2, r1
 8000b20:	43d2      	mvns	r2, r2
 8000b22:	401a      	ands	r2, r3
 8000b24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	019b      	lsls	r3, r3, #6
 8000b2a:	22ff      	movs	r2, #255	; 0xff
 8000b2c:	401a      	ands	r2, r3
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	0018      	movs	r0, r3
 8000b34:	2303      	movs	r3, #3
 8000b36:	4003      	ands	r3, r0
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b3c:	481f      	ldr	r0, [pc, #124]	; (8000bbc <__NVIC_SetPriority+0xd4>)
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	b25b      	sxtb	r3, r3
 8000b44:	089b      	lsrs	r3, r3, #2
 8000b46:	430a      	orrs	r2, r1
 8000b48:	33c0      	adds	r3, #192	; 0xc0
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b4e:	e031      	b.n	8000bb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b50:	4a1b      	ldr	r2, [pc, #108]	; (8000bc0 <__NVIC_SetPriority+0xd8>)
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	0019      	movs	r1, r3
 8000b58:	230f      	movs	r3, #15
 8000b5a:	400b      	ands	r3, r1
 8000b5c:	3b08      	subs	r3, #8
 8000b5e:	089b      	lsrs	r3, r3, #2
 8000b60:	3306      	adds	r3, #6
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	18d3      	adds	r3, r2, r3
 8000b66:	3304      	adds	r3, #4
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	1dfa      	adds	r2, r7, #7
 8000b6c:	7812      	ldrb	r2, [r2, #0]
 8000b6e:	0011      	movs	r1, r2
 8000b70:	2203      	movs	r2, #3
 8000b72:	400a      	ands	r2, r1
 8000b74:	00d2      	lsls	r2, r2, #3
 8000b76:	21ff      	movs	r1, #255	; 0xff
 8000b78:	4091      	lsls	r1, r2
 8000b7a:	000a      	movs	r2, r1
 8000b7c:	43d2      	mvns	r2, r2
 8000b7e:	401a      	ands	r2, r3
 8000b80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	019b      	lsls	r3, r3, #6
 8000b86:	22ff      	movs	r2, #255	; 0xff
 8000b88:	401a      	ands	r2, r3
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	0018      	movs	r0, r3
 8000b90:	2303      	movs	r3, #3
 8000b92:	4003      	ands	r3, r0
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b98:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <__NVIC_SetPriority+0xd8>)
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	001c      	movs	r4, r3
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	4023      	ands	r3, r4
 8000ba4:	3b08      	subs	r3, #8
 8000ba6:	089b      	lsrs	r3, r3, #2
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	3306      	adds	r3, #6
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	18c3      	adds	r3, r0, r3
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	601a      	str	r2, [r3, #0]
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b003      	add	sp, #12
 8000bba:	bd90      	pop	{r4, r7, pc}
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	1e5a      	subs	r2, r3, #1
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	045b      	lsls	r3, r3, #17
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d301      	bcc.n	8000bdc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e010      	b.n	8000bfe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <SysTick_Config+0x44>)
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	3a01      	subs	r2, #1
 8000be2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be4:	2301      	movs	r3, #1
 8000be6:	425b      	negs	r3, r3
 8000be8:	2103      	movs	r1, #3
 8000bea:	0018      	movs	r0, r3
 8000bec:	f7ff ff7c 	bl	8000ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <SysTick_Config+0x44>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf6:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <SysTick_Config+0x44>)
 8000bf8:	2207      	movs	r2, #7
 8000bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	0018      	movs	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b002      	add	sp, #8
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	e000e010 	.word	0xe000e010

08000c0c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
 8000c16:	210f      	movs	r1, #15
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	1c02      	adds	r2, r0, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	0011      	movs	r1, r2
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f7ff ff5d 	bl	8000ae8 <__NVIC_SetPriority>
}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b004      	add	sp, #16
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	0002      	movs	r2, r0
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff ff33 	bl	8000ab4 <__NVIC_EnableIRQ>
}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b002      	add	sp, #8
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff ffaf 	bl	8000bc4 <SysTick_Config>
 8000c66:	0003      	movs	r3, r0
}
 8000c68:	0018      	movs	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b002      	add	sp, #8
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c86:	e14f      	b.n	8000f28 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	4091      	lsls	r1, r2
 8000c92:	000a      	movs	r2, r1
 8000c94:	4013      	ands	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d100      	bne.n	8000ca0 <HAL_GPIO_Init+0x30>
 8000c9e:	e140      	b.n	8000f22 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d005      	beq.n	8000cb8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d130      	bne.n	8000d1a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	409a      	lsls	r2, r3
 8000cc6:	0013      	movs	r3, r2
 8000cc8:	43da      	mvns	r2, r3
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	409a      	lsls	r2, r3
 8000cda:	0013      	movs	r3, r2
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cee:	2201      	movs	r2, #1
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
 8000cf4:	0013      	movs	r3, r2
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	091b      	lsrs	r3, r3, #4
 8000d04:	2201      	movs	r2, #1
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2203      	movs	r2, #3
 8000d20:	4013      	ands	r3, r2
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	d017      	beq.n	8000d56 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	2203      	movs	r2, #3
 8000d32:	409a      	lsls	r2, r3
 8000d34:	0013      	movs	r3, r2
 8000d36:	43da      	mvns	r2, r3
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d123      	bne.n	8000daa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	08da      	lsrs	r2, r3, #3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3208      	adds	r2, #8
 8000d6a:	0092      	lsls	r2, r2, #2
 8000d6c:	58d3      	ldr	r3, [r2, r3]
 8000d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	2207      	movs	r2, #7
 8000d74:	4013      	ands	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	220f      	movs	r2, #15
 8000d7a:	409a      	lsls	r2, r3
 8000d7c:	0013      	movs	r3, r2
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	691a      	ldr	r2, [r3, #16]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	2107      	movs	r1, #7
 8000d8e:	400b      	ands	r3, r1
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	409a      	lsls	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	08da      	lsrs	r2, r3, #3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3208      	adds	r2, #8
 8000da4:	0092      	lsls	r2, r2, #2
 8000da6:	6939      	ldr	r1, [r7, #16]
 8000da8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	2203      	movs	r2, #3
 8000db6:	409a      	lsls	r2, r3
 8000db8:	0013      	movs	r3, r2
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	401a      	ands	r2, r3
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	0013      	movs	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	23c0      	movs	r3, #192	; 0xc0
 8000de4:	029b      	lsls	r3, r3, #10
 8000de6:	4013      	ands	r3, r2
 8000de8:	d100      	bne.n	8000dec <HAL_GPIO_Init+0x17c>
 8000dea:	e09a      	b.n	8000f22 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dec:	4b54      	ldr	r3, [pc, #336]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000df0:	4b53      	ldr	r3, [pc, #332]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000df2:	2101      	movs	r1, #1
 8000df4:	430a      	orrs	r2, r1
 8000df6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000df8:	4a52      	ldr	r2, [pc, #328]	; (8000f44 <HAL_GPIO_Init+0x2d4>)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	3302      	adds	r3, #2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	589b      	ldr	r3, [r3, r2]
 8000e04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	2203      	movs	r2, #3
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	220f      	movs	r2, #15
 8000e10:	409a      	lsls	r2, r3
 8000e12:	0013      	movs	r3, r2
 8000e14:	43da      	mvns	r2, r3
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	23a0      	movs	r3, #160	; 0xa0
 8000e20:	05db      	lsls	r3, r3, #23
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d019      	beq.n	8000e5a <HAL_GPIO_Init+0x1ea>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a47      	ldr	r2, [pc, #284]	; (8000f48 <HAL_GPIO_Init+0x2d8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d013      	beq.n	8000e56 <HAL_GPIO_Init+0x1e6>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a46      	ldr	r2, [pc, #280]	; (8000f4c <HAL_GPIO_Init+0x2dc>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00d      	beq.n	8000e52 <HAL_GPIO_Init+0x1e2>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a45      	ldr	r2, [pc, #276]	; (8000f50 <HAL_GPIO_Init+0x2e0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x1de>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a44      	ldr	r2, [pc, #272]	; (8000f54 <HAL_GPIO_Init+0x2e4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_GPIO_Init+0x1da>
 8000e46:	2305      	movs	r3, #5
 8000e48:	e008      	b.n	8000e5c <HAL_GPIO_Init+0x1ec>
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	e006      	b.n	8000e5c <HAL_GPIO_Init+0x1ec>
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e004      	b.n	8000e5c <HAL_GPIO_Init+0x1ec>
 8000e52:	2302      	movs	r3, #2
 8000e54:	e002      	b.n	8000e5c <HAL_GPIO_Init+0x1ec>
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <HAL_GPIO_Init+0x1ec>
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	2103      	movs	r1, #3
 8000e60:	400a      	ands	r2, r1
 8000e62:	0092      	lsls	r2, r2, #2
 8000e64:	4093      	lsls	r3, r2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e6c:	4935      	ldr	r1, [pc, #212]	; (8000f44 <HAL_GPIO_Init+0x2d4>)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	089b      	lsrs	r3, r3, #2
 8000e72:	3302      	adds	r3, #2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e7a:	4b37      	ldr	r3, [pc, #220]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	43da      	mvns	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	035b      	lsls	r3, r3, #13
 8000e92:	4013      	ands	r3, r2
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	43da      	mvns	r2, r3
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	039b      	lsls	r3, r3, #14
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ec8:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000ece:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	029b      	lsls	r3, r3, #10
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	43da      	mvns	r2, r3
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	025b      	lsls	r3, r3, #9
 8000f10:	4013      	ands	r3, r2
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3301      	adds	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	40da      	lsrs	r2, r3
 8000f30:	1e13      	subs	r3, r2, #0
 8000f32:	d000      	beq.n	8000f36 <HAL_GPIO_Init+0x2c6>
 8000f34:	e6a8      	b.n	8000c88 <HAL_GPIO_Init+0x18>
  }
}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b006      	add	sp, #24
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010000 	.word	0x40010000
 8000f48:	50000400 	.word	0x50000400
 8000f4c:	50000800 	.word	0x50000800
 8000f50:	50000c00 	.word	0x50000c00
 8000f54:	50001c00 	.word	0x50001c00
 8000f58:	40010400 	.word	0x40010400

08000f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f5c:	b5b0      	push	{r4, r5, r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d102      	bne.n	8000f70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	f000 fbaf 	bl	80016ce <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f70:	4bcf      	ldr	r3, [pc, #828]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	220c      	movs	r2, #12
 8000f76:	4013      	ands	r3, r2
 8000f78:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f7a:	4bcd      	ldr	r3, [pc, #820]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	025b      	lsls	r3, r3, #9
 8000f82:	4013      	ands	r3, r2
 8000f84:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d100      	bne.n	8000f92 <HAL_RCC_OscConfig+0x36>
 8000f90:	e07e      	b.n	8001090 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f92:	6a3b      	ldr	r3, [r7, #32]
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d007      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	2b0c      	cmp	r3, #12
 8000f9c:	d112      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x68>
 8000f9e:	69fa      	ldr	r2, [r7, #28]
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	025b      	lsls	r3, r3, #9
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d10d      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa8:	4bc1      	ldr	r3, [pc, #772]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	029b      	lsls	r3, r3, #10
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d100      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x5a>
 8000fb4:	e06b      	b.n	800108e <HAL_RCC_OscConfig+0x132>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d167      	bne.n	800108e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	f000 fb85 	bl	80016ce <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	025b      	lsls	r3, r3, #9
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d107      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x84>
 8000fd0:	4bb7      	ldr	r3, [pc, #732]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4bb6      	ldr	r3, [pc, #728]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	0249      	lsls	r1, r1, #9
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e027      	b.n	8001030 <HAL_RCC_OscConfig+0xd4>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	23a0      	movs	r3, #160	; 0xa0
 8000fe6:	02db      	lsls	r3, r3, #11
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d10e      	bne.n	800100a <HAL_RCC_OscConfig+0xae>
 8000fec:	4bb0      	ldr	r3, [pc, #704]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4baf      	ldr	r3, [pc, #700]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	02c9      	lsls	r1, r1, #11
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	4bad      	ldr	r3, [pc, #692]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4bac      	ldr	r3, [pc, #688]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8001000:	2180      	movs	r1, #128	; 0x80
 8001002:	0249      	lsls	r1, r1, #9
 8001004:	430a      	orrs	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	e012      	b.n	8001030 <HAL_RCC_OscConfig+0xd4>
 800100a:	4ba9      	ldr	r3, [pc, #676]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4ba8      	ldr	r3, [pc, #672]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8001010:	49a8      	ldr	r1, [pc, #672]	; (80012b4 <HAL_RCC_OscConfig+0x358>)
 8001012:	400a      	ands	r2, r1
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	4ba6      	ldr	r3, [pc, #664]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	025b      	lsls	r3, r3, #9
 800101e:	4013      	ands	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4ba2      	ldr	r3, [pc, #648]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4ba1      	ldr	r3, [pc, #644]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 800102a:	49a3      	ldr	r1, [pc, #652]	; (80012b8 <HAL_RCC_OscConfig+0x35c>)
 800102c:	400a      	ands	r2, r1
 800102e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d015      	beq.n	8001064 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001038:	f7ff fd32 	bl	8000aa0 <HAL_GetTick>
 800103c:	0003      	movs	r3, r0
 800103e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001040:	e009      	b.n	8001056 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001042:	f7ff fd2d 	bl	8000aa0 <HAL_GetTick>
 8001046:	0002      	movs	r2, r0
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b64      	cmp	r3, #100	; 0x64
 800104e:	d902      	bls.n	8001056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	f000 fb3c 	bl	80016ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001056:	4b96      	ldr	r3, [pc, #600]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	029b      	lsls	r3, r3, #10
 800105e:	4013      	ands	r3, r2
 8001060:	d0ef      	beq.n	8001042 <HAL_RCC_OscConfig+0xe6>
 8001062:	e015      	b.n	8001090 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fd1c 	bl	8000aa0 <HAL_GetTick>
 8001068:	0003      	movs	r3, r0
 800106a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800106e:	f7ff fd17 	bl	8000aa0 <HAL_GetTick>
 8001072:	0002      	movs	r2, r0
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b64      	cmp	r3, #100	; 0x64
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e326      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001080:	4b8b      	ldr	r3, [pc, #556]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	029b      	lsls	r3, r3, #10
 8001088:	4013      	ands	r3, r2
 800108a:	d1f0      	bne.n	800106e <HAL_RCC_OscConfig+0x112>
 800108c:	e000      	b.n	8001090 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2202      	movs	r2, #2
 8001096:	4013      	ands	r3, r2
 8001098:	d100      	bne.n	800109c <HAL_RCC_OscConfig+0x140>
 800109a:	e08b      	b.n	80011b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010a2:	6a3b      	ldr	r3, [r7, #32]
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d005      	beq.n	80010b4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010a8:	6a3b      	ldr	r3, [r7, #32]
 80010aa:	2b0c      	cmp	r3, #12
 80010ac:	d13e      	bne.n	800112c <HAL_RCC_OscConfig+0x1d0>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d13b      	bne.n	800112c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80010b4:	4b7e      	ldr	r3, [pc, #504]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2204      	movs	r2, #4
 80010ba:	4013      	ands	r3, r2
 80010bc:	d004      	beq.n	80010c8 <HAL_RCC_OscConfig+0x16c>
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e302      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c8:	4b79      	ldr	r3, [pc, #484]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	4a7b      	ldr	r2, [pc, #492]	; (80012bc <HAL_RCC_OscConfig+0x360>)
 80010ce:	4013      	ands	r3, r2
 80010d0:	0019      	movs	r1, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	021a      	lsls	r2, r3, #8
 80010d8:	4b75      	ldr	r3, [pc, #468]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 80010da:	430a      	orrs	r2, r1
 80010dc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010de:	4b74      	ldr	r3, [pc, #464]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2209      	movs	r2, #9
 80010e4:	4393      	bics	r3, r2
 80010e6:	0019      	movs	r1, r3
 80010e8:	4b71      	ldr	r3, [pc, #452]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010f0:	f000 fc40 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 80010f4:	0001      	movs	r1, r0
 80010f6:	4b6e      	ldr	r3, [pc, #440]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	220f      	movs	r2, #15
 80010fe:	4013      	ands	r3, r2
 8001100:	4a6f      	ldr	r2, [pc, #444]	; (80012c0 <HAL_RCC_OscConfig+0x364>)
 8001102:	5cd3      	ldrb	r3, [r2, r3]
 8001104:	000a      	movs	r2, r1
 8001106:	40da      	lsrs	r2, r3
 8001108:	4b6e      	ldr	r3, [pc, #440]	; (80012c4 <HAL_RCC_OscConfig+0x368>)
 800110a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800110c:	4b6e      	ldr	r3, [pc, #440]	; (80012c8 <HAL_RCC_OscConfig+0x36c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2513      	movs	r5, #19
 8001112:	197c      	adds	r4, r7, r5
 8001114:	0018      	movs	r0, r3
 8001116:	f7ff fc7d 	bl	8000a14 <HAL_InitTick>
 800111a:	0003      	movs	r3, r0
 800111c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800111e:	197b      	adds	r3, r7, r5
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d046      	beq.n	80011b4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001126:	197b      	adds	r3, r7, r5
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	e2d0      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d027      	beq.n	8001182 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001132:	4b5f      	ldr	r3, [pc, #380]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2209      	movs	r2, #9
 8001138:	4393      	bics	r3, r2
 800113a:	0019      	movs	r1, r3
 800113c:	4b5c      	ldr	r3, [pc, #368]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	430a      	orrs	r2, r1
 8001142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff fcac 	bl	8000aa0 <HAL_GetTick>
 8001148:	0003      	movs	r3, r0
 800114a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800114e:	f7ff fca7 	bl	8000aa0 <HAL_GetTick>
 8001152:	0002      	movs	r2, r0
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e2b6      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001160:	4b53      	ldr	r3, [pc, #332]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2204      	movs	r2, #4
 8001166:	4013      	ands	r3, r2
 8001168:	d0f1      	beq.n	800114e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116a:	4b51      	ldr	r3, [pc, #324]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	4a53      	ldr	r2, [pc, #332]	; (80012bc <HAL_RCC_OscConfig+0x360>)
 8001170:	4013      	ands	r3, r2
 8001172:	0019      	movs	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	021a      	lsls	r2, r3, #8
 800117a:	4b4d      	ldr	r3, [pc, #308]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 800117c:	430a      	orrs	r2, r1
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	e018      	b.n	80011b4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001182:	4b4b      	ldr	r3, [pc, #300]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4b4a      	ldr	r3, [pc, #296]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8001188:	2101      	movs	r1, #1
 800118a:	438a      	bics	r2, r1
 800118c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118e:	f7ff fc87 	bl	8000aa0 <HAL_GetTick>
 8001192:	0003      	movs	r3, r0
 8001194:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001198:	f7ff fc82 	bl	8000aa0 <HAL_GetTick>
 800119c:	0002      	movs	r2, r0
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e291      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011aa:	4b41      	ldr	r3, [pc, #260]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2204      	movs	r2, #4
 80011b0:	4013      	ands	r3, r2
 80011b2:	d1f1      	bne.n	8001198 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2210      	movs	r2, #16
 80011ba:	4013      	ands	r3, r2
 80011bc:	d100      	bne.n	80011c0 <HAL_RCC_OscConfig+0x264>
 80011be:	e0a1      	b.n	8001304 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d140      	bne.n	8001248 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011c6:	4b3a      	ldr	r3, [pc, #232]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4013      	ands	r3, r2
 80011d0:	d005      	beq.n	80011de <HAL_RCC_OscConfig+0x282>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e277      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011de:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4a3a      	ldr	r2, [pc, #232]	; (80012cc <HAL_RCC_OscConfig+0x370>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	0019      	movs	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ec:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 80011ee:	430a      	orrs	r2, r1
 80011f0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011f2:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	0a19      	lsrs	r1, r3, #8
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	061a      	lsls	r2, r3, #24
 8001200:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8001202:	430a      	orrs	r2, r1
 8001204:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120a:	0b5b      	lsrs	r3, r3, #13
 800120c:	3301      	adds	r3, #1
 800120e:	2280      	movs	r2, #128	; 0x80
 8001210:	0212      	lsls	r2, r2, #8
 8001212:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001214:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	210f      	movs	r1, #15
 800121c:	400b      	ands	r3, r1
 800121e:	4928      	ldr	r1, [pc, #160]	; (80012c0 <HAL_RCC_OscConfig+0x364>)
 8001220:	5ccb      	ldrb	r3, [r1, r3]
 8001222:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001224:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <HAL_RCC_OscConfig+0x368>)
 8001226:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001228:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <HAL_RCC_OscConfig+0x36c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2513      	movs	r5, #19
 800122e:	197c      	adds	r4, r7, r5
 8001230:	0018      	movs	r0, r3
 8001232:	f7ff fbef 	bl	8000a14 <HAL_InitTick>
 8001236:	0003      	movs	r3, r0
 8001238:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800123a:	197b      	adds	r3, r7, r5
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d060      	beq.n	8001304 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001242:	197b      	adds	r3, r7, r5
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	e242      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d03f      	beq.n	80012d0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	0049      	lsls	r1, r1, #1
 800125a:	430a      	orrs	r2, r1
 800125c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125e:	f7ff fc1f 	bl	8000aa0 <HAL_GetTick>
 8001262:	0003      	movs	r3, r0
 8001264:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001268:	f7ff fc1a 	bl	8000aa0 <HAL_GetTick>
 800126c:	0002      	movs	r2, r0
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e229      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4013      	ands	r3, r2
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	4a10      	ldr	r2, [pc, #64]	; (80012cc <HAL_RCC_OscConfig+0x370>)
 800128c:	4013      	ands	r3, r2
 800128e:	0019      	movs	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 8001296:	430a      	orrs	r2, r1
 8001298:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800129a:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	0a19      	lsrs	r1, r3, #8
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	061a      	lsls	r2, r3, #24
 80012a8:	4b01      	ldr	r3, [pc, #4]	; (80012b0 <HAL_RCC_OscConfig+0x354>)
 80012aa:	430a      	orrs	r2, r1
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	e029      	b.n	8001304 <HAL_RCC_OscConfig+0x3a8>
 80012b0:	40021000 	.word	0x40021000
 80012b4:	fffeffff 	.word	0xfffeffff
 80012b8:	fffbffff 	.word	0xfffbffff
 80012bc:	ffffe0ff 	.word	0xffffe0ff
 80012c0:	08003b00 	.word	0x08003b00
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000004 	.word	0x20000004
 80012cc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012d0:	4bbd      	ldr	r3, [pc, #756]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4bbc      	ldr	r3, [pc, #752]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 80012d6:	49bd      	ldr	r1, [pc, #756]	; (80015cc <HAL_RCC_OscConfig+0x670>)
 80012d8:	400a      	ands	r2, r1
 80012da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fbe0 	bl	8000aa0 <HAL_GetTick>
 80012e0:	0003      	movs	r3, r0
 80012e2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012e6:	f7ff fbdb 	bl	8000aa0 <HAL_GetTick>
 80012ea:	0002      	movs	r2, r0
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e1ea      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012f8:	4bb3      	ldr	r3, [pc, #716]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4013      	ands	r3, r2
 8001302:	d1f0      	bne.n	80012e6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2208      	movs	r2, #8
 800130a:	4013      	ands	r3, r2
 800130c:	d036      	beq.n	800137c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d019      	beq.n	800134a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001316:	4bac      	ldr	r3, [pc, #688]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 8001318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800131a:	4bab      	ldr	r3, [pc, #684]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 800131c:	2101      	movs	r1, #1
 800131e:	430a      	orrs	r2, r1
 8001320:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001322:	f7ff fbbd 	bl	8000aa0 <HAL_GetTick>
 8001326:	0003      	movs	r3, r0
 8001328:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132c:	f7ff fbb8 	bl	8000aa0 <HAL_GetTick>
 8001330:	0002      	movs	r2, r0
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e1c7      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800133e:	4ba2      	ldr	r3, [pc, #648]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 8001340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001342:	2202      	movs	r2, #2
 8001344:	4013      	ands	r3, r2
 8001346:	d0f1      	beq.n	800132c <HAL_RCC_OscConfig+0x3d0>
 8001348:	e018      	b.n	800137c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800134a:	4b9f      	ldr	r3, [pc, #636]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 800134c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800134e:	4b9e      	ldr	r3, [pc, #632]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 8001350:	2101      	movs	r1, #1
 8001352:	438a      	bics	r2, r1
 8001354:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001356:	f7ff fba3 	bl	8000aa0 <HAL_GetTick>
 800135a:	0003      	movs	r3, r0
 800135c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001360:	f7ff fb9e 	bl	8000aa0 <HAL_GetTick>
 8001364:	0002      	movs	r2, r0
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e1ad      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001372:	4b95      	ldr	r3, [pc, #596]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 8001374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001376:	2202      	movs	r2, #2
 8001378:	4013      	ands	r3, r2
 800137a:	d1f1      	bne.n	8001360 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2204      	movs	r2, #4
 8001382:	4013      	ands	r3, r2
 8001384:	d100      	bne.n	8001388 <HAL_RCC_OscConfig+0x42c>
 8001386:	e0ae      	b.n	80014e6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001388:	2027      	movs	r0, #39	; 0x27
 800138a:	183b      	adds	r3, r7, r0
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001390:	4b8d      	ldr	r3, [pc, #564]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 8001392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	055b      	lsls	r3, r3, #21
 8001398:	4013      	ands	r3, r2
 800139a:	d109      	bne.n	80013b0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800139c:	4b8a      	ldr	r3, [pc, #552]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 800139e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013a0:	4b89      	ldr	r3, [pc, #548]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 80013a2:	2180      	movs	r1, #128	; 0x80
 80013a4:	0549      	lsls	r1, r1, #21
 80013a6:	430a      	orrs	r2, r1
 80013a8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80013aa:	183b      	adds	r3, r7, r0
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	4b87      	ldr	r3, [pc, #540]	; (80015d0 <HAL_RCC_OscConfig+0x674>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4013      	ands	r3, r2
 80013ba:	d11a      	bne.n	80013f2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013bc:	4b84      	ldr	r3, [pc, #528]	; (80015d0 <HAL_RCC_OscConfig+0x674>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b83      	ldr	r3, [pc, #524]	; (80015d0 <HAL_RCC_OscConfig+0x674>)
 80013c2:	2180      	movs	r1, #128	; 0x80
 80013c4:	0049      	lsls	r1, r1, #1
 80013c6:	430a      	orrs	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ca:	f7ff fb69 	bl	8000aa0 <HAL_GetTick>
 80013ce:	0003      	movs	r3, r0
 80013d0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d4:	f7ff fb64 	bl	8000aa0 <HAL_GetTick>
 80013d8:	0002      	movs	r2, r0
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b64      	cmp	r3, #100	; 0x64
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e173      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e6:	4b7a      	ldr	r3, [pc, #488]	; (80015d0 <HAL_RCC_OscConfig+0x674>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4013      	ands	r3, r2
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d107      	bne.n	800140e <HAL_RCC_OscConfig+0x4b2>
 80013fe:	4b72      	ldr	r3, [pc, #456]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 8001400:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001402:	4b71      	ldr	r3, [pc, #452]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	0049      	lsls	r1, r1, #1
 8001408:	430a      	orrs	r2, r1
 800140a:	651a      	str	r2, [r3, #80]	; 0x50
 800140c:	e031      	b.n	8001472 <HAL_RCC_OscConfig+0x516>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x4d4>
 8001416:	4b6c      	ldr	r3, [pc, #432]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 8001418:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800141a:	4b6b      	ldr	r3, [pc, #428]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 800141c:	496b      	ldr	r1, [pc, #428]	; (80015cc <HAL_RCC_OscConfig+0x670>)
 800141e:	400a      	ands	r2, r1
 8001420:	651a      	str	r2, [r3, #80]	; 0x50
 8001422:	4b69      	ldr	r3, [pc, #420]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 8001424:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001426:	4b68      	ldr	r3, [pc, #416]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 8001428:	496a      	ldr	r1, [pc, #424]	; (80015d4 <HAL_RCC_OscConfig+0x678>)
 800142a:	400a      	ands	r2, r1
 800142c:	651a      	str	r2, [r3, #80]	; 0x50
 800142e:	e020      	b.n	8001472 <HAL_RCC_OscConfig+0x516>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	23a0      	movs	r3, #160	; 0xa0
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	429a      	cmp	r2, r3
 800143a:	d10e      	bne.n	800145a <HAL_RCC_OscConfig+0x4fe>
 800143c:	4b62      	ldr	r3, [pc, #392]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 800143e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001440:	4b61      	ldr	r3, [pc, #388]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 8001442:	2180      	movs	r1, #128	; 0x80
 8001444:	00c9      	lsls	r1, r1, #3
 8001446:	430a      	orrs	r2, r1
 8001448:	651a      	str	r2, [r3, #80]	; 0x50
 800144a:	4b5f      	ldr	r3, [pc, #380]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 800144c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800144e:	4b5e      	ldr	r3, [pc, #376]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	0049      	lsls	r1, r1, #1
 8001454:	430a      	orrs	r2, r1
 8001456:	651a      	str	r2, [r3, #80]	; 0x50
 8001458:	e00b      	b.n	8001472 <HAL_RCC_OscConfig+0x516>
 800145a:	4b5b      	ldr	r3, [pc, #364]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 800145c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800145e:	4b5a      	ldr	r3, [pc, #360]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 8001460:	495a      	ldr	r1, [pc, #360]	; (80015cc <HAL_RCC_OscConfig+0x670>)
 8001462:	400a      	ands	r2, r1
 8001464:	651a      	str	r2, [r3, #80]	; 0x50
 8001466:	4b58      	ldr	r3, [pc, #352]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 8001468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800146a:	4b57      	ldr	r3, [pc, #348]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 800146c:	4959      	ldr	r1, [pc, #356]	; (80015d4 <HAL_RCC_OscConfig+0x678>)
 800146e:	400a      	ands	r2, r1
 8001470:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d015      	beq.n	80014a6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff fb11 	bl	8000aa0 <HAL_GetTick>
 800147e:	0003      	movs	r3, r0
 8001480:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001482:	e009      	b.n	8001498 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001484:	f7ff fb0c 	bl	8000aa0 <HAL_GetTick>
 8001488:	0002      	movs	r2, r0
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	4a52      	ldr	r2, [pc, #328]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e11a      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001498:	4b4b      	ldr	r3, [pc, #300]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 800149a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4013      	ands	r3, r2
 80014a2:	d0ef      	beq.n	8001484 <HAL_RCC_OscConfig+0x528>
 80014a4:	e014      	b.n	80014d0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a6:	f7ff fafb 	bl	8000aa0 <HAL_GetTick>
 80014aa:	0003      	movs	r3, r0
 80014ac:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014ae:	e009      	b.n	80014c4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b0:	f7ff faf6 	bl	8000aa0 <HAL_GetTick>
 80014b4:	0002      	movs	r2, r0
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	4a47      	ldr	r2, [pc, #284]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e104      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014c4:	4b40      	ldr	r3, [pc, #256]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 80014c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4013      	ands	r3, r2
 80014ce:	d1ef      	bne.n	80014b0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014d0:	2327      	movs	r3, #39	; 0x27
 80014d2:	18fb      	adds	r3, r7, r3
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d105      	bne.n	80014e6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014da:	4b3b      	ldr	r3, [pc, #236]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 80014dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014de:	4b3a      	ldr	r3, [pc, #232]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 80014e0:	493e      	ldr	r1, [pc, #248]	; (80015dc <HAL_RCC_OscConfig+0x680>)
 80014e2:	400a      	ands	r2, r1
 80014e4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2220      	movs	r2, #32
 80014ec:	4013      	ands	r3, r2
 80014ee:	d049      	beq.n	8001584 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d026      	beq.n	8001546 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80014f8:	4b33      	ldr	r3, [pc, #204]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	4b32      	ldr	r3, [pc, #200]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 80014fe:	2101      	movs	r1, #1
 8001500:	430a      	orrs	r2, r1
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	4b30      	ldr	r3, [pc, #192]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 8001506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001508:	4b2f      	ldr	r3, [pc, #188]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 800150a:	2101      	movs	r1, #1
 800150c:	430a      	orrs	r2, r1
 800150e:	635a      	str	r2, [r3, #52]	; 0x34
 8001510:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <HAL_RCC_OscConfig+0x684>)
 8001512:	6a1a      	ldr	r2, [r3, #32]
 8001514:	4b32      	ldr	r3, [pc, #200]	; (80015e0 <HAL_RCC_OscConfig+0x684>)
 8001516:	2180      	movs	r1, #128	; 0x80
 8001518:	0189      	lsls	r1, r1, #6
 800151a:	430a      	orrs	r2, r1
 800151c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151e:	f7ff fabf 	bl	8000aa0 <HAL_GetTick>
 8001522:	0003      	movs	r3, r0
 8001524:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001528:	f7ff faba 	bl	8000aa0 <HAL_GetTick>
 800152c:	0002      	movs	r2, r0
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e0c9      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800153a:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2202      	movs	r2, #2
 8001540:	4013      	ands	r3, r2
 8001542:	d0f1      	beq.n	8001528 <HAL_RCC_OscConfig+0x5cc>
 8001544:	e01e      	b.n	8001584 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 800154c:	2101      	movs	r1, #1
 800154e:	438a      	bics	r2, r1
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <HAL_RCC_OscConfig+0x684>)
 8001554:	6a1a      	ldr	r2, [r3, #32]
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <HAL_RCC_OscConfig+0x684>)
 8001558:	4922      	ldr	r1, [pc, #136]	; (80015e4 <HAL_RCC_OscConfig+0x688>)
 800155a:	400a      	ands	r2, r1
 800155c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff fa9f 	bl	8000aa0 <HAL_GetTick>
 8001562:	0003      	movs	r3, r0
 8001564:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001568:	f7ff fa9a 	bl	8000aa0 <HAL_GetTick>
 800156c:	0002      	movs	r2, r0
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e0a9      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2202      	movs	r2, #2
 8001580:	4013      	ands	r3, r2
 8001582:	d1f1      	bne.n	8001568 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001588:	2b00      	cmp	r3, #0
 800158a:	d100      	bne.n	800158e <HAL_RCC_OscConfig+0x632>
 800158c:	e09e      	b.n	80016cc <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	2b0c      	cmp	r3, #12
 8001592:	d100      	bne.n	8001596 <HAL_RCC_OscConfig+0x63a>
 8001594:	e077      	b.n	8001686 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159a:	2b02      	cmp	r3, #2
 800159c:	d158      	bne.n	8001650 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_RCC_OscConfig+0x66c>)
 80015a4:	4910      	ldr	r1, [pc, #64]	; (80015e8 <HAL_RCC_OscConfig+0x68c>)
 80015a6:	400a      	ands	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7ff fa79 	bl	8000aa0 <HAL_GetTick>
 80015ae:	0003      	movs	r3, r0
 80015b0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015b2:	e01b      	b.n	80015ec <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff fa74 	bl	8000aa0 <HAL_GetTick>
 80015b8:	0002      	movs	r2, r0
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d914      	bls.n	80015ec <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e083      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	40021000 	.word	0x40021000
 80015cc:	fffffeff 	.word	0xfffffeff
 80015d0:	40007000 	.word	0x40007000
 80015d4:	fffffbff 	.word	0xfffffbff
 80015d8:	00001388 	.word	0x00001388
 80015dc:	efffffff 	.word	0xefffffff
 80015e0:	40010000 	.word	0x40010000
 80015e4:	ffffdfff 	.word	0xffffdfff
 80015e8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015ec:	4b3a      	ldr	r3, [pc, #232]	; (80016d8 <HAL_RCC_OscConfig+0x77c>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	049b      	lsls	r3, r3, #18
 80015f4:	4013      	ands	r3, r2
 80015f6:	d1dd      	bne.n	80015b4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015f8:	4b37      	ldr	r3, [pc, #220]	; (80016d8 <HAL_RCC_OscConfig+0x77c>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4a37      	ldr	r2, [pc, #220]	; (80016dc <HAL_RCC_OscConfig+0x780>)
 80015fe:	4013      	ands	r3, r2
 8001600:	0019      	movs	r1, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001610:	431a      	orrs	r2, r3
 8001612:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <HAL_RCC_OscConfig+0x77c>)
 8001614:	430a      	orrs	r2, r1
 8001616:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001618:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <HAL_RCC_OscConfig+0x77c>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <HAL_RCC_OscConfig+0x77c>)
 800161e:	2180      	movs	r1, #128	; 0x80
 8001620:	0449      	lsls	r1, r1, #17
 8001622:	430a      	orrs	r2, r1
 8001624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff fa3b 	bl	8000aa0 <HAL_GetTick>
 800162a:	0003      	movs	r3, r0
 800162c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001630:	f7ff fa36 	bl	8000aa0 <HAL_GetTick>
 8001634:	0002      	movs	r2, r0
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e045      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <HAL_RCC_OscConfig+0x77c>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	049b      	lsls	r3, r3, #18
 800164a:	4013      	ands	r3, r2
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x6d4>
 800164e:	e03d      	b.n	80016cc <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001650:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_RCC_OscConfig+0x77c>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <HAL_RCC_OscConfig+0x77c>)
 8001656:	4922      	ldr	r1, [pc, #136]	; (80016e0 <HAL_RCC_OscConfig+0x784>)
 8001658:	400a      	ands	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fa20 	bl	8000aa0 <HAL_GetTick>
 8001660:	0003      	movs	r3, r0
 8001662:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001666:	f7ff fa1b 	bl	8000aa0 <HAL_GetTick>
 800166a:	0002      	movs	r2, r0
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e02a      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_RCC_OscConfig+0x77c>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	049b      	lsls	r3, r3, #18
 8001680:	4013      	ands	r3, r2
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0x70a>
 8001684:	e022      	b.n	80016cc <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e01d      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_RCC_OscConfig+0x77c>)
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	025b      	lsls	r3, r3, #9
 800169e:	401a      	ands	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d10f      	bne.n	80016c8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016a8:	69fa      	ldr	r2, [r7, #28]
 80016aa:	23f0      	movs	r3, #240	; 0xf0
 80016ac:	039b      	lsls	r3, r3, #14
 80016ae:	401a      	ands	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d107      	bne.n	80016c8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80016b8:	69fa      	ldr	r2, [r7, #28]
 80016ba:	23c0      	movs	r3, #192	; 0xc0
 80016bc:	041b      	lsls	r3, r3, #16
 80016be:	401a      	ands	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	0018      	movs	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	b00a      	add	sp, #40	; 0x28
 80016d4:	bdb0      	pop	{r4, r5, r7, pc}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	40021000 	.word	0x40021000
 80016dc:	ff02ffff 	.word	0xff02ffff
 80016e0:	feffffff 	.word	0xfeffffff

080016e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e4:	b5b0      	push	{r4, r5, r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e128      	b.n	800194a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016f8:	4b96      	ldr	r3, [pc, #600]	; (8001954 <HAL_RCC_ClockConfig+0x270>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2201      	movs	r2, #1
 80016fe:	4013      	ands	r3, r2
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d91e      	bls.n	8001744 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b93      	ldr	r3, [pc, #588]	; (8001954 <HAL_RCC_ClockConfig+0x270>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2201      	movs	r2, #1
 800170c:	4393      	bics	r3, r2
 800170e:	0019      	movs	r1, r3
 8001710:	4b90      	ldr	r3, [pc, #576]	; (8001954 <HAL_RCC_ClockConfig+0x270>)
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001718:	f7ff f9c2 	bl	8000aa0 <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001720:	e009      	b.n	8001736 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001722:	f7ff f9bd 	bl	8000aa0 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	4a8a      	ldr	r2, [pc, #552]	; (8001958 <HAL_RCC_ClockConfig+0x274>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e109      	b.n	800194a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001736:	4b87      	ldr	r3, [pc, #540]	; (8001954 <HAL_RCC_ClockConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2201      	movs	r2, #1
 800173c:	4013      	ands	r3, r2
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d1ee      	bne.n	8001722 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2202      	movs	r2, #2
 800174a:	4013      	ands	r3, r2
 800174c:	d009      	beq.n	8001762 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800174e:	4b83      	ldr	r3, [pc, #524]	; (800195c <HAL_RCC_ClockConfig+0x278>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	22f0      	movs	r2, #240	; 0xf0
 8001754:	4393      	bics	r3, r2
 8001756:	0019      	movs	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	4b7f      	ldr	r3, [pc, #508]	; (800195c <HAL_RCC_ClockConfig+0x278>)
 800175e:	430a      	orrs	r2, r1
 8001760:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2201      	movs	r2, #1
 8001768:	4013      	ands	r3, r2
 800176a:	d100      	bne.n	800176e <HAL_RCC_ClockConfig+0x8a>
 800176c:	e089      	b.n	8001882 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001776:	4b79      	ldr	r3, [pc, #484]	; (800195c <HAL_RCC_ClockConfig+0x278>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	029b      	lsls	r3, r3, #10
 800177e:	4013      	ands	r3, r2
 8001780:	d120      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e0e1      	b.n	800194a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b03      	cmp	r3, #3
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800178e:	4b73      	ldr	r3, [pc, #460]	; (800195c <HAL_RCC_ClockConfig+0x278>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	049b      	lsls	r3, r3, #18
 8001796:	4013      	ands	r3, r2
 8001798:	d114      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e0d5      	b.n	800194a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d106      	bne.n	80017b4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017a6:	4b6d      	ldr	r3, [pc, #436]	; (800195c <HAL_RCC_ClockConfig+0x278>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2204      	movs	r2, #4
 80017ac:	4013      	ands	r3, r2
 80017ae:	d109      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0ca      	b.n	800194a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017b4:	4b69      	ldr	r3, [pc, #420]	; (800195c <HAL_RCC_ClockConfig+0x278>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4013      	ands	r3, r2
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0c2      	b.n	800194a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c4:	4b65      	ldr	r3, [pc, #404]	; (800195c <HAL_RCC_ClockConfig+0x278>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2203      	movs	r2, #3
 80017ca:	4393      	bics	r3, r2
 80017cc:	0019      	movs	r1, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	4b62      	ldr	r3, [pc, #392]	; (800195c <HAL_RCC_ClockConfig+0x278>)
 80017d4:	430a      	orrs	r2, r1
 80017d6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d8:	f7ff f962 	bl	8000aa0 <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d111      	bne.n	800180c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017e8:	e009      	b.n	80017fe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ea:	f7ff f959 	bl	8000aa0 <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	4a58      	ldr	r2, [pc, #352]	; (8001958 <HAL_RCC_ClockConfig+0x274>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e0a5      	b.n	800194a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017fe:	4b57      	ldr	r3, [pc, #348]	; (800195c <HAL_RCC_ClockConfig+0x278>)
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	220c      	movs	r2, #12
 8001804:	4013      	ands	r3, r2
 8001806:	2b08      	cmp	r3, #8
 8001808:	d1ef      	bne.n	80017ea <HAL_RCC_ClockConfig+0x106>
 800180a:	e03a      	b.n	8001882 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b03      	cmp	r3, #3
 8001812:	d111      	bne.n	8001838 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001814:	e009      	b.n	800182a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001816:	f7ff f943 	bl	8000aa0 <HAL_GetTick>
 800181a:	0002      	movs	r2, r0
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	4a4d      	ldr	r2, [pc, #308]	; (8001958 <HAL_RCC_ClockConfig+0x274>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e08f      	b.n	800194a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800182a:	4b4c      	ldr	r3, [pc, #304]	; (800195c <HAL_RCC_ClockConfig+0x278>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	220c      	movs	r2, #12
 8001830:	4013      	ands	r3, r2
 8001832:	2b0c      	cmp	r3, #12
 8001834:	d1ef      	bne.n	8001816 <HAL_RCC_ClockConfig+0x132>
 8001836:	e024      	b.n	8001882 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d11b      	bne.n	8001878 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001840:	e009      	b.n	8001856 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001842:	f7ff f92d 	bl	8000aa0 <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	4a42      	ldr	r2, [pc, #264]	; (8001958 <HAL_RCC_ClockConfig+0x274>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e079      	b.n	800194a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001856:	4b41      	ldr	r3, [pc, #260]	; (800195c <HAL_RCC_ClockConfig+0x278>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	220c      	movs	r2, #12
 800185c:	4013      	ands	r3, r2
 800185e:	2b04      	cmp	r3, #4
 8001860:	d1ef      	bne.n	8001842 <HAL_RCC_ClockConfig+0x15e>
 8001862:	e00e      	b.n	8001882 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001864:	f7ff f91c 	bl	8000aa0 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	4a3a      	ldr	r2, [pc, #232]	; (8001958 <HAL_RCC_ClockConfig+0x274>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e068      	b.n	800194a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001878:	4b38      	ldr	r3, [pc, #224]	; (800195c <HAL_RCC_ClockConfig+0x278>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	220c      	movs	r2, #12
 800187e:	4013      	ands	r3, r2
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001882:	4b34      	ldr	r3, [pc, #208]	; (8001954 <HAL_RCC_ClockConfig+0x270>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2201      	movs	r2, #1
 8001888:	4013      	ands	r3, r2
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d21e      	bcs.n	80018ce <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001890:	4b30      	ldr	r3, [pc, #192]	; (8001954 <HAL_RCC_ClockConfig+0x270>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2201      	movs	r2, #1
 8001896:	4393      	bics	r3, r2
 8001898:	0019      	movs	r1, r3
 800189a:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <HAL_RCC_ClockConfig+0x270>)
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018a2:	f7ff f8fd 	bl	8000aa0 <HAL_GetTick>
 80018a6:	0003      	movs	r3, r0
 80018a8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	e009      	b.n	80018c0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ac:	f7ff f8f8 	bl	8000aa0 <HAL_GetTick>
 80018b0:	0002      	movs	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	4a28      	ldr	r2, [pc, #160]	; (8001958 <HAL_RCC_ClockConfig+0x274>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e044      	b.n	800194a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c0:	4b24      	ldr	r3, [pc, #144]	; (8001954 <HAL_RCC_ClockConfig+0x270>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2201      	movs	r2, #1
 80018c6:	4013      	ands	r3, r2
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d1ee      	bne.n	80018ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2204      	movs	r2, #4
 80018d4:	4013      	ands	r3, r2
 80018d6:	d009      	beq.n	80018ec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d8:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_RCC_ClockConfig+0x278>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	4a20      	ldr	r2, [pc, #128]	; (8001960 <HAL_RCC_ClockConfig+0x27c>)
 80018de:	4013      	ands	r3, r2
 80018e0:	0019      	movs	r1, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <HAL_RCC_ClockConfig+0x278>)
 80018e8:	430a      	orrs	r2, r1
 80018ea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2208      	movs	r2, #8
 80018f2:	4013      	ands	r3, r2
 80018f4:	d00a      	beq.n	800190c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018f6:	4b19      	ldr	r3, [pc, #100]	; (800195c <HAL_RCC_ClockConfig+0x278>)
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	4a1a      	ldr	r2, [pc, #104]	; (8001964 <HAL_RCC_ClockConfig+0x280>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	0019      	movs	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	00da      	lsls	r2, r3, #3
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_RCC_ClockConfig+0x278>)
 8001908:	430a      	orrs	r2, r1
 800190a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800190c:	f000 f832 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 8001910:	0001      	movs	r1, r0
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_RCC_ClockConfig+0x278>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	220f      	movs	r2, #15
 800191a:	4013      	ands	r3, r2
 800191c:	4a12      	ldr	r2, [pc, #72]	; (8001968 <HAL_RCC_ClockConfig+0x284>)
 800191e:	5cd3      	ldrb	r3, [r2, r3]
 8001920:	000a      	movs	r2, r1
 8001922:	40da      	lsrs	r2, r3
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_RCC_ClockConfig+0x288>)
 8001926:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_RCC_ClockConfig+0x28c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	250b      	movs	r5, #11
 800192e:	197c      	adds	r4, r7, r5
 8001930:	0018      	movs	r0, r3
 8001932:	f7ff f86f 	bl	8000a14 <HAL_InitTick>
 8001936:	0003      	movs	r3, r0
 8001938:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800193a:	197b      	adds	r3, r7, r5
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001942:	197b      	adds	r3, r7, r5
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	e000      	b.n	800194a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	0018      	movs	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	b004      	add	sp, #16
 8001950:	bdb0      	pop	{r4, r5, r7, pc}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	40022000 	.word	0x40022000
 8001958:	00001388 	.word	0x00001388
 800195c:	40021000 	.word	0x40021000
 8001960:	fffff8ff 	.word	0xfffff8ff
 8001964:	ffffc7ff 	.word	0xffffc7ff
 8001968:	08003b00 	.word	0x08003b00
 800196c:	20000000 	.word	0x20000000
 8001970:	20000004 	.word	0x20000004

08001974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001974:	b5b0      	push	{r4, r5, r7, lr}
 8001976:	b08e      	sub	sp, #56	; 0x38
 8001978:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800197a:	4b4c      	ldr	r3, [pc, #304]	; (8001aac <HAL_RCC_GetSysClockFreq+0x138>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001982:	230c      	movs	r3, #12
 8001984:	4013      	ands	r3, r2
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d014      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x40>
 800198a:	d900      	bls.n	800198e <HAL_RCC_GetSysClockFreq+0x1a>
 800198c:	e07b      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x112>
 800198e:	2b04      	cmp	r3, #4
 8001990:	d002      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x24>
 8001992:	2b08      	cmp	r3, #8
 8001994:	d00b      	beq.n	80019ae <HAL_RCC_GetSysClockFreq+0x3a>
 8001996:	e076      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001998:	4b44      	ldr	r3, [pc, #272]	; (8001aac <HAL_RCC_GetSysClockFreq+0x138>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2210      	movs	r2, #16
 800199e:	4013      	ands	r3, r2
 80019a0:	d002      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80019a2:	4b43      	ldr	r3, [pc, #268]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80019a6:	e07c      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80019a8:	4b42      	ldr	r3, [pc, #264]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x140>)
 80019aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019ac:	e079      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019ae:	4b42      	ldr	r3, [pc, #264]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x144>)
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019b2:	e076      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80019b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b6:	0c9a      	lsrs	r2, r3, #18
 80019b8:	230f      	movs	r3, #15
 80019ba:	401a      	ands	r2, r3
 80019bc:	4b3f      	ldr	r3, [pc, #252]	; (8001abc <HAL_RCC_GetSysClockFreq+0x148>)
 80019be:	5c9b      	ldrb	r3, [r3, r2]
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80019c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c4:	0d9a      	lsrs	r2, r3, #22
 80019c6:	2303      	movs	r3, #3
 80019c8:	4013      	ands	r3, r2
 80019ca:	3301      	adds	r3, #1
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ce:	4b37      	ldr	r3, [pc, #220]	; (8001aac <HAL_RCC_GetSysClockFreq+0x138>)
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	025b      	lsls	r3, r3, #9
 80019d6:	4013      	ands	r3, r2
 80019d8:	d01a      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	4a35      	ldr	r2, [pc, #212]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x144>)
 80019e4:	2300      	movs	r3, #0
 80019e6:	69b8      	ldr	r0, [r7, #24]
 80019e8:	69f9      	ldr	r1, [r7, #28]
 80019ea:	f7fe fc39 	bl	8000260 <__aeabi_lmul>
 80019ee:	0002      	movs	r2, r0
 80019f0:	000b      	movs	r3, r1
 80019f2:	0010      	movs	r0, r2
 80019f4:	0019      	movs	r1, r3
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f7fe fc0d 	bl	8000220 <__aeabi_uldivmod>
 8001a06:	0002      	movs	r2, r0
 8001a08:	000b      	movs	r3, r1
 8001a0a:	0013      	movs	r3, r2
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a0e:	e037      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a10:	4b26      	ldr	r3, [pc, #152]	; (8001aac <HAL_RCC_GetSysClockFreq+0x138>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2210      	movs	r2, #16
 8001a16:	4013      	ands	r3, r2
 8001a18:	d01a      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a24:	2300      	movs	r3, #0
 8001a26:	68b8      	ldr	r0, [r7, #8]
 8001a28:	68f9      	ldr	r1, [r7, #12]
 8001a2a:	f7fe fc19 	bl	8000260 <__aeabi_lmul>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	000b      	movs	r3, r1
 8001a32:	0010      	movs	r0, r2
 8001a34:	0019      	movs	r1, r3
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f7fe fbed 	bl	8000220 <__aeabi_uldivmod>
 8001a46:	0002      	movs	r2, r0
 8001a48:	000b      	movs	r3, r1
 8001a4a:	0013      	movs	r3, r2
 8001a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a4e:	e017      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a52:	0018      	movs	r0, r3
 8001a54:	2300      	movs	r3, #0
 8001a56:	0019      	movs	r1, r3
 8001a58:	4a16      	ldr	r2, [pc, #88]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f7fe fc00 	bl	8000260 <__aeabi_lmul>
 8001a60:	0002      	movs	r2, r0
 8001a62:	000b      	movs	r3, r1
 8001a64:	0010      	movs	r0, r2
 8001a66:	0019      	movs	r1, r3
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	001c      	movs	r4, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	001d      	movs	r5, r3
 8001a70:	0022      	movs	r2, r4
 8001a72:	002b      	movs	r3, r5
 8001a74:	f7fe fbd4 	bl	8000220 <__aeabi_uldivmod>
 8001a78:	0002      	movs	r2, r0
 8001a7a:	000b      	movs	r3, r1
 8001a7c:	0013      	movs	r3, r2
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a84:	e00d      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_RCC_GetSysClockFreq+0x138>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	0b5b      	lsrs	r3, r3, #13
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	4013      	ands	r3, r2
 8001a90:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	3301      	adds	r3, #1
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	0212      	lsls	r2, r2, #8
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	0013      	movs	r3, r2
 8001a9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001aa0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b00e      	add	sp, #56	; 0x38
 8001aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	003d0900 	.word	0x003d0900
 8001ab4:	00f42400 	.word	0x00f42400
 8001ab8:	007a1200 	.word	0x007a1200
 8001abc:	08003b18 	.word	0x08003b18

08001ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac4:	4b02      	ldr	r3, [pc, #8]	; (8001ad0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	0018      	movs	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	20000000 	.word	0x20000000

08001ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ad8:	f7ff fff2 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001adc:	0001      	movs	r1, r0
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	2207      	movs	r2, #7
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001aea:	5cd3      	ldrb	r3, [r2, r3]
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	000b      	movs	r3, r1
}
 8001af0:	0018      	movs	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	40021000 	.word	0x40021000
 8001afc:	08003b10 	.word	0x08003b10

08001b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b04:	f7ff ffdc 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001b08:	0001      	movs	r1, r0
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	0adb      	lsrs	r3, r3, #11
 8001b10:	2207      	movs	r2, #7
 8001b12:	4013      	ands	r3, r2
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b16:	5cd3      	ldrb	r3, [r2, r3]
 8001b18:	40d9      	lsrs	r1, r3
 8001b1a:	000b      	movs	r3, r1
}
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	40021000 	.word	0x40021000
 8001b28:	08003b10 	.word	0x08003b10

08001b2c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001b34:	2317      	movs	r3, #23
 8001b36:	18fb      	adds	r3, r7, r3
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2220      	movs	r2, #32
 8001b42:	4013      	ands	r3, r2
 8001b44:	d106      	bne.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d100      	bne.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001b52:	e104      	b.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b54:	4bb1      	ldr	r3, [pc, #708]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	055b      	lsls	r3, r3, #21
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d10a      	bne.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b60:	4bae      	ldr	r3, [pc, #696]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b64:	4bad      	ldr	r3, [pc, #692]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b66:	2180      	movs	r1, #128	; 0x80
 8001b68:	0549      	lsls	r1, r1, #21
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001b6e:	2317      	movs	r3, #23
 8001b70:	18fb      	adds	r3, r7, r3
 8001b72:	2201      	movs	r2, #1
 8001b74:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b76:	4baa      	ldr	r3, [pc, #680]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d11a      	bne.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b82:	4ba7      	ldr	r3, [pc, #668]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4ba6      	ldr	r3, [pc, #664]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001b88:	2180      	movs	r1, #128	; 0x80
 8001b8a:	0049      	lsls	r1, r1, #1
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b90:	f7fe ff86 	bl	8000aa0 <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b98:	e008      	b.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9a:	f7fe ff81 	bl	8000aa0 <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b64      	cmp	r3, #100	; 0x64
 8001ba6:	d901      	bls.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e133      	b.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bac:	4b9c      	ldr	r3, [pc, #624]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001bb8:	4b98      	ldr	r3, [pc, #608]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	23c0      	movs	r3, #192	; 0xc0
 8001bbe:	039b      	lsls	r3, r3, #14
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	23c0      	movs	r3, #192	; 0xc0
 8001bca:	039b      	lsls	r3, r3, #14
 8001bcc:	4013      	ands	r3, r2
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d107      	bne.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	23c0      	movs	r3, #192	; 0xc0
 8001bda:	039b      	lsls	r3, r3, #14
 8001bdc:	4013      	ands	r3, r2
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d013      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	23c0      	movs	r3, #192	; 0xc0
 8001bea:	029b      	lsls	r3, r3, #10
 8001bec:	401a      	ands	r2, r3
 8001bee:	23c0      	movs	r3, #192	; 0xc0
 8001bf0:	029b      	lsls	r3, r3, #10
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d10a      	bne.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001bf6:	4b89      	ldr	r3, [pc, #548]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	029b      	lsls	r3, r3, #10
 8001bfe:	401a      	ands	r2, r3
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	029b      	lsls	r3, r3, #10
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d101      	bne.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e103      	b.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001c0c:	4b83      	ldr	r3, [pc, #524]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c10:	23c0      	movs	r3, #192	; 0xc0
 8001c12:	029b      	lsls	r3, r3, #10
 8001c14:	4013      	ands	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d049      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	23c0      	movs	r3, #192	; 0xc0
 8001c24:	029b      	lsls	r3, r3, #10
 8001c26:	4013      	ands	r3, r2
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d004      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2220      	movs	r2, #32
 8001c34:	4013      	ands	r3, r2
 8001c36:	d10d      	bne.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	23c0      	movs	r3, #192	; 0xc0
 8001c3e:	029b      	lsls	r3, r3, #10
 8001c40:	4013      	ands	r3, r2
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d034      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	4013      	ands	r3, r2
 8001c52:	d02e      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001c54:	4b71      	ldr	r3, [pc, #452]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c58:	4a72      	ldr	r2, [pc, #456]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c5e:	4b6f      	ldr	r3, [pc, #444]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c62:	4b6e      	ldr	r3, [pc, #440]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c64:	2180      	movs	r1, #128	; 0x80
 8001c66:	0309      	lsls	r1, r1, #12
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c6c:	4b6b      	ldr	r3, [pc, #428]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c70:	4b6a      	ldr	r3, [pc, #424]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c72:	496d      	ldr	r1, [pc, #436]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001c74:	400a      	ands	r2, r1
 8001c76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001c78:	4b68      	ldr	r3, [pc, #416]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4013      	ands	r3, r2
 8001c86:	d014      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7fe ff0a 	bl	8000aa0 <HAL_GetTick>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c90:	e009      	b.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c92:	f7fe ff05 	bl	8000aa0 <HAL_GetTick>
 8001c96:	0002      	movs	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	4a63      	ldr	r2, [pc, #396]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e0b6      	b.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ca6:	4b5d      	ldr	r3, [pc, #372]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ca8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d0ef      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d01f      	beq.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	23c0      	movs	r3, #192	; 0xc0
 8001cc4:	029b      	lsls	r3, r3, #10
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	23c0      	movs	r3, #192	; 0xc0
 8001cca:	029b      	lsls	r3, r3, #10
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d10c      	bne.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001cd0:	4b52      	ldr	r3, [pc, #328]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a56      	ldr	r2, [pc, #344]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	0019      	movs	r1, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	23c0      	movs	r3, #192	; 0xc0
 8001ce0:	039b      	lsls	r3, r3, #14
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	4b4d      	ldr	r3, [pc, #308]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	4b4c      	ldr	r3, [pc, #304]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	23c0      	movs	r3, #192	; 0xc0
 8001cf4:	029b      	lsls	r3, r3, #10
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	4b48      	ldr	r3, [pc, #288]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2220      	movs	r2, #32
 8001d04:	4013      	ands	r3, r2
 8001d06:	d01f      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	23c0      	movs	r3, #192	; 0xc0
 8001d0e:	029b      	lsls	r3, r3, #10
 8001d10:	401a      	ands	r2, r3
 8001d12:	23c0      	movs	r3, #192	; 0xc0
 8001d14:	029b      	lsls	r3, r3, #10
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001d1a:	4b40      	ldr	r3, [pc, #256]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a44      	ldr	r2, [pc, #272]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	0019      	movs	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	23c0      	movs	r3, #192	; 0xc0
 8001d2a:	039b      	lsls	r3, r3, #14
 8001d2c:	401a      	ands	r2, r3
 8001d2e:	4b3b      	ldr	r3, [pc, #236]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d30:	430a      	orrs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d36:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	23c0      	movs	r3, #192	; 0xc0
 8001d3e:	029b      	lsls	r3, r3, #10
 8001d40:	401a      	ands	r2, r3
 8001d42:	4b36      	ldr	r3, [pc, #216]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d44:	430a      	orrs	r2, r1
 8001d46:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d48:	2317      	movs	r3, #23
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d105      	bne.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d52:	4b32      	ldr	r3, [pc, #200]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d56:	4b31      	ldr	r3, [pc, #196]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d58:	4936      	ldr	r1, [pc, #216]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2201      	movs	r2, #1
 8001d64:	4013      	ands	r3, r2
 8001d66:	d009      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d68:	4b2c      	ldr	r3, [pc, #176]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	4393      	bics	r3, r2
 8001d70:	0019      	movs	r1, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2202      	movs	r2, #2
 8001d82:	4013      	ands	r3, r2
 8001d84:	d009      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d86:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	4393      	bics	r3, r2
 8001d8e:	0019      	movs	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d96:	430a      	orrs	r2, r1
 8001d98:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2204      	movs	r2, #4
 8001da0:	4013      	ands	r3, r2
 8001da2:	d009      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001da4:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da8:	4a23      	ldr	r2, [pc, #140]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	0019      	movs	r1, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001db4:	430a      	orrs	r2, r1
 8001db6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d009      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dc2:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	0019      	movs	r1, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699a      	ldr	r2, [r3, #24]
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2240      	movs	r2, #64	; 0x40
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d009      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de4:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	0019      	movs	r1, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1a      	ldr	r2, [r3, #32]
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001df0:	430a      	orrs	r2, r1
 8001df2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69da      	ldr	r2, [r3, #28]
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	0018      	movs	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b006      	add	sp, #24
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40007000 	.word	0x40007000
 8001e24:	fffcffff 	.word	0xfffcffff
 8001e28:	fff7ffff 	.word	0xfff7ffff
 8001e2c:	00001388 	.word	0x00001388
 8001e30:	ffcfffff 	.word	0xffcfffff
 8001e34:	efffffff 	.word	0xefffffff
 8001e38:	fffff3ff 	.word	0xfffff3ff
 8001e3c:	ffffcfff 	.word	0xffffcfff
 8001e40:	fbffffff 	.word	0xfbffffff
 8001e44:	fff3ffff 	.word	0xfff3ffff

08001e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e032      	b.n	8001ec0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2239      	movs	r2, #57	; 0x39
 8001e5e:	5c9b      	ldrb	r3, [r3, r2]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d107      	bne.n	8001e76 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2238      	movs	r2, #56	; 0x38
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	0018      	movs	r0, r3
 8001e72:	f7fe fc63 	bl	800073c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2239      	movs	r2, #57	; 0x39
 8001e7a:	2102      	movs	r1, #2
 8001e7c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3304      	adds	r3, #4
 8001e86:	0019      	movs	r1, r3
 8001e88:	0010      	movs	r0, r2
 8001e8a:	f000 fa45 	bl	8002318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	223e      	movs	r2, #62	; 0x3e
 8001e92:	2101      	movs	r1, #1
 8001e94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	223a      	movs	r2, #58	; 0x3a
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	5499      	strb	r1, [r3, r2]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	223b      	movs	r2, #59	; 0x3b
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	5499      	strb	r1, [r3, r2]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	223c      	movs	r2, #60	; 0x3c
 8001eaa:	2101      	movs	r1, #1
 8001eac:	5499      	strb	r1, [r3, r2]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	223d      	movs	r2, #61	; 0x3d
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2239      	movs	r2, #57	; 0x39
 8001eba:	2101      	movs	r1, #1
 8001ebc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b002      	add	sp, #8
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2239      	movs	r2, #57	; 0x39
 8001ed4:	5c9b      	ldrb	r3, [r3, r2]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d001      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e036      	b.n	8001f4e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2239      	movs	r2, #57	; 0x39
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	05db      	lsls	r3, r3, #23
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d009      	beq.n	8001f18 <HAL_TIM_Base_Start_IT+0x50>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <HAL_TIM_Base_Start_IT+0x90>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d004      	beq.n	8001f18 <HAL_TIM_Base_Start_IT+0x50>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <HAL_TIM_Base_Start_IT+0x94>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d111      	bne.n	8001f3c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2207      	movs	r2, #7
 8001f20:	4013      	ands	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2b06      	cmp	r3, #6
 8001f28:	d010      	beq.n	8001f4c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2101      	movs	r1, #1
 8001f36:	430a      	orrs	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f3a:	e007      	b.n	8001f4c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2101      	movs	r1, #1
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b004      	add	sp, #16
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	40010800 	.word	0x40010800
 8001f5c:	40011400 	.word	0x40011400

08001f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d124      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d11d      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2203      	movs	r2, #3
 8001f8a:	4252      	negs	r2, r2
 8001f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d004      	beq.n	8001faa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f000 f9a0 	bl	80022e8 <HAL_TIM_IC_CaptureCallback>
 8001fa8:	e007      	b.n	8001fba <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	0018      	movs	r0, r3
 8001fae:	f000 f993 	bl	80022d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f000 f99f 	bl	80022f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d125      	bne.n	800201a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d11e      	bne.n	800201a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2205      	movs	r2, #5
 8001fe2:	4252      	negs	r2, r2
 8001fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	23c0      	movs	r3, #192	; 0xc0
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d004      	beq.n	8002004 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f000 f973 	bl	80022e8 <HAL_TIM_IC_CaptureCallback>
 8002002:	e007      	b.n	8002014 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	0018      	movs	r0, r3
 8002008:	f000 f966 	bl	80022d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	0018      	movs	r0, r3
 8002010:	f000 f972 	bl	80022f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	2208      	movs	r2, #8
 8002022:	4013      	ands	r3, r2
 8002024:	2b08      	cmp	r3, #8
 8002026:	d124      	bne.n	8002072 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2208      	movs	r2, #8
 8002030:	4013      	ands	r3, r2
 8002032:	2b08      	cmp	r3, #8
 8002034:	d11d      	bne.n	8002072 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2209      	movs	r2, #9
 800203c:	4252      	negs	r2, r2
 800203e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2204      	movs	r2, #4
 8002044:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	2203      	movs	r2, #3
 800204e:	4013      	ands	r3, r2
 8002050:	d004      	beq.n	800205c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	0018      	movs	r0, r3
 8002056:	f000 f947 	bl	80022e8 <HAL_TIM_IC_CaptureCallback>
 800205a:	e007      	b.n	800206c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	0018      	movs	r0, r3
 8002060:	f000 f93a 	bl	80022d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	0018      	movs	r0, r3
 8002068:	f000 f946 	bl	80022f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	2210      	movs	r2, #16
 800207a:	4013      	ands	r3, r2
 800207c:	2b10      	cmp	r3, #16
 800207e:	d125      	bne.n	80020cc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2210      	movs	r2, #16
 8002088:	4013      	ands	r3, r2
 800208a:	2b10      	cmp	r3, #16
 800208c:	d11e      	bne.n	80020cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2211      	movs	r2, #17
 8002094:	4252      	negs	r2, r2
 8002096:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2208      	movs	r2, #8
 800209c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	69da      	ldr	r2, [r3, #28]
 80020a4:	23c0      	movs	r3, #192	; 0xc0
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4013      	ands	r3, r2
 80020aa:	d004      	beq.n	80020b6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	0018      	movs	r0, r3
 80020b0:	f000 f91a 	bl	80022e8 <HAL_TIM_IC_CaptureCallback>
 80020b4:	e007      	b.n	80020c6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	0018      	movs	r0, r3
 80020ba:	f000 f90d 	bl	80022d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	0018      	movs	r0, r3
 80020c2:	f000 f919 	bl	80022f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	2201      	movs	r2, #1
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d10f      	bne.n	80020fa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2201      	movs	r2, #1
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d108      	bne.n	80020fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2202      	movs	r2, #2
 80020ee:	4252      	negs	r2, r2
 80020f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7fe f9d7 	bl	80004a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	2240      	movs	r2, #64	; 0x40
 8002102:	4013      	ands	r3, r2
 8002104:	2b40      	cmp	r3, #64	; 0x40
 8002106:	d10f      	bne.n	8002128 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2240      	movs	r2, #64	; 0x40
 8002110:	4013      	ands	r3, r2
 8002112:	2b40      	cmp	r3, #64	; 0x40
 8002114:	d108      	bne.n	8002128 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2241      	movs	r2, #65	; 0x41
 800211c:	4252      	negs	r2, r2
 800211e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	0018      	movs	r0, r3
 8002124:	f000 f8f0 	bl	8002308 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002128:	46c0      	nop			; (mov r8, r8)
 800212a:	46bd      	mov	sp, r7
 800212c:	b002      	add	sp, #8
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800213a:	230f      	movs	r3, #15
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2238      	movs	r2, #56	; 0x38
 8002146:	5c9b      	ldrb	r3, [r3, r2]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_TIM_ConfigClockSource+0x20>
 800214c:	2302      	movs	r3, #2
 800214e:	e0bc      	b.n	80022ca <HAL_TIM_ConfigClockSource+0x19a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2238      	movs	r2, #56	; 0x38
 8002154:	2101      	movs	r1, #1
 8002156:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2239      	movs	r2, #57	; 0x39
 800215c:	2102      	movs	r1, #2
 800215e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2277      	movs	r2, #119	; 0x77
 800216c:	4393      	bics	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4a58      	ldr	r2, [pc, #352]	; (80022d4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002174:	4013      	ands	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2280      	movs	r2, #128	; 0x80
 8002186:	0192      	lsls	r2, r2, #6
 8002188:	4293      	cmp	r3, r2
 800218a:	d040      	beq.n	800220e <HAL_TIM_ConfigClockSource+0xde>
 800218c:	2280      	movs	r2, #128	; 0x80
 800218e:	0192      	lsls	r2, r2, #6
 8002190:	4293      	cmp	r3, r2
 8002192:	d900      	bls.n	8002196 <HAL_TIM_ConfigClockSource+0x66>
 8002194:	e088      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x178>
 8002196:	2280      	movs	r2, #128	; 0x80
 8002198:	0152      	lsls	r2, r2, #5
 800219a:	4293      	cmp	r3, r2
 800219c:	d100      	bne.n	80021a0 <HAL_TIM_ConfigClockSource+0x70>
 800219e:	e088      	b.n	80022b2 <HAL_TIM_ConfigClockSource+0x182>
 80021a0:	2280      	movs	r2, #128	; 0x80
 80021a2:	0152      	lsls	r2, r2, #5
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d900      	bls.n	80021aa <HAL_TIM_ConfigClockSource+0x7a>
 80021a8:	e07e      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x178>
 80021aa:	2b70      	cmp	r3, #112	; 0x70
 80021ac:	d018      	beq.n	80021e0 <HAL_TIM_ConfigClockSource+0xb0>
 80021ae:	d900      	bls.n	80021b2 <HAL_TIM_ConfigClockSource+0x82>
 80021b0:	e07a      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x178>
 80021b2:	2b60      	cmp	r3, #96	; 0x60
 80021b4:	d04f      	beq.n	8002256 <HAL_TIM_ConfigClockSource+0x126>
 80021b6:	d900      	bls.n	80021ba <HAL_TIM_ConfigClockSource+0x8a>
 80021b8:	e076      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x178>
 80021ba:	2b50      	cmp	r3, #80	; 0x50
 80021bc:	d03b      	beq.n	8002236 <HAL_TIM_ConfigClockSource+0x106>
 80021be:	d900      	bls.n	80021c2 <HAL_TIM_ConfigClockSource+0x92>
 80021c0:	e072      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x178>
 80021c2:	2b40      	cmp	r3, #64	; 0x40
 80021c4:	d057      	beq.n	8002276 <HAL_TIM_ConfigClockSource+0x146>
 80021c6:	d900      	bls.n	80021ca <HAL_TIM_ConfigClockSource+0x9a>
 80021c8:	e06e      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x178>
 80021ca:	2b30      	cmp	r3, #48	; 0x30
 80021cc:	d063      	beq.n	8002296 <HAL_TIM_ConfigClockSource+0x166>
 80021ce:	d86b      	bhi.n	80022a8 <HAL_TIM_ConfigClockSource+0x178>
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d060      	beq.n	8002296 <HAL_TIM_ConfigClockSource+0x166>
 80021d4:	d868      	bhi.n	80022a8 <HAL_TIM_ConfigClockSource+0x178>
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d05d      	beq.n	8002296 <HAL_TIM_ConfigClockSource+0x166>
 80021da:	2b10      	cmp	r3, #16
 80021dc:	d05b      	beq.n	8002296 <HAL_TIM_ConfigClockSource+0x166>
 80021de:	e063      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021f0:	f000 f960 	bl	80024b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2277      	movs	r2, #119	; 0x77
 8002200:	4313      	orrs	r3, r2
 8002202:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	609a      	str	r2, [r3, #8]
      break;
 800220c:	e052      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800221e:	f000 f949 	bl	80024b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2180      	movs	r1, #128	; 0x80
 800222e:	01c9      	lsls	r1, r1, #7
 8002230:	430a      	orrs	r2, r1
 8002232:	609a      	str	r2, [r3, #8]
      break;
 8002234:	e03e      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002242:	001a      	movs	r2, r3
 8002244:	f000 f8bc 	bl	80023c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2150      	movs	r1, #80	; 0x50
 800224e:	0018      	movs	r0, r3
 8002250:	f000 f916 	bl	8002480 <TIM_ITRx_SetConfig>
      break;
 8002254:	e02e      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002262:	001a      	movs	r2, r3
 8002264:	f000 f8da 	bl	800241c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2160      	movs	r1, #96	; 0x60
 800226e:	0018      	movs	r0, r3
 8002270:	f000 f906 	bl	8002480 <TIM_ITRx_SetConfig>
      break;
 8002274:	e01e      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002282:	001a      	movs	r2, r3
 8002284:	f000 f89c 	bl	80023c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2140      	movs	r1, #64	; 0x40
 800228e:	0018      	movs	r0, r3
 8002290:	f000 f8f6 	bl	8002480 <TIM_ITRx_SetConfig>
      break;
 8002294:	e00e      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	0019      	movs	r1, r3
 80022a0:	0010      	movs	r0, r2
 80022a2:	f000 f8ed 	bl	8002480 <TIM_ITRx_SetConfig>
      break;
 80022a6:	e005      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80022a8:	230f      	movs	r3, #15
 80022aa:	18fb      	adds	r3, r7, r3
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
      break;
 80022b0:	e000      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80022b2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2239      	movs	r2, #57	; 0x39
 80022b8:	2101      	movs	r1, #1
 80022ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2238      	movs	r2, #56	; 0x38
 80022c0:	2100      	movs	r1, #0
 80022c2:	5499      	strb	r1, [r3, r2]

  return status;
 80022c4:	230f      	movs	r3, #15
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	781b      	ldrb	r3, [r3, #0]
}
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b004      	add	sp, #16
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	ffff00ff 	.word	0xffff00ff

080022d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022e0:	46c0      	nop			; (mov r8, r8)
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b002      	add	sp, #8
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022f0:	46c0      	nop			; (mov r8, r8)
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b002      	add	sp, #8
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002300:	46c0      	nop			; (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b002      	add	sp, #8
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	b002      	add	sp, #8
 8002316:	bd80      	pop	{r7, pc}

08002318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	05db      	lsls	r3, r3, #23
 800232e:	429a      	cmp	r2, r3
 8002330:	d007      	beq.n	8002342 <TIM_Base_SetConfig+0x2a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a1f      	ldr	r2, [pc, #124]	; (80023b4 <TIM_Base_SetConfig+0x9c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d003      	beq.n	8002342 <TIM_Base_SetConfig+0x2a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a1e      	ldr	r2, [pc, #120]	; (80023b8 <TIM_Base_SetConfig+0xa0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d108      	bne.n	8002354 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2270      	movs	r2, #112	; 0x70
 8002346:	4393      	bics	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4313      	orrs	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	05db      	lsls	r3, r3, #23
 800235a:	429a      	cmp	r2, r3
 800235c:	d007      	beq.n	800236e <TIM_Base_SetConfig+0x56>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a14      	ldr	r2, [pc, #80]	; (80023b4 <TIM_Base_SetConfig+0x9c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d003      	beq.n	800236e <TIM_Base_SetConfig+0x56>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a13      	ldr	r2, [pc, #76]	; (80023b8 <TIM_Base_SetConfig+0xa0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d108      	bne.n	8002380 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4a12      	ldr	r2, [pc, #72]	; (80023bc <TIM_Base_SetConfig+0xa4>)
 8002372:	4013      	ands	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	4393      	bics	r3, r2
 8002386:	001a      	movs	r2, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	615a      	str	r2, [r3, #20]
}
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b004      	add	sp, #16
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40010800 	.word	0x40010800
 80023b8:	40011400 	.word	0x40011400
 80023bc:	fffffcff 	.word	0xfffffcff

080023c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	2201      	movs	r2, #1
 80023d8:	4393      	bics	r3, r2
 80023da:	001a      	movs	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	22f0      	movs	r2, #240	; 0xf0
 80023ea:	4393      	bics	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	220a      	movs	r2, #10
 80023fc:	4393      	bics	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	4313      	orrs	r3, r2
 8002406:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	621a      	str	r2, [r3, #32]
}
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b006      	add	sp, #24
 800241a:	bd80      	pop	{r7, pc}

0800241c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	2210      	movs	r2, #16
 800242e:	4393      	bics	r3, r2
 8002430:	001a      	movs	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	4a0d      	ldr	r2, [pc, #52]	; (800247c <TIM_TI2_ConfigInputStage+0x60>)
 8002446:	4013      	ands	r3, r2
 8002448:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	031b      	lsls	r3, r3, #12
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	22a0      	movs	r2, #160	; 0xa0
 8002458:	4393      	bics	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	621a      	str	r2, [r3, #32]
}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	46bd      	mov	sp, r7
 8002476:	b006      	add	sp, #24
 8002478:	bd80      	pop	{r7, pc}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	ffff0fff 	.word	0xffff0fff

08002480 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2270      	movs	r2, #112	; 0x70
 8002494:	4393      	bics	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	2207      	movs	r2, #7
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	609a      	str	r2, [r3, #8]
}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b004      	add	sp, #16
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <TIM_ETR_SetConfig+0x3c>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	021a      	lsls	r2, r3, #8
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4313      	orrs	r3, r2
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	609a      	str	r2, [r3, #8]
}
 80024e8:	46c0      	nop			; (mov r8, r8)
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b006      	add	sp, #24
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	ffff00ff 	.word	0xffff00ff

080024f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2238      	movs	r2, #56	; 0x38
 8002502:	5c9b      	ldrb	r3, [r3, r2]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002508:	2302      	movs	r3, #2
 800250a:	e042      	b.n	8002592 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2238      	movs	r2, #56	; 0x38
 8002510:	2101      	movs	r1, #1
 8002512:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2239      	movs	r2, #57	; 0x39
 8002518:	2102      	movs	r1, #2
 800251a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2270      	movs	r2, #112	; 0x70
 8002530:	4393      	bics	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	05db      	lsls	r3, r3, #23
 800254e:	429a      	cmp	r2, r3
 8002550:	d009      	beq.n	8002566 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a11      	ldr	r2, [pc, #68]	; (800259c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d004      	beq.n	8002566 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a0f      	ldr	r2, [pc, #60]	; (80025a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d10c      	bne.n	8002580 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2280      	movs	r2, #128	; 0x80
 800256a:	4393      	bics	r3, r2
 800256c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	4313      	orrs	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2239      	movs	r2, #57	; 0x39
 8002584:	2101      	movs	r1, #1
 8002586:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2238      	movs	r2, #56	; 0x38
 800258c:	2100      	movs	r1, #0
 800258e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	0018      	movs	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	b004      	add	sp, #16
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	40010800 	.word	0x40010800
 80025a0:	40011400 	.word	0x40011400

080025a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e044      	b.n	8002640 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d107      	bne.n	80025ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2278      	movs	r2, #120	; 0x78
 80025c2:	2100      	movs	r1, #0
 80025c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f7fe f8d5 	bl	8000778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2224      	movs	r2, #36	; 0x24
 80025d2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2101      	movs	r1, #1
 80025e0:	438a      	bics	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	0018      	movs	r0, r3
 80025e8:	f000 f8d0 	bl	800278c <UART_SetConfig>
 80025ec:	0003      	movs	r3, r0
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e024      	b.n	8002640 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	0018      	movs	r0, r3
 8002602:	f000 fb47 	bl	8002c94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	490d      	ldr	r1, [pc, #52]	; (8002648 <HAL_UART_Init+0xa4>)
 8002612:	400a      	ands	r2, r1
 8002614:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	212a      	movs	r1, #42	; 0x2a
 8002622:	438a      	bics	r2, r1
 8002624:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2101      	movs	r1, #1
 8002632:	430a      	orrs	r2, r1
 8002634:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	0018      	movs	r0, r3
 800263a:	f000 fbdf 	bl	8002dfc <UART_CheckIdleState>
 800263e:	0003      	movs	r3, r0
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	b002      	add	sp, #8
 8002646:	bd80      	pop	{r7, pc}
 8002648:	ffffb7ff 	.word	0xffffb7ff

0800264c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af02      	add	r7, sp, #8
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	1dbb      	adds	r3, r7, #6
 800265a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002660:	2b20      	cmp	r3, #32
 8002662:	d000      	beq.n	8002666 <HAL_UART_Transmit+0x1a>
 8002664:	e08c      	b.n	8002780 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_UART_Transmit+0x28>
 800266c:	1dbb      	adds	r3, r7, #6
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e084      	b.n	8002782 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	015b      	lsls	r3, r3, #5
 8002680:	429a      	cmp	r2, r3
 8002682:	d109      	bne.n	8002698 <HAL_UART_Transmit+0x4c>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d105      	bne.n	8002698 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2201      	movs	r2, #1
 8002690:	4013      	ands	r3, r2
 8002692:	d001      	beq.n	8002698 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e074      	b.n	8002782 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2284      	movs	r2, #132	; 0x84
 800269c:	2100      	movs	r1, #0
 800269e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2221      	movs	r2, #33	; 0x21
 80026a4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026a6:	f7fe f9fb 	bl	8000aa0 <HAL_GetTick>
 80026aa:	0003      	movs	r3, r0
 80026ac:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1dba      	adds	r2, r7, #6
 80026b2:	2150      	movs	r1, #80	; 0x50
 80026b4:	8812      	ldrh	r2, [r2, #0]
 80026b6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1dba      	adds	r2, r7, #6
 80026bc:	2152      	movs	r1, #82	; 0x52
 80026be:	8812      	ldrh	r2, [r2, #0]
 80026c0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	015b      	lsls	r3, r3, #5
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d108      	bne.n	80026e0 <HAL_UART_Transmit+0x94>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d104      	bne.n	80026e0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	e003      	b.n	80026e8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026e8:	e02f      	b.n	800274a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	0013      	movs	r3, r2
 80026f4:	2200      	movs	r2, #0
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	f000 fc28 	bl	8002f4c <UART_WaitOnFlagUntilTimeout>
 80026fc:	1e03      	subs	r3, r0, #0
 80026fe:	d004      	beq.n	800270a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2220      	movs	r2, #32
 8002704:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e03b      	b.n	8002782 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10b      	bne.n	8002728 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	001a      	movs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	05d2      	lsls	r2, r2, #23
 800271c:	0dd2      	lsrs	r2, r2, #23
 800271e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	3302      	adds	r3, #2
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	e007      	b.n	8002738 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	781a      	ldrb	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3301      	adds	r3, #1
 8002736:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2252      	movs	r2, #82	; 0x52
 800273c:	5a9b      	ldrh	r3, [r3, r2]
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b299      	uxth	r1, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2252      	movs	r2, #82	; 0x52
 8002748:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2252      	movs	r2, #82	; 0x52
 800274e:	5a9b      	ldrh	r3, [r3, r2]
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1c9      	bne.n	80026ea <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	0013      	movs	r3, r2
 8002760:	2200      	movs	r2, #0
 8002762:	2140      	movs	r1, #64	; 0x40
 8002764:	f000 fbf2 	bl	8002f4c <UART_WaitOnFlagUntilTimeout>
 8002768:	1e03      	subs	r3, r0, #0
 800276a:	d004      	beq.n	8002776 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e005      	b.n	8002782 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2220      	movs	r2, #32
 800277a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	e000      	b.n	8002782 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002780:	2302      	movs	r3, #2
  }
}
 8002782:	0018      	movs	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	b008      	add	sp, #32
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800278c:	b5b0      	push	{r4, r5, r7, lr}
 800278e:	b08e      	sub	sp, #56	; 0x38
 8002790:	af00      	add	r7, sp, #0
 8002792:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002794:	231a      	movs	r3, #26
 8002796:	2218      	movs	r2, #24
 8002798:	189b      	adds	r3, r3, r2
 800279a:	19db      	adds	r3, r3, r7
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4ac6      	ldr	r2, [pc, #792]	; (8002ad8 <UART_SetConfig+0x34c>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ca:	430a      	orrs	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4ac1      	ldr	r2, [pc, #772]	; (8002adc <UART_SetConfig+0x350>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	0019      	movs	r1, r3
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4abb      	ldr	r2, [pc, #748]	; (8002ae0 <UART_SetConfig+0x354>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d004      	beq.n	8002800 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027fc:	4313      	orrs	r3, r2
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	4ab7      	ldr	r2, [pc, #732]	; (8002ae4 <UART_SetConfig+0x358>)
 8002808:	4013      	ands	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002812:	430a      	orrs	r2, r1
 8002814:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4ab3      	ldr	r2, [pc, #716]	; (8002ae8 <UART_SetConfig+0x35c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d131      	bne.n	8002884 <UART_SetConfig+0xf8>
 8002820:	4bb2      	ldr	r3, [pc, #712]	; (8002aec <UART_SetConfig+0x360>)
 8002822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002824:	2203      	movs	r2, #3
 8002826:	4013      	ands	r3, r2
 8002828:	2b03      	cmp	r3, #3
 800282a:	d01d      	beq.n	8002868 <UART_SetConfig+0xdc>
 800282c:	d823      	bhi.n	8002876 <UART_SetConfig+0xea>
 800282e:	2b02      	cmp	r3, #2
 8002830:	d00c      	beq.n	800284c <UART_SetConfig+0xc0>
 8002832:	d820      	bhi.n	8002876 <UART_SetConfig+0xea>
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <UART_SetConfig+0xb2>
 8002838:	2b01      	cmp	r3, #1
 800283a:	d00e      	beq.n	800285a <UART_SetConfig+0xce>
 800283c:	e01b      	b.n	8002876 <UART_SetConfig+0xea>
 800283e:	231b      	movs	r3, #27
 8002840:	2218      	movs	r2, #24
 8002842:	189b      	adds	r3, r3, r2
 8002844:	19db      	adds	r3, r3, r7
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]
 800284a:	e09c      	b.n	8002986 <UART_SetConfig+0x1fa>
 800284c:	231b      	movs	r3, #27
 800284e:	2218      	movs	r2, #24
 8002850:	189b      	adds	r3, r3, r2
 8002852:	19db      	adds	r3, r3, r7
 8002854:	2202      	movs	r2, #2
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	e095      	b.n	8002986 <UART_SetConfig+0x1fa>
 800285a:	231b      	movs	r3, #27
 800285c:	2218      	movs	r2, #24
 800285e:	189b      	adds	r3, r3, r2
 8002860:	19db      	adds	r3, r3, r7
 8002862:	2204      	movs	r2, #4
 8002864:	701a      	strb	r2, [r3, #0]
 8002866:	e08e      	b.n	8002986 <UART_SetConfig+0x1fa>
 8002868:	231b      	movs	r3, #27
 800286a:	2218      	movs	r2, #24
 800286c:	189b      	adds	r3, r3, r2
 800286e:	19db      	adds	r3, r3, r7
 8002870:	2208      	movs	r2, #8
 8002872:	701a      	strb	r2, [r3, #0]
 8002874:	e087      	b.n	8002986 <UART_SetConfig+0x1fa>
 8002876:	231b      	movs	r3, #27
 8002878:	2218      	movs	r2, #24
 800287a:	189b      	adds	r3, r3, r2
 800287c:	19db      	adds	r3, r3, r7
 800287e:	2210      	movs	r2, #16
 8002880:	701a      	strb	r2, [r3, #0]
 8002882:	e080      	b.n	8002986 <UART_SetConfig+0x1fa>
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a99      	ldr	r2, [pc, #612]	; (8002af0 <UART_SetConfig+0x364>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d131      	bne.n	80028f2 <UART_SetConfig+0x166>
 800288e:	4b97      	ldr	r3, [pc, #604]	; (8002aec <UART_SetConfig+0x360>)
 8002890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002892:	220c      	movs	r2, #12
 8002894:	4013      	ands	r3, r2
 8002896:	2b0c      	cmp	r3, #12
 8002898:	d01d      	beq.n	80028d6 <UART_SetConfig+0x14a>
 800289a:	d823      	bhi.n	80028e4 <UART_SetConfig+0x158>
 800289c:	2b08      	cmp	r3, #8
 800289e:	d00c      	beq.n	80028ba <UART_SetConfig+0x12e>
 80028a0:	d820      	bhi.n	80028e4 <UART_SetConfig+0x158>
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <UART_SetConfig+0x120>
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d00e      	beq.n	80028c8 <UART_SetConfig+0x13c>
 80028aa:	e01b      	b.n	80028e4 <UART_SetConfig+0x158>
 80028ac:	231b      	movs	r3, #27
 80028ae:	2218      	movs	r2, #24
 80028b0:	189b      	adds	r3, r3, r2
 80028b2:	19db      	adds	r3, r3, r7
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
 80028b8:	e065      	b.n	8002986 <UART_SetConfig+0x1fa>
 80028ba:	231b      	movs	r3, #27
 80028bc:	2218      	movs	r2, #24
 80028be:	189b      	adds	r3, r3, r2
 80028c0:	19db      	adds	r3, r3, r7
 80028c2:	2202      	movs	r2, #2
 80028c4:	701a      	strb	r2, [r3, #0]
 80028c6:	e05e      	b.n	8002986 <UART_SetConfig+0x1fa>
 80028c8:	231b      	movs	r3, #27
 80028ca:	2218      	movs	r2, #24
 80028cc:	189b      	adds	r3, r3, r2
 80028ce:	19db      	adds	r3, r3, r7
 80028d0:	2204      	movs	r2, #4
 80028d2:	701a      	strb	r2, [r3, #0]
 80028d4:	e057      	b.n	8002986 <UART_SetConfig+0x1fa>
 80028d6:	231b      	movs	r3, #27
 80028d8:	2218      	movs	r2, #24
 80028da:	189b      	adds	r3, r3, r2
 80028dc:	19db      	adds	r3, r3, r7
 80028de:	2208      	movs	r2, #8
 80028e0:	701a      	strb	r2, [r3, #0]
 80028e2:	e050      	b.n	8002986 <UART_SetConfig+0x1fa>
 80028e4:	231b      	movs	r3, #27
 80028e6:	2218      	movs	r2, #24
 80028e8:	189b      	adds	r3, r3, r2
 80028ea:	19db      	adds	r3, r3, r7
 80028ec:	2210      	movs	r2, #16
 80028ee:	701a      	strb	r2, [r3, #0]
 80028f0:	e049      	b.n	8002986 <UART_SetConfig+0x1fa>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a7a      	ldr	r2, [pc, #488]	; (8002ae0 <UART_SetConfig+0x354>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d13e      	bne.n	800297a <UART_SetConfig+0x1ee>
 80028fc:	4b7b      	ldr	r3, [pc, #492]	; (8002aec <UART_SetConfig+0x360>)
 80028fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002900:	23c0      	movs	r3, #192	; 0xc0
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	4013      	ands	r3, r2
 8002906:	22c0      	movs	r2, #192	; 0xc0
 8002908:	0112      	lsls	r2, r2, #4
 800290a:	4293      	cmp	r3, r2
 800290c:	d027      	beq.n	800295e <UART_SetConfig+0x1d2>
 800290e:	22c0      	movs	r2, #192	; 0xc0
 8002910:	0112      	lsls	r2, r2, #4
 8002912:	4293      	cmp	r3, r2
 8002914:	d82a      	bhi.n	800296c <UART_SetConfig+0x1e0>
 8002916:	2280      	movs	r2, #128	; 0x80
 8002918:	0112      	lsls	r2, r2, #4
 800291a:	4293      	cmp	r3, r2
 800291c:	d011      	beq.n	8002942 <UART_SetConfig+0x1b6>
 800291e:	2280      	movs	r2, #128	; 0x80
 8002920:	0112      	lsls	r2, r2, #4
 8002922:	4293      	cmp	r3, r2
 8002924:	d822      	bhi.n	800296c <UART_SetConfig+0x1e0>
 8002926:	2b00      	cmp	r3, #0
 8002928:	d004      	beq.n	8002934 <UART_SetConfig+0x1a8>
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	00d2      	lsls	r2, r2, #3
 800292e:	4293      	cmp	r3, r2
 8002930:	d00e      	beq.n	8002950 <UART_SetConfig+0x1c4>
 8002932:	e01b      	b.n	800296c <UART_SetConfig+0x1e0>
 8002934:	231b      	movs	r3, #27
 8002936:	2218      	movs	r2, #24
 8002938:	189b      	adds	r3, r3, r2
 800293a:	19db      	adds	r3, r3, r7
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
 8002940:	e021      	b.n	8002986 <UART_SetConfig+0x1fa>
 8002942:	231b      	movs	r3, #27
 8002944:	2218      	movs	r2, #24
 8002946:	189b      	adds	r3, r3, r2
 8002948:	19db      	adds	r3, r3, r7
 800294a:	2202      	movs	r2, #2
 800294c:	701a      	strb	r2, [r3, #0]
 800294e:	e01a      	b.n	8002986 <UART_SetConfig+0x1fa>
 8002950:	231b      	movs	r3, #27
 8002952:	2218      	movs	r2, #24
 8002954:	189b      	adds	r3, r3, r2
 8002956:	19db      	adds	r3, r3, r7
 8002958:	2204      	movs	r2, #4
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	e013      	b.n	8002986 <UART_SetConfig+0x1fa>
 800295e:	231b      	movs	r3, #27
 8002960:	2218      	movs	r2, #24
 8002962:	189b      	adds	r3, r3, r2
 8002964:	19db      	adds	r3, r3, r7
 8002966:	2208      	movs	r2, #8
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e00c      	b.n	8002986 <UART_SetConfig+0x1fa>
 800296c:	231b      	movs	r3, #27
 800296e:	2218      	movs	r2, #24
 8002970:	189b      	adds	r3, r3, r2
 8002972:	19db      	adds	r3, r3, r7
 8002974:	2210      	movs	r2, #16
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	e005      	b.n	8002986 <UART_SetConfig+0x1fa>
 800297a:	231b      	movs	r3, #27
 800297c:	2218      	movs	r2, #24
 800297e:	189b      	adds	r3, r3, r2
 8002980:	19db      	adds	r3, r3, r7
 8002982:	2210      	movs	r2, #16
 8002984:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a55      	ldr	r2, [pc, #340]	; (8002ae0 <UART_SetConfig+0x354>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d000      	beq.n	8002992 <UART_SetConfig+0x206>
 8002990:	e084      	b.n	8002a9c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002992:	231b      	movs	r3, #27
 8002994:	2218      	movs	r2, #24
 8002996:	189b      	adds	r3, r3, r2
 8002998:	19db      	adds	r3, r3, r7
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b08      	cmp	r3, #8
 800299e:	d01d      	beq.n	80029dc <UART_SetConfig+0x250>
 80029a0:	dc20      	bgt.n	80029e4 <UART_SetConfig+0x258>
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d015      	beq.n	80029d2 <UART_SetConfig+0x246>
 80029a6:	dc1d      	bgt.n	80029e4 <UART_SetConfig+0x258>
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <UART_SetConfig+0x226>
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d005      	beq.n	80029bc <UART_SetConfig+0x230>
 80029b0:	e018      	b.n	80029e4 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029b2:	f7ff f88f 	bl	8001ad4 <HAL_RCC_GetPCLK1Freq>
 80029b6:	0003      	movs	r3, r0
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029ba:	e01c      	b.n	80029f6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029bc:	4b4b      	ldr	r3, [pc, #300]	; (8002aec <UART_SetConfig+0x360>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2210      	movs	r2, #16
 80029c2:	4013      	ands	r3, r2
 80029c4:	d002      	beq.n	80029cc <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80029c6:	4b4b      	ldr	r3, [pc, #300]	; (8002af4 <UART_SetConfig+0x368>)
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80029ca:	e014      	b.n	80029f6 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80029cc:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <UART_SetConfig+0x36c>)
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029d0:	e011      	b.n	80029f6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029d2:	f7fe ffcf 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 80029d6:	0003      	movs	r3, r0
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029da:	e00c      	b.n	80029f6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	021b      	lsls	r3, r3, #8
 80029e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029e2:	e008      	b.n	80029f6 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80029e8:	231a      	movs	r3, #26
 80029ea:	2218      	movs	r2, #24
 80029ec:	189b      	adds	r3, r3, r2
 80029ee:	19db      	adds	r3, r3, r7
 80029f0:	2201      	movs	r2, #1
 80029f2:	701a      	strb	r2, [r3, #0]
        break;
 80029f4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d100      	bne.n	80029fe <UART_SetConfig+0x272>
 80029fc:	e132      	b.n	8002c64 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	0013      	movs	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	189b      	adds	r3, r3, r2
 8002a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d305      	bcc.n	8002a1a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d906      	bls.n	8002a28 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002a1a:	231a      	movs	r3, #26
 8002a1c:	2218      	movs	r2, #24
 8002a1e:	189b      	adds	r3, r3, r2
 8002a20:	19db      	adds	r3, r3, r7
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]
 8002a26:	e11d      	b.n	8002c64 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	6939      	ldr	r1, [r7, #16]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	000b      	movs	r3, r1
 8002a36:	0e1b      	lsrs	r3, r3, #24
 8002a38:	0010      	movs	r0, r2
 8002a3a:	0205      	lsls	r5, r0, #8
 8002a3c:	431d      	orrs	r5, r3
 8002a3e:	000b      	movs	r3, r1
 8002a40:	021c      	lsls	r4, r3, #8
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	085b      	lsrs	r3, r3, #1
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	68b8      	ldr	r0, [r7, #8]
 8002a50:	68f9      	ldr	r1, [r7, #12]
 8002a52:	1900      	adds	r0, r0, r4
 8002a54:	4169      	adcs	r1, r5
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f7fd fbdc 	bl	8000220 <__aeabi_uldivmod>
 8002a68:	0002      	movs	r2, r0
 8002a6a:	000b      	movs	r3, r1
 8002a6c:	0013      	movs	r3, r2
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a72:	23c0      	movs	r3, #192	; 0xc0
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d309      	bcc.n	8002a8e <UART_SetConfig+0x302>
 8002a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	035b      	lsls	r3, r3, #13
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d204      	bcs.n	8002a8e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a8a:	60da      	str	r2, [r3, #12]
 8002a8c:	e0ea      	b.n	8002c64 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002a8e:	231a      	movs	r3, #26
 8002a90:	2218      	movs	r2, #24
 8002a92:	189b      	adds	r3, r3, r2
 8002a94:	19db      	adds	r3, r3, r7
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	e0e3      	b.n	8002c64 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	69da      	ldr	r2, [r3, #28]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d000      	beq.n	8002aaa <UART_SetConfig+0x31e>
 8002aa8:	e085      	b.n	8002bb6 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002aaa:	231b      	movs	r3, #27
 8002aac:	2218      	movs	r2, #24
 8002aae:	189b      	adds	r3, r3, r2
 8002ab0:	19db      	adds	r3, r3, r7
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d837      	bhi.n	8002b28 <UART_SetConfig+0x39c>
 8002ab8:	009a      	lsls	r2, r3, #2
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <UART_SetConfig+0x370>)
 8002abc:	18d3      	adds	r3, r2, r3
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ac2:	f7ff f807 	bl	8001ad4 <HAL_RCC_GetPCLK1Freq>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002aca:	e036      	b.n	8002b3a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002acc:	f7ff f818 	bl	8001b00 <HAL_RCC_GetPCLK2Freq>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ad4:	e031      	b.n	8002b3a <UART_SetConfig+0x3ae>
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	efff69f3 	.word	0xefff69f3
 8002adc:	ffffcfff 	.word	0xffffcfff
 8002ae0:	40004800 	.word	0x40004800
 8002ae4:	fffff4ff 	.word	0xfffff4ff
 8002ae8:	40013800 	.word	0x40013800
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40004400 	.word	0x40004400
 8002af4:	003d0900 	.word	0x003d0900
 8002af8:	00f42400 	.word	0x00f42400
 8002afc:	08003b24 	.word	0x08003b24
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b00:	4b60      	ldr	r3, [pc, #384]	; (8002c84 <UART_SetConfig+0x4f8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2210      	movs	r2, #16
 8002b06:	4013      	ands	r3, r2
 8002b08:	d002      	beq.n	8002b10 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b0a:	4b5f      	ldr	r3, [pc, #380]	; (8002c88 <UART_SetConfig+0x4fc>)
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b0e:	e014      	b.n	8002b3a <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002b10:	4b5e      	ldr	r3, [pc, #376]	; (8002c8c <UART_SetConfig+0x500>)
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b14:	e011      	b.n	8002b3a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b16:	f7fe ff2d 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b1e:	e00c      	b.n	8002b3a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b26:	e008      	b.n	8002b3a <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002b2c:	231a      	movs	r3, #26
 8002b2e:	2218      	movs	r2, #24
 8002b30:	189b      	adds	r3, r3, r2
 8002b32:	19db      	adds	r3, r3, r7
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
        break;
 8002b38:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d100      	bne.n	8002b42 <UART_SetConfig+0x3b6>
 8002b40:	e090      	b.n	8002c64 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b44:	005a      	lsls	r2, r3, #1
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	085b      	lsrs	r3, r3, #1
 8002b4c:	18d2      	adds	r2, r2, r3
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	0019      	movs	r1, r3
 8002b54:	0010      	movs	r0, r2
 8002b56:	f7fd fad7 	bl	8000108 <__udivsi3>
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	2b0f      	cmp	r3, #15
 8002b62:	d921      	bls.n	8002ba8 <UART_SetConfig+0x41c>
 8002b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	025b      	lsls	r3, r3, #9
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d21c      	bcs.n	8002ba8 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	200e      	movs	r0, #14
 8002b74:	2418      	movs	r4, #24
 8002b76:	1903      	adds	r3, r0, r4
 8002b78:	19db      	adds	r3, r3, r7
 8002b7a:	210f      	movs	r1, #15
 8002b7c:	438a      	bics	r2, r1
 8002b7e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b82:	085b      	lsrs	r3, r3, #1
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2207      	movs	r2, #7
 8002b88:	4013      	ands	r3, r2
 8002b8a:	b299      	uxth	r1, r3
 8002b8c:	1903      	adds	r3, r0, r4
 8002b8e:	19db      	adds	r3, r3, r7
 8002b90:	1902      	adds	r2, r0, r4
 8002b92:	19d2      	adds	r2, r2, r7
 8002b94:	8812      	ldrh	r2, [r2, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	1902      	adds	r2, r0, r4
 8002ba0:	19d2      	adds	r2, r2, r7
 8002ba2:	8812      	ldrh	r2, [r2, #0]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	e05d      	b.n	8002c64 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002ba8:	231a      	movs	r3, #26
 8002baa:	2218      	movs	r2, #24
 8002bac:	189b      	adds	r3, r3, r2
 8002bae:	19db      	adds	r3, r3, r7
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	e056      	b.n	8002c64 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bb6:	231b      	movs	r3, #27
 8002bb8:	2218      	movs	r2, #24
 8002bba:	189b      	adds	r3, r3, r2
 8002bbc:	19db      	adds	r3, r3, r7
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d822      	bhi.n	8002c0a <UART_SetConfig+0x47e>
 8002bc4:	009a      	lsls	r2, r3, #2
 8002bc6:	4b32      	ldr	r3, [pc, #200]	; (8002c90 <UART_SetConfig+0x504>)
 8002bc8:	18d3      	adds	r3, r2, r3
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bce:	f7fe ff81 	bl	8001ad4 <HAL_RCC_GetPCLK1Freq>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bd6:	e021      	b.n	8002c1c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bd8:	f7fe ff92 	bl	8001b00 <HAL_RCC_GetPCLK2Freq>
 8002bdc:	0003      	movs	r3, r0
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002be0:	e01c      	b.n	8002c1c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002be2:	4b28      	ldr	r3, [pc, #160]	; (8002c84 <UART_SetConfig+0x4f8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2210      	movs	r2, #16
 8002be8:	4013      	ands	r3, r2
 8002bea:	d002      	beq.n	8002bf2 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002bec:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <UART_SetConfig+0x4fc>)
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002bf0:	e014      	b.n	8002c1c <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002bf2:	4b26      	ldr	r3, [pc, #152]	; (8002c8c <UART_SetConfig+0x500>)
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bf6:	e011      	b.n	8002c1c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bf8:	f7fe febc 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c00:	e00c      	b.n	8002c1c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c08:	e008      	b.n	8002c1c <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c0e:	231a      	movs	r3, #26
 8002c10:	2218      	movs	r2, #24
 8002c12:	189b      	adds	r3, r3, r2
 8002c14:	19db      	adds	r3, r3, r7
 8002c16:	2201      	movs	r2, #1
 8002c18:	701a      	strb	r2, [r3, #0]
        break;
 8002c1a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d020      	beq.n	8002c64 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	085a      	lsrs	r2, r3, #1
 8002c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2a:	18d2      	adds	r2, r2, r3
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	0019      	movs	r1, r3
 8002c32:	0010      	movs	r0, r2
 8002c34:	f7fd fa68 	bl	8000108 <__udivsi3>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3e:	2b0f      	cmp	r3, #15
 8002c40:	d90a      	bls.n	8002c58 <UART_SetConfig+0x4cc>
 8002c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	025b      	lsls	r3, r3, #9
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d205      	bcs.n	8002c58 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	e005      	b.n	8002c64 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002c58:	231a      	movs	r3, #26
 8002c5a:	2218      	movs	r2, #24
 8002c5c:	189b      	adds	r3, r3, r2
 8002c5e:	19db      	adds	r3, r3, r7
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	2200      	movs	r2, #0
 8002c68:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002c70:	231a      	movs	r3, #26
 8002c72:	2218      	movs	r2, #24
 8002c74:	189b      	adds	r3, r3, r2
 8002c76:	19db      	adds	r3, r3, r7
 8002c78:	781b      	ldrb	r3, [r3, #0]
}
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b00e      	add	sp, #56	; 0x38
 8002c80:	bdb0      	pop	{r4, r5, r7, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	40021000 	.word	0x40021000
 8002c88:	003d0900 	.word	0x003d0900
 8002c8c:	00f42400 	.word	0x00f42400
 8002c90:	08003b48 	.word	0x08003b48

08002c94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d00b      	beq.n	8002cbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4a4a      	ldr	r2, [pc, #296]	; (8002dd8 <UART_AdvFeatureConfig+0x144>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d00b      	beq.n	8002ce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4a43      	ldr	r2, [pc, #268]	; (8002ddc <UART_AdvFeatureConfig+0x148>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d00b      	beq.n	8002d02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4a3b      	ldr	r2, [pc, #236]	; (8002de0 <UART_AdvFeatureConfig+0x14c>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	0019      	movs	r1, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	2208      	movs	r2, #8
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d00b      	beq.n	8002d24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	4a34      	ldr	r2, [pc, #208]	; (8002de4 <UART_AdvFeatureConfig+0x150>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	0019      	movs	r1, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	2210      	movs	r2, #16
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d00b      	beq.n	8002d46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a2c      	ldr	r2, [pc, #176]	; (8002de8 <UART_AdvFeatureConfig+0x154>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	0019      	movs	r1, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d00b      	beq.n	8002d68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	4a25      	ldr	r2, [pc, #148]	; (8002dec <UART_AdvFeatureConfig+0x158>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	2240      	movs	r2, #64	; 0x40
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d01d      	beq.n	8002dae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a1d      	ldr	r2, [pc, #116]	; (8002df0 <UART_AdvFeatureConfig+0x15c>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	0019      	movs	r1, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	035b      	lsls	r3, r3, #13
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d10b      	bne.n	8002dae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4a15      	ldr	r2, [pc, #84]	; (8002df4 <UART_AdvFeatureConfig+0x160>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	0019      	movs	r1, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2280      	movs	r2, #128	; 0x80
 8002db4:	4013      	ands	r3, r2
 8002db6:	d00b      	beq.n	8002dd0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4a0e      	ldr	r2, [pc, #56]	; (8002df8 <UART_AdvFeatureConfig+0x164>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	605a      	str	r2, [r3, #4]
  }
}
 8002dd0:	46c0      	nop			; (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b002      	add	sp, #8
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	fffdffff 	.word	0xfffdffff
 8002ddc:	fffeffff 	.word	0xfffeffff
 8002de0:	fffbffff 	.word	0xfffbffff
 8002de4:	ffff7fff 	.word	0xffff7fff
 8002de8:	ffffefff 	.word	0xffffefff
 8002dec:	ffffdfff 	.word	0xffffdfff
 8002df0:	ffefffff 	.word	0xffefffff
 8002df4:	ff9fffff 	.word	0xff9fffff
 8002df8:	fff7ffff 	.word	0xfff7ffff

08002dfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b092      	sub	sp, #72	; 0x48
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2284      	movs	r2, #132	; 0x84
 8002e08:	2100      	movs	r1, #0
 8002e0a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e0c:	f7fd fe48 	bl	8000aa0 <HAL_GetTick>
 8002e10:	0003      	movs	r3, r0
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2208      	movs	r2, #8
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d12c      	bne.n	8002e7c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e24:	2280      	movs	r2, #128	; 0x80
 8002e26:	0391      	lsls	r1, r2, #14
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	4a46      	ldr	r2, [pc, #280]	; (8002f44 <UART_CheckIdleState+0x148>)
 8002e2c:	9200      	str	r2, [sp, #0]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f000 f88c 	bl	8002f4c <UART_WaitOnFlagUntilTimeout>
 8002e34:	1e03      	subs	r3, r0, #0
 8002e36:	d021      	beq.n	8002e7c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e38:	f3ef 8310 	mrs	r3, PRIMASK
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e40:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e42:	2301      	movs	r3, #1
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	f383 8810 	msr	PRIMASK, r3
}
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2180      	movs	r1, #128	; 0x80
 8002e5a:	438a      	bics	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	f383 8810 	msr	PRIMASK, r3
}
 8002e68:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2278      	movs	r2, #120	; 0x78
 8002e74:	2100      	movs	r1, #0
 8002e76:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e05f      	b.n	8002f3c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2204      	movs	r2, #4
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d146      	bne.n	8002f18 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e8c:	2280      	movs	r2, #128	; 0x80
 8002e8e:	03d1      	lsls	r1, r2, #15
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4a2c      	ldr	r2, [pc, #176]	; (8002f44 <UART_CheckIdleState+0x148>)
 8002e94:	9200      	str	r2, [sp, #0]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f000 f858 	bl	8002f4c <UART_WaitOnFlagUntilTimeout>
 8002e9c:	1e03      	subs	r3, r0, #0
 8002e9e:	d03b      	beq.n	8002f18 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eaa:	2301      	movs	r3, #1
 8002eac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f383 8810 	msr	PRIMASK, r3
}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4921      	ldr	r1, [pc, #132]	; (8002f48 <UART_CheckIdleState+0x14c>)
 8002ec2:	400a      	ands	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f383 8810 	msr	PRIMASK, r3
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ed8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eda:	633b      	str	r3, [r7, #48]	; 0x30
 8002edc:	2301      	movs	r3, #1
 8002ede:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f383 8810 	msr	PRIMASK, r3
}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	438a      	bics	r2, r1
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	f383 8810 	msr	PRIMASK, r3
}
 8002f02:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2280      	movs	r2, #128	; 0x80
 8002f08:	2120      	movs	r1, #32
 8002f0a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2278      	movs	r2, #120	; 0x78
 8002f10:	2100      	movs	r1, #0
 8002f12:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e011      	b.n	8002f3c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2280      	movs	r2, #128	; 0x80
 8002f22:	2120      	movs	r1, #32
 8002f24:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2278      	movs	r2, #120	; 0x78
 8002f36:	2100      	movs	r1, #0
 8002f38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b010      	add	sp, #64	; 0x40
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	01ffffff 	.word	0x01ffffff
 8002f48:	fffffedf 	.word	0xfffffedf

08002f4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	1dfb      	adds	r3, r7, #7
 8002f5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f5c:	e04b      	b.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	3301      	adds	r3, #1
 8002f62:	d048      	beq.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f64:	f7fd fd9c 	bl	8000aa0 <HAL_GetTick>
 8002f68:	0002      	movs	r2, r0
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d302      	bcc.n	8002f7a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e04b      	b.n	8003016 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2204      	movs	r2, #4
 8002f86:	4013      	ands	r3, r2
 8002f88:	d035      	beq.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	2208      	movs	r2, #8
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d111      	bne.n	8002fbc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f000 f83c 	bl	8003020 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2284      	movs	r2, #132	; 0x84
 8002fac:	2108      	movs	r1, #8
 8002fae:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2278      	movs	r2, #120	; 0x78
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e02c      	b.n	8003016 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d112      	bne.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 f81f 	bl	8003020 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2284      	movs	r2, #132	; 0x84
 8002fe6:	2120      	movs	r1, #32
 8002fe8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2278      	movs	r2, #120	; 0x78
 8002fee:	2100      	movs	r1, #0
 8002ff0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e00f      	b.n	8003016 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	4013      	ands	r3, r2
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	425a      	negs	r2, r3
 8003006:	4153      	adcs	r3, r2
 8003008:	b2db      	uxtb	r3, r3
 800300a:	001a      	movs	r2, r3
 800300c:	1dfb      	adds	r3, r7, #7
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d0a4      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	0018      	movs	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	b004      	add	sp, #16
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08e      	sub	sp, #56	; 0x38
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003028:	f3ef 8310 	mrs	r3, PRIMASK
 800302c:	617b      	str	r3, [r7, #20]
  return(result);
 800302e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
 8003032:	2301      	movs	r3, #1
 8003034:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	f383 8810 	msr	PRIMASK, r3
}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4926      	ldr	r1, [pc, #152]	; (80030e4 <UART_EndRxTransfer+0xc4>)
 800304a:	400a      	ands	r2, r1
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003050:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f383 8810 	msr	PRIMASK, r3
}
 8003058:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800305a:	f3ef 8310 	mrs	r3, PRIMASK
 800305e:	623b      	str	r3, [r7, #32]
  return(result);
 8003060:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003062:	633b      	str	r3, [r7, #48]	; 0x30
 8003064:	2301      	movs	r3, #1
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	f383 8810 	msr	PRIMASK, r3
}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2101      	movs	r1, #1
 800307c:	438a      	bics	r2, r1
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	f383 8810 	msr	PRIMASK, r3
}
 800308a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003090:	2b01      	cmp	r3, #1
 8003092:	d118      	bne.n	80030c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003094:	f3ef 8310 	mrs	r3, PRIMASK
 8003098:	60bb      	str	r3, [r7, #8]
  return(result);
 800309a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800309e:	2301      	movs	r3, #1
 80030a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f383 8810 	msr	PRIMASK, r3
}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2110      	movs	r1, #16
 80030b6:	438a      	bics	r2, r1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f383 8810 	msr	PRIMASK, r3
}
 80030c4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2280      	movs	r2, #128	; 0x80
 80030ca:	2120      	movs	r1, #32
 80030cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	46bd      	mov	sp, r7
 80030de:	b00e      	add	sp, #56	; 0x38
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	fffffedf 	.word	0xfffffedf

080030e8 <std>:
 80030e8:	2300      	movs	r3, #0
 80030ea:	b510      	push	{r4, lr}
 80030ec:	0004      	movs	r4, r0
 80030ee:	6003      	str	r3, [r0, #0]
 80030f0:	6043      	str	r3, [r0, #4]
 80030f2:	6083      	str	r3, [r0, #8]
 80030f4:	8181      	strh	r1, [r0, #12]
 80030f6:	6643      	str	r3, [r0, #100]	; 0x64
 80030f8:	81c2      	strh	r2, [r0, #14]
 80030fa:	6103      	str	r3, [r0, #16]
 80030fc:	6143      	str	r3, [r0, #20]
 80030fe:	6183      	str	r3, [r0, #24]
 8003100:	0019      	movs	r1, r3
 8003102:	2208      	movs	r2, #8
 8003104:	305c      	adds	r0, #92	; 0x5c
 8003106:	f000 fa05 	bl	8003514 <memset>
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <std+0x50>)
 800310c:	6224      	str	r4, [r4, #32]
 800310e:	6263      	str	r3, [r4, #36]	; 0x24
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <std+0x54>)
 8003112:	62a3      	str	r3, [r4, #40]	; 0x28
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <std+0x58>)
 8003116:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003118:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <std+0x5c>)
 800311a:	6323      	str	r3, [r4, #48]	; 0x30
 800311c:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <std+0x60>)
 800311e:	429c      	cmp	r4, r3
 8003120:	d005      	beq.n	800312e <std+0x46>
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <std+0x64>)
 8003124:	429c      	cmp	r4, r3
 8003126:	d002      	beq.n	800312e <std+0x46>
 8003128:	4b09      	ldr	r3, [pc, #36]	; (8003150 <std+0x68>)
 800312a:	429c      	cmp	r4, r3
 800312c:	d103      	bne.n	8003136 <std+0x4e>
 800312e:	0020      	movs	r0, r4
 8003130:	3058      	adds	r0, #88	; 0x58
 8003132:	f000 fa6f 	bl	8003614 <__retarget_lock_init_recursive>
 8003136:	bd10      	pop	{r4, pc}
 8003138:	08003331 	.word	0x08003331
 800313c:	08003359 	.word	0x08003359
 8003140:	08003391 	.word	0x08003391
 8003144:	080033bd 	.word	0x080033bd
 8003148:	20000154 	.word	0x20000154
 800314c:	200001bc 	.word	0x200001bc
 8003150:	20000224 	.word	0x20000224

08003154 <stdio_exit_handler>:
 8003154:	b510      	push	{r4, lr}
 8003156:	4a03      	ldr	r2, [pc, #12]	; (8003164 <stdio_exit_handler+0x10>)
 8003158:	4903      	ldr	r1, [pc, #12]	; (8003168 <stdio_exit_handler+0x14>)
 800315a:	4804      	ldr	r0, [pc, #16]	; (800316c <stdio_exit_handler+0x18>)
 800315c:	f000 f86c 	bl	8003238 <_fwalk_sglue>
 8003160:	bd10      	pop	{r4, pc}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	2000000c 	.word	0x2000000c
 8003168:	0800392d 	.word	0x0800392d
 800316c:	20000018 	.word	0x20000018

08003170 <cleanup_stdio>:
 8003170:	6841      	ldr	r1, [r0, #4]
 8003172:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <cleanup_stdio+0x30>)
 8003174:	b510      	push	{r4, lr}
 8003176:	0004      	movs	r4, r0
 8003178:	4299      	cmp	r1, r3
 800317a:	d001      	beq.n	8003180 <cleanup_stdio+0x10>
 800317c:	f000 fbd6 	bl	800392c <_fflush_r>
 8003180:	68a1      	ldr	r1, [r4, #8]
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <cleanup_stdio+0x34>)
 8003184:	4299      	cmp	r1, r3
 8003186:	d002      	beq.n	800318e <cleanup_stdio+0x1e>
 8003188:	0020      	movs	r0, r4
 800318a:	f000 fbcf 	bl	800392c <_fflush_r>
 800318e:	68e1      	ldr	r1, [r4, #12]
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <cleanup_stdio+0x38>)
 8003192:	4299      	cmp	r1, r3
 8003194:	d002      	beq.n	800319c <cleanup_stdio+0x2c>
 8003196:	0020      	movs	r0, r4
 8003198:	f000 fbc8 	bl	800392c <_fflush_r>
 800319c:	bd10      	pop	{r4, pc}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	20000154 	.word	0x20000154
 80031a4:	200001bc 	.word	0x200001bc
 80031a8:	20000224 	.word	0x20000224

080031ac <global_stdio_init.part.0>:
 80031ac:	b510      	push	{r4, lr}
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <global_stdio_init.part.0+0x28>)
 80031b0:	4a09      	ldr	r2, [pc, #36]	; (80031d8 <global_stdio_init.part.0+0x2c>)
 80031b2:	2104      	movs	r1, #4
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	4809      	ldr	r0, [pc, #36]	; (80031dc <global_stdio_init.part.0+0x30>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	f7ff ff95 	bl	80030e8 <std>
 80031be:	2201      	movs	r2, #1
 80031c0:	2109      	movs	r1, #9
 80031c2:	4807      	ldr	r0, [pc, #28]	; (80031e0 <global_stdio_init.part.0+0x34>)
 80031c4:	f7ff ff90 	bl	80030e8 <std>
 80031c8:	2202      	movs	r2, #2
 80031ca:	2112      	movs	r1, #18
 80031cc:	4805      	ldr	r0, [pc, #20]	; (80031e4 <global_stdio_init.part.0+0x38>)
 80031ce:	f7ff ff8b 	bl	80030e8 <std>
 80031d2:	bd10      	pop	{r4, pc}
 80031d4:	2000028c 	.word	0x2000028c
 80031d8:	08003155 	.word	0x08003155
 80031dc:	20000154 	.word	0x20000154
 80031e0:	200001bc 	.word	0x200001bc
 80031e4:	20000224 	.word	0x20000224

080031e8 <__sfp_lock_acquire>:
 80031e8:	b510      	push	{r4, lr}
 80031ea:	4802      	ldr	r0, [pc, #8]	; (80031f4 <__sfp_lock_acquire+0xc>)
 80031ec:	f000 fa13 	bl	8003616 <__retarget_lock_acquire_recursive>
 80031f0:	bd10      	pop	{r4, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	20000295 	.word	0x20000295

080031f8 <__sfp_lock_release>:
 80031f8:	b510      	push	{r4, lr}
 80031fa:	4802      	ldr	r0, [pc, #8]	; (8003204 <__sfp_lock_release+0xc>)
 80031fc:	f000 fa0c 	bl	8003618 <__retarget_lock_release_recursive>
 8003200:	bd10      	pop	{r4, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	20000295 	.word	0x20000295

08003208 <__sinit>:
 8003208:	b510      	push	{r4, lr}
 800320a:	0004      	movs	r4, r0
 800320c:	f7ff ffec 	bl	80031e8 <__sfp_lock_acquire>
 8003210:	6a23      	ldr	r3, [r4, #32]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <__sinit+0x14>
 8003216:	f7ff ffef 	bl	80031f8 <__sfp_lock_release>
 800321a:	bd10      	pop	{r4, pc}
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <__sinit+0x28>)
 800321e:	6223      	str	r3, [r4, #32]
 8003220:	4b04      	ldr	r3, [pc, #16]	; (8003234 <__sinit+0x2c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f6      	bne.n	8003216 <__sinit+0xe>
 8003228:	f7ff ffc0 	bl	80031ac <global_stdio_init.part.0>
 800322c:	e7f3      	b.n	8003216 <__sinit+0xe>
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	08003171 	.word	0x08003171
 8003234:	2000028c 	.word	0x2000028c

08003238 <_fwalk_sglue>:
 8003238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800323a:	0014      	movs	r4, r2
 800323c:	2600      	movs	r6, #0
 800323e:	9000      	str	r0, [sp, #0]
 8003240:	9101      	str	r1, [sp, #4]
 8003242:	68a5      	ldr	r5, [r4, #8]
 8003244:	6867      	ldr	r7, [r4, #4]
 8003246:	3f01      	subs	r7, #1
 8003248:	d504      	bpl.n	8003254 <_fwalk_sglue+0x1c>
 800324a:	6824      	ldr	r4, [r4, #0]
 800324c:	2c00      	cmp	r4, #0
 800324e:	d1f8      	bne.n	8003242 <_fwalk_sglue+0xa>
 8003250:	0030      	movs	r0, r6
 8003252:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003254:	89ab      	ldrh	r3, [r5, #12]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d908      	bls.n	800326c <_fwalk_sglue+0x34>
 800325a:	220e      	movs	r2, #14
 800325c:	5eab      	ldrsh	r3, [r5, r2]
 800325e:	3301      	adds	r3, #1
 8003260:	d004      	beq.n	800326c <_fwalk_sglue+0x34>
 8003262:	0029      	movs	r1, r5
 8003264:	9800      	ldr	r0, [sp, #0]
 8003266:	9b01      	ldr	r3, [sp, #4]
 8003268:	4798      	blx	r3
 800326a:	4306      	orrs	r6, r0
 800326c:	3568      	adds	r5, #104	; 0x68
 800326e:	e7ea      	b.n	8003246 <_fwalk_sglue+0xe>

08003270 <_puts_r>:
 8003270:	6a03      	ldr	r3, [r0, #32]
 8003272:	b570      	push	{r4, r5, r6, lr}
 8003274:	0005      	movs	r5, r0
 8003276:	000e      	movs	r6, r1
 8003278:	6884      	ldr	r4, [r0, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <_puts_r+0x12>
 800327e:	f7ff ffc3 	bl	8003208 <__sinit>
 8003282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003284:	07db      	lsls	r3, r3, #31
 8003286:	d405      	bmi.n	8003294 <_puts_r+0x24>
 8003288:	89a3      	ldrh	r3, [r4, #12]
 800328a:	059b      	lsls	r3, r3, #22
 800328c:	d402      	bmi.n	8003294 <_puts_r+0x24>
 800328e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003290:	f000 f9c1 	bl	8003616 <__retarget_lock_acquire_recursive>
 8003294:	89a3      	ldrh	r3, [r4, #12]
 8003296:	071b      	lsls	r3, r3, #28
 8003298:	d502      	bpl.n	80032a0 <_puts_r+0x30>
 800329a:	6923      	ldr	r3, [r4, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d11f      	bne.n	80032e0 <_puts_r+0x70>
 80032a0:	0021      	movs	r1, r4
 80032a2:	0028      	movs	r0, r5
 80032a4:	f000 f8d2 	bl	800344c <__swsetup_r>
 80032a8:	2800      	cmp	r0, #0
 80032aa:	d019      	beq.n	80032e0 <_puts_r+0x70>
 80032ac:	2501      	movs	r5, #1
 80032ae:	426d      	negs	r5, r5
 80032b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032b2:	07db      	lsls	r3, r3, #31
 80032b4:	d405      	bmi.n	80032c2 <_puts_r+0x52>
 80032b6:	89a3      	ldrh	r3, [r4, #12]
 80032b8:	059b      	lsls	r3, r3, #22
 80032ba:	d402      	bmi.n	80032c2 <_puts_r+0x52>
 80032bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032be:	f000 f9ab 	bl	8003618 <__retarget_lock_release_recursive>
 80032c2:	0028      	movs	r0, r5
 80032c4:	bd70      	pop	{r4, r5, r6, pc}
 80032c6:	3601      	adds	r6, #1
 80032c8:	60a3      	str	r3, [r4, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	da04      	bge.n	80032d8 <_puts_r+0x68>
 80032ce:	69a2      	ldr	r2, [r4, #24]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	dc16      	bgt.n	8003302 <_puts_r+0x92>
 80032d4:	290a      	cmp	r1, #10
 80032d6:	d014      	beq.n	8003302 <_puts_r+0x92>
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	6022      	str	r2, [r4, #0]
 80032de:	7019      	strb	r1, [r3, #0]
 80032e0:	68a3      	ldr	r3, [r4, #8]
 80032e2:	7831      	ldrb	r1, [r6, #0]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	2900      	cmp	r1, #0
 80032e8:	d1ed      	bne.n	80032c6 <_puts_r+0x56>
 80032ea:	60a3      	str	r3, [r4, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	da0f      	bge.n	8003310 <_puts_r+0xa0>
 80032f0:	0028      	movs	r0, r5
 80032f2:	0022      	movs	r2, r4
 80032f4:	310a      	adds	r1, #10
 80032f6:	f000 f867 	bl	80033c8 <__swbuf_r>
 80032fa:	250a      	movs	r5, #10
 80032fc:	3001      	adds	r0, #1
 80032fe:	d1d7      	bne.n	80032b0 <_puts_r+0x40>
 8003300:	e7d4      	b.n	80032ac <_puts_r+0x3c>
 8003302:	0022      	movs	r2, r4
 8003304:	0028      	movs	r0, r5
 8003306:	f000 f85f 	bl	80033c8 <__swbuf_r>
 800330a:	3001      	adds	r0, #1
 800330c:	d1e8      	bne.n	80032e0 <_puts_r+0x70>
 800330e:	e7cd      	b.n	80032ac <_puts_r+0x3c>
 8003310:	250a      	movs	r5, #10
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	6022      	str	r2, [r4, #0]
 8003318:	701d      	strb	r5, [r3, #0]
 800331a:	e7c9      	b.n	80032b0 <_puts_r+0x40>

0800331c <puts>:
 800331c:	b510      	push	{r4, lr}
 800331e:	4b03      	ldr	r3, [pc, #12]	; (800332c <puts+0x10>)
 8003320:	0001      	movs	r1, r0
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	f7ff ffa4 	bl	8003270 <_puts_r>
 8003328:	bd10      	pop	{r4, pc}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	20000064 	.word	0x20000064

08003330 <__sread>:
 8003330:	b570      	push	{r4, r5, r6, lr}
 8003332:	000c      	movs	r4, r1
 8003334:	250e      	movs	r5, #14
 8003336:	5f49      	ldrsh	r1, [r1, r5]
 8003338:	f000 f91a 	bl	8003570 <_read_r>
 800333c:	2800      	cmp	r0, #0
 800333e:	db03      	blt.n	8003348 <__sread+0x18>
 8003340:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003342:	181b      	adds	r3, r3, r0
 8003344:	6563      	str	r3, [r4, #84]	; 0x54
 8003346:	bd70      	pop	{r4, r5, r6, pc}
 8003348:	89a3      	ldrh	r3, [r4, #12]
 800334a:	4a02      	ldr	r2, [pc, #8]	; (8003354 <__sread+0x24>)
 800334c:	4013      	ands	r3, r2
 800334e:	81a3      	strh	r3, [r4, #12]
 8003350:	e7f9      	b.n	8003346 <__sread+0x16>
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	ffffefff 	.word	0xffffefff

08003358 <__swrite>:
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	001f      	movs	r7, r3
 800335c:	898b      	ldrh	r3, [r1, #12]
 800335e:	0005      	movs	r5, r0
 8003360:	000c      	movs	r4, r1
 8003362:	0016      	movs	r6, r2
 8003364:	05db      	lsls	r3, r3, #23
 8003366:	d505      	bpl.n	8003374 <__swrite+0x1c>
 8003368:	230e      	movs	r3, #14
 800336a:	5ec9      	ldrsh	r1, [r1, r3]
 800336c:	2200      	movs	r2, #0
 800336e:	2302      	movs	r3, #2
 8003370:	f000 f8ea 	bl	8003548 <_lseek_r>
 8003374:	89a3      	ldrh	r3, [r4, #12]
 8003376:	4a05      	ldr	r2, [pc, #20]	; (800338c <__swrite+0x34>)
 8003378:	0028      	movs	r0, r5
 800337a:	4013      	ands	r3, r2
 800337c:	81a3      	strh	r3, [r4, #12]
 800337e:	0032      	movs	r2, r6
 8003380:	230e      	movs	r3, #14
 8003382:	5ee1      	ldrsh	r1, [r4, r3]
 8003384:	003b      	movs	r3, r7
 8003386:	f000 f907 	bl	8003598 <_write_r>
 800338a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800338c:	ffffefff 	.word	0xffffefff

08003390 <__sseek>:
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	000c      	movs	r4, r1
 8003394:	250e      	movs	r5, #14
 8003396:	5f49      	ldrsh	r1, [r1, r5]
 8003398:	f000 f8d6 	bl	8003548 <_lseek_r>
 800339c:	89a3      	ldrh	r3, [r4, #12]
 800339e:	1c42      	adds	r2, r0, #1
 80033a0:	d103      	bne.n	80033aa <__sseek+0x1a>
 80033a2:	4a05      	ldr	r2, [pc, #20]	; (80033b8 <__sseek+0x28>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	81a3      	strh	r3, [r4, #12]
 80033a8:	bd70      	pop	{r4, r5, r6, pc}
 80033aa:	2280      	movs	r2, #128	; 0x80
 80033ac:	0152      	lsls	r2, r2, #5
 80033ae:	4313      	orrs	r3, r2
 80033b0:	81a3      	strh	r3, [r4, #12]
 80033b2:	6560      	str	r0, [r4, #84]	; 0x54
 80033b4:	e7f8      	b.n	80033a8 <__sseek+0x18>
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	ffffefff 	.word	0xffffefff

080033bc <__sclose>:
 80033bc:	b510      	push	{r4, lr}
 80033be:	230e      	movs	r3, #14
 80033c0:	5ec9      	ldrsh	r1, [r1, r3]
 80033c2:	f000 f8af 	bl	8003524 <_close_r>
 80033c6:	bd10      	pop	{r4, pc}

080033c8 <__swbuf_r>:
 80033c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ca:	0006      	movs	r6, r0
 80033cc:	000d      	movs	r5, r1
 80033ce:	0014      	movs	r4, r2
 80033d0:	2800      	cmp	r0, #0
 80033d2:	d004      	beq.n	80033de <__swbuf_r+0x16>
 80033d4:	6a03      	ldr	r3, [r0, #32]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <__swbuf_r+0x16>
 80033da:	f7ff ff15 	bl	8003208 <__sinit>
 80033de:	69a3      	ldr	r3, [r4, #24]
 80033e0:	60a3      	str	r3, [r4, #8]
 80033e2:	89a3      	ldrh	r3, [r4, #12]
 80033e4:	071b      	lsls	r3, r3, #28
 80033e6:	d528      	bpl.n	800343a <__swbuf_r+0x72>
 80033e8:	6923      	ldr	r3, [r4, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d025      	beq.n	800343a <__swbuf_r+0x72>
 80033ee:	6923      	ldr	r3, [r4, #16]
 80033f0:	6820      	ldr	r0, [r4, #0]
 80033f2:	b2ef      	uxtb	r7, r5
 80033f4:	1ac0      	subs	r0, r0, r3
 80033f6:	6963      	ldr	r3, [r4, #20]
 80033f8:	b2ed      	uxtb	r5, r5
 80033fa:	4283      	cmp	r3, r0
 80033fc:	dc05      	bgt.n	800340a <__swbuf_r+0x42>
 80033fe:	0021      	movs	r1, r4
 8003400:	0030      	movs	r0, r6
 8003402:	f000 fa93 	bl	800392c <_fflush_r>
 8003406:	2800      	cmp	r0, #0
 8003408:	d11d      	bne.n	8003446 <__swbuf_r+0x7e>
 800340a:	68a3      	ldr	r3, [r4, #8]
 800340c:	3001      	adds	r0, #1
 800340e:	3b01      	subs	r3, #1
 8003410:	60a3      	str	r3, [r4, #8]
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	6022      	str	r2, [r4, #0]
 8003418:	701f      	strb	r7, [r3, #0]
 800341a:	6963      	ldr	r3, [r4, #20]
 800341c:	4283      	cmp	r3, r0
 800341e:	d004      	beq.n	800342a <__swbuf_r+0x62>
 8003420:	89a3      	ldrh	r3, [r4, #12]
 8003422:	07db      	lsls	r3, r3, #31
 8003424:	d507      	bpl.n	8003436 <__swbuf_r+0x6e>
 8003426:	2d0a      	cmp	r5, #10
 8003428:	d105      	bne.n	8003436 <__swbuf_r+0x6e>
 800342a:	0021      	movs	r1, r4
 800342c:	0030      	movs	r0, r6
 800342e:	f000 fa7d 	bl	800392c <_fflush_r>
 8003432:	2800      	cmp	r0, #0
 8003434:	d107      	bne.n	8003446 <__swbuf_r+0x7e>
 8003436:	0028      	movs	r0, r5
 8003438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800343a:	0021      	movs	r1, r4
 800343c:	0030      	movs	r0, r6
 800343e:	f000 f805 	bl	800344c <__swsetup_r>
 8003442:	2800      	cmp	r0, #0
 8003444:	d0d3      	beq.n	80033ee <__swbuf_r+0x26>
 8003446:	2501      	movs	r5, #1
 8003448:	426d      	negs	r5, r5
 800344a:	e7f4      	b.n	8003436 <__swbuf_r+0x6e>

0800344c <__swsetup_r>:
 800344c:	4b30      	ldr	r3, [pc, #192]	; (8003510 <__swsetup_r+0xc4>)
 800344e:	b570      	push	{r4, r5, r6, lr}
 8003450:	0005      	movs	r5, r0
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	000c      	movs	r4, r1
 8003456:	2800      	cmp	r0, #0
 8003458:	d004      	beq.n	8003464 <__swsetup_r+0x18>
 800345a:	6a03      	ldr	r3, [r0, #32]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <__swsetup_r+0x18>
 8003460:	f7ff fed2 	bl	8003208 <__sinit>
 8003464:	230c      	movs	r3, #12
 8003466:	5ee2      	ldrsh	r2, [r4, r3]
 8003468:	b293      	uxth	r3, r2
 800346a:	0711      	lsls	r1, r2, #28
 800346c:	d423      	bmi.n	80034b6 <__swsetup_r+0x6a>
 800346e:	06d9      	lsls	r1, r3, #27
 8003470:	d407      	bmi.n	8003482 <__swsetup_r+0x36>
 8003472:	2309      	movs	r3, #9
 8003474:	2001      	movs	r0, #1
 8003476:	602b      	str	r3, [r5, #0]
 8003478:	3337      	adds	r3, #55	; 0x37
 800347a:	4313      	orrs	r3, r2
 800347c:	81a3      	strh	r3, [r4, #12]
 800347e:	4240      	negs	r0, r0
 8003480:	bd70      	pop	{r4, r5, r6, pc}
 8003482:	075b      	lsls	r3, r3, #29
 8003484:	d513      	bpl.n	80034ae <__swsetup_r+0x62>
 8003486:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003488:	2900      	cmp	r1, #0
 800348a:	d008      	beq.n	800349e <__swsetup_r+0x52>
 800348c:	0023      	movs	r3, r4
 800348e:	3344      	adds	r3, #68	; 0x44
 8003490:	4299      	cmp	r1, r3
 8003492:	d002      	beq.n	800349a <__swsetup_r+0x4e>
 8003494:	0028      	movs	r0, r5
 8003496:	f000 f8c1 	bl	800361c <_free_r>
 800349a:	2300      	movs	r3, #0
 800349c:	6363      	str	r3, [r4, #52]	; 0x34
 800349e:	2224      	movs	r2, #36	; 0x24
 80034a0:	89a3      	ldrh	r3, [r4, #12]
 80034a2:	4393      	bics	r3, r2
 80034a4:	81a3      	strh	r3, [r4, #12]
 80034a6:	2300      	movs	r3, #0
 80034a8:	6063      	str	r3, [r4, #4]
 80034aa:	6923      	ldr	r3, [r4, #16]
 80034ac:	6023      	str	r3, [r4, #0]
 80034ae:	2308      	movs	r3, #8
 80034b0:	89a2      	ldrh	r2, [r4, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	81a3      	strh	r3, [r4, #12]
 80034b6:	6923      	ldr	r3, [r4, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10b      	bne.n	80034d4 <__swsetup_r+0x88>
 80034bc:	21a0      	movs	r1, #160	; 0xa0
 80034be:	2280      	movs	r2, #128	; 0x80
 80034c0:	89a3      	ldrh	r3, [r4, #12]
 80034c2:	0089      	lsls	r1, r1, #2
 80034c4:	0092      	lsls	r2, r2, #2
 80034c6:	400b      	ands	r3, r1
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <__swsetup_r+0x88>
 80034cc:	0021      	movs	r1, r4
 80034ce:	0028      	movs	r0, r5
 80034d0:	f000 fa80 	bl	80039d4 <__smakebuf_r>
 80034d4:	220c      	movs	r2, #12
 80034d6:	5ea3      	ldrsh	r3, [r4, r2]
 80034d8:	2001      	movs	r0, #1
 80034da:	001a      	movs	r2, r3
 80034dc:	b299      	uxth	r1, r3
 80034de:	4002      	ands	r2, r0
 80034e0:	4203      	tst	r3, r0
 80034e2:	d00f      	beq.n	8003504 <__swsetup_r+0xb8>
 80034e4:	2200      	movs	r2, #0
 80034e6:	60a2      	str	r2, [r4, #8]
 80034e8:	6962      	ldr	r2, [r4, #20]
 80034ea:	4252      	negs	r2, r2
 80034ec:	61a2      	str	r2, [r4, #24]
 80034ee:	2000      	movs	r0, #0
 80034f0:	6922      	ldr	r2, [r4, #16]
 80034f2:	4282      	cmp	r2, r0
 80034f4:	d1c4      	bne.n	8003480 <__swsetup_r+0x34>
 80034f6:	0609      	lsls	r1, r1, #24
 80034f8:	d5c2      	bpl.n	8003480 <__swsetup_r+0x34>
 80034fa:	2240      	movs	r2, #64	; 0x40
 80034fc:	4313      	orrs	r3, r2
 80034fe:	81a3      	strh	r3, [r4, #12]
 8003500:	3801      	subs	r0, #1
 8003502:	e7bd      	b.n	8003480 <__swsetup_r+0x34>
 8003504:	0788      	lsls	r0, r1, #30
 8003506:	d400      	bmi.n	800350a <__swsetup_r+0xbe>
 8003508:	6962      	ldr	r2, [r4, #20]
 800350a:	60a2      	str	r2, [r4, #8]
 800350c:	e7ef      	b.n	80034ee <__swsetup_r+0xa2>
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	20000064 	.word	0x20000064

08003514 <memset>:
 8003514:	0003      	movs	r3, r0
 8003516:	1882      	adds	r2, r0, r2
 8003518:	4293      	cmp	r3, r2
 800351a:	d100      	bne.n	800351e <memset+0xa>
 800351c:	4770      	bx	lr
 800351e:	7019      	strb	r1, [r3, #0]
 8003520:	3301      	adds	r3, #1
 8003522:	e7f9      	b.n	8003518 <memset+0x4>

08003524 <_close_r>:
 8003524:	2300      	movs	r3, #0
 8003526:	b570      	push	{r4, r5, r6, lr}
 8003528:	4d06      	ldr	r5, [pc, #24]	; (8003544 <_close_r+0x20>)
 800352a:	0004      	movs	r4, r0
 800352c:	0008      	movs	r0, r1
 800352e:	602b      	str	r3, [r5, #0]
 8003530:	f7fd f9be 	bl	80008b0 <_close>
 8003534:	1c43      	adds	r3, r0, #1
 8003536:	d103      	bne.n	8003540 <_close_r+0x1c>
 8003538:	682b      	ldr	r3, [r5, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d000      	beq.n	8003540 <_close_r+0x1c>
 800353e:	6023      	str	r3, [r4, #0]
 8003540:	bd70      	pop	{r4, r5, r6, pc}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	20000290 	.word	0x20000290

08003548 <_lseek_r>:
 8003548:	b570      	push	{r4, r5, r6, lr}
 800354a:	0004      	movs	r4, r0
 800354c:	0008      	movs	r0, r1
 800354e:	0011      	movs	r1, r2
 8003550:	001a      	movs	r2, r3
 8003552:	2300      	movs	r3, #0
 8003554:	4d05      	ldr	r5, [pc, #20]	; (800356c <_lseek_r+0x24>)
 8003556:	602b      	str	r3, [r5, #0]
 8003558:	f7fd f9cb 	bl	80008f2 <_lseek>
 800355c:	1c43      	adds	r3, r0, #1
 800355e:	d103      	bne.n	8003568 <_lseek_r+0x20>
 8003560:	682b      	ldr	r3, [r5, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d000      	beq.n	8003568 <_lseek_r+0x20>
 8003566:	6023      	str	r3, [r4, #0]
 8003568:	bd70      	pop	{r4, r5, r6, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	20000290 	.word	0x20000290

08003570 <_read_r>:
 8003570:	b570      	push	{r4, r5, r6, lr}
 8003572:	0004      	movs	r4, r0
 8003574:	0008      	movs	r0, r1
 8003576:	0011      	movs	r1, r2
 8003578:	001a      	movs	r2, r3
 800357a:	2300      	movs	r3, #0
 800357c:	4d05      	ldr	r5, [pc, #20]	; (8003594 <_read_r+0x24>)
 800357e:	602b      	str	r3, [r5, #0]
 8003580:	f7fd f962 	bl	8000848 <_read>
 8003584:	1c43      	adds	r3, r0, #1
 8003586:	d103      	bne.n	8003590 <_read_r+0x20>
 8003588:	682b      	ldr	r3, [r5, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d000      	beq.n	8003590 <_read_r+0x20>
 800358e:	6023      	str	r3, [r4, #0]
 8003590:	bd70      	pop	{r4, r5, r6, pc}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	20000290 	.word	0x20000290

08003598 <_write_r>:
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	0004      	movs	r4, r0
 800359c:	0008      	movs	r0, r1
 800359e:	0011      	movs	r1, r2
 80035a0:	001a      	movs	r2, r3
 80035a2:	2300      	movs	r3, #0
 80035a4:	4d05      	ldr	r5, [pc, #20]	; (80035bc <_write_r+0x24>)
 80035a6:	602b      	str	r3, [r5, #0]
 80035a8:	f7fd f96c 	bl	8000884 <_write>
 80035ac:	1c43      	adds	r3, r0, #1
 80035ae:	d103      	bne.n	80035b8 <_write_r+0x20>
 80035b0:	682b      	ldr	r3, [r5, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d000      	beq.n	80035b8 <_write_r+0x20>
 80035b6:	6023      	str	r3, [r4, #0]
 80035b8:	bd70      	pop	{r4, r5, r6, pc}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	20000290 	.word	0x20000290

080035c0 <__errno>:
 80035c0:	4b01      	ldr	r3, [pc, #4]	; (80035c8 <__errno+0x8>)
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	4770      	bx	lr
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	20000064 	.word	0x20000064

080035cc <__libc_init_array>:
 80035cc:	b570      	push	{r4, r5, r6, lr}
 80035ce:	2600      	movs	r6, #0
 80035d0:	4c0c      	ldr	r4, [pc, #48]	; (8003604 <__libc_init_array+0x38>)
 80035d2:	4d0d      	ldr	r5, [pc, #52]	; (8003608 <__libc_init_array+0x3c>)
 80035d4:	1b64      	subs	r4, r4, r5
 80035d6:	10a4      	asrs	r4, r4, #2
 80035d8:	42a6      	cmp	r6, r4
 80035da:	d109      	bne.n	80035f0 <__libc_init_array+0x24>
 80035dc:	2600      	movs	r6, #0
 80035de:	f000 fa6d 	bl	8003abc <_init>
 80035e2:	4c0a      	ldr	r4, [pc, #40]	; (800360c <__libc_init_array+0x40>)
 80035e4:	4d0a      	ldr	r5, [pc, #40]	; (8003610 <__libc_init_array+0x44>)
 80035e6:	1b64      	subs	r4, r4, r5
 80035e8:	10a4      	asrs	r4, r4, #2
 80035ea:	42a6      	cmp	r6, r4
 80035ec:	d105      	bne.n	80035fa <__libc_init_array+0x2e>
 80035ee:	bd70      	pop	{r4, r5, r6, pc}
 80035f0:	00b3      	lsls	r3, r6, #2
 80035f2:	58eb      	ldr	r3, [r5, r3]
 80035f4:	4798      	blx	r3
 80035f6:	3601      	adds	r6, #1
 80035f8:	e7ee      	b.n	80035d8 <__libc_init_array+0xc>
 80035fa:	00b3      	lsls	r3, r6, #2
 80035fc:	58eb      	ldr	r3, [r5, r3]
 80035fe:	4798      	blx	r3
 8003600:	3601      	adds	r6, #1
 8003602:	e7f2      	b.n	80035ea <__libc_init_array+0x1e>
 8003604:	08003b74 	.word	0x08003b74
 8003608:	08003b74 	.word	0x08003b74
 800360c:	08003b78 	.word	0x08003b78
 8003610:	08003b74 	.word	0x08003b74

08003614 <__retarget_lock_init_recursive>:
 8003614:	4770      	bx	lr

08003616 <__retarget_lock_acquire_recursive>:
 8003616:	4770      	bx	lr

08003618 <__retarget_lock_release_recursive>:
 8003618:	4770      	bx	lr
	...

0800361c <_free_r>:
 800361c:	b570      	push	{r4, r5, r6, lr}
 800361e:	0005      	movs	r5, r0
 8003620:	2900      	cmp	r1, #0
 8003622:	d010      	beq.n	8003646 <_free_r+0x2a>
 8003624:	1f0c      	subs	r4, r1, #4
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	da00      	bge.n	800362e <_free_r+0x12>
 800362c:	18e4      	adds	r4, r4, r3
 800362e:	0028      	movs	r0, r5
 8003630:	f000 f8e2 	bl	80037f8 <__malloc_lock>
 8003634:	4a1d      	ldr	r2, [pc, #116]	; (80036ac <_free_r+0x90>)
 8003636:	6813      	ldr	r3, [r2, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d105      	bne.n	8003648 <_free_r+0x2c>
 800363c:	6063      	str	r3, [r4, #4]
 800363e:	6014      	str	r4, [r2, #0]
 8003640:	0028      	movs	r0, r5
 8003642:	f000 f8e1 	bl	8003808 <__malloc_unlock>
 8003646:	bd70      	pop	{r4, r5, r6, pc}
 8003648:	42a3      	cmp	r3, r4
 800364a:	d908      	bls.n	800365e <_free_r+0x42>
 800364c:	6820      	ldr	r0, [r4, #0]
 800364e:	1821      	adds	r1, r4, r0
 8003650:	428b      	cmp	r3, r1
 8003652:	d1f3      	bne.n	800363c <_free_r+0x20>
 8003654:	6819      	ldr	r1, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	1809      	adds	r1, r1, r0
 800365a:	6021      	str	r1, [r4, #0]
 800365c:	e7ee      	b.n	800363c <_free_r+0x20>
 800365e:	001a      	movs	r2, r3
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <_free_r+0x4e>
 8003666:	42a3      	cmp	r3, r4
 8003668:	d9f9      	bls.n	800365e <_free_r+0x42>
 800366a:	6811      	ldr	r1, [r2, #0]
 800366c:	1850      	adds	r0, r2, r1
 800366e:	42a0      	cmp	r0, r4
 8003670:	d10b      	bne.n	800368a <_free_r+0x6e>
 8003672:	6820      	ldr	r0, [r4, #0]
 8003674:	1809      	adds	r1, r1, r0
 8003676:	1850      	adds	r0, r2, r1
 8003678:	6011      	str	r1, [r2, #0]
 800367a:	4283      	cmp	r3, r0
 800367c:	d1e0      	bne.n	8003640 <_free_r+0x24>
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	1841      	adds	r1, r0, r1
 8003684:	6011      	str	r1, [r2, #0]
 8003686:	6053      	str	r3, [r2, #4]
 8003688:	e7da      	b.n	8003640 <_free_r+0x24>
 800368a:	42a0      	cmp	r0, r4
 800368c:	d902      	bls.n	8003694 <_free_r+0x78>
 800368e:	230c      	movs	r3, #12
 8003690:	602b      	str	r3, [r5, #0]
 8003692:	e7d5      	b.n	8003640 <_free_r+0x24>
 8003694:	6820      	ldr	r0, [r4, #0]
 8003696:	1821      	adds	r1, r4, r0
 8003698:	428b      	cmp	r3, r1
 800369a:	d103      	bne.n	80036a4 <_free_r+0x88>
 800369c:	6819      	ldr	r1, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	1809      	adds	r1, r1, r0
 80036a2:	6021      	str	r1, [r4, #0]
 80036a4:	6063      	str	r3, [r4, #4]
 80036a6:	6054      	str	r4, [r2, #4]
 80036a8:	e7ca      	b.n	8003640 <_free_r+0x24>
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	20000298 	.word	0x20000298

080036b0 <sbrk_aligned>:
 80036b0:	b570      	push	{r4, r5, r6, lr}
 80036b2:	4e0f      	ldr	r6, [pc, #60]	; (80036f0 <sbrk_aligned+0x40>)
 80036b4:	000d      	movs	r5, r1
 80036b6:	6831      	ldr	r1, [r6, #0]
 80036b8:	0004      	movs	r4, r0
 80036ba:	2900      	cmp	r1, #0
 80036bc:	d102      	bne.n	80036c4 <sbrk_aligned+0x14>
 80036be:	f000 f9eb 	bl	8003a98 <_sbrk_r>
 80036c2:	6030      	str	r0, [r6, #0]
 80036c4:	0029      	movs	r1, r5
 80036c6:	0020      	movs	r0, r4
 80036c8:	f000 f9e6 	bl	8003a98 <_sbrk_r>
 80036cc:	1c43      	adds	r3, r0, #1
 80036ce:	d00a      	beq.n	80036e6 <sbrk_aligned+0x36>
 80036d0:	2303      	movs	r3, #3
 80036d2:	1cc5      	adds	r5, r0, #3
 80036d4:	439d      	bics	r5, r3
 80036d6:	42a8      	cmp	r0, r5
 80036d8:	d007      	beq.n	80036ea <sbrk_aligned+0x3a>
 80036da:	1a29      	subs	r1, r5, r0
 80036dc:	0020      	movs	r0, r4
 80036de:	f000 f9db 	bl	8003a98 <_sbrk_r>
 80036e2:	3001      	adds	r0, #1
 80036e4:	d101      	bne.n	80036ea <sbrk_aligned+0x3a>
 80036e6:	2501      	movs	r5, #1
 80036e8:	426d      	negs	r5, r5
 80036ea:	0028      	movs	r0, r5
 80036ec:	bd70      	pop	{r4, r5, r6, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	2000029c 	.word	0x2000029c

080036f4 <_malloc_r>:
 80036f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036f6:	2203      	movs	r2, #3
 80036f8:	1ccb      	adds	r3, r1, #3
 80036fa:	4393      	bics	r3, r2
 80036fc:	3308      	adds	r3, #8
 80036fe:	0006      	movs	r6, r0
 8003700:	001f      	movs	r7, r3
 8003702:	2b0c      	cmp	r3, #12
 8003704:	d238      	bcs.n	8003778 <_malloc_r+0x84>
 8003706:	270c      	movs	r7, #12
 8003708:	42b9      	cmp	r1, r7
 800370a:	d837      	bhi.n	800377c <_malloc_r+0x88>
 800370c:	0030      	movs	r0, r6
 800370e:	f000 f873 	bl	80037f8 <__malloc_lock>
 8003712:	4b38      	ldr	r3, [pc, #224]	; (80037f4 <_malloc_r+0x100>)
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	001c      	movs	r4, r3
 800371a:	2c00      	cmp	r4, #0
 800371c:	d133      	bne.n	8003786 <_malloc_r+0x92>
 800371e:	0039      	movs	r1, r7
 8003720:	0030      	movs	r0, r6
 8003722:	f7ff ffc5 	bl	80036b0 <sbrk_aligned>
 8003726:	0004      	movs	r4, r0
 8003728:	1c43      	adds	r3, r0, #1
 800372a:	d15e      	bne.n	80037ea <_malloc_r+0xf6>
 800372c:	9b00      	ldr	r3, [sp, #0]
 800372e:	681c      	ldr	r4, [r3, #0]
 8003730:	0025      	movs	r5, r4
 8003732:	2d00      	cmp	r5, #0
 8003734:	d14e      	bne.n	80037d4 <_malloc_r+0xe0>
 8003736:	2c00      	cmp	r4, #0
 8003738:	d051      	beq.n	80037de <_malloc_r+0xea>
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	0029      	movs	r1, r5
 800373e:	18e3      	adds	r3, r4, r3
 8003740:	0030      	movs	r0, r6
 8003742:	9301      	str	r3, [sp, #4]
 8003744:	f000 f9a8 	bl	8003a98 <_sbrk_r>
 8003748:	9b01      	ldr	r3, [sp, #4]
 800374a:	4283      	cmp	r3, r0
 800374c:	d147      	bne.n	80037de <_malloc_r+0xea>
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	0030      	movs	r0, r6
 8003752:	1aff      	subs	r7, r7, r3
 8003754:	0039      	movs	r1, r7
 8003756:	f7ff ffab 	bl	80036b0 <sbrk_aligned>
 800375a:	3001      	adds	r0, #1
 800375c:	d03f      	beq.n	80037de <_malloc_r+0xea>
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	19db      	adds	r3, r3, r7
 8003762:	6023      	str	r3, [r4, #0]
 8003764:	9b00      	ldr	r3, [sp, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d040      	beq.n	80037ee <_malloc_r+0xfa>
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	42a2      	cmp	r2, r4
 8003770:	d133      	bne.n	80037da <_malloc_r+0xe6>
 8003772:	2200      	movs	r2, #0
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	e014      	b.n	80037a2 <_malloc_r+0xae>
 8003778:	2b00      	cmp	r3, #0
 800377a:	dac5      	bge.n	8003708 <_malloc_r+0x14>
 800377c:	230c      	movs	r3, #12
 800377e:	2500      	movs	r5, #0
 8003780:	6033      	str	r3, [r6, #0]
 8003782:	0028      	movs	r0, r5
 8003784:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003786:	6821      	ldr	r1, [r4, #0]
 8003788:	1bc9      	subs	r1, r1, r7
 800378a:	d420      	bmi.n	80037ce <_malloc_r+0xda>
 800378c:	290b      	cmp	r1, #11
 800378e:	d918      	bls.n	80037c2 <_malloc_r+0xce>
 8003790:	19e2      	adds	r2, r4, r7
 8003792:	6027      	str	r7, [r4, #0]
 8003794:	42a3      	cmp	r3, r4
 8003796:	d112      	bne.n	80037be <_malloc_r+0xca>
 8003798:	9b00      	ldr	r3, [sp, #0]
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	6863      	ldr	r3, [r4, #4]
 800379e:	6011      	str	r1, [r2, #0]
 80037a0:	6053      	str	r3, [r2, #4]
 80037a2:	0030      	movs	r0, r6
 80037a4:	0025      	movs	r5, r4
 80037a6:	f000 f82f 	bl	8003808 <__malloc_unlock>
 80037aa:	2207      	movs	r2, #7
 80037ac:	350b      	adds	r5, #11
 80037ae:	1d23      	adds	r3, r4, #4
 80037b0:	4395      	bics	r5, r2
 80037b2:	1aea      	subs	r2, r5, r3
 80037b4:	429d      	cmp	r5, r3
 80037b6:	d0e4      	beq.n	8003782 <_malloc_r+0x8e>
 80037b8:	1b5b      	subs	r3, r3, r5
 80037ba:	50a3      	str	r3, [r4, r2]
 80037bc:	e7e1      	b.n	8003782 <_malloc_r+0x8e>
 80037be:	605a      	str	r2, [r3, #4]
 80037c0:	e7ec      	b.n	800379c <_malloc_r+0xa8>
 80037c2:	6862      	ldr	r2, [r4, #4]
 80037c4:	42a3      	cmp	r3, r4
 80037c6:	d1d5      	bne.n	8003774 <_malloc_r+0x80>
 80037c8:	9b00      	ldr	r3, [sp, #0]
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	e7e9      	b.n	80037a2 <_malloc_r+0xae>
 80037ce:	0023      	movs	r3, r4
 80037d0:	6864      	ldr	r4, [r4, #4]
 80037d2:	e7a2      	b.n	800371a <_malloc_r+0x26>
 80037d4:	002c      	movs	r4, r5
 80037d6:	686d      	ldr	r5, [r5, #4]
 80037d8:	e7ab      	b.n	8003732 <_malloc_r+0x3e>
 80037da:	0013      	movs	r3, r2
 80037dc:	e7c4      	b.n	8003768 <_malloc_r+0x74>
 80037de:	230c      	movs	r3, #12
 80037e0:	0030      	movs	r0, r6
 80037e2:	6033      	str	r3, [r6, #0]
 80037e4:	f000 f810 	bl	8003808 <__malloc_unlock>
 80037e8:	e7cb      	b.n	8003782 <_malloc_r+0x8e>
 80037ea:	6027      	str	r7, [r4, #0]
 80037ec:	e7d9      	b.n	80037a2 <_malloc_r+0xae>
 80037ee:	605b      	str	r3, [r3, #4]
 80037f0:	deff      	udf	#255	; 0xff
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	20000298 	.word	0x20000298

080037f8 <__malloc_lock>:
 80037f8:	b510      	push	{r4, lr}
 80037fa:	4802      	ldr	r0, [pc, #8]	; (8003804 <__malloc_lock+0xc>)
 80037fc:	f7ff ff0b 	bl	8003616 <__retarget_lock_acquire_recursive>
 8003800:	bd10      	pop	{r4, pc}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	20000294 	.word	0x20000294

08003808 <__malloc_unlock>:
 8003808:	b510      	push	{r4, lr}
 800380a:	4802      	ldr	r0, [pc, #8]	; (8003814 <__malloc_unlock+0xc>)
 800380c:	f7ff ff04 	bl	8003618 <__retarget_lock_release_recursive>
 8003810:	bd10      	pop	{r4, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	20000294 	.word	0x20000294

08003818 <__sflush_r>:
 8003818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800381a:	898b      	ldrh	r3, [r1, #12]
 800381c:	0005      	movs	r5, r0
 800381e:	000c      	movs	r4, r1
 8003820:	071a      	lsls	r2, r3, #28
 8003822:	d45c      	bmi.n	80038de <__sflush_r+0xc6>
 8003824:	684a      	ldr	r2, [r1, #4]
 8003826:	2a00      	cmp	r2, #0
 8003828:	dc04      	bgt.n	8003834 <__sflush_r+0x1c>
 800382a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800382c:	2a00      	cmp	r2, #0
 800382e:	dc01      	bgt.n	8003834 <__sflush_r+0x1c>
 8003830:	2000      	movs	r0, #0
 8003832:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003834:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003836:	2f00      	cmp	r7, #0
 8003838:	d0fa      	beq.n	8003830 <__sflush_r+0x18>
 800383a:	2200      	movs	r2, #0
 800383c:	2080      	movs	r0, #128	; 0x80
 800383e:	682e      	ldr	r6, [r5, #0]
 8003840:	602a      	str	r2, [r5, #0]
 8003842:	001a      	movs	r2, r3
 8003844:	0140      	lsls	r0, r0, #5
 8003846:	6a21      	ldr	r1, [r4, #32]
 8003848:	4002      	ands	r2, r0
 800384a:	4203      	tst	r3, r0
 800384c:	d034      	beq.n	80038b8 <__sflush_r+0xa0>
 800384e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003850:	89a3      	ldrh	r3, [r4, #12]
 8003852:	075b      	lsls	r3, r3, #29
 8003854:	d506      	bpl.n	8003864 <__sflush_r+0x4c>
 8003856:	6863      	ldr	r3, [r4, #4]
 8003858:	1ac0      	subs	r0, r0, r3
 800385a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <__sflush_r+0x4c>
 8003860:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003862:	1ac0      	subs	r0, r0, r3
 8003864:	0002      	movs	r2, r0
 8003866:	2300      	movs	r3, #0
 8003868:	0028      	movs	r0, r5
 800386a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800386c:	6a21      	ldr	r1, [r4, #32]
 800386e:	47b8      	blx	r7
 8003870:	89a2      	ldrh	r2, [r4, #12]
 8003872:	1c43      	adds	r3, r0, #1
 8003874:	d106      	bne.n	8003884 <__sflush_r+0x6c>
 8003876:	6829      	ldr	r1, [r5, #0]
 8003878:	291d      	cmp	r1, #29
 800387a:	d82c      	bhi.n	80038d6 <__sflush_r+0xbe>
 800387c:	4b2a      	ldr	r3, [pc, #168]	; (8003928 <__sflush_r+0x110>)
 800387e:	410b      	asrs	r3, r1
 8003880:	07db      	lsls	r3, r3, #31
 8003882:	d428      	bmi.n	80038d6 <__sflush_r+0xbe>
 8003884:	2300      	movs	r3, #0
 8003886:	6063      	str	r3, [r4, #4]
 8003888:	6923      	ldr	r3, [r4, #16]
 800388a:	6023      	str	r3, [r4, #0]
 800388c:	04d2      	lsls	r2, r2, #19
 800388e:	d505      	bpl.n	800389c <__sflush_r+0x84>
 8003890:	1c43      	adds	r3, r0, #1
 8003892:	d102      	bne.n	800389a <__sflush_r+0x82>
 8003894:	682b      	ldr	r3, [r5, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d100      	bne.n	800389c <__sflush_r+0x84>
 800389a:	6560      	str	r0, [r4, #84]	; 0x54
 800389c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800389e:	602e      	str	r6, [r5, #0]
 80038a0:	2900      	cmp	r1, #0
 80038a2:	d0c5      	beq.n	8003830 <__sflush_r+0x18>
 80038a4:	0023      	movs	r3, r4
 80038a6:	3344      	adds	r3, #68	; 0x44
 80038a8:	4299      	cmp	r1, r3
 80038aa:	d002      	beq.n	80038b2 <__sflush_r+0x9a>
 80038ac:	0028      	movs	r0, r5
 80038ae:	f7ff feb5 	bl	800361c <_free_r>
 80038b2:	2000      	movs	r0, #0
 80038b4:	6360      	str	r0, [r4, #52]	; 0x34
 80038b6:	e7bc      	b.n	8003832 <__sflush_r+0x1a>
 80038b8:	2301      	movs	r3, #1
 80038ba:	0028      	movs	r0, r5
 80038bc:	47b8      	blx	r7
 80038be:	1c43      	adds	r3, r0, #1
 80038c0:	d1c6      	bne.n	8003850 <__sflush_r+0x38>
 80038c2:	682b      	ldr	r3, [r5, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0c3      	beq.n	8003850 <__sflush_r+0x38>
 80038c8:	2b1d      	cmp	r3, #29
 80038ca:	d001      	beq.n	80038d0 <__sflush_r+0xb8>
 80038cc:	2b16      	cmp	r3, #22
 80038ce:	d101      	bne.n	80038d4 <__sflush_r+0xbc>
 80038d0:	602e      	str	r6, [r5, #0]
 80038d2:	e7ad      	b.n	8003830 <__sflush_r+0x18>
 80038d4:	89a2      	ldrh	r2, [r4, #12]
 80038d6:	2340      	movs	r3, #64	; 0x40
 80038d8:	4313      	orrs	r3, r2
 80038da:	81a3      	strh	r3, [r4, #12]
 80038dc:	e7a9      	b.n	8003832 <__sflush_r+0x1a>
 80038de:	690e      	ldr	r6, [r1, #16]
 80038e0:	2e00      	cmp	r6, #0
 80038e2:	d0a5      	beq.n	8003830 <__sflush_r+0x18>
 80038e4:	680f      	ldr	r7, [r1, #0]
 80038e6:	600e      	str	r6, [r1, #0]
 80038e8:	1bba      	subs	r2, r7, r6
 80038ea:	9201      	str	r2, [sp, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	079b      	lsls	r3, r3, #30
 80038f0:	d100      	bne.n	80038f4 <__sflush_r+0xdc>
 80038f2:	694a      	ldr	r2, [r1, #20]
 80038f4:	60a2      	str	r2, [r4, #8]
 80038f6:	9b01      	ldr	r3, [sp, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	dd99      	ble.n	8003830 <__sflush_r+0x18>
 80038fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80038fe:	0032      	movs	r2, r6
 8003900:	001f      	movs	r7, r3
 8003902:	0028      	movs	r0, r5
 8003904:	9b01      	ldr	r3, [sp, #4]
 8003906:	6a21      	ldr	r1, [r4, #32]
 8003908:	47b8      	blx	r7
 800390a:	2800      	cmp	r0, #0
 800390c:	dc06      	bgt.n	800391c <__sflush_r+0x104>
 800390e:	2340      	movs	r3, #64	; 0x40
 8003910:	2001      	movs	r0, #1
 8003912:	89a2      	ldrh	r2, [r4, #12]
 8003914:	4240      	negs	r0, r0
 8003916:	4313      	orrs	r3, r2
 8003918:	81a3      	strh	r3, [r4, #12]
 800391a:	e78a      	b.n	8003832 <__sflush_r+0x1a>
 800391c:	9b01      	ldr	r3, [sp, #4]
 800391e:	1836      	adds	r6, r6, r0
 8003920:	1a1b      	subs	r3, r3, r0
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	e7e7      	b.n	80038f6 <__sflush_r+0xde>
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	dfbffffe 	.word	0xdfbffffe

0800392c <_fflush_r>:
 800392c:	690b      	ldr	r3, [r1, #16]
 800392e:	b570      	push	{r4, r5, r6, lr}
 8003930:	0005      	movs	r5, r0
 8003932:	000c      	movs	r4, r1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <_fflush_r+0x12>
 8003938:	2500      	movs	r5, #0
 800393a:	0028      	movs	r0, r5
 800393c:	bd70      	pop	{r4, r5, r6, pc}
 800393e:	2800      	cmp	r0, #0
 8003940:	d004      	beq.n	800394c <_fflush_r+0x20>
 8003942:	6a03      	ldr	r3, [r0, #32]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <_fflush_r+0x20>
 8003948:	f7ff fc5e 	bl	8003208 <__sinit>
 800394c:	220c      	movs	r2, #12
 800394e:	5ea3      	ldrsh	r3, [r4, r2]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0f1      	beq.n	8003938 <_fflush_r+0xc>
 8003954:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003956:	07d2      	lsls	r2, r2, #31
 8003958:	d404      	bmi.n	8003964 <_fflush_r+0x38>
 800395a:	059b      	lsls	r3, r3, #22
 800395c:	d402      	bmi.n	8003964 <_fflush_r+0x38>
 800395e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003960:	f7ff fe59 	bl	8003616 <__retarget_lock_acquire_recursive>
 8003964:	0028      	movs	r0, r5
 8003966:	0021      	movs	r1, r4
 8003968:	f7ff ff56 	bl	8003818 <__sflush_r>
 800396c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800396e:	0005      	movs	r5, r0
 8003970:	07db      	lsls	r3, r3, #31
 8003972:	d4e2      	bmi.n	800393a <_fflush_r+0xe>
 8003974:	89a3      	ldrh	r3, [r4, #12]
 8003976:	059b      	lsls	r3, r3, #22
 8003978:	d4df      	bmi.n	800393a <_fflush_r+0xe>
 800397a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800397c:	f7ff fe4c 	bl	8003618 <__retarget_lock_release_recursive>
 8003980:	e7db      	b.n	800393a <_fflush_r+0xe>
	...

08003984 <__swhatbuf_r>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	000e      	movs	r6, r1
 8003988:	001d      	movs	r5, r3
 800398a:	230e      	movs	r3, #14
 800398c:	5ec9      	ldrsh	r1, [r1, r3]
 800398e:	0014      	movs	r4, r2
 8003990:	b096      	sub	sp, #88	; 0x58
 8003992:	2900      	cmp	r1, #0
 8003994:	da0c      	bge.n	80039b0 <__swhatbuf_r+0x2c>
 8003996:	89b2      	ldrh	r2, [r6, #12]
 8003998:	2380      	movs	r3, #128	; 0x80
 800399a:	0011      	movs	r1, r2
 800399c:	4019      	ands	r1, r3
 800399e:	421a      	tst	r2, r3
 80039a0:	d013      	beq.n	80039ca <__swhatbuf_r+0x46>
 80039a2:	2100      	movs	r1, #0
 80039a4:	3b40      	subs	r3, #64	; 0x40
 80039a6:	2000      	movs	r0, #0
 80039a8:	6029      	str	r1, [r5, #0]
 80039aa:	6023      	str	r3, [r4, #0]
 80039ac:	b016      	add	sp, #88	; 0x58
 80039ae:	bd70      	pop	{r4, r5, r6, pc}
 80039b0:	466a      	mov	r2, sp
 80039b2:	f000 f84d 	bl	8003a50 <_fstat_r>
 80039b6:	2800      	cmp	r0, #0
 80039b8:	dbed      	blt.n	8003996 <__swhatbuf_r+0x12>
 80039ba:	23f0      	movs	r3, #240	; 0xf0
 80039bc:	9901      	ldr	r1, [sp, #4]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	4019      	ands	r1, r3
 80039c2:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <__swhatbuf_r+0x4c>)
 80039c4:	18c9      	adds	r1, r1, r3
 80039c6:	424b      	negs	r3, r1
 80039c8:	4159      	adcs	r1, r3
 80039ca:	2380      	movs	r3, #128	; 0x80
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	e7ea      	b.n	80039a6 <__swhatbuf_r+0x22>
 80039d0:	ffffe000 	.word	0xffffe000

080039d4 <__smakebuf_r>:
 80039d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039d6:	2602      	movs	r6, #2
 80039d8:	898b      	ldrh	r3, [r1, #12]
 80039da:	0005      	movs	r5, r0
 80039dc:	000c      	movs	r4, r1
 80039de:	4233      	tst	r3, r6
 80039e0:	d006      	beq.n	80039f0 <__smakebuf_r+0x1c>
 80039e2:	0023      	movs	r3, r4
 80039e4:	3347      	adds	r3, #71	; 0x47
 80039e6:	6023      	str	r3, [r4, #0]
 80039e8:	6123      	str	r3, [r4, #16]
 80039ea:	2301      	movs	r3, #1
 80039ec:	6163      	str	r3, [r4, #20]
 80039ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80039f0:	466a      	mov	r2, sp
 80039f2:	ab01      	add	r3, sp, #4
 80039f4:	f7ff ffc6 	bl	8003984 <__swhatbuf_r>
 80039f8:	9900      	ldr	r1, [sp, #0]
 80039fa:	0007      	movs	r7, r0
 80039fc:	0028      	movs	r0, r5
 80039fe:	f7ff fe79 	bl	80036f4 <_malloc_r>
 8003a02:	2800      	cmp	r0, #0
 8003a04:	d108      	bne.n	8003a18 <__smakebuf_r+0x44>
 8003a06:	220c      	movs	r2, #12
 8003a08:	5ea3      	ldrsh	r3, [r4, r2]
 8003a0a:	059a      	lsls	r2, r3, #22
 8003a0c:	d4ef      	bmi.n	80039ee <__smakebuf_r+0x1a>
 8003a0e:	2203      	movs	r2, #3
 8003a10:	4393      	bics	r3, r2
 8003a12:	431e      	orrs	r6, r3
 8003a14:	81a6      	strh	r6, [r4, #12]
 8003a16:	e7e4      	b.n	80039e2 <__smakebuf_r+0xe>
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	89a2      	ldrh	r2, [r4, #12]
 8003a1c:	6020      	str	r0, [r4, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	81a3      	strh	r3, [r4, #12]
 8003a22:	9b00      	ldr	r3, [sp, #0]
 8003a24:	6120      	str	r0, [r4, #16]
 8003a26:	6163      	str	r3, [r4, #20]
 8003a28:	9b01      	ldr	r3, [sp, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00c      	beq.n	8003a48 <__smakebuf_r+0x74>
 8003a2e:	0028      	movs	r0, r5
 8003a30:	230e      	movs	r3, #14
 8003a32:	5ee1      	ldrsh	r1, [r4, r3]
 8003a34:	f000 f81e 	bl	8003a74 <_isatty_r>
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	d005      	beq.n	8003a48 <__smakebuf_r+0x74>
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	89a2      	ldrh	r2, [r4, #12]
 8003a40:	439a      	bics	r2, r3
 8003a42:	3b02      	subs	r3, #2
 8003a44:	4313      	orrs	r3, r2
 8003a46:	81a3      	strh	r3, [r4, #12]
 8003a48:	89a3      	ldrh	r3, [r4, #12]
 8003a4a:	433b      	orrs	r3, r7
 8003a4c:	81a3      	strh	r3, [r4, #12]
 8003a4e:	e7ce      	b.n	80039ee <__smakebuf_r+0x1a>

08003a50 <_fstat_r>:
 8003a50:	2300      	movs	r3, #0
 8003a52:	b570      	push	{r4, r5, r6, lr}
 8003a54:	4d06      	ldr	r5, [pc, #24]	; (8003a70 <_fstat_r+0x20>)
 8003a56:	0004      	movs	r4, r0
 8003a58:	0008      	movs	r0, r1
 8003a5a:	0011      	movs	r1, r2
 8003a5c:	602b      	str	r3, [r5, #0]
 8003a5e:	f7fc ff31 	bl	80008c4 <_fstat>
 8003a62:	1c43      	adds	r3, r0, #1
 8003a64:	d103      	bne.n	8003a6e <_fstat_r+0x1e>
 8003a66:	682b      	ldr	r3, [r5, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d000      	beq.n	8003a6e <_fstat_r+0x1e>
 8003a6c:	6023      	str	r3, [r4, #0]
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}
 8003a70:	20000290 	.word	0x20000290

08003a74 <_isatty_r>:
 8003a74:	2300      	movs	r3, #0
 8003a76:	b570      	push	{r4, r5, r6, lr}
 8003a78:	4d06      	ldr	r5, [pc, #24]	; (8003a94 <_isatty_r+0x20>)
 8003a7a:	0004      	movs	r4, r0
 8003a7c:	0008      	movs	r0, r1
 8003a7e:	602b      	str	r3, [r5, #0]
 8003a80:	f7fc ff2e 	bl	80008e0 <_isatty>
 8003a84:	1c43      	adds	r3, r0, #1
 8003a86:	d103      	bne.n	8003a90 <_isatty_r+0x1c>
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d000      	beq.n	8003a90 <_isatty_r+0x1c>
 8003a8e:	6023      	str	r3, [r4, #0]
 8003a90:	bd70      	pop	{r4, r5, r6, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	20000290 	.word	0x20000290

08003a98 <_sbrk_r>:
 8003a98:	2300      	movs	r3, #0
 8003a9a:	b570      	push	{r4, r5, r6, lr}
 8003a9c:	4d06      	ldr	r5, [pc, #24]	; (8003ab8 <_sbrk_r+0x20>)
 8003a9e:	0004      	movs	r4, r0
 8003aa0:	0008      	movs	r0, r1
 8003aa2:	602b      	str	r3, [r5, #0]
 8003aa4:	f7fc ff30 	bl	8000908 <_sbrk>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	d103      	bne.n	8003ab4 <_sbrk_r+0x1c>
 8003aac:	682b      	ldr	r3, [r5, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d000      	beq.n	8003ab4 <_sbrk_r+0x1c>
 8003ab2:	6023      	str	r3, [r4, #0]
 8003ab4:	bd70      	pop	{r4, r5, r6, pc}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	20000290 	.word	0x20000290

08003abc <_init>:
 8003abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ac2:	bc08      	pop	{r3}
 8003ac4:	469e      	mov	lr, r3
 8003ac6:	4770      	bx	lr

08003ac8 <_fini>:
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ace:	bc08      	pop	{r3}
 8003ad0:	469e      	mov	lr, r3
 8003ad2:	4770      	bx	lr
