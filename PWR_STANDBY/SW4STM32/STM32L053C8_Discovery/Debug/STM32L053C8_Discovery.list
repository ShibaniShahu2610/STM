
STM32L053C8_Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014b0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08001570  08001570  00011570  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080016f0  080016f0  000116f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080016f8  080016f8  000116f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080016fc  080016fc  000116fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  20000000  08001700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000020  20000018  08001718  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000038  08001718  00020038  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000552e  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000165e  00000000  00000000  000255b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00001259  00000000  00000000  00026c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b0  00000000  00000000  00027e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000046d  00000000  00000000  00028318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000131b8  00000000  00000000  00028785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007868  00000000  00000000  0003b93d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00077e8c  00000000  00000000  000431a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00000b40  00000000  00000000  000bb034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000082  00000000  00000000  000bbb74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001558 	.word	0x08001558

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08001558 	.word	0x08001558

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	4b15      	ldr	r3, [pc, #84]	; (8000500 <BSP_LED_Init+0x58>)
 80004ac:	b088      	sub	sp, #32
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80004ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d11c      	bne.n	80004ee <BSP_LED_Init+0x46>
 80004b4:	2102      	movs	r1, #2
 80004b6:	430a      	orrs	r2, r1
 80004b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004bc:	400b      	ands	r3, r1
 80004be:	9301      	str	r3, [sp, #4]
 80004c0:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <BSP_LED_Init+0x5c>)
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	5ad6      	ldrh	r6, [r2, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c8:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80004ca:	4d0f      	ldr	r5, [pc, #60]	; (8000508 <BSP_LED_Init+0x60>)
 80004cc:	0084      	lsls	r4, r0, #2
 80004ce:	5960      	ldr	r0, [r4, r5]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004d2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80004d4:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d6:	18db      	adds	r3, r3, r3
 80004d8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80004da:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80004dc:	f000 f8d8 	bl	8000690 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80004e0:	2200      	movs	r2, #0
 80004e2:	0031      	movs	r1, r6
 80004e4:	5960      	ldr	r0, [r4, r5]
 80004e6:	f000 fa11 	bl	800090c <HAL_GPIO_WritePin>
}
 80004ea:	b008      	add	sp, #32
 80004ec:	bd70      	pop	{r4, r5, r6, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 80004ee:	2101      	movs	r1, #1
 80004f0:	430a      	orrs	r2, r1
 80004f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80004f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f6:	400b      	ands	r3, r1
 80004f8:	9302      	str	r3, [sp, #8]
 80004fa:	9b02      	ldr	r3, [sp, #8]
 80004fc:	e7e1      	b.n	80004c2 <BSP_LED_Init+0x1a>
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	40021000 	.word	0x40021000
 8000504:	08001570 	.word	0x08001570
 8000508:	20000000 	.word	0x20000000

0800050c <BSP_LED_On>:
  *     @arg LED4
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <BSP_LED_On+0x18>)
{
 800050e:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	5ad1      	ldrh	r1, [r2, r3]
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <BSP_LED_On+0x1c>)
 8000516:	0080      	lsls	r0, r0, #2
 8000518:	2201      	movs	r2, #1
 800051a:	58c0      	ldr	r0, [r0, r3]
 800051c:	f000 f9f6 	bl	800090c <HAL_GPIO_WritePin>
}
 8000520:	bd10      	pop	{r4, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	08001570 	.word	0x08001570
 8000528:	20000000 	.word	0x20000000

0800052c <SystemInit>:
{    
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800052c:	4770      	bx	lr

0800052e <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800052e:	4770      	bx	lr

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000534:	20fa      	movs	r0, #250	; 0xfa
 8000536:	4e0d      	ldr	r6, [pc, #52]	; (800056c <HAL_InitTick+0x3c>)
 8000538:	0080      	lsls	r0, r0, #2
 800053a:	7831      	ldrb	r1, [r6, #0]
 800053c:	f7ff fde4 	bl	8000108 <__udivsi3>
 8000540:	4c0b      	ldr	r4, [pc, #44]	; (8000570 <HAL_InitTick+0x40>)
 8000542:	0001      	movs	r1, r0
 8000544:	6820      	ldr	r0, [r4, #0]
 8000546:	f7ff fddf 	bl	8000108 <__udivsi3>
 800054a:	f000 f883 	bl	8000654 <HAL_SYSTICK_Config>
 800054e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000550:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000552:	2c00      	cmp	r4, #0
 8000554:	d108      	bne.n	8000568 <HAL_InitTick+0x38>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000556:	2d03      	cmp	r5, #3
 8000558:	d806      	bhi.n	8000568 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800055a:	3802      	subs	r0, #2
 800055c:	0022      	movs	r2, r4
 800055e:	0029      	movs	r1, r5
 8000560:	f000 f844 	bl	80005ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000564:	0020      	movs	r0, r4
 8000566:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000568:	bd70      	pop	{r4, r5, r6, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	20000010 	.word	0x20000010
 8000570:	2000000c 	.word	0x2000000c

08000574 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000574:	2240      	movs	r2, #64	; 0x40
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <HAL_Init+0x2c>)
{
 8000578:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800057a:	6819      	ldr	r1, [r3, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800057c:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800057e:	430a      	orrs	r2, r1
 8000580:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000582:	2202      	movs	r2, #2
 8000584:	6819      	ldr	r1, [r3, #0]
 8000586:	430a      	orrs	r2, r1
 8000588:	601a      	str	r2, [r3, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800058a:	f7ff ffd1 	bl	8000530 <HAL_InitTick>
 800058e:	1e04      	subs	r4, r0, #0
 8000590:	d103      	bne.n	800059a <HAL_Init+0x26>
    HAL_MspInit();
 8000592:	f7ff ffcc 	bl	800052e <HAL_MspInit>
}
 8000596:	0020      	movs	r0, r4
 8000598:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800059a:	2401      	movs	r4, #1
 800059c:	e7fb      	b.n	8000596 <HAL_Init+0x22>
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	40022000 	.word	0x40022000

080005a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005a4:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <HAL_IncTick+0x10>)
 80005a6:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <HAL_IncTick+0x14>)
 80005a8:	6811      	ldr	r1, [r2, #0]
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	185b      	adds	r3, r3, r1
 80005ae:	6013      	str	r3, [r2, #0]
}
 80005b0:	4770      	bx	lr
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	20000034 	.word	0x20000034
 80005b8:	20000010 	.word	0x20000010

080005bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005bc:	4b01      	ldr	r3, [pc, #4]	; (80005c4 <HAL_GetTick+0x8>)
 80005be:	6818      	ldr	r0, [r3, #0]
}
 80005c0:	4770      	bx	lr
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	20000034 	.word	0x20000034

080005c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005cc:	f7ff fff6 	bl	80005bc <HAL_GetTick>
 80005d0:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d2:	1c63      	adds	r3, r4, #1
 80005d4:	d002      	beq.n	80005dc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d6:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <HAL_Delay+0x20>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005dc:	f7ff ffee 	bl	80005bc <HAL_GetTick>
 80005e0:	1b40      	subs	r0, r0, r5
 80005e2:	42a0      	cmp	r0, r4
 80005e4:	d3fa      	bcc.n	80005dc <HAL_Delay+0x14>
  {
  }
}
 80005e6:	bd70      	pop	{r4, r5, r6, pc}
 80005e8:	20000010 	.word	0x20000010

080005ec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80005f2:	290f      	cmp	r1, #15
 80005f4:	d903      	bls.n	80005fe <HAL_NVIC_SetPriority+0x12>
 80005f6:	2186      	movs	r1, #134	; 0x86
 80005f8:	4813      	ldr	r0, [pc, #76]	; (8000648 <HAL_NVIC_SetPriority+0x5c>)
 80005fa:	f000 ff7f 	bl	80014fc <assert_failed>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005fe:	26ff      	movs	r6, #255	; 0xff
 8000600:	2003      	movs	r0, #3
 8000602:	0032      	movs	r2, r6
 8000604:	4020      	ands	r0, r4
 8000606:	00c0      	lsls	r0, r0, #3
 8000608:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800060a:	01a9      	lsls	r1, r5, #6
 800060c:	4031      	ands	r1, r6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800060e:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000610:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000612:	b2e3      	uxtb	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8000614:	2c00      	cmp	r4, #0
 8000616:	db0a      	blt.n	800062e <HAL_NVIC_SetPriority+0x42>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000618:	20c0      	movs	r0, #192	; 0xc0
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_NVIC_SetPriority+0x60>)
 800061c:	08a4      	lsrs	r4, r4, #2
 800061e:	00a4      	lsls	r4, r4, #2
 8000620:	18e4      	adds	r4, r4, r3
 8000622:	0080      	lsls	r0, r0, #2
 8000624:	5823      	ldr	r3, [r4, r0]
 8000626:	4013      	ands	r3, r2
 8000628:	430b      	orrs	r3, r1
 800062a:	5023      	str	r3, [r4, r0]
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800062c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800062e:	200f      	movs	r0, #15
 8000630:	4003      	ands	r3, r0
 8000632:	3b08      	subs	r3, #8
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <HAL_NVIC_SetPriority+0x64>)
 8000636:	089b      	lsrs	r3, r3, #2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	181b      	adds	r3, r3, r0
 800063c:	69d8      	ldr	r0, [r3, #28]
 800063e:	4002      	ands	r2, r0
 8000640:	430a      	orrs	r2, r1
 8000642:	61da      	str	r2, [r3, #28]
 8000644:	e7f2      	b.n	800062c <HAL_NVIC_SetPriority+0x40>
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	08001599 	.word	0x08001599
 800064c:	e000e100 	.word	0xe000e100
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000654:	2280      	movs	r2, #128	; 0x80
 8000656:	1e43      	subs	r3, r0, #1
 8000658:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800065a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800065c:	4293      	cmp	r3, r2
 800065e:	d20d      	bcs.n	800067c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000660:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000662:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000664:	4807      	ldr	r0, [pc, #28]	; (8000684 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000666:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000668:	6a03      	ldr	r3, [r0, #32]
 800066a:	0609      	lsls	r1, r1, #24
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	0a1b      	lsrs	r3, r3, #8
 8000670:	430b      	orrs	r3, r1
 8000672:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000674:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000676:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000678:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800067a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800067c:	4770      	bx	lr
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	e000e010 	.word	0xe000e010
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000688:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 800068a:	f000 ff33 	bl	80014f4 <HAL_SYSTICK_Callback>
}
 800068e:	bd10      	pop	{r4, pc}

08000690 <HAL_GPIO_Init>:
  uint32_t position = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000690:	684b      	ldr	r3, [r1, #4]
{
 8000692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000694:	0004      	movs	r4, r0
 8000696:	000d      	movs	r5, r1
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000698:	2b01      	cmp	r3, #1
 800069a:	d917      	bls.n	80006cc <HAL_GPIO_Init+0x3c>
 800069c:	2284      	movs	r2, #132	; 0x84
 800069e:	0392      	lsls	r2, r2, #14
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d013      	beq.n	80006cc <HAL_GPIO_Init+0x3c>
 80006a4:	d836      	bhi.n	8000714 <HAL_GPIO_Init+0x84>
 80006a6:	2288      	movs	r2, #136	; 0x88
 80006a8:	0352      	lsls	r2, r2, #13
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d00e      	beq.n	80006cc <HAL_GPIO_Init+0x3c>
 80006ae:	d809      	bhi.n	80006c4 <HAL_GPIO_Init+0x34>
 80006b0:	2b03      	cmp	r3, #3
 80006b2:	d90b      	bls.n	80006cc <HAL_GPIO_Init+0x3c>
 80006b4:	3b11      	subs	r3, #17
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d908      	bls.n	80006cc <HAL_GPIO_Init+0x3c>
 80006ba:	21a3      	movs	r1, #163	; 0xa3
 80006bc:	4888      	ldr	r0, [pc, #544]	; (80008e0 <HAL_GPIO_Init+0x250>)
 80006be:	f000 ff1d 	bl	80014fc <assert_failed>
 80006c2:	e003      	b.n	80006cc <HAL_GPIO_Init+0x3c>
 80006c4:	2290      	movs	r2, #144	; 0x90
 80006c6:	0352      	lsls	r2, r2, #13
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d1f6      	bne.n	80006ba <HAL_GPIO_Init+0x2a>
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));
 80006cc:	23a0      	movs	r3, #160	; 0xa0
 80006ce:	05db      	lsls	r3, r3, #23
 80006d0:	429c      	cmp	r4, r3
 80006d2:	d005      	beq.n	80006e0 <HAL_GPIO_Init+0x50>
 80006d4:	4b83      	ldr	r3, [pc, #524]	; (80008e4 <HAL_GPIO_Init+0x254>)
 80006d6:	429c      	cmp	r4, r3
 80006d8:	d002      	beq.n	80006e0 <HAL_GPIO_Init+0x50>
 80006da:	4b83      	ldr	r3, [pc, #524]	; (80008e8 <HAL_GPIO_Init+0x258>)
 80006dc:	429c      	cmp	r4, r3
 80006de:	d107      	bne.n	80006f0 <HAL_GPIO_Init+0x60>
 80006e0:	682b      	ldr	r3, [r5, #0]
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	2a00      	cmp	r2, #0
 80006e6:	d003      	beq.n	80006f0 <HAL_GPIO_Init+0x60>
 80006e8:	4a80      	ldr	r2, [pc, #512]	; (80008ec <HAL_GPIO_Init+0x25c>)
 80006ea:	4313      	orrs	r3, r2
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d009      	beq.n	8000704 <HAL_GPIO_Init+0x74>
 80006f0:	4b7f      	ldr	r3, [pc, #508]	; (80008f0 <HAL_GPIO_Init+0x260>)
 80006f2:	429c      	cmp	r4, r3
 80006f4:	d117      	bne.n	8000726 <HAL_GPIO_Init+0x96>
 80006f6:	2304      	movs	r3, #4
 80006f8:	682a      	ldr	r2, [r5, #0]
 80006fa:	421a      	tst	r2, r3
 80006fc:	d01d      	beq.n	800073a <HAL_GPIO_Init+0xaa>
 80006fe:	4313      	orrs	r3, r2
 8000700:	2b04      	cmp	r3, #4
 8000702:	d11a      	bne.n	800073a <HAL_GPIO_Init+0xaa>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000704:	2300      	movs	r3, #0
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
      }
    }
    position++;
 8000706:	9300      	str	r3, [sp, #0]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000708:	682b      	ldr	r3, [r5, #0]
 800070a:	9900      	ldr	r1, [sp, #0]
 800070c:	001a      	movs	r2, r3
 800070e:	40ca      	lsrs	r2, r1
 8000710:	d118      	bne.n	8000744 <HAL_GPIO_Init+0xb4>
  }
}
 8000712:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000714:	22c4      	movs	r2, #196	; 0xc4
 8000716:	0392      	lsls	r2, r2, #14
 8000718:	4293      	cmp	r3, r2
 800071a:	d0d7      	beq.n	80006cc <HAL_GPIO_Init+0x3c>
 800071c:	4a75      	ldr	r2, [pc, #468]	; (80008f4 <HAL_GPIO_Init+0x264>)
 800071e:	4013      	ands	r3, r2
 8000720:	2288      	movs	r2, #136	; 0x88
 8000722:	0392      	lsls	r2, r2, #14
 8000724:	e7d0      	b.n	80006c8 <HAL_GPIO_Init+0x38>
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));
 8000726:	4b74      	ldr	r3, [pc, #464]	; (80008f8 <HAL_GPIO_Init+0x268>)
 8000728:	429c      	cmp	r4, r3
 800072a:	d106      	bne.n	800073a <HAL_GPIO_Init+0xaa>
 800072c:	2303      	movs	r3, #3
 800072e:	682a      	ldr	r2, [r5, #0]
 8000730:	421a      	tst	r2, r3
 8000732:	d002      	beq.n	800073a <HAL_GPIO_Init+0xaa>
 8000734:	4313      	orrs	r3, r2
 8000736:	2b03      	cmp	r3, #3
 8000738:	d0e4      	beq.n	8000704 <HAL_GPIO_Init+0x74>
 800073a:	21a4      	movs	r1, #164	; 0xa4
 800073c:	4868      	ldr	r0, [pc, #416]	; (80008e0 <HAL_GPIO_Init+0x250>)
 800073e:	f000 fedd 	bl	80014fc <assert_failed>
 8000742:	e7df      	b.n	8000704 <HAL_GPIO_Init+0x74>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000744:	2701      	movs	r7, #1
 8000746:	9a00      	ldr	r2, [sp, #0]
 8000748:	4097      	lsls	r7, r2
 800074a:	001a      	movs	r2, r3
 800074c:	403a      	ands	r2, r7
 800074e:	9201      	str	r2, [sp, #4]
    if (iocurrent)
 8000750:	423b      	tst	r3, r7
 8000752:	d100      	bne.n	8000756 <HAL_GPIO_Init+0xc6>
 8000754:	e0c1      	b.n	80008da <HAL_GPIO_Init+0x24a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000756:	2203      	movs	r2, #3
 8000758:	686b      	ldr	r3, [r5, #4]
 800075a:	4013      	ands	r3, r2
 800075c:	9a00      	ldr	r2, [sp, #0]
 800075e:	3b01      	subs	r3, #1
 8000760:	0056      	lsls	r6, r2, #1
 8000762:	2b01      	cmp	r3, #1
 8000764:	d818      	bhi.n	8000798 <HAL_GPIO_Init+0x108>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000766:	68eb      	ldr	r3, [r5, #12]
 8000768:	2b03      	cmp	r3, #3
 800076a:	d903      	bls.n	8000774 <HAL_GPIO_Init+0xe4>
 800076c:	21b4      	movs	r1, #180	; 0xb4
 800076e:	485c      	ldr	r0, [pc, #368]	; (80008e0 <HAL_GPIO_Init+0x250>)
 8000770:	f000 fec4 	bl	80014fc <assert_failed>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000774:	2303      	movs	r3, #3
 8000776:	40b3      	lsls	r3, r6
        temp = GPIOx->OSPEEDR;
 8000778:	68a2      	ldr	r2, [r4, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800077a:	2101      	movs	r1, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800077c:	439a      	bics	r2, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 800077e:	68eb      	ldr	r3, [r5, #12]
 8000780:	40b3      	lsls	r3, r6
 8000782:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8000784:	60a3      	str	r3, [r4, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000786:	686b      	ldr	r3, [r5, #4]
        temp = GPIOx->OTYPER;
 8000788:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800078a:	091b      	lsrs	r3, r3, #4
 800078c:	400b      	ands	r3, r1
 800078e:	9900      	ldr	r1, [sp, #0]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000790:	43ba      	bics	r2, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000792:	408b      	lsls	r3, r1
 8000794:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8000796:	6063      	str	r3, [r4, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000798:	2203      	movs	r2, #3
 800079a:	686b      	ldr	r3, [r5, #4]
 800079c:	4013      	ands	r3, r2
 800079e:	4293      	cmp	r3, r2
 80007a0:	d03f      	beq.n	8000822 <HAL_GPIO_Init+0x192>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80007a2:	68ab      	ldr	r3, [r5, #8]
 80007a4:	2b02      	cmp	r3, #2
 80007a6:	d903      	bls.n	80007b0 <HAL_GPIO_Init+0x120>
 80007a8:	21c5      	movs	r1, #197	; 0xc5
 80007aa:	484d      	ldr	r0, [pc, #308]	; (80008e0 <HAL_GPIO_Init+0x250>)
 80007ac:	f000 fea6 	bl	80014fc <assert_failed>
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80007b0:	2303      	movs	r3, #3
 80007b2:	40b3      	lsls	r3, r6
        temp = GPIOx->PUPDR;
 80007b4:	68e2      	ldr	r2, [r4, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80007b6:	439a      	bics	r2, r3
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007b8:	68ab      	ldr	r3, [r5, #8]
 80007ba:	40b3      	lsls	r3, r6
 80007bc:	4313      	orrs	r3, r2
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007be:	2203      	movs	r2, #3
        GPIOx->PUPDR = temp;
 80007c0:	60e3      	str	r3, [r4, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007c2:	686b      	ldr	r3, [r5, #4]
 80007c4:	4013      	ands	r3, r2
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	d12b      	bne.n	8000822 <HAL_GPIO_Init+0x192>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80007ca:	23a0      	movs	r3, #160	; 0xa0
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	429c      	cmp	r4, r3
 80007d0:	d00f      	beq.n	80007f2 <HAL_GPIO_Init+0x162>
 80007d2:	4b44      	ldr	r3, [pc, #272]	; (80008e4 <HAL_GPIO_Init+0x254>)
 80007d4:	429c      	cmp	r4, r3
 80007d6:	d00c      	beq.n	80007f2 <HAL_GPIO_Init+0x162>
 80007d8:	4b43      	ldr	r3, [pc, #268]	; (80008e8 <HAL_GPIO_Init+0x258>)
 80007da:	429c      	cmp	r4, r3
 80007dc:	d009      	beq.n	80007f2 <HAL_GPIO_Init+0x162>
 80007de:	4b44      	ldr	r3, [pc, #272]	; (80008f0 <HAL_GPIO_Init+0x260>)
 80007e0:	429c      	cmp	r4, r3
 80007e2:	d006      	beq.n	80007f2 <HAL_GPIO_Init+0x162>
 80007e4:	4b44      	ldr	r3, [pc, #272]	; (80008f8 <HAL_GPIO_Init+0x268>)
 80007e6:	429c      	cmp	r4, r3
 80007e8:	d003      	beq.n	80007f2 <HAL_GPIO_Init+0x162>
 80007ea:	21d2      	movs	r1, #210	; 0xd2
 80007ec:	483c      	ldr	r0, [pc, #240]	; (80008e0 <HAL_GPIO_Init+0x250>)
 80007ee:	f000 fe85 	bl	80014fc <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80007f2:	692b      	ldr	r3, [r5, #16]
 80007f4:	2b07      	cmp	r3, #7
 80007f6:	d903      	bls.n	8000800 <HAL_GPIO_Init+0x170>
 80007f8:	21d3      	movs	r1, #211	; 0xd3
 80007fa:	4839      	ldr	r0, [pc, #228]	; (80008e0 <HAL_GPIO_Init+0x250>)
 80007fc:	f000 fe7e 	bl	80014fc <assert_failed>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000800:	2207      	movs	r2, #7
 8000802:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 8000804:	9b00      	ldr	r3, [sp, #0]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000806:	400a      	ands	r2, r1
 8000808:	210f      	movs	r1, #15
 800080a:	0092      	lsls	r2, r2, #2
 800080c:	4091      	lsls	r1, r2
        temp = GPIOx->AFR[position >> 3U];
 800080e:	08db      	lsrs	r3, r3, #3
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	18e3      	adds	r3, r4, r3
 8000814:	6a18      	ldr	r0, [r3, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000816:	4388      	bics	r0, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000818:	6929      	ldr	r1, [r5, #16]
 800081a:	4091      	lsls	r1, r2
 800081c:	000a      	movs	r2, r1
 800081e:	4302      	orrs	r2, r0
        GPIOx->AFR[position >> 3U] = temp;
 8000820:	621a      	str	r2, [r3, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000822:	2303      	movs	r3, #3
 8000824:	40b3      	lsls	r3, r6
      temp = GPIOx->MODER;
 8000826:	6822      	ldr	r2, [r4, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000828:	686f      	ldr	r7, [r5, #4]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800082a:	439a      	bics	r2, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800082c:	2303      	movs	r3, #3
 800082e:	403b      	ands	r3, r7
 8000830:	40b3      	lsls	r3, r6
 8000832:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 8000834:	6023      	str	r3, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000836:	23c0      	movs	r3, #192	; 0xc0
 8000838:	029b      	lsls	r3, r3, #10
 800083a:	421f      	tst	r7, r3
 800083c:	d04d      	beq.n	80008da <HAL_GPIO_Init+0x24a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	2101      	movs	r1, #1
 8000840:	4a2e      	ldr	r2, [pc, #184]	; (80008fc <HAL_GPIO_Init+0x26c>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000842:	20a0      	movs	r0, #160	; 0xa0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000844:	6b53      	ldr	r3, [r2, #52]	; 0x34
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000846:	05c0      	lsls	r0, r0, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000848:	430b      	orrs	r3, r1
 800084a:	6353      	str	r3, [r2, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 800084c:	9b00      	ldr	r3, [sp, #0]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800084e:	3102      	adds	r1, #2
        temp = SYSCFG->EXTICR[position >> 2U];
 8000850:	089a      	lsrs	r2, r3, #2
 8000852:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <HAL_GPIO_Init+0x270>)
 8000854:	0092      	lsls	r2, r2, #2
 8000856:	18d2      	adds	r2, r2, r3
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000858:	9b00      	ldr	r3, [sp, #0]
        temp = SYSCFG->EXTICR[position >> 2U];
 800085a:	6896      	ldr	r6, [r2, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800085c:	4019      	ands	r1, r3
 800085e:	230f      	movs	r3, #15
 8000860:	0089      	lsls	r1, r1, #2
 8000862:	408b      	lsls	r3, r1
 8000864:	439e      	bics	r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000866:	2300      	movs	r3, #0
 8000868:	4284      	cmp	r4, r0
 800086a:	d010      	beq.n	800088e <HAL_GPIO_Init+0x1fe>
 800086c:	481d      	ldr	r0, [pc, #116]	; (80008e4 <HAL_GPIO_Init+0x254>)
 800086e:	3301      	adds	r3, #1
 8000870:	4284      	cmp	r4, r0
 8000872:	d00c      	beq.n	800088e <HAL_GPIO_Init+0x1fe>
 8000874:	481c      	ldr	r0, [pc, #112]	; (80008e8 <HAL_GPIO_Init+0x258>)
 8000876:	3301      	adds	r3, #1
 8000878:	4284      	cmp	r4, r0
 800087a:	d008      	beq.n	800088e <HAL_GPIO_Init+0x1fe>
 800087c:	481c      	ldr	r0, [pc, #112]	; (80008f0 <HAL_GPIO_Init+0x260>)
 800087e:	3301      	adds	r3, #1
 8000880:	4284      	cmp	r4, r0
 8000882:	d004      	beq.n	800088e <HAL_GPIO_Init+0x1fe>
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <HAL_GPIO_Init+0x274>)
 8000886:	18e3      	adds	r3, r4, r3
 8000888:	1e58      	subs	r0, r3, #1
 800088a:	4183      	sbcs	r3, r0
 800088c:	3305      	adds	r3, #5
 800088e:	408b      	lsls	r3, r1
 8000890:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000892:	6093      	str	r3, [r2, #8]
        temp = EXTI->RTSR;
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <HAL_GPIO_Init+0x278>)
        temp &= ~((uint32_t)iocurrent);
 8000896:	9a01      	ldr	r2, [sp, #4]
        temp = EXTI->RTSR;
 8000898:	6898      	ldr	r0, [r3, #8]
          temp |= iocurrent;
 800089a:	9901      	ldr	r1, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 800089c:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 800089e:	4301      	orrs	r1, r0
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80008a0:	02fe      	lsls	r6, r7, #11
 80008a2:	d401      	bmi.n	80008a8 <HAL_GPIO_Init+0x218>
        temp &= ~((uint32_t)iocurrent);
 80008a4:	0001      	movs	r1, r0
 80008a6:	4011      	ands	r1, r2
        EXTI->RTSR = temp;
 80008a8:	6099      	str	r1, [r3, #8]
        temp = EXTI->FTSR;
 80008aa:	68d8      	ldr	r0, [r3, #12]
          temp |= iocurrent;
 80008ac:	9901      	ldr	r1, [sp, #4]
 80008ae:	4301      	orrs	r1, r0
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80008b0:	02be      	lsls	r6, r7, #10
 80008b2:	d401      	bmi.n	80008b8 <HAL_GPIO_Init+0x228>
        temp &= ~((uint32_t)iocurrent);
 80008b4:	0001      	movs	r1, r0
 80008b6:	4011      	ands	r1, r2
        EXTI->FTSR = temp;
 80008b8:	60d9      	str	r1, [r3, #12]
        temp = EXTI->EMR;
 80008ba:	6858      	ldr	r0, [r3, #4]
          temp |= iocurrent;
 80008bc:	9901      	ldr	r1, [sp, #4]
 80008be:	4301      	orrs	r1, r0
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80008c0:	03be      	lsls	r6, r7, #14
 80008c2:	d401      	bmi.n	80008c8 <HAL_GPIO_Init+0x238>
        temp &= ~((uint32_t)iocurrent);
 80008c4:	0001      	movs	r1, r0
 80008c6:	4011      	ands	r1, r2
        EXTI->EMR = temp;
 80008c8:	6059      	str	r1, [r3, #4]
        temp = EXTI->IMR;
 80008ca:	6818      	ldr	r0, [r3, #0]
          temp |= iocurrent;
 80008cc:	9901      	ldr	r1, [sp, #4]
 80008ce:	4301      	orrs	r1, r0
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80008d0:	03ff      	lsls	r7, r7, #15
 80008d2:	d401      	bmi.n	80008d8 <HAL_GPIO_Init+0x248>
        temp &= ~((uint32_t)iocurrent);
 80008d4:	0001      	movs	r1, r0
 80008d6:	4011      	ands	r1, r2
        EXTI->IMR = temp;
 80008d8:	6019      	str	r1, [r3, #0]
    position++;
 80008da:	9b00      	ldr	r3, [sp, #0]
 80008dc:	3301      	adds	r3, #1
 80008de:	e712      	b.n	8000706 <HAL_GPIO_Init+0x76>
 80008e0:	080015f0 	.word	0x080015f0
 80008e4:	50000400 	.word	0x50000400
 80008e8:	50000800 	.word	0x50000800
 80008ec:	0000ffff 	.word	0x0000ffff
 80008f0:	50000c00 	.word	0x50000c00
 80008f4:	ffefffff 	.word	0xffefffff
 80008f8:	50001c00 	.word	0x50001c00
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010000 	.word	0x40010000
 8000904:	afffe400 	.word	0xafffe400
 8000908:	40010400 	.word	0x40010400

0800090c <HAL_GPIO_WritePin>:
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
 800090c:	23a0      	movs	r3, #160	; 0xa0
{
 800090e:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
 8000910:	05db      	lsls	r3, r3, #23
{
 8000912:	0004      	movs	r4, r0
 8000914:	000d      	movs	r5, r1
 8000916:	0016      	movs	r6, r2
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
 8000918:	4298      	cmp	r0, r3
 800091a:	d005      	beq.n	8000928 <HAL_GPIO_WritePin+0x1c>
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <HAL_GPIO_WritePin+0x6c>)
 800091e:	4298      	cmp	r0, r3
 8000920:	d002      	beq.n	8000928 <HAL_GPIO_WritePin+0x1c>
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <HAL_GPIO_WritePin+0x70>)
 8000924:	4298      	cmp	r0, r3
 8000926:	d10a      	bne.n	800093e <HAL_GPIO_WritePin+0x32>
 8000928:	2d00      	cmp	r5, #0
 800092a:	d011      	beq.n	8000950 <HAL_GPIO_WritePin+0x44>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800092c:	2e01      	cmp	r6, #1
 800092e:	d91f      	bls.n	8000970 <HAL_GPIO_WritePin+0x64>
 8000930:	2198      	movs	r1, #152	; 0x98
 8000932:	4813      	ldr	r0, [pc, #76]	; (8000980 <HAL_GPIO_WritePin+0x74>)
 8000934:	31ff      	adds	r1, #255	; 0xff
 8000936:	f000 fde1 	bl	80014fc <assert_failed>

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 800093a:	61a5      	str	r5, [r4, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800093c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_GPIO_WritePin+0x78>)
 8000940:	4298      	cmp	r0, r3
 8000942:	d10b      	bne.n	800095c <HAL_GPIO_WritePin+0x50>
 8000944:	2304      	movs	r3, #4
 8000946:	4219      	tst	r1, r3
 8000948:	d002      	beq.n	8000950 <HAL_GPIO_WritePin+0x44>
 800094a:	430b      	orrs	r3, r1
 800094c:	2b04      	cmp	r3, #4
 800094e:	d0ed      	beq.n	800092c <HAL_GPIO_WritePin+0x20>
 8000950:	21cb      	movs	r1, #203	; 0xcb
 8000952:	480b      	ldr	r0, [pc, #44]	; (8000980 <HAL_GPIO_WritePin+0x74>)
 8000954:	0049      	lsls	r1, r1, #1
 8000956:	f000 fdd1 	bl	80014fc <assert_failed>
 800095a:	e7e7      	b.n	800092c <HAL_GPIO_WritePin+0x20>
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <HAL_GPIO_WritePin+0x7c>)
 800095e:	4298      	cmp	r0, r3
 8000960:	d1f6      	bne.n	8000950 <HAL_GPIO_WritePin+0x44>
 8000962:	2303      	movs	r3, #3
 8000964:	4219      	tst	r1, r3
 8000966:	d0f3      	beq.n	8000950 <HAL_GPIO_WritePin+0x44>
 8000968:	430b      	orrs	r3, r1
 800096a:	2b03      	cmp	r3, #3
 800096c:	d1f0      	bne.n	8000950 <HAL_GPIO_WritePin+0x44>
 800096e:	e7dd      	b.n	800092c <HAL_GPIO_WritePin+0x20>
  if (PinState != GPIO_PIN_RESET)
 8000970:	2e00      	cmp	r6, #0
 8000972:	d1e2      	bne.n	800093a <HAL_GPIO_WritePin+0x2e>
    GPIOx->BRR = GPIO_Pin ;
 8000974:	62a5      	str	r5, [r4, #40]	; 0x28
}
 8000976:	e7e1      	b.n	800093c <HAL_GPIO_WritePin+0x30>
 8000978:	50000400 	.word	0x50000400
 800097c:	50000800 	.word	0x50000800
 8000980:	080015f0 	.word	0x080015f0
 8000984:	50000c00 	.word	0x50000c00
 8000988:	50001c00 	.word	0x50001c00

0800098c <HAL_PWR_EnableWakeUpPin>:
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 800098c:	1e42      	subs	r2, r0, #1
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_PWR_EnableWakeUpPin+0x24>)
 8000990:	3aff      	subs	r2, #255	; 0xff
{
 8000992:	b510      	push	{r4, lr}
 8000994:	0004      	movs	r4, r0
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 8000996:	421a      	tst	r2, r3
 8000998:	d004      	beq.n	80009a4 <HAL_PWR_EnableWakeUpPin+0x18>
 800099a:	21ac      	movs	r1, #172	; 0xac
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <HAL_PWR_EnableWakeUpPin+0x28>)
 800099e:	31ff      	adds	r1, #255	; 0xff
 80009a0:	f000 fdac 	bl	80014fc <assert_failed>
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_PWR_EnableWakeUpPin+0x2c>)
 80009a6:	6853      	ldr	r3, [r2, #4]
 80009a8:	4323      	orrs	r3, r4
 80009aa:	6053      	str	r3, [r2, #4]
}
 80009ac:	bd10      	pop	{r4, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	fffffeff 	.word	0xfffffeff
 80009b4:	08001645 	.word	0x08001645
 80009b8:	40007000 	.word	0x40007000

080009bc <HAL_PWR_DisableWakeUpPin>:
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 80009bc:	1e42      	subs	r2, r0, #1
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_PWR_DisableWakeUpPin+0x24>)
 80009c0:	3aff      	subs	r2, #255	; 0xff
{
 80009c2:	b510      	push	{r4, lr}
 80009c4:	0004      	movs	r4, r0
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 80009c6:	421a      	tst	r2, r3
 80009c8:	d004      	beq.n	80009d4 <HAL_PWR_DisableWakeUpPin+0x18>
 80009ca:	21de      	movs	r1, #222	; 0xde
 80009cc:	4805      	ldr	r0, [pc, #20]	; (80009e4 <HAL_PWR_DisableWakeUpPin+0x28>)
 80009ce:	0049      	lsls	r1, r1, #1
 80009d0:	f000 fd94 	bl	80014fc <assert_failed>
  /* Disable the EWUPx pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <HAL_PWR_DisableWakeUpPin+0x2c>)
 80009d6:	6853      	ldr	r3, [r2, #4]
 80009d8:	43a3      	bics	r3, r4
 80009da:	6053      	str	r3, [r2, #4]
}
 80009dc:	bd10      	pop	{r4, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	fffffeff 	.word	0xfffffeff
 80009e4:	08001645 	.word	0x08001645
 80009e8:	40007000 	.word	0x40007000

080009ec <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80009ec:	2302      	movs	r3, #2
 80009ee:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <HAL_PWR_EnterSTANDBYMode+0x18>)
 80009f0:	6811      	ldr	r1, [r2, #0]
 80009f2:	430b      	orrs	r3, r1
 80009f4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80009f6:	2304      	movs	r3, #4
 80009f8:	4a03      	ldr	r2, [pc, #12]	; (8000a08 <HAL_PWR_EnterSTANDBYMode+0x1c>)
 80009fa:	6911      	ldr	r1, [r2, #16]
 80009fc:	430b      	orrs	r3, r1
 80009fe:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8000a00:	bf30      	wfi
}
 8000a02:	4770      	bx	lr
 8000a04:	40007000 	.word	0x40007000
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	4a03      	ldr	r2, [pc, #12]	; (8000a1c <HAL_PWREx_EnableFastWakeUp+0x10>)
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	6811      	ldr	r1, [r2, #0]
 8000a14:	430b      	orrs	r3, r1
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	4770      	bx	lr
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	40007000 	.word	0x40007000

08000a20 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	4a03      	ldr	r2, [pc, #12]	; (8000a30 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	6811      	ldr	r1, [r2, #0]
 8000a28:	430b      	orrs	r3, r1
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	4770      	bx	lr
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	40007000 	.word	0x40007000

08000a34 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a34:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <HAL_RCC_GetSysClockFreq+0x78>)
{
 8000a38:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8000a3a:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000a3c:	4022      	ands	r2, r4
 8000a3e:	2a08      	cmp	r2, #8
 8000a40:	d031      	beq.n	8000aa6 <HAL_RCC_GetSysClockFreq+0x72>
 8000a42:	2a0c      	cmp	r2, #12
 8000a44:	d009      	beq.n	8000a5a <HAL_RCC_GetSysClockFreq+0x26>
 8000a46:	2a04      	cmp	r2, #4
 8000a48:	d125      	bne.n	8000a96 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000a4a:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000a4e:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8000a50:	17c0      	asrs	r0, r0, #31
 8000a52:	4018      	ands	r0, r3
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_RCC_GetSysClockFreq+0x80>)
 8000a56:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8000a58:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000a5a:	02a2      	lsls	r2, r4, #10
 8000a5c:	4816      	ldr	r0, [pc, #88]	; (8000ab8 <HAL_RCC_GetSysClockFreq+0x84>)
 8000a5e:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8000a60:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a62:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000a64:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a66:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000a68:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a6a:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000a6c:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a6e:	4211      	tst	r1, r2
 8000a70:	d009      	beq.n	8000a86 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <HAL_RCC_GetSysClockFreq+0x88>)
 8000a74:	2300      	movs	r3, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	f7ff fbf2 	bl	8000260 <__aeabi_lmul>
 8000a7c:	0022      	movs	r2, r4
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f7ff fbce 	bl	8000220 <__aeabi_uldivmod>
 8000a84:	e7e8      	b.n	8000a58 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	2310      	movs	r3, #16
 8000a8a:	421a      	tst	r2, r3
 8000a8c:	d001      	beq.n	8000a92 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8000a8e:	4a0c      	ldr	r2, [pc, #48]	; (8000ac0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000a90:	e7f0      	b.n	8000a74 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_RCC_GetSysClockFreq+0x80>)
 8000a94:	e7ee      	b.n	8000a74 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000a96:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000a98:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000a9a:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000a9c:	041b      	lsls	r3, r3, #16
 8000a9e:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	4098      	lsls	r0, r3
      break;
 8000aa4:	e7d8      	b.n	8000a58 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <HAL_RCC_GetSysClockFreq+0x88>)
 8000aa8:	e7d6      	b.n	8000a58 <HAL_RCC_GetSysClockFreq+0x24>
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	ff48e500 	.word	0xff48e500
 8000ab4:	00f42400 	.word	0x00f42400
 8000ab8:	08001578 	.word	0x08001578
 8000abc:	007a1200 	.word	0x007a1200
 8000ac0:	003d0900 	.word	0x003d0900

08000ac4 <HAL_RCC_OscConfig>:
{
 8000ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ac6:	0005      	movs	r5, r0
 8000ac8:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8000aca:	2800      	cmp	r0, #0
 8000acc:	d102      	bne.n	8000ad4 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000ace:	2001      	movs	r0, #1
}
 8000ad0:	b005      	add	sp, #20
 8000ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000ad4:	6803      	ldr	r3, [r0, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d006      	beq.n	8000ae8 <HAL_RCC_OscConfig+0x24>
 8000ada:	069b      	lsls	r3, r3, #26
 8000adc:	d104      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x24>
 8000ade:	21af      	movs	r1, #175	; 0xaf
 8000ae0:	48c7      	ldr	r0, [pc, #796]	; (8000e00 <HAL_RCC_OscConfig+0x33c>)
 8000ae2:	0049      	lsls	r1, r1, #1
 8000ae4:	f000 fd0a 	bl	80014fc <assert_failed>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ae8:	230c      	movs	r3, #12
 8000aea:	4cc6      	ldr	r4, [pc, #792]	; (8000e04 <HAL_RCC_OscConfig+0x340>)
 8000aec:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000aee:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000af0:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000af2:	2380      	movs	r3, #128	; 0x80
 8000af4:	025b      	lsls	r3, r3, #9
 8000af6:	401a      	ands	r2, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000af8:	682b      	ldr	r3, [r5, #0]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000afa:	9200      	str	r2, [sp, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000afc:	07db      	lsls	r3, r3, #31
 8000afe:	d462      	bmi.n	8000bc6 <HAL_RCC_OscConfig+0x102>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b00:	682b      	ldr	r3, [r5, #0]
 8000b02:	079b      	lsls	r3, r3, #30
 8000b04:	d500      	bpl.n	8000b08 <HAL_RCC_OscConfig+0x44>
 8000b06:	e0b9      	b.n	8000c7c <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b08:	682b      	ldr	r3, [r5, #0]
 8000b0a:	06db      	lsls	r3, r3, #27
 8000b0c:	d542      	bpl.n	8000b94 <HAL_RCC_OscConfig+0xd0>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d000      	beq.n	8000b14 <HAL_RCC_OscConfig+0x50>
 8000b12:	e11e      	b.n	8000d52 <HAL_RCC_OscConfig+0x28e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b14:	6823      	ldr	r3, [r4, #0]
 8000b16:	059b      	lsls	r3, r3, #22
 8000b18:	d502      	bpl.n	8000b20 <HAL_RCC_OscConfig+0x5c>
 8000b1a:	69eb      	ldr	r3, [r5, #28]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0d6      	beq.n	8000ace <HAL_RCC_OscConfig+0xa>
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8000b20:	6a2b      	ldr	r3, [r5, #32]
 8000b22:	2bff      	cmp	r3, #255	; 0xff
 8000b24:	d904      	bls.n	8000b30 <HAL_RCC_OscConfig+0x6c>
 8000b26:	21ff      	movs	r1, #255	; 0xff
 8000b28:	48b5      	ldr	r0, [pc, #724]	; (8000e00 <HAL_RCC_OscConfig+0x33c>)
 8000b2a:	0049      	lsls	r1, r1, #1
 8000b2c:	f000 fce6 	bl	80014fc <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8000b30:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000b32:	4ab5      	ldr	r2, [pc, #724]	; (8000e08 <HAL_RCC_OscConfig+0x344>)
 8000b34:	49b5      	ldr	r1, [pc, #724]	; (8000e0c <HAL_RCC_OscConfig+0x348>)
 8000b36:	401a      	ands	r2, r3
 8000b38:	420b      	tst	r3, r1
 8000b3a:	d00b      	beq.n	8000b54 <HAL_RCC_OscConfig+0x90>
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	0209      	lsls	r1, r1, #8
 8000b40:	428a      	cmp	r2, r1
 8000b42:	d007      	beq.n	8000b54 <HAL_RCC_OscConfig+0x90>
 8000b44:	22c0      	movs	r2, #192	; 0xc0
 8000b46:	0212      	lsls	r2, r2, #8
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d003      	beq.n	8000b54 <HAL_RCC_OscConfig+0x90>
 8000b4c:	48ac      	ldr	r0, [pc, #688]	; (8000e00 <HAL_RCC_OscConfig+0x33c>)
 8000b4e:	49b0      	ldr	r1, [pc, #704]	; (8000e10 <HAL_RCC_OscConfig+0x34c>)
 8000b50:	f000 fcd4 	bl	80014fc <assert_failed>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000b54:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b56:	6862      	ldr	r2, [r4, #4]
 8000b58:	49ae      	ldr	r1, [pc, #696]	; (8000e14 <HAL_RCC_OscConfig+0x350>)
 8000b5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000b5c:	400a      	ands	r2, r1
 8000b5e:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000b60:	0b5b      	lsrs	r3, r3, #13
 8000b62:	3301      	adds	r3, #1
 8000b64:	023f      	lsls	r7, r7, #8
 8000b66:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b68:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b6a:	6861      	ldr	r1, [r4, #4]
 8000b6c:	6a2a      	ldr	r2, [r5, #32]
 8000b6e:	0209      	lsls	r1, r1, #8
 8000b70:	0a09      	lsrs	r1, r1, #8
 8000b72:	0612      	lsls	r2, r2, #24
 8000b74:	430a      	orrs	r2, r1
 8000b76:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000b78:	68e1      	ldr	r1, [r4, #12]
 8000b7a:	48a7      	ldr	r0, [pc, #668]	; (8000e18 <HAL_RCC_OscConfig+0x354>)
 8000b7c:	060b      	lsls	r3, r1, #24
 8000b7e:	0f1b      	lsrs	r3, r3, #28
 8000b80:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000b82:	4aa6      	ldr	r2, [pc, #664]	; (8000e1c <HAL_RCC_OscConfig+0x358>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000b84:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 8000b86:	4ba6      	ldr	r3, [pc, #664]	; (8000e20 <HAL_RCC_OscConfig+0x35c>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000b88:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	f7ff fcd0 	bl	8000530 <HAL_InitTick>
        if(status != HAL_OK)
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d19d      	bne.n	8000ad0 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b94:	682b      	ldr	r3, [r5, #0]
 8000b96:	071b      	lsls	r3, r3, #28
 8000b98:	d500      	bpl.n	8000b9c <HAL_RCC_OscConfig+0xd8>
 8000b9a:	e153      	b.n	8000e44 <HAL_RCC_OscConfig+0x380>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b9c:	682b      	ldr	r3, [r5, #0]
 8000b9e:	075b      	lsls	r3, r3, #29
 8000ba0:	d500      	bpl.n	8000ba4 <HAL_RCC_OscConfig+0xe0>
 8000ba2:	e17c      	b.n	8000e9e <HAL_RCC_OscConfig+0x3da>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000ba4:	682b      	ldr	r3, [r5, #0]
 8000ba6:	069b      	lsls	r3, r3, #26
 8000ba8:	d500      	bpl.n	8000bac <HAL_RCC_OscConfig+0xe8>
 8000baa:	e1f8      	b.n	8000f9e <HAL_RCC_OscConfig+0x4da>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8000bac:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d903      	bls.n	8000bba <HAL_RCC_OscConfig+0xf6>
 8000bb2:	4893      	ldr	r0, [pc, #588]	; (8000e00 <HAL_RCC_OscConfig+0x33c>)
 8000bb4:	499b      	ldr	r1, [pc, #620]	; (8000e24 <HAL_RCC_OscConfig+0x360>)
 8000bb6:	f000 fca1 	bl	80014fc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d000      	beq.n	8000bc2 <HAL_RCC_OscConfig+0xfe>
 8000bc0:	e227      	b.n	8001012 <HAL_RCC_OscConfig+0x54e>
  return HAL_OK;
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	e784      	b.n	8000ad0 <HAL_RCC_OscConfig+0xc>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000bc6:	686b      	ldr	r3, [r5, #4]
 8000bc8:	4f97      	ldr	r7, [pc, #604]	; (8000e28 <HAL_RCC_OscConfig+0x364>)
 8000bca:	423b      	tst	r3, r7
 8000bcc:	d008      	beq.n	8000be0 <HAL_RCC_OscConfig+0x11c>
 8000bce:	22a0      	movs	r2, #160	; 0xa0
 8000bd0:	02d2      	lsls	r2, r2, #11
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d004      	beq.n	8000be0 <HAL_RCC_OscConfig+0x11c>
 8000bd6:	2168      	movs	r1, #104	; 0x68
 8000bd8:	4889      	ldr	r0, [pc, #548]	; (8000e00 <HAL_RCC_OscConfig+0x33c>)
 8000bda:	31ff      	adds	r1, #255	; 0xff
 8000bdc:	f000 fc8e 	bl	80014fc <assert_failed>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000be0:	2e08      	cmp	r6, #8
 8000be2:	d004      	beq.n	8000bee <HAL_RCC_OscConfig+0x12a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000be4:	2e0c      	cmp	r6, #12
 8000be6:	d109      	bne.n	8000bfc <HAL_RCC_OscConfig+0x138>
 8000be8:	9b00      	ldr	r3, [sp, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d006      	beq.n	8000bfc <HAL_RCC_OscConfig+0x138>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	039b      	lsls	r3, r3, #14
 8000bf2:	d585      	bpl.n	8000b00 <HAL_RCC_OscConfig+0x3c>
 8000bf4:	686b      	ldr	r3, [r5, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d182      	bne.n	8000b00 <HAL_RCC_OscConfig+0x3c>
 8000bfa:	e768      	b.n	8000ace <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	686b      	ldr	r3, [r5, #4]
 8000c00:	0249      	lsls	r1, r1, #9
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d112      	bne.n	8000c2c <HAL_RCC_OscConfig+0x168>
 8000c06:	6822      	ldr	r2, [r4, #0]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c0c:	f7ff fcd6 	bl	80005bc <HAL_GetTick>
 8000c10:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c12:	2280      	movs	r2, #128	; 0x80
 8000c14:	6823      	ldr	r3, [r4, #0]
 8000c16:	0292      	lsls	r2, r2, #10
 8000c18:	4213      	tst	r3, r2
 8000c1a:	d000      	beq.n	8000c1e <HAL_RCC_OscConfig+0x15a>
 8000c1c:	e770      	b.n	8000b00 <HAL_RCC_OscConfig+0x3c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c1e:	f7ff fccd 	bl	80005bc <HAL_GetTick>
 8000c22:	1bc0      	subs	r0, r0, r7
 8000c24:	2864      	cmp	r0, #100	; 0x64
 8000c26:	d9f4      	bls.n	8000c12 <HAL_RCC_OscConfig+0x14e>
            return HAL_TIMEOUT;
 8000c28:	2003      	movs	r0, #3
 8000c2a:	e751      	b.n	8000ad0 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c2c:	22a0      	movs	r2, #160	; 0xa0
 8000c2e:	02d2      	lsls	r2, r2, #11
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d107      	bne.n	8000c44 <HAL_RCC_OscConfig+0x180>
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	6822      	ldr	r2, [r4, #0]
 8000c38:	02db      	lsls	r3, r3, #11
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	6023      	str	r3, [r4, #0]
 8000c3e:	6823      	ldr	r3, [r4, #0]
 8000c40:	430b      	orrs	r3, r1
 8000c42:	e7e2      	b.n	8000c0a <HAL_RCC_OscConfig+0x146>
 8000c44:	6822      	ldr	r2, [r4, #0]
 8000c46:	403a      	ands	r2, r7
 8000c48:	6022      	str	r2, [r4, #0]
 8000c4a:	6822      	ldr	r2, [r4, #0]
 8000c4c:	400a      	ands	r2, r1
 8000c4e:	9203      	str	r2, [sp, #12]
 8000c50:	9a03      	ldr	r2, [sp, #12]
 8000c52:	4976      	ldr	r1, [pc, #472]	; (8000e2c <HAL_RCC_OscConfig+0x368>)
 8000c54:	6822      	ldr	r2, [r4, #0]
 8000c56:	400a      	ands	r2, r1
 8000c58:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1d6      	bne.n	8000c0c <HAL_RCC_OscConfig+0x148>
        tickstart = HAL_GetTick();
 8000c5e:	f7ff fcad 	bl	80005bc <HAL_GetTick>
 8000c62:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000c64:	2280      	movs	r2, #128	; 0x80
 8000c66:	6823      	ldr	r3, [r4, #0]
 8000c68:	0292      	lsls	r2, r2, #10
 8000c6a:	4213      	tst	r3, r2
 8000c6c:	d100      	bne.n	8000c70 <HAL_RCC_OscConfig+0x1ac>
 8000c6e:	e747      	b.n	8000b00 <HAL_RCC_OscConfig+0x3c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c70:	f7ff fca4 	bl	80005bc <HAL_GetTick>
 8000c74:	1bc0      	subs	r0, r0, r7
 8000c76:	2864      	cmp	r0, #100	; 0x64
 8000c78:	d9f4      	bls.n	8000c64 <HAL_RCC_OscConfig+0x1a0>
 8000c7a:	e7d5      	b.n	8000c28 <HAL_RCC_OscConfig+0x164>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000c7c:	68eb      	ldr	r3, [r5, #12]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d906      	bls.n	8000c90 <HAL_RCC_OscConfig+0x1cc>
 8000c82:	2b09      	cmp	r3, #9
 8000c84:	d004      	beq.n	8000c90 <HAL_RCC_OscConfig+0x1cc>
 8000c86:	21cd      	movs	r1, #205	; 0xcd
 8000c88:	485d      	ldr	r0, [pc, #372]	; (8000e00 <HAL_RCC_OscConfig+0x33c>)
 8000c8a:	0049      	lsls	r1, r1, #1
 8000c8c:	f000 fc36 	bl	80014fc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000c90:	692b      	ldr	r3, [r5, #16]
 8000c92:	2b1f      	cmp	r3, #31
 8000c94:	d904      	bls.n	8000ca0 <HAL_RCC_OscConfig+0x1dc>
 8000c96:	219c      	movs	r1, #156	; 0x9c
 8000c98:	4859      	ldr	r0, [pc, #356]	; (8000e00 <HAL_RCC_OscConfig+0x33c>)
 8000c9a:	31ff      	adds	r1, #255	; 0xff
 8000c9c:	f000 fc2e 	bl	80014fc <assert_failed>
    hsi_state = RCC_OscInitStruct->HSIState;
 8000ca0:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ca2:	2e04      	cmp	r6, #4
 8000ca4:	d004      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x1ec>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ca6:	2e0c      	cmp	r6, #12
 8000ca8:	d126      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x234>
 8000caa:	9b00      	ldr	r3, [sp, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d123      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x234>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000cb0:	6823      	ldr	r3, [r4, #0]
 8000cb2:	075b      	lsls	r3, r3, #29
 8000cb4:	d502      	bpl.n	8000cbc <HAL_RCC_OscConfig+0x1f8>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d100      	bne.n	8000cbc <HAL_RCC_OscConfig+0x1f8>
 8000cba:	e708      	b.n	8000ace <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cbc:	6861      	ldr	r1, [r4, #4]
 8000cbe:	692b      	ldr	r3, [r5, #16]
 8000cc0:	485b      	ldr	r0, [pc, #364]	; (8000e30 <HAL_RCC_OscConfig+0x36c>)
 8000cc2:	021b      	lsls	r3, r3, #8
 8000cc4:	4001      	ands	r1, r0
 8000cc6:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000cc8:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cca:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ccc:	6823      	ldr	r3, [r4, #0]
 8000cce:	438b      	bics	r3, r1
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cd4:	f7ff feae 	bl	8000a34 <HAL_RCC_GetSysClockFreq>
 8000cd8:	68e3      	ldr	r3, [r4, #12]
 8000cda:	4a4f      	ldr	r2, [pc, #316]	; (8000e18 <HAL_RCC_OscConfig+0x354>)
 8000cdc:	061b      	lsls	r3, r3, #24
 8000cde:	0f1b      	lsrs	r3, r3, #28
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	494e      	ldr	r1, [pc, #312]	; (8000e1c <HAL_RCC_OscConfig+0x358>)
 8000ce4:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 8000ce6:	4b4e      	ldr	r3, [pc, #312]	; (8000e20 <HAL_RCC_OscConfig+0x35c>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ce8:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	f7ff fc20 	bl	8000530 <HAL_InitTick>
      if(status != HAL_OK)
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d100      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x232>
 8000cf4:	e708      	b.n	8000b08 <HAL_RCC_OscConfig+0x44>
 8000cf6:	e6eb      	b.n	8000ad0 <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000cf8:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	d018      	beq.n	8000d30 <HAL_RCC_OscConfig+0x26c>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000cfe:	2109      	movs	r1, #9
 8000d00:	438b      	bics	r3, r1
 8000d02:	4313      	orrs	r3, r2
 8000d04:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d06:	f7ff fc59 	bl	80005bc <HAL_GetTick>
 8000d0a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d0c:	2204      	movs	r2, #4
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	4213      	tst	r3, r2
 8000d12:	d007      	beq.n	8000d24 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d14:	6862      	ldr	r2, [r4, #4]
 8000d16:	692b      	ldr	r3, [r5, #16]
 8000d18:	4945      	ldr	r1, [pc, #276]	; (8000e30 <HAL_RCC_OscConfig+0x36c>)
 8000d1a:	021b      	lsls	r3, r3, #8
 8000d1c:	400a      	ands	r2, r1
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	6063      	str	r3, [r4, #4]
 8000d22:	e6f1      	b.n	8000b08 <HAL_RCC_OscConfig+0x44>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d24:	f7ff fc4a 	bl	80005bc <HAL_GetTick>
 8000d28:	1bc0      	subs	r0, r0, r7
 8000d2a:	2802      	cmp	r0, #2
 8000d2c:	d9ee      	bls.n	8000d0c <HAL_RCC_OscConfig+0x248>
 8000d2e:	e77b      	b.n	8000c28 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8000d30:	2201      	movs	r2, #1
 8000d32:	4393      	bics	r3, r2
 8000d34:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d36:	f7ff fc41 	bl	80005bc <HAL_GetTick>
 8000d3a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	4213      	tst	r3, r2
 8000d42:	d100      	bne.n	8000d46 <HAL_RCC_OscConfig+0x282>
 8000d44:	e6e0      	b.n	8000b08 <HAL_RCC_OscConfig+0x44>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d46:	f7ff fc39 	bl	80005bc <HAL_GetTick>
 8000d4a:	1bc0      	subs	r0, r0, r7
 8000d4c:	2802      	cmp	r0, #2
 8000d4e:	d9f5      	bls.n	8000d3c <HAL_RCC_OscConfig+0x278>
 8000d50:	e76a      	b.n	8000c28 <HAL_RCC_OscConfig+0x164>
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8000d52:	69eb      	ldr	r3, [r5, #28]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d903      	bls.n	8000d60 <HAL_RCC_OscConfig+0x29c>
 8000d58:	4829      	ldr	r0, [pc, #164]	; (8000e00 <HAL_RCC_OscConfig+0x33c>)
 8000d5a:	4936      	ldr	r1, [pc, #216]	; (8000e34 <HAL_RCC_OscConfig+0x370>)
 8000d5c:	f000 fbce 	bl	80014fc <assert_failed>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d60:	69eb      	ldr	r3, [r5, #28]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d039      	beq.n	8000dda <HAL_RCC_OscConfig+0x316>
        __HAL_RCC_MSI_ENABLE();
 8000d66:	2380      	movs	r3, #128	; 0x80
 8000d68:	6822      	ldr	r2, [r4, #0]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d70:	f7ff fc24 	bl	80005bc <HAL_GetTick>
 8000d74:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000d76:	2280      	movs	r2, #128	; 0x80
 8000d78:	6823      	ldr	r3, [r4, #0]
 8000d7a:	0092      	lsls	r2, r2, #2
 8000d7c:	4213      	tst	r3, r2
 8000d7e:	d026      	beq.n	8000dce <HAL_RCC_OscConfig+0x30a>
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8000d80:	6a2b      	ldr	r3, [r5, #32]
 8000d82:	2bff      	cmp	r3, #255	; 0xff
 8000d84:	d903      	bls.n	8000d8e <HAL_RCC_OscConfig+0x2ca>
 8000d86:	481e      	ldr	r0, [pc, #120]	; (8000e00 <HAL_RCC_OscConfig+0x33c>)
 8000d88:	492b      	ldr	r1, [pc, #172]	; (8000e38 <HAL_RCC_OscConfig+0x374>)
 8000d8a:	f000 fbb7 	bl	80014fc <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8000d8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000d90:	4a1d      	ldr	r2, [pc, #116]	; (8000e08 <HAL_RCC_OscConfig+0x344>)
 8000d92:	491e      	ldr	r1, [pc, #120]	; (8000e0c <HAL_RCC_OscConfig+0x348>)
 8000d94:	401a      	ands	r2, r3
 8000d96:	420b      	tst	r3, r1
 8000d98:	d00b      	beq.n	8000db2 <HAL_RCC_OscConfig+0x2ee>
 8000d9a:	2180      	movs	r1, #128	; 0x80
 8000d9c:	0209      	lsls	r1, r1, #8
 8000d9e:	428a      	cmp	r2, r1
 8000da0:	d007      	beq.n	8000db2 <HAL_RCC_OscConfig+0x2ee>
 8000da2:	22c0      	movs	r2, #192	; 0xc0
 8000da4:	0212      	lsls	r2, r2, #8
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d003      	beq.n	8000db2 <HAL_RCC_OscConfig+0x2ee>
 8000daa:	4815      	ldr	r0, [pc, #84]	; (8000e00 <HAL_RCC_OscConfig+0x33c>)
 8000dac:	4923      	ldr	r1, [pc, #140]	; (8000e3c <HAL_RCC_OscConfig+0x378>)
 8000dae:	f000 fba5 	bl	80014fc <assert_failed>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000db2:	6863      	ldr	r3, [r4, #4]
 8000db4:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <HAL_RCC_OscConfig+0x350>)
 8000db6:	4013      	ands	r3, r2
 8000db8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dbe:	6862      	ldr	r2, [r4, #4]
 8000dc0:	6a2b      	ldr	r3, [r5, #32]
 8000dc2:	0212      	lsls	r2, r2, #8
 8000dc4:	061b      	lsls	r3, r3, #24
 8000dc6:	0a12      	lsrs	r2, r2, #8
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	6063      	str	r3, [r4, #4]
 8000dcc:	e6e2      	b.n	8000b94 <HAL_RCC_OscConfig+0xd0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dce:	f7ff fbf5 	bl	80005bc <HAL_GetTick>
 8000dd2:	1bc0      	subs	r0, r0, r7
 8000dd4:	2802      	cmp	r0, #2
 8000dd6:	d9ce      	bls.n	8000d76 <HAL_RCC_OscConfig+0x2b2>
 8000dd8:	e726      	b.n	8000c28 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_MSI_DISABLE();
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	4a18      	ldr	r2, [pc, #96]	; (8000e40 <HAL_RCC_OscConfig+0x37c>)
 8000dde:	4013      	ands	r3, r2
 8000de0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000de2:	f7ff fbeb 	bl	80005bc <HAL_GetTick>
 8000de6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000de8:	2280      	movs	r2, #128	; 0x80
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	0092      	lsls	r2, r2, #2
 8000dee:	4213      	tst	r3, r2
 8000df0:	d100      	bne.n	8000df4 <HAL_RCC_OscConfig+0x330>
 8000df2:	e6cf      	b.n	8000b94 <HAL_RCC_OscConfig+0xd0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000df4:	f7ff fbe2 	bl	80005bc <HAL_GetTick>
 8000df8:	1bc0      	subs	r0, r0, r7
 8000dfa:	2802      	cmp	r0, #2
 8000dfc:	d9f4      	bls.n	8000de8 <HAL_RCC_OscConfig+0x324>
 8000dfe:	e713      	b.n	8000c28 <HAL_RCC_OscConfig+0x164>
 8000e00:	08001699 	.word	0x08001699
 8000e04:	40021000 	.word	0x40021000
 8000e08:	ffffdfff 	.word	0xffffdfff
 8000e0c:	ffff9fff 	.word	0xffff9fff
 8000e10:	000001ff 	.word	0x000001ff
 8000e14:	ffff1fff 	.word	0xffff1fff
 8000e18:	08001581 	.word	0x08001581
 8000e1c:	2000000c 	.word	0x2000000c
 8000e20:	20000014 	.word	0x20000014
 8000e24:	000002e7 	.word	0x000002e7
 8000e28:	fffeffff 	.word	0xfffeffff
 8000e2c:	fffbffff 	.word	0xfffbffff
 8000e30:	ffffe0ff 	.word	0xffffe0ff
 8000e34:	00000216 	.word	0x00000216
 8000e38:	0000022a 	.word	0x0000022a
 8000e3c:	0000022b 	.word	0x0000022b
 8000e40:	fffffeff 	.word	0xfffffeff
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000e44:	696b      	ldr	r3, [r5, #20]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d903      	bls.n	8000e52 <HAL_RCC_OscConfig+0x38e>
 8000e4a:	48b8      	ldr	r0, [pc, #736]	; (800112c <HAL_RCC_OscConfig+0x668>)
 8000e4c:	49b8      	ldr	r1, [pc, #736]	; (8001130 <HAL_RCC_OscConfig+0x66c>)
 8000e4e:	f000 fb55 	bl	80014fc <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e52:	696a      	ldr	r2, [r5, #20]
 8000e54:	2301      	movs	r3, #1
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	d010      	beq.n	8000e7c <HAL_RCC_OscConfig+0x3b8>
      __HAL_RCC_LSI_ENABLE();
 8000e5a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000e60:	f7ff fbac 	bl	80005bc <HAL_GetTick>
 8000e64:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e66:	2202      	movs	r2, #2
 8000e68:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000e6a:	4213      	tst	r3, r2
 8000e6c:	d000      	beq.n	8000e70 <HAL_RCC_OscConfig+0x3ac>
 8000e6e:	e695      	b.n	8000b9c <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e70:	f7ff fba4 	bl	80005bc <HAL_GetTick>
 8000e74:	1bc0      	subs	r0, r0, r7
 8000e76:	2802      	cmp	r0, #2
 8000e78:	d9f5      	bls.n	8000e66 <HAL_RCC_OscConfig+0x3a2>
 8000e7a:	e6d5      	b.n	8000c28 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_LSI_DISABLE();
 8000e7c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000e7e:	439a      	bics	r2, r3
 8000e80:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000e82:	f7ff fb9b 	bl	80005bc <HAL_GetTick>
 8000e86:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000e88:	2202      	movs	r2, #2
 8000e8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000e8c:	4213      	tst	r3, r2
 8000e8e:	d100      	bne.n	8000e92 <HAL_RCC_OscConfig+0x3ce>
 8000e90:	e684      	b.n	8000b9c <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e92:	f7ff fb93 	bl	80005bc <HAL_GetTick>
 8000e96:	1bc0      	subs	r0, r0, r7
 8000e98:	2802      	cmp	r0, #2
 8000e9a:	d9f5      	bls.n	8000e88 <HAL_RCC_OscConfig+0x3c4>
 8000e9c:	e6c4      	b.n	8000c28 <HAL_RCC_OscConfig+0x164>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8000e9e:	68ab      	ldr	r3, [r5, #8]
 8000ea0:	4aa4      	ldr	r2, [pc, #656]	; (8001134 <HAL_RCC_OscConfig+0x670>)
 8000ea2:	4213      	tst	r3, r2
 8000ea4:	d007      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x3f2>
 8000ea6:	22a0      	movs	r2, #160	; 0xa0
 8000ea8:	00d2      	lsls	r2, r2, #3
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d003      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x3f2>
 8000eae:	489f      	ldr	r0, [pc, #636]	; (800112c <HAL_RCC_OscConfig+0x668>)
 8000eb0:	49a1      	ldr	r1, [pc, #644]	; (8001138 <HAL_RCC_OscConfig+0x674>)
 8000eb2:	f000 fb23 	bl	80014fc <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eb6:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000eb8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000ebc:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8000ebe:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ec0:	421a      	tst	r2, r3
 8000ec2:	d104      	bne.n	8000ece <HAL_RCC_OscConfig+0x40a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ec4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ece:	2280      	movs	r2, #128	; 0x80
 8000ed0:	4f9a      	ldr	r7, [pc, #616]	; (800113c <HAL_RCC_OscConfig+0x678>)
 8000ed2:	0052      	lsls	r2, r2, #1
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	4213      	tst	r3, r2
 8000ed8:	d008      	beq.n	8000eec <HAL_RCC_OscConfig+0x428>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	68ab      	ldr	r3, [r5, #8]
 8000ede:	0052      	lsls	r2, r2, #1
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d117      	bne.n	8000f14 <HAL_RCC_OscConfig+0x450>
 8000ee4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	6523      	str	r3, [r4, #80]	; 0x50
 8000eea:	e038      	b.n	8000f5e <HAL_RCC_OscConfig+0x49a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eec:	2280      	movs	r2, #128	; 0x80
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	0052      	lsls	r2, r2, #1
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000ef6:	f7ff fb61 	bl	80005bc <HAL_GetTick>
 8000efa:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	0052      	lsls	r2, r2, #1
 8000f02:	4213      	tst	r3, r2
 8000f04:	d1e9      	bne.n	8000eda <HAL_RCC_OscConfig+0x416>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f06:	f7ff fb59 	bl	80005bc <HAL_GetTick>
 8000f0a:	9b01      	ldr	r3, [sp, #4]
 8000f0c:	1ac0      	subs	r0, r0, r3
 8000f0e:	2864      	cmp	r0, #100	; 0x64
 8000f10:	d9f4      	bls.n	8000efc <HAL_RCC_OscConfig+0x438>
 8000f12:	e689      	b.n	8000c28 <HAL_RCC_OscConfig+0x164>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d116      	bne.n	8000f46 <HAL_RCC_OscConfig+0x482>
 8000f18:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f1a:	4a86      	ldr	r2, [pc, #536]	; (8001134 <HAL_RCC_OscConfig+0x670>)
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	6523      	str	r3, [r4, #80]	; 0x50
 8000f20:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f22:	4a87      	ldr	r2, [pc, #540]	; (8001140 <HAL_RCC_OscConfig+0x67c>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000f28:	f7ff fb48 	bl	80005bc <HAL_GetTick>
 8000f2c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f32:	0092      	lsls	r2, r2, #2
 8000f34:	4213      	tst	r3, r2
 8000f36:	d01a      	beq.n	8000f6e <HAL_RCC_OscConfig+0x4aa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f38:	f7ff fb40 	bl	80005bc <HAL_GetTick>
 8000f3c:	4b81      	ldr	r3, [pc, #516]	; (8001144 <HAL_RCC_OscConfig+0x680>)
 8000f3e:	1bc0      	subs	r0, r0, r7
 8000f40:	4298      	cmp	r0, r3
 8000f42:	d9f4      	bls.n	8000f2e <HAL_RCC_OscConfig+0x46a>
 8000f44:	e670      	b.n	8000c28 <HAL_RCC_OscConfig+0x164>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f46:	21a0      	movs	r1, #160	; 0xa0
 8000f48:	00c9      	lsls	r1, r1, #3
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d118      	bne.n	8000f80 <HAL_RCC_OscConfig+0x4bc>
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	430b      	orrs	r3, r1
 8000f56:	6523      	str	r3, [r4, #80]	; 0x50
 8000f58:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000f5e:	f7ff fb2d 	bl	80005bc <HAL_GetTick>
 8000f62:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000f64:	2280      	movs	r2, #128	; 0x80
 8000f66:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f68:	0092      	lsls	r2, r2, #2
 8000f6a:	4213      	tst	r3, r2
 8000f6c:	d010      	beq.n	8000f90 <HAL_RCC_OscConfig+0x4cc>
    if(pwrclkchanged == SET)
 8000f6e:	9b00      	ldr	r3, [sp, #0]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d000      	beq.n	8000f76 <HAL_RCC_OscConfig+0x4b2>
 8000f74:	e616      	b.n	8000ba4 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f78:	4a73      	ldr	r2, [pc, #460]	; (8001148 <HAL_RCC_OscConfig+0x684>)
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	63a3      	str	r3, [r4, #56]	; 0x38
 8000f7e:	e611      	b.n	8000ba4 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f80:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f82:	4a6c      	ldr	r2, [pc, #432]	; (8001134 <HAL_RCC_OscConfig+0x670>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	6523      	str	r3, [r4, #80]	; 0x50
 8000f88:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f8a:	4a6d      	ldr	r2, [pc, #436]	; (8001140 <HAL_RCC_OscConfig+0x67c>)
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	e7ab      	b.n	8000ee8 <HAL_RCC_OscConfig+0x424>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f90:	f7ff fb14 	bl	80005bc <HAL_GetTick>
 8000f94:	4b6b      	ldr	r3, [pc, #428]	; (8001144 <HAL_RCC_OscConfig+0x680>)
 8000f96:	1bc0      	subs	r0, r0, r7
 8000f98:	4298      	cmp	r0, r3
 8000f9a:	d9e3      	bls.n	8000f64 <HAL_RCC_OscConfig+0x4a0>
 8000f9c:	e644      	b.n	8000c28 <HAL_RCC_OscConfig+0x164>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8000f9e:	69ab      	ldr	r3, [r5, #24]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d903      	bls.n	8000fac <HAL_RCC_OscConfig+0x4e8>
 8000fa4:	4861      	ldr	r0, [pc, #388]	; (800112c <HAL_RCC_OscConfig+0x668>)
 8000fa6:	4969      	ldr	r1, [pc, #420]	; (800114c <HAL_RCC_OscConfig+0x688>)
 8000fa8:	f000 faa8 	bl	80014fc <assert_failed>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000fac:	69aa      	ldr	r2, [r5, #24]
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4b67      	ldr	r3, [pc, #412]	; (8001150 <HAL_RCC_OscConfig+0x68c>)
 8000fb2:	2a00      	cmp	r2, #0
 8000fb4:	d018      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x524>
        __HAL_RCC_HSI48_ENABLE();
 8000fb6:	68a2      	ldr	r2, [r4, #8]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	60a2      	str	r2, [r4, #8]
 8000fbc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	6362      	str	r2, [r4, #52]	; 0x34
 8000fc2:	2280      	movs	r2, #128	; 0x80
 8000fc4:	6a19      	ldr	r1, [r3, #32]
 8000fc6:	0192      	lsls	r2, r2, #6
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8000fcc:	f7ff faf6 	bl	80005bc <HAL_GetTick>
 8000fd0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	68a3      	ldr	r3, [r4, #8]
 8000fd6:	4213      	tst	r3, r2
 8000fd8:	d000      	beq.n	8000fdc <HAL_RCC_OscConfig+0x518>
 8000fda:	e5e7      	b.n	8000bac <HAL_RCC_OscConfig+0xe8>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000fdc:	f7ff faee 	bl	80005bc <HAL_GetTick>
 8000fe0:	1bc0      	subs	r0, r0, r7
 8000fe2:	2802      	cmp	r0, #2
 8000fe4:	d9f5      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x50e>
 8000fe6:	e61f      	b.n	8000c28 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI48_DISABLE();
 8000fe8:	68a2      	ldr	r2, [r4, #8]
 8000fea:	438a      	bics	r2, r1
 8000fec:	60a2      	str	r2, [r4, #8]
 8000fee:	6a1a      	ldr	r2, [r3, #32]
 8000ff0:	4958      	ldr	r1, [pc, #352]	; (8001154 <HAL_RCC_OscConfig+0x690>)
 8000ff2:	400a      	ands	r2, r1
 8000ff4:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8000ff6:	f7ff fae1 	bl	80005bc <HAL_GetTick>
 8000ffa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	68a3      	ldr	r3, [r4, #8]
 8001000:	4213      	tst	r3, r2
 8001002:	d100      	bne.n	8001006 <HAL_RCC_OscConfig+0x542>
 8001004:	e5d2      	b.n	8000bac <HAL_RCC_OscConfig+0xe8>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001006:	f7ff fad9 	bl	80005bc <HAL_GetTick>
 800100a:	1bc0      	subs	r0, r0, r7
 800100c:	2802      	cmp	r0, #2
 800100e:	d9f5      	bls.n	8000ffc <HAL_RCC_OscConfig+0x538>
 8001010:	e60a      	b.n	8000c28 <HAL_RCC_OscConfig+0x164>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001012:	2e0c      	cmp	r6, #12
 8001014:	d06d      	beq.n	80010f2 <HAL_RCC_OscConfig+0x62e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001016:	4e50      	ldr	r6, [pc, #320]	; (8001158 <HAL_RCC_OscConfig+0x694>)
 8001018:	2b02      	cmp	r3, #2
 800101a:	d158      	bne.n	80010ce <HAL_RCC_OscConfig+0x60a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800101c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800101e:	4b4f      	ldr	r3, [pc, #316]	; (800115c <HAL_RCC_OscConfig+0x698>)
 8001020:	421a      	tst	r2, r3
 8001022:	d004      	beq.n	800102e <HAL_RCC_OscConfig+0x56a>
 8001024:	21bc      	movs	r1, #188	; 0xbc
 8001026:	4841      	ldr	r0, [pc, #260]	; (800112c <HAL_RCC_OscConfig+0x668>)
 8001028:	0089      	lsls	r1, r1, #2
 800102a:	f000 fa67 	bl	80014fc <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800102e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001030:	4a4b      	ldr	r2, [pc, #300]	; (8001160 <HAL_RCC_OscConfig+0x69c>)
 8001032:	0019      	movs	r1, r3
 8001034:	4011      	ands	r1, r2
 8001036:	4213      	tst	r3, r2
 8001038:	d00b      	beq.n	8001052 <HAL_RCC_OscConfig+0x58e>
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	0352      	lsls	r2, r2, #13
 800103e:	4291      	cmp	r1, r2
 8001040:	d007      	beq.n	8001052 <HAL_RCC_OscConfig+0x58e>
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	0392      	lsls	r2, r2, #14
 8001046:	4293      	cmp	r3, r2
 8001048:	d003      	beq.n	8001052 <HAL_RCC_OscConfig+0x58e>
 800104a:	4838      	ldr	r0, [pc, #224]	; (800112c <HAL_RCC_OscConfig+0x668>)
 800104c:	4945      	ldr	r1, [pc, #276]	; (8001164 <HAL_RCC_OscConfig+0x6a0>)
 800104e:	f000 fa55 	bl	80014fc <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 8001052:	2180      	movs	r1, #128	; 0x80
 8001054:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001056:	4b44      	ldr	r3, [pc, #272]	; (8001168 <HAL_RCC_OscConfig+0x6a4>)
 8001058:	03c9      	lsls	r1, r1, #15
 800105a:	4013      	ands	r3, r2
 800105c:	428b      	cmp	r3, r1
 800105e:	d007      	beq.n	8001070 <HAL_RCC_OscConfig+0x5ac>
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	041b      	lsls	r3, r3, #16
 8001064:	429a      	cmp	r2, r3
 8001066:	d003      	beq.n	8001070 <HAL_RCC_OscConfig+0x5ac>
 8001068:	4830      	ldr	r0, [pc, #192]	; (800112c <HAL_RCC_OscConfig+0x668>)
 800106a:	4940      	ldr	r1, [pc, #256]	; (800116c <HAL_RCC_OscConfig+0x6a8>)
 800106c:	f000 fa46 	bl	80014fc <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8001070:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001072:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001074:	4033      	ands	r3, r6
 8001076:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001078:	f7ff faa0 	bl	80005bc <HAL_GetTick>
 800107c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800107e:	04bf      	lsls	r7, r7, #18
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	423b      	tst	r3, r7
 8001084:	d11d      	bne.n	80010c2 <HAL_RCC_OscConfig+0x5fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001086:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001088:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800108a:	68e2      	ldr	r2, [r4, #12]
 800108c:	430b      	orrs	r3, r1
 800108e:	4938      	ldr	r1, [pc, #224]	; (8001170 <HAL_RCC_OscConfig+0x6ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001090:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001092:	400a      	ands	r2, r1
 8001094:	4313      	orrs	r3, r2
 8001096:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001098:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800109a:	4313      	orrs	r3, r2
 800109c:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	6822      	ldr	r2, [r4, #0]
 80010a2:	045b      	lsls	r3, r3, #17
 80010a4:	4313      	orrs	r3, r2
 80010a6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010a8:	f7ff fa88 	bl	80005bc <HAL_GetTick>
 80010ac:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	4233      	tst	r3, r6
 80010b2:	d000      	beq.n	80010b6 <HAL_RCC_OscConfig+0x5f2>
 80010b4:	e585      	b.n	8000bc2 <HAL_RCC_OscConfig+0xfe>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010b6:	f7ff fa81 	bl	80005bc <HAL_GetTick>
 80010ba:	1b40      	subs	r0, r0, r5
 80010bc:	2802      	cmp	r0, #2
 80010be:	d9f6      	bls.n	80010ae <HAL_RCC_OscConfig+0x5ea>
 80010c0:	e5b2      	b.n	8000c28 <HAL_RCC_OscConfig+0x164>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010c2:	f7ff fa7b 	bl	80005bc <HAL_GetTick>
 80010c6:	1b80      	subs	r0, r0, r6
 80010c8:	2802      	cmp	r0, #2
 80010ca:	d9d9      	bls.n	8001080 <HAL_RCC_OscConfig+0x5bc>
 80010cc:	e5ac      	b.n	8000c28 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_PLL_DISABLE();
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	4033      	ands	r3, r6
 80010d2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010d4:	f7ff fa72 	bl	80005bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80010d8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80010da:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80010dc:	04b6      	lsls	r6, r6, #18
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	4233      	tst	r3, r6
 80010e2:	d100      	bne.n	80010e6 <HAL_RCC_OscConfig+0x622>
 80010e4:	e56d      	b.n	8000bc2 <HAL_RCC_OscConfig+0xfe>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010e6:	f7ff fa69 	bl	80005bc <HAL_GetTick>
 80010ea:	1b40      	subs	r0, r0, r5
 80010ec:	2802      	cmp	r0, #2
 80010ee:	d9f6      	bls.n	80010de <HAL_RCC_OscConfig+0x61a>
 80010f0:	e59a      	b.n	8000c28 <HAL_RCC_OscConfig+0x164>
        return HAL_ERROR;
 80010f2:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d100      	bne.n	80010fa <HAL_RCC_OscConfig+0x636>
 80010f8:	e4ea      	b.n	8000ad0 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010fa:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80010fc:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010fe:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001100:	0252      	lsls	r2, r2, #9
        return HAL_ERROR;
 8001102:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001104:	401a      	ands	r2, r3
 8001106:	428a      	cmp	r2, r1
 8001108:	d000      	beq.n	800110c <HAL_RCC_OscConfig+0x648>
 800110a:	e4e1      	b.n	8000ad0 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800110c:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800110e:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001110:	0392      	lsls	r2, r2, #14
 8001112:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001114:	428a      	cmp	r2, r1
 8001116:	d000      	beq.n	800111a <HAL_RCC_OscConfig+0x656>
 8001118:	e4da      	b.n	8000ad0 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800111a:	22c0      	movs	r2, #192	; 0xc0
 800111c:	0412      	lsls	r2, r2, #16
 800111e:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001120:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001122:	1a9b      	subs	r3, r3, r2
 8001124:	1e5a      	subs	r2, r3, #1
 8001126:	4193      	sbcs	r3, r2
    return HAL_ERROR;
 8001128:	b2d8      	uxtb	r0, r3
 800112a:	e4d1      	b.n	8000ad0 <HAL_RCC_OscConfig+0xc>
 800112c:	08001699 	.word	0x08001699
 8001130:	00000249 	.word	0x00000249
 8001134:	fffffeff 	.word	0xfffffeff
 8001138:	00000275 	.word	0x00000275
 800113c:	40007000 	.word	0x40007000
 8001140:	fffffbff 	.word	0xfffffbff
 8001144:	00001388 	.word	0x00001388
 8001148:	efffffff 	.word	0xefffffff
 800114c:	000002bd 	.word	0x000002bd
 8001150:	40010000 	.word	0x40010000
 8001154:	ffffdfff 	.word	0xffffdfff
 8001158:	feffffff 	.word	0xfeffffff
 800115c:	fffeffff 	.word	0xfffeffff
 8001160:	fff3ffff 	.word	0xfff3ffff
 8001164:	000002f1 	.word	0x000002f1
 8001168:	ff7fffff 	.word	0xff7fffff
 800116c:	000002f2 	.word	0x000002f2
 8001170:	ff02ffff 	.word	0xff02ffff

08001174 <HAL_RCC_ClockConfig>:
{
 8001174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001176:	0004      	movs	r4, r0
 8001178:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 800117a:	2800      	cmp	r0, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800117e:	2001      	movs	r0, #1
}
 8001180:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001182:	6803      	ldr	r3, [r0, #0]
 8001184:	071b      	lsls	r3, r3, #28
 8001186:	d103      	bne.n	8001190 <HAL_RCC_ClockConfig+0x1c>
 8001188:	4886      	ldr	r0, [pc, #536]	; (80013a4 <HAL_RCC_ClockConfig+0x230>)
 800118a:	4987      	ldr	r1, [pc, #540]	; (80013a8 <HAL_RCC_ClockConfig+0x234>)
 800118c:	f000 f9b6 	bl	80014fc <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001190:	2f01      	cmp	r7, #1
 8001192:	d903      	bls.n	800119c <HAL_RCC_ClockConfig+0x28>
 8001194:	4883      	ldr	r0, [pc, #524]	; (80013a4 <HAL_RCC_ClockConfig+0x230>)
 8001196:	4985      	ldr	r1, [pc, #532]	; (80013ac <HAL_RCC_ClockConfig+0x238>)
 8001198:	f000 f9b0 	bl	80014fc <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800119c:	2501      	movs	r5, #1
 800119e:	4e84      	ldr	r6, [pc, #528]	; (80013b0 <HAL_RCC_ClockConfig+0x23c>)
 80011a0:	6833      	ldr	r3, [r6, #0]
 80011a2:	402b      	ands	r3, r5
 80011a4:	42bb      	cmp	r3, r7
 80011a6:	d344      	bcc.n	8001232 <HAL_RCC_ClockConfig+0xbe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	079b      	lsls	r3, r3, #30
 80011ac:	d455      	bmi.n	800125a <HAL_RCC_ClockConfig+0xe6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	07db      	lsls	r3, r3, #31
 80011b2:	d474      	bmi.n	800129e <HAL_RCC_ClockConfig+0x12a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011b4:	2501      	movs	r5, #1
 80011b6:	6833      	ldr	r3, [r6, #0]
 80011b8:	402b      	ands	r3, r5
 80011ba:	42bb      	cmp	r3, r7
 80011bc:	d909      	bls.n	80011d2 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011be:	6833      	ldr	r3, [r6, #0]
 80011c0:	43ab      	bics	r3, r5
 80011c2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80011c4:	f7ff f9fa 	bl	80005bc <HAL_GetTick>
 80011c8:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ca:	6833      	ldr	r3, [r6, #0]
 80011cc:	422b      	tst	r3, r5
 80011ce:	d000      	beq.n	80011d2 <HAL_RCC_ClockConfig+0x5e>
 80011d0:	e0c7      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d2:	6823      	ldr	r3, [r4, #0]
 80011d4:	4d77      	ldr	r5, [pc, #476]	; (80013b4 <HAL_RCC_ClockConfig+0x240>)
 80011d6:	075b      	lsls	r3, r3, #29
 80011d8:	d500      	bpl.n	80011dc <HAL_RCC_ClockConfig+0x68>
 80011da:	e0ca      	b.n	8001372 <HAL_RCC_ClockConfig+0x1fe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011dc:	6823      	ldr	r3, [r4, #0]
 80011de:	071b      	lsls	r3, r3, #28
 80011e0:	d518      	bpl.n	8001214 <HAL_RCC_ClockConfig+0xa0>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80011e2:	6923      	ldr	r3, [r4, #16]
 80011e4:	4a74      	ldr	r2, [pc, #464]	; (80013b8 <HAL_RCC_ClockConfig+0x244>)
 80011e6:	4213      	tst	r3, r2
 80011e8:	d00d      	beq.n	8001206 <HAL_RCC_ClockConfig+0x92>
 80011ea:	21a0      	movs	r1, #160	; 0xa0
 80011ec:	4a73      	ldr	r2, [pc, #460]	; (80013bc <HAL_RCC_ClockConfig+0x248>)
 80011ee:	00c9      	lsls	r1, r1, #3
 80011f0:	401a      	ands	r2, r3
 80011f2:	428a      	cmp	r2, r1
 80011f4:	d007      	beq.n	8001206 <HAL_RCC_ClockConfig+0x92>
 80011f6:	22c0      	movs	r2, #192	; 0xc0
 80011f8:	00d2      	lsls	r2, r2, #3
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d003      	beq.n	8001206 <HAL_RCC_ClockConfig+0x92>
 80011fe:	4869      	ldr	r0, [pc, #420]	; (80013a4 <HAL_RCC_ClockConfig+0x230>)
 8001200:	496f      	ldr	r1, [pc, #444]	; (80013c0 <HAL_RCC_ClockConfig+0x24c>)
 8001202:	f000 f97b 	bl	80014fc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001206:	68ea      	ldr	r2, [r5, #12]
 8001208:	6923      	ldr	r3, [r4, #16]
 800120a:	496e      	ldr	r1, [pc, #440]	; (80013c4 <HAL_RCC_ClockConfig+0x250>)
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	400a      	ands	r2, r1
 8001210:	4313      	orrs	r3, r2
 8001212:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001214:	f7ff fc0e 	bl	8000a34 <HAL_RCC_GetSysClockFreq>
 8001218:	68eb      	ldr	r3, [r5, #12]
 800121a:	4a6b      	ldr	r2, [pc, #428]	; (80013c8 <HAL_RCC_ClockConfig+0x254>)
 800121c:	061b      	lsls	r3, r3, #24
 800121e:	0f1b      	lsrs	r3, r3, #28
 8001220:	5cd3      	ldrb	r3, [r2, r3]
 8001222:	496a      	ldr	r1, [pc, #424]	; (80013cc <HAL_RCC_ClockConfig+0x258>)
 8001224:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 8001226:	4b6a      	ldr	r3, [pc, #424]	; (80013d0 <HAL_RCC_ClockConfig+0x25c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001228:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 800122a:	6818      	ldr	r0, [r3, #0]
 800122c:	f7ff f980 	bl	8000530 <HAL_InitTick>
  if(status != HAL_OK)
 8001230:	e7a6      	b.n	8001180 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001232:	6833      	ldr	r3, [r6, #0]
 8001234:	43ab      	bics	r3, r5
 8001236:	433b      	orrs	r3, r7
 8001238:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800123a:	f7ff f9bf 	bl	80005bc <HAL_GetTick>
 800123e:	9001      	str	r0, [sp, #4]
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001240:	6833      	ldr	r3, [r6, #0]
 8001242:	402b      	ands	r3, r5
 8001244:	42bb      	cmp	r3, r7
 8001246:	d0af      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x34>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001248:	f7ff f9b8 	bl	80005bc <HAL_GetTick>
 800124c:	9b01      	ldr	r3, [sp, #4]
 800124e:	1ac0      	subs	r0, r0, r3
 8001250:	4b60      	ldr	r3, [pc, #384]	; (80013d4 <HAL_RCC_ClockConfig+0x260>)
 8001252:	4298      	cmp	r0, r3
 8001254:	d9f4      	bls.n	8001240 <HAL_RCC_ClockConfig+0xcc>
        return HAL_TIMEOUT;
 8001256:	2003      	movs	r0, #3
 8001258:	e792      	b.n	8001180 <HAL_RCC_ClockConfig+0xc>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800125a:	68a3      	ldr	r3, [r4, #8]
 800125c:	2280      	movs	r2, #128	; 0x80
 800125e:	0019      	movs	r1, r3
 8001260:	4391      	bics	r1, r2
 8001262:	d014      	beq.n	800128e <HAL_RCC_ClockConfig+0x11a>
 8001264:	2220      	movs	r2, #32
 8001266:	0019      	movs	r1, r3
 8001268:	4391      	bics	r1, r2
 800126a:	2990      	cmp	r1, #144	; 0x90
 800126c:	d00f      	beq.n	800128e <HAL_RCC_ClockConfig+0x11a>
 800126e:	2240      	movs	r2, #64	; 0x40
 8001270:	0019      	movs	r1, r3
 8001272:	4391      	bics	r1, r2
 8001274:	29a0      	cmp	r1, #160	; 0xa0
 8001276:	d00a      	beq.n	800128e <HAL_RCC_ClockConfig+0x11a>
 8001278:	2210      	movs	r2, #16
 800127a:	0019      	movs	r1, r3
 800127c:	4391      	bics	r1, r2
 800127e:	29c0      	cmp	r1, #192	; 0xc0
 8001280:	d005      	beq.n	800128e <HAL_RCC_ClockConfig+0x11a>
 8001282:	2bf0      	cmp	r3, #240	; 0xf0
 8001284:	d003      	beq.n	800128e <HAL_RCC_ClockConfig+0x11a>
 8001286:	4847      	ldr	r0, [pc, #284]	; (80013a4 <HAL_RCC_ClockConfig+0x230>)
 8001288:	4953      	ldr	r1, [pc, #332]	; (80013d8 <HAL_RCC_ClockConfig+0x264>)
 800128a:	f000 f937 	bl	80014fc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800128e:	21f0      	movs	r1, #240	; 0xf0
 8001290:	4a48      	ldr	r2, [pc, #288]	; (80013b4 <HAL_RCC_ClockConfig+0x240>)
 8001292:	68d3      	ldr	r3, [r2, #12]
 8001294:	438b      	bics	r3, r1
 8001296:	68a1      	ldr	r1, [r4, #8]
 8001298:	430b      	orrs	r3, r1
 800129a:	60d3      	str	r3, [r2, #12]
 800129c:	e787      	b.n	80011ae <HAL_RCC_ClockConfig+0x3a>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800129e:	6863      	ldr	r3, [r4, #4]
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d903      	bls.n	80012ac <HAL_RCC_ClockConfig+0x138>
 80012a4:	483f      	ldr	r0, [pc, #252]	; (80013a4 <HAL_RCC_ClockConfig+0x230>)
 80012a6:	494d      	ldr	r1, [pc, #308]	; (80013dc <HAL_RCC_ClockConfig+0x268>)
 80012a8:	f000 f928 	bl	80014fc <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ac:	4d41      	ldr	r5, [pc, #260]	; (80013b4 <HAL_RCC_ClockConfig+0x240>)
 80012ae:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012b0:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b2:	2a02      	cmp	r2, #2
 80012b4:	d11b      	bne.n	80012ee <HAL_RCC_ClockConfig+0x17a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012b6:	039b      	lsls	r3, r3, #14
 80012b8:	d400      	bmi.n	80012bc <HAL_RCC_ClockConfig+0x148>
 80012ba:	e760      	b.n	800117e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012bc:	2103      	movs	r1, #3
 80012be:	68eb      	ldr	r3, [r5, #12]
 80012c0:	438b      	bics	r3, r1
 80012c2:	4313      	orrs	r3, r2
 80012c4:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80012c6:	f7ff f979 	bl	80005bc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ca:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80012cc:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d11a      	bne.n	8001308 <HAL_RCC_ClockConfig+0x194>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012d2:	220c      	movs	r2, #12
 80012d4:	68eb      	ldr	r3, [r5, #12]
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b08      	cmp	r3, #8
 80012da:	d100      	bne.n	80012de <HAL_RCC_ClockConfig+0x16a>
 80012dc:	e76a      	b.n	80011b4 <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012de:	f7ff f96d 	bl	80005bc <HAL_GetTick>
 80012e2:	9b01      	ldr	r3, [sp, #4]
 80012e4:	1ac0      	subs	r0, r0, r3
 80012e6:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <HAL_RCC_ClockConfig+0x260>)
 80012e8:	4298      	cmp	r0, r3
 80012ea:	d9f2      	bls.n	80012d2 <HAL_RCC_ClockConfig+0x15e>
 80012ec:	e7b3      	b.n	8001256 <HAL_RCC_ClockConfig+0xe2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ee:	2a03      	cmp	r2, #3
 80012f0:	d102      	bne.n	80012f8 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80012f2:	019b      	lsls	r3, r3, #6
 80012f4:	d4e2      	bmi.n	80012bc <HAL_RCC_ClockConfig+0x148>
 80012f6:	e742      	b.n	800117e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80012f8:	2a01      	cmp	r2, #1
 80012fa:	d102      	bne.n	8001302 <HAL_RCC_ClockConfig+0x18e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012fc:	075b      	lsls	r3, r3, #29
 80012fe:	d4dd      	bmi.n	80012bc <HAL_RCC_ClockConfig+0x148>
 8001300:	e73d      	b.n	800117e <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001302:	059b      	lsls	r3, r3, #22
 8001304:	d4da      	bmi.n	80012bc <HAL_RCC_ClockConfig+0x148>
 8001306:	e73a      	b.n	800117e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001308:	2b03      	cmp	r3, #3
 800130a:	d10d      	bne.n	8001328 <HAL_RCC_ClockConfig+0x1b4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800130c:	220c      	movs	r2, #12
 800130e:	68eb      	ldr	r3, [r5, #12]
 8001310:	4013      	ands	r3, r2
 8001312:	4293      	cmp	r3, r2
 8001314:	d100      	bne.n	8001318 <HAL_RCC_ClockConfig+0x1a4>
 8001316:	e74d      	b.n	80011b4 <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001318:	f7ff f950 	bl	80005bc <HAL_GetTick>
 800131c:	9b01      	ldr	r3, [sp, #4]
 800131e:	1ac0      	subs	r0, r0, r3
 8001320:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <HAL_RCC_ClockConfig+0x260>)
 8001322:	4298      	cmp	r0, r3
 8001324:	d9f2      	bls.n	800130c <HAL_RCC_ClockConfig+0x198>
 8001326:	e796      	b.n	8001256 <HAL_RCC_ClockConfig+0xe2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001328:	2b01      	cmp	r3, #1
 800132a:	d014      	beq.n	8001356 <HAL_RCC_ClockConfig+0x1e2>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800132c:	220c      	movs	r2, #12
 800132e:	68eb      	ldr	r3, [r5, #12]
 8001330:	4213      	tst	r3, r2
 8001332:	d100      	bne.n	8001336 <HAL_RCC_ClockConfig+0x1c2>
 8001334:	e73e      	b.n	80011b4 <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001336:	f7ff f941 	bl	80005bc <HAL_GetTick>
 800133a:	9b01      	ldr	r3, [sp, #4]
 800133c:	1ac0      	subs	r0, r0, r3
 800133e:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <HAL_RCC_ClockConfig+0x260>)
 8001340:	4298      	cmp	r0, r3
 8001342:	d9f3      	bls.n	800132c <HAL_RCC_ClockConfig+0x1b8>
 8001344:	e787      	b.n	8001256 <HAL_RCC_ClockConfig+0xe2>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001346:	f7ff f939 	bl	80005bc <HAL_GetTick>
 800134a:	9b01      	ldr	r3, [sp, #4]
 800134c:	1ac0      	subs	r0, r0, r3
 800134e:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <HAL_RCC_ClockConfig+0x260>)
 8001350:	4298      	cmp	r0, r3
 8001352:	d900      	bls.n	8001356 <HAL_RCC_ClockConfig+0x1e2>
 8001354:	e77f      	b.n	8001256 <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001356:	220c      	movs	r2, #12
 8001358:	68eb      	ldr	r3, [r5, #12]
 800135a:	4013      	ands	r3, r2
 800135c:	2b04      	cmp	r3, #4
 800135e:	d1f2      	bne.n	8001346 <HAL_RCC_ClockConfig+0x1d2>
 8001360:	e728      	b.n	80011b4 <HAL_RCC_ClockConfig+0x40>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001362:	f7ff f92b 	bl	80005bc <HAL_GetTick>
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <HAL_RCC_ClockConfig+0x260>)
 8001368:	1bc0      	subs	r0, r0, r7
 800136a:	4298      	cmp	r0, r3
 800136c:	d800      	bhi.n	8001370 <HAL_RCC_ClockConfig+0x1fc>
 800136e:	e72c      	b.n	80011ca <HAL_RCC_ClockConfig+0x56>
 8001370:	e771      	b.n	8001256 <HAL_RCC_ClockConfig+0xe2>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001372:	68e3      	ldr	r3, [r4, #12]
 8001374:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <HAL_RCC_ClockConfig+0x244>)
 8001376:	4213      	tst	r3, r2
 8001378:	d00d      	beq.n	8001396 <HAL_RCC_ClockConfig+0x222>
 800137a:	21a0      	movs	r1, #160	; 0xa0
 800137c:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <HAL_RCC_ClockConfig+0x248>)
 800137e:	00c9      	lsls	r1, r1, #3
 8001380:	401a      	ands	r2, r3
 8001382:	428a      	cmp	r2, r1
 8001384:	d007      	beq.n	8001396 <HAL_RCC_ClockConfig+0x222>
 8001386:	22c0      	movs	r2, #192	; 0xc0
 8001388:	00d2      	lsls	r2, r2, #3
 800138a:	4293      	cmp	r3, r2
 800138c:	d003      	beq.n	8001396 <HAL_RCC_ClockConfig+0x222>
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <HAL_RCC_ClockConfig+0x230>)
 8001390:	4913      	ldr	r1, [pc, #76]	; (80013e0 <HAL_RCC_ClockConfig+0x26c>)
 8001392:	f000 f8b3 	bl	80014fc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001396:	68eb      	ldr	r3, [r5, #12]
 8001398:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <HAL_RCC_ClockConfig+0x270>)
 800139a:	4013      	ands	r3, r2
 800139c:	68e2      	ldr	r2, [r4, #12]
 800139e:	4313      	orrs	r3, r2
 80013a0:	60eb      	str	r3, [r5, #12]
 80013a2:	e71b      	b.n	80011dc <HAL_RCC_ClockConfig+0x68>
 80013a4:	08001699 	.word	0x08001699
 80013a8:	00000365 	.word	0x00000365
 80013ac:	00000366 	.word	0x00000366
 80013b0:	40022000 	.word	0x40022000
 80013b4:	40021000 	.word	0x40021000
 80013b8:	fffffbff 	.word	0xfffffbff
 80013bc:	fffffdff 	.word	0xfffffdff
 80013c0:	000003fa 	.word	0x000003fa
 80013c4:	ffffc7ff 	.word	0xffffc7ff
 80013c8:	08001581 	.word	0x08001581
 80013cc:	2000000c 	.word	0x2000000c
 80013d0:	20000014 	.word	0x20000014
 80013d4:	00001388 	.word	0x00001388
 80013d8:	00000382 	.word	0x00000382
 80013dc:	00000389 	.word	0x00000389
 80013e0:	000003f3 	.word	0x000003f3
 80013e4:	fffff8ff 	.word	0xfffff8ff

080013e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80013ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013ee:	e003      	b.n	80013f8 <LoopCopyDataInit>

080013f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80013f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013f6:	3104      	adds	r1, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80013f8:	480b      	ldr	r0, [pc, #44]	; (8001428 <LoopForever+0xa>)
  ldr  r3, =_edata
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <LoopForever+0xe>)
  adds  r2, r0, r1
 80013fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001400:	d3f6      	bcc.n	80013f0 <CopyDataInit>
  ldr  r2, =_sbss
 8001402:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <LoopForever+0x12>)
  b  LoopFillZerobss
 8001404:	e002      	b.n	800140c <LoopFillZerobss>

08001406 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001406:	2300      	movs	r3, #0
  str  r3, [r2]
 8001408:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800140a:	3204      	adds	r2, #4

0800140c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <LoopForever+0x16>)
  cmp  r2, r3
 800140e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001410:	d3f9      	bcc.n	8001406 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001412:	f7ff f88b 	bl	800052c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001416:	f000 f87b 	bl	8001510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800141a:	f000 f80f 	bl	800143c <main>

0800141e <LoopForever>:

LoopForever:
    b LoopForever
 800141e:	e7fe      	b.n	800141e <LoopForever>
  ldr   r0, =_estack
 8001420:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8001424:	08001700 	.word	0x08001700
  ldr  r0, =_sdata
 8001428:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800142c:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8001430:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8001434:	20000038 	.word	0x20000038

08001438 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001438:	e7fe      	b.n	8001438 <ADC1_COMP_IRQHandler>
	...

0800143c <main>:
* @brief  Main program
* @param  None
* @retval None
*/
int main(void)
{  
 800143c:	b510      	push	{r4, lr}
 800143e:	b094      	sub	sp, #80	; 0x50
             timer for example or other time source), keeping in mind that Time base 
             duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
             handled in milliseconds basis.
       - Low Level Initialization
     */
  HAL_Init();
 8001440:	f7ff f898 	bl	8000574 <HAL_Init>

  /* Configure LED3 */
  BSP_LED_Init(LED3);
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff f82f 	bl	80004a8 <BSP_LED_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	4a25      	ldr	r2, [pc, #148]	; (80014e4 <main+0xa8>)
 800144e:	055b      	lsls	r3, r3, #21
 8001450:	6b91      	ldr	r1, [r2, #56]	; 0x38
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001452:	4c25      	ldr	r4, [pc, #148]	; (80014e8 <main+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001454:	430b      	orrs	r3, r1
 8001456:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001458:	6822      	ldr	r2, [r4, #0]
 800145a:	4b24      	ldr	r3, [pc, #144]	; (80014ec <main+0xb0>)
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
  RCC_OscInitStruct.MSICalibrationValue = 0x00;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145c:	a806      	add	r0, sp, #24
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800145e:	401a      	ands	r2, r3
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	4313      	orrs	r3, r2
 8001466:	6023      	str	r3, [r4, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001468:	2310      	movs	r3, #16
 800146a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800146c:	3b0f      	subs	r3, #15
 800146e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001470:	23a0      	movs	r3, #160	; 0xa0
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSICalibrationValue = 0x00;
 8001476:	2300      	movs	r3, #0
 8001478:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800147a:	9310      	str	r3, [sp, #64]	; 0x40
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147c:	f7ff fb22 	bl	8000ac4 <HAL_RCC_OscConfig>
 8001480:	1e01      	subs	r1, r0, #0
 8001482:	d003      	beq.n	800148c <main+0x50>
static void Error_Handler(void)
{
  while(1)
  {
    /* Turn LED3 on */
    BSP_LED_On(LED3);
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff f841 	bl	800050c <BSP_LED_On>
  while(1)
 800148a:	e7fb      	b.n	8001484 <main+0x48>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800148c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800148e:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001490:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 8001492:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8001494:	9005      	str	r0, [sp, #20]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001496:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001498:	9301      	str	r3, [sp, #4]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800149a:	f7ff fe6b 	bl	8001174 <HAL_RCC_ClockConfig>
 800149e:	2800      	cmp	r0, #0
 80014a0:	d003      	beq.n	80014aa <main+0x6e>
    BSP_LED_On(LED3);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff f832 	bl	800050c <BSP_LED_On>
  while(1)
 80014a8:	e7fb      	b.n	80014a2 <main+0x66>
  HAL_PWREx_EnableUltraLowPower();
 80014aa:	f7ff fab9 	bl	8000a20 <HAL_PWREx_EnableUltraLowPower>
  HAL_PWREx_EnableFastWakeUp();
 80014ae:	f7ff faad 	bl	8000a0c <HAL_PWREx_EnableFastWakeUp>
  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80014b2:	6863      	ldr	r3, [r4, #4]
 80014b4:	079b      	lsls	r3, r3, #30
 80014b6:	d503      	bpl.n	80014c0 <main+0x84>
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80014b8:	2308      	movs	r3, #8
 80014ba:	6822      	ldr	r2, [r4, #0]
 80014bc:	4313      	orrs	r3, r2
 80014be:	6023      	str	r3, [r4, #0]
  HAL_Delay(5000);
 80014c0:	480b      	ldr	r0, [pc, #44]	; (80014f0 <main+0xb4>)
 80014c2:	f7ff f881 	bl	80005c8 <HAL_Delay>
  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 80014c6:	2080      	movs	r0, #128	; 0x80
 80014c8:	0040      	lsls	r0, r0, #1
 80014ca:	f7ff fa77 	bl	80009bc <HAL_PWR_DisableWakeUpPin>
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80014ce:	2304      	movs	r3, #4
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80014d0:	2080      	movs	r0, #128	; 0x80
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80014d2:	6822      	ldr	r2, [r4, #0]
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80014d4:	0040      	lsls	r0, r0, #1
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80014d6:	4313      	orrs	r3, r2
 80014d8:	6023      	str	r3, [r4, #0]
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80014da:	f7ff fa57 	bl	800098c <HAL_PWR_EnableWakeUpPin>
  HAL_PWR_EnterSTANDBYMode();
 80014de:	f7ff fa85 	bl	80009ec <HAL_PWR_EnterSTANDBYMode>
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <main+0xa6>
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40007000 	.word	0x40007000
 80014ec:	ffffe7ff 	.word	0xffffe7ff
 80014f0:	00001388 	.word	0x00001388

080014f4 <HAL_SYSTICK_Callback>:
  * @brief SYSTICK callback
  * @param None
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 80014f4:	b510      	push	{r4, lr}
  HAL_IncTick();
 80014f6:	f7ff f855 	bl	80005a4 <HAL_IncTick>
}
 80014fa:	bd10      	pop	{r4, pc}

080014fc <assert_failed>:
{
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <assert_failed>

080014fe <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80014fe:	4770      	bx	lr

08001500 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001500:	e7fe      	b.n	8001500 <HardFault_Handler>

08001502 <SVC_Handler>:
 8001502:	4770      	bx	lr

08001504 <PendSV_Handler>:
 8001504:	4770      	bx	lr

08001506 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{ 
 8001506:	b510      	push	{r4, lr}
  HAL_SYSTICK_IRQHandler();
 8001508:	f7ff f8be 	bl	8000688 <HAL_SYSTICK_IRQHandler>
}
 800150c:	bd10      	pop	{r4, pc}
	...

08001510 <__libc_init_array>:
 8001510:	b570      	push	{r4, r5, r6, lr}
 8001512:	2600      	movs	r6, #0
 8001514:	4c0c      	ldr	r4, [pc, #48]	; (8001548 <__libc_init_array+0x38>)
 8001516:	4d0d      	ldr	r5, [pc, #52]	; (800154c <__libc_init_array+0x3c>)
 8001518:	1b64      	subs	r4, r4, r5
 800151a:	10a4      	asrs	r4, r4, #2
 800151c:	42a6      	cmp	r6, r4
 800151e:	d109      	bne.n	8001534 <__libc_init_array+0x24>
 8001520:	2600      	movs	r6, #0
 8001522:	f000 f819 	bl	8001558 <_init>
 8001526:	4c0a      	ldr	r4, [pc, #40]	; (8001550 <__libc_init_array+0x40>)
 8001528:	4d0a      	ldr	r5, [pc, #40]	; (8001554 <__libc_init_array+0x44>)
 800152a:	1b64      	subs	r4, r4, r5
 800152c:	10a4      	asrs	r4, r4, #2
 800152e:	42a6      	cmp	r6, r4
 8001530:	d105      	bne.n	800153e <__libc_init_array+0x2e>
 8001532:	bd70      	pop	{r4, r5, r6, pc}
 8001534:	00b3      	lsls	r3, r6, #2
 8001536:	58eb      	ldr	r3, [r5, r3]
 8001538:	4798      	blx	r3
 800153a:	3601      	adds	r6, #1
 800153c:	e7ee      	b.n	800151c <__libc_init_array+0xc>
 800153e:	00b3      	lsls	r3, r6, #2
 8001540:	58eb      	ldr	r3, [r5, r3]
 8001542:	4798      	blx	r3
 8001544:	3601      	adds	r6, #1
 8001546:	e7f2      	b.n	800152e <__libc_init_array+0x1e>
 8001548:	080016f8 	.word	0x080016f8
 800154c:	080016f8 	.word	0x080016f8
 8001550:	080016fc 	.word	0x080016fc
 8001554:	080016f8 	.word	0x080016f8

08001558 <_init>:
 8001558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800155e:	bc08      	pop	{r3}
 8001560:	469e      	mov	lr, r3
 8001562:	4770      	bx	lr

08001564 <_fini>:
 8001564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800156a:	bc08      	pop	{r3}
 800156c:	469e      	mov	lr, r3
 800156e:	4770      	bx	lr
