
3_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003a9c  08003a9c  00013a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b1c  08003b1c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003b1c  08003b1c  00013b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b24  08003b24  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b24  08003b24  00013b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b28  08003b28  00013b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000068  08003b94  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003b94  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a79c  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d1c  00000000  00000000  0002a86f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  0002c590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000066d  00000000  00000000  0002ce00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014989  00000000  00000000  0002d46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b840  00000000  00000000  00041df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000796ea  00000000  00000000  0004d636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002328  00000000  00000000  000c6d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000c9048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a84 	.word	0x08003a84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003a84 	.word	0x08003a84

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fa36 	bl	800091c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f80c 	bl	80004cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f8ac 	bl	8000610 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004b8:	f000 f87a 	bl	80005b0 <MX_USART1_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_UART_Transmit(&huart1, tx_msg , 20, 100);
//	  HAL_UART_Transmit(&huart1, tx_msg , 20, 100);
	  printf("Heloo From Main.c\r\n");
 80004bc:	4b02      	ldr	r3, [pc, #8]	; (80004c8 <main+0x20>)
 80004be:	0018      	movs	r0, r3
 80004c0:	f002 ff10 	bl	80032e4 <puts>
 80004c4:	e7fa      	b.n	80004bc <main+0x14>
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	08003a9c 	.word	0x08003a9c

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b09d      	sub	sp, #116	; 0x74
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	2438      	movs	r4, #56	; 0x38
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	0018      	movs	r0, r3
 80004d8:	2338      	movs	r3, #56	; 0x38
 80004da:	001a      	movs	r2, r3
 80004dc:	2100      	movs	r1, #0
 80004de:	f002 fffd 	bl	80034dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e2:	2324      	movs	r3, #36	; 0x24
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	0018      	movs	r0, r3
 80004e8:	2314      	movs	r3, #20
 80004ea:	001a      	movs	r2, r3
 80004ec:	2100      	movs	r1, #0
 80004ee:	f002 fff5 	bl	80034dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f2:	003b      	movs	r3, r7
 80004f4:	0018      	movs	r0, r3
 80004f6:	2324      	movs	r3, #36	; 0x24
 80004f8:	001a      	movs	r2, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	f002 ffee 	bl	80034dc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000500:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <SystemClock_Config+0xdc>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a29      	ldr	r2, [pc, #164]	; (80005ac <SystemClock_Config+0xe0>)
 8000506:	401a      	ands	r2, r3
 8000508:	4b27      	ldr	r3, [pc, #156]	; (80005a8 <SystemClock_Config+0xdc>)
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	0109      	lsls	r1, r1, #4
 800050e:	430a      	orrs	r2, r1
 8000510:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000512:	0021      	movs	r1, r4
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2202      	movs	r2, #2
 8000518:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2201      	movs	r2, #1
 800051e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2210      	movs	r2, #16
 8000524:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2202      	movs	r2, #2
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2200      	movs	r2, #0
 8000530:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2200      	movs	r2, #0
 8000536:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	0412      	lsls	r2, r2, #16
 800053e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000540:	187b      	adds	r3, r7, r1
 8000542:	0018      	movs	r0, r3
 8000544:	f000 fd54 	bl	8000ff0 <HAL_RCC_OscConfig>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800054c:	f000 f896 	bl	800067c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000550:	2124      	movs	r1, #36	; 0x24
 8000552:	187b      	adds	r3, r7, r1
 8000554:	220f      	movs	r2, #15
 8000556:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2203      	movs	r2, #3
 800055c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2100      	movs	r1, #0
 8000574:	0018      	movs	r0, r3
 8000576:	f001 f8ff 	bl	8001778 <HAL_RCC_ClockConfig>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800057e:	f000 f87d 	bl	800067c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000582:	003b      	movs	r3, r7
 8000584:	2201      	movs	r2, #1
 8000586:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000588:	003b      	movs	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800058e:	003b      	movs	r3, r7
 8000590:	0018      	movs	r0, r3
 8000592:	f001 fb15 	bl	8001bc0 <HAL_RCCEx_PeriphCLKConfig>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800059a:	f000 f86f 	bl	800067c <Error_Handler>
  }
}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b01d      	add	sp, #116	; 0x74
 80005a4:	bd90      	pop	{r4, r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	40007000 	.word	0x40007000
 80005ac:	ffffe7ff 	.word	0xffffe7ff

080005b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005b6:	4a15      	ldr	r2, [pc, #84]	; (800060c <MX_USART1_UART_Init+0x5c>)
 80005b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005bc:	22e1      	movs	r2, #225	; 0xe1
 80005be:	0252      	lsls	r2, r2, #9
 80005c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005d6:	220c      	movs	r2, #12
 80005d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <MX_USART1_UART_Init+0x58>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 fc71 	bl	8001edc <HAL_UART_Init>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005fe:	f000 f83d 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000084 	.word	0x20000084
 800060c:	40013800 	.word	0x40013800

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	0018      	movs	r0, r3
 800061a:	2314      	movs	r3, #20
 800061c:	001a      	movs	r2, r3
 800061e:	2100      	movs	r1, #0
 8000620:	f002 ff5c 	bl	80034dc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_GPIO_Init+0x68>)
 8000626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_GPIO_Init+0x68>)
 800062a:	2101      	movs	r1, #1
 800062c:	430a      	orrs	r2, r1
 800062e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_GPIO_Init+0x68>)
 8000632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000634:	2201      	movs	r2, #1
 8000636:	4013      	ands	r3, r2
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 800063c:	23a0      	movs	r3, #160	; 0xa0
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	2200      	movs	r2, #0
 8000642:	2120      	movs	r1, #32
 8000644:	0018      	movs	r0, r3
 8000646:	f000 fcb5 	bl	8000fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2220      	movs	r2, #32
 800064e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2201      	movs	r2, #1
 8000654:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 8000662:	1d3a      	adds	r2, r7, #4
 8000664:	23a0      	movs	r3, #160	; 0xa0
 8000666:	05db      	lsls	r3, r3, #23
 8000668:	0011      	movs	r1, r2
 800066a:	0018      	movs	r0, r3
 800066c:	f000 fb2c 	bl	8000cc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	b006      	add	sp, #24
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000680:	b672      	cpsid	i
}
 8000682:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000684:	e7fe      	b.n	8000684 <Error_Handler+0x8>
	...

08000688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <HAL_MspInit+0x24>)
 800068e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <HAL_MspInit+0x24>)
 8000692:	2101      	movs	r1, #1
 8000694:	430a      	orrs	r2, r1
 8000696:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <HAL_MspInit+0x24>)
 800069a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <HAL_MspInit+0x24>)
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	0549      	lsls	r1, r1, #21
 80006a2:	430a      	orrs	r2, r1
 80006a4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40021000 	.word	0x40021000

080006b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b089      	sub	sp, #36	; 0x24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	240c      	movs	r4, #12
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	0018      	movs	r0, r3
 80006be:	2314      	movs	r3, #20
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f002 ff0a 	bl	80034dc <memset>
  if(huart->Instance==USART1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <HAL_UART_MspInit+0x90>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d132      	bne.n	8000738 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006d2:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <HAL_UART_MspInit+0x94>)
 80006d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006d6:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <HAL_UART_MspInit+0x94>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	01c9      	lsls	r1, r1, #7
 80006dc:	430a      	orrs	r2, r1
 80006de:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <HAL_UART_MspInit+0x94>)
 80006e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <HAL_UART_MspInit+0x94>)
 80006e6:	2101      	movs	r1, #1
 80006e8:	430a      	orrs	r2, r1
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <HAL_UART_MspInit+0x94>)
 80006ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f0:	2201      	movs	r2, #1
 80006f2:	4013      	ands	r3, r2
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_USART1_TX_Pin|BSP_USART1_RX_Pin;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	22c0      	movs	r2, #192	; 0xc0
 80006fc:	00d2      	lsls	r2, r2, #3
 80006fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000700:	0021      	movs	r1, r4
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2202      	movs	r2, #2
 8000706:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2203      	movs	r2, #3
 8000712:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2204      	movs	r2, #4
 8000718:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	187a      	adds	r2, r7, r1
 800071c:	23a0      	movs	r3, #160	; 0xa0
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	0011      	movs	r1, r2
 8000722:	0018      	movs	r0, r3
 8000724:	f000 fad0 	bl	8000cc8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2100      	movs	r1, #0
 800072c:	201b      	movs	r0, #27
 800072e:	f000 fa11 	bl	8000b54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000732:	201b      	movs	r0, #27
 8000734:	f000 fa23 	bl	8000b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b009      	add	sp, #36	; 0x24
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	40013800 	.word	0x40013800
 8000744:	40021000 	.word	0x40021000

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800074c:	e7fe      	b.n	800074c <NMI_Handler+0x4>

0800074e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <HardFault_Handler+0x4>

08000754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076c:	f000 f92a 	bl	80009c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <USART1_IRQHandler+0x14>)
 800077e:	0018      	movs	r0, r3
 8000780:	f001 fca0 	bl	80020c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	20000084 	.word	0x20000084

08000790 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	e00a      	b.n	80007b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007a2:	e000      	b.n	80007a6 <_read+0x16>
 80007a4:	bf00      	nop
 80007a6:	0001      	movs	r1, r0
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	60ba      	str	r2, [r7, #8]
 80007ae:	b2ca      	uxtb	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3301      	adds	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dbf0      	blt.n	80007a2 <_read+0x12>
  }

  return len;
 80007c0:	687b      	ldr	r3, [r7, #4]
}
 80007c2:	0018      	movs	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b006      	add	sp, #24
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&huart1, ptr , len, 2000);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	b29a      	uxth	r2, r3
 80007dc:	23fa      	movs	r3, #250	; 0xfa
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	68b9      	ldr	r1, [r7, #8]
 80007e2:	4804      	ldr	r0, [pc, #16]	; (80007f4 <_write+0x28>)
 80007e4:	f001 fbce 	bl	8001f84 <HAL_UART_Transmit>
  return len;
 80007e8:	687b      	ldr	r3, [r7, #4]
}
 80007ea:	0018      	movs	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b004      	add	sp, #16
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	20000084 	.word	0x20000084

080007f8 <_close>:

int _close(int file)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000800:	2301      	movs	r3, #1
 8000802:	425b      	negs	r3, r3
}
 8000804:	0018      	movs	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	b002      	add	sp, #8
 800080a:	bd80      	pop	{r7, pc}

0800080c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	0192      	lsls	r2, r2, #6
 800081c:	605a      	str	r2, [r3, #4]
  return 0;
 800081e:	2300      	movs	r3, #0
}
 8000820:	0018      	movs	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	b002      	add	sp, #8
 8000826:	bd80      	pop	{r7, pc}

08000828 <_isatty>:

int _isatty(int file)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000830:	2301      	movs	r3, #1
}
 8000832:	0018      	movs	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	b002      	add	sp, #8
 8000838:	bd80      	pop	{r7, pc}

0800083a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b084      	sub	sp, #16
 800083e:	af00      	add	r7, sp, #0
 8000840:	60f8      	str	r0, [r7, #12]
 8000842:	60b9      	str	r1, [r7, #8]
 8000844:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000846:	2300      	movs	r3, #0
}
 8000848:	0018      	movs	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	b004      	add	sp, #16
 800084e:	bd80      	pop	{r7, pc}

08000850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000858:	4a14      	ldr	r2, [pc, #80]	; (80008ac <_sbrk+0x5c>)
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <_sbrk+0x60>)
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <_sbrk+0x64>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d102      	bne.n	8000872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <_sbrk+0x64>)
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <_sbrk+0x68>)
 8000870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <_sbrk+0x64>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	18d3      	adds	r3, r2, r3
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	429a      	cmp	r2, r3
 800087e:	d207      	bcs.n	8000890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000880:	f002 fe82 	bl	8003588 <__errno>
 8000884:	0003      	movs	r3, r0
 8000886:	220c      	movs	r2, #12
 8000888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800088a:	2301      	movs	r3, #1
 800088c:	425b      	negs	r3, r3
 800088e:	e009      	b.n	80008a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <_sbrk+0x64>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000896:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <_sbrk+0x64>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	18d2      	adds	r2, r2, r3
 800089e:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <_sbrk+0x64>)
 80008a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008a2:	68fb      	ldr	r3, [r7, #12]
}
 80008a4:	0018      	movs	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b006      	add	sp, #24
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20002000 	.word	0x20002000
 80008b0:	00000400 	.word	0x00000400
 80008b4:	2000010c 	.word	0x2000010c
 80008b8:	20000260 	.word	0x20000260

080008bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008cc:	f7ff fff6 	bl	80008bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <LoopForever+0x6>)
  ldr r1, =_edata
 80008d2:	490d      	ldr	r1, [pc, #52]	; (8000908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d4:	4a0d      	ldr	r2, [pc, #52]	; (800090c <LoopForever+0xe>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e8:	4c0a      	ldr	r4, [pc, #40]	; (8000914 <LoopForever+0x16>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008f6:	f002 fe4d 	bl	8003594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008fa:	f7ff fdd5 	bl	80004a8 <main>

080008fe <LoopForever>:

LoopForever:
    b LoopForever
 80008fe:	e7fe      	b.n	80008fe <LoopForever>
  ldr   r0, =_estack
 8000900:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800090c:	08003b2c 	.word	0x08003b2c
  ldr r2, =_sbss
 8000910:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000914:	20000260 	.word	0x20000260

08000918 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC1_COMP_IRQHandler>
	...

0800091c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000928:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <HAL_Init+0x3c>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <HAL_Init+0x3c>)
 800092e:	2140      	movs	r1, #64	; 0x40
 8000930:	430a      	orrs	r2, r1
 8000932:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000934:	2000      	movs	r0, #0
 8000936:	f000 f811 	bl	800095c <HAL_InitTick>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d003      	beq.n	8000946 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
 8000944:	e001      	b.n	800094a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000946:	f7ff fe9f 	bl	8000688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	781b      	ldrb	r3, [r3, #0]
}
 800094e:	0018      	movs	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	b002      	add	sp, #8
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	40022000 	.word	0x40022000

0800095c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <HAL_InitTick+0x5c>)
 8000966:	681c      	ldr	r4, [r3, #0]
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <HAL_InitTick+0x60>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	0019      	movs	r1, r3
 800096e:	23fa      	movs	r3, #250	; 0xfa
 8000970:	0098      	lsls	r0, r3, #2
 8000972:	f7ff fbc9 	bl	8000108 <__udivsi3>
 8000976:	0003      	movs	r3, r0
 8000978:	0019      	movs	r1, r3
 800097a:	0020      	movs	r0, r4
 800097c:	f7ff fbc4 	bl	8000108 <__udivsi3>
 8000980:	0003      	movs	r3, r0
 8000982:	0018      	movs	r0, r3
 8000984:	f000 f90b 	bl	8000b9e <HAL_SYSTICK_Config>
 8000988:	1e03      	subs	r3, r0, #0
 800098a:	d001      	beq.n	8000990 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	e00f      	b.n	80009b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b03      	cmp	r3, #3
 8000994:	d80b      	bhi.n	80009ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	2301      	movs	r3, #1
 800099a:	425b      	negs	r3, r3
 800099c:	2200      	movs	r2, #0
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 f8d8 	bl	8000b54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_InitTick+0x64>)
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
 80009ac:	e000      	b.n	80009b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	0018      	movs	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b003      	add	sp, #12
 80009b6:	bd90      	pop	{r4, r7, pc}
 80009b8:	20000000 	.word	0x20000000
 80009bc:	20000008 	.word	0x20000008
 80009c0:	20000004 	.word	0x20000004

080009c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_IncTick+0x1c>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	001a      	movs	r2, r3
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <HAL_IncTick+0x20>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	18d2      	adds	r2, r2, r3
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <HAL_IncTick+0x20>)
 80009d6:	601a      	str	r2, [r3, #0]
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20000110 	.word	0x20000110

080009e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  return uwTick;
 80009ec:	4b02      	ldr	r3, [pc, #8]	; (80009f8 <HAL_GetTick+0x10>)
 80009ee:	681b      	ldr	r3, [r3, #0]
}
 80009f0:	0018      	movs	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	20000110 	.word	0x20000110

080009fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	0002      	movs	r2, r0
 8000a04:	1dfb      	adds	r3, r7, #7
 8000a06:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8000a0e:	d809      	bhi.n	8000a24 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	001a      	movs	r2, r3
 8000a16:	231f      	movs	r3, #31
 8000a18:	401a      	ands	r2, r3
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <__NVIC_EnableIRQ+0x30>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4091      	lsls	r1, r2
 8000a20:	000a      	movs	r2, r1
 8000a22:	601a      	str	r2, [r3, #0]
  }
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b002      	add	sp, #8
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	e000e100 	.word	0xe000e100

08000a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	0002      	movs	r2, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b7f      	cmp	r3, #127	; 0x7f
 8000a44:	d828      	bhi.n	8000a98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a46:	4a2f      	ldr	r2, [pc, #188]	; (8000b04 <__NVIC_SetPriority+0xd4>)
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b25b      	sxtb	r3, r3
 8000a4e:	089b      	lsrs	r3, r3, #2
 8000a50:	33c0      	adds	r3, #192	; 0xc0
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	589b      	ldr	r3, [r3, r2]
 8000a56:	1dfa      	adds	r2, r7, #7
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	400a      	ands	r2, r1
 8000a60:	00d2      	lsls	r2, r2, #3
 8000a62:	21ff      	movs	r1, #255	; 0xff
 8000a64:	4091      	lsls	r1, r2
 8000a66:	000a      	movs	r2, r1
 8000a68:	43d2      	mvns	r2, r2
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	019b      	lsls	r3, r3, #6
 8000a72:	22ff      	movs	r2, #255	; 0xff
 8000a74:	401a      	ands	r2, r3
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	4003      	ands	r3, r0
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a84:	481f      	ldr	r0, [pc, #124]	; (8000b04 <__NVIC_SetPriority+0xd4>)
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b25b      	sxtb	r3, r3
 8000a8c:	089b      	lsrs	r3, r3, #2
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	33c0      	adds	r3, #192	; 0xc0
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a96:	e031      	b.n	8000afc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a98:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <__NVIC_SetPriority+0xd8>)
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	0019      	movs	r1, r3
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	400b      	ands	r3, r1
 8000aa4:	3b08      	subs	r3, #8
 8000aa6:	089b      	lsrs	r3, r3, #2
 8000aa8:	3306      	adds	r3, #6
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	18d3      	adds	r3, r2, r3
 8000aae:	3304      	adds	r3, #4
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	1dfa      	adds	r2, r7, #7
 8000ab4:	7812      	ldrb	r2, [r2, #0]
 8000ab6:	0011      	movs	r1, r2
 8000ab8:	2203      	movs	r2, #3
 8000aba:	400a      	ands	r2, r1
 8000abc:	00d2      	lsls	r2, r2, #3
 8000abe:	21ff      	movs	r1, #255	; 0xff
 8000ac0:	4091      	lsls	r1, r2
 8000ac2:	000a      	movs	r2, r1
 8000ac4:	43d2      	mvns	r2, r2
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	019b      	lsls	r3, r3, #6
 8000ace:	22ff      	movs	r2, #255	; 0xff
 8000ad0:	401a      	ands	r2, r3
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	2303      	movs	r3, #3
 8000ada:	4003      	ands	r3, r0
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae0:	4809      	ldr	r0, [pc, #36]	; (8000b08 <__NVIC_SetPriority+0xd8>)
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	001c      	movs	r4, r3
 8000ae8:	230f      	movs	r3, #15
 8000aea:	4023      	ands	r3, r4
 8000aec:	3b08      	subs	r3, #8
 8000aee:	089b      	lsrs	r3, r3, #2
 8000af0:	430a      	orrs	r2, r1
 8000af2:	3306      	adds	r3, #6
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	18c3      	adds	r3, r0, r3
 8000af8:	3304      	adds	r3, #4
 8000afa:	601a      	str	r2, [r3, #0]
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b003      	add	sp, #12
 8000b02:	bd90      	pop	{r4, r7, pc}
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	1e5a      	subs	r2, r3, #1
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	045b      	lsls	r3, r3, #17
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d301      	bcc.n	8000b24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b20:	2301      	movs	r3, #1
 8000b22:	e010      	b.n	8000b46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <SysTick_Config+0x44>)
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	3a01      	subs	r2, #1
 8000b2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	425b      	negs	r3, r3
 8000b30:	2103      	movs	r1, #3
 8000b32:	0018      	movs	r0, r3
 8000b34:	f7ff ff7c 	bl	8000a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <SysTick_Config+0x44>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <SysTick_Config+0x44>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	0018      	movs	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	e000e010 	.word	0xe000e010

08000b54 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	210f      	movs	r1, #15
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	1c02      	adds	r2, r0, #0
 8000b64:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b25b      	sxtb	r3, r3
 8000b6e:	0011      	movs	r1, r2
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff ff5d 	bl	8000a30 <__NVIC_SetPriority>
}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b004      	add	sp, #16
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	0002      	movs	r2, r0
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff ff33 	bl	80009fc <__NVIC_EnableIRQ>
}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b002      	add	sp, #8
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff ffaf 	bl	8000b0c <SysTick_Config>
 8000bae:	0003      	movs	r3, r0
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2225      	movs	r2, #37	; 0x25
 8000bcc:	5c9b      	ldrb	r3, [r3, r2]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d008      	beq.n	8000be6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2224      	movs	r2, #36	; 0x24
 8000bde:	2100      	movs	r1, #0
 8000be0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e024      	b.n	8000c30 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	210e      	movs	r1, #14
 8000bf2:	438a      	bics	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2101      	movs	r1, #1
 8000c02:	438a      	bics	r2, r1
 8000c04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	221c      	movs	r2, #28
 8000c0c:	401a      	ands	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	2101      	movs	r1, #1
 8000c14:	4091      	lsls	r1, r2
 8000c16:	000a      	movs	r2, r1
 8000c18:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2225      	movs	r2, #37	; 0x25
 8000c1e:	2101      	movs	r1, #1
 8000c20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2224      	movs	r2, #36	; 0x24
 8000c26:	2100      	movs	r1, #0
 8000c28:	5499      	strb	r1, [r3, r2]

    return status;
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	18fb      	adds	r3, r7, r3
 8000c2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b004      	add	sp, #16
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c40:	210f      	movs	r1, #15
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2225      	movs	r2, #37	; 0x25
 8000c4c:	5c9b      	ldrb	r3, [r3, r2]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d006      	beq.n	8000c62 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2204      	movs	r2, #4
 8000c58:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	701a      	strb	r2, [r3, #0]
 8000c60:	e02a      	b.n	8000cb8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	210e      	movs	r1, #14
 8000c6e:	438a      	bics	r2, r1
 8000c70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	438a      	bics	r2, r1
 8000c80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	221c      	movs	r2, #28
 8000c88:	401a      	ands	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4091      	lsls	r1, r2
 8000c92:	000a      	movs	r2, r1
 8000c94:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2225      	movs	r2, #37	; 0x25
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2224      	movs	r2, #36	; 0x24
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d004      	beq.n	8000cb8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	0010      	movs	r0, r2
 8000cb6:	4798      	blx	r3
    }
  }
  return status;
 8000cb8:	230f      	movs	r3, #15
 8000cba:	18fb      	adds	r3, r7, r3
 8000cbc:	781b      	ldrb	r3, [r3, #0]
}
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b004      	add	sp, #16
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cde:	e14f      	b.n	8000f80 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	4091      	lsls	r1, r2
 8000cea:	000a      	movs	r2, r1
 8000cec:	4013      	ands	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d100      	bne.n	8000cf8 <HAL_GPIO_Init+0x30>
 8000cf6:	e140      	b.n	8000f7a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	4013      	ands	r3, r2
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d005      	beq.n	8000d10 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2203      	movs	r2, #3
 8000d0a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d130      	bne.n	8000d72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	0013      	movs	r3, r2
 8000d20:	43da      	mvns	r2, r3
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	409a      	lsls	r2, r3
 8000d32:	0013      	movs	r3, r2
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d46:	2201      	movs	r2, #1
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	091b      	lsrs	r3, r3, #4
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
 8000d64:	0013      	movs	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2203      	movs	r2, #3
 8000d78:	4013      	ands	r3, r2
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d017      	beq.n	8000dae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2203      	movs	r2, #3
 8000db4:	4013      	ands	r3, r2
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d123      	bne.n	8000e02 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	08da      	lsrs	r2, r3, #3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3208      	adds	r2, #8
 8000dc2:	0092      	lsls	r2, r2, #2
 8000dc4:	58d3      	ldr	r3, [r2, r3]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	2207      	movs	r2, #7
 8000dcc:	4013      	ands	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	0013      	movs	r3, r2
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	691a      	ldr	r2, [r3, #16]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	2107      	movs	r1, #7
 8000de6:	400b      	ands	r3, r1
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	409a      	lsls	r2, r3
 8000dec:	0013      	movs	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	08da      	lsrs	r2, r3, #3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3208      	adds	r2, #8
 8000dfc:	0092      	lsls	r2, r2, #2
 8000dfe:	6939      	ldr	r1, [r7, #16]
 8000e00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	43da      	mvns	r2, r3
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2203      	movs	r2, #3
 8000e20:	401a      	ands	r2, r3
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	409a      	lsls	r2, r3
 8000e28:	0013      	movs	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	23c0      	movs	r3, #192	; 0xc0
 8000e3c:	029b      	lsls	r3, r3, #10
 8000e3e:	4013      	ands	r3, r2
 8000e40:	d100      	bne.n	8000e44 <HAL_GPIO_Init+0x17c>
 8000e42:	e09a      	b.n	8000f7a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e44:	4b54      	ldr	r3, [pc, #336]	; (8000f98 <HAL_GPIO_Init+0x2d0>)
 8000e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e48:	4b53      	ldr	r3, [pc, #332]	; (8000f98 <HAL_GPIO_Init+0x2d0>)
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e50:	4a52      	ldr	r2, [pc, #328]	; (8000f9c <HAL_GPIO_Init+0x2d4>)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	089b      	lsrs	r3, r3, #2
 8000e56:	3302      	adds	r3, #2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	589b      	ldr	r3, [r3, r2]
 8000e5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	2203      	movs	r2, #3
 8000e62:	4013      	ands	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	220f      	movs	r2, #15
 8000e68:	409a      	lsls	r2, r3
 8000e6a:	0013      	movs	r3, r2
 8000e6c:	43da      	mvns	r2, r3
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	23a0      	movs	r3, #160	; 0xa0
 8000e78:	05db      	lsls	r3, r3, #23
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d019      	beq.n	8000eb2 <HAL_GPIO_Init+0x1ea>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a47      	ldr	r2, [pc, #284]	; (8000fa0 <HAL_GPIO_Init+0x2d8>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0x1e6>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a46      	ldr	r2, [pc, #280]	; (8000fa4 <HAL_GPIO_Init+0x2dc>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00d      	beq.n	8000eaa <HAL_GPIO_Init+0x1e2>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a45      	ldr	r2, [pc, #276]	; (8000fa8 <HAL_GPIO_Init+0x2e0>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x1de>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a44      	ldr	r2, [pc, #272]	; (8000fac <HAL_GPIO_Init+0x2e4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_GPIO_Init+0x1da>
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	e008      	b.n	8000eb4 <HAL_GPIO_Init+0x1ec>
 8000ea2:	2306      	movs	r3, #6
 8000ea4:	e006      	b.n	8000eb4 <HAL_GPIO_Init+0x1ec>
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e004      	b.n	8000eb4 <HAL_GPIO_Init+0x1ec>
 8000eaa:	2302      	movs	r3, #2
 8000eac:	e002      	b.n	8000eb4 <HAL_GPIO_Init+0x1ec>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <HAL_GPIO_Init+0x1ec>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	400a      	ands	r2, r1
 8000eba:	0092      	lsls	r2, r2, #2
 8000ebc:	4093      	lsls	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ec4:	4935      	ldr	r1, [pc, #212]	; (8000f9c <HAL_GPIO_Init+0x2d4>)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	3302      	adds	r3, #2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ed2:	4b37      	ldr	r3, [pc, #220]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	43da      	mvns	r2, r3
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	035b      	lsls	r3, r3, #13
 8000eea:	4013      	ands	r3, r2
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ef6:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000efc:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	43da      	mvns	r2, r3
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	039b      	lsls	r3, r3, #14
 8000f14:	4013      	ands	r3, r2
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000f26:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	029b      	lsls	r3, r3, #10
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	025b      	lsls	r3, r3, #9
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	40da      	lsrs	r2, r3
 8000f88:	1e13      	subs	r3, r2, #0
 8000f8a:	d000      	beq.n	8000f8e <HAL_GPIO_Init+0x2c6>
 8000f8c:	e6a8      	b.n	8000ce0 <HAL_GPIO_Init+0x18>
  }
}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b006      	add	sp, #24
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010000 	.word	0x40010000
 8000fa0:	50000400 	.word	0x50000400
 8000fa4:	50000800 	.word	0x50000800
 8000fa8:	50000c00 	.word	0x50000c00
 8000fac:	50001c00 	.word	0x50001c00
 8000fb0:	40010400 	.word	0x40010400

08000fb4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	0008      	movs	r0, r1
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	1cbb      	adds	r3, r7, #2
 8000fc2:	1c02      	adds	r2, r0, #0
 8000fc4:	801a      	strh	r2, [r3, #0]
 8000fc6:	1c7b      	adds	r3, r7, #1
 8000fc8:	1c0a      	adds	r2, r1, #0
 8000fca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fcc:	1c7b      	adds	r3, r7, #1
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d004      	beq.n	8000fde <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fd4:	1cbb      	adds	r3, r7, #2
 8000fd6:	881a      	ldrh	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000fdc:	e003      	b.n	8000fe6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000fde:	1cbb      	adds	r3, r7, #2
 8000fe0:	881a      	ldrh	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b002      	add	sp, #8
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d102      	bne.n	8001004 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	f000 fbaf 	bl	8001762 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001004:	4bcf      	ldr	r3, [pc, #828]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	220c      	movs	r2, #12
 800100a:	4013      	ands	r3, r2
 800100c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800100e:	4bcd      	ldr	r3, [pc, #820]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	025b      	lsls	r3, r3, #9
 8001016:	4013      	ands	r3, r2
 8001018:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2201      	movs	r2, #1
 8001020:	4013      	ands	r3, r2
 8001022:	d100      	bne.n	8001026 <HAL_RCC_OscConfig+0x36>
 8001024:	e07e      	b.n	8001124 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	2b08      	cmp	r3, #8
 800102a:	d007      	beq.n	800103c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	2b0c      	cmp	r3, #12
 8001030:	d112      	bne.n	8001058 <HAL_RCC_OscConfig+0x68>
 8001032:	69fa      	ldr	r2, [r7, #28]
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	025b      	lsls	r3, r3, #9
 8001038:	429a      	cmp	r2, r3
 800103a:	d10d      	bne.n	8001058 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103c:	4bc1      	ldr	r3, [pc, #772]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	029b      	lsls	r3, r3, #10
 8001044:	4013      	ands	r3, r2
 8001046:	d100      	bne.n	800104a <HAL_RCC_OscConfig+0x5a>
 8001048:	e06b      	b.n	8001122 <HAL_RCC_OscConfig+0x132>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d167      	bne.n	8001122 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	f000 fb85 	bl	8001762 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	025b      	lsls	r3, r3, #9
 8001060:	429a      	cmp	r2, r3
 8001062:	d107      	bne.n	8001074 <HAL_RCC_OscConfig+0x84>
 8001064:	4bb7      	ldr	r3, [pc, #732]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4bb6      	ldr	r3, [pc, #728]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	0249      	lsls	r1, r1, #9
 800106e:	430a      	orrs	r2, r1
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	e027      	b.n	80010c4 <HAL_RCC_OscConfig+0xd4>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	23a0      	movs	r3, #160	; 0xa0
 800107a:	02db      	lsls	r3, r3, #11
 800107c:	429a      	cmp	r2, r3
 800107e:	d10e      	bne.n	800109e <HAL_RCC_OscConfig+0xae>
 8001080:	4bb0      	ldr	r3, [pc, #704]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4baf      	ldr	r3, [pc, #700]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	02c9      	lsls	r1, r1, #11
 800108a:	430a      	orrs	r2, r1
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	4bad      	ldr	r3, [pc, #692]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4bac      	ldr	r3, [pc, #688]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	0249      	lsls	r1, r1, #9
 8001098:	430a      	orrs	r2, r1
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	e012      	b.n	80010c4 <HAL_RCC_OscConfig+0xd4>
 800109e:	4ba9      	ldr	r3, [pc, #676]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4ba8      	ldr	r3, [pc, #672]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80010a4:	49a8      	ldr	r1, [pc, #672]	; (8001348 <HAL_RCC_OscConfig+0x358>)
 80010a6:	400a      	ands	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	4ba6      	ldr	r3, [pc, #664]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	025b      	lsls	r3, r3, #9
 80010b2:	4013      	ands	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4ba2      	ldr	r3, [pc, #648]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4ba1      	ldr	r3, [pc, #644]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80010be:	49a3      	ldr	r1, [pc, #652]	; (800134c <HAL_RCC_OscConfig+0x35c>)
 80010c0:	400a      	ands	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d015      	beq.n	80010f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010cc:	f7ff fc8c 	bl	80009e8 <HAL_GetTick>
 80010d0:	0003      	movs	r3, r0
 80010d2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010d4:	e009      	b.n	80010ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d6:	f7ff fc87 	bl	80009e8 <HAL_GetTick>
 80010da:	0002      	movs	r2, r0
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b64      	cmp	r3, #100	; 0x64
 80010e2:	d902      	bls.n	80010ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	f000 fb3c 	bl	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010ea:	4b96      	ldr	r3, [pc, #600]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	029b      	lsls	r3, r3, #10
 80010f2:	4013      	ands	r3, r2
 80010f4:	d0ef      	beq.n	80010d6 <HAL_RCC_OscConfig+0xe6>
 80010f6:	e015      	b.n	8001124 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fc76 	bl	80009e8 <HAL_GetTick>
 80010fc:	0003      	movs	r3, r0
 80010fe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001102:	f7ff fc71 	bl	80009e8 <HAL_GetTick>
 8001106:	0002      	movs	r2, r0
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b64      	cmp	r3, #100	; 0x64
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e326      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001114:	4b8b      	ldr	r3, [pc, #556]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	029b      	lsls	r3, r3, #10
 800111c:	4013      	ands	r3, r2
 800111e:	d1f0      	bne.n	8001102 <HAL_RCC_OscConfig+0x112>
 8001120:	e000      	b.n	8001124 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001122:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2202      	movs	r2, #2
 800112a:	4013      	ands	r3, r2
 800112c:	d100      	bne.n	8001130 <HAL_RCC_OscConfig+0x140>
 800112e:	e08b      	b.n	8001248 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	2b04      	cmp	r3, #4
 800113a:	d005      	beq.n	8001148 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	2b0c      	cmp	r3, #12
 8001140:	d13e      	bne.n	80011c0 <HAL_RCC_OscConfig+0x1d0>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d13b      	bne.n	80011c0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001148:	4b7e      	ldr	r3, [pc, #504]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2204      	movs	r2, #4
 800114e:	4013      	ands	r3, r2
 8001150:	d004      	beq.n	800115c <HAL_RCC_OscConfig+0x16c>
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e302      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115c:	4b79      	ldr	r3, [pc, #484]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	4a7b      	ldr	r2, [pc, #492]	; (8001350 <HAL_RCC_OscConfig+0x360>)
 8001162:	4013      	ands	r3, r2
 8001164:	0019      	movs	r1, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	021a      	lsls	r2, r3, #8
 800116c:	4b75      	ldr	r3, [pc, #468]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800116e:	430a      	orrs	r2, r1
 8001170:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001172:	4b74      	ldr	r3, [pc, #464]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2209      	movs	r2, #9
 8001178:	4393      	bics	r3, r2
 800117a:	0019      	movs	r1, r3
 800117c:	4b71      	ldr	r3, [pc, #452]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	430a      	orrs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001184:	f000 fc40 	bl	8001a08 <HAL_RCC_GetSysClockFreq>
 8001188:	0001      	movs	r1, r0
 800118a:	4b6e      	ldr	r3, [pc, #440]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	091b      	lsrs	r3, r3, #4
 8001190:	220f      	movs	r2, #15
 8001192:	4013      	ands	r3, r2
 8001194:	4a6f      	ldr	r2, [pc, #444]	; (8001354 <HAL_RCC_OscConfig+0x364>)
 8001196:	5cd3      	ldrb	r3, [r2, r3]
 8001198:	000a      	movs	r2, r1
 800119a:	40da      	lsrs	r2, r3
 800119c:	4b6e      	ldr	r3, [pc, #440]	; (8001358 <HAL_RCC_OscConfig+0x368>)
 800119e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80011a0:	4b6e      	ldr	r3, [pc, #440]	; (800135c <HAL_RCC_OscConfig+0x36c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2513      	movs	r5, #19
 80011a6:	197c      	adds	r4, r7, r5
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff fbd7 	bl	800095c <HAL_InitTick>
 80011ae:	0003      	movs	r3, r0
 80011b0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80011b2:	197b      	adds	r3, r7, r5
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d046      	beq.n	8001248 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80011ba:	197b      	adds	r3, r7, r5
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	e2d0      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d027      	beq.n	8001216 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011c6:	4b5f      	ldr	r3, [pc, #380]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2209      	movs	r2, #9
 80011cc:	4393      	bics	r3, r2
 80011ce:	0019      	movs	r1, r3
 80011d0:	4b5c      	ldr	r3, [pc, #368]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	430a      	orrs	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fc06 	bl	80009e8 <HAL_GetTick>
 80011dc:	0003      	movs	r3, r0
 80011de:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e2:	f7ff fc01 	bl	80009e8 <HAL_GetTick>
 80011e6:	0002      	movs	r2, r0
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e2b6      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011f4:	4b53      	ldr	r3, [pc, #332]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2204      	movs	r2, #4
 80011fa:	4013      	ands	r3, r2
 80011fc:	d0f1      	beq.n	80011e2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fe:	4b51      	ldr	r3, [pc, #324]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4a53      	ldr	r2, [pc, #332]	; (8001350 <HAL_RCC_OscConfig+0x360>)
 8001204:	4013      	ands	r3, r2
 8001206:	0019      	movs	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	021a      	lsls	r2, r3, #8
 800120e:	4b4d      	ldr	r3, [pc, #308]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001210:	430a      	orrs	r2, r1
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	e018      	b.n	8001248 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001216:	4b4b      	ldr	r3, [pc, #300]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4b4a      	ldr	r3, [pc, #296]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800121c:	2101      	movs	r1, #1
 800121e:	438a      	bics	r2, r1
 8001220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001222:	f7ff fbe1 	bl	80009e8 <HAL_GetTick>
 8001226:	0003      	movs	r3, r0
 8001228:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800122c:	f7ff fbdc 	bl	80009e8 <HAL_GetTick>
 8001230:	0002      	movs	r2, r0
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e291      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800123e:	4b41      	ldr	r3, [pc, #260]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2204      	movs	r2, #4
 8001244:	4013      	ands	r3, r2
 8001246:	d1f1      	bne.n	800122c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2210      	movs	r2, #16
 800124e:	4013      	ands	r3, r2
 8001250:	d100      	bne.n	8001254 <HAL_RCC_OscConfig+0x264>
 8001252:	e0a1      	b.n	8001398 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d140      	bne.n	80012dc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800125a:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4013      	ands	r3, r2
 8001264:	d005      	beq.n	8001272 <HAL_RCC_OscConfig+0x282>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e277      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001272:	4b34      	ldr	r3, [pc, #208]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4a3a      	ldr	r2, [pc, #232]	; (8001360 <HAL_RCC_OscConfig+0x370>)
 8001278:	4013      	ands	r3, r2
 800127a:	0019      	movs	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001280:	4b30      	ldr	r3, [pc, #192]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001282:	430a      	orrs	r2, r1
 8001284:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001286:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	0a19      	lsrs	r1, r3, #8
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	061a      	lsls	r2, r3, #24
 8001294:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001296:	430a      	orrs	r2, r1
 8001298:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	0b5b      	lsrs	r3, r3, #13
 80012a0:	3301      	adds	r3, #1
 80012a2:	2280      	movs	r2, #128	; 0x80
 80012a4:	0212      	lsls	r2, r2, #8
 80012a6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80012a8:	4b26      	ldr	r3, [pc, #152]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	210f      	movs	r1, #15
 80012b0:	400b      	ands	r3, r1
 80012b2:	4928      	ldr	r1, [pc, #160]	; (8001354 <HAL_RCC_OscConfig+0x364>)
 80012b4:	5ccb      	ldrb	r3, [r1, r3]
 80012b6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012b8:	4b27      	ldr	r3, [pc, #156]	; (8001358 <HAL_RCC_OscConfig+0x368>)
 80012ba:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <HAL_RCC_OscConfig+0x36c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2513      	movs	r5, #19
 80012c2:	197c      	adds	r4, r7, r5
 80012c4:	0018      	movs	r0, r3
 80012c6:	f7ff fb49 	bl	800095c <HAL_InitTick>
 80012ca:	0003      	movs	r3, r0
 80012cc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80012ce:	197b      	adds	r3, r7, r5
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d060      	beq.n	8001398 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80012d6:	197b      	adds	r3, r7, r5
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	e242      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69db      	ldr	r3, [r3, #28]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d03f      	beq.n	8001364 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80012ea:	2180      	movs	r1, #128	; 0x80
 80012ec:	0049      	lsls	r1, r1, #1
 80012ee:	430a      	orrs	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7ff fb79 	bl	80009e8 <HAL_GetTick>
 80012f6:	0003      	movs	r3, r0
 80012f8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012fc:	f7ff fb74 	bl	80009e8 <HAL_GetTick>
 8001300:	0002      	movs	r2, r0
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e229      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4013      	ands	r3, r2
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <HAL_RCC_OscConfig+0x370>)
 8001320:	4013      	ands	r3, r2
 8001322:	0019      	movs	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800132a:	430a      	orrs	r2, r1
 800132c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	0a19      	lsrs	r1, r3, #8
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	061a      	lsls	r2, r3, #24
 800133c:	4b01      	ldr	r3, [pc, #4]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800133e:	430a      	orrs	r2, r1
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	e029      	b.n	8001398 <HAL_RCC_OscConfig+0x3a8>
 8001344:	40021000 	.word	0x40021000
 8001348:	fffeffff 	.word	0xfffeffff
 800134c:	fffbffff 	.word	0xfffbffff
 8001350:	ffffe0ff 	.word	0xffffe0ff
 8001354:	08003ab0 	.word	0x08003ab0
 8001358:	20000000 	.word	0x20000000
 800135c:	20000004 	.word	0x20000004
 8001360:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001364:	4bbd      	ldr	r3, [pc, #756]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4bbc      	ldr	r3, [pc, #752]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 800136a:	49bd      	ldr	r1, [pc, #756]	; (8001660 <HAL_RCC_OscConfig+0x670>)
 800136c:	400a      	ands	r2, r1
 800136e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fb3a 	bl	80009e8 <HAL_GetTick>
 8001374:	0003      	movs	r3, r0
 8001376:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800137a:	f7ff fb35 	bl	80009e8 <HAL_GetTick>
 800137e:	0002      	movs	r2, r0
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e1ea      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800138c:	4bb3      	ldr	r3, [pc, #716]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4013      	ands	r3, r2
 8001396:	d1f0      	bne.n	800137a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2208      	movs	r2, #8
 800139e:	4013      	ands	r3, r2
 80013a0:	d036      	beq.n	8001410 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d019      	beq.n	80013de <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013aa:	4bac      	ldr	r3, [pc, #688]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80013ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013ae:	4bab      	ldr	r3, [pc, #684]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80013b0:	2101      	movs	r1, #1
 80013b2:	430a      	orrs	r2, r1
 80013b4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fb17 	bl	80009e8 <HAL_GetTick>
 80013ba:	0003      	movs	r3, r0
 80013bc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c0:	f7ff fb12 	bl	80009e8 <HAL_GetTick>
 80013c4:	0002      	movs	r2, r0
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e1c7      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013d2:	4ba2      	ldr	r3, [pc, #648]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80013d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013d6:	2202      	movs	r2, #2
 80013d8:	4013      	ands	r3, r2
 80013da:	d0f1      	beq.n	80013c0 <HAL_RCC_OscConfig+0x3d0>
 80013dc:	e018      	b.n	8001410 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013de:	4b9f      	ldr	r3, [pc, #636]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80013e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013e2:	4b9e      	ldr	r3, [pc, #632]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80013e4:	2101      	movs	r1, #1
 80013e6:	438a      	bics	r2, r1
 80013e8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ea:	f7ff fafd 	bl	80009e8 <HAL_GetTick>
 80013ee:	0003      	movs	r3, r0
 80013f0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f4:	f7ff faf8 	bl	80009e8 <HAL_GetTick>
 80013f8:	0002      	movs	r2, r0
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e1ad      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001406:	4b95      	ldr	r3, [pc, #596]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800140a:	2202      	movs	r2, #2
 800140c:	4013      	ands	r3, r2
 800140e:	d1f1      	bne.n	80013f4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2204      	movs	r2, #4
 8001416:	4013      	ands	r3, r2
 8001418:	d100      	bne.n	800141c <HAL_RCC_OscConfig+0x42c>
 800141a:	e0ae      	b.n	800157a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141c:	2027      	movs	r0, #39	; 0x27
 800141e:	183b      	adds	r3, r7, r0
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001424:	4b8d      	ldr	r3, [pc, #564]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	055b      	lsls	r3, r3, #21
 800142c:	4013      	ands	r3, r2
 800142e:	d109      	bne.n	8001444 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001430:	4b8a      	ldr	r3, [pc, #552]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001434:	4b89      	ldr	r3, [pc, #548]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001436:	2180      	movs	r1, #128	; 0x80
 8001438:	0549      	lsls	r1, r1, #21
 800143a:	430a      	orrs	r2, r1
 800143c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800143e:	183b      	adds	r3, r7, r0
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001444:	4b87      	ldr	r3, [pc, #540]	; (8001664 <HAL_RCC_OscConfig+0x674>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4013      	ands	r3, r2
 800144e:	d11a      	bne.n	8001486 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001450:	4b84      	ldr	r3, [pc, #528]	; (8001664 <HAL_RCC_OscConfig+0x674>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b83      	ldr	r3, [pc, #524]	; (8001664 <HAL_RCC_OscConfig+0x674>)
 8001456:	2180      	movs	r1, #128	; 0x80
 8001458:	0049      	lsls	r1, r1, #1
 800145a:	430a      	orrs	r2, r1
 800145c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145e:	f7ff fac3 	bl	80009e8 <HAL_GetTick>
 8001462:	0003      	movs	r3, r0
 8001464:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001468:	f7ff fabe 	bl	80009e8 <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e173      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147a:	4b7a      	ldr	r3, [pc, #488]	; (8001664 <HAL_RCC_OscConfig+0x674>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4013      	ands	r3, r2
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	429a      	cmp	r2, r3
 8001490:	d107      	bne.n	80014a2 <HAL_RCC_OscConfig+0x4b2>
 8001492:	4b72      	ldr	r3, [pc, #456]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001496:	4b71      	ldr	r3, [pc, #452]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001498:	2180      	movs	r1, #128	; 0x80
 800149a:	0049      	lsls	r1, r1, #1
 800149c:	430a      	orrs	r2, r1
 800149e:	651a      	str	r2, [r3, #80]	; 0x50
 80014a0:	e031      	b.n	8001506 <HAL_RCC_OscConfig+0x516>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x4d4>
 80014aa:	4b6c      	ldr	r3, [pc, #432]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014ae:	4b6b      	ldr	r3, [pc, #428]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014b0:	496b      	ldr	r1, [pc, #428]	; (8001660 <HAL_RCC_OscConfig+0x670>)
 80014b2:	400a      	ands	r2, r1
 80014b4:	651a      	str	r2, [r3, #80]	; 0x50
 80014b6:	4b69      	ldr	r3, [pc, #420]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014ba:	4b68      	ldr	r3, [pc, #416]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014bc:	496a      	ldr	r1, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x678>)
 80014be:	400a      	ands	r2, r1
 80014c0:	651a      	str	r2, [r3, #80]	; 0x50
 80014c2:	e020      	b.n	8001506 <HAL_RCC_OscConfig+0x516>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	23a0      	movs	r3, #160	; 0xa0
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d10e      	bne.n	80014ee <HAL_RCC_OscConfig+0x4fe>
 80014d0:	4b62      	ldr	r3, [pc, #392]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014d4:	4b61      	ldr	r3, [pc, #388]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014d6:	2180      	movs	r1, #128	; 0x80
 80014d8:	00c9      	lsls	r1, r1, #3
 80014da:	430a      	orrs	r2, r1
 80014dc:	651a      	str	r2, [r3, #80]	; 0x50
 80014de:	4b5f      	ldr	r3, [pc, #380]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014e2:	4b5e      	ldr	r3, [pc, #376]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014e4:	2180      	movs	r1, #128	; 0x80
 80014e6:	0049      	lsls	r1, r1, #1
 80014e8:	430a      	orrs	r2, r1
 80014ea:	651a      	str	r2, [r3, #80]	; 0x50
 80014ec:	e00b      	b.n	8001506 <HAL_RCC_OscConfig+0x516>
 80014ee:	4b5b      	ldr	r3, [pc, #364]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014f2:	4b5a      	ldr	r3, [pc, #360]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014f4:	495a      	ldr	r1, [pc, #360]	; (8001660 <HAL_RCC_OscConfig+0x670>)
 80014f6:	400a      	ands	r2, r1
 80014f8:	651a      	str	r2, [r3, #80]	; 0x50
 80014fa:	4b58      	ldr	r3, [pc, #352]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014fe:	4b57      	ldr	r3, [pc, #348]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001500:	4959      	ldr	r1, [pc, #356]	; (8001668 <HAL_RCC_OscConfig+0x678>)
 8001502:	400a      	ands	r2, r1
 8001504:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d015      	beq.n	800153a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150e:	f7ff fa6b 	bl	80009e8 <HAL_GetTick>
 8001512:	0003      	movs	r3, r0
 8001514:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001516:	e009      	b.n	800152c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001518:	f7ff fa66 	bl	80009e8 <HAL_GetTick>
 800151c:	0002      	movs	r2, r0
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	4a52      	ldr	r2, [pc, #328]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e11a      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800152c:	4b4b      	ldr	r3, [pc, #300]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 800152e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4013      	ands	r3, r2
 8001536:	d0ef      	beq.n	8001518 <HAL_RCC_OscConfig+0x528>
 8001538:	e014      	b.n	8001564 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153a:	f7ff fa55 	bl	80009e8 <HAL_GetTick>
 800153e:	0003      	movs	r3, r0
 8001540:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001542:	e009      	b.n	8001558 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001544:	f7ff fa50 	bl	80009e8 <HAL_GetTick>
 8001548:	0002      	movs	r2, r0
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	4a47      	ldr	r2, [pc, #284]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e104      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001558:	4b40      	ldr	r3, [pc, #256]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 800155a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4013      	ands	r3, r2
 8001562:	d1ef      	bne.n	8001544 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001564:	2327      	movs	r3, #39	; 0x27
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d105      	bne.n	800157a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800156e:	4b3b      	ldr	r3, [pc, #236]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001572:	4b3a      	ldr	r3, [pc, #232]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001574:	493e      	ldr	r1, [pc, #248]	; (8001670 <HAL_RCC_OscConfig+0x680>)
 8001576:	400a      	ands	r2, r1
 8001578:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2220      	movs	r2, #32
 8001580:	4013      	ands	r3, r2
 8001582:	d049      	beq.n	8001618 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d026      	beq.n	80015da <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800158c:	4b33      	ldr	r3, [pc, #204]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	4b32      	ldr	r3, [pc, #200]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001592:	2101      	movs	r1, #1
 8001594:	430a      	orrs	r2, r1
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	4b30      	ldr	r3, [pc, #192]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 800159a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800159c:	4b2f      	ldr	r3, [pc, #188]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 800159e:	2101      	movs	r1, #1
 80015a0:	430a      	orrs	r2, r1
 80015a2:	635a      	str	r2, [r3, #52]	; 0x34
 80015a4:	4b33      	ldr	r3, [pc, #204]	; (8001674 <HAL_RCC_OscConfig+0x684>)
 80015a6:	6a1a      	ldr	r2, [r3, #32]
 80015a8:	4b32      	ldr	r3, [pc, #200]	; (8001674 <HAL_RCC_OscConfig+0x684>)
 80015aa:	2180      	movs	r1, #128	; 0x80
 80015ac:	0189      	lsls	r1, r1, #6
 80015ae:	430a      	orrs	r2, r1
 80015b0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7ff fa19 	bl	80009e8 <HAL_GetTick>
 80015b6:	0003      	movs	r3, r0
 80015b8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015bc:	f7ff fa14 	bl	80009e8 <HAL_GetTick>
 80015c0:	0002      	movs	r2, r0
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e0c9      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015ce:	4b23      	ldr	r3, [pc, #140]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2202      	movs	r2, #2
 80015d4:	4013      	ands	r3, r2
 80015d6:	d0f1      	beq.n	80015bc <HAL_RCC_OscConfig+0x5cc>
 80015d8:	e01e      	b.n	8001618 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80015e0:	2101      	movs	r1, #1
 80015e2:	438a      	bics	r2, r1
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	4b23      	ldr	r3, [pc, #140]	; (8001674 <HAL_RCC_OscConfig+0x684>)
 80015e8:	6a1a      	ldr	r2, [r3, #32]
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <HAL_RCC_OscConfig+0x684>)
 80015ec:	4922      	ldr	r1, [pc, #136]	; (8001678 <HAL_RCC_OscConfig+0x688>)
 80015ee:	400a      	ands	r2, r1
 80015f0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f2:	f7ff f9f9 	bl	80009e8 <HAL_GetTick>
 80015f6:	0003      	movs	r3, r0
 80015f8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015fc:	f7ff f9f4 	bl	80009e8 <HAL_GetTick>
 8001600:	0002      	movs	r2, r0
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e0a9      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2202      	movs	r2, #2
 8001614:	4013      	ands	r3, r2
 8001616:	d1f1      	bne.n	80015fc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	d100      	bne.n	8001622 <HAL_RCC_OscConfig+0x632>
 8001620:	e09e      	b.n	8001760 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	2b0c      	cmp	r3, #12
 8001626:	d100      	bne.n	800162a <HAL_RCC_OscConfig+0x63a>
 8001628:	e077      	b.n	800171a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	2b02      	cmp	r3, #2
 8001630:	d158      	bne.n	80016e4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001638:	4910      	ldr	r1, [pc, #64]	; (800167c <HAL_RCC_OscConfig+0x68c>)
 800163a:	400a      	ands	r2, r1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff f9d3 	bl	80009e8 <HAL_GetTick>
 8001642:	0003      	movs	r3, r0
 8001644:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001646:	e01b      	b.n	8001680 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff f9ce 	bl	80009e8 <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d914      	bls.n	8001680 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e083      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	40021000 	.word	0x40021000
 8001660:	fffffeff 	.word	0xfffffeff
 8001664:	40007000 	.word	0x40007000
 8001668:	fffffbff 	.word	0xfffffbff
 800166c:	00001388 	.word	0x00001388
 8001670:	efffffff 	.word	0xefffffff
 8001674:	40010000 	.word	0x40010000
 8001678:	ffffdfff 	.word	0xffffdfff
 800167c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001680:	4b3a      	ldr	r3, [pc, #232]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	049b      	lsls	r3, r3, #18
 8001688:	4013      	ands	r3, r2
 800168a:	d1dd      	bne.n	8001648 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800168c:	4b37      	ldr	r3, [pc, #220]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	4a37      	ldr	r2, [pc, #220]	; (8001770 <HAL_RCC_OscConfig+0x780>)
 8001692:	4013      	ands	r3, r2
 8001694:	0019      	movs	r1, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a4:	431a      	orrs	r2, r3
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 80016a8:	430a      	orrs	r2, r1
 80016aa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ac:	4b2f      	ldr	r3, [pc, #188]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b2e      	ldr	r3, [pc, #184]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 80016b2:	2180      	movs	r1, #128	; 0x80
 80016b4:	0449      	lsls	r1, r1, #17
 80016b6:	430a      	orrs	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ba:	f7ff f995 	bl	80009e8 <HAL_GetTick>
 80016be:	0003      	movs	r3, r0
 80016c0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff f990 	bl	80009e8 <HAL_GetTick>
 80016c8:	0002      	movs	r2, r0
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e045      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016d6:	4b25      	ldr	r3, [pc, #148]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	049b      	lsls	r3, r3, #18
 80016de:	4013      	ands	r3, r2
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x6d4>
 80016e2:	e03d      	b.n	8001760 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b20      	ldr	r3, [pc, #128]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 80016ea:	4922      	ldr	r1, [pc, #136]	; (8001774 <HAL_RCC_OscConfig+0x784>)
 80016ec:	400a      	ands	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff f97a 	bl	80009e8 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fa:	f7ff f975 	bl	80009e8 <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e02a      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	049b      	lsls	r3, r3, #18
 8001714:	4013      	ands	r3, r2
 8001716:	d1f0      	bne.n	80016fa <HAL_RCC_OscConfig+0x70a>
 8001718:	e022      	b.n	8001760 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e01d      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	025b      	lsls	r3, r3, #9
 8001732:	401a      	ands	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	429a      	cmp	r2, r3
 800173a:	d10f      	bne.n	800175c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	23f0      	movs	r3, #240	; 0xf0
 8001740:	039b      	lsls	r3, r3, #14
 8001742:	401a      	ands	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001748:	429a      	cmp	r2, r3
 800174a:	d107      	bne.n	800175c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	23c0      	movs	r3, #192	; 0xc0
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	401a      	ands	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	0018      	movs	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	b00a      	add	sp, #40	; 0x28
 8001768:	bdb0      	pop	{r4, r5, r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	40021000 	.word	0x40021000
 8001770:	ff02ffff 	.word	0xff02ffff
 8001774:	feffffff 	.word	0xfeffffff

08001778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001778:	b5b0      	push	{r4, r5, r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e128      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800178c:	4b96      	ldr	r3, [pc, #600]	; (80019e8 <HAL_RCC_ClockConfig+0x270>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2201      	movs	r2, #1
 8001792:	4013      	ands	r3, r2
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d91e      	bls.n	80017d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b93      	ldr	r3, [pc, #588]	; (80019e8 <HAL_RCC_ClockConfig+0x270>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	4393      	bics	r3, r2
 80017a2:	0019      	movs	r1, r3
 80017a4:	4b90      	ldr	r3, [pc, #576]	; (80019e8 <HAL_RCC_ClockConfig+0x270>)
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017ac:	f7ff f91c 	bl	80009e8 <HAL_GetTick>
 80017b0:	0003      	movs	r3, r0
 80017b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b4:	e009      	b.n	80017ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b6:	f7ff f917 	bl	80009e8 <HAL_GetTick>
 80017ba:	0002      	movs	r2, r0
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	4a8a      	ldr	r2, [pc, #552]	; (80019ec <HAL_RCC_ClockConfig+0x274>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e109      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ca:	4b87      	ldr	r3, [pc, #540]	; (80019e8 <HAL_RCC_ClockConfig+0x270>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2201      	movs	r2, #1
 80017d0:	4013      	ands	r3, r2
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d1ee      	bne.n	80017b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2202      	movs	r2, #2
 80017de:	4013      	ands	r3, r2
 80017e0:	d009      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e2:	4b83      	ldr	r3, [pc, #524]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	22f0      	movs	r2, #240	; 0xf0
 80017e8:	4393      	bics	r3, r2
 80017ea:	0019      	movs	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	4b7f      	ldr	r3, [pc, #508]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 80017f2:	430a      	orrs	r2, r1
 80017f4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2201      	movs	r2, #1
 80017fc:	4013      	ands	r3, r2
 80017fe:	d100      	bne.n	8001802 <HAL_RCC_ClockConfig+0x8a>
 8001800:	e089      	b.n	8001916 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800180a:	4b79      	ldr	r3, [pc, #484]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	029b      	lsls	r3, r3, #10
 8001812:	4013      	ands	r3, r2
 8001814:	d120      	bne.n	8001858 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e0e1      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b03      	cmp	r3, #3
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001822:	4b73      	ldr	r3, [pc, #460]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	049b      	lsls	r3, r3, #18
 800182a:	4013      	ands	r3, r2
 800182c:	d114      	bne.n	8001858 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e0d5      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d106      	bne.n	8001848 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800183a:	4b6d      	ldr	r3, [pc, #436]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2204      	movs	r2, #4
 8001840:	4013      	ands	r3, r2
 8001842:	d109      	bne.n	8001858 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0ca      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001848:	4b69      	ldr	r3, [pc, #420]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4013      	ands	r3, r2
 8001852:	d101      	bne.n	8001858 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0c2      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001858:	4b65      	ldr	r3, [pc, #404]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2203      	movs	r2, #3
 800185e:	4393      	bics	r3, r2
 8001860:	0019      	movs	r1, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	4b62      	ldr	r3, [pc, #392]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 8001868:	430a      	orrs	r2, r1
 800186a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800186c:	f7ff f8bc 	bl	80009e8 <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d111      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800187c:	e009      	b.n	8001892 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187e:	f7ff f8b3 	bl	80009e8 <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	4a58      	ldr	r2, [pc, #352]	; (80019ec <HAL_RCC_ClockConfig+0x274>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e0a5      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001892:	4b57      	ldr	r3, [pc, #348]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	220c      	movs	r2, #12
 8001898:	4013      	ands	r3, r2
 800189a:	2b08      	cmp	r3, #8
 800189c:	d1ef      	bne.n	800187e <HAL_RCC_ClockConfig+0x106>
 800189e:	e03a      	b.n	8001916 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d111      	bne.n	80018cc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018a8:	e009      	b.n	80018be <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018aa:	f7ff f89d 	bl	80009e8 <HAL_GetTick>
 80018ae:	0002      	movs	r2, r0
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	4a4d      	ldr	r2, [pc, #308]	; (80019ec <HAL_RCC_ClockConfig+0x274>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e08f      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018be:	4b4c      	ldr	r3, [pc, #304]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	220c      	movs	r2, #12
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d1ef      	bne.n	80018aa <HAL_RCC_ClockConfig+0x132>
 80018ca:	e024      	b.n	8001916 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d11b      	bne.n	800190c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018d4:	e009      	b.n	80018ea <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d6:	f7ff f887 	bl	80009e8 <HAL_GetTick>
 80018da:	0002      	movs	r2, r0
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	4a42      	ldr	r2, [pc, #264]	; (80019ec <HAL_RCC_ClockConfig+0x274>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e079      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ea:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	220c      	movs	r2, #12
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d1ef      	bne.n	80018d6 <HAL_RCC_ClockConfig+0x15e>
 80018f6:	e00e      	b.n	8001916 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f8:	f7ff f876 	bl	80009e8 <HAL_GetTick>
 80018fc:	0002      	movs	r2, r0
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	4a3a      	ldr	r2, [pc, #232]	; (80019ec <HAL_RCC_ClockConfig+0x274>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d901      	bls.n	800190c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e068      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800190c:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	220c      	movs	r2, #12
 8001912:	4013      	ands	r3, r2
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001916:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <HAL_RCC_ClockConfig+0x270>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2201      	movs	r2, #1
 800191c:	4013      	ands	r3, r2
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d21e      	bcs.n	8001962 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001924:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <HAL_RCC_ClockConfig+0x270>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2201      	movs	r2, #1
 800192a:	4393      	bics	r3, r2
 800192c:	0019      	movs	r1, r3
 800192e:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <HAL_RCC_ClockConfig+0x270>)
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001936:	f7ff f857 	bl	80009e8 <HAL_GetTick>
 800193a:	0003      	movs	r3, r0
 800193c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	e009      	b.n	8001954 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001940:	f7ff f852 	bl	80009e8 <HAL_GetTick>
 8001944:	0002      	movs	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	4a28      	ldr	r2, [pc, #160]	; (80019ec <HAL_RCC_ClockConfig+0x274>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e044      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001954:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <HAL_RCC_ClockConfig+0x270>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2201      	movs	r2, #1
 800195a:	4013      	ands	r3, r2
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d1ee      	bne.n	8001940 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2204      	movs	r2, #4
 8001968:	4013      	ands	r3, r2
 800196a:	d009      	beq.n	8001980 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800196c:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	4a20      	ldr	r2, [pc, #128]	; (80019f4 <HAL_RCC_ClockConfig+0x27c>)
 8001972:	4013      	ands	r3, r2
 8001974:	0019      	movs	r1, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 800197c:	430a      	orrs	r2, r1
 800197e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2208      	movs	r2, #8
 8001986:	4013      	ands	r3, r2
 8001988:	d00a      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800198a:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	4a1a      	ldr	r2, [pc, #104]	; (80019f8 <HAL_RCC_ClockConfig+0x280>)
 8001990:	4013      	ands	r3, r2
 8001992:	0019      	movs	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	00da      	lsls	r2, r3, #3
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 800199c:	430a      	orrs	r2, r1
 800199e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019a0:	f000 f832 	bl	8001a08 <HAL_RCC_GetSysClockFreq>
 80019a4:	0001      	movs	r1, r0
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	091b      	lsrs	r3, r3, #4
 80019ac:	220f      	movs	r2, #15
 80019ae:	4013      	ands	r3, r2
 80019b0:	4a12      	ldr	r2, [pc, #72]	; (80019fc <HAL_RCC_ClockConfig+0x284>)
 80019b2:	5cd3      	ldrb	r3, [r2, r3]
 80019b4:	000a      	movs	r2, r1
 80019b6:	40da      	lsrs	r2, r3
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <HAL_RCC_ClockConfig+0x288>)
 80019ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_RCC_ClockConfig+0x28c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	250b      	movs	r5, #11
 80019c2:	197c      	adds	r4, r7, r5
 80019c4:	0018      	movs	r0, r3
 80019c6:	f7fe ffc9 	bl	800095c <HAL_InitTick>
 80019ca:	0003      	movs	r3, r0
 80019cc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80019ce:	197b      	adds	r3, r7, r5
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80019d6:	197b      	adds	r3, r7, r5
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	e000      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	0018      	movs	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b004      	add	sp, #16
 80019e4:	bdb0      	pop	{r4, r5, r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	40022000 	.word	0x40022000
 80019ec:	00001388 	.word	0x00001388
 80019f0:	40021000 	.word	0x40021000
 80019f4:	fffff8ff 	.word	0xfffff8ff
 80019f8:	ffffc7ff 	.word	0xffffc7ff
 80019fc:	08003ab0 	.word	0x08003ab0
 8001a00:	20000000 	.word	0x20000000
 8001a04:	20000004 	.word	0x20000004

08001a08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	b08e      	sub	sp, #56	; 0x38
 8001a0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a0e:	4b4c      	ldr	r3, [pc, #304]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a16:	230c      	movs	r3, #12
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b0c      	cmp	r3, #12
 8001a1c:	d014      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0x40>
 8001a1e:	d900      	bls.n	8001a22 <HAL_RCC_GetSysClockFreq+0x1a>
 8001a20:	e07b      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x112>
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d002      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x24>
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d00b      	beq.n	8001a42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a2a:	e076      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a2c:	4b44      	ldr	r3, [pc, #272]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2210      	movs	r2, #16
 8001a32:	4013      	ands	r3, r2
 8001a34:	d002      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a36:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a38:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001a3a:	e07c      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001a3c:	4b42      	ldr	r3, [pc, #264]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x140>)
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a40:	e079      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a42:	4b42      	ldr	r3, [pc, #264]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x144>)
 8001a44:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a46:	e076      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4a:	0c9a      	lsrs	r2, r3, #18
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	401a      	ands	r2, r3
 8001a50:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x148>)
 8001a52:	5c9b      	ldrb	r3, [r3, r2]
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a58:	0d9a      	lsrs	r2, r3, #22
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	3301      	adds	r3, #1
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a62:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	025b      	lsls	r3, r3, #9
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d01a      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	4a35      	ldr	r2, [pc, #212]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x144>)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	69b8      	ldr	r0, [r7, #24]
 8001a7c:	69f9      	ldr	r1, [r7, #28]
 8001a7e:	f7fe fbef 	bl	8000260 <__aeabi_lmul>
 8001a82:	0002      	movs	r2, r0
 8001a84:	000b      	movs	r3, r1
 8001a86:	0010      	movs	r0, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f7fe fbc3 	bl	8000220 <__aeabi_uldivmod>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	000b      	movs	r3, r1
 8001a9e:	0013      	movs	r3, r2
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8001aa2:	e037      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001aa4:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2210      	movs	r2, #16
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d01a      	beq.n	8001ae4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4a23      	ldr	r2, [pc, #140]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	68b8      	ldr	r0, [r7, #8]
 8001abc:	68f9      	ldr	r1, [r7, #12]
 8001abe:	f7fe fbcf 	bl	8000260 <__aeabi_lmul>
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	000b      	movs	r3, r1
 8001ac6:	0010      	movs	r0, r2
 8001ac8:	0019      	movs	r1, r3
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f7fe fba3 	bl	8000220 <__aeabi_uldivmod>
 8001ada:	0002      	movs	r2, r0
 8001adc:	000b      	movs	r3, r1
 8001ade:	0013      	movs	r3, r2
 8001ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ae2:	e017      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	2300      	movs	r3, #0
 8001aea:	0019      	movs	r1, r3
 8001aec:	4a16      	ldr	r2, [pc, #88]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x140>)
 8001aee:	2300      	movs	r3, #0
 8001af0:	f7fe fbb6 	bl	8000260 <__aeabi_lmul>
 8001af4:	0002      	movs	r2, r0
 8001af6:	000b      	movs	r3, r1
 8001af8:	0010      	movs	r0, r2
 8001afa:	0019      	movs	r1, r3
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	001c      	movs	r4, r3
 8001b00:	2300      	movs	r3, #0
 8001b02:	001d      	movs	r5, r3
 8001b04:	0022      	movs	r2, r4
 8001b06:	002b      	movs	r3, r5
 8001b08:	f7fe fb8a 	bl	8000220 <__aeabi_uldivmod>
 8001b0c:	0002      	movs	r2, r0
 8001b0e:	000b      	movs	r3, r1
 8001b10:	0013      	movs	r3, r2
 8001b12:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b18:	e00d      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	0b5b      	lsrs	r3, r3, #13
 8001b20:	2207      	movs	r2, #7
 8001b22:	4013      	ands	r3, r2
 8001b24:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	2280      	movs	r2, #128	; 0x80
 8001b2c:	0212      	lsls	r2, r2, #8
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	0013      	movs	r3, r2
 8001b32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b34:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b00e      	add	sp, #56	; 0x38
 8001b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	003d0900 	.word	0x003d0900
 8001b48:	00f42400 	.word	0x00f42400
 8001b4c:	007a1200 	.word	0x007a1200
 8001b50:	08003ac8 	.word	0x08003ac8

08001b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b58:	4b02      	ldr	r3, [pc, #8]	; (8001b64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	20000000 	.word	0x20000000

08001b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b6c:	f7ff fff2 	bl	8001b54 <HAL_RCC_GetHCLKFreq>
 8001b70:	0001      	movs	r1, r0
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	0a1b      	lsrs	r3, r3, #8
 8001b78:	2207      	movs	r2, #7
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	40d9      	lsrs	r1, r3
 8001b82:	000b      	movs	r3, r1
}
 8001b84:	0018      	movs	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	08003ac0 	.word	0x08003ac0

08001b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b98:	f7ff ffdc 	bl	8001b54 <HAL_RCC_GetHCLKFreq>
 8001b9c:	0001      	movs	r1, r0
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	0adb      	lsrs	r3, r3, #11
 8001ba4:	2207      	movs	r2, #7
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001baa:	5cd3      	ldrb	r3, [r2, r3]
 8001bac:	40d9      	lsrs	r1, r3
 8001bae:	000b      	movs	r3, r1
}
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	08003ac0 	.word	0x08003ac0

08001bc0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001bc8:	2317      	movs	r3, #23
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d106      	bne.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	4013      	ands	r3, r2
 8001be4:	d100      	bne.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001be6:	e104      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be8:	4bb1      	ldr	r3, [pc, #708]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	055b      	lsls	r3, r3, #21
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d10a      	bne.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf4:	4bae      	ldr	r3, [pc, #696]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bf8:	4bad      	ldr	r3, [pc, #692]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bfa:	2180      	movs	r1, #128	; 0x80
 8001bfc:	0549      	lsls	r1, r1, #21
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c02:	2317      	movs	r3, #23
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	2201      	movs	r2, #1
 8001c08:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0a:	4baa      	ldr	r3, [pc, #680]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4013      	ands	r3, r2
 8001c14:	d11a      	bne.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c16:	4ba7      	ldr	r3, [pc, #668]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4ba6      	ldr	r3, [pc, #664]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001c1c:	2180      	movs	r1, #128	; 0x80
 8001c1e:	0049      	lsls	r1, r1, #1
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c24:	f7fe fee0 	bl	80009e8 <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2c:	e008      	b.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2e:	f7fe fedb 	bl	80009e8 <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b64      	cmp	r3, #100	; 0x64
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e133      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	4b9c      	ldr	r3, [pc, #624]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001c4c:	4b98      	ldr	r3, [pc, #608]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	23c0      	movs	r3, #192	; 0xc0
 8001c52:	039b      	lsls	r3, r3, #14
 8001c54:	4013      	ands	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	23c0      	movs	r3, #192	; 0xc0
 8001c5e:	039b      	lsls	r3, r3, #14
 8001c60:	4013      	ands	r3, r2
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d107      	bne.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	23c0      	movs	r3, #192	; 0xc0
 8001c6e:	039b      	lsls	r3, r3, #14
 8001c70:	4013      	ands	r3, r2
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	23c0      	movs	r3, #192	; 0xc0
 8001c7e:	029b      	lsls	r3, r3, #10
 8001c80:	401a      	ands	r2, r3
 8001c82:	23c0      	movs	r3, #192	; 0xc0
 8001c84:	029b      	lsls	r3, r3, #10
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d10a      	bne.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001c8a:	4b89      	ldr	r3, [pc, #548]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	029b      	lsls	r3, r3, #10
 8001c92:	401a      	ands	r2, r3
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	029b      	lsls	r3, r3, #10
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e103      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001ca0:	4b83      	ldr	r3, [pc, #524]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ca2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ca4:	23c0      	movs	r3, #192	; 0xc0
 8001ca6:	029b      	lsls	r3, r3, #10
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d049      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	23c0      	movs	r3, #192	; 0xc0
 8001cb8:	029b      	lsls	r3, r3, #10
 8001cba:	4013      	ands	r3, r2
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d004      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d10d      	bne.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	23c0      	movs	r3, #192	; 0xc0
 8001cd2:	029b      	lsls	r3, r3, #10
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d034      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d02e      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ce8:	4b71      	ldr	r3, [pc, #452]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cec:	4a72      	ldr	r2, [pc, #456]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cf2:	4b6f      	ldr	r3, [pc, #444]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cf6:	4b6e      	ldr	r3, [pc, #440]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	0309      	lsls	r1, r1, #12
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d00:	4b6b      	ldr	r3, [pc, #428]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d04:	4b6a      	ldr	r3, [pc, #424]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d06:	496d      	ldr	r1, [pc, #436]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001d08:	400a      	ands	r2, r1
 8001d0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001d0c:	4b68      	ldr	r3, [pc, #416]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d014      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7fe fe64 	bl	80009e8 <HAL_GetTick>
 8001d20:	0003      	movs	r3, r0
 8001d22:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d24:	e009      	b.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7fe fe5f 	bl	80009e8 <HAL_GetTick>
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	4a63      	ldr	r2, [pc, #396]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e0b6      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d3a:	4b5d      	ldr	r3, [pc, #372]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4013      	ands	r3, r2
 8001d44:	d0ef      	beq.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d01f      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	23c0      	movs	r3, #192	; 0xc0
 8001d58:	029b      	lsls	r3, r3, #10
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	23c0      	movs	r3, #192	; 0xc0
 8001d5e:	029b      	lsls	r3, r3, #10
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d10c      	bne.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001d64:	4b52      	ldr	r3, [pc, #328]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a56      	ldr	r2, [pc, #344]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	23c0      	movs	r3, #192	; 0xc0
 8001d74:	039b      	lsls	r3, r3, #14
 8001d76:	401a      	ands	r2, r3
 8001d78:	4b4d      	ldr	r3, [pc, #308]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	4b4c      	ldr	r3, [pc, #304]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d80:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	23c0      	movs	r3, #192	; 0xc0
 8001d88:	029b      	lsls	r3, r3, #10
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2220      	movs	r2, #32
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d01f      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	23c0      	movs	r3, #192	; 0xc0
 8001da2:	029b      	lsls	r3, r3, #10
 8001da4:	401a      	ands	r2, r3
 8001da6:	23c0      	movs	r3, #192	; 0xc0
 8001da8:	029b      	lsls	r3, r3, #10
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001dae:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a44      	ldr	r2, [pc, #272]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	0019      	movs	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	23c0      	movs	r3, #192	; 0xc0
 8001dbe:	039b      	lsls	r3, r3, #14
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	4b3b      	ldr	r3, [pc, #236]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dca:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	23c0      	movs	r3, #192	; 0xc0
 8001dd2:	029b      	lsls	r3, r3, #10
 8001dd4:	401a      	ands	r2, r3
 8001dd6:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ddc:	2317      	movs	r3, #23
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d105      	bne.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de6:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dea:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dec:	4936      	ldr	r1, [pc, #216]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001dee:	400a      	ands	r2, r1
 8001df0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2201      	movs	r2, #1
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d009      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dfc:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e00:	2203      	movs	r2, #3
 8001e02:	4393      	bics	r3, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2202      	movs	r2, #2
 8001e16:	4013      	ands	r3, r2
 8001e18:	d009      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e1a:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	220c      	movs	r2, #12
 8001e20:	4393      	bics	r3, r2
 8001e22:	0019      	movs	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2204      	movs	r2, #4
 8001e34:	4013      	ands	r3, r2
 8001e36:	d009      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e38:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3c:	4a23      	ldr	r2, [pc, #140]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	0019      	movs	r1, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2208      	movs	r2, #8
 8001e52:	4013      	ands	r3, r2
 8001e54:	d009      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	0019      	movs	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699a      	ldr	r2, [r3, #24]
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e66:	430a      	orrs	r2, r1
 8001e68:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2240      	movs	r2, #64	; 0x40
 8001e70:	4013      	ands	r3, r2
 8001e72:	d009      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e78:	4a16      	ldr	r2, [pc, #88]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1a      	ldr	r2, [r3, #32]
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e84:	430a      	orrs	r2, r1
 8001e86:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2280      	movs	r2, #128	; 0x80
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001e92:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e96:	4a10      	ldr	r2, [pc, #64]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69da      	ldr	r2, [r3, #28]
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b006      	add	sp, #24
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	fffcffff 	.word	0xfffcffff
 8001ebc:	fff7ffff 	.word	0xfff7ffff
 8001ec0:	00001388 	.word	0x00001388
 8001ec4:	ffcfffff 	.word	0xffcfffff
 8001ec8:	efffffff 	.word	0xefffffff
 8001ecc:	fffff3ff 	.word	0xfffff3ff
 8001ed0:	ffffcfff 	.word	0xffffcfff
 8001ed4:	fbffffff 	.word	0xfbffffff
 8001ed8:	fff3ffff 	.word	0xfff3ffff

08001edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e044      	b.n	8001f78 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d107      	bne.n	8001f06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2278      	movs	r2, #120	; 0x78
 8001efa:	2100      	movs	r1, #0
 8001efc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f7fe fbd5 	bl	80006b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2224      	movs	r2, #36	; 0x24
 8001f0a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2101      	movs	r1, #1
 8001f18:	438a      	bics	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f000 fbce 	bl	80026c0 <UART_SetConfig>
 8001f24:	0003      	movs	r3, r0
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e024      	b.n	8001f78 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f000 fe45 	bl	8002bc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	490d      	ldr	r1, [pc, #52]	; (8001f80 <HAL_UART_Init+0xa4>)
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	212a      	movs	r1, #42	; 0x2a
 8001f5a:	438a      	bics	r2, r1
 8001f5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	0018      	movs	r0, r3
 8001f72:	f000 fedd 	bl	8002d30 <UART_CheckIdleState>
 8001f76:	0003      	movs	r3, r0
}
 8001f78:	0018      	movs	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b002      	add	sp, #8
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	ffffb7ff 	.word	0xffffb7ff

08001f84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	1dbb      	adds	r3, r7, #6
 8001f92:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d000      	beq.n	8001f9e <HAL_UART_Transmit+0x1a>
 8001f9c:	e08c      	b.n	80020b8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_UART_Transmit+0x28>
 8001fa4:	1dbb      	adds	r3, r7, #6
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e084      	b.n	80020ba <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	015b      	lsls	r3, r3, #5
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d109      	bne.n	8001fd0 <HAL_UART_Transmit+0x4c>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d105      	bne.n	8001fd0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d001      	beq.n	8001fd0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e074      	b.n	80020ba <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2284      	movs	r2, #132	; 0x84
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2221      	movs	r2, #33	; 0x21
 8001fdc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fde:	f7fe fd03 	bl	80009e8 <HAL_GetTick>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1dba      	adds	r2, r7, #6
 8001fea:	2150      	movs	r1, #80	; 0x50
 8001fec:	8812      	ldrh	r2, [r2, #0]
 8001fee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	1dba      	adds	r2, r7, #6
 8001ff4:	2152      	movs	r1, #82	; 0x52
 8001ff6:	8812      	ldrh	r2, [r2, #0]
 8001ff8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	015b      	lsls	r3, r3, #5
 8002002:	429a      	cmp	r2, r3
 8002004:	d108      	bne.n	8002018 <HAL_UART_Transmit+0x94>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d104      	bne.n	8002018 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	e003      	b.n	8002020 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002020:	e02f      	b.n	8002082 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	0013      	movs	r3, r2
 800202c:	2200      	movs	r2, #0
 800202e:	2180      	movs	r1, #128	; 0x80
 8002030:	f000 ff26 	bl	8002e80 <UART_WaitOnFlagUntilTimeout>
 8002034:	1e03      	subs	r3, r0, #0
 8002036:	d004      	beq.n	8002042 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2220      	movs	r2, #32
 800203c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e03b      	b.n	80020ba <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10b      	bne.n	8002060 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	001a      	movs	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	05d2      	lsls	r2, r2, #23
 8002054:	0dd2      	lsrs	r2, r2, #23
 8002056:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	3302      	adds	r3, #2
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	e007      	b.n	8002070 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	781a      	ldrb	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3301      	adds	r3, #1
 800206e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2252      	movs	r2, #82	; 0x52
 8002074:	5a9b      	ldrh	r3, [r3, r2]
 8002076:	b29b      	uxth	r3, r3
 8002078:	3b01      	subs	r3, #1
 800207a:	b299      	uxth	r1, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2252      	movs	r2, #82	; 0x52
 8002080:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2252      	movs	r2, #82	; 0x52
 8002086:	5a9b      	ldrh	r3, [r3, r2]
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1c9      	bne.n	8002022 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	0013      	movs	r3, r2
 8002098:	2200      	movs	r2, #0
 800209a:	2140      	movs	r1, #64	; 0x40
 800209c:	f000 fef0 	bl	8002e80 <UART_WaitOnFlagUntilTimeout>
 80020a0:	1e03      	subs	r3, r0, #0
 80020a2:	d004      	beq.n	80020ae <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2220      	movs	r2, #32
 80020a8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e005      	b.n	80020ba <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2220      	movs	r2, #32
 80020b2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	e000      	b.n	80020ba <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80020b8:	2302      	movs	r3, #2
  }
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b008      	add	sp, #32
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b0ab      	sub	sp, #172	; 0xac
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	22a4      	movs	r2, #164	; 0xa4
 80020d4:	18b9      	adds	r1, r7, r2
 80020d6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	20a0      	movs	r0, #160	; 0xa0
 80020e0:	1839      	adds	r1, r7, r0
 80020e2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	219c      	movs	r1, #156	; 0x9c
 80020ec:	1879      	adds	r1, r7, r1
 80020ee:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80020f0:	0011      	movs	r1, r2
 80020f2:	18bb      	adds	r3, r7, r2
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a99      	ldr	r2, [pc, #612]	; (800235c <HAL_UART_IRQHandler+0x298>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	2298      	movs	r2, #152	; 0x98
 80020fc:	18bc      	adds	r4, r7, r2
 80020fe:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002100:	18bb      	adds	r3, r7, r2
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d114      	bne.n	8002132 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002108:	187b      	adds	r3, r7, r1
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2220      	movs	r2, #32
 800210e:	4013      	ands	r3, r2
 8002110:	d00f      	beq.n	8002132 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002112:	183b      	adds	r3, r7, r0
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2220      	movs	r2, #32
 8002118:	4013      	ands	r3, r2
 800211a:	d00a      	beq.n	8002132 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <HAL_UART_IRQHandler+0x62>
 8002124:	e2a0      	b.n	8002668 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	0010      	movs	r0, r2
 800212e:	4798      	blx	r3
      }
      return;
 8002130:	e29a      	b.n	8002668 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002132:	2398      	movs	r3, #152	; 0x98
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d100      	bne.n	800213e <HAL_UART_IRQHandler+0x7a>
 800213c:	e114      	b.n	8002368 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800213e:	239c      	movs	r3, #156	; 0x9c
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2201      	movs	r2, #1
 8002146:	4013      	ands	r3, r2
 8002148:	d106      	bne.n	8002158 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800214a:	23a0      	movs	r3, #160	; 0xa0
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a83      	ldr	r2, [pc, #524]	; (8002360 <HAL_UART_IRQHandler+0x29c>)
 8002152:	4013      	ands	r3, r2
 8002154:	d100      	bne.n	8002158 <HAL_UART_IRQHandler+0x94>
 8002156:	e107      	b.n	8002368 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002158:	23a4      	movs	r3, #164	; 0xa4
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2201      	movs	r2, #1
 8002160:	4013      	ands	r3, r2
 8002162:	d012      	beq.n	800218a <HAL_UART_IRQHandler+0xc6>
 8002164:	23a0      	movs	r3, #160	; 0xa0
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4013      	ands	r3, r2
 8002170:	d00b      	beq.n	800218a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2201      	movs	r2, #1
 8002178:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2284      	movs	r2, #132	; 0x84
 800217e:	589b      	ldr	r3, [r3, r2]
 8002180:	2201      	movs	r2, #1
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2184      	movs	r1, #132	; 0x84
 8002188:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800218a:	23a4      	movs	r3, #164	; 0xa4
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2202      	movs	r2, #2
 8002192:	4013      	ands	r3, r2
 8002194:	d011      	beq.n	80021ba <HAL_UART_IRQHandler+0xf6>
 8002196:	239c      	movs	r3, #156	; 0x9c
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2201      	movs	r2, #1
 800219e:	4013      	ands	r3, r2
 80021a0:	d00b      	beq.n	80021ba <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2202      	movs	r2, #2
 80021a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2284      	movs	r2, #132	; 0x84
 80021ae:	589b      	ldr	r3, [r3, r2]
 80021b0:	2204      	movs	r2, #4
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2184      	movs	r1, #132	; 0x84
 80021b8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80021ba:	23a4      	movs	r3, #164	; 0xa4
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2204      	movs	r2, #4
 80021c2:	4013      	ands	r3, r2
 80021c4:	d011      	beq.n	80021ea <HAL_UART_IRQHandler+0x126>
 80021c6:	239c      	movs	r3, #156	; 0x9c
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2201      	movs	r2, #1
 80021ce:	4013      	ands	r3, r2
 80021d0:	d00b      	beq.n	80021ea <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2204      	movs	r2, #4
 80021d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2284      	movs	r2, #132	; 0x84
 80021de:	589b      	ldr	r3, [r3, r2]
 80021e0:	2202      	movs	r2, #2
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2184      	movs	r1, #132	; 0x84
 80021e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80021ea:	23a4      	movs	r3, #164	; 0xa4
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2208      	movs	r2, #8
 80021f2:	4013      	ands	r3, r2
 80021f4:	d017      	beq.n	8002226 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80021f6:	23a0      	movs	r3, #160	; 0xa0
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2220      	movs	r2, #32
 80021fe:	4013      	ands	r3, r2
 8002200:	d105      	bne.n	800220e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002202:	239c      	movs	r3, #156	; 0x9c
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2201      	movs	r2, #1
 800220a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800220c:	d00b      	beq.n	8002226 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2208      	movs	r2, #8
 8002214:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2284      	movs	r2, #132	; 0x84
 800221a:	589b      	ldr	r3, [r3, r2]
 800221c:	2208      	movs	r2, #8
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2184      	movs	r1, #132	; 0x84
 8002224:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002226:	23a4      	movs	r3, #164	; 0xa4
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	4013      	ands	r3, r2
 8002232:	d013      	beq.n	800225c <HAL_UART_IRQHandler+0x198>
 8002234:	23a0      	movs	r3, #160	; 0xa0
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	04db      	lsls	r3, r3, #19
 800223e:	4013      	ands	r3, r2
 8002240:	d00c      	beq.n	800225c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2280      	movs	r2, #128	; 0x80
 8002248:	0112      	lsls	r2, r2, #4
 800224a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2284      	movs	r2, #132	; 0x84
 8002250:	589b      	ldr	r3, [r3, r2]
 8002252:	2220      	movs	r2, #32
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2184      	movs	r1, #132	; 0x84
 800225a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2284      	movs	r2, #132	; 0x84
 8002260:	589b      	ldr	r3, [r3, r2]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d100      	bne.n	8002268 <HAL_UART_IRQHandler+0x1a4>
 8002266:	e201      	b.n	800266c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002268:	23a4      	movs	r3, #164	; 0xa4
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2220      	movs	r2, #32
 8002270:	4013      	ands	r3, r2
 8002272:	d00e      	beq.n	8002292 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002274:	23a0      	movs	r3, #160	; 0xa0
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2220      	movs	r2, #32
 800227c:	4013      	ands	r3, r2
 800227e:	d008      	beq.n	8002292 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002284:	2b00      	cmp	r3, #0
 8002286:	d004      	beq.n	8002292 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	0010      	movs	r0, r2
 8002290:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2284      	movs	r2, #132	; 0x84
 8002296:	589b      	ldr	r3, [r3, r2]
 8002298:	2194      	movs	r1, #148	; 0x94
 800229a:	187a      	adds	r2, r7, r1
 800229c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2240      	movs	r2, #64	; 0x40
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b40      	cmp	r3, #64	; 0x40
 80022aa:	d004      	beq.n	80022b6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80022ac:	187b      	adds	r3, r7, r1
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2228      	movs	r2, #40	; 0x28
 80022b2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80022b4:	d047      	beq.n	8002346 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f000 fe4b 	bl	8002f54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2240      	movs	r2, #64	; 0x40
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b40      	cmp	r3, #64	; 0x40
 80022ca:	d137      	bne.n	800233c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022cc:	f3ef 8310 	mrs	r3, PRIMASK
 80022d0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80022d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022d4:	2090      	movs	r0, #144	; 0x90
 80022d6:	183a      	adds	r2, r7, r0
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	2301      	movs	r3, #1
 80022dc:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022e0:	f383 8810 	msr	PRIMASK, r3
}
 80022e4:	46c0      	nop			; (mov r8, r8)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2140      	movs	r1, #64	; 0x40
 80022f2:	438a      	bics	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	183b      	adds	r3, r7, r0
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022fe:	f383 8810 	msr	PRIMASK, r3
}
 8002302:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002308:	2b00      	cmp	r3, #0
 800230a:	d012      	beq.n	8002332 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <HAL_UART_IRQHandler+0x2a0>)
 8002312:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002318:	0018      	movs	r0, r3
 800231a:	f7fe fc8d 	bl	8000c38 <HAL_DMA_Abort_IT>
 800231e:	1e03      	subs	r3, r0, #0
 8002320:	d01a      	beq.n	8002358 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800232c:	0018      	movs	r0, r3
 800232e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002330:	e012      	b.n	8002358 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	0018      	movs	r0, r3
 8002336:	f000 f9af 	bl	8002698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800233a:	e00d      	b.n	8002358 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	0018      	movs	r0, r3
 8002340:	f000 f9aa 	bl	8002698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002344:	e008      	b.n	8002358 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	0018      	movs	r0, r3
 800234a:	f000 f9a5 	bl	8002698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2284      	movs	r2, #132	; 0x84
 8002352:	2100      	movs	r1, #0
 8002354:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002356:	e189      	b.n	800266c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002358:	46c0      	nop			; (mov r8, r8)
    return;
 800235a:	e187      	b.n	800266c <HAL_UART_IRQHandler+0x5a8>
 800235c:	0000080f 	.word	0x0000080f
 8002360:	04000120 	.word	0x04000120
 8002364:	0800301d 	.word	0x0800301d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236c:	2b01      	cmp	r3, #1
 800236e:	d000      	beq.n	8002372 <HAL_UART_IRQHandler+0x2ae>
 8002370:	e13b      	b.n	80025ea <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002372:	23a4      	movs	r3, #164	; 0xa4
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2210      	movs	r2, #16
 800237a:	4013      	ands	r3, r2
 800237c:	d100      	bne.n	8002380 <HAL_UART_IRQHandler+0x2bc>
 800237e:	e134      	b.n	80025ea <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002380:	23a0      	movs	r3, #160	; 0xa0
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2210      	movs	r2, #16
 8002388:	4013      	ands	r3, r2
 800238a:	d100      	bne.n	800238e <HAL_UART_IRQHandler+0x2ca>
 800238c:	e12d      	b.n	80025ea <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2210      	movs	r2, #16
 8002394:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2240      	movs	r2, #64	; 0x40
 800239e:	4013      	ands	r3, r2
 80023a0:	2b40      	cmp	r3, #64	; 0x40
 80023a2:	d000      	beq.n	80023a6 <HAL_UART_IRQHandler+0x2e2>
 80023a4:	e0a1      	b.n	80024ea <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	217e      	movs	r1, #126	; 0x7e
 80023b0:	187b      	adds	r3, r7, r1
 80023b2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80023b4:	187b      	adds	r3, r7, r1
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d100      	bne.n	80023be <HAL_UART_IRQHandler+0x2fa>
 80023bc:	e158      	b.n	8002670 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2258      	movs	r2, #88	; 0x58
 80023c2:	5a9b      	ldrh	r3, [r3, r2]
 80023c4:	187a      	adds	r2, r7, r1
 80023c6:	8812      	ldrh	r2, [r2, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d300      	bcc.n	80023ce <HAL_UART_IRQHandler+0x30a>
 80023cc:	e150      	b.n	8002670 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	187a      	adds	r2, r7, r1
 80023d2:	215a      	movs	r1, #90	; 0x5a
 80023d4:	8812      	ldrh	r2, [r2, #0]
 80023d6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2220      	movs	r2, #32
 80023e2:	4013      	ands	r3, r2
 80023e4:	d16f      	bne.n	80024c6 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023e6:	f3ef 8310 	mrs	r3, PRIMASK
 80023ea:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80023ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80023f0:	2301      	movs	r3, #1
 80023f2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f6:	f383 8810 	msr	PRIMASK, r3
}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	499e      	ldr	r1, [pc, #632]	; (8002680 <HAL_UART_IRQHandler+0x5bc>)
 8002408:	400a      	ands	r2, r1
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800240e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002412:	f383 8810 	msr	PRIMASK, r3
}
 8002416:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002418:	f3ef 8310 	mrs	r3, PRIMASK
 800241c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800241e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002420:	677b      	str	r3, [r7, #116]	; 0x74
 8002422:	2301      	movs	r3, #1
 8002424:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002428:	f383 8810 	msr	PRIMASK, r3
}
 800242c:	46c0      	nop			; (mov r8, r8)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2101      	movs	r1, #1
 800243a:	438a      	bics	r2, r1
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002440:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002444:	f383 8810 	msr	PRIMASK, r3
}
 8002448:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800244a:	f3ef 8310 	mrs	r3, PRIMASK
 800244e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002450:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002452:	673b      	str	r3, [r7, #112]	; 0x70
 8002454:	2301      	movs	r3, #1
 8002456:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800245a:	f383 8810 	msr	PRIMASK, r3
}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2140      	movs	r1, #64	; 0x40
 800246c:	438a      	bics	r2, r1
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002472:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002476:	f383 8810 	msr	PRIMASK, r3
}
 800247a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	2120      	movs	r1, #32
 8002482:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800248a:	f3ef 8310 	mrs	r3, PRIMASK
 800248e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002490:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002492:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002494:	2301      	movs	r3, #1
 8002496:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800249a:	f383 8810 	msr	PRIMASK, r3
}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2110      	movs	r1, #16
 80024ac:	438a      	bics	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b6:	f383 8810 	msr	PRIMASK, r3
}
 80024ba:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c0:	0018      	movs	r0, r3
 80024c2:	f7fe fb79 	bl	8000bb8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2202      	movs	r2, #2
 80024ca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2258      	movs	r2, #88	; 0x58
 80024d0:	5a9a      	ldrh	r2, [r3, r2]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	215a      	movs	r1, #90	; 0x5a
 80024d6:	5a5b      	ldrh	r3, [r3, r1]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	b29a      	uxth	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0011      	movs	r1, r2
 80024e2:	0018      	movs	r0, r3
 80024e4:	f000 f8e0 	bl	80026a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80024e8:	e0c2      	b.n	8002670 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2258      	movs	r2, #88	; 0x58
 80024ee:	5a99      	ldrh	r1, [r3, r2]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	225a      	movs	r2, #90	; 0x5a
 80024f4:	5a9b      	ldrh	r3, [r3, r2]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	208e      	movs	r0, #142	; 0x8e
 80024fa:	183b      	adds	r3, r7, r0
 80024fc:	1a8a      	subs	r2, r1, r2
 80024fe:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	225a      	movs	r2, #90	; 0x5a
 8002504:	5a9b      	ldrh	r3, [r3, r2]
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d100      	bne.n	800250e <HAL_UART_IRQHandler+0x44a>
 800250c:	e0b2      	b.n	8002674 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800250e:	183b      	adds	r3, r7, r0
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d100      	bne.n	8002518 <HAL_UART_IRQHandler+0x454>
 8002516:	e0ad      	b.n	8002674 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002518:	f3ef 8310 	mrs	r3, PRIMASK
 800251c:	60fb      	str	r3, [r7, #12]
  return(result);
 800251e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002520:	2488      	movs	r4, #136	; 0x88
 8002522:	193a      	adds	r2, r7, r4
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	2301      	movs	r3, #1
 8002528:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	f383 8810 	msr	PRIMASK, r3
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4951      	ldr	r1, [pc, #324]	; (8002684 <HAL_UART_IRQHandler+0x5c0>)
 800253e:	400a      	ands	r2, r1
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	193b      	adds	r3, r7, r4
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f383 8810 	msr	PRIMASK, r3
}
 800254e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002550:	f3ef 8310 	mrs	r3, PRIMASK
 8002554:	61bb      	str	r3, [r7, #24]
  return(result);
 8002556:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002558:	2484      	movs	r4, #132	; 0x84
 800255a:	193a      	adds	r2, r7, r4
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	2301      	movs	r3, #1
 8002560:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f383 8810 	msr	PRIMASK, r3
}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2101      	movs	r1, #1
 8002576:	438a      	bics	r2, r1
 8002578:	609a      	str	r2, [r3, #8]
 800257a:	193b      	adds	r3, r7, r4
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	f383 8810 	msr	PRIMASK, r3
}
 8002586:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	2120      	movs	r1, #32
 800258e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800259c:	f3ef 8310 	mrs	r3, PRIMASK
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025a4:	2480      	movs	r4, #128	; 0x80
 80025a6:	193a      	adds	r2, r7, r4
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	2301      	movs	r3, #1
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b0:	f383 8810 	msr	PRIMASK, r3
}
 80025b4:	46c0      	nop			; (mov r8, r8)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2110      	movs	r1, #16
 80025c2:	438a      	bics	r2, r1
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	193b      	adds	r3, r7, r4
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ce:	f383 8810 	msr	PRIMASK, r3
}
 80025d2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025da:	183b      	adds	r3, r7, r0
 80025dc:	881a      	ldrh	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	0011      	movs	r1, r2
 80025e2:	0018      	movs	r0, r3
 80025e4:	f000 f860 	bl	80026a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80025e8:	e044      	b.n	8002674 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80025ea:	23a4      	movs	r3, #164	; 0xa4
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	035b      	lsls	r3, r3, #13
 80025f4:	4013      	ands	r3, r2
 80025f6:	d010      	beq.n	800261a <HAL_UART_IRQHandler+0x556>
 80025f8:	239c      	movs	r3, #156	; 0x9c
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	03db      	lsls	r3, r3, #15
 8002602:	4013      	ands	r3, r2
 8002604:	d009      	beq.n	800261a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2280      	movs	r2, #128	; 0x80
 800260c:	0352      	lsls	r2, r2, #13
 800260e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	0018      	movs	r0, r3
 8002614:	f000 fd44 	bl	80030a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002618:	e02f      	b.n	800267a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800261a:	23a4      	movs	r3, #164	; 0xa4
 800261c:	18fb      	adds	r3, r7, r3
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2280      	movs	r2, #128	; 0x80
 8002622:	4013      	ands	r3, r2
 8002624:	d00f      	beq.n	8002646 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002626:	23a0      	movs	r3, #160	; 0xa0
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2280      	movs	r2, #128	; 0x80
 800262e:	4013      	ands	r3, r2
 8002630:	d009      	beq.n	8002646 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d01e      	beq.n	8002678 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	0010      	movs	r0, r2
 8002642:	4798      	blx	r3
    }
    return;
 8002644:	e018      	b.n	8002678 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002646:	23a4      	movs	r3, #164	; 0xa4
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2240      	movs	r2, #64	; 0x40
 800264e:	4013      	ands	r3, r2
 8002650:	d013      	beq.n	800267a <HAL_UART_IRQHandler+0x5b6>
 8002652:	23a0      	movs	r3, #160	; 0xa0
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2240      	movs	r2, #64	; 0x40
 800265a:	4013      	ands	r3, r2
 800265c:	d00d      	beq.n	800267a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	0018      	movs	r0, r3
 8002662:	f000 fcf2 	bl	800304a <UART_EndTransmit_IT>
    return;
 8002666:	e008      	b.n	800267a <HAL_UART_IRQHandler+0x5b6>
      return;
 8002668:	46c0      	nop			; (mov r8, r8)
 800266a:	e006      	b.n	800267a <HAL_UART_IRQHandler+0x5b6>
    return;
 800266c:	46c0      	nop			; (mov r8, r8)
 800266e:	e004      	b.n	800267a <HAL_UART_IRQHandler+0x5b6>
      return;
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	e002      	b.n	800267a <HAL_UART_IRQHandler+0x5b6>
      return;
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	e000      	b.n	800267a <HAL_UART_IRQHandler+0x5b6>
    return;
 8002678:	46c0      	nop			; (mov r8, r8)
  }

}
 800267a:	46bd      	mov	sp, r7
 800267c:	b02b      	add	sp, #172	; 0xac
 800267e:	bd90      	pop	{r4, r7, pc}
 8002680:	fffffeff 	.word	0xfffffeff
 8002684:	fffffedf 	.word	0xfffffedf

08002688 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	b002      	add	sp, #8
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80026a0:	46c0      	nop			; (mov r8, r8)
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b002      	add	sp, #8
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	000a      	movs	r2, r1
 80026b2:	1cbb      	adds	r3, r7, #2
 80026b4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b002      	add	sp, #8
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c0:	b5b0      	push	{r4, r5, r7, lr}
 80026c2:	b08e      	sub	sp, #56	; 0x38
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026c8:	231a      	movs	r3, #26
 80026ca:	2218      	movs	r2, #24
 80026cc:	189b      	adds	r3, r3, r2
 80026ce:	19db      	adds	r3, r3, r7
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	431a      	orrs	r2, r3
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4ac6      	ldr	r2, [pc, #792]	; (8002a0c <UART_SetConfig+0x34c>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	0019      	movs	r1, r3
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026fe:	430a      	orrs	r2, r1
 8002700:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4ac1      	ldr	r2, [pc, #772]	; (8002a10 <UART_SetConfig+0x350>)
 800270a:	4013      	ands	r3, r2
 800270c:	0019      	movs	r1, r3
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4abb      	ldr	r2, [pc, #748]	; (8002a14 <UART_SetConfig+0x354>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d004      	beq.n	8002734 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002730:	4313      	orrs	r3, r2
 8002732:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	4ab7      	ldr	r2, [pc, #732]	; (8002a18 <UART_SetConfig+0x358>)
 800273c:	4013      	ands	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002746:	430a      	orrs	r2, r1
 8002748:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4ab3      	ldr	r2, [pc, #716]	; (8002a1c <UART_SetConfig+0x35c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d131      	bne.n	80027b8 <UART_SetConfig+0xf8>
 8002754:	4bb2      	ldr	r3, [pc, #712]	; (8002a20 <UART_SetConfig+0x360>)
 8002756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002758:	2203      	movs	r2, #3
 800275a:	4013      	ands	r3, r2
 800275c:	2b03      	cmp	r3, #3
 800275e:	d01d      	beq.n	800279c <UART_SetConfig+0xdc>
 8002760:	d823      	bhi.n	80027aa <UART_SetConfig+0xea>
 8002762:	2b02      	cmp	r3, #2
 8002764:	d00c      	beq.n	8002780 <UART_SetConfig+0xc0>
 8002766:	d820      	bhi.n	80027aa <UART_SetConfig+0xea>
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <UART_SetConfig+0xb2>
 800276c:	2b01      	cmp	r3, #1
 800276e:	d00e      	beq.n	800278e <UART_SetConfig+0xce>
 8002770:	e01b      	b.n	80027aa <UART_SetConfig+0xea>
 8002772:	231b      	movs	r3, #27
 8002774:	2218      	movs	r2, #24
 8002776:	189b      	adds	r3, r3, r2
 8002778:	19db      	adds	r3, r3, r7
 800277a:	2201      	movs	r2, #1
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	e09c      	b.n	80028ba <UART_SetConfig+0x1fa>
 8002780:	231b      	movs	r3, #27
 8002782:	2218      	movs	r2, #24
 8002784:	189b      	adds	r3, r3, r2
 8002786:	19db      	adds	r3, r3, r7
 8002788:	2202      	movs	r2, #2
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	e095      	b.n	80028ba <UART_SetConfig+0x1fa>
 800278e:	231b      	movs	r3, #27
 8002790:	2218      	movs	r2, #24
 8002792:	189b      	adds	r3, r3, r2
 8002794:	19db      	adds	r3, r3, r7
 8002796:	2204      	movs	r2, #4
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	e08e      	b.n	80028ba <UART_SetConfig+0x1fa>
 800279c:	231b      	movs	r3, #27
 800279e:	2218      	movs	r2, #24
 80027a0:	189b      	adds	r3, r3, r2
 80027a2:	19db      	adds	r3, r3, r7
 80027a4:	2208      	movs	r2, #8
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e087      	b.n	80028ba <UART_SetConfig+0x1fa>
 80027aa:	231b      	movs	r3, #27
 80027ac:	2218      	movs	r2, #24
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	19db      	adds	r3, r3, r7
 80027b2:	2210      	movs	r2, #16
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	e080      	b.n	80028ba <UART_SetConfig+0x1fa>
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a99      	ldr	r2, [pc, #612]	; (8002a24 <UART_SetConfig+0x364>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d131      	bne.n	8002826 <UART_SetConfig+0x166>
 80027c2:	4b97      	ldr	r3, [pc, #604]	; (8002a20 <UART_SetConfig+0x360>)
 80027c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c6:	220c      	movs	r2, #12
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b0c      	cmp	r3, #12
 80027cc:	d01d      	beq.n	800280a <UART_SetConfig+0x14a>
 80027ce:	d823      	bhi.n	8002818 <UART_SetConfig+0x158>
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d00c      	beq.n	80027ee <UART_SetConfig+0x12e>
 80027d4:	d820      	bhi.n	8002818 <UART_SetConfig+0x158>
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <UART_SetConfig+0x120>
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d00e      	beq.n	80027fc <UART_SetConfig+0x13c>
 80027de:	e01b      	b.n	8002818 <UART_SetConfig+0x158>
 80027e0:	231b      	movs	r3, #27
 80027e2:	2218      	movs	r2, #24
 80027e4:	189b      	adds	r3, r3, r2
 80027e6:	19db      	adds	r3, r3, r7
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
 80027ec:	e065      	b.n	80028ba <UART_SetConfig+0x1fa>
 80027ee:	231b      	movs	r3, #27
 80027f0:	2218      	movs	r2, #24
 80027f2:	189b      	adds	r3, r3, r2
 80027f4:	19db      	adds	r3, r3, r7
 80027f6:	2202      	movs	r2, #2
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	e05e      	b.n	80028ba <UART_SetConfig+0x1fa>
 80027fc:	231b      	movs	r3, #27
 80027fe:	2218      	movs	r2, #24
 8002800:	189b      	adds	r3, r3, r2
 8002802:	19db      	adds	r3, r3, r7
 8002804:	2204      	movs	r2, #4
 8002806:	701a      	strb	r2, [r3, #0]
 8002808:	e057      	b.n	80028ba <UART_SetConfig+0x1fa>
 800280a:	231b      	movs	r3, #27
 800280c:	2218      	movs	r2, #24
 800280e:	189b      	adds	r3, r3, r2
 8002810:	19db      	adds	r3, r3, r7
 8002812:	2208      	movs	r2, #8
 8002814:	701a      	strb	r2, [r3, #0]
 8002816:	e050      	b.n	80028ba <UART_SetConfig+0x1fa>
 8002818:	231b      	movs	r3, #27
 800281a:	2218      	movs	r2, #24
 800281c:	189b      	adds	r3, r3, r2
 800281e:	19db      	adds	r3, r3, r7
 8002820:	2210      	movs	r2, #16
 8002822:	701a      	strb	r2, [r3, #0]
 8002824:	e049      	b.n	80028ba <UART_SetConfig+0x1fa>
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a7a      	ldr	r2, [pc, #488]	; (8002a14 <UART_SetConfig+0x354>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d13e      	bne.n	80028ae <UART_SetConfig+0x1ee>
 8002830:	4b7b      	ldr	r3, [pc, #492]	; (8002a20 <UART_SetConfig+0x360>)
 8002832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002834:	23c0      	movs	r3, #192	; 0xc0
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	4013      	ands	r3, r2
 800283a:	22c0      	movs	r2, #192	; 0xc0
 800283c:	0112      	lsls	r2, r2, #4
 800283e:	4293      	cmp	r3, r2
 8002840:	d027      	beq.n	8002892 <UART_SetConfig+0x1d2>
 8002842:	22c0      	movs	r2, #192	; 0xc0
 8002844:	0112      	lsls	r2, r2, #4
 8002846:	4293      	cmp	r3, r2
 8002848:	d82a      	bhi.n	80028a0 <UART_SetConfig+0x1e0>
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	0112      	lsls	r2, r2, #4
 800284e:	4293      	cmp	r3, r2
 8002850:	d011      	beq.n	8002876 <UART_SetConfig+0x1b6>
 8002852:	2280      	movs	r2, #128	; 0x80
 8002854:	0112      	lsls	r2, r2, #4
 8002856:	4293      	cmp	r3, r2
 8002858:	d822      	bhi.n	80028a0 <UART_SetConfig+0x1e0>
 800285a:	2b00      	cmp	r3, #0
 800285c:	d004      	beq.n	8002868 <UART_SetConfig+0x1a8>
 800285e:	2280      	movs	r2, #128	; 0x80
 8002860:	00d2      	lsls	r2, r2, #3
 8002862:	4293      	cmp	r3, r2
 8002864:	d00e      	beq.n	8002884 <UART_SetConfig+0x1c4>
 8002866:	e01b      	b.n	80028a0 <UART_SetConfig+0x1e0>
 8002868:	231b      	movs	r3, #27
 800286a:	2218      	movs	r2, #24
 800286c:	189b      	adds	r3, r3, r2
 800286e:	19db      	adds	r3, r3, r7
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
 8002874:	e021      	b.n	80028ba <UART_SetConfig+0x1fa>
 8002876:	231b      	movs	r3, #27
 8002878:	2218      	movs	r2, #24
 800287a:	189b      	adds	r3, r3, r2
 800287c:	19db      	adds	r3, r3, r7
 800287e:	2202      	movs	r2, #2
 8002880:	701a      	strb	r2, [r3, #0]
 8002882:	e01a      	b.n	80028ba <UART_SetConfig+0x1fa>
 8002884:	231b      	movs	r3, #27
 8002886:	2218      	movs	r2, #24
 8002888:	189b      	adds	r3, r3, r2
 800288a:	19db      	adds	r3, r3, r7
 800288c:	2204      	movs	r2, #4
 800288e:	701a      	strb	r2, [r3, #0]
 8002890:	e013      	b.n	80028ba <UART_SetConfig+0x1fa>
 8002892:	231b      	movs	r3, #27
 8002894:	2218      	movs	r2, #24
 8002896:	189b      	adds	r3, r3, r2
 8002898:	19db      	adds	r3, r3, r7
 800289a:	2208      	movs	r2, #8
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	e00c      	b.n	80028ba <UART_SetConfig+0x1fa>
 80028a0:	231b      	movs	r3, #27
 80028a2:	2218      	movs	r2, #24
 80028a4:	189b      	adds	r3, r3, r2
 80028a6:	19db      	adds	r3, r3, r7
 80028a8:	2210      	movs	r2, #16
 80028aa:	701a      	strb	r2, [r3, #0]
 80028ac:	e005      	b.n	80028ba <UART_SetConfig+0x1fa>
 80028ae:	231b      	movs	r3, #27
 80028b0:	2218      	movs	r2, #24
 80028b2:	189b      	adds	r3, r3, r2
 80028b4:	19db      	adds	r3, r3, r7
 80028b6:	2210      	movs	r2, #16
 80028b8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a55      	ldr	r2, [pc, #340]	; (8002a14 <UART_SetConfig+0x354>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d000      	beq.n	80028c6 <UART_SetConfig+0x206>
 80028c4:	e084      	b.n	80029d0 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80028c6:	231b      	movs	r3, #27
 80028c8:	2218      	movs	r2, #24
 80028ca:	189b      	adds	r3, r3, r2
 80028cc:	19db      	adds	r3, r3, r7
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d01d      	beq.n	8002910 <UART_SetConfig+0x250>
 80028d4:	dc20      	bgt.n	8002918 <UART_SetConfig+0x258>
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d015      	beq.n	8002906 <UART_SetConfig+0x246>
 80028da:	dc1d      	bgt.n	8002918 <UART_SetConfig+0x258>
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <UART_SetConfig+0x226>
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d005      	beq.n	80028f0 <UART_SetConfig+0x230>
 80028e4:	e018      	b.n	8002918 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028e6:	f7ff f93f 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 80028ea:	0003      	movs	r3, r0
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028ee:	e01c      	b.n	800292a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028f0:	4b4b      	ldr	r3, [pc, #300]	; (8002a20 <UART_SetConfig+0x360>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2210      	movs	r2, #16
 80028f6:	4013      	ands	r3, r2
 80028f8:	d002      	beq.n	8002900 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80028fa:	4b4b      	ldr	r3, [pc, #300]	; (8002a28 <UART_SetConfig+0x368>)
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80028fe:	e014      	b.n	800292a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002900:	4b4a      	ldr	r3, [pc, #296]	; (8002a2c <UART_SetConfig+0x36c>)
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002904:	e011      	b.n	800292a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002906:	f7ff f87f 	bl	8001a08 <HAL_RCC_GetSysClockFreq>
 800290a:	0003      	movs	r3, r0
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800290e:	e00c      	b.n	800292a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002916:	e008      	b.n	800292a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800291c:	231a      	movs	r3, #26
 800291e:	2218      	movs	r2, #24
 8002920:	189b      	adds	r3, r3, r2
 8002922:	19db      	adds	r3, r3, r7
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
        break;
 8002928:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d100      	bne.n	8002932 <UART_SetConfig+0x272>
 8002930:	e132      	b.n	8002b98 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	0013      	movs	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	189b      	adds	r3, r3, r2
 800293c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800293e:	429a      	cmp	r2, r3
 8002940:	d305      	bcc.n	800294e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800294a:	429a      	cmp	r2, r3
 800294c:	d906      	bls.n	800295c <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800294e:	231a      	movs	r3, #26
 8002950:	2218      	movs	r2, #24
 8002952:	189b      	adds	r3, r3, r2
 8002954:	19db      	adds	r3, r3, r7
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	e11d      	b.n	8002b98 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	6939      	ldr	r1, [r7, #16]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	000b      	movs	r3, r1
 800296a:	0e1b      	lsrs	r3, r3, #24
 800296c:	0010      	movs	r0, r2
 800296e:	0205      	lsls	r5, r0, #8
 8002970:	431d      	orrs	r5, r3
 8002972:	000b      	movs	r3, r1
 8002974:	021c      	lsls	r4, r3, #8
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68b8      	ldr	r0, [r7, #8]
 8002984:	68f9      	ldr	r1, [r7, #12]
 8002986:	1900      	adds	r0, r0, r4
 8002988:	4169      	adcs	r1, r5
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	2300      	movs	r3, #0
 8002992:	607b      	str	r3, [r7, #4]
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f7fd fc42 	bl	8000220 <__aeabi_uldivmod>
 800299c:	0002      	movs	r2, r0
 800299e:	000b      	movs	r3, r1
 80029a0:	0013      	movs	r3, r2
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029a6:	23c0      	movs	r3, #192	; 0xc0
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d309      	bcc.n	80029c2 <UART_SetConfig+0x302>
 80029ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	035b      	lsls	r3, r3, #13
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d204      	bcs.n	80029c2 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029be:	60da      	str	r2, [r3, #12]
 80029c0:	e0ea      	b.n	8002b98 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80029c2:	231a      	movs	r3, #26
 80029c4:	2218      	movs	r2, #24
 80029c6:	189b      	adds	r3, r3, r2
 80029c8:	19db      	adds	r3, r3, r7
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	e0e3      	b.n	8002b98 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	69da      	ldr	r2, [r3, #28]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	429a      	cmp	r2, r3
 80029da:	d000      	beq.n	80029de <UART_SetConfig+0x31e>
 80029dc:	e085      	b.n	8002aea <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80029de:	231b      	movs	r3, #27
 80029e0:	2218      	movs	r2, #24
 80029e2:	189b      	adds	r3, r3, r2
 80029e4:	19db      	adds	r3, r3, r7
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d837      	bhi.n	8002a5c <UART_SetConfig+0x39c>
 80029ec:	009a      	lsls	r2, r3, #2
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <UART_SetConfig+0x370>)
 80029f0:	18d3      	adds	r3, r2, r3
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029f6:	f7ff f8b7 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 80029fa:	0003      	movs	r3, r0
 80029fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029fe:	e036      	b.n	8002a6e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a00:	f7ff f8c8 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 8002a04:	0003      	movs	r3, r0
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a08:	e031      	b.n	8002a6e <UART_SetConfig+0x3ae>
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	efff69f3 	.word	0xefff69f3
 8002a10:	ffffcfff 	.word	0xffffcfff
 8002a14:	40004800 	.word	0x40004800
 8002a18:	fffff4ff 	.word	0xfffff4ff
 8002a1c:	40013800 	.word	0x40013800
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40004400 	.word	0x40004400
 8002a28:	003d0900 	.word	0x003d0900
 8002a2c:	00f42400 	.word	0x00f42400
 8002a30:	08003ad4 	.word	0x08003ad4
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a34:	4b60      	ldr	r3, [pc, #384]	; (8002bb8 <UART_SetConfig+0x4f8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2210      	movs	r2, #16
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d002      	beq.n	8002a44 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002a3e:	4b5f      	ldr	r3, [pc, #380]	; (8002bbc <UART_SetConfig+0x4fc>)
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002a42:	e014      	b.n	8002a6e <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002a44:	4b5e      	ldr	r3, [pc, #376]	; (8002bc0 <UART_SetConfig+0x500>)
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a48:	e011      	b.n	8002a6e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a4a:	f7fe ffdd 	bl	8001a08 <HAL_RCC_GetSysClockFreq>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a52:	e00c      	b.n	8002a6e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a5a:	e008      	b.n	8002a6e <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002a60:	231a      	movs	r3, #26
 8002a62:	2218      	movs	r2, #24
 8002a64:	189b      	adds	r3, r3, r2
 8002a66:	19db      	adds	r3, r3, r7
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
        break;
 8002a6c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d100      	bne.n	8002a76 <UART_SetConfig+0x3b6>
 8002a74:	e090      	b.n	8002b98 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a78:	005a      	lsls	r2, r3, #1
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	085b      	lsrs	r3, r3, #1
 8002a80:	18d2      	adds	r2, r2, r3
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	0019      	movs	r1, r3
 8002a88:	0010      	movs	r0, r2
 8002a8a:	f7fd fb3d 	bl	8000108 <__udivsi3>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a94:	2b0f      	cmp	r3, #15
 8002a96:	d921      	bls.n	8002adc <UART_SetConfig+0x41c>
 8002a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	025b      	lsls	r3, r3, #9
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d21c      	bcs.n	8002adc <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	200e      	movs	r0, #14
 8002aa8:	2418      	movs	r4, #24
 8002aaa:	1903      	adds	r3, r0, r4
 8002aac:	19db      	adds	r3, r3, r7
 8002aae:	210f      	movs	r1, #15
 8002ab0:	438a      	bics	r2, r1
 8002ab2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab6:	085b      	lsrs	r3, r3, #1
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2207      	movs	r2, #7
 8002abc:	4013      	ands	r3, r2
 8002abe:	b299      	uxth	r1, r3
 8002ac0:	1903      	adds	r3, r0, r4
 8002ac2:	19db      	adds	r3, r3, r7
 8002ac4:	1902      	adds	r2, r0, r4
 8002ac6:	19d2      	adds	r2, r2, r7
 8002ac8:	8812      	ldrh	r2, [r2, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	1902      	adds	r2, r0, r4
 8002ad4:	19d2      	adds	r2, r2, r7
 8002ad6:	8812      	ldrh	r2, [r2, #0]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	e05d      	b.n	8002b98 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002adc:	231a      	movs	r3, #26
 8002ade:	2218      	movs	r2, #24
 8002ae0:	189b      	adds	r3, r3, r2
 8002ae2:	19db      	adds	r3, r3, r7
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e056      	b.n	8002b98 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002aea:	231b      	movs	r3, #27
 8002aec:	2218      	movs	r2, #24
 8002aee:	189b      	adds	r3, r3, r2
 8002af0:	19db      	adds	r3, r3, r7
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d822      	bhi.n	8002b3e <UART_SetConfig+0x47e>
 8002af8:	009a      	lsls	r2, r3, #2
 8002afa:	4b32      	ldr	r3, [pc, #200]	; (8002bc4 <UART_SetConfig+0x504>)
 8002afc:	18d3      	adds	r3, r2, r3
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b02:	f7ff f831 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8002b06:	0003      	movs	r3, r0
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b0a:	e021      	b.n	8002b50 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b0c:	f7ff f842 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 8002b10:	0003      	movs	r3, r0
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b14:	e01c      	b.n	8002b50 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b16:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <UART_SetConfig+0x4f8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2210      	movs	r2, #16
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d002      	beq.n	8002b26 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b20:	4b26      	ldr	r3, [pc, #152]	; (8002bbc <UART_SetConfig+0x4fc>)
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b24:	e014      	b.n	8002b50 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002b26:	4b26      	ldr	r3, [pc, #152]	; (8002bc0 <UART_SetConfig+0x500>)
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b2a:	e011      	b.n	8002b50 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b2c:	f7fe ff6c 	bl	8001a08 <HAL_RCC_GetSysClockFreq>
 8002b30:	0003      	movs	r3, r0
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b34:	e00c      	b.n	8002b50 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	021b      	lsls	r3, r3, #8
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b3c:	e008      	b.n	8002b50 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002b42:	231a      	movs	r3, #26
 8002b44:	2218      	movs	r2, #24
 8002b46:	189b      	adds	r3, r3, r2
 8002b48:	19db      	adds	r3, r3, r7
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	701a      	strb	r2, [r3, #0]
        break;
 8002b4e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d020      	beq.n	8002b98 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	085a      	lsrs	r2, r3, #1
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5e:	18d2      	adds	r2, r2, r3
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	0019      	movs	r1, r3
 8002b66:	0010      	movs	r0, r2
 8002b68:	f7fd face 	bl	8000108 <__udivsi3>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b72:	2b0f      	cmp	r3, #15
 8002b74:	d90a      	bls.n	8002b8c <UART_SetConfig+0x4cc>
 8002b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	025b      	lsls	r3, r3, #9
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d205      	bcs.n	8002b8c <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	e005      	b.n	8002b98 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002b8c:	231a      	movs	r3, #26
 8002b8e:	2218      	movs	r2, #24
 8002b90:	189b      	adds	r3, r3, r2
 8002b92:	19db      	adds	r3, r3, r7
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002ba4:	231a      	movs	r3, #26
 8002ba6:	2218      	movs	r2, #24
 8002ba8:	189b      	adds	r3, r3, r2
 8002baa:	19db      	adds	r3, r3, r7
 8002bac:	781b      	ldrb	r3, [r3, #0]
}
 8002bae:	0018      	movs	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b00e      	add	sp, #56	; 0x38
 8002bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	003d0900 	.word	0x003d0900
 8002bc0:	00f42400 	.word	0x00f42400
 8002bc4:	08003af8 	.word	0x08003af8

08002bc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d00b      	beq.n	8002bf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4a4a      	ldr	r2, [pc, #296]	; (8002d0c <UART_AdvFeatureConfig+0x144>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d00b      	beq.n	8002c14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4a43      	ldr	r2, [pc, #268]	; (8002d10 <UART_AdvFeatureConfig+0x148>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	0019      	movs	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	2204      	movs	r2, #4
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d00b      	beq.n	8002c36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4a3b      	ldr	r2, [pc, #236]	; (8002d14 <UART_AdvFeatureConfig+0x14c>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	0019      	movs	r1, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	2208      	movs	r2, #8
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d00b      	beq.n	8002c58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	4a34      	ldr	r2, [pc, #208]	; (8002d18 <UART_AdvFeatureConfig+0x150>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	2210      	movs	r2, #16
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d00b      	beq.n	8002c7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4a2c      	ldr	r2, [pc, #176]	; (8002d1c <UART_AdvFeatureConfig+0x154>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	0019      	movs	r1, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	2220      	movs	r2, #32
 8002c80:	4013      	ands	r3, r2
 8002c82:	d00b      	beq.n	8002c9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	4a25      	ldr	r2, [pc, #148]	; (8002d20 <UART_AdvFeatureConfig+0x158>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	0019      	movs	r1, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	2240      	movs	r2, #64	; 0x40
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d01d      	beq.n	8002ce2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4a1d      	ldr	r2, [pc, #116]	; (8002d24 <UART_AdvFeatureConfig+0x15c>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	035b      	lsls	r3, r3, #13
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d10b      	bne.n	8002ce2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4a15      	ldr	r2, [pc, #84]	; (8002d28 <UART_AdvFeatureConfig+0x160>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	2280      	movs	r2, #128	; 0x80
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d00b      	beq.n	8002d04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4a0e      	ldr	r2, [pc, #56]	; (8002d2c <UART_AdvFeatureConfig+0x164>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]
  }
}
 8002d04:	46c0      	nop			; (mov r8, r8)
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b002      	add	sp, #8
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	fffdffff 	.word	0xfffdffff
 8002d10:	fffeffff 	.word	0xfffeffff
 8002d14:	fffbffff 	.word	0xfffbffff
 8002d18:	ffff7fff 	.word	0xffff7fff
 8002d1c:	ffffefff 	.word	0xffffefff
 8002d20:	ffffdfff 	.word	0xffffdfff
 8002d24:	ffefffff 	.word	0xffefffff
 8002d28:	ff9fffff 	.word	0xff9fffff
 8002d2c:	fff7ffff 	.word	0xfff7ffff

08002d30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b092      	sub	sp, #72	; 0x48
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2284      	movs	r2, #132	; 0x84
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d40:	f7fd fe52 	bl	80009e8 <HAL_GetTick>
 8002d44:	0003      	movs	r3, r0
 8002d46:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2208      	movs	r2, #8
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d12c      	bne.n	8002db0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d58:	2280      	movs	r2, #128	; 0x80
 8002d5a:	0391      	lsls	r1, r2, #14
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4a46      	ldr	r2, [pc, #280]	; (8002e78 <UART_CheckIdleState+0x148>)
 8002d60:	9200      	str	r2, [sp, #0]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f000 f88c 	bl	8002e80 <UART_WaitOnFlagUntilTimeout>
 8002d68:	1e03      	subs	r3, r0, #0
 8002d6a:	d021      	beq.n	8002db0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d74:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d76:	2301      	movs	r3, #1
 8002d78:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	f383 8810 	msr	PRIMASK, r3
}
 8002d80:	46c0      	nop			; (mov r8, r8)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2180      	movs	r1, #128	; 0x80
 8002d8e:	438a      	bics	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d98:	f383 8810 	msr	PRIMASK, r3
}
 8002d9c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2220      	movs	r2, #32
 8002da2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2278      	movs	r2, #120	; 0x78
 8002da8:	2100      	movs	r1, #0
 8002daa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e05f      	b.n	8002e70 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2204      	movs	r2, #4
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d146      	bne.n	8002e4c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc0:	2280      	movs	r2, #128	; 0x80
 8002dc2:	03d1      	lsls	r1, r2, #15
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4a2c      	ldr	r2, [pc, #176]	; (8002e78 <UART_CheckIdleState+0x148>)
 8002dc8:	9200      	str	r2, [sp, #0]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f000 f858 	bl	8002e80 <UART_WaitOnFlagUntilTimeout>
 8002dd0:	1e03      	subs	r3, r0, #0
 8002dd2:	d03b      	beq.n	8002e4c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002dda:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8002dde:	2301      	movs	r3, #1
 8002de0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f383 8810 	msr	PRIMASK, r3
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4921      	ldr	r1, [pc, #132]	; (8002e7c <UART_CheckIdleState+0x14c>)
 8002df6:	400a      	ands	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f383 8810 	msr	PRIMASK, r3
}
 8002e04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e06:	f3ef 8310 	mrs	r3, PRIMASK
 8002e0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e0c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8002e10:	2301      	movs	r3, #1
 8002e12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f383 8810 	msr	PRIMASK, r3
}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2101      	movs	r1, #1
 8002e28:	438a      	bics	r2, r1
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	f383 8810 	msr	PRIMASK, r3
}
 8002e36:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2280      	movs	r2, #128	; 0x80
 8002e3c:	2120      	movs	r1, #32
 8002e3e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2278      	movs	r2, #120	; 0x78
 8002e44:	2100      	movs	r1, #0
 8002e46:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e011      	b.n	8002e70 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2280      	movs	r2, #128	; 0x80
 8002e56:	2120      	movs	r1, #32
 8002e58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2278      	movs	r2, #120	; 0x78
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b010      	add	sp, #64	; 0x40
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	01ffffff 	.word	0x01ffffff
 8002e7c:	fffffedf 	.word	0xfffffedf

08002e80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	1dfb      	adds	r3, r7, #7
 8002e8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e90:	e04b      	b.n	8002f2a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	3301      	adds	r3, #1
 8002e96:	d048      	beq.n	8002f2a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e98:	f7fd fda6 	bl	80009e8 <HAL_GetTick>
 8002e9c:	0002      	movs	r2, r0
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d302      	bcc.n	8002eae <UART_WaitOnFlagUntilTimeout+0x2e>
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e04b      	b.n	8002f4a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2204      	movs	r2, #4
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d035      	beq.n	8002f2a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d111      	bne.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2208      	movs	r2, #8
 8002ed2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f000 f83c 	bl	8002f54 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2284      	movs	r2, #132	; 0x84
 8002ee0:	2108      	movs	r1, #8
 8002ee2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2278      	movs	r2, #120	; 0x78
 8002ee8:	2100      	movs	r1, #0
 8002eea:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e02c      	b.n	8002f4a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	401a      	ands	r2, r3
 8002efc:	2380      	movs	r3, #128	; 0x80
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d112      	bne.n	8002f2a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2280      	movs	r2, #128	; 0x80
 8002f0a:	0112      	lsls	r2, r2, #4
 8002f0c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f000 f81f 	bl	8002f54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2284      	movs	r2, #132	; 0x84
 8002f1a:	2120      	movs	r1, #32
 8002f1c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2278      	movs	r2, #120	; 0x78
 8002f22:	2100      	movs	r1, #0
 8002f24:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e00f      	b.n	8002f4a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	4013      	ands	r3, r2
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	425a      	negs	r2, r3
 8002f3a:	4153      	adcs	r3, r2
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	001a      	movs	r2, r3
 8002f40:	1dfb      	adds	r3, r7, #7
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d0a4      	beq.n	8002e92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b004      	add	sp, #16
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08e      	sub	sp, #56	; 0x38
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f60:	617b      	str	r3, [r7, #20]
  return(result);
 8002f62:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f64:	637b      	str	r3, [r7, #52]	; 0x34
 8002f66:	2301      	movs	r3, #1
 8002f68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f383 8810 	msr	PRIMASK, r3
}
 8002f70:	46c0      	nop			; (mov r8, r8)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4926      	ldr	r1, [pc, #152]	; (8003018 <UART_EndRxTransfer+0xc4>)
 8002f7e:	400a      	ands	r2, r1
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f383 8810 	msr	PRIMASK, r3
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f92:	623b      	str	r3, [r7, #32]
  return(result);
 8002f94:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f96:	633b      	str	r3, [r7, #48]	; 0x30
 8002f98:	2301      	movs	r3, #1
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	f383 8810 	msr	PRIMASK, r3
}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2101      	movs	r1, #1
 8002fb0:	438a      	bics	r2, r1
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fba:	f383 8810 	msr	PRIMASK, r3
}
 8002fbe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d118      	bne.n	8002ffa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8002fcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f383 8810 	msr	PRIMASK, r3
}
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2110      	movs	r1, #16
 8002fea:	438a      	bics	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f383 8810 	msr	PRIMASK, r3
}
 8002ff8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2280      	movs	r2, #128	; 0x80
 8002ffe:	2120      	movs	r1, #32
 8003000:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	46bd      	mov	sp, r7
 8003012:	b00e      	add	sp, #56	; 0x38
 8003014:	bd80      	pop	{r7, pc}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	fffffedf 	.word	0xfffffedf

0800301c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	225a      	movs	r2, #90	; 0x5a
 800302e:	2100      	movs	r1, #0
 8003030:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2252      	movs	r2, #82	; 0x52
 8003036:	2100      	movs	r1, #0
 8003038:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	0018      	movs	r0, r3
 800303e:	f7ff fb2b 	bl	8002698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	46bd      	mov	sp, r7
 8003046:	b004      	add	sp, #16
 8003048:	bd80      	pop	{r7, pc}

0800304a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b086      	sub	sp, #24
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003052:	f3ef 8310 	mrs	r3, PRIMASK
 8003056:	60bb      	str	r3, [r7, #8]
  return(result);
 8003058:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	2301      	movs	r3, #1
 800305e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f383 8810 	msr	PRIMASK, r3
}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2140      	movs	r1, #64	; 0x40
 8003074:	438a      	bics	r2, r1
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f383 8810 	msr	PRIMASK, r3
}
 8003082:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2220      	movs	r2, #32
 8003088:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	0018      	movs	r0, r3
 8003094:	f7ff faf8 	bl	8002688 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003098:	46c0      	nop			; (mov r8, r8)
 800309a:	46bd      	mov	sp, r7
 800309c:	b006      	add	sp, #24
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b002      	add	sp, #8
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <std>:
 80030b0:	2300      	movs	r3, #0
 80030b2:	b510      	push	{r4, lr}
 80030b4:	0004      	movs	r4, r0
 80030b6:	6003      	str	r3, [r0, #0]
 80030b8:	6043      	str	r3, [r0, #4]
 80030ba:	6083      	str	r3, [r0, #8]
 80030bc:	8181      	strh	r1, [r0, #12]
 80030be:	6643      	str	r3, [r0, #100]	; 0x64
 80030c0:	81c2      	strh	r2, [r0, #14]
 80030c2:	6103      	str	r3, [r0, #16]
 80030c4:	6143      	str	r3, [r0, #20]
 80030c6:	6183      	str	r3, [r0, #24]
 80030c8:	0019      	movs	r1, r3
 80030ca:	2208      	movs	r2, #8
 80030cc:	305c      	adds	r0, #92	; 0x5c
 80030ce:	f000 fa05 	bl	80034dc <memset>
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <std+0x50>)
 80030d4:	6224      	str	r4, [r4, #32]
 80030d6:	6263      	str	r3, [r4, #36]	; 0x24
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <std+0x54>)
 80030da:	62a3      	str	r3, [r4, #40]	; 0x28
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <std+0x58>)
 80030de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030e0:	4b0a      	ldr	r3, [pc, #40]	; (800310c <std+0x5c>)
 80030e2:	6323      	str	r3, [r4, #48]	; 0x30
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <std+0x60>)
 80030e6:	429c      	cmp	r4, r3
 80030e8:	d005      	beq.n	80030f6 <std+0x46>
 80030ea:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <std+0x64>)
 80030ec:	429c      	cmp	r4, r3
 80030ee:	d002      	beq.n	80030f6 <std+0x46>
 80030f0:	4b09      	ldr	r3, [pc, #36]	; (8003118 <std+0x68>)
 80030f2:	429c      	cmp	r4, r3
 80030f4:	d103      	bne.n	80030fe <std+0x4e>
 80030f6:	0020      	movs	r0, r4
 80030f8:	3058      	adds	r0, #88	; 0x58
 80030fa:	f000 fa6f 	bl	80035dc <__retarget_lock_init_recursive>
 80030fe:	bd10      	pop	{r4, pc}
 8003100:	080032f9 	.word	0x080032f9
 8003104:	08003321 	.word	0x08003321
 8003108:	08003359 	.word	0x08003359
 800310c:	08003385 	.word	0x08003385
 8003110:	20000114 	.word	0x20000114
 8003114:	2000017c 	.word	0x2000017c
 8003118:	200001e4 	.word	0x200001e4

0800311c <stdio_exit_handler>:
 800311c:	b510      	push	{r4, lr}
 800311e:	4a03      	ldr	r2, [pc, #12]	; (800312c <stdio_exit_handler+0x10>)
 8003120:	4903      	ldr	r1, [pc, #12]	; (8003130 <stdio_exit_handler+0x14>)
 8003122:	4804      	ldr	r0, [pc, #16]	; (8003134 <stdio_exit_handler+0x18>)
 8003124:	f000 f86c 	bl	8003200 <_fwalk_sglue>
 8003128:	bd10      	pop	{r4, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	2000000c 	.word	0x2000000c
 8003130:	080038f5 	.word	0x080038f5
 8003134:	20000018 	.word	0x20000018

08003138 <cleanup_stdio>:
 8003138:	6841      	ldr	r1, [r0, #4]
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <cleanup_stdio+0x30>)
 800313c:	b510      	push	{r4, lr}
 800313e:	0004      	movs	r4, r0
 8003140:	4299      	cmp	r1, r3
 8003142:	d001      	beq.n	8003148 <cleanup_stdio+0x10>
 8003144:	f000 fbd6 	bl	80038f4 <_fflush_r>
 8003148:	68a1      	ldr	r1, [r4, #8]
 800314a:	4b08      	ldr	r3, [pc, #32]	; (800316c <cleanup_stdio+0x34>)
 800314c:	4299      	cmp	r1, r3
 800314e:	d002      	beq.n	8003156 <cleanup_stdio+0x1e>
 8003150:	0020      	movs	r0, r4
 8003152:	f000 fbcf 	bl	80038f4 <_fflush_r>
 8003156:	68e1      	ldr	r1, [r4, #12]
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <cleanup_stdio+0x38>)
 800315a:	4299      	cmp	r1, r3
 800315c:	d002      	beq.n	8003164 <cleanup_stdio+0x2c>
 800315e:	0020      	movs	r0, r4
 8003160:	f000 fbc8 	bl	80038f4 <_fflush_r>
 8003164:	bd10      	pop	{r4, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	20000114 	.word	0x20000114
 800316c:	2000017c 	.word	0x2000017c
 8003170:	200001e4 	.word	0x200001e4

08003174 <global_stdio_init.part.0>:
 8003174:	b510      	push	{r4, lr}
 8003176:	4b09      	ldr	r3, [pc, #36]	; (800319c <global_stdio_init.part.0+0x28>)
 8003178:	4a09      	ldr	r2, [pc, #36]	; (80031a0 <global_stdio_init.part.0+0x2c>)
 800317a:	2104      	movs	r1, #4
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	4809      	ldr	r0, [pc, #36]	; (80031a4 <global_stdio_init.part.0+0x30>)
 8003180:	2200      	movs	r2, #0
 8003182:	f7ff ff95 	bl	80030b0 <std>
 8003186:	2201      	movs	r2, #1
 8003188:	2109      	movs	r1, #9
 800318a:	4807      	ldr	r0, [pc, #28]	; (80031a8 <global_stdio_init.part.0+0x34>)
 800318c:	f7ff ff90 	bl	80030b0 <std>
 8003190:	2202      	movs	r2, #2
 8003192:	2112      	movs	r1, #18
 8003194:	4805      	ldr	r0, [pc, #20]	; (80031ac <global_stdio_init.part.0+0x38>)
 8003196:	f7ff ff8b 	bl	80030b0 <std>
 800319a:	bd10      	pop	{r4, pc}
 800319c:	2000024c 	.word	0x2000024c
 80031a0:	0800311d 	.word	0x0800311d
 80031a4:	20000114 	.word	0x20000114
 80031a8:	2000017c 	.word	0x2000017c
 80031ac:	200001e4 	.word	0x200001e4

080031b0 <__sfp_lock_acquire>:
 80031b0:	b510      	push	{r4, lr}
 80031b2:	4802      	ldr	r0, [pc, #8]	; (80031bc <__sfp_lock_acquire+0xc>)
 80031b4:	f000 fa13 	bl	80035de <__retarget_lock_acquire_recursive>
 80031b8:	bd10      	pop	{r4, pc}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	20000255 	.word	0x20000255

080031c0 <__sfp_lock_release>:
 80031c0:	b510      	push	{r4, lr}
 80031c2:	4802      	ldr	r0, [pc, #8]	; (80031cc <__sfp_lock_release+0xc>)
 80031c4:	f000 fa0c 	bl	80035e0 <__retarget_lock_release_recursive>
 80031c8:	bd10      	pop	{r4, pc}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	20000255 	.word	0x20000255

080031d0 <__sinit>:
 80031d0:	b510      	push	{r4, lr}
 80031d2:	0004      	movs	r4, r0
 80031d4:	f7ff ffec 	bl	80031b0 <__sfp_lock_acquire>
 80031d8:	6a23      	ldr	r3, [r4, #32]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <__sinit+0x14>
 80031de:	f7ff ffef 	bl	80031c0 <__sfp_lock_release>
 80031e2:	bd10      	pop	{r4, pc}
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <__sinit+0x28>)
 80031e6:	6223      	str	r3, [r4, #32]
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <__sinit+0x2c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f6      	bne.n	80031de <__sinit+0xe>
 80031f0:	f7ff ffc0 	bl	8003174 <global_stdio_init.part.0>
 80031f4:	e7f3      	b.n	80031de <__sinit+0xe>
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	08003139 	.word	0x08003139
 80031fc:	2000024c 	.word	0x2000024c

08003200 <_fwalk_sglue>:
 8003200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003202:	0014      	movs	r4, r2
 8003204:	2600      	movs	r6, #0
 8003206:	9000      	str	r0, [sp, #0]
 8003208:	9101      	str	r1, [sp, #4]
 800320a:	68a5      	ldr	r5, [r4, #8]
 800320c:	6867      	ldr	r7, [r4, #4]
 800320e:	3f01      	subs	r7, #1
 8003210:	d504      	bpl.n	800321c <_fwalk_sglue+0x1c>
 8003212:	6824      	ldr	r4, [r4, #0]
 8003214:	2c00      	cmp	r4, #0
 8003216:	d1f8      	bne.n	800320a <_fwalk_sglue+0xa>
 8003218:	0030      	movs	r0, r6
 800321a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800321c:	89ab      	ldrh	r3, [r5, #12]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d908      	bls.n	8003234 <_fwalk_sglue+0x34>
 8003222:	220e      	movs	r2, #14
 8003224:	5eab      	ldrsh	r3, [r5, r2]
 8003226:	3301      	adds	r3, #1
 8003228:	d004      	beq.n	8003234 <_fwalk_sglue+0x34>
 800322a:	0029      	movs	r1, r5
 800322c:	9800      	ldr	r0, [sp, #0]
 800322e:	9b01      	ldr	r3, [sp, #4]
 8003230:	4798      	blx	r3
 8003232:	4306      	orrs	r6, r0
 8003234:	3568      	adds	r5, #104	; 0x68
 8003236:	e7ea      	b.n	800320e <_fwalk_sglue+0xe>

08003238 <_puts_r>:
 8003238:	6a03      	ldr	r3, [r0, #32]
 800323a:	b570      	push	{r4, r5, r6, lr}
 800323c:	0005      	movs	r5, r0
 800323e:	000e      	movs	r6, r1
 8003240:	6884      	ldr	r4, [r0, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <_puts_r+0x12>
 8003246:	f7ff ffc3 	bl	80031d0 <__sinit>
 800324a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800324c:	07db      	lsls	r3, r3, #31
 800324e:	d405      	bmi.n	800325c <_puts_r+0x24>
 8003250:	89a3      	ldrh	r3, [r4, #12]
 8003252:	059b      	lsls	r3, r3, #22
 8003254:	d402      	bmi.n	800325c <_puts_r+0x24>
 8003256:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003258:	f000 f9c1 	bl	80035de <__retarget_lock_acquire_recursive>
 800325c:	89a3      	ldrh	r3, [r4, #12]
 800325e:	071b      	lsls	r3, r3, #28
 8003260:	d502      	bpl.n	8003268 <_puts_r+0x30>
 8003262:	6923      	ldr	r3, [r4, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d11f      	bne.n	80032a8 <_puts_r+0x70>
 8003268:	0021      	movs	r1, r4
 800326a:	0028      	movs	r0, r5
 800326c:	f000 f8d2 	bl	8003414 <__swsetup_r>
 8003270:	2800      	cmp	r0, #0
 8003272:	d019      	beq.n	80032a8 <_puts_r+0x70>
 8003274:	2501      	movs	r5, #1
 8003276:	426d      	negs	r5, r5
 8003278:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800327a:	07db      	lsls	r3, r3, #31
 800327c:	d405      	bmi.n	800328a <_puts_r+0x52>
 800327e:	89a3      	ldrh	r3, [r4, #12]
 8003280:	059b      	lsls	r3, r3, #22
 8003282:	d402      	bmi.n	800328a <_puts_r+0x52>
 8003284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003286:	f000 f9ab 	bl	80035e0 <__retarget_lock_release_recursive>
 800328a:	0028      	movs	r0, r5
 800328c:	bd70      	pop	{r4, r5, r6, pc}
 800328e:	3601      	adds	r6, #1
 8003290:	60a3      	str	r3, [r4, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	da04      	bge.n	80032a0 <_puts_r+0x68>
 8003296:	69a2      	ldr	r2, [r4, #24]
 8003298:	429a      	cmp	r2, r3
 800329a:	dc16      	bgt.n	80032ca <_puts_r+0x92>
 800329c:	290a      	cmp	r1, #10
 800329e:	d014      	beq.n	80032ca <_puts_r+0x92>
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	6022      	str	r2, [r4, #0]
 80032a6:	7019      	strb	r1, [r3, #0]
 80032a8:	68a3      	ldr	r3, [r4, #8]
 80032aa:	7831      	ldrb	r1, [r6, #0]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	2900      	cmp	r1, #0
 80032b0:	d1ed      	bne.n	800328e <_puts_r+0x56>
 80032b2:	60a3      	str	r3, [r4, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	da0f      	bge.n	80032d8 <_puts_r+0xa0>
 80032b8:	0028      	movs	r0, r5
 80032ba:	0022      	movs	r2, r4
 80032bc:	310a      	adds	r1, #10
 80032be:	f000 f867 	bl	8003390 <__swbuf_r>
 80032c2:	250a      	movs	r5, #10
 80032c4:	3001      	adds	r0, #1
 80032c6:	d1d7      	bne.n	8003278 <_puts_r+0x40>
 80032c8:	e7d4      	b.n	8003274 <_puts_r+0x3c>
 80032ca:	0022      	movs	r2, r4
 80032cc:	0028      	movs	r0, r5
 80032ce:	f000 f85f 	bl	8003390 <__swbuf_r>
 80032d2:	3001      	adds	r0, #1
 80032d4:	d1e8      	bne.n	80032a8 <_puts_r+0x70>
 80032d6:	e7cd      	b.n	8003274 <_puts_r+0x3c>
 80032d8:	250a      	movs	r5, #10
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	6022      	str	r2, [r4, #0]
 80032e0:	701d      	strb	r5, [r3, #0]
 80032e2:	e7c9      	b.n	8003278 <_puts_r+0x40>

080032e4 <puts>:
 80032e4:	b510      	push	{r4, lr}
 80032e6:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <puts+0x10>)
 80032e8:	0001      	movs	r1, r0
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	f7ff ffa4 	bl	8003238 <_puts_r>
 80032f0:	bd10      	pop	{r4, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	20000064 	.word	0x20000064

080032f8 <__sread>:
 80032f8:	b570      	push	{r4, r5, r6, lr}
 80032fa:	000c      	movs	r4, r1
 80032fc:	250e      	movs	r5, #14
 80032fe:	5f49      	ldrsh	r1, [r1, r5]
 8003300:	f000 f91a 	bl	8003538 <_read_r>
 8003304:	2800      	cmp	r0, #0
 8003306:	db03      	blt.n	8003310 <__sread+0x18>
 8003308:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800330a:	181b      	adds	r3, r3, r0
 800330c:	6563      	str	r3, [r4, #84]	; 0x54
 800330e:	bd70      	pop	{r4, r5, r6, pc}
 8003310:	89a3      	ldrh	r3, [r4, #12]
 8003312:	4a02      	ldr	r2, [pc, #8]	; (800331c <__sread+0x24>)
 8003314:	4013      	ands	r3, r2
 8003316:	81a3      	strh	r3, [r4, #12]
 8003318:	e7f9      	b.n	800330e <__sread+0x16>
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	ffffefff 	.word	0xffffefff

08003320 <__swrite>:
 8003320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003322:	001f      	movs	r7, r3
 8003324:	898b      	ldrh	r3, [r1, #12]
 8003326:	0005      	movs	r5, r0
 8003328:	000c      	movs	r4, r1
 800332a:	0016      	movs	r6, r2
 800332c:	05db      	lsls	r3, r3, #23
 800332e:	d505      	bpl.n	800333c <__swrite+0x1c>
 8003330:	230e      	movs	r3, #14
 8003332:	5ec9      	ldrsh	r1, [r1, r3]
 8003334:	2200      	movs	r2, #0
 8003336:	2302      	movs	r3, #2
 8003338:	f000 f8ea 	bl	8003510 <_lseek_r>
 800333c:	89a3      	ldrh	r3, [r4, #12]
 800333e:	4a05      	ldr	r2, [pc, #20]	; (8003354 <__swrite+0x34>)
 8003340:	0028      	movs	r0, r5
 8003342:	4013      	ands	r3, r2
 8003344:	81a3      	strh	r3, [r4, #12]
 8003346:	0032      	movs	r2, r6
 8003348:	230e      	movs	r3, #14
 800334a:	5ee1      	ldrsh	r1, [r4, r3]
 800334c:	003b      	movs	r3, r7
 800334e:	f000 f907 	bl	8003560 <_write_r>
 8003352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003354:	ffffefff 	.word	0xffffefff

08003358 <__sseek>:
 8003358:	b570      	push	{r4, r5, r6, lr}
 800335a:	000c      	movs	r4, r1
 800335c:	250e      	movs	r5, #14
 800335e:	5f49      	ldrsh	r1, [r1, r5]
 8003360:	f000 f8d6 	bl	8003510 <_lseek_r>
 8003364:	89a3      	ldrh	r3, [r4, #12]
 8003366:	1c42      	adds	r2, r0, #1
 8003368:	d103      	bne.n	8003372 <__sseek+0x1a>
 800336a:	4a05      	ldr	r2, [pc, #20]	; (8003380 <__sseek+0x28>)
 800336c:	4013      	ands	r3, r2
 800336e:	81a3      	strh	r3, [r4, #12]
 8003370:	bd70      	pop	{r4, r5, r6, pc}
 8003372:	2280      	movs	r2, #128	; 0x80
 8003374:	0152      	lsls	r2, r2, #5
 8003376:	4313      	orrs	r3, r2
 8003378:	81a3      	strh	r3, [r4, #12]
 800337a:	6560      	str	r0, [r4, #84]	; 0x54
 800337c:	e7f8      	b.n	8003370 <__sseek+0x18>
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	ffffefff 	.word	0xffffefff

08003384 <__sclose>:
 8003384:	b510      	push	{r4, lr}
 8003386:	230e      	movs	r3, #14
 8003388:	5ec9      	ldrsh	r1, [r1, r3]
 800338a:	f000 f8af 	bl	80034ec <_close_r>
 800338e:	bd10      	pop	{r4, pc}

08003390 <__swbuf_r>:
 8003390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003392:	0006      	movs	r6, r0
 8003394:	000d      	movs	r5, r1
 8003396:	0014      	movs	r4, r2
 8003398:	2800      	cmp	r0, #0
 800339a:	d004      	beq.n	80033a6 <__swbuf_r+0x16>
 800339c:	6a03      	ldr	r3, [r0, #32]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <__swbuf_r+0x16>
 80033a2:	f7ff ff15 	bl	80031d0 <__sinit>
 80033a6:	69a3      	ldr	r3, [r4, #24]
 80033a8:	60a3      	str	r3, [r4, #8]
 80033aa:	89a3      	ldrh	r3, [r4, #12]
 80033ac:	071b      	lsls	r3, r3, #28
 80033ae:	d528      	bpl.n	8003402 <__swbuf_r+0x72>
 80033b0:	6923      	ldr	r3, [r4, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d025      	beq.n	8003402 <__swbuf_r+0x72>
 80033b6:	6923      	ldr	r3, [r4, #16]
 80033b8:	6820      	ldr	r0, [r4, #0]
 80033ba:	b2ef      	uxtb	r7, r5
 80033bc:	1ac0      	subs	r0, r0, r3
 80033be:	6963      	ldr	r3, [r4, #20]
 80033c0:	b2ed      	uxtb	r5, r5
 80033c2:	4283      	cmp	r3, r0
 80033c4:	dc05      	bgt.n	80033d2 <__swbuf_r+0x42>
 80033c6:	0021      	movs	r1, r4
 80033c8:	0030      	movs	r0, r6
 80033ca:	f000 fa93 	bl	80038f4 <_fflush_r>
 80033ce:	2800      	cmp	r0, #0
 80033d0:	d11d      	bne.n	800340e <__swbuf_r+0x7e>
 80033d2:	68a3      	ldr	r3, [r4, #8]
 80033d4:	3001      	adds	r0, #1
 80033d6:	3b01      	subs	r3, #1
 80033d8:	60a3      	str	r3, [r4, #8]
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	6022      	str	r2, [r4, #0]
 80033e0:	701f      	strb	r7, [r3, #0]
 80033e2:	6963      	ldr	r3, [r4, #20]
 80033e4:	4283      	cmp	r3, r0
 80033e6:	d004      	beq.n	80033f2 <__swbuf_r+0x62>
 80033e8:	89a3      	ldrh	r3, [r4, #12]
 80033ea:	07db      	lsls	r3, r3, #31
 80033ec:	d507      	bpl.n	80033fe <__swbuf_r+0x6e>
 80033ee:	2d0a      	cmp	r5, #10
 80033f0:	d105      	bne.n	80033fe <__swbuf_r+0x6e>
 80033f2:	0021      	movs	r1, r4
 80033f4:	0030      	movs	r0, r6
 80033f6:	f000 fa7d 	bl	80038f4 <_fflush_r>
 80033fa:	2800      	cmp	r0, #0
 80033fc:	d107      	bne.n	800340e <__swbuf_r+0x7e>
 80033fe:	0028      	movs	r0, r5
 8003400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003402:	0021      	movs	r1, r4
 8003404:	0030      	movs	r0, r6
 8003406:	f000 f805 	bl	8003414 <__swsetup_r>
 800340a:	2800      	cmp	r0, #0
 800340c:	d0d3      	beq.n	80033b6 <__swbuf_r+0x26>
 800340e:	2501      	movs	r5, #1
 8003410:	426d      	negs	r5, r5
 8003412:	e7f4      	b.n	80033fe <__swbuf_r+0x6e>

08003414 <__swsetup_r>:
 8003414:	4b30      	ldr	r3, [pc, #192]	; (80034d8 <__swsetup_r+0xc4>)
 8003416:	b570      	push	{r4, r5, r6, lr}
 8003418:	0005      	movs	r5, r0
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	000c      	movs	r4, r1
 800341e:	2800      	cmp	r0, #0
 8003420:	d004      	beq.n	800342c <__swsetup_r+0x18>
 8003422:	6a03      	ldr	r3, [r0, #32]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <__swsetup_r+0x18>
 8003428:	f7ff fed2 	bl	80031d0 <__sinit>
 800342c:	230c      	movs	r3, #12
 800342e:	5ee2      	ldrsh	r2, [r4, r3]
 8003430:	b293      	uxth	r3, r2
 8003432:	0711      	lsls	r1, r2, #28
 8003434:	d423      	bmi.n	800347e <__swsetup_r+0x6a>
 8003436:	06d9      	lsls	r1, r3, #27
 8003438:	d407      	bmi.n	800344a <__swsetup_r+0x36>
 800343a:	2309      	movs	r3, #9
 800343c:	2001      	movs	r0, #1
 800343e:	602b      	str	r3, [r5, #0]
 8003440:	3337      	adds	r3, #55	; 0x37
 8003442:	4313      	orrs	r3, r2
 8003444:	81a3      	strh	r3, [r4, #12]
 8003446:	4240      	negs	r0, r0
 8003448:	bd70      	pop	{r4, r5, r6, pc}
 800344a:	075b      	lsls	r3, r3, #29
 800344c:	d513      	bpl.n	8003476 <__swsetup_r+0x62>
 800344e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003450:	2900      	cmp	r1, #0
 8003452:	d008      	beq.n	8003466 <__swsetup_r+0x52>
 8003454:	0023      	movs	r3, r4
 8003456:	3344      	adds	r3, #68	; 0x44
 8003458:	4299      	cmp	r1, r3
 800345a:	d002      	beq.n	8003462 <__swsetup_r+0x4e>
 800345c:	0028      	movs	r0, r5
 800345e:	f000 f8c1 	bl	80035e4 <_free_r>
 8003462:	2300      	movs	r3, #0
 8003464:	6363      	str	r3, [r4, #52]	; 0x34
 8003466:	2224      	movs	r2, #36	; 0x24
 8003468:	89a3      	ldrh	r3, [r4, #12]
 800346a:	4393      	bics	r3, r2
 800346c:	81a3      	strh	r3, [r4, #12]
 800346e:	2300      	movs	r3, #0
 8003470:	6063      	str	r3, [r4, #4]
 8003472:	6923      	ldr	r3, [r4, #16]
 8003474:	6023      	str	r3, [r4, #0]
 8003476:	2308      	movs	r3, #8
 8003478:	89a2      	ldrh	r2, [r4, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	81a3      	strh	r3, [r4, #12]
 800347e:	6923      	ldr	r3, [r4, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10b      	bne.n	800349c <__swsetup_r+0x88>
 8003484:	21a0      	movs	r1, #160	; 0xa0
 8003486:	2280      	movs	r2, #128	; 0x80
 8003488:	89a3      	ldrh	r3, [r4, #12]
 800348a:	0089      	lsls	r1, r1, #2
 800348c:	0092      	lsls	r2, r2, #2
 800348e:	400b      	ands	r3, r1
 8003490:	4293      	cmp	r3, r2
 8003492:	d003      	beq.n	800349c <__swsetup_r+0x88>
 8003494:	0021      	movs	r1, r4
 8003496:	0028      	movs	r0, r5
 8003498:	f000 fa80 	bl	800399c <__smakebuf_r>
 800349c:	220c      	movs	r2, #12
 800349e:	5ea3      	ldrsh	r3, [r4, r2]
 80034a0:	2001      	movs	r0, #1
 80034a2:	001a      	movs	r2, r3
 80034a4:	b299      	uxth	r1, r3
 80034a6:	4002      	ands	r2, r0
 80034a8:	4203      	tst	r3, r0
 80034aa:	d00f      	beq.n	80034cc <__swsetup_r+0xb8>
 80034ac:	2200      	movs	r2, #0
 80034ae:	60a2      	str	r2, [r4, #8]
 80034b0:	6962      	ldr	r2, [r4, #20]
 80034b2:	4252      	negs	r2, r2
 80034b4:	61a2      	str	r2, [r4, #24]
 80034b6:	2000      	movs	r0, #0
 80034b8:	6922      	ldr	r2, [r4, #16]
 80034ba:	4282      	cmp	r2, r0
 80034bc:	d1c4      	bne.n	8003448 <__swsetup_r+0x34>
 80034be:	0609      	lsls	r1, r1, #24
 80034c0:	d5c2      	bpl.n	8003448 <__swsetup_r+0x34>
 80034c2:	2240      	movs	r2, #64	; 0x40
 80034c4:	4313      	orrs	r3, r2
 80034c6:	81a3      	strh	r3, [r4, #12]
 80034c8:	3801      	subs	r0, #1
 80034ca:	e7bd      	b.n	8003448 <__swsetup_r+0x34>
 80034cc:	0788      	lsls	r0, r1, #30
 80034ce:	d400      	bmi.n	80034d2 <__swsetup_r+0xbe>
 80034d0:	6962      	ldr	r2, [r4, #20]
 80034d2:	60a2      	str	r2, [r4, #8]
 80034d4:	e7ef      	b.n	80034b6 <__swsetup_r+0xa2>
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	20000064 	.word	0x20000064

080034dc <memset>:
 80034dc:	0003      	movs	r3, r0
 80034de:	1882      	adds	r2, r0, r2
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d100      	bne.n	80034e6 <memset+0xa>
 80034e4:	4770      	bx	lr
 80034e6:	7019      	strb	r1, [r3, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	e7f9      	b.n	80034e0 <memset+0x4>

080034ec <_close_r>:
 80034ec:	2300      	movs	r3, #0
 80034ee:	b570      	push	{r4, r5, r6, lr}
 80034f0:	4d06      	ldr	r5, [pc, #24]	; (800350c <_close_r+0x20>)
 80034f2:	0004      	movs	r4, r0
 80034f4:	0008      	movs	r0, r1
 80034f6:	602b      	str	r3, [r5, #0]
 80034f8:	f7fd f97e 	bl	80007f8 <_close>
 80034fc:	1c43      	adds	r3, r0, #1
 80034fe:	d103      	bne.n	8003508 <_close_r+0x1c>
 8003500:	682b      	ldr	r3, [r5, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d000      	beq.n	8003508 <_close_r+0x1c>
 8003506:	6023      	str	r3, [r4, #0]
 8003508:	bd70      	pop	{r4, r5, r6, pc}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	20000250 	.word	0x20000250

08003510 <_lseek_r>:
 8003510:	b570      	push	{r4, r5, r6, lr}
 8003512:	0004      	movs	r4, r0
 8003514:	0008      	movs	r0, r1
 8003516:	0011      	movs	r1, r2
 8003518:	001a      	movs	r2, r3
 800351a:	2300      	movs	r3, #0
 800351c:	4d05      	ldr	r5, [pc, #20]	; (8003534 <_lseek_r+0x24>)
 800351e:	602b      	str	r3, [r5, #0]
 8003520:	f7fd f98b 	bl	800083a <_lseek>
 8003524:	1c43      	adds	r3, r0, #1
 8003526:	d103      	bne.n	8003530 <_lseek_r+0x20>
 8003528:	682b      	ldr	r3, [r5, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d000      	beq.n	8003530 <_lseek_r+0x20>
 800352e:	6023      	str	r3, [r4, #0]
 8003530:	bd70      	pop	{r4, r5, r6, pc}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	20000250 	.word	0x20000250

08003538 <_read_r>:
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	0004      	movs	r4, r0
 800353c:	0008      	movs	r0, r1
 800353e:	0011      	movs	r1, r2
 8003540:	001a      	movs	r2, r3
 8003542:	2300      	movs	r3, #0
 8003544:	4d05      	ldr	r5, [pc, #20]	; (800355c <_read_r+0x24>)
 8003546:	602b      	str	r3, [r5, #0]
 8003548:	f7fd f922 	bl	8000790 <_read>
 800354c:	1c43      	adds	r3, r0, #1
 800354e:	d103      	bne.n	8003558 <_read_r+0x20>
 8003550:	682b      	ldr	r3, [r5, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d000      	beq.n	8003558 <_read_r+0x20>
 8003556:	6023      	str	r3, [r4, #0]
 8003558:	bd70      	pop	{r4, r5, r6, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	20000250 	.word	0x20000250

08003560 <_write_r>:
 8003560:	b570      	push	{r4, r5, r6, lr}
 8003562:	0004      	movs	r4, r0
 8003564:	0008      	movs	r0, r1
 8003566:	0011      	movs	r1, r2
 8003568:	001a      	movs	r2, r3
 800356a:	2300      	movs	r3, #0
 800356c:	4d05      	ldr	r5, [pc, #20]	; (8003584 <_write_r+0x24>)
 800356e:	602b      	str	r3, [r5, #0]
 8003570:	f7fd f92c 	bl	80007cc <_write>
 8003574:	1c43      	adds	r3, r0, #1
 8003576:	d103      	bne.n	8003580 <_write_r+0x20>
 8003578:	682b      	ldr	r3, [r5, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d000      	beq.n	8003580 <_write_r+0x20>
 800357e:	6023      	str	r3, [r4, #0]
 8003580:	bd70      	pop	{r4, r5, r6, pc}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	20000250 	.word	0x20000250

08003588 <__errno>:
 8003588:	4b01      	ldr	r3, [pc, #4]	; (8003590 <__errno+0x8>)
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	4770      	bx	lr
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	20000064 	.word	0x20000064

08003594 <__libc_init_array>:
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	2600      	movs	r6, #0
 8003598:	4c0c      	ldr	r4, [pc, #48]	; (80035cc <__libc_init_array+0x38>)
 800359a:	4d0d      	ldr	r5, [pc, #52]	; (80035d0 <__libc_init_array+0x3c>)
 800359c:	1b64      	subs	r4, r4, r5
 800359e:	10a4      	asrs	r4, r4, #2
 80035a0:	42a6      	cmp	r6, r4
 80035a2:	d109      	bne.n	80035b8 <__libc_init_array+0x24>
 80035a4:	2600      	movs	r6, #0
 80035a6:	f000 fa6d 	bl	8003a84 <_init>
 80035aa:	4c0a      	ldr	r4, [pc, #40]	; (80035d4 <__libc_init_array+0x40>)
 80035ac:	4d0a      	ldr	r5, [pc, #40]	; (80035d8 <__libc_init_array+0x44>)
 80035ae:	1b64      	subs	r4, r4, r5
 80035b0:	10a4      	asrs	r4, r4, #2
 80035b2:	42a6      	cmp	r6, r4
 80035b4:	d105      	bne.n	80035c2 <__libc_init_array+0x2e>
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
 80035b8:	00b3      	lsls	r3, r6, #2
 80035ba:	58eb      	ldr	r3, [r5, r3]
 80035bc:	4798      	blx	r3
 80035be:	3601      	adds	r6, #1
 80035c0:	e7ee      	b.n	80035a0 <__libc_init_array+0xc>
 80035c2:	00b3      	lsls	r3, r6, #2
 80035c4:	58eb      	ldr	r3, [r5, r3]
 80035c6:	4798      	blx	r3
 80035c8:	3601      	adds	r6, #1
 80035ca:	e7f2      	b.n	80035b2 <__libc_init_array+0x1e>
 80035cc:	08003b24 	.word	0x08003b24
 80035d0:	08003b24 	.word	0x08003b24
 80035d4:	08003b28 	.word	0x08003b28
 80035d8:	08003b24 	.word	0x08003b24

080035dc <__retarget_lock_init_recursive>:
 80035dc:	4770      	bx	lr

080035de <__retarget_lock_acquire_recursive>:
 80035de:	4770      	bx	lr

080035e0 <__retarget_lock_release_recursive>:
 80035e0:	4770      	bx	lr
	...

080035e4 <_free_r>:
 80035e4:	b570      	push	{r4, r5, r6, lr}
 80035e6:	0005      	movs	r5, r0
 80035e8:	2900      	cmp	r1, #0
 80035ea:	d010      	beq.n	800360e <_free_r+0x2a>
 80035ec:	1f0c      	subs	r4, r1, #4
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	da00      	bge.n	80035f6 <_free_r+0x12>
 80035f4:	18e4      	adds	r4, r4, r3
 80035f6:	0028      	movs	r0, r5
 80035f8:	f000 f8e2 	bl	80037c0 <__malloc_lock>
 80035fc:	4a1d      	ldr	r2, [pc, #116]	; (8003674 <_free_r+0x90>)
 80035fe:	6813      	ldr	r3, [r2, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d105      	bne.n	8003610 <_free_r+0x2c>
 8003604:	6063      	str	r3, [r4, #4]
 8003606:	6014      	str	r4, [r2, #0]
 8003608:	0028      	movs	r0, r5
 800360a:	f000 f8e1 	bl	80037d0 <__malloc_unlock>
 800360e:	bd70      	pop	{r4, r5, r6, pc}
 8003610:	42a3      	cmp	r3, r4
 8003612:	d908      	bls.n	8003626 <_free_r+0x42>
 8003614:	6820      	ldr	r0, [r4, #0]
 8003616:	1821      	adds	r1, r4, r0
 8003618:	428b      	cmp	r3, r1
 800361a:	d1f3      	bne.n	8003604 <_free_r+0x20>
 800361c:	6819      	ldr	r1, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	1809      	adds	r1, r1, r0
 8003622:	6021      	str	r1, [r4, #0]
 8003624:	e7ee      	b.n	8003604 <_free_r+0x20>
 8003626:	001a      	movs	r2, r3
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <_free_r+0x4e>
 800362e:	42a3      	cmp	r3, r4
 8003630:	d9f9      	bls.n	8003626 <_free_r+0x42>
 8003632:	6811      	ldr	r1, [r2, #0]
 8003634:	1850      	adds	r0, r2, r1
 8003636:	42a0      	cmp	r0, r4
 8003638:	d10b      	bne.n	8003652 <_free_r+0x6e>
 800363a:	6820      	ldr	r0, [r4, #0]
 800363c:	1809      	adds	r1, r1, r0
 800363e:	1850      	adds	r0, r2, r1
 8003640:	6011      	str	r1, [r2, #0]
 8003642:	4283      	cmp	r3, r0
 8003644:	d1e0      	bne.n	8003608 <_free_r+0x24>
 8003646:	6818      	ldr	r0, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	1841      	adds	r1, r0, r1
 800364c:	6011      	str	r1, [r2, #0]
 800364e:	6053      	str	r3, [r2, #4]
 8003650:	e7da      	b.n	8003608 <_free_r+0x24>
 8003652:	42a0      	cmp	r0, r4
 8003654:	d902      	bls.n	800365c <_free_r+0x78>
 8003656:	230c      	movs	r3, #12
 8003658:	602b      	str	r3, [r5, #0]
 800365a:	e7d5      	b.n	8003608 <_free_r+0x24>
 800365c:	6820      	ldr	r0, [r4, #0]
 800365e:	1821      	adds	r1, r4, r0
 8003660:	428b      	cmp	r3, r1
 8003662:	d103      	bne.n	800366c <_free_r+0x88>
 8003664:	6819      	ldr	r1, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	1809      	adds	r1, r1, r0
 800366a:	6021      	str	r1, [r4, #0]
 800366c:	6063      	str	r3, [r4, #4]
 800366e:	6054      	str	r4, [r2, #4]
 8003670:	e7ca      	b.n	8003608 <_free_r+0x24>
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	20000258 	.word	0x20000258

08003678 <sbrk_aligned>:
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	4e0f      	ldr	r6, [pc, #60]	; (80036b8 <sbrk_aligned+0x40>)
 800367c:	000d      	movs	r5, r1
 800367e:	6831      	ldr	r1, [r6, #0]
 8003680:	0004      	movs	r4, r0
 8003682:	2900      	cmp	r1, #0
 8003684:	d102      	bne.n	800368c <sbrk_aligned+0x14>
 8003686:	f000 f9eb 	bl	8003a60 <_sbrk_r>
 800368a:	6030      	str	r0, [r6, #0]
 800368c:	0029      	movs	r1, r5
 800368e:	0020      	movs	r0, r4
 8003690:	f000 f9e6 	bl	8003a60 <_sbrk_r>
 8003694:	1c43      	adds	r3, r0, #1
 8003696:	d00a      	beq.n	80036ae <sbrk_aligned+0x36>
 8003698:	2303      	movs	r3, #3
 800369a:	1cc5      	adds	r5, r0, #3
 800369c:	439d      	bics	r5, r3
 800369e:	42a8      	cmp	r0, r5
 80036a0:	d007      	beq.n	80036b2 <sbrk_aligned+0x3a>
 80036a2:	1a29      	subs	r1, r5, r0
 80036a4:	0020      	movs	r0, r4
 80036a6:	f000 f9db 	bl	8003a60 <_sbrk_r>
 80036aa:	3001      	adds	r0, #1
 80036ac:	d101      	bne.n	80036b2 <sbrk_aligned+0x3a>
 80036ae:	2501      	movs	r5, #1
 80036b0:	426d      	negs	r5, r5
 80036b2:	0028      	movs	r0, r5
 80036b4:	bd70      	pop	{r4, r5, r6, pc}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	2000025c 	.word	0x2000025c

080036bc <_malloc_r>:
 80036bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036be:	2203      	movs	r2, #3
 80036c0:	1ccb      	adds	r3, r1, #3
 80036c2:	4393      	bics	r3, r2
 80036c4:	3308      	adds	r3, #8
 80036c6:	0006      	movs	r6, r0
 80036c8:	001f      	movs	r7, r3
 80036ca:	2b0c      	cmp	r3, #12
 80036cc:	d238      	bcs.n	8003740 <_malloc_r+0x84>
 80036ce:	270c      	movs	r7, #12
 80036d0:	42b9      	cmp	r1, r7
 80036d2:	d837      	bhi.n	8003744 <_malloc_r+0x88>
 80036d4:	0030      	movs	r0, r6
 80036d6:	f000 f873 	bl	80037c0 <__malloc_lock>
 80036da:	4b38      	ldr	r3, [pc, #224]	; (80037bc <_malloc_r+0x100>)
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	001c      	movs	r4, r3
 80036e2:	2c00      	cmp	r4, #0
 80036e4:	d133      	bne.n	800374e <_malloc_r+0x92>
 80036e6:	0039      	movs	r1, r7
 80036e8:	0030      	movs	r0, r6
 80036ea:	f7ff ffc5 	bl	8003678 <sbrk_aligned>
 80036ee:	0004      	movs	r4, r0
 80036f0:	1c43      	adds	r3, r0, #1
 80036f2:	d15e      	bne.n	80037b2 <_malloc_r+0xf6>
 80036f4:	9b00      	ldr	r3, [sp, #0]
 80036f6:	681c      	ldr	r4, [r3, #0]
 80036f8:	0025      	movs	r5, r4
 80036fa:	2d00      	cmp	r5, #0
 80036fc:	d14e      	bne.n	800379c <_malloc_r+0xe0>
 80036fe:	2c00      	cmp	r4, #0
 8003700:	d051      	beq.n	80037a6 <_malloc_r+0xea>
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	0029      	movs	r1, r5
 8003706:	18e3      	adds	r3, r4, r3
 8003708:	0030      	movs	r0, r6
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	f000 f9a8 	bl	8003a60 <_sbrk_r>
 8003710:	9b01      	ldr	r3, [sp, #4]
 8003712:	4283      	cmp	r3, r0
 8003714:	d147      	bne.n	80037a6 <_malloc_r+0xea>
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	0030      	movs	r0, r6
 800371a:	1aff      	subs	r7, r7, r3
 800371c:	0039      	movs	r1, r7
 800371e:	f7ff ffab 	bl	8003678 <sbrk_aligned>
 8003722:	3001      	adds	r0, #1
 8003724:	d03f      	beq.n	80037a6 <_malloc_r+0xea>
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	19db      	adds	r3, r3, r7
 800372a:	6023      	str	r3, [r4, #0]
 800372c:	9b00      	ldr	r3, [sp, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d040      	beq.n	80037b6 <_malloc_r+0xfa>
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	42a2      	cmp	r2, r4
 8003738:	d133      	bne.n	80037a2 <_malloc_r+0xe6>
 800373a:	2200      	movs	r2, #0
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	e014      	b.n	800376a <_malloc_r+0xae>
 8003740:	2b00      	cmp	r3, #0
 8003742:	dac5      	bge.n	80036d0 <_malloc_r+0x14>
 8003744:	230c      	movs	r3, #12
 8003746:	2500      	movs	r5, #0
 8003748:	6033      	str	r3, [r6, #0]
 800374a:	0028      	movs	r0, r5
 800374c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800374e:	6821      	ldr	r1, [r4, #0]
 8003750:	1bc9      	subs	r1, r1, r7
 8003752:	d420      	bmi.n	8003796 <_malloc_r+0xda>
 8003754:	290b      	cmp	r1, #11
 8003756:	d918      	bls.n	800378a <_malloc_r+0xce>
 8003758:	19e2      	adds	r2, r4, r7
 800375a:	6027      	str	r7, [r4, #0]
 800375c:	42a3      	cmp	r3, r4
 800375e:	d112      	bne.n	8003786 <_malloc_r+0xca>
 8003760:	9b00      	ldr	r3, [sp, #0]
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	6863      	ldr	r3, [r4, #4]
 8003766:	6011      	str	r1, [r2, #0]
 8003768:	6053      	str	r3, [r2, #4]
 800376a:	0030      	movs	r0, r6
 800376c:	0025      	movs	r5, r4
 800376e:	f000 f82f 	bl	80037d0 <__malloc_unlock>
 8003772:	2207      	movs	r2, #7
 8003774:	350b      	adds	r5, #11
 8003776:	1d23      	adds	r3, r4, #4
 8003778:	4395      	bics	r5, r2
 800377a:	1aea      	subs	r2, r5, r3
 800377c:	429d      	cmp	r5, r3
 800377e:	d0e4      	beq.n	800374a <_malloc_r+0x8e>
 8003780:	1b5b      	subs	r3, r3, r5
 8003782:	50a3      	str	r3, [r4, r2]
 8003784:	e7e1      	b.n	800374a <_malloc_r+0x8e>
 8003786:	605a      	str	r2, [r3, #4]
 8003788:	e7ec      	b.n	8003764 <_malloc_r+0xa8>
 800378a:	6862      	ldr	r2, [r4, #4]
 800378c:	42a3      	cmp	r3, r4
 800378e:	d1d5      	bne.n	800373c <_malloc_r+0x80>
 8003790:	9b00      	ldr	r3, [sp, #0]
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	e7e9      	b.n	800376a <_malloc_r+0xae>
 8003796:	0023      	movs	r3, r4
 8003798:	6864      	ldr	r4, [r4, #4]
 800379a:	e7a2      	b.n	80036e2 <_malloc_r+0x26>
 800379c:	002c      	movs	r4, r5
 800379e:	686d      	ldr	r5, [r5, #4]
 80037a0:	e7ab      	b.n	80036fa <_malloc_r+0x3e>
 80037a2:	0013      	movs	r3, r2
 80037a4:	e7c4      	b.n	8003730 <_malloc_r+0x74>
 80037a6:	230c      	movs	r3, #12
 80037a8:	0030      	movs	r0, r6
 80037aa:	6033      	str	r3, [r6, #0]
 80037ac:	f000 f810 	bl	80037d0 <__malloc_unlock>
 80037b0:	e7cb      	b.n	800374a <_malloc_r+0x8e>
 80037b2:	6027      	str	r7, [r4, #0]
 80037b4:	e7d9      	b.n	800376a <_malloc_r+0xae>
 80037b6:	605b      	str	r3, [r3, #4]
 80037b8:	deff      	udf	#255	; 0xff
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	20000258 	.word	0x20000258

080037c0 <__malloc_lock>:
 80037c0:	b510      	push	{r4, lr}
 80037c2:	4802      	ldr	r0, [pc, #8]	; (80037cc <__malloc_lock+0xc>)
 80037c4:	f7ff ff0b 	bl	80035de <__retarget_lock_acquire_recursive>
 80037c8:	bd10      	pop	{r4, pc}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	20000254 	.word	0x20000254

080037d0 <__malloc_unlock>:
 80037d0:	b510      	push	{r4, lr}
 80037d2:	4802      	ldr	r0, [pc, #8]	; (80037dc <__malloc_unlock+0xc>)
 80037d4:	f7ff ff04 	bl	80035e0 <__retarget_lock_release_recursive>
 80037d8:	bd10      	pop	{r4, pc}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	20000254 	.word	0x20000254

080037e0 <__sflush_r>:
 80037e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037e2:	898b      	ldrh	r3, [r1, #12]
 80037e4:	0005      	movs	r5, r0
 80037e6:	000c      	movs	r4, r1
 80037e8:	071a      	lsls	r2, r3, #28
 80037ea:	d45c      	bmi.n	80038a6 <__sflush_r+0xc6>
 80037ec:	684a      	ldr	r2, [r1, #4]
 80037ee:	2a00      	cmp	r2, #0
 80037f0:	dc04      	bgt.n	80037fc <__sflush_r+0x1c>
 80037f2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80037f4:	2a00      	cmp	r2, #0
 80037f6:	dc01      	bgt.n	80037fc <__sflush_r+0x1c>
 80037f8:	2000      	movs	r0, #0
 80037fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80037fc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80037fe:	2f00      	cmp	r7, #0
 8003800:	d0fa      	beq.n	80037f8 <__sflush_r+0x18>
 8003802:	2200      	movs	r2, #0
 8003804:	2080      	movs	r0, #128	; 0x80
 8003806:	682e      	ldr	r6, [r5, #0]
 8003808:	602a      	str	r2, [r5, #0]
 800380a:	001a      	movs	r2, r3
 800380c:	0140      	lsls	r0, r0, #5
 800380e:	6a21      	ldr	r1, [r4, #32]
 8003810:	4002      	ands	r2, r0
 8003812:	4203      	tst	r3, r0
 8003814:	d034      	beq.n	8003880 <__sflush_r+0xa0>
 8003816:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003818:	89a3      	ldrh	r3, [r4, #12]
 800381a:	075b      	lsls	r3, r3, #29
 800381c:	d506      	bpl.n	800382c <__sflush_r+0x4c>
 800381e:	6863      	ldr	r3, [r4, #4]
 8003820:	1ac0      	subs	r0, r0, r3
 8003822:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <__sflush_r+0x4c>
 8003828:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800382a:	1ac0      	subs	r0, r0, r3
 800382c:	0002      	movs	r2, r0
 800382e:	2300      	movs	r3, #0
 8003830:	0028      	movs	r0, r5
 8003832:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003834:	6a21      	ldr	r1, [r4, #32]
 8003836:	47b8      	blx	r7
 8003838:	89a2      	ldrh	r2, [r4, #12]
 800383a:	1c43      	adds	r3, r0, #1
 800383c:	d106      	bne.n	800384c <__sflush_r+0x6c>
 800383e:	6829      	ldr	r1, [r5, #0]
 8003840:	291d      	cmp	r1, #29
 8003842:	d82c      	bhi.n	800389e <__sflush_r+0xbe>
 8003844:	4b2a      	ldr	r3, [pc, #168]	; (80038f0 <__sflush_r+0x110>)
 8003846:	410b      	asrs	r3, r1
 8003848:	07db      	lsls	r3, r3, #31
 800384a:	d428      	bmi.n	800389e <__sflush_r+0xbe>
 800384c:	2300      	movs	r3, #0
 800384e:	6063      	str	r3, [r4, #4]
 8003850:	6923      	ldr	r3, [r4, #16]
 8003852:	6023      	str	r3, [r4, #0]
 8003854:	04d2      	lsls	r2, r2, #19
 8003856:	d505      	bpl.n	8003864 <__sflush_r+0x84>
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	d102      	bne.n	8003862 <__sflush_r+0x82>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d100      	bne.n	8003864 <__sflush_r+0x84>
 8003862:	6560      	str	r0, [r4, #84]	; 0x54
 8003864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003866:	602e      	str	r6, [r5, #0]
 8003868:	2900      	cmp	r1, #0
 800386a:	d0c5      	beq.n	80037f8 <__sflush_r+0x18>
 800386c:	0023      	movs	r3, r4
 800386e:	3344      	adds	r3, #68	; 0x44
 8003870:	4299      	cmp	r1, r3
 8003872:	d002      	beq.n	800387a <__sflush_r+0x9a>
 8003874:	0028      	movs	r0, r5
 8003876:	f7ff feb5 	bl	80035e4 <_free_r>
 800387a:	2000      	movs	r0, #0
 800387c:	6360      	str	r0, [r4, #52]	; 0x34
 800387e:	e7bc      	b.n	80037fa <__sflush_r+0x1a>
 8003880:	2301      	movs	r3, #1
 8003882:	0028      	movs	r0, r5
 8003884:	47b8      	blx	r7
 8003886:	1c43      	adds	r3, r0, #1
 8003888:	d1c6      	bne.n	8003818 <__sflush_r+0x38>
 800388a:	682b      	ldr	r3, [r5, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0c3      	beq.n	8003818 <__sflush_r+0x38>
 8003890:	2b1d      	cmp	r3, #29
 8003892:	d001      	beq.n	8003898 <__sflush_r+0xb8>
 8003894:	2b16      	cmp	r3, #22
 8003896:	d101      	bne.n	800389c <__sflush_r+0xbc>
 8003898:	602e      	str	r6, [r5, #0]
 800389a:	e7ad      	b.n	80037f8 <__sflush_r+0x18>
 800389c:	89a2      	ldrh	r2, [r4, #12]
 800389e:	2340      	movs	r3, #64	; 0x40
 80038a0:	4313      	orrs	r3, r2
 80038a2:	81a3      	strh	r3, [r4, #12]
 80038a4:	e7a9      	b.n	80037fa <__sflush_r+0x1a>
 80038a6:	690e      	ldr	r6, [r1, #16]
 80038a8:	2e00      	cmp	r6, #0
 80038aa:	d0a5      	beq.n	80037f8 <__sflush_r+0x18>
 80038ac:	680f      	ldr	r7, [r1, #0]
 80038ae:	600e      	str	r6, [r1, #0]
 80038b0:	1bba      	subs	r2, r7, r6
 80038b2:	9201      	str	r2, [sp, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	079b      	lsls	r3, r3, #30
 80038b8:	d100      	bne.n	80038bc <__sflush_r+0xdc>
 80038ba:	694a      	ldr	r2, [r1, #20]
 80038bc:	60a2      	str	r2, [r4, #8]
 80038be:	9b01      	ldr	r3, [sp, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	dd99      	ble.n	80037f8 <__sflush_r+0x18>
 80038c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80038c6:	0032      	movs	r2, r6
 80038c8:	001f      	movs	r7, r3
 80038ca:	0028      	movs	r0, r5
 80038cc:	9b01      	ldr	r3, [sp, #4]
 80038ce:	6a21      	ldr	r1, [r4, #32]
 80038d0:	47b8      	blx	r7
 80038d2:	2800      	cmp	r0, #0
 80038d4:	dc06      	bgt.n	80038e4 <__sflush_r+0x104>
 80038d6:	2340      	movs	r3, #64	; 0x40
 80038d8:	2001      	movs	r0, #1
 80038da:	89a2      	ldrh	r2, [r4, #12]
 80038dc:	4240      	negs	r0, r0
 80038de:	4313      	orrs	r3, r2
 80038e0:	81a3      	strh	r3, [r4, #12]
 80038e2:	e78a      	b.n	80037fa <__sflush_r+0x1a>
 80038e4:	9b01      	ldr	r3, [sp, #4]
 80038e6:	1836      	adds	r6, r6, r0
 80038e8:	1a1b      	subs	r3, r3, r0
 80038ea:	9301      	str	r3, [sp, #4]
 80038ec:	e7e7      	b.n	80038be <__sflush_r+0xde>
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	dfbffffe 	.word	0xdfbffffe

080038f4 <_fflush_r>:
 80038f4:	690b      	ldr	r3, [r1, #16]
 80038f6:	b570      	push	{r4, r5, r6, lr}
 80038f8:	0005      	movs	r5, r0
 80038fa:	000c      	movs	r4, r1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d102      	bne.n	8003906 <_fflush_r+0x12>
 8003900:	2500      	movs	r5, #0
 8003902:	0028      	movs	r0, r5
 8003904:	bd70      	pop	{r4, r5, r6, pc}
 8003906:	2800      	cmp	r0, #0
 8003908:	d004      	beq.n	8003914 <_fflush_r+0x20>
 800390a:	6a03      	ldr	r3, [r0, #32]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <_fflush_r+0x20>
 8003910:	f7ff fc5e 	bl	80031d0 <__sinit>
 8003914:	220c      	movs	r2, #12
 8003916:	5ea3      	ldrsh	r3, [r4, r2]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f1      	beq.n	8003900 <_fflush_r+0xc>
 800391c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800391e:	07d2      	lsls	r2, r2, #31
 8003920:	d404      	bmi.n	800392c <_fflush_r+0x38>
 8003922:	059b      	lsls	r3, r3, #22
 8003924:	d402      	bmi.n	800392c <_fflush_r+0x38>
 8003926:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003928:	f7ff fe59 	bl	80035de <__retarget_lock_acquire_recursive>
 800392c:	0028      	movs	r0, r5
 800392e:	0021      	movs	r1, r4
 8003930:	f7ff ff56 	bl	80037e0 <__sflush_r>
 8003934:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003936:	0005      	movs	r5, r0
 8003938:	07db      	lsls	r3, r3, #31
 800393a:	d4e2      	bmi.n	8003902 <_fflush_r+0xe>
 800393c:	89a3      	ldrh	r3, [r4, #12]
 800393e:	059b      	lsls	r3, r3, #22
 8003940:	d4df      	bmi.n	8003902 <_fflush_r+0xe>
 8003942:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003944:	f7ff fe4c 	bl	80035e0 <__retarget_lock_release_recursive>
 8003948:	e7db      	b.n	8003902 <_fflush_r+0xe>
	...

0800394c <__swhatbuf_r>:
 800394c:	b570      	push	{r4, r5, r6, lr}
 800394e:	000e      	movs	r6, r1
 8003950:	001d      	movs	r5, r3
 8003952:	230e      	movs	r3, #14
 8003954:	5ec9      	ldrsh	r1, [r1, r3]
 8003956:	0014      	movs	r4, r2
 8003958:	b096      	sub	sp, #88	; 0x58
 800395a:	2900      	cmp	r1, #0
 800395c:	da0c      	bge.n	8003978 <__swhatbuf_r+0x2c>
 800395e:	89b2      	ldrh	r2, [r6, #12]
 8003960:	2380      	movs	r3, #128	; 0x80
 8003962:	0011      	movs	r1, r2
 8003964:	4019      	ands	r1, r3
 8003966:	421a      	tst	r2, r3
 8003968:	d013      	beq.n	8003992 <__swhatbuf_r+0x46>
 800396a:	2100      	movs	r1, #0
 800396c:	3b40      	subs	r3, #64	; 0x40
 800396e:	2000      	movs	r0, #0
 8003970:	6029      	str	r1, [r5, #0]
 8003972:	6023      	str	r3, [r4, #0]
 8003974:	b016      	add	sp, #88	; 0x58
 8003976:	bd70      	pop	{r4, r5, r6, pc}
 8003978:	466a      	mov	r2, sp
 800397a:	f000 f84d 	bl	8003a18 <_fstat_r>
 800397e:	2800      	cmp	r0, #0
 8003980:	dbed      	blt.n	800395e <__swhatbuf_r+0x12>
 8003982:	23f0      	movs	r3, #240	; 0xf0
 8003984:	9901      	ldr	r1, [sp, #4]
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	4019      	ands	r1, r3
 800398a:	4b03      	ldr	r3, [pc, #12]	; (8003998 <__swhatbuf_r+0x4c>)
 800398c:	18c9      	adds	r1, r1, r3
 800398e:	424b      	negs	r3, r1
 8003990:	4159      	adcs	r1, r3
 8003992:	2380      	movs	r3, #128	; 0x80
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	e7ea      	b.n	800396e <__swhatbuf_r+0x22>
 8003998:	ffffe000 	.word	0xffffe000

0800399c <__smakebuf_r>:
 800399c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800399e:	2602      	movs	r6, #2
 80039a0:	898b      	ldrh	r3, [r1, #12]
 80039a2:	0005      	movs	r5, r0
 80039a4:	000c      	movs	r4, r1
 80039a6:	4233      	tst	r3, r6
 80039a8:	d006      	beq.n	80039b8 <__smakebuf_r+0x1c>
 80039aa:	0023      	movs	r3, r4
 80039ac:	3347      	adds	r3, #71	; 0x47
 80039ae:	6023      	str	r3, [r4, #0]
 80039b0:	6123      	str	r3, [r4, #16]
 80039b2:	2301      	movs	r3, #1
 80039b4:	6163      	str	r3, [r4, #20]
 80039b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80039b8:	466a      	mov	r2, sp
 80039ba:	ab01      	add	r3, sp, #4
 80039bc:	f7ff ffc6 	bl	800394c <__swhatbuf_r>
 80039c0:	9900      	ldr	r1, [sp, #0]
 80039c2:	0007      	movs	r7, r0
 80039c4:	0028      	movs	r0, r5
 80039c6:	f7ff fe79 	bl	80036bc <_malloc_r>
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d108      	bne.n	80039e0 <__smakebuf_r+0x44>
 80039ce:	220c      	movs	r2, #12
 80039d0:	5ea3      	ldrsh	r3, [r4, r2]
 80039d2:	059a      	lsls	r2, r3, #22
 80039d4:	d4ef      	bmi.n	80039b6 <__smakebuf_r+0x1a>
 80039d6:	2203      	movs	r2, #3
 80039d8:	4393      	bics	r3, r2
 80039da:	431e      	orrs	r6, r3
 80039dc:	81a6      	strh	r6, [r4, #12]
 80039de:	e7e4      	b.n	80039aa <__smakebuf_r+0xe>
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	89a2      	ldrh	r2, [r4, #12]
 80039e4:	6020      	str	r0, [r4, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	81a3      	strh	r3, [r4, #12]
 80039ea:	9b00      	ldr	r3, [sp, #0]
 80039ec:	6120      	str	r0, [r4, #16]
 80039ee:	6163      	str	r3, [r4, #20]
 80039f0:	9b01      	ldr	r3, [sp, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00c      	beq.n	8003a10 <__smakebuf_r+0x74>
 80039f6:	0028      	movs	r0, r5
 80039f8:	230e      	movs	r3, #14
 80039fa:	5ee1      	ldrsh	r1, [r4, r3]
 80039fc:	f000 f81e 	bl	8003a3c <_isatty_r>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	d005      	beq.n	8003a10 <__smakebuf_r+0x74>
 8003a04:	2303      	movs	r3, #3
 8003a06:	89a2      	ldrh	r2, [r4, #12]
 8003a08:	439a      	bics	r2, r3
 8003a0a:	3b02      	subs	r3, #2
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	81a3      	strh	r3, [r4, #12]
 8003a10:	89a3      	ldrh	r3, [r4, #12]
 8003a12:	433b      	orrs	r3, r7
 8003a14:	81a3      	strh	r3, [r4, #12]
 8003a16:	e7ce      	b.n	80039b6 <__smakebuf_r+0x1a>

08003a18 <_fstat_r>:
 8003a18:	2300      	movs	r3, #0
 8003a1a:	b570      	push	{r4, r5, r6, lr}
 8003a1c:	4d06      	ldr	r5, [pc, #24]	; (8003a38 <_fstat_r+0x20>)
 8003a1e:	0004      	movs	r4, r0
 8003a20:	0008      	movs	r0, r1
 8003a22:	0011      	movs	r1, r2
 8003a24:	602b      	str	r3, [r5, #0]
 8003a26:	f7fc fef1 	bl	800080c <_fstat>
 8003a2a:	1c43      	adds	r3, r0, #1
 8003a2c:	d103      	bne.n	8003a36 <_fstat_r+0x1e>
 8003a2e:	682b      	ldr	r3, [r5, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d000      	beq.n	8003a36 <_fstat_r+0x1e>
 8003a34:	6023      	str	r3, [r4, #0]
 8003a36:	bd70      	pop	{r4, r5, r6, pc}
 8003a38:	20000250 	.word	0x20000250

08003a3c <_isatty_r>:
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	b570      	push	{r4, r5, r6, lr}
 8003a40:	4d06      	ldr	r5, [pc, #24]	; (8003a5c <_isatty_r+0x20>)
 8003a42:	0004      	movs	r4, r0
 8003a44:	0008      	movs	r0, r1
 8003a46:	602b      	str	r3, [r5, #0]
 8003a48:	f7fc feee 	bl	8000828 <_isatty>
 8003a4c:	1c43      	adds	r3, r0, #1
 8003a4e:	d103      	bne.n	8003a58 <_isatty_r+0x1c>
 8003a50:	682b      	ldr	r3, [r5, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d000      	beq.n	8003a58 <_isatty_r+0x1c>
 8003a56:	6023      	str	r3, [r4, #0]
 8003a58:	bd70      	pop	{r4, r5, r6, pc}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	20000250 	.word	0x20000250

08003a60 <_sbrk_r>:
 8003a60:	2300      	movs	r3, #0
 8003a62:	b570      	push	{r4, r5, r6, lr}
 8003a64:	4d06      	ldr	r5, [pc, #24]	; (8003a80 <_sbrk_r+0x20>)
 8003a66:	0004      	movs	r4, r0
 8003a68:	0008      	movs	r0, r1
 8003a6a:	602b      	str	r3, [r5, #0]
 8003a6c:	f7fc fef0 	bl	8000850 <_sbrk>
 8003a70:	1c43      	adds	r3, r0, #1
 8003a72:	d103      	bne.n	8003a7c <_sbrk_r+0x1c>
 8003a74:	682b      	ldr	r3, [r5, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d000      	beq.n	8003a7c <_sbrk_r+0x1c>
 8003a7a:	6023      	str	r3, [r4, #0]
 8003a7c:	bd70      	pop	{r4, r5, r6, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	20000250 	.word	0x20000250

08003a84 <_init>:
 8003a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8a:	bc08      	pop	{r3}
 8003a8c:	469e      	mov	lr, r3
 8003a8e:	4770      	bx	lr

08003a90 <_fini>:
 8003a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a96:	bc08      	pop	{r3}
 8003a98:	469e      	mov	lr, r3
 8003a9a:	4770      	bx	lr
