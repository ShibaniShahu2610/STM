
Keypad_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d90  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003e50  08003e50  00013e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003efc  08003efc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003efc  08003efc  00013efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f04  08003f04  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f04  08003f04  00013f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f08  08003f08  00013f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  08003f74  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003f74  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008da7  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017f2  00000000  00000000  00028e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000778  00000000  00000000  0002a670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b0  00000000  00000000  0002ade8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014681  00000000  00000000  0002b398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a0e9  00000000  00000000  0003fa19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079539  00000000  00000000  00049b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020f8  00000000  00000000  000c303c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000c5134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003e38 	.word	0x08003e38

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003e38 	.word	0x08003e38

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <GPIO_Initialize>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void GPIO_Initialize(void) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	0219      	lsls	r1, r3, #8
 80004c4:	23a0      	movs	r3, #160	; 0xa0
 80004c6:	05db      	lsls	r3, r3, #23
 80004c8:	2201      	movs	r2, #1
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 fff9 	bl	80014c2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80004d0:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <GPIO_Initialize+0x40>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	2108      	movs	r1, #8
 80004d6:	0018      	movs	r0, r3
 80004d8:	f000 fff3 	bl	80014c2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80004dc:	4b07      	ldr	r3, [pc, #28]	; (80004fc <GPIO_Initialize+0x40>)
 80004de:	2201      	movs	r2, #1
 80004e0:	2110      	movs	r1, #16
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 ffed 	bl	80014c2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <GPIO_Initialize+0x40>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	2120      	movs	r1, #32
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 ffe7 	bl	80014c2 <HAL_GPIO_WritePin>
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	50000400 	.word	0x50000400

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fcfb 	bl	8000f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f829 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 f8c9 	bl	80006a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000512:	f000 f897 	bl	8000644 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  GPIO_Initialize(); // Call GPIO initialization function
 8000516:	f7ff ffd1 	bl	80004bc <GPIO_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int PIN1 = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <main+0x5c>)
 800051c:	2140      	movs	r1, #64	; 0x40
 800051e:	0018      	movs	r0, r3
 8000520:	f000 ffb2 	bl	8001488 <HAL_GPIO_ReadPin>
 8000524:	0003      	movs	r3, r0
 8000526:	60fb      	str	r3, [r7, #12]
	  int PIN2 = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7));
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <main+0x5c>)
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	0018      	movs	r0, r3
 800052e:	f000 ffab 	bl	8001488 <HAL_GPIO_ReadPin>
 8000532:	0003      	movs	r3, r0
 8000534:	60bb      	str	r3, [r7, #8]
	  int PIN3 = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13));
 8000536:	2380      	movs	r3, #128	; 0x80
 8000538:	019b      	lsls	r3, r3, #6
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <main+0x5c>)
 800053c:	0019      	movs	r1, r3
 800053e:	0010      	movs	r0, r2
 8000540:	f000 ffa2 	bl	8001488 <HAL_GPIO_ReadPin>
 8000544:	0003      	movs	r3, r0
 8000546:	607b      	str	r3, [r7, #4]
	  int PIN4 = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14));
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	01db      	lsls	r3, r3, #7
 800054c:	4a03      	ldr	r2, [pc, #12]	; (800055c <main+0x5c>)
 800054e:	0019      	movs	r1, r3
 8000550:	0010      	movs	r0, r2
 8000552:	f000 ff99 	bl	8001488 <HAL_GPIO_ReadPin>
 8000556:	0003      	movs	r3, r0
 8000558:	603b      	str	r3, [r7, #0]
  {
 800055a:	e7de      	b.n	800051a <main+0x1a>
 800055c:	50000400 	.word	0x50000400

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b09d      	sub	sp, #116	; 0x74
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	2438      	movs	r4, #56	; 0x38
 8000568:	193b      	adds	r3, r7, r4
 800056a:	0018      	movs	r0, r3
 800056c:	2338      	movs	r3, #56	; 0x38
 800056e:	001a      	movs	r2, r3
 8000570:	2100      	movs	r1, #0
 8000572:	f002 fe17 	bl	80031a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000576:	2324      	movs	r3, #36	; 0x24
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	0018      	movs	r0, r3
 800057c:	2314      	movs	r3, #20
 800057e:	001a      	movs	r2, r3
 8000580:	2100      	movs	r1, #0
 8000582:	f002 fe0f 	bl	80031a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000586:	003b      	movs	r3, r7
 8000588:	0018      	movs	r0, r3
 800058a:	2324      	movs	r3, #36	; 0x24
 800058c:	001a      	movs	r2, r3
 800058e:	2100      	movs	r1, #0
 8000590:	f002 fe08 	bl	80031a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	4b29      	ldr	r3, [pc, #164]	; (800063c <SystemClock_Config+0xdc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a29      	ldr	r2, [pc, #164]	; (8000640 <SystemClock_Config+0xe0>)
 800059a:	401a      	ands	r2, r3
 800059c:	4b27      	ldr	r3, [pc, #156]	; (800063c <SystemClock_Config+0xdc>)
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	0109      	lsls	r1, r1, #4
 80005a2:	430a      	orrs	r2, r1
 80005a4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a6:	0021      	movs	r1, r4
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2202      	movs	r2, #2
 80005ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2201      	movs	r2, #1
 80005b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2210      	movs	r2, #16
 80005b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2202      	movs	r2, #2
 80005be:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2200      	movs	r2, #0
 80005c4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	02d2      	lsls	r2, r2, #11
 80005cc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2280      	movs	r2, #128	; 0x80
 80005d2:	03d2      	lsls	r2, r2, #15
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	0018      	movs	r0, r3
 80005da:	f000 ffab 	bl	8001534 <HAL_RCC_OscConfig>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005e2:	f000 fb3d 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	2124      	movs	r1, #36	; 0x24
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	220f      	movs	r2, #15
 80005ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2203      	movs	r2, #3
 80005f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2101      	movs	r1, #1
 800060a:	0018      	movs	r0, r3
 800060c:	f001 fb56 	bl	8001cbc <HAL_RCC_ClockConfig>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000614:	f000 fb24 	bl	8000c60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000618:	003b      	movs	r3, r7
 800061a:	2201      	movs	r2, #1
 800061c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800061e:	003b      	movs	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000624:	003b      	movs	r3, r7
 8000626:	0018      	movs	r0, r3
 8000628:	f001 fd6c 	bl	8002104 <HAL_RCCEx_PeriphCLKConfig>
 800062c:	1e03      	subs	r3, r0, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000630:	f000 fb16 	bl	8000c60 <Error_Handler>
  }
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b01d      	add	sp, #116	; 0x74
 800063a:	bd90      	pop	{r4, r7, pc}
 800063c:	40007000 	.word	0x40007000
 8000640:	ffffe7ff 	.word	0xffffe7ff

08000644 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_USART1_UART_Init+0x58>)
 800064a:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <MX_USART1_UART_Init+0x5c>)
 800064c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000650:	22e1      	movs	r2, #225	; 0xe1
 8000652:	0252      	lsls	r2, r2, #9
 8000654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_USART1_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_USART1_UART_Init+0x58>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART1_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000688:	0018      	movs	r0, r3
 800068a:	f001 fec9 	bl	8002420 <HAL_UART_Init>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000692:	f000 fae5 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000084 	.word	0x20000084
 80006a0:	40013800 	.word	0x40013800

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b089      	sub	sp, #36	; 0x24
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	240c      	movs	r4, #12
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	0018      	movs	r0, r3
 80006b0:	2314      	movs	r3, #20
 80006b2:	001a      	movs	r2, r3
 80006b4:	2100      	movs	r1, #0
 80006b6:	f002 fd75 	bl	80031a4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	4b35      	ldr	r3, [pc, #212]	; (8000790 <MX_GPIO_Init+0xec>)
 80006bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006be:	4b34      	ldr	r3, [pc, #208]	; (8000790 <MX_GPIO_Init+0xec>)
 80006c0:	2102      	movs	r1, #2
 80006c2:	430a      	orrs	r2, r1
 80006c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006c6:	4b32      	ldr	r3, [pc, #200]	; (8000790 <MX_GPIO_Init+0xec>)
 80006c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ca:	2202      	movs	r2, #2
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <MX_GPIO_Init+0xec>)
 80006d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d6:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <MX_GPIO_Init+0xec>)
 80006d8:	2101      	movs	r1, #1
 80006da:	430a      	orrs	r2, r1
 80006dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80006de:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <MX_GPIO_Init+0xec>)
 80006e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e2:	2201      	movs	r2, #1
 80006e4:	4013      	ands	r3, r2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_C1_OUTPUT_GPIO_Port, BSP_C1_OUTPUT_Pin, GPIO_PIN_RESET);
 80006ea:	2380      	movs	r3, #128	; 0x80
 80006ec:	0219      	lsls	r1, r3, #8
 80006ee:	23a0      	movs	r3, #160	; 0xa0
 80006f0:	05db      	lsls	r3, r3, #23
 80006f2:	2200      	movs	r2, #0
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 fee4 	bl	80014c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BSP_C2_OUTPUT_Pin|BSP_C3_OUTPUT_Pin|BSP_C4_OUTPUT_Pin, GPIO_PIN_RESET);
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <MX_GPIO_Init+0xf0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	2138      	movs	r1, #56	; 0x38
 8000700:	0018      	movs	r0, r3
 8000702:	f000 fede 	bl	80014c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BSP_EXTI_3_Pin BSP_EXTI_4_Pin BSP_EXTI_1_Pin BSP_EXTI_2_Pin */
  GPIO_InitStruct.Pin = BSP_EXTI_3_Pin|BSP_EXTI_4_Pin|BSP_EXTI_1_Pin|BSP_EXTI_2_Pin;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	4a23      	ldr	r2, [pc, #140]	; (8000798 <MX_GPIO_Init+0xf4>)
 800070a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800070c:	193b      	adds	r3, r7, r4
 800070e:	2288      	movs	r2, #136	; 0x88
 8000710:	0352      	lsls	r2, r2, #13
 8000712:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	193b      	adds	r3, r7, r4
 800071c:	4a1d      	ldr	r2, [pc, #116]	; (8000794 <MX_GPIO_Init+0xf0>)
 800071e:	0019      	movs	r1, r3
 8000720:	0010      	movs	r0, r2
 8000722:	f000 fd3b 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_C1_OUTPUT_Pin */
  GPIO_InitStruct.Pin = BSP_C1_OUTPUT_Pin;
 8000726:	0021      	movs	r1, r4
 8000728:	193b      	adds	r3, r7, r4
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	0212      	lsls	r2, r2, #8
 800072e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	000c      	movs	r4, r1
 8000732:	193b      	adds	r3, r7, r4
 8000734:	2201      	movs	r2, #1
 8000736:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	193b      	adds	r3, r7, r4
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_C1_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8000744:	193a      	adds	r2, r7, r4
 8000746:	23a0      	movs	r3, #160	; 0xa0
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	0011      	movs	r1, r2
 800074c:	0018      	movs	r0, r3
 800074e:	f000 fd25 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : BSP_C2_OUTPUT_Pin BSP_C3_OUTPUT_Pin BSP_C4_OUTPUT_Pin */
  GPIO_InitStruct.Pin = BSP_C2_OUTPUT_Pin|BSP_C3_OUTPUT_Pin|BSP_C4_OUTPUT_Pin;
 8000752:	0021      	movs	r1, r4
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2238      	movs	r2, #56	; 0x38
 8000758:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2201      	movs	r2, #1
 800075e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076c:	187b      	adds	r3, r7, r1
 800076e:	4a09      	ldr	r2, [pc, #36]	; (8000794 <MX_GPIO_Init+0xf0>)
 8000770:	0019      	movs	r1, r3
 8000772:	0010      	movs	r0, r2
 8000774:	f000 fd12 	bl	800119c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2100      	movs	r1, #0
 800077c:	2007      	movs	r0, #7
 800077e:	f000 fcdb 	bl	8001138 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000782:	2007      	movs	r0, #7
 8000784:	f000 fced 	bl	8001162 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b009      	add	sp, #36	; 0x24
 800078e:	bd90      	pop	{r4, r7, pc}
 8000790:	40021000 	.word	0x40021000
 8000794:	50000400 	.word	0x50000400
 8000798:	000060c0 	.word	0x000060c0

0800079c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	0002      	movs	r2, r0
 80007a4:	1dbb      	adds	r3, r7, #6
 80007a6:	801a      	strh	r2, [r3, #0]
  currentMillis = HAL_GetTick();
 80007a8:	f000 fc10 	bl	8000fcc <HAL_GetTick>
 80007ac:	0002      	movs	r2, r0
 80007ae:	4bbc      	ldr	r3, [pc, #752]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x304>)
 80007b0:	601a      	str	r2, [r3, #0]
  if (currentMillis - previousMillis > 10) {
 80007b2:	4bbb      	ldr	r3, [pc, #748]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x304>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4bbb      	ldr	r3, [pc, #748]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x308>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	2b0a      	cmp	r3, #10
 80007be:	d800      	bhi.n	80007c2 <HAL_GPIO_EXTI_Callback+0x26>
 80007c0:	e23e      	b.n	8000c40 <HAL_GPIO_EXTI_Callback+0x4a4>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 to GPIO_INPUT*/
    GPIO_InitStructPrivate.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_13|GPIO_PIN_14;
 80007c2:	4bb9      	ldr	r3, [pc, #740]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x30c>)
 80007c4:	4ab9      	ldr	r2, [pc, #740]	; (8000aac <HAL_GPIO_EXTI_Callback+0x310>)
 80007c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80007c8:	4bb7      	ldr	r3, [pc, #732]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x30c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80007ce:	4bb6      	ldr	r3, [pc, #728]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x30c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	4bb4      	ldr	r3, [pc, #720]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x30c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 80007da:	4bb3      	ldr	r3, [pc, #716]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x30c>)
 80007dc:	4ab4      	ldr	r2, [pc, #720]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 80007de:	0019      	movs	r1, r3
 80007e0:	0010      	movs	r0, r2
 80007e2:	f000 fcdb 	bl	800119c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80007e6:	2380      	movs	r3, #128	; 0x80
 80007e8:	0219      	lsls	r1, r3, #8
 80007ea:	23a0      	movs	r3, #160	; 0xa0
 80007ec:	05db      	lsls	r3, r3, #23
 80007ee:	2201      	movs	r2, #1
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 fe66 	bl	80014c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80007f6:	4bae      	ldr	r3, [pc, #696]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	2108      	movs	r1, #8
 80007fc:	0018      	movs	r0, r3
 80007fe:	f000 fe60 	bl	80014c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000802:	4bab      	ldr	r3, [pc, #684]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 8000804:	2200      	movs	r2, #0
 8000806:	2110      	movs	r1, #16
 8000808:	0018      	movs	r0, r3
 800080a:	f000 fe5a 	bl	80014c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800080e:	4ba8      	ldr	r3, [pc, #672]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 8000810:	2200      	movs	r2, #0
 8000812:	2120      	movs	r1, #32
 8000814:	0018      	movs	r0, r3
 8000816:	f000 fe54 	bl	80014c2 <HAL_GPIO_WritePin>
    if((GPIO_Pin == GPIO_PIN_6) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)))
 800081a:	1dbb      	adds	r3, r7, #6
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	2b40      	cmp	r3, #64	; 0x40
 8000820:	d112      	bne.n	8000848 <HAL_GPIO_EXTI_Callback+0xac>
 8000822:	4ba3      	ldr	r3, [pc, #652]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 8000824:	2140      	movs	r1, #64	; 0x40
 8000826:	0018      	movs	r0, r3
 8000828:	f000 fe2e 	bl	8001488 <HAL_GPIO_ReadPin>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d00b      	beq.n	8000848 <HAL_GPIO_EXTI_Callback+0xac>
    {
      keyPressed = 49; //ASCII value of 1
 8000830:	4ba0      	ldr	r3, [pc, #640]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 8000832:	2231      	movs	r2, #49	; 0x31
 8000834:	701a      	strb	r2, [r3, #0]
      printf("KEY = %c\r\n",keyPressed);
 8000836:	4b9f      	ldr	r3, [pc, #636]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	001a      	movs	r2, r3
 800083c:	4b9e      	ldr	r3, [pc, #632]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x31c>)
 800083e:	0011      	movs	r1, r2
 8000840:	0018      	movs	r0, r3
 8000842:	f002 fc53 	bl	80030ec <iprintf>
 8000846:	e04b      	b.n	80008e0 <HAL_GPIO_EXTI_Callback+0x144>
    }
    else if((GPIO_Pin == GPIO_PIN_7) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)))
 8000848:	1dbb      	adds	r3, r7, #6
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	2b80      	cmp	r3, #128	; 0x80
 800084e:	d112      	bne.n	8000876 <HAL_GPIO_EXTI_Callback+0xda>
 8000850:	4b97      	ldr	r3, [pc, #604]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 8000852:	2180      	movs	r1, #128	; 0x80
 8000854:	0018      	movs	r0, r3
 8000856:	f000 fe17 	bl	8001488 <HAL_GPIO_ReadPin>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d00b      	beq.n	8000876 <HAL_GPIO_EXTI_Callback+0xda>
    {
    	keyPressed = 50; //ASCII value of 2
 800085e:	4b95      	ldr	r3, [pc, #596]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 8000860:	2232      	movs	r2, #50	; 0x32
 8000862:	701a      	strb	r2, [r3, #0]
    	printf("KEY = %c\r\n",keyPressed);
 8000864:	4b93      	ldr	r3, [pc, #588]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	001a      	movs	r2, r3
 800086a:	4b93      	ldr	r3, [pc, #588]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x31c>)
 800086c:	0011      	movs	r1, r2
 800086e:	0018      	movs	r0, r3
 8000870:	f002 fc3c 	bl	80030ec <iprintf>
 8000874:	e034      	b.n	80008e0 <HAL_GPIO_EXTI_Callback+0x144>
    }
    else if((GPIO_Pin == GPIO_PIN_13) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)))
 8000876:	1dbb      	adds	r3, r7, #6
 8000878:	881a      	ldrh	r2, [r3, #0]
 800087a:	2380      	movs	r3, #128	; 0x80
 800087c:	019b      	lsls	r3, r3, #6
 800087e:	429a      	cmp	r2, r3
 8000880:	d114      	bne.n	80008ac <HAL_GPIO_EXTI_Callback+0x110>
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	019b      	lsls	r3, r3, #6
 8000886:	4a8a      	ldr	r2, [pc, #552]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 8000888:	0019      	movs	r1, r3
 800088a:	0010      	movs	r0, r2
 800088c:	f000 fdfc 	bl	8001488 <HAL_GPIO_ReadPin>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d00b      	beq.n	80008ac <HAL_GPIO_EXTI_Callback+0x110>
    {
    	keyPressed = 51; //ASCII value of 3
 8000894:	4b87      	ldr	r3, [pc, #540]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 8000896:	2233      	movs	r2, #51	; 0x33
 8000898:	701a      	strb	r2, [r3, #0]
    	printf("KEY = %c\r\n",keyPressed);
 800089a:	4b86      	ldr	r3, [pc, #536]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	001a      	movs	r2, r3
 80008a0:	4b85      	ldr	r3, [pc, #532]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x31c>)
 80008a2:	0011      	movs	r1, r2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f002 fc21 	bl	80030ec <iprintf>
 80008aa:	e019      	b.n	80008e0 <HAL_GPIO_EXTI_Callback+0x144>

    }
    else if((GPIO_Pin == GPIO_PIN_14) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)))
 80008ac:	1dbb      	adds	r3, r7, #6
 80008ae:	881a      	ldrh	r2, [r3, #0]
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	01db      	lsls	r3, r3, #7
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d113      	bne.n	80008e0 <HAL_GPIO_EXTI_Callback+0x144>
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	01db      	lsls	r3, r3, #7
 80008bc:	4a7c      	ldr	r2, [pc, #496]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 80008be:	0019      	movs	r1, r3
 80008c0:	0010      	movs	r0, r2
 80008c2:	f000 fde1 	bl	8001488 <HAL_GPIO_ReadPin>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d00a      	beq.n	80008e0 <HAL_GPIO_EXTI_Callback+0x144>
    {
      keyPressed = 65; //ASCII value of A
 80008ca:	4b7a      	ldr	r3, [pc, #488]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 80008cc:	2241      	movs	r2, #65	; 0x41
 80008ce:	701a      	strb	r2, [r3, #0]
      printf("KEY = %c\r\n",keyPressed);
 80008d0:	4b78      	ldr	r3, [pc, #480]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	001a      	movs	r2, r3
 80008d6:	4b78      	ldr	r3, [pc, #480]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x31c>)
 80008d8:	0011      	movs	r1, r2
 80008da:	0018      	movs	r0, r3
 80008dc:	f002 fc06 	bl	80030ec <iprintf>
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	0219      	lsls	r1, r3, #8
 80008e4:	23a0      	movs	r3, #160	; 0xa0
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	2200      	movs	r2, #0
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fde9 	bl	80014c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80008f0:	4b6f      	ldr	r3, [pc, #444]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	2108      	movs	r1, #8
 80008f6:	0018      	movs	r0, r3
 80008f8:	f000 fde3 	bl	80014c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80008fc:	4b6c      	ldr	r3, [pc, #432]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 80008fe:	2200      	movs	r2, #0
 8000900:	2110      	movs	r1, #16
 8000902:	0018      	movs	r0, r3
 8000904:	f000 fddd 	bl	80014c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000908:	4b69      	ldr	r3, [pc, #420]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 800090a:	2200      	movs	r2, #0
 800090c:	2120      	movs	r1, #32
 800090e:	0018      	movs	r0, r3
 8000910:	f000 fdd7 	bl	80014c2 <HAL_GPIO_WritePin>
    if((GPIO_Pin == GPIO_PIN_6) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)))
 8000914:	1dbb      	adds	r3, r7, #6
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	2b40      	cmp	r3, #64	; 0x40
 800091a:	d112      	bne.n	8000942 <HAL_GPIO_EXTI_Callback+0x1a6>
 800091c:	4b64      	ldr	r3, [pc, #400]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 800091e:	2140      	movs	r1, #64	; 0x40
 8000920:	0018      	movs	r0, r3
 8000922:	f000 fdb1 	bl	8001488 <HAL_GPIO_ReadPin>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d00b      	beq.n	8000942 <HAL_GPIO_EXTI_Callback+0x1a6>
    {
    	keyPressed = 52; //ASCII value of 4
 800092a:	4b62      	ldr	r3, [pc, #392]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 800092c:	2234      	movs	r2, #52	; 0x34
 800092e:	701a      	strb	r2, [r3, #0]
    	printf("KEY = %c\r\n",keyPressed);
 8000930:	4b60      	ldr	r3, [pc, #384]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	001a      	movs	r2, r3
 8000936:	4b60      	ldr	r3, [pc, #384]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000938:	0011      	movs	r1, r2
 800093a:	0018      	movs	r0, r3
 800093c:	f002 fbd6 	bl	80030ec <iprintf>
 8000940:	e04b      	b.n	80009da <HAL_GPIO_EXTI_Callback+0x23e>
    }
    else if((GPIO_Pin == GPIO_PIN_7) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)))
 8000942:	1dbb      	adds	r3, r7, #6
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	2b80      	cmp	r3, #128	; 0x80
 8000948:	d112      	bne.n	8000970 <HAL_GPIO_EXTI_Callback+0x1d4>
 800094a:	4b59      	ldr	r3, [pc, #356]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	0018      	movs	r0, r3
 8000950:	f000 fd9a 	bl	8001488 <HAL_GPIO_ReadPin>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d00b      	beq.n	8000970 <HAL_GPIO_EXTI_Callback+0x1d4>
    {
    	keyPressed = 53; //ASCII value of 5
 8000958:	4b56      	ldr	r3, [pc, #344]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 800095a:	2235      	movs	r2, #53	; 0x35
 800095c:	701a      	strb	r2, [r3, #0]
    	printf("KEY = %c\r\n",keyPressed);
 800095e:	4b55      	ldr	r3, [pc, #340]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	001a      	movs	r2, r3
 8000964:	4b54      	ldr	r3, [pc, #336]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000966:	0011      	movs	r1, r2
 8000968:	0018      	movs	r0, r3
 800096a:	f002 fbbf 	bl	80030ec <iprintf>
 800096e:	e034      	b.n	80009da <HAL_GPIO_EXTI_Callback+0x23e>
    }
    else if((GPIO_Pin == GPIO_PIN_13) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)))
 8000970:	1dbb      	adds	r3, r7, #6
 8000972:	881a      	ldrh	r2, [r3, #0]
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	019b      	lsls	r3, r3, #6
 8000978:	429a      	cmp	r2, r3
 800097a:	d114      	bne.n	80009a6 <HAL_GPIO_EXTI_Callback+0x20a>
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	019b      	lsls	r3, r3, #6
 8000980:	4a4b      	ldr	r2, [pc, #300]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 8000982:	0019      	movs	r1, r3
 8000984:	0010      	movs	r0, r2
 8000986:	f000 fd7f 	bl	8001488 <HAL_GPIO_ReadPin>
 800098a:	1e03      	subs	r3, r0, #0
 800098c:	d00b      	beq.n	80009a6 <HAL_GPIO_EXTI_Callback+0x20a>
    {
        keyPressed = 54; //ASCII value of 6
 800098e:	4b49      	ldr	r3, [pc, #292]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 8000990:	2236      	movs	r2, #54	; 0x36
 8000992:	701a      	strb	r2, [r3, #0]
        printf("KEY = %c\r\n",keyPressed);
 8000994:	4b47      	ldr	r3, [pc, #284]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	001a      	movs	r2, r3
 800099a:	4b47      	ldr	r3, [pc, #284]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x31c>)
 800099c:	0011      	movs	r1, r2
 800099e:	0018      	movs	r0, r3
 80009a0:	f002 fba4 	bl	80030ec <iprintf>
 80009a4:	e019      	b.n	80009da <HAL_GPIO_EXTI_Callback+0x23e>
    }
    else if((GPIO_Pin == GPIO_PIN_14) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)))
 80009a6:	1dbb      	adds	r3, r7, #6
 80009a8:	881a      	ldrh	r2, [r3, #0]
 80009aa:	2380      	movs	r3, #128	; 0x80
 80009ac:	01db      	lsls	r3, r3, #7
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d113      	bne.n	80009da <HAL_GPIO_EXTI_Callback+0x23e>
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	01db      	lsls	r3, r3, #7
 80009b6:	4a3e      	ldr	r2, [pc, #248]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 80009b8:	0019      	movs	r1, r3
 80009ba:	0010      	movs	r0, r2
 80009bc:	f000 fd64 	bl	8001488 <HAL_GPIO_ReadPin>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d00a      	beq.n	80009da <HAL_GPIO_EXTI_Callback+0x23e>
    {
    	keyPressed = 66; //ASCII value of B
 80009c4:	4b3b      	ldr	r3, [pc, #236]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 80009c6:	2242      	movs	r2, #66	; 0x42
 80009c8:	701a      	strb	r2, [r3, #0]
    	printf("KEY = %c\r\n",keyPressed);
 80009ca:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	001a      	movs	r2, r3
 80009d0:	4b39      	ldr	r3, [pc, #228]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x31c>)
 80009d2:	0011      	movs	r1, r2
 80009d4:	0018      	movs	r0, r3
 80009d6:	f002 fb89 	bl	80030ec <iprintf>
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	0219      	lsls	r1, r3, #8
 80009de:	23a0      	movs	r3, #160	; 0xa0
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	2200      	movs	r2, #0
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 fd6c 	bl	80014c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80009ea:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	2108      	movs	r1, #8
 80009f0:	0018      	movs	r0, r3
 80009f2:	f000 fd66 	bl	80014c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80009f6:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	2110      	movs	r1, #16
 80009fc:	0018      	movs	r0, r3
 80009fe:	f000 fd60 	bl	80014c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000a02:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	2120      	movs	r1, #32
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f000 fd5a 	bl	80014c2 <HAL_GPIO_WritePin>
    if((GPIO_Pin == GPIO_PIN_6) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)))
 8000a0e:	1dbb      	adds	r3, r7, #6
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	2b40      	cmp	r3, #64	; 0x40
 8000a14:	d112      	bne.n	8000a3c <HAL_GPIO_EXTI_Callback+0x2a0>
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 8000a18:	2140      	movs	r1, #64	; 0x40
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 fd34 	bl	8001488 <HAL_GPIO_ReadPin>
 8000a20:	1e03      	subs	r3, r0, #0
 8000a22:	d00b      	beq.n	8000a3c <HAL_GPIO_EXTI_Callback+0x2a0>
    {
    	keyPressed = 55; //ASCII value of 7
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 8000a26:	2237      	movs	r2, #55	; 0x37
 8000a28:	701a      	strb	r2, [r3, #0]
    	printf("KEY = %c\r\n",keyPressed);
 8000a2a:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	001a      	movs	r2, r3
 8000a30:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000a32:	0011      	movs	r1, r2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f002 fb59 	bl	80030ec <iprintf>
 8000a3a:	e059      	b.n	8000af0 <HAL_GPIO_EXTI_Callback+0x354>
    }
    else if((GPIO_Pin == GPIO_PIN_7) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)))
 8000a3c:	1dbb      	adds	r3, r7, #6
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	2b80      	cmp	r3, #128	; 0x80
 8000a42:	d112      	bne.n	8000a6a <HAL_GPIO_EXTI_Callback+0x2ce>
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 8000a46:	2180      	movs	r1, #128	; 0x80
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f000 fd1d 	bl	8001488 <HAL_GPIO_ReadPin>
 8000a4e:	1e03      	subs	r3, r0, #0
 8000a50:	d00b      	beq.n	8000a6a <HAL_GPIO_EXTI_Callback+0x2ce>
    {
        keyPressed = 56; //ASCII value of 8
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 8000a54:	2238      	movs	r2, #56	; 0x38
 8000a56:	701a      	strb	r2, [r3, #0]
        printf("KEY = %c\r\n",keyPressed);
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000a60:	0011      	movs	r1, r2
 8000a62:	0018      	movs	r0, r3
 8000a64:	f002 fb42 	bl	80030ec <iprintf>
 8000a68:	e042      	b.n	8000af0 <HAL_GPIO_EXTI_Callback+0x354>
    }
    else if((GPIO_Pin == GPIO_PIN_13) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)))
 8000a6a:	1dbb      	adds	r3, r7, #6
 8000a6c:	881a      	ldrh	r2, [r3, #0]
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	019b      	lsls	r3, r3, #6
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d122      	bne.n	8000abc <HAL_GPIO_EXTI_Callback+0x320>
 8000a76:	2380      	movs	r3, #128	; 0x80
 8000a78:	019b      	lsls	r3, r3, #6
 8000a7a:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x314>)
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	0010      	movs	r0, r2
 8000a80:	f000 fd02 	bl	8001488 <HAL_GPIO_ReadPin>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d019      	beq.n	8000abc <HAL_GPIO_EXTI_Callback+0x320>
    {
    	keyPressed = 57; //ASCII value of 9
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 8000a8a:	2239      	movs	r2, #57	; 0x39
 8000a8c:	701a      	strb	r2, [r3, #0]
    	printf("KEY = %c\r\n",keyPressed);
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x318>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	001a      	movs	r2, r3
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000a96:	0011      	movs	r1, r2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f002 fb27 	bl	80030ec <iprintf>
 8000a9e:	e027      	b.n	8000af0 <HAL_GPIO_EXTI_Callback+0x354>
 8000aa0:	20000124 	.word	0x20000124
 8000aa4:	20000120 	.word	0x20000120
 8000aa8:	2000010c 	.word	0x2000010c
 8000aac:	000060c0 	.word	0x000060c0
 8000ab0:	50000400 	.word	0x50000400
 8000ab4:	20000128 	.word	0x20000128
 8000ab8:	08003e50 	.word	0x08003e50
    }
    else if((GPIO_Pin == GPIO_PIN_14) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)))
 8000abc:	1dbb      	adds	r3, r7, #6
 8000abe:	881a      	ldrh	r2, [r3, #0]
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	01db      	lsls	r3, r3, #7
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d113      	bne.n	8000af0 <HAL_GPIO_EXTI_Callback+0x354>
 8000ac8:	2380      	movs	r3, #128	; 0x80
 8000aca:	01db      	lsls	r3, r3, #7
 8000acc:	4a5e      	ldr	r2, [pc, #376]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x4ac>)
 8000ace:	0019      	movs	r1, r3
 8000ad0:	0010      	movs	r0, r2
 8000ad2:	f000 fcd9 	bl	8001488 <HAL_GPIO_ReadPin>
 8000ad6:	1e03      	subs	r3, r0, #0
 8000ad8:	d00a      	beq.n	8000af0 <HAL_GPIO_EXTI_Callback+0x354>
    {
    	keyPressed = 67; //ASCII value of C
 8000ada:	4b5c      	ldr	r3, [pc, #368]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000adc:	2243      	movs	r2, #67	; 0x43
 8000ade:	701a      	strb	r2, [r3, #0]
    	printf("KEY = %c\r\n",keyPressed);
 8000ae0:	4b5a      	ldr	r3, [pc, #360]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	4b5a      	ldr	r3, [pc, #360]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x4b4>)
 8000ae8:	0011      	movs	r1, r2
 8000aea:	0018      	movs	r0, r3
 8000aec:	f002 fafe 	bl	80030ec <iprintf>
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	0219      	lsls	r1, r3, #8
 8000af4:	23a0      	movs	r3, #160	; 0xa0
 8000af6:	05db      	lsls	r3, r3, #23
 8000af8:	2200      	movs	r2, #0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 fce1 	bl	80014c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000b00:	4b51      	ldr	r3, [pc, #324]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x4ac>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	2108      	movs	r1, #8
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 fcdb 	bl	80014c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000b0c:	4b4e      	ldr	r3, [pc, #312]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x4ac>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2110      	movs	r1, #16
 8000b12:	0018      	movs	r0, r3
 8000b14:	f000 fcd5 	bl	80014c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000b18:	4b4b      	ldr	r3, [pc, #300]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x4ac>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2120      	movs	r1, #32
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 fccf 	bl	80014c2 <HAL_GPIO_WritePin>
    if((GPIO_Pin == GPIO_PIN_6) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)))
 8000b24:	1dbb      	adds	r3, r7, #6
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	2b40      	cmp	r3, #64	; 0x40
 8000b2a:	d112      	bne.n	8000b52 <HAL_GPIO_EXTI_Callback+0x3b6>
 8000b2c:	4b46      	ldr	r3, [pc, #280]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x4ac>)
 8000b2e:	2140      	movs	r1, #64	; 0x40
 8000b30:	0018      	movs	r0, r3
 8000b32:	f000 fca9 	bl	8001488 <HAL_GPIO_ReadPin>
 8000b36:	1e03      	subs	r3, r0, #0
 8000b38:	d00b      	beq.n	8000b52 <HAL_GPIO_EXTI_Callback+0x3b6>
    {
      keyPressed = 42; //ASCII value of *
 8000b3a:	4b44      	ldr	r3, [pc, #272]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000b3c:	222a      	movs	r2, #42	; 0x2a
 8000b3e:	701a      	strb	r2, [r3, #0]
      printf("KEY = %c\r\n",keyPressed);
 8000b40:	4b42      	ldr	r3, [pc, #264]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	001a      	movs	r2, r3
 8000b46:	4b42      	ldr	r3, [pc, #264]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x4b4>)
 8000b48:	0011      	movs	r1, r2
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f002 face 	bl	80030ec <iprintf>
 8000b50:	e04b      	b.n	8000bea <HAL_GPIO_EXTI_Callback+0x44e>
    }
    else if((GPIO_Pin == GPIO_PIN_7) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)))
 8000b52:	1dbb      	adds	r3, r7, #6
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	2b80      	cmp	r3, #128	; 0x80
 8000b58:	d112      	bne.n	8000b80 <HAL_GPIO_EXTI_Callback+0x3e4>
 8000b5a:	4b3b      	ldr	r3, [pc, #236]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x4ac>)
 8000b5c:	2180      	movs	r1, #128	; 0x80
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 fc92 	bl	8001488 <HAL_GPIO_ReadPin>
 8000b64:	1e03      	subs	r3, r0, #0
 8000b66:	d00b      	beq.n	8000b80 <HAL_GPIO_EXTI_Callback+0x3e4>
    {
    	keyPressed = 48; //ASCII value of 0
 8000b68:	4b38      	ldr	r3, [pc, #224]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000b6a:	2230      	movs	r2, #48	; 0x30
 8000b6c:	701a      	strb	r2, [r3, #0]
    	printf("KEY = %c\r\n",keyPressed);
 8000b6e:	4b37      	ldr	r3, [pc, #220]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	001a      	movs	r2, r3
 8000b74:	4b36      	ldr	r3, [pc, #216]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x4b4>)
 8000b76:	0011      	movs	r1, r2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f002 fab7 	bl	80030ec <iprintf>
 8000b7e:	e034      	b.n	8000bea <HAL_GPIO_EXTI_Callback+0x44e>
    }
    else if((GPIO_Pin == GPIO_PIN_13 ) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)))
 8000b80:	1dbb      	adds	r3, r7, #6
 8000b82:	881a      	ldrh	r2, [r3, #0]
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	019b      	lsls	r3, r3, #6
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d114      	bne.n	8000bb6 <HAL_GPIO_EXTI_Callback+0x41a>
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	019b      	lsls	r3, r3, #6
 8000b90:	4a2d      	ldr	r2, [pc, #180]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x4ac>)
 8000b92:	0019      	movs	r1, r3
 8000b94:	0010      	movs	r0, r2
 8000b96:	f000 fc77 	bl	8001488 <HAL_GPIO_ReadPin>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d00b      	beq.n	8000bb6 <HAL_GPIO_EXTI_Callback+0x41a>
    {
    	keyPressed = 35; //ASCII value of #
 8000b9e:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000ba0:	2223      	movs	r2, #35	; 0x23
 8000ba2:	701a      	strb	r2, [r3, #0]
    	printf("KEY = %c\r\n",keyPressed);
 8000ba4:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	001a      	movs	r2, r3
 8000baa:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x4b4>)
 8000bac:	0011      	movs	r1, r2
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f002 fa9c 	bl	80030ec <iprintf>
 8000bb4:	e019      	b.n	8000bea <HAL_GPIO_EXTI_Callback+0x44e>
    }
    else if((GPIO_Pin == GPIO_PIN_14) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)))
 8000bb6:	1dbb      	adds	r3, r7, #6
 8000bb8:	881a      	ldrh	r2, [r3, #0]
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	01db      	lsls	r3, r3, #7
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d113      	bne.n	8000bea <HAL_GPIO_EXTI_Callback+0x44e>
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	01db      	lsls	r3, r3, #7
 8000bc6:	4a20      	ldr	r2, [pc, #128]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x4ac>)
 8000bc8:	0019      	movs	r1, r3
 8000bca:	0010      	movs	r0, r2
 8000bcc:	f000 fc5c 	bl	8001488 <HAL_GPIO_ReadPin>
 8000bd0:	1e03      	subs	r3, r0, #0
 8000bd2:	d00a      	beq.n	8000bea <HAL_GPIO_EXTI_Callback+0x44e>
    {
    	keyPressed = 68; //ASCII value of D
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000bd6:	2244      	movs	r2, #68	; 0x44
 8000bd8:	701a      	strb	r2, [r3, #0]
    	printf("KEY = %c\r\n",keyPressed);
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	001a      	movs	r2, r3
 8000be0:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x4b4>)
 8000be2:	0011      	movs	r1, r2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f002 fa81 	bl	80030ec <iprintf>
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	0219      	lsls	r1, r3, #8
 8000bee:	23a0      	movs	r3, #160	; 0xa0
 8000bf0:	05db      	lsls	r3, r3, #23
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f000 fc64 	bl	80014c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x4ac>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2108      	movs	r1, #8
 8000c00:	0018      	movs	r0, r3
 8000c02:	f000 fc5e 	bl	80014c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x4ac>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2110      	movs	r1, #16
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f000 fc58 	bl	80014c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x4ac>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	2120      	movs	r1, #32
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f000 fc52 	bl	80014c2 <HAL_GPIO_WritePin>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8000c20:	2288      	movs	r2, #136	; 0x88
 8000c22:	0352      	lsls	r2, r2, #13
 8000c24:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8000c28:	2202      	movs	r2, #2
 8000c2a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8000c2e:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x4ac>)
 8000c30:	0019      	movs	r1, r3
 8000c32:	0010      	movs	r0, r2
 8000c34:	f000 fab2 	bl	800119c <HAL_GPIO_Init>
    previousMillis = currentMillis;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <HAL_GPIO_EXTI_Callback+0x4bc>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <HAL_GPIO_EXTI_Callback+0x4c0>)
 8000c3e:	601a      	str	r2, [r3, #0]
  }
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b002      	add	sp, #8
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	50000400 	.word	0x50000400
 8000c4c:	20000128 	.word	0x20000128
 8000c50:	08003e50 	.word	0x08003e50
 8000c54:	2000010c 	.word	0x2000010c
 8000c58:	20000124 	.word	0x20000124
 8000c5c:	20000120 	.word	0x20000120

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <Error_Handler+0x8>
	...

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <HAL_MspInit+0x24>)
 8000c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_MspInit+0x24>)
 8000c76:	2101      	movs	r1, #1
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <HAL_MspInit+0x24>)
 8000c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_MspInit+0x24>)
 8000c82:	2180      	movs	r1, #128	; 0x80
 8000c84:	0549      	lsls	r1, r1, #21
 8000c86:	430a      	orrs	r2, r1
 8000c88:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40021000 	.word	0x40021000

08000c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	240c      	movs	r4, #12
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	2314      	movs	r3, #20
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	f002 fa7c 	bl	80031a4 <memset>
  if(huart->Instance==USART1)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a18      	ldr	r2, [pc, #96]	; (8000d14 <HAL_UART_MspInit+0x80>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d12a      	bne.n	8000d0c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <HAL_UART_MspInit+0x84>)
 8000cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <HAL_UART_MspInit+0x84>)
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	01c9      	lsls	r1, r1, #7
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <HAL_UART_MspInit+0x84>)
 8000cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <HAL_UART_MspInit+0x84>)
 8000cca:	2101      	movs	r1, #1
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <HAL_UART_MspInit+0x84>)
 8000cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_USART1_TX_Pin|BSP_USART1_RX_Pin;
 8000cdc:	193b      	adds	r3, r7, r4
 8000cde:	22c0      	movs	r2, #192	; 0xc0
 8000ce0:	00d2      	lsls	r2, r2, #3
 8000ce2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	0021      	movs	r1, r4
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2202      	movs	r2, #2
 8000cea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	187a      	adds	r2, r7, r1
 8000d00:	23a0      	movs	r3, #160	; 0xa0
 8000d02:	05db      	lsls	r3, r3, #23
 8000d04:	0011      	movs	r1, r2
 8000d06:	0018      	movs	r0, r3
 8000d08:	f000 fa48 	bl	800119c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b009      	add	sp, #36	; 0x24
 8000d12:	bd90      	pop	{r4, r7, pc}
 8000d14:	40013800 	.word	0x40013800
 8000d18:	40021000 	.word	0x40021000

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d20:	e7fe      	b.n	8000d20 <NMI_Handler+0x4>

08000d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <HardFault_Handler+0x4>

08000d28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d40:	f000 f932 	bl	8000fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BSP_EXTI_1_Pin);
 8000d4e:	2040      	movs	r0, #64	; 0x40
 8000d50:	f000 fbd4 	bl	80014fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BSP_EXTI_2_Pin);
 8000d54:	2080      	movs	r0, #128	; 0x80
 8000d56:	f000 fbd1 	bl	80014fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BSP_EXTI_3_Pin);
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	019b      	lsls	r3, r3, #6
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f000 fbcc 	bl	80014fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BSP_EXTI_4_Pin);
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	01db      	lsls	r3, r3, #7
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f000 fbc7 	bl	80014fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e00a      	b.n	8000d9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d86:	e000      	b.n	8000d8a <_read+0x16>
 8000d88:	bf00      	nop
 8000d8a:	0001      	movs	r1, r0
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	b2ca      	uxtb	r2, r1
 8000d94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dbf0      	blt.n	8000d86 <_read+0x12>
  }

  return len;
 8000da4:	687b      	ldr	r3, [r7, #4]
}
 8000da6:	0018      	movs	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b006      	add	sp, #24
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&huart1, (const unsigned char*) ptr, len, 2000);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	23fa      	movs	r3, #250	; 0xfa
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <_write+0x28>)
 8000dc8:	f001 fb7e 	bl	80024c8 <HAL_UART_Transmit>
  return len;
 8000dcc:	687b      	ldr	r3, [r7, #4]
}
 8000dce:	0018      	movs	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b004      	add	sp, #16
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	20000084 	.word	0x20000084

08000ddc <_close>:

int _close(int file)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	425b      	negs	r3, r3
}
 8000de8:	0018      	movs	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	0192      	lsls	r2, r2, #6
 8000e00:	605a      	str	r2, [r3, #4]
  return 0;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	0018      	movs	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b002      	add	sp, #8
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <_isatty>:

int _isatty(int file)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e14:	2301      	movs	r3, #1
}
 8000e16:	0018      	movs	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b002      	add	sp, #8
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b084      	sub	sp, #16
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b004      	add	sp, #16
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <_sbrk+0x5c>)
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <_sbrk+0x60>)
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <_sbrk+0x64>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <_sbrk+0x68>)
 8000e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	18d3      	adds	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d207      	bcs.n	8000e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e64:	f002 f9f4 	bl	8003250 <__errno>
 8000e68:	0003      	movs	r3, r0
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	425b      	negs	r3, r3
 8000e72:	e009      	b.n	8000e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	18d2      	adds	r2, r2, r3
 8000e82:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <_sbrk+0x64>)
 8000e84:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	0018      	movs	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b006      	add	sp, #24
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20002000 	.word	0x20002000
 8000e94:	00000400 	.word	0x00000400
 8000e98:	2000012c 	.word	0x2000012c
 8000e9c:	20000280 	.word	0x20000280

08000ea0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	46c0      	nop			; (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eae:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eb0:	f7ff fff6 	bl	8000ea0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb4:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eb6:	490d      	ldr	r1, [pc, #52]	; (8000eec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <LoopForever+0xe>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ecc:	4c0a      	ldr	r4, [pc, #40]	; (8000ef8 <LoopForever+0x16>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eda:	f002 f9bf 	bl	800325c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ede:	f7ff fb0f 	bl	8000500 <main>

08000ee2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ee2:	e7fe      	b.n	8000ee2 <LoopForever>
  ldr   r0, =_estack
 8000ee4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ef0:	08003f0c 	.word	0x08003f0c
  ldr r2, =_sbss
 8000ef4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ef8:	20000280 	.word	0x20000280

08000efc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC1_COMP_IRQHandler>
	...

08000f00 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_Init+0x3c>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_Init+0x3c>)
 8000f12:	2140      	movs	r1, #64	; 0x40
 8000f14:	430a      	orrs	r2, r1
 8000f16:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f000 f811 	bl	8000f40 <HAL_InitTick>
 8000f1e:	1e03      	subs	r3, r0, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	e001      	b.n	8000f2e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f2a:	f7ff fe9f 	bl	8000c6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	781b      	ldrb	r3, [r3, #0]
}
 8000f32:	0018      	movs	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b002      	add	sp, #8
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	40022000 	.word	0x40022000

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_InitTick+0x5c>)
 8000f4a:	681c      	ldr	r4, [r3, #0]
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <HAL_InitTick+0x60>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	0019      	movs	r1, r3
 8000f52:	23fa      	movs	r3, #250	; 0xfa
 8000f54:	0098      	lsls	r0, r3, #2
 8000f56:	f7ff f8e1 	bl	800011c <__udivsi3>
 8000f5a:	0003      	movs	r3, r0
 8000f5c:	0019      	movs	r1, r3
 8000f5e:	0020      	movs	r0, r4
 8000f60:	f7ff f8dc 	bl	800011c <__udivsi3>
 8000f64:	0003      	movs	r3, r0
 8000f66:	0018      	movs	r0, r3
 8000f68:	f000 f90b 	bl	8001182 <HAL_SYSTICK_Config>
 8000f6c:	1e03      	subs	r3, r0, #0
 8000f6e:	d001      	beq.n	8000f74 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e00f      	b.n	8000f94 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d80b      	bhi.n	8000f92 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	425b      	negs	r3, r3
 8000f80:	2200      	movs	r2, #0
 8000f82:	0018      	movs	r0, r3
 8000f84:	f000 f8d8 	bl	8001138 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_InitTick+0x64>)
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	0018      	movs	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b003      	add	sp, #12
 8000f9a:	bd90      	pop	{r4, r7, pc}
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000004 	.word	0x20000004

08000fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <HAL_IncTick+0x1c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	001a      	movs	r2, r3
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_IncTick+0x20>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	18d2      	adds	r2, r2, r3
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_IncTick+0x20>)
 8000fba:	601a      	str	r2, [r3, #0]
}
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000130 	.word	0x20000130

08000fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b02      	ldr	r3, [pc, #8]	; (8000fdc <HAL_GetTick+0x10>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	20000130 	.word	0x20000130

08000fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	1dfb      	adds	r3, r7, #7
 8000fea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	1dfb      	adds	r3, r7, #7
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ff2:	d809      	bhi.n	8001008 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	001a      	movs	r2, r3
 8000ffa:	231f      	movs	r3, #31
 8000ffc:	401a      	ands	r2, r3
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <__NVIC_EnableIRQ+0x30>)
 8001000:	2101      	movs	r1, #1
 8001002:	4091      	lsls	r1, r2
 8001004:	000a      	movs	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
  }
}
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	b002      	add	sp, #8
 800100e:	bd80      	pop	{r7, pc}
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	0002      	movs	r2, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b7f      	cmp	r3, #127	; 0x7f
 8001028:	d828      	bhi.n	800107c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800102a:	4a2f      	ldr	r2, [pc, #188]	; (80010e8 <__NVIC_SetPriority+0xd4>)
 800102c:	1dfb      	adds	r3, r7, #7
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b25b      	sxtb	r3, r3
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	33c0      	adds	r3, #192	; 0xc0
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	589b      	ldr	r3, [r3, r2]
 800103a:	1dfa      	adds	r2, r7, #7
 800103c:	7812      	ldrb	r2, [r2, #0]
 800103e:	0011      	movs	r1, r2
 8001040:	2203      	movs	r2, #3
 8001042:	400a      	ands	r2, r1
 8001044:	00d2      	lsls	r2, r2, #3
 8001046:	21ff      	movs	r1, #255	; 0xff
 8001048:	4091      	lsls	r1, r2
 800104a:	000a      	movs	r2, r1
 800104c:	43d2      	mvns	r2, r2
 800104e:	401a      	ands	r2, r3
 8001050:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	019b      	lsls	r3, r3, #6
 8001056:	22ff      	movs	r2, #255	; 0xff
 8001058:	401a      	ands	r2, r3
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	0018      	movs	r0, r3
 8001060:	2303      	movs	r3, #3
 8001062:	4003      	ands	r3, r0
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001068:	481f      	ldr	r0, [pc, #124]	; (80010e8 <__NVIC_SetPriority+0xd4>)
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b25b      	sxtb	r3, r3
 8001070:	089b      	lsrs	r3, r3, #2
 8001072:	430a      	orrs	r2, r1
 8001074:	33c0      	adds	r3, #192	; 0xc0
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800107a:	e031      	b.n	80010e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800107c:	4a1b      	ldr	r2, [pc, #108]	; (80010ec <__NVIC_SetPriority+0xd8>)
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	0019      	movs	r1, r3
 8001084:	230f      	movs	r3, #15
 8001086:	400b      	ands	r3, r1
 8001088:	3b08      	subs	r3, #8
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3306      	adds	r3, #6
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	18d3      	adds	r3, r2, r3
 8001092:	3304      	adds	r3, #4
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	1dfa      	adds	r2, r7, #7
 8001098:	7812      	ldrb	r2, [r2, #0]
 800109a:	0011      	movs	r1, r2
 800109c:	2203      	movs	r2, #3
 800109e:	400a      	ands	r2, r1
 80010a0:	00d2      	lsls	r2, r2, #3
 80010a2:	21ff      	movs	r1, #255	; 0xff
 80010a4:	4091      	lsls	r1, r2
 80010a6:	000a      	movs	r2, r1
 80010a8:	43d2      	mvns	r2, r2
 80010aa:	401a      	ands	r2, r3
 80010ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	019b      	lsls	r3, r3, #6
 80010b2:	22ff      	movs	r2, #255	; 0xff
 80010b4:	401a      	ands	r2, r3
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	0018      	movs	r0, r3
 80010bc:	2303      	movs	r3, #3
 80010be:	4003      	ands	r3, r0
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010c4:	4809      	ldr	r0, [pc, #36]	; (80010ec <__NVIC_SetPriority+0xd8>)
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	001c      	movs	r4, r3
 80010cc:	230f      	movs	r3, #15
 80010ce:	4023      	ands	r3, r4
 80010d0:	3b08      	subs	r3, #8
 80010d2:	089b      	lsrs	r3, r3, #2
 80010d4:	430a      	orrs	r2, r1
 80010d6:	3306      	adds	r3, #6
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	18c3      	adds	r3, r0, r3
 80010dc:	3304      	adds	r3, #4
 80010de:	601a      	str	r2, [r3, #0]
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b003      	add	sp, #12
 80010e6:	bd90      	pop	{r4, r7, pc}
 80010e8:	e000e100 	.word	0xe000e100
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	1e5a      	subs	r2, r3, #1
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	045b      	lsls	r3, r3, #17
 8001100:	429a      	cmp	r2, r3
 8001102:	d301      	bcc.n	8001108 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001104:	2301      	movs	r3, #1
 8001106:	e010      	b.n	800112a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <SysTick_Config+0x44>)
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	3a01      	subs	r2, #1
 800110e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001110:	2301      	movs	r3, #1
 8001112:	425b      	negs	r3, r3
 8001114:	2103      	movs	r1, #3
 8001116:	0018      	movs	r0, r3
 8001118:	f7ff ff7c 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <SysTick_Config+0x44>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SysTick_Config+0x44>)
 8001124:	2207      	movs	r2, #7
 8001126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001128:	2300      	movs	r3, #0
}
 800112a:	0018      	movs	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	e000e010 	.word	0xe000e010

08001138 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	210f      	movs	r1, #15
 8001144:	187b      	adds	r3, r7, r1
 8001146:	1c02      	adds	r2, r0, #0
 8001148:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	187b      	adds	r3, r7, r1
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b25b      	sxtb	r3, r3
 8001152:	0011      	movs	r1, r2
 8001154:	0018      	movs	r0, r3
 8001156:	f7ff ff5d 	bl	8001014 <__NVIC_SetPriority>
}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	46bd      	mov	sp, r7
 800115e:	b004      	add	sp, #16
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	0002      	movs	r2, r0
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b25b      	sxtb	r3, r3
 8001174:	0018      	movs	r0, r3
 8001176:	f7ff ff33 	bl	8000fe0 <__NVIC_EnableIRQ>
}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	b002      	add	sp, #8
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	0018      	movs	r0, r3
 800118e:	f7ff ffaf 	bl	80010f0 <SysTick_Config>
 8001192:	0003      	movs	r3, r0
}
 8001194:	0018      	movs	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	b002      	add	sp, #8
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80011b2:	e14f      	b.n	8001454 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2101      	movs	r1, #1
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4091      	lsls	r1, r2
 80011be:	000a      	movs	r2, r1
 80011c0:	4013      	ands	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d100      	bne.n	80011cc <HAL_GPIO_Init+0x30>
 80011ca:	e140      	b.n	800144e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2203      	movs	r2, #3
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d005      	beq.n	80011e4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2203      	movs	r2, #3
 80011de:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d130      	bne.n	8001246 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	409a      	lsls	r2, r3
 80011f2:	0013      	movs	r3, r2
 80011f4:	43da      	mvns	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	409a      	lsls	r2, r3
 8001206:	0013      	movs	r3, r2
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121a:	2201      	movs	r2, #1
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
 8001220:	0013      	movs	r3, r2
 8001222:	43da      	mvns	r2, r3
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	091b      	lsrs	r3, r3, #4
 8001230:	2201      	movs	r2, #1
 8001232:	401a      	ands	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	409a      	lsls	r2, r3
 8001238:	0013      	movs	r3, r2
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2203      	movs	r2, #3
 800124c:	4013      	ands	r3, r2
 800124e:	2b03      	cmp	r3, #3
 8001250:	d017      	beq.n	8001282 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	409a      	lsls	r2, r3
 8001260:	0013      	movs	r3, r2
 8001262:	43da      	mvns	r2, r3
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	409a      	lsls	r2, r3
 8001274:	0013      	movs	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2203      	movs	r2, #3
 8001288:	4013      	ands	r3, r2
 800128a:	2b02      	cmp	r3, #2
 800128c:	d123      	bne.n	80012d6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	58d3      	ldr	r3, [r2, r3]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	2207      	movs	r2, #7
 80012a0:	4013      	ands	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	220f      	movs	r2, #15
 80012a6:	409a      	lsls	r2, r3
 80012a8:	0013      	movs	r3, r2
 80012aa:	43da      	mvns	r2, r3
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	691a      	ldr	r2, [r3, #16]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	2107      	movs	r1, #7
 80012ba:	400b      	ands	r3, r1
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	409a      	lsls	r2, r3
 80012c0:	0013      	movs	r3, r2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	08da      	lsrs	r2, r3, #3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3208      	adds	r2, #8
 80012d0:	0092      	lsls	r2, r2, #2
 80012d2:	6939      	ldr	r1, [r7, #16]
 80012d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	409a      	lsls	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	43da      	mvns	r2, r3
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2203      	movs	r2, #3
 80012f4:	401a      	ands	r2, r3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	409a      	lsls	r2, r3
 80012fc:	0013      	movs	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	23c0      	movs	r3, #192	; 0xc0
 8001310:	029b      	lsls	r3, r3, #10
 8001312:	4013      	ands	r3, r2
 8001314:	d100      	bne.n	8001318 <HAL_GPIO_Init+0x17c>
 8001316:	e09a      	b.n	800144e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001318:	4b54      	ldr	r3, [pc, #336]	; (800146c <HAL_GPIO_Init+0x2d0>)
 800131a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800131c:	4b53      	ldr	r3, [pc, #332]	; (800146c <HAL_GPIO_Init+0x2d0>)
 800131e:	2101      	movs	r1, #1
 8001320:	430a      	orrs	r2, r1
 8001322:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001324:	4a52      	ldr	r2, [pc, #328]	; (8001470 <HAL_GPIO_Init+0x2d4>)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3302      	adds	r3, #2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	589b      	ldr	r3, [r3, r2]
 8001330:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2203      	movs	r2, #3
 8001336:	4013      	ands	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	220f      	movs	r2, #15
 800133c:	409a      	lsls	r2, r3
 800133e:	0013      	movs	r3, r2
 8001340:	43da      	mvns	r2, r3
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	23a0      	movs	r3, #160	; 0xa0
 800134c:	05db      	lsls	r3, r3, #23
 800134e:	429a      	cmp	r2, r3
 8001350:	d019      	beq.n	8001386 <HAL_GPIO_Init+0x1ea>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a47      	ldr	r2, [pc, #284]	; (8001474 <HAL_GPIO_Init+0x2d8>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0x1e6>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a46      	ldr	r2, [pc, #280]	; (8001478 <HAL_GPIO_Init+0x2dc>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00d      	beq.n	800137e <HAL_GPIO_Init+0x1e2>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a45      	ldr	r2, [pc, #276]	; (800147c <HAL_GPIO_Init+0x2e0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d007      	beq.n	800137a <HAL_GPIO_Init+0x1de>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a44      	ldr	r2, [pc, #272]	; (8001480 <HAL_GPIO_Init+0x2e4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d101      	bne.n	8001376 <HAL_GPIO_Init+0x1da>
 8001372:	2305      	movs	r3, #5
 8001374:	e008      	b.n	8001388 <HAL_GPIO_Init+0x1ec>
 8001376:	2306      	movs	r3, #6
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x1ec>
 800137a:	2303      	movs	r3, #3
 800137c:	e004      	b.n	8001388 <HAL_GPIO_Init+0x1ec>
 800137e:	2302      	movs	r3, #2
 8001380:	e002      	b.n	8001388 <HAL_GPIO_Init+0x1ec>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <HAL_GPIO_Init+0x1ec>
 8001386:	2300      	movs	r3, #0
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	2103      	movs	r1, #3
 800138c:	400a      	ands	r2, r1
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	4093      	lsls	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001398:	4935      	ldr	r1, [pc, #212]	; (8001470 <HAL_GPIO_Init+0x2d4>)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a6:	4b37      	ldr	r3, [pc, #220]	; (8001484 <HAL_GPIO_Init+0x2e8>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43da      	mvns	r2, r3
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	035b      	lsls	r3, r3, #13
 80013be:	4013      	ands	r3, r2
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013ca:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <HAL_GPIO_Init+0x2e8>)
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013d0:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <HAL_GPIO_Init+0x2e8>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43da      	mvns	r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	039b      	lsls	r3, r3, #14
 80013e8:	4013      	ands	r3, r2
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013f4:	4b23      	ldr	r3, [pc, #140]	; (8001484 <HAL_GPIO_Init+0x2e8>)
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <HAL_GPIO_Init+0x2e8>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43da      	mvns	r2, r3
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	029b      	lsls	r3, r3, #10
 8001412:	4013      	ands	r3, r2
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <HAL_GPIO_Init+0x2e8>)
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <HAL_GPIO_Init+0x2e8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43da      	mvns	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	025b      	lsls	r3, r3, #9
 800143c:	4013      	ands	r3, r2
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_GPIO_Init+0x2e8>)
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	40da      	lsrs	r2, r3
 800145c:	1e13      	subs	r3, r2, #0
 800145e:	d000      	beq.n	8001462 <HAL_GPIO_Init+0x2c6>
 8001460:	e6a8      	b.n	80011b4 <HAL_GPIO_Init+0x18>
  }
}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	46c0      	nop			; (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	b006      	add	sp, #24
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	40010000 	.word	0x40010000
 8001474:	50000400 	.word	0x50000400
 8001478:	50000800 	.word	0x50000800
 800147c:	50000c00 	.word	0x50000c00
 8001480:	50001c00 	.word	0x50001c00
 8001484:	40010400 	.word	0x40010400

08001488 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	000a      	movs	r2, r1
 8001492:	1cbb      	adds	r3, r7, #2
 8001494:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	1cba      	adds	r2, r7, #2
 800149c:	8812      	ldrh	r2, [r2, #0]
 800149e:	4013      	ands	r3, r2
 80014a0:	d004      	beq.n	80014ac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80014a2:	230f      	movs	r3, #15
 80014a4:	18fb      	adds	r3, r7, r3
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
 80014aa:	e003      	b.n	80014b4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ac:	230f      	movs	r3, #15
 80014ae:	18fb      	adds	r3, r7, r3
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80014b4:	230f      	movs	r3, #15
 80014b6:	18fb      	adds	r3, r7, r3
 80014b8:	781b      	ldrb	r3, [r3, #0]
}
 80014ba:	0018      	movs	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	b004      	add	sp, #16
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	0008      	movs	r0, r1
 80014cc:	0011      	movs	r1, r2
 80014ce:	1cbb      	adds	r3, r7, #2
 80014d0:	1c02      	adds	r2, r0, #0
 80014d2:	801a      	strh	r2, [r3, #0]
 80014d4:	1c7b      	adds	r3, r7, #1
 80014d6:	1c0a      	adds	r2, r1, #0
 80014d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014da:	1c7b      	adds	r3, r7, #1
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d004      	beq.n	80014ec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e2:	1cbb      	adds	r3, r7, #2
 80014e4:	881a      	ldrh	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80014ea:	e003      	b.n	80014f4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80014ec:	1cbb      	adds	r3, r7, #2
 80014ee:	881a      	ldrh	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014f4:	46c0      	nop			; (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b002      	add	sp, #8
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	0002      	movs	r2, r0
 8001504:	1dbb      	adds	r3, r7, #6
 8001506:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	1dba      	adds	r2, r7, #6
 800150e:	8812      	ldrh	r2, [r2, #0]
 8001510:	4013      	ands	r3, r2
 8001512:	d008      	beq.n	8001526 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001516:	1dba      	adds	r2, r7, #6
 8001518:	8812      	ldrh	r2, [r2, #0]
 800151a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800151c:	1dbb      	adds	r3, r7, #6
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff f93b 	bl	800079c <HAL_GPIO_EXTI_Callback>
  }
}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	46bd      	mov	sp, r7
 800152a:	b002      	add	sp, #8
 800152c:	bd80      	pop	{r7, pc}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	40010400 	.word	0x40010400

08001534 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001534:	b5b0      	push	{r4, r5, r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	f000 fbaf 	bl	8001ca6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001548:	4bcf      	ldr	r3, [pc, #828]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	220c      	movs	r2, #12
 800154e:	4013      	ands	r3, r2
 8001550:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001552:	4bcd      	ldr	r3, [pc, #820]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	025b      	lsls	r3, r3, #9
 800155a:	4013      	ands	r3, r2
 800155c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2201      	movs	r2, #1
 8001564:	4013      	ands	r3, r2
 8001566:	d100      	bne.n	800156a <HAL_RCC_OscConfig+0x36>
 8001568:	e07e      	b.n	8001668 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800156a:	6a3b      	ldr	r3, [r7, #32]
 800156c:	2b08      	cmp	r3, #8
 800156e:	d007      	beq.n	8001580 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	2b0c      	cmp	r3, #12
 8001574:	d112      	bne.n	800159c <HAL_RCC_OscConfig+0x68>
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	429a      	cmp	r2, r3
 800157e:	d10d      	bne.n	800159c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	4bc1      	ldr	r3, [pc, #772]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	029b      	lsls	r3, r3, #10
 8001588:	4013      	ands	r3, r2
 800158a:	d100      	bne.n	800158e <HAL_RCC_OscConfig+0x5a>
 800158c:	e06b      	b.n	8001666 <HAL_RCC_OscConfig+0x132>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d167      	bne.n	8001666 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	f000 fb85 	bl	8001ca6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	025b      	lsls	r3, r3, #9
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d107      	bne.n	80015b8 <HAL_RCC_OscConfig+0x84>
 80015a8:	4bb7      	ldr	r3, [pc, #732]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4bb6      	ldr	r3, [pc, #728]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80015ae:	2180      	movs	r1, #128	; 0x80
 80015b0:	0249      	lsls	r1, r1, #9
 80015b2:	430a      	orrs	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e027      	b.n	8001608 <HAL_RCC_OscConfig+0xd4>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	23a0      	movs	r3, #160	; 0xa0
 80015be:	02db      	lsls	r3, r3, #11
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d10e      	bne.n	80015e2 <HAL_RCC_OscConfig+0xae>
 80015c4:	4bb0      	ldr	r3, [pc, #704]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4baf      	ldr	r3, [pc, #700]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80015ca:	2180      	movs	r1, #128	; 0x80
 80015cc:	02c9      	lsls	r1, r1, #11
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	4bad      	ldr	r3, [pc, #692]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4bac      	ldr	r3, [pc, #688]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	0249      	lsls	r1, r1, #9
 80015dc:	430a      	orrs	r2, r1
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	e012      	b.n	8001608 <HAL_RCC_OscConfig+0xd4>
 80015e2:	4ba9      	ldr	r3, [pc, #676]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4ba8      	ldr	r3, [pc, #672]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80015e8:	49a8      	ldr	r1, [pc, #672]	; (800188c <HAL_RCC_OscConfig+0x358>)
 80015ea:	400a      	ands	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	4ba6      	ldr	r3, [pc, #664]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	025b      	lsls	r3, r3, #9
 80015f6:	4013      	ands	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4ba2      	ldr	r3, [pc, #648]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4ba1      	ldr	r3, [pc, #644]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 8001602:	49a3      	ldr	r1, [pc, #652]	; (8001890 <HAL_RCC_OscConfig+0x35c>)
 8001604:	400a      	ands	r2, r1
 8001606:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d015      	beq.n	800163c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fcdc 	bl	8000fcc <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001618:	e009      	b.n	800162e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800161a:	f7ff fcd7 	bl	8000fcc <HAL_GetTick>
 800161e:	0002      	movs	r2, r0
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b64      	cmp	r3, #100	; 0x64
 8001626:	d902      	bls.n	800162e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	f000 fb3c 	bl	8001ca6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800162e:	4b96      	ldr	r3, [pc, #600]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	029b      	lsls	r3, r3, #10
 8001636:	4013      	ands	r3, r2
 8001638:	d0ef      	beq.n	800161a <HAL_RCC_OscConfig+0xe6>
 800163a:	e015      	b.n	8001668 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fcc6 	bl	8000fcc <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001646:	f7ff fcc1 	bl	8000fcc <HAL_GetTick>
 800164a:	0002      	movs	r2, r0
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b64      	cmp	r3, #100	; 0x64
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e326      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001658:	4b8b      	ldr	r3, [pc, #556]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	029b      	lsls	r3, r3, #10
 8001660:	4013      	ands	r3, r2
 8001662:	d1f0      	bne.n	8001646 <HAL_RCC_OscConfig+0x112>
 8001664:	e000      	b.n	8001668 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001666:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2202      	movs	r2, #2
 800166e:	4013      	ands	r3, r2
 8001670:	d100      	bne.n	8001674 <HAL_RCC_OscConfig+0x140>
 8001672:	e08b      	b.n	800178c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	2b04      	cmp	r3, #4
 800167e:	d005      	beq.n	800168c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	2b0c      	cmp	r3, #12
 8001684:	d13e      	bne.n	8001704 <HAL_RCC_OscConfig+0x1d0>
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d13b      	bne.n	8001704 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800168c:	4b7e      	ldr	r3, [pc, #504]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2204      	movs	r2, #4
 8001692:	4013      	ands	r3, r2
 8001694:	d004      	beq.n	80016a0 <HAL_RCC_OscConfig+0x16c>
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e302      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a0:	4b79      	ldr	r3, [pc, #484]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	4a7b      	ldr	r2, [pc, #492]	; (8001894 <HAL_RCC_OscConfig+0x360>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	0019      	movs	r1, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	021a      	lsls	r2, r3, #8
 80016b0:	4b75      	ldr	r3, [pc, #468]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80016b2:	430a      	orrs	r2, r1
 80016b4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016b6:	4b74      	ldr	r3, [pc, #464]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2209      	movs	r2, #9
 80016bc:	4393      	bics	r3, r2
 80016be:	0019      	movs	r1, r3
 80016c0:	4b71      	ldr	r3, [pc, #452]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016c8:	f000 fc40 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 80016cc:	0001      	movs	r1, r0
 80016ce:	4b6e      	ldr	r3, [pc, #440]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	091b      	lsrs	r3, r3, #4
 80016d4:	220f      	movs	r2, #15
 80016d6:	4013      	ands	r3, r2
 80016d8:	4a6f      	ldr	r2, [pc, #444]	; (8001898 <HAL_RCC_OscConfig+0x364>)
 80016da:	5cd3      	ldrb	r3, [r2, r3]
 80016dc:	000a      	movs	r2, r1
 80016de:	40da      	lsrs	r2, r3
 80016e0:	4b6e      	ldr	r3, [pc, #440]	; (800189c <HAL_RCC_OscConfig+0x368>)
 80016e2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80016e4:	4b6e      	ldr	r3, [pc, #440]	; (80018a0 <HAL_RCC_OscConfig+0x36c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2513      	movs	r5, #19
 80016ea:	197c      	adds	r4, r7, r5
 80016ec:	0018      	movs	r0, r3
 80016ee:	f7ff fc27 	bl	8000f40 <HAL_InitTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80016f6:	197b      	adds	r3, r7, r5
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d046      	beq.n	800178c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80016fe:	197b      	adds	r3, r7, r5
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	e2d0      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d027      	beq.n	800175a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800170a:	4b5f      	ldr	r3, [pc, #380]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2209      	movs	r2, #9
 8001710:	4393      	bics	r3, r2
 8001712:	0019      	movs	r1, r3
 8001714:	4b5c      	ldr	r3, [pc, #368]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	430a      	orrs	r2, r1
 800171a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff fc56 	bl	8000fcc <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001726:	f7ff fc51 	bl	8000fcc <HAL_GetTick>
 800172a:	0002      	movs	r2, r0
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e2b6      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001738:	4b53      	ldr	r3, [pc, #332]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2204      	movs	r2, #4
 800173e:	4013      	ands	r3, r2
 8001740:	d0f1      	beq.n	8001726 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001742:	4b51      	ldr	r3, [pc, #324]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	4a53      	ldr	r2, [pc, #332]	; (8001894 <HAL_RCC_OscConfig+0x360>)
 8001748:	4013      	ands	r3, r2
 800174a:	0019      	movs	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	021a      	lsls	r2, r3, #8
 8001752:	4b4d      	ldr	r3, [pc, #308]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 8001754:	430a      	orrs	r2, r1
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	e018      	b.n	800178c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175a:	4b4b      	ldr	r3, [pc, #300]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b4a      	ldr	r3, [pc, #296]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 8001760:	2101      	movs	r1, #1
 8001762:	438a      	bics	r2, r1
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7ff fc31 	bl	8000fcc <HAL_GetTick>
 800176a:	0003      	movs	r3, r0
 800176c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001770:	f7ff fc2c 	bl	8000fcc <HAL_GetTick>
 8001774:	0002      	movs	r2, r0
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e291      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001782:	4b41      	ldr	r3, [pc, #260]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2204      	movs	r2, #4
 8001788:	4013      	ands	r3, r2
 800178a:	d1f1      	bne.n	8001770 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2210      	movs	r2, #16
 8001792:	4013      	ands	r3, r2
 8001794:	d100      	bne.n	8001798 <HAL_RCC_OscConfig+0x264>
 8001796:	e0a1      	b.n	80018dc <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d140      	bne.n	8001820 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800179e:	4b3a      	ldr	r3, [pc, #232]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4013      	ands	r3, r2
 80017a8:	d005      	beq.n	80017b6 <HAL_RCC_OscConfig+0x282>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e277      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017b6:	4b34      	ldr	r3, [pc, #208]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4a3a      	ldr	r2, [pc, #232]	; (80018a4 <HAL_RCC_OscConfig+0x370>)
 80017bc:	4013      	ands	r3, r2
 80017be:	0019      	movs	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017c4:	4b30      	ldr	r3, [pc, #192]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80017c6:	430a      	orrs	r2, r1
 80017c8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ca:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	0a19      	lsrs	r1, r3, #8
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	061a      	lsls	r2, r3, #24
 80017d8:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80017da:	430a      	orrs	r2, r1
 80017dc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	0b5b      	lsrs	r3, r3, #13
 80017e4:	3301      	adds	r3, #1
 80017e6:	2280      	movs	r2, #128	; 0x80
 80017e8:	0212      	lsls	r2, r2, #8
 80017ea:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80017ec:	4b26      	ldr	r3, [pc, #152]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	210f      	movs	r1, #15
 80017f4:	400b      	ands	r3, r1
 80017f6:	4928      	ldr	r1, [pc, #160]	; (8001898 <HAL_RCC_OscConfig+0x364>)
 80017f8:	5ccb      	ldrb	r3, [r1, r3]
 80017fa:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <HAL_RCC_OscConfig+0x368>)
 80017fe:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001800:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <HAL_RCC_OscConfig+0x36c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2513      	movs	r5, #19
 8001806:	197c      	adds	r4, r7, r5
 8001808:	0018      	movs	r0, r3
 800180a:	f7ff fb99 	bl	8000f40 <HAL_InitTick>
 800180e:	0003      	movs	r3, r0
 8001810:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001812:	197b      	adds	r3, r7, r5
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d060      	beq.n	80018dc <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800181a:	197b      	adds	r3, r7, r5
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	e242      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d03f      	beq.n	80018a8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 800182e:	2180      	movs	r1, #128	; 0x80
 8001830:	0049      	lsls	r1, r1, #1
 8001832:	430a      	orrs	r2, r1
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff fbc9 	bl	8000fcc <HAL_GetTick>
 800183a:	0003      	movs	r3, r0
 800183c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001840:	f7ff fbc4 	bl	8000fcc <HAL_GetTick>
 8001844:	0002      	movs	r2, r0
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e229      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	2380      	movs	r3, #128	; 0x80
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4013      	ands	r3, r2
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4a10      	ldr	r2, [pc, #64]	; (80018a4 <HAL_RCC_OscConfig+0x370>)
 8001864:	4013      	ands	r3, r2
 8001866:	0019      	movs	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 800186e:	430a      	orrs	r2, r1
 8001870:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	0a19      	lsrs	r1, r3, #8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	061a      	lsls	r2, r3, #24
 8001880:	4b01      	ldr	r3, [pc, #4]	; (8001888 <HAL_RCC_OscConfig+0x354>)
 8001882:	430a      	orrs	r2, r1
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	e029      	b.n	80018dc <HAL_RCC_OscConfig+0x3a8>
 8001888:	40021000 	.word	0x40021000
 800188c:	fffeffff 	.word	0xfffeffff
 8001890:	fffbffff 	.word	0xfffbffff
 8001894:	ffffe0ff 	.word	0xffffe0ff
 8001898:	08003e5c 	.word	0x08003e5c
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000004 	.word	0x20000004
 80018a4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018a8:	4bbd      	ldr	r3, [pc, #756]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4bbc      	ldr	r3, [pc, #752]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 80018ae:	49bd      	ldr	r1, [pc, #756]	; (8001ba4 <HAL_RCC_OscConfig+0x670>)
 80018b0:	400a      	ands	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fb8a 	bl	8000fcc <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018be:	f7ff fb85 	bl	8000fcc <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e1ea      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018d0:	4bb3      	ldr	r3, [pc, #716]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4013      	ands	r3, r2
 80018da:	d1f0      	bne.n	80018be <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2208      	movs	r2, #8
 80018e2:	4013      	ands	r3, r2
 80018e4:	d036      	beq.n	8001954 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d019      	beq.n	8001922 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ee:	4bac      	ldr	r3, [pc, #688]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 80018f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018f2:	4bab      	ldr	r3, [pc, #684]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 80018f4:	2101      	movs	r1, #1
 80018f6:	430a      	orrs	r2, r1
 80018f8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fa:	f7ff fb67 	bl	8000fcc <HAL_GetTick>
 80018fe:	0003      	movs	r3, r0
 8001900:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001904:	f7ff fb62 	bl	8000fcc <HAL_GetTick>
 8001908:	0002      	movs	r2, r0
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e1c7      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001916:	4ba2      	ldr	r3, [pc, #648]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800191a:	2202      	movs	r2, #2
 800191c:	4013      	ands	r3, r2
 800191e:	d0f1      	beq.n	8001904 <HAL_RCC_OscConfig+0x3d0>
 8001920:	e018      	b.n	8001954 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001922:	4b9f      	ldr	r3, [pc, #636]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001924:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001926:	4b9e      	ldr	r3, [pc, #632]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001928:	2101      	movs	r1, #1
 800192a:	438a      	bics	r2, r1
 800192c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192e:	f7ff fb4d 	bl	8000fcc <HAL_GetTick>
 8001932:	0003      	movs	r3, r0
 8001934:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001938:	f7ff fb48 	bl	8000fcc <HAL_GetTick>
 800193c:	0002      	movs	r2, r0
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e1ad      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800194a:	4b95      	ldr	r3, [pc, #596]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 800194c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800194e:	2202      	movs	r2, #2
 8001950:	4013      	ands	r3, r2
 8001952:	d1f1      	bne.n	8001938 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2204      	movs	r2, #4
 800195a:	4013      	ands	r3, r2
 800195c:	d100      	bne.n	8001960 <HAL_RCC_OscConfig+0x42c>
 800195e:	e0ae      	b.n	8001abe <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001960:	2027      	movs	r0, #39	; 0x27
 8001962:	183b      	adds	r3, r7, r0
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001968:	4b8d      	ldr	r3, [pc, #564]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 800196a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	055b      	lsls	r3, r3, #21
 8001970:	4013      	ands	r3, r2
 8001972:	d109      	bne.n	8001988 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001974:	4b8a      	ldr	r3, [pc, #552]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001978:	4b89      	ldr	r3, [pc, #548]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 800197a:	2180      	movs	r1, #128	; 0x80
 800197c:	0549      	lsls	r1, r1, #21
 800197e:	430a      	orrs	r2, r1
 8001980:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001982:	183b      	adds	r3, r7, r0
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001988:	4b87      	ldr	r3, [pc, #540]	; (8001ba8 <HAL_RCC_OscConfig+0x674>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4013      	ands	r3, r2
 8001992:	d11a      	bne.n	80019ca <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001994:	4b84      	ldr	r3, [pc, #528]	; (8001ba8 <HAL_RCC_OscConfig+0x674>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b83      	ldr	r3, [pc, #524]	; (8001ba8 <HAL_RCC_OscConfig+0x674>)
 800199a:	2180      	movs	r1, #128	; 0x80
 800199c:	0049      	lsls	r1, r1, #1
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a2:	f7ff fb13 	bl	8000fcc <HAL_GetTick>
 80019a6:	0003      	movs	r3, r0
 80019a8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ac:	f7ff fb0e 	bl	8000fcc <HAL_GetTick>
 80019b0:	0002      	movs	r2, r0
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	; 0x64
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e173      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019be:	4b7a      	ldr	r3, [pc, #488]	; (8001ba8 <HAL_RCC_OscConfig+0x674>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4013      	ands	r3, r2
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_OscConfig+0x4b2>
 80019d6:	4b72      	ldr	r3, [pc, #456]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 80019d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019da:	4b71      	ldr	r3, [pc, #452]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 80019dc:	2180      	movs	r1, #128	; 0x80
 80019de:	0049      	lsls	r1, r1, #1
 80019e0:	430a      	orrs	r2, r1
 80019e2:	651a      	str	r2, [r3, #80]	; 0x50
 80019e4:	e031      	b.n	8001a4a <HAL_RCC_OscConfig+0x516>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x4d4>
 80019ee:	4b6c      	ldr	r3, [pc, #432]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 80019f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019f2:	4b6b      	ldr	r3, [pc, #428]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 80019f4:	496b      	ldr	r1, [pc, #428]	; (8001ba4 <HAL_RCC_OscConfig+0x670>)
 80019f6:	400a      	ands	r2, r1
 80019f8:	651a      	str	r2, [r3, #80]	; 0x50
 80019fa:	4b69      	ldr	r3, [pc, #420]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 80019fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019fe:	4b68      	ldr	r3, [pc, #416]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001a00:	496a      	ldr	r1, [pc, #424]	; (8001bac <HAL_RCC_OscConfig+0x678>)
 8001a02:	400a      	ands	r2, r1
 8001a04:	651a      	str	r2, [r3, #80]	; 0x50
 8001a06:	e020      	b.n	8001a4a <HAL_RCC_OscConfig+0x516>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	23a0      	movs	r3, #160	; 0xa0
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d10e      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4fe>
 8001a14:	4b62      	ldr	r3, [pc, #392]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001a16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a18:	4b61      	ldr	r3, [pc, #388]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001a1a:	2180      	movs	r1, #128	; 0x80
 8001a1c:	00c9      	lsls	r1, r1, #3
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	651a      	str	r2, [r3, #80]	; 0x50
 8001a22:	4b5f      	ldr	r3, [pc, #380]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001a24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a26:	4b5e      	ldr	r3, [pc, #376]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	0049      	lsls	r1, r1, #1
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	651a      	str	r2, [r3, #80]	; 0x50
 8001a30:	e00b      	b.n	8001a4a <HAL_RCC_OscConfig+0x516>
 8001a32:	4b5b      	ldr	r3, [pc, #364]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001a34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a36:	4b5a      	ldr	r3, [pc, #360]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001a38:	495a      	ldr	r1, [pc, #360]	; (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001a3a:	400a      	ands	r2, r1
 8001a3c:	651a      	str	r2, [r3, #80]	; 0x50
 8001a3e:	4b58      	ldr	r3, [pc, #352]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001a40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a42:	4b57      	ldr	r3, [pc, #348]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001a44:	4959      	ldr	r1, [pc, #356]	; (8001bac <HAL_RCC_OscConfig+0x678>)
 8001a46:	400a      	ands	r2, r1
 8001a48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d015      	beq.n	8001a7e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a52:	f7ff fabb 	bl	8000fcc <HAL_GetTick>
 8001a56:	0003      	movs	r3, r0
 8001a58:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a5a:	e009      	b.n	8001a70 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a5c:	f7ff fab6 	bl	8000fcc <HAL_GetTick>
 8001a60:	0002      	movs	r2, r0
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	4a52      	ldr	r2, [pc, #328]	; (8001bb0 <HAL_RCC_OscConfig+0x67c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e11a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a70:	4b4b      	ldr	r3, [pc, #300]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001a72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d0ef      	beq.n	8001a5c <HAL_RCC_OscConfig+0x528>
 8001a7c:	e014      	b.n	8001aa8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7e:	f7ff faa5 	bl	8000fcc <HAL_GetTick>
 8001a82:	0003      	movs	r3, r0
 8001a84:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a86:	e009      	b.n	8001a9c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a88:	f7ff faa0 	bl	8000fcc <HAL_GetTick>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	4a47      	ldr	r2, [pc, #284]	; (8001bb0 <HAL_RCC_OscConfig+0x67c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e104      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a9c:	4b40      	ldr	r3, [pc, #256]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001a9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d1ef      	bne.n	8001a88 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001aa8:	2327      	movs	r3, #39	; 0x27
 8001aaa:	18fb      	adds	r3, r7, r3
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d105      	bne.n	8001abe <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab2:	4b3b      	ldr	r3, [pc, #236]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ab6:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001ab8:	493e      	ldr	r1, [pc, #248]	; (8001bb4 <HAL_RCC_OscConfig+0x680>)
 8001aba:	400a      	ands	r2, r1
 8001abc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d049      	beq.n	8001b5c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d026      	beq.n	8001b1e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001ad0:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae0:	4b2f      	ldr	r3, [pc, #188]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ae8:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <HAL_RCC_OscConfig+0x684>)
 8001aea:	6a1a      	ldr	r2, [r3, #32]
 8001aec:	4b32      	ldr	r3, [pc, #200]	; (8001bb8 <HAL_RCC_OscConfig+0x684>)
 8001aee:	2180      	movs	r1, #128	; 0x80
 8001af0:	0189      	lsls	r1, r1, #6
 8001af2:	430a      	orrs	r2, r1
 8001af4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7ff fa69 	bl	8000fcc <HAL_GetTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b00:	f7ff fa64 	bl	8000fcc <HAL_GetTick>
 8001b04:	0002      	movs	r2, r0
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e0c9      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b12:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2202      	movs	r2, #2
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d0f1      	beq.n	8001b00 <HAL_RCC_OscConfig+0x5cc>
 8001b1c:	e01e      	b.n	8001b5c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001b24:	2101      	movs	r1, #1
 8001b26:	438a      	bics	r2, r1
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <HAL_RCC_OscConfig+0x684>)
 8001b2c:	6a1a      	ldr	r2, [r3, #32]
 8001b2e:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <HAL_RCC_OscConfig+0x684>)
 8001b30:	4922      	ldr	r1, [pc, #136]	; (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001b32:	400a      	ands	r2, r1
 8001b34:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7ff fa49 	bl	8000fcc <HAL_GetTick>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b40:	f7ff fa44 	bl	8000fcc <HAL_GetTick>
 8001b44:	0002      	movs	r2, r0
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e0a9      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2202      	movs	r2, #2
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d1f1      	bne.n	8001b40 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d100      	bne.n	8001b66 <HAL_RCC_OscConfig+0x632>
 8001b64:	e09e      	b.n	8001ca4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	2b0c      	cmp	r3, #12
 8001b6a:	d100      	bne.n	8001b6e <HAL_RCC_OscConfig+0x63a>
 8001b6c:	e077      	b.n	8001c5e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d158      	bne.n	8001c28 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_RCC_OscConfig+0x66c>)
 8001b7c:	4910      	ldr	r1, [pc, #64]	; (8001bc0 <HAL_RCC_OscConfig+0x68c>)
 8001b7e:	400a      	ands	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b82:	f7ff fa23 	bl	8000fcc <HAL_GetTick>
 8001b86:	0003      	movs	r3, r0
 8001b88:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b8a:	e01b      	b.n	8001bc4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7ff fa1e 	bl	8000fcc <HAL_GetTick>
 8001b90:	0002      	movs	r2, r0
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d914      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e083      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	fffffeff 	.word	0xfffffeff
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	fffffbff 	.word	0xfffffbff
 8001bb0:	00001388 	.word	0x00001388
 8001bb4:	efffffff 	.word	0xefffffff
 8001bb8:	40010000 	.word	0x40010000
 8001bbc:	ffffdfff 	.word	0xffffdfff
 8001bc0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bc4:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <HAL_RCC_OscConfig+0x77c>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	049b      	lsls	r3, r3, #18
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d1dd      	bne.n	8001b8c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd0:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <HAL_RCC_OscConfig+0x77c>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4a37      	ldr	r2, [pc, #220]	; (8001cb4 <HAL_RCC_OscConfig+0x780>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	0019      	movs	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be8:	431a      	orrs	r2, r3
 8001bea:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_RCC_OscConfig+0x77c>)
 8001bec:	430a      	orrs	r2, r1
 8001bee:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf0:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <HAL_RCC_OscConfig+0x77c>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b2e      	ldr	r3, [pc, #184]	; (8001cb0 <HAL_RCC_OscConfig+0x77c>)
 8001bf6:	2180      	movs	r1, #128	; 0x80
 8001bf8:	0449      	lsls	r1, r1, #17
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff f9e5 	bl	8000fcc <HAL_GetTick>
 8001c02:	0003      	movs	r3, r0
 8001c04:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c08:	f7ff f9e0 	bl	8000fcc <HAL_GetTick>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e045      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c1a:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <HAL_RCC_OscConfig+0x77c>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	049b      	lsls	r3, r3, #18
 8001c22:	4013      	ands	r3, r2
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x6d4>
 8001c26:	e03d      	b.n	8001ca4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c28:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <HAL_RCC_OscConfig+0x77c>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_RCC_OscConfig+0x77c>)
 8001c2e:	4922      	ldr	r1, [pc, #136]	; (8001cb8 <HAL_RCC_OscConfig+0x784>)
 8001c30:	400a      	ands	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff f9ca 	bl	8000fcc <HAL_GetTick>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7ff f9c5 	bl	8000fcc <HAL_GetTick>
 8001c42:	0002      	movs	r2, r0
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e02a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c50:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <HAL_RCC_OscConfig+0x77c>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	049b      	lsls	r3, r3, #18
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d1f0      	bne.n	8001c3e <HAL_RCC_OscConfig+0x70a>
 8001c5c:	e022      	b.n	8001ca4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e01d      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_RCC_OscConfig+0x77c>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c70:	69fa      	ldr	r2, [r7, #28]
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	025b      	lsls	r3, r3, #9
 8001c76:	401a      	ands	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d10f      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	23f0      	movs	r3, #240	; 0xf0
 8001c84:	039b      	lsls	r3, r3, #14
 8001c86:	401a      	ands	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d107      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001c90:	69fa      	ldr	r2, [r7, #28]
 8001c92:	23c0      	movs	r3, #192	; 0xc0
 8001c94:	041b      	lsls	r3, r3, #16
 8001c96:	401a      	ands	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b00a      	add	sp, #40	; 0x28
 8001cac:	bdb0      	pop	{r4, r5, r7, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	ff02ffff 	.word	0xff02ffff
 8001cb8:	feffffff 	.word	0xfeffffff

08001cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cbc:	b5b0      	push	{r4, r5, r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e128      	b.n	8001f22 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b96      	ldr	r3, [pc, #600]	; (8001f2c <HAL_RCC_ClockConfig+0x270>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d91e      	bls.n	8001d1c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b93      	ldr	r3, [pc, #588]	; (8001f2c <HAL_RCC_ClockConfig+0x270>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4393      	bics	r3, r2
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	4b90      	ldr	r3, [pc, #576]	; (8001f2c <HAL_RCC_ClockConfig+0x270>)
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cf0:	f7ff f96c 	bl	8000fcc <HAL_GetTick>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf8:	e009      	b.n	8001d0e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfa:	f7ff f967 	bl	8000fcc <HAL_GetTick>
 8001cfe:	0002      	movs	r2, r0
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	4a8a      	ldr	r2, [pc, #552]	; (8001f30 <HAL_RCC_ClockConfig+0x274>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e109      	b.n	8001f22 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0e:	4b87      	ldr	r3, [pc, #540]	; (8001f2c <HAL_RCC_ClockConfig+0x270>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2201      	movs	r2, #1
 8001d14:	4013      	ands	r3, r2
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1ee      	bne.n	8001cfa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2202      	movs	r2, #2
 8001d22:	4013      	ands	r3, r2
 8001d24:	d009      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d26:	4b83      	ldr	r3, [pc, #524]	; (8001f34 <HAL_RCC_ClockConfig+0x278>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	22f0      	movs	r2, #240	; 0xf0
 8001d2c:	4393      	bics	r3, r2
 8001d2e:	0019      	movs	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	4b7f      	ldr	r3, [pc, #508]	; (8001f34 <HAL_RCC_ClockConfig+0x278>)
 8001d36:	430a      	orrs	r2, r1
 8001d38:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4013      	ands	r3, r2
 8001d42:	d100      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x8a>
 8001d44:	e089      	b.n	8001e5a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d4e:	4b79      	ldr	r3, [pc, #484]	; (8001f34 <HAL_RCC_ClockConfig+0x278>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	029b      	lsls	r3, r3, #10
 8001d56:	4013      	ands	r3, r2
 8001d58:	d120      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e0e1      	b.n	8001f22 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d66:	4b73      	ldr	r3, [pc, #460]	; (8001f34 <HAL_RCC_ClockConfig+0x278>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	049b      	lsls	r3, r3, #18
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d114      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0d5      	b.n	8001f22 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d106      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d7e:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <HAL_RCC_ClockConfig+0x278>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2204      	movs	r2, #4
 8001d84:	4013      	ands	r3, r2
 8001d86:	d109      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0ca      	b.n	8001f22 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d8c:	4b69      	ldr	r3, [pc, #420]	; (8001f34 <HAL_RCC_ClockConfig+0x278>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4013      	ands	r3, r2
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0c2      	b.n	8001f22 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d9c:	4b65      	ldr	r3, [pc, #404]	; (8001f34 <HAL_RCC_ClockConfig+0x278>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2203      	movs	r2, #3
 8001da2:	4393      	bics	r3, r2
 8001da4:	0019      	movs	r1, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	4b62      	ldr	r3, [pc, #392]	; (8001f34 <HAL_RCC_ClockConfig+0x278>)
 8001dac:	430a      	orrs	r2, r1
 8001dae:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db0:	f7ff f90c 	bl	8000fcc <HAL_GetTick>
 8001db4:	0003      	movs	r3, r0
 8001db6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d111      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dc0:	e009      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc2:	f7ff f903 	bl	8000fcc <HAL_GetTick>
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	4a58      	ldr	r2, [pc, #352]	; (8001f30 <HAL_RCC_ClockConfig+0x274>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e0a5      	b.n	8001f22 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd6:	4b57      	ldr	r3, [pc, #348]	; (8001f34 <HAL_RCC_ClockConfig+0x278>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	220c      	movs	r2, #12
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d1ef      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0x106>
 8001de2:	e03a      	b.n	8001e5a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d111      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dec:	e009      	b.n	8001e02 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dee:	f7ff f8ed 	bl	8000fcc <HAL_GetTick>
 8001df2:	0002      	movs	r2, r0
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	4a4d      	ldr	r2, [pc, #308]	; (8001f30 <HAL_RCC_ClockConfig+0x274>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e08f      	b.n	8001f22 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e02:	4b4c      	ldr	r3, [pc, #304]	; (8001f34 <HAL_RCC_ClockConfig+0x278>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	220c      	movs	r2, #12
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b0c      	cmp	r3, #12
 8001e0c:	d1ef      	bne.n	8001dee <HAL_RCC_ClockConfig+0x132>
 8001e0e:	e024      	b.n	8001e5a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d11b      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e18:	e009      	b.n	8001e2e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1a:	f7ff f8d7 	bl	8000fcc <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	4a42      	ldr	r2, [pc, #264]	; (8001f30 <HAL_RCC_ClockConfig+0x274>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e079      	b.n	8001f22 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e2e:	4b41      	ldr	r3, [pc, #260]	; (8001f34 <HAL_RCC_ClockConfig+0x278>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	220c      	movs	r2, #12
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d1ef      	bne.n	8001e1a <HAL_RCC_ClockConfig+0x15e>
 8001e3a:	e00e      	b.n	8001e5a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3c:	f7ff f8c6 	bl	8000fcc <HAL_GetTick>
 8001e40:	0002      	movs	r2, r0
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	4a3a      	ldr	r2, [pc, #232]	; (8001f30 <HAL_RCC_ClockConfig+0x274>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e068      	b.n	8001f22 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e50:	4b38      	ldr	r3, [pc, #224]	; (8001f34 <HAL_RCC_ClockConfig+0x278>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	220c      	movs	r2, #12
 8001e56:	4013      	ands	r3, r2
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e5a:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <HAL_RCC_ClockConfig+0x270>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4013      	ands	r3, r2
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d21e      	bcs.n	8001ea6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e68:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <HAL_RCC_ClockConfig+0x270>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4393      	bics	r3, r2
 8001e70:	0019      	movs	r1, r3
 8001e72:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <HAL_RCC_ClockConfig+0x270>)
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e7a:	f7ff f8a7 	bl	8000fcc <HAL_GetTick>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	e009      	b.n	8001e98 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e84:	f7ff f8a2 	bl	8000fcc <HAL_GetTick>
 8001e88:	0002      	movs	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	4a28      	ldr	r2, [pc, #160]	; (8001f30 <HAL_RCC_ClockConfig+0x274>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e044      	b.n	8001f22 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e98:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_RCC_ClockConfig+0x270>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d1ee      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2204      	movs	r2, #4
 8001eac:	4013      	ands	r3, r2
 8001eae:	d009      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb0:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <HAL_RCC_ClockConfig+0x278>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4a20      	ldr	r2, [pc, #128]	; (8001f38 <HAL_RCC_ClockConfig+0x27c>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	0019      	movs	r1, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <HAL_RCC_ClockConfig+0x278>)
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2208      	movs	r2, #8
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d00a      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_RCC_ClockConfig+0x278>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	4a1a      	ldr	r2, [pc, #104]	; (8001f3c <HAL_RCC_ClockConfig+0x280>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	0019      	movs	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	00da      	lsls	r2, r3, #3
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HAL_RCC_ClockConfig+0x278>)
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ee4:	f000 f832 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 8001ee8:	0001      	movs	r1, r0
 8001eea:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_RCC_ClockConfig+0x278>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <HAL_RCC_ClockConfig+0x284>)
 8001ef6:	5cd3      	ldrb	r3, [r2, r3]
 8001ef8:	000a      	movs	r2, r1
 8001efa:	40da      	lsrs	r2, r3
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <HAL_RCC_ClockConfig+0x288>)
 8001efe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_RCC_ClockConfig+0x28c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	250b      	movs	r5, #11
 8001f06:	197c      	adds	r4, r7, r5
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7ff f819 	bl	8000f40 <HAL_InitTick>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001f12:	197b      	adds	r3, r7, r5
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001f1a:	197b      	adds	r3, r7, r5
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	e000      	b.n	8001f22 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	0018      	movs	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b004      	add	sp, #16
 8001f28:	bdb0      	pop	{r4, r5, r7, pc}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	40022000 	.word	0x40022000
 8001f30:	00001388 	.word	0x00001388
 8001f34:	40021000 	.word	0x40021000
 8001f38:	fffff8ff 	.word	0xfffff8ff
 8001f3c:	ffffc7ff 	.word	0xffffc7ff
 8001f40:	08003e5c 	.word	0x08003e5c
 8001f44:	20000000 	.word	0x20000000
 8001f48:	20000004 	.word	0x20000004

08001f4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f4c:	b5b0      	push	{r4, r5, r7, lr}
 8001f4e:	b08e      	sub	sp, #56	; 0x38
 8001f50:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f52:	4b4c      	ldr	r3, [pc, #304]	; (8002084 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f5a:	230c      	movs	r3, #12
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b0c      	cmp	r3, #12
 8001f60:	d014      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x40>
 8001f62:	d900      	bls.n	8001f66 <HAL_RCC_GetSysClockFreq+0x1a>
 8001f64:	e07b      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x112>
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d002      	beq.n	8001f70 <HAL_RCC_GetSysClockFreq+0x24>
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d00b      	beq.n	8001f86 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f6e:	e076      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f70:	4b44      	ldr	r3, [pc, #272]	; (8002084 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2210      	movs	r2, #16
 8001f76:	4013      	ands	r3, r2
 8001f78:	d002      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001f7a:	4b43      	ldr	r3, [pc, #268]	; (8002088 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f7c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001f7e:	e07c      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001f80:	4b42      	ldr	r3, [pc, #264]	; (800208c <HAL_RCC_GetSysClockFreq+0x140>)
 8001f82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f84:	e079      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f86:	4b42      	ldr	r3, [pc, #264]	; (8002090 <HAL_RCC_GetSysClockFreq+0x144>)
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f8a:	e076      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8e:	0c9a      	lsrs	r2, r3, #18
 8001f90:	230f      	movs	r3, #15
 8001f92:	401a      	ands	r2, r3
 8001f94:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <HAL_RCC_GetSysClockFreq+0x148>)
 8001f96:	5c9b      	ldrb	r3, [r3, r2]
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9c:	0d9a      	lsrs	r2, r3, #22
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fa6:	4b37      	ldr	r3, [pc, #220]	; (8002084 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	025b      	lsls	r3, r3, #9
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d01a      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	4a35      	ldr	r2, [pc, #212]	; (8002090 <HAL_RCC_GetSysClockFreq+0x144>)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	69b8      	ldr	r0, [r7, #24]
 8001fc0:	69f9      	ldr	r1, [r7, #28]
 8001fc2:	f7fe f957 	bl	8000274 <__aeabi_lmul>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	000b      	movs	r3, r1
 8001fca:	0010      	movs	r0, r2
 8001fcc:	0019      	movs	r1, r3
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f7fe f92b 	bl	8000234 <__aeabi_uldivmod>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	000b      	movs	r3, r1
 8001fe2:	0013      	movs	r3, r2
 8001fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8001fe6:	e037      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001fe8:	4b26      	ldr	r3, [pc, #152]	; (8002084 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2210      	movs	r2, #16
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d01a      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4a23      	ldr	r2, [pc, #140]	; (8002088 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	68b8      	ldr	r0, [r7, #8]
 8002000:	68f9      	ldr	r1, [r7, #12]
 8002002:	f7fe f937 	bl	8000274 <__aeabi_lmul>
 8002006:	0002      	movs	r2, r0
 8002008:	000b      	movs	r3, r1
 800200a:	0010      	movs	r0, r2
 800200c:	0019      	movs	r1, r3
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	603b      	str	r3, [r7, #0]
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f7fe f90b 	bl	8000234 <__aeabi_uldivmod>
 800201e:	0002      	movs	r2, r0
 8002020:	000b      	movs	r3, r1
 8002022:	0013      	movs	r3, r2
 8002024:	637b      	str	r3, [r7, #52]	; 0x34
 8002026:	e017      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202a:	0018      	movs	r0, r3
 800202c:	2300      	movs	r3, #0
 800202e:	0019      	movs	r1, r3
 8002030:	4a16      	ldr	r2, [pc, #88]	; (800208c <HAL_RCC_GetSysClockFreq+0x140>)
 8002032:	2300      	movs	r3, #0
 8002034:	f7fe f91e 	bl	8000274 <__aeabi_lmul>
 8002038:	0002      	movs	r2, r0
 800203a:	000b      	movs	r3, r1
 800203c:	0010      	movs	r0, r2
 800203e:	0019      	movs	r1, r3
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	001c      	movs	r4, r3
 8002044:	2300      	movs	r3, #0
 8002046:	001d      	movs	r5, r3
 8002048:	0022      	movs	r2, r4
 800204a:	002b      	movs	r3, r5
 800204c:	f7fe f8f2 	bl	8000234 <__aeabi_uldivmod>
 8002050:	0002      	movs	r2, r0
 8002052:	000b      	movs	r3, r1
 8002054:	0013      	movs	r3, r2
 8002056:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800205c:	e00d      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_RCC_GetSysClockFreq+0x138>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	0b5b      	lsrs	r3, r3, #13
 8002064:	2207      	movs	r2, #7
 8002066:	4013      	ands	r3, r2
 8002068:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	3301      	adds	r3, #1
 800206e:	2280      	movs	r2, #128	; 0x80
 8002070:	0212      	lsls	r2, r2, #8
 8002072:	409a      	lsls	r2, r3
 8002074:	0013      	movs	r3, r2
 8002076:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002078:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800207a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800207c:	0018      	movs	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	b00e      	add	sp, #56	; 0x38
 8002082:	bdb0      	pop	{r4, r5, r7, pc}
 8002084:	40021000 	.word	0x40021000
 8002088:	003d0900 	.word	0x003d0900
 800208c:	00f42400 	.word	0x00f42400
 8002090:	007a1200 	.word	0x007a1200
 8002094:	08003e74 	.word	0x08003e74

08002098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800209c:	4b02      	ldr	r3, [pc, #8]	; (80020a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	20000000 	.word	0x20000000

080020ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020b0:	f7ff fff2 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020b4:	0001      	movs	r1, r0
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	2207      	movs	r2, #7
 80020be:	4013      	ands	r3, r2
 80020c0:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020c2:	5cd3      	ldrb	r3, [r2, r3]
 80020c4:	40d9      	lsrs	r1, r3
 80020c6:	000b      	movs	r3, r1
}
 80020c8:	0018      	movs	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08003e6c 	.word	0x08003e6c

080020d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020dc:	f7ff ffdc 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020e0:	0001      	movs	r1, r0
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	0adb      	lsrs	r3, r3, #11
 80020e8:	2207      	movs	r2, #7
 80020ea:	4013      	ands	r3, r2
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ee:	5cd3      	ldrb	r3, [r2, r3]
 80020f0:	40d9      	lsrs	r1, r3
 80020f2:	000b      	movs	r3, r1
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	40021000 	.word	0x40021000
 8002100:	08003e6c 	.word	0x08003e6c

08002104 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800210c:	2317      	movs	r3, #23
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2220      	movs	r2, #32
 800211a:	4013      	ands	r3, r2
 800211c:	d106      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	4013      	ands	r3, r2
 8002128:	d100      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800212a:	e104      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212c:	4bb1      	ldr	r3, [pc, #708]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800212e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	055b      	lsls	r3, r3, #21
 8002134:	4013      	ands	r3, r2
 8002136:	d10a      	bne.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002138:	4bae      	ldr	r3, [pc, #696]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800213a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800213c:	4bad      	ldr	r3, [pc, #692]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800213e:	2180      	movs	r1, #128	; 0x80
 8002140:	0549      	lsls	r1, r1, #21
 8002142:	430a      	orrs	r2, r1
 8002144:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002146:	2317      	movs	r3, #23
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214e:	4baa      	ldr	r3, [pc, #680]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4013      	ands	r3, r2
 8002158:	d11a      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800215a:	4ba7      	ldr	r3, [pc, #668]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	4ba6      	ldr	r3, [pc, #664]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002160:	2180      	movs	r1, #128	; 0x80
 8002162:	0049      	lsls	r1, r1, #1
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002168:	f7fe ff30 	bl	8000fcc <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	e008      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002172:	f7fe ff2b 	bl	8000fcc <HAL_GetTick>
 8002176:	0002      	movs	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b64      	cmp	r3, #100	; 0x64
 800217e:	d901      	bls.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e133      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	4b9c      	ldr	r3, [pc, #624]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4013      	ands	r3, r2
 800218e:	d0f0      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002190:	4b98      	ldr	r3, [pc, #608]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	23c0      	movs	r3, #192	; 0xc0
 8002196:	039b      	lsls	r3, r3, #14
 8002198:	4013      	ands	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	23c0      	movs	r3, #192	; 0xc0
 80021a2:	039b      	lsls	r3, r3, #14
 80021a4:	4013      	ands	r3, r2
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d107      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	23c0      	movs	r3, #192	; 0xc0
 80021b2:	039b      	lsls	r3, r3, #14
 80021b4:	4013      	ands	r3, r2
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d013      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	23c0      	movs	r3, #192	; 0xc0
 80021c2:	029b      	lsls	r3, r3, #10
 80021c4:	401a      	ands	r2, r3
 80021c6:	23c0      	movs	r3, #192	; 0xc0
 80021c8:	029b      	lsls	r3, r3, #10
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d10a      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80021ce:	4b89      	ldr	r3, [pc, #548]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	029b      	lsls	r3, r3, #10
 80021d6:	401a      	ands	r2, r3
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	029b      	lsls	r3, r3, #10
 80021dc:	429a      	cmp	r2, r3
 80021de:	d101      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e103      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80021e4:	4b83      	ldr	r3, [pc, #524]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021e8:	23c0      	movs	r3, #192	; 0xc0
 80021ea:	029b      	lsls	r3, r3, #10
 80021ec:	4013      	ands	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d049      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	23c0      	movs	r3, #192	; 0xc0
 80021fc:	029b      	lsls	r3, r3, #10
 80021fe:	4013      	ands	r3, r2
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	429a      	cmp	r2, r3
 8002204:	d004      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2220      	movs	r2, #32
 800220c:	4013      	ands	r3, r2
 800220e:	d10d      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	23c0      	movs	r3, #192	; 0xc0
 8002216:	029b      	lsls	r3, r3, #10
 8002218:	4013      	ands	r3, r2
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	429a      	cmp	r2, r3
 800221e:	d034      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	4013      	ands	r3, r2
 800222a:	d02e      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800222c:	4b71      	ldr	r3, [pc, #452]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800222e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002230:	4a72      	ldr	r2, [pc, #456]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002232:	4013      	ands	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002236:	4b6f      	ldr	r3, [pc, #444]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800223a:	4b6e      	ldr	r3, [pc, #440]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800223c:	2180      	movs	r1, #128	; 0x80
 800223e:	0309      	lsls	r1, r1, #12
 8002240:	430a      	orrs	r2, r1
 8002242:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002244:	4b6b      	ldr	r3, [pc, #428]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002246:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002248:	4b6a      	ldr	r3, [pc, #424]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800224a:	496d      	ldr	r1, [pc, #436]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800224c:	400a      	ands	r2, r1
 800224e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002250:	4b68      	ldr	r3, [pc, #416]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4013      	ands	r3, r2
 800225e:	d014      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7fe feb4 	bl	8000fcc <HAL_GetTick>
 8002264:	0003      	movs	r3, r0
 8002266:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002268:	e009      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800226a:	f7fe feaf 	bl	8000fcc <HAL_GetTick>
 800226e:	0002      	movs	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	4a63      	ldr	r2, [pc, #396]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d901      	bls.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e0b6      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800227e:	4b5d      	ldr	r3, [pc, #372]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002280:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4013      	ands	r3, r2
 8002288:	d0ef      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	4013      	ands	r3, r2
 8002294:	d01f      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	23c0      	movs	r3, #192	; 0xc0
 800229c:	029b      	lsls	r3, r3, #10
 800229e:	401a      	ands	r2, r3
 80022a0:	23c0      	movs	r3, #192	; 0xc0
 80022a2:	029b      	lsls	r3, r3, #10
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d10c      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80022a8:	4b52      	ldr	r3, [pc, #328]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a56      	ldr	r2, [pc, #344]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	0019      	movs	r1, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	23c0      	movs	r3, #192	; 0xc0
 80022b8:	039b      	lsls	r3, r3, #14
 80022ba:	401a      	ands	r2, r3
 80022bc:	4b4d      	ldr	r3, [pc, #308]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022be:	430a      	orrs	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	4b4c      	ldr	r3, [pc, #304]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	23c0      	movs	r3, #192	; 0xc0
 80022cc:	029b      	lsls	r3, r3, #10
 80022ce:	401a      	ands	r2, r3
 80022d0:	4b48      	ldr	r3, [pc, #288]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022d2:	430a      	orrs	r2, r1
 80022d4:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2220      	movs	r2, #32
 80022dc:	4013      	ands	r3, r2
 80022de:	d01f      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	23c0      	movs	r3, #192	; 0xc0
 80022e6:	029b      	lsls	r3, r3, #10
 80022e8:	401a      	ands	r2, r3
 80022ea:	23c0      	movs	r3, #192	; 0xc0
 80022ec:	029b      	lsls	r3, r3, #10
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d10c      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x208>
 80022f2:	4b40      	ldr	r3, [pc, #256]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a44      	ldr	r2, [pc, #272]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	0019      	movs	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	23c0      	movs	r3, #192	; 0xc0
 8002302:	039b      	lsls	r3, r3, #14
 8002304:	401a      	ands	r2, r3
 8002306:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002308:	430a      	orrs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	4b39      	ldr	r3, [pc, #228]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800230e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	23c0      	movs	r3, #192	; 0xc0
 8002316:	029b      	lsls	r3, r3, #10
 8002318:	401a      	ands	r2, r3
 800231a:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800231c:	430a      	orrs	r2, r1
 800231e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002320:	2317      	movs	r3, #23
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d105      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232a:	4b32      	ldr	r3, [pc, #200]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800232c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800232e:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002330:	4936      	ldr	r1, [pc, #216]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002332:	400a      	ands	r2, r1
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2201      	movs	r2, #1
 800233c:	4013      	ands	r3, r2
 800233e:	d009      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002340:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002344:	2203      	movs	r2, #3
 8002346:	4393      	bics	r3, r2
 8002348:	0019      	movs	r1, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002350:	430a      	orrs	r2, r1
 8002352:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2202      	movs	r2, #2
 800235a:	4013      	ands	r3, r2
 800235c:	d009      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800235e:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	220c      	movs	r2, #12
 8002364:	4393      	bics	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800236e:	430a      	orrs	r2, r1
 8002370:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2204      	movs	r2, #4
 8002378:	4013      	ands	r3, r2
 800237a:	d009      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800237c:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800237e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002380:	4a23      	ldr	r2, [pc, #140]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8002382:	4013      	ands	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800238c:	430a      	orrs	r2, r1
 800238e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2208      	movs	r2, #8
 8002396:	4013      	ands	r3, r2
 8002398:	d009      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800239a:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800239c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239e:	4a1d      	ldr	r2, [pc, #116]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	0019      	movs	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699a      	ldr	r2, [r3, #24]
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023aa:	430a      	orrs	r2, r1
 80023ac:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2240      	movs	r2, #64	; 0x40
 80023b4:	4013      	ands	r3, r2
 80023b6:	d009      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023b8:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023bc:	4a16      	ldr	r2, [pc, #88]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80023be:	4013      	ands	r3, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1a      	ldr	r2, [r3, #32]
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023c8:	430a      	orrs	r2, r1
 80023ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2280      	movs	r2, #128	; 0x80
 80023d2:	4013      	ands	r3, r2
 80023d4:	d009      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	4a10      	ldr	r2, [pc, #64]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80023dc:	4013      	ands	r3, r2
 80023de:	0019      	movs	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69da      	ldr	r2, [r3, #28]
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023e6:	430a      	orrs	r2, r1
 80023e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	0018      	movs	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b006      	add	sp, #24
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40007000 	.word	0x40007000
 80023fc:	fffcffff 	.word	0xfffcffff
 8002400:	fff7ffff 	.word	0xfff7ffff
 8002404:	00001388 	.word	0x00001388
 8002408:	ffcfffff 	.word	0xffcfffff
 800240c:	efffffff 	.word	0xefffffff
 8002410:	fffff3ff 	.word	0xfffff3ff
 8002414:	ffffcfff 	.word	0xffffcfff
 8002418:	fbffffff 	.word	0xfbffffff
 800241c:	fff3ffff 	.word	0xfff3ffff

08002420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e044      	b.n	80024bc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002436:	2b00      	cmp	r3, #0
 8002438:	d107      	bne.n	800244a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2278      	movs	r2, #120	; 0x78
 800243e:	2100      	movs	r1, #0
 8002440:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	0018      	movs	r0, r3
 8002446:	f7fe fc25 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2224      	movs	r2, #36	; 0x24
 800244e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2101      	movs	r1, #1
 800245c:	438a      	bics	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	0018      	movs	r0, r3
 8002464:	f000 f8d0 	bl	8002608 <UART_SetConfig>
 8002468:	0003      	movs	r3, r0
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e024      	b.n	80024bc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	0018      	movs	r0, r3
 800247e:	f000 fb47 	bl	8002b10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	490d      	ldr	r1, [pc, #52]	; (80024c4 <HAL_UART_Init+0xa4>)
 800248e:	400a      	ands	r2, r1
 8002490:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	212a      	movs	r1, #42	; 0x2a
 800249e:	438a      	bics	r2, r1
 80024a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2101      	movs	r1, #1
 80024ae:	430a      	orrs	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	0018      	movs	r0, r3
 80024b6:	f000 fbdf 	bl	8002c78 <UART_CheckIdleState>
 80024ba:	0003      	movs	r3, r0
}
 80024bc:	0018      	movs	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	b002      	add	sp, #8
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	ffffb7ff 	.word	0xffffb7ff

080024c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	; 0x28
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	1dbb      	adds	r3, r7, #6
 80024d6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024dc:	2b20      	cmp	r3, #32
 80024de:	d000      	beq.n	80024e2 <HAL_UART_Transmit+0x1a>
 80024e0:	e08c      	b.n	80025fc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_UART_Transmit+0x28>
 80024e8:	1dbb      	adds	r3, r7, #6
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e084      	b.n	80025fe <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	015b      	lsls	r3, r3, #5
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d109      	bne.n	8002514 <HAL_UART_Transmit+0x4c>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d105      	bne.n	8002514 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2201      	movs	r2, #1
 800250c:	4013      	ands	r3, r2
 800250e:	d001      	beq.n	8002514 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e074      	b.n	80025fe <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2284      	movs	r2, #132	; 0x84
 8002518:	2100      	movs	r1, #0
 800251a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2221      	movs	r2, #33	; 0x21
 8002520:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002522:	f7fe fd53 	bl	8000fcc <HAL_GetTick>
 8002526:	0003      	movs	r3, r0
 8002528:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1dba      	adds	r2, r7, #6
 800252e:	2150      	movs	r1, #80	; 0x50
 8002530:	8812      	ldrh	r2, [r2, #0]
 8002532:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1dba      	adds	r2, r7, #6
 8002538:	2152      	movs	r1, #82	; 0x52
 800253a:	8812      	ldrh	r2, [r2, #0]
 800253c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	015b      	lsls	r3, r3, #5
 8002546:	429a      	cmp	r2, r3
 8002548:	d108      	bne.n	800255c <HAL_UART_Transmit+0x94>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d104      	bne.n	800255c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	e003      	b.n	8002564 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002560:	2300      	movs	r3, #0
 8002562:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002564:	e02f      	b.n	80025c6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	0013      	movs	r3, r2
 8002570:	2200      	movs	r2, #0
 8002572:	2180      	movs	r1, #128	; 0x80
 8002574:	f000 fc28 	bl	8002dc8 <UART_WaitOnFlagUntilTimeout>
 8002578:	1e03      	subs	r3, r0, #0
 800257a:	d004      	beq.n	8002586 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e03b      	b.n	80025fe <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10b      	bne.n	80025a4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	001a      	movs	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	05d2      	lsls	r2, r2, #23
 8002598:	0dd2      	lsrs	r2, r2, #23
 800259a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	3302      	adds	r3, #2
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	e007      	b.n	80025b4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	781a      	ldrb	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3301      	adds	r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2252      	movs	r2, #82	; 0x52
 80025b8:	5a9b      	ldrh	r3, [r3, r2]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	b299      	uxth	r1, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2252      	movs	r2, #82	; 0x52
 80025c4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2252      	movs	r2, #82	; 0x52
 80025ca:	5a9b      	ldrh	r3, [r3, r2]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1c9      	bne.n	8002566 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	0013      	movs	r3, r2
 80025dc:	2200      	movs	r2, #0
 80025de:	2140      	movs	r1, #64	; 0x40
 80025e0:	f000 fbf2 	bl	8002dc8 <UART_WaitOnFlagUntilTimeout>
 80025e4:	1e03      	subs	r3, r0, #0
 80025e6:	d004      	beq.n	80025f2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e005      	b.n	80025fe <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2220      	movs	r2, #32
 80025f6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e000      	b.n	80025fe <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80025fc:	2302      	movs	r3, #2
  }
}
 80025fe:	0018      	movs	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	b008      	add	sp, #32
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002608:	b5b0      	push	{r4, r5, r7, lr}
 800260a:	b08e      	sub	sp, #56	; 0x38
 800260c:	af00      	add	r7, sp, #0
 800260e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002610:	231a      	movs	r3, #26
 8002612:	2218      	movs	r2, #24
 8002614:	189b      	adds	r3, r3, r2
 8002616:	19db      	adds	r3, r3, r7
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	431a      	orrs	r2, r3
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	431a      	orrs	r2, r3
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	4313      	orrs	r3, r2
 8002632:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4ac6      	ldr	r2, [pc, #792]	; (8002954 <UART_SetConfig+0x34c>)
 800263c:	4013      	ands	r3, r2
 800263e:	0019      	movs	r1, r3
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	4ac1      	ldr	r2, [pc, #772]	; (8002958 <UART_SetConfig+0x350>)
 8002652:	4013      	ands	r3, r2
 8002654:	0019      	movs	r1, r3
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4abb      	ldr	r2, [pc, #748]	; (800295c <UART_SetConfig+0x354>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d004      	beq.n	800267c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002678:	4313      	orrs	r3, r2
 800267a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	4ab7      	ldr	r2, [pc, #732]	; (8002960 <UART_SetConfig+0x358>)
 8002684:	4013      	ands	r3, r2
 8002686:	0019      	movs	r1, r3
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800268e:	430a      	orrs	r2, r1
 8002690:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4ab3      	ldr	r2, [pc, #716]	; (8002964 <UART_SetConfig+0x35c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d131      	bne.n	8002700 <UART_SetConfig+0xf8>
 800269c:	4bb2      	ldr	r3, [pc, #712]	; (8002968 <UART_SetConfig+0x360>)
 800269e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a0:	2203      	movs	r2, #3
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d01d      	beq.n	80026e4 <UART_SetConfig+0xdc>
 80026a8:	d823      	bhi.n	80026f2 <UART_SetConfig+0xea>
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d00c      	beq.n	80026c8 <UART_SetConfig+0xc0>
 80026ae:	d820      	bhi.n	80026f2 <UART_SetConfig+0xea>
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <UART_SetConfig+0xb2>
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d00e      	beq.n	80026d6 <UART_SetConfig+0xce>
 80026b8:	e01b      	b.n	80026f2 <UART_SetConfig+0xea>
 80026ba:	231b      	movs	r3, #27
 80026bc:	2218      	movs	r2, #24
 80026be:	189b      	adds	r3, r3, r2
 80026c0:	19db      	adds	r3, r3, r7
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e09c      	b.n	8002802 <UART_SetConfig+0x1fa>
 80026c8:	231b      	movs	r3, #27
 80026ca:	2218      	movs	r2, #24
 80026cc:	189b      	adds	r3, r3, r2
 80026ce:	19db      	adds	r3, r3, r7
 80026d0:	2202      	movs	r2, #2
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e095      	b.n	8002802 <UART_SetConfig+0x1fa>
 80026d6:	231b      	movs	r3, #27
 80026d8:	2218      	movs	r2, #24
 80026da:	189b      	adds	r3, r3, r2
 80026dc:	19db      	adds	r3, r3, r7
 80026de:	2204      	movs	r2, #4
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	e08e      	b.n	8002802 <UART_SetConfig+0x1fa>
 80026e4:	231b      	movs	r3, #27
 80026e6:	2218      	movs	r2, #24
 80026e8:	189b      	adds	r3, r3, r2
 80026ea:	19db      	adds	r3, r3, r7
 80026ec:	2208      	movs	r2, #8
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	e087      	b.n	8002802 <UART_SetConfig+0x1fa>
 80026f2:	231b      	movs	r3, #27
 80026f4:	2218      	movs	r2, #24
 80026f6:	189b      	adds	r3, r3, r2
 80026f8:	19db      	adds	r3, r3, r7
 80026fa:	2210      	movs	r2, #16
 80026fc:	701a      	strb	r2, [r3, #0]
 80026fe:	e080      	b.n	8002802 <UART_SetConfig+0x1fa>
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a99      	ldr	r2, [pc, #612]	; (800296c <UART_SetConfig+0x364>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d131      	bne.n	800276e <UART_SetConfig+0x166>
 800270a:	4b97      	ldr	r3, [pc, #604]	; (8002968 <UART_SetConfig+0x360>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	220c      	movs	r2, #12
 8002710:	4013      	ands	r3, r2
 8002712:	2b0c      	cmp	r3, #12
 8002714:	d01d      	beq.n	8002752 <UART_SetConfig+0x14a>
 8002716:	d823      	bhi.n	8002760 <UART_SetConfig+0x158>
 8002718:	2b08      	cmp	r3, #8
 800271a:	d00c      	beq.n	8002736 <UART_SetConfig+0x12e>
 800271c:	d820      	bhi.n	8002760 <UART_SetConfig+0x158>
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <UART_SetConfig+0x120>
 8002722:	2b04      	cmp	r3, #4
 8002724:	d00e      	beq.n	8002744 <UART_SetConfig+0x13c>
 8002726:	e01b      	b.n	8002760 <UART_SetConfig+0x158>
 8002728:	231b      	movs	r3, #27
 800272a:	2218      	movs	r2, #24
 800272c:	189b      	adds	r3, r3, r2
 800272e:	19db      	adds	r3, r3, r7
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
 8002734:	e065      	b.n	8002802 <UART_SetConfig+0x1fa>
 8002736:	231b      	movs	r3, #27
 8002738:	2218      	movs	r2, #24
 800273a:	189b      	adds	r3, r3, r2
 800273c:	19db      	adds	r3, r3, r7
 800273e:	2202      	movs	r2, #2
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	e05e      	b.n	8002802 <UART_SetConfig+0x1fa>
 8002744:	231b      	movs	r3, #27
 8002746:	2218      	movs	r2, #24
 8002748:	189b      	adds	r3, r3, r2
 800274a:	19db      	adds	r3, r3, r7
 800274c:	2204      	movs	r2, #4
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	e057      	b.n	8002802 <UART_SetConfig+0x1fa>
 8002752:	231b      	movs	r3, #27
 8002754:	2218      	movs	r2, #24
 8002756:	189b      	adds	r3, r3, r2
 8002758:	19db      	adds	r3, r3, r7
 800275a:	2208      	movs	r2, #8
 800275c:	701a      	strb	r2, [r3, #0]
 800275e:	e050      	b.n	8002802 <UART_SetConfig+0x1fa>
 8002760:	231b      	movs	r3, #27
 8002762:	2218      	movs	r2, #24
 8002764:	189b      	adds	r3, r3, r2
 8002766:	19db      	adds	r3, r3, r7
 8002768:	2210      	movs	r2, #16
 800276a:	701a      	strb	r2, [r3, #0]
 800276c:	e049      	b.n	8002802 <UART_SetConfig+0x1fa>
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a7a      	ldr	r2, [pc, #488]	; (800295c <UART_SetConfig+0x354>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d13e      	bne.n	80027f6 <UART_SetConfig+0x1ee>
 8002778:	4b7b      	ldr	r3, [pc, #492]	; (8002968 <UART_SetConfig+0x360>)
 800277a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800277c:	23c0      	movs	r3, #192	; 0xc0
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	4013      	ands	r3, r2
 8002782:	22c0      	movs	r2, #192	; 0xc0
 8002784:	0112      	lsls	r2, r2, #4
 8002786:	4293      	cmp	r3, r2
 8002788:	d027      	beq.n	80027da <UART_SetConfig+0x1d2>
 800278a:	22c0      	movs	r2, #192	; 0xc0
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4293      	cmp	r3, r2
 8002790:	d82a      	bhi.n	80027e8 <UART_SetConfig+0x1e0>
 8002792:	2280      	movs	r2, #128	; 0x80
 8002794:	0112      	lsls	r2, r2, #4
 8002796:	4293      	cmp	r3, r2
 8002798:	d011      	beq.n	80027be <UART_SetConfig+0x1b6>
 800279a:	2280      	movs	r2, #128	; 0x80
 800279c:	0112      	lsls	r2, r2, #4
 800279e:	4293      	cmp	r3, r2
 80027a0:	d822      	bhi.n	80027e8 <UART_SetConfig+0x1e0>
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d004      	beq.n	80027b0 <UART_SetConfig+0x1a8>
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	00d2      	lsls	r2, r2, #3
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00e      	beq.n	80027cc <UART_SetConfig+0x1c4>
 80027ae:	e01b      	b.n	80027e8 <UART_SetConfig+0x1e0>
 80027b0:	231b      	movs	r3, #27
 80027b2:	2218      	movs	r2, #24
 80027b4:	189b      	adds	r3, r3, r2
 80027b6:	19db      	adds	r3, r3, r7
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
 80027bc:	e021      	b.n	8002802 <UART_SetConfig+0x1fa>
 80027be:	231b      	movs	r3, #27
 80027c0:	2218      	movs	r2, #24
 80027c2:	189b      	adds	r3, r3, r2
 80027c4:	19db      	adds	r3, r3, r7
 80027c6:	2202      	movs	r2, #2
 80027c8:	701a      	strb	r2, [r3, #0]
 80027ca:	e01a      	b.n	8002802 <UART_SetConfig+0x1fa>
 80027cc:	231b      	movs	r3, #27
 80027ce:	2218      	movs	r2, #24
 80027d0:	189b      	adds	r3, r3, r2
 80027d2:	19db      	adds	r3, r3, r7
 80027d4:	2204      	movs	r2, #4
 80027d6:	701a      	strb	r2, [r3, #0]
 80027d8:	e013      	b.n	8002802 <UART_SetConfig+0x1fa>
 80027da:	231b      	movs	r3, #27
 80027dc:	2218      	movs	r2, #24
 80027de:	189b      	adds	r3, r3, r2
 80027e0:	19db      	adds	r3, r3, r7
 80027e2:	2208      	movs	r2, #8
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	e00c      	b.n	8002802 <UART_SetConfig+0x1fa>
 80027e8:	231b      	movs	r3, #27
 80027ea:	2218      	movs	r2, #24
 80027ec:	189b      	adds	r3, r3, r2
 80027ee:	19db      	adds	r3, r3, r7
 80027f0:	2210      	movs	r2, #16
 80027f2:	701a      	strb	r2, [r3, #0]
 80027f4:	e005      	b.n	8002802 <UART_SetConfig+0x1fa>
 80027f6:	231b      	movs	r3, #27
 80027f8:	2218      	movs	r2, #24
 80027fa:	189b      	adds	r3, r3, r2
 80027fc:	19db      	adds	r3, r3, r7
 80027fe:	2210      	movs	r2, #16
 8002800:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a55      	ldr	r2, [pc, #340]	; (800295c <UART_SetConfig+0x354>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d000      	beq.n	800280e <UART_SetConfig+0x206>
 800280c:	e084      	b.n	8002918 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800280e:	231b      	movs	r3, #27
 8002810:	2218      	movs	r2, #24
 8002812:	189b      	adds	r3, r3, r2
 8002814:	19db      	adds	r3, r3, r7
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b08      	cmp	r3, #8
 800281a:	d01d      	beq.n	8002858 <UART_SetConfig+0x250>
 800281c:	dc20      	bgt.n	8002860 <UART_SetConfig+0x258>
 800281e:	2b04      	cmp	r3, #4
 8002820:	d015      	beq.n	800284e <UART_SetConfig+0x246>
 8002822:	dc1d      	bgt.n	8002860 <UART_SetConfig+0x258>
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <UART_SetConfig+0x226>
 8002828:	2b02      	cmp	r3, #2
 800282a:	d005      	beq.n	8002838 <UART_SetConfig+0x230>
 800282c:	e018      	b.n	8002860 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800282e:	f7ff fc3d 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8002832:	0003      	movs	r3, r0
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002836:	e01c      	b.n	8002872 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002838:	4b4b      	ldr	r3, [pc, #300]	; (8002968 <UART_SetConfig+0x360>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2210      	movs	r2, #16
 800283e:	4013      	ands	r3, r2
 8002840:	d002      	beq.n	8002848 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002842:	4b4b      	ldr	r3, [pc, #300]	; (8002970 <UART_SetConfig+0x368>)
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002846:	e014      	b.n	8002872 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002848:	4b4a      	ldr	r3, [pc, #296]	; (8002974 <UART_SetConfig+0x36c>)
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800284c:	e011      	b.n	8002872 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800284e:	f7ff fb7d 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 8002852:	0003      	movs	r3, r0
 8002854:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002856:	e00c      	b.n	8002872 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800285e:	e008      	b.n	8002872 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002864:	231a      	movs	r3, #26
 8002866:	2218      	movs	r2, #24
 8002868:	189b      	adds	r3, r3, r2
 800286a:	19db      	adds	r3, r3, r7
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
        break;
 8002870:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d100      	bne.n	800287a <UART_SetConfig+0x272>
 8002878:	e132      	b.n	8002ae0 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	0013      	movs	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	189b      	adds	r3, r3, r2
 8002884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002886:	429a      	cmp	r2, r3
 8002888:	d305      	bcc.n	8002896 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002892:	429a      	cmp	r2, r3
 8002894:	d906      	bls.n	80028a4 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002896:	231a      	movs	r3, #26
 8002898:	2218      	movs	r2, #24
 800289a:	189b      	adds	r3, r3, r2
 800289c:	19db      	adds	r3, r3, r7
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e11d      	b.n	8002ae0 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	6939      	ldr	r1, [r7, #16]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	000b      	movs	r3, r1
 80028b2:	0e1b      	lsrs	r3, r3, #24
 80028b4:	0010      	movs	r0, r2
 80028b6:	0205      	lsls	r5, r0, #8
 80028b8:	431d      	orrs	r5, r3
 80028ba:	000b      	movs	r3, r1
 80028bc:	021c      	lsls	r4, r3, #8
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	085b      	lsrs	r3, r3, #1
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	68b8      	ldr	r0, [r7, #8]
 80028cc:	68f9      	ldr	r1, [r7, #12]
 80028ce:	1900      	adds	r0, r0, r4
 80028d0:	4169      	adcs	r1, r5
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	2300      	movs	r3, #0
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f7fd fca8 	bl	8000234 <__aeabi_uldivmod>
 80028e4:	0002      	movs	r2, r0
 80028e6:	000b      	movs	r3, r1
 80028e8:	0013      	movs	r3, r2
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80028ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028ee:	23c0      	movs	r3, #192	; 0xc0
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d309      	bcc.n	800290a <UART_SetConfig+0x302>
 80028f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	035b      	lsls	r3, r3, #13
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d204      	bcs.n	800290a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002906:	60da      	str	r2, [r3, #12]
 8002908:	e0ea      	b.n	8002ae0 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 800290a:	231a      	movs	r3, #26
 800290c:	2218      	movs	r2, #24
 800290e:	189b      	adds	r3, r3, r2
 8002910:	19db      	adds	r3, r3, r7
 8002912:	2201      	movs	r2, #1
 8002914:	701a      	strb	r2, [r3, #0]
 8002916:	e0e3      	b.n	8002ae0 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	69da      	ldr	r2, [r3, #28]
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	429a      	cmp	r2, r3
 8002922:	d000      	beq.n	8002926 <UART_SetConfig+0x31e>
 8002924:	e085      	b.n	8002a32 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002926:	231b      	movs	r3, #27
 8002928:	2218      	movs	r2, #24
 800292a:	189b      	adds	r3, r3, r2
 800292c:	19db      	adds	r3, r3, r7
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b08      	cmp	r3, #8
 8002932:	d837      	bhi.n	80029a4 <UART_SetConfig+0x39c>
 8002934:	009a      	lsls	r2, r3, #2
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <UART_SetConfig+0x370>)
 8002938:	18d3      	adds	r3, r2, r3
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800293e:	f7ff fbb5 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8002942:	0003      	movs	r3, r0
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002946:	e036      	b.n	80029b6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002948:	f7ff fbc6 	bl	80020d8 <HAL_RCC_GetPCLK2Freq>
 800294c:	0003      	movs	r3, r0
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002950:	e031      	b.n	80029b6 <UART_SetConfig+0x3ae>
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	efff69f3 	.word	0xefff69f3
 8002958:	ffffcfff 	.word	0xffffcfff
 800295c:	40004800 	.word	0x40004800
 8002960:	fffff4ff 	.word	0xfffff4ff
 8002964:	40013800 	.word	0x40013800
 8002968:	40021000 	.word	0x40021000
 800296c:	40004400 	.word	0x40004400
 8002970:	003d0900 	.word	0x003d0900
 8002974:	00f42400 	.word	0x00f42400
 8002978:	08003e80 	.word	0x08003e80
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800297c:	4b60      	ldr	r3, [pc, #384]	; (8002b00 <UART_SetConfig+0x4f8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2210      	movs	r2, #16
 8002982:	4013      	ands	r3, r2
 8002984:	d002      	beq.n	800298c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002986:	4b5f      	ldr	r3, [pc, #380]	; (8002b04 <UART_SetConfig+0x4fc>)
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800298a:	e014      	b.n	80029b6 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 800298c:	4b5e      	ldr	r3, [pc, #376]	; (8002b08 <UART_SetConfig+0x500>)
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002990:	e011      	b.n	80029b6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002992:	f7ff fadb 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 8002996:	0003      	movs	r3, r0
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800299a:	e00c      	b.n	80029b6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029a2:	e008      	b.n	80029b6 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80029a8:	231a      	movs	r3, #26
 80029aa:	2218      	movs	r2, #24
 80029ac:	189b      	adds	r3, r3, r2
 80029ae:	19db      	adds	r3, r3, r7
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
        break;
 80029b4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d100      	bne.n	80029be <UART_SetConfig+0x3b6>
 80029bc:	e090      	b.n	8002ae0 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	005a      	lsls	r2, r3, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	18d2      	adds	r2, r2, r3
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	0019      	movs	r1, r3
 80029d0:	0010      	movs	r0, r2
 80029d2:	f7fd fba3 	bl	800011c <__udivsi3>
 80029d6:	0003      	movs	r3, r0
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029dc:	2b0f      	cmp	r3, #15
 80029de:	d921      	bls.n	8002a24 <UART_SetConfig+0x41c>
 80029e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	025b      	lsls	r3, r3, #9
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d21c      	bcs.n	8002a24 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	200e      	movs	r0, #14
 80029f0:	2418      	movs	r4, #24
 80029f2:	1903      	adds	r3, r0, r4
 80029f4:	19db      	adds	r3, r3, r7
 80029f6:	210f      	movs	r1, #15
 80029f8:	438a      	bics	r2, r1
 80029fa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	085b      	lsrs	r3, r3, #1
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2207      	movs	r2, #7
 8002a04:	4013      	ands	r3, r2
 8002a06:	b299      	uxth	r1, r3
 8002a08:	1903      	adds	r3, r0, r4
 8002a0a:	19db      	adds	r3, r3, r7
 8002a0c:	1902      	adds	r2, r0, r4
 8002a0e:	19d2      	adds	r2, r2, r7
 8002a10:	8812      	ldrh	r2, [r2, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	1902      	adds	r2, r0, r4
 8002a1c:	19d2      	adds	r2, r2, r7
 8002a1e:	8812      	ldrh	r2, [r2, #0]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	e05d      	b.n	8002ae0 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002a24:	231a      	movs	r3, #26
 8002a26:	2218      	movs	r2, #24
 8002a28:	189b      	adds	r3, r3, r2
 8002a2a:	19db      	adds	r3, r3, r7
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	e056      	b.n	8002ae0 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a32:	231b      	movs	r3, #27
 8002a34:	2218      	movs	r2, #24
 8002a36:	189b      	adds	r3, r3, r2
 8002a38:	19db      	adds	r3, r3, r7
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d822      	bhi.n	8002a86 <UART_SetConfig+0x47e>
 8002a40:	009a      	lsls	r2, r3, #2
 8002a42:	4b32      	ldr	r3, [pc, #200]	; (8002b0c <UART_SetConfig+0x504>)
 8002a44:	18d3      	adds	r3, r2, r3
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a4a:	f7ff fb2f 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a52:	e021      	b.n	8002a98 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a54:	f7ff fb40 	bl	80020d8 <HAL_RCC_GetPCLK2Freq>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a5c:	e01c      	b.n	8002a98 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a5e:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <UART_SetConfig+0x4f8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2210      	movs	r2, #16
 8002a64:	4013      	ands	r3, r2
 8002a66:	d002      	beq.n	8002a6e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002a68:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <UART_SetConfig+0x4fc>)
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002a6c:	e014      	b.n	8002a98 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002a6e:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <UART_SetConfig+0x500>)
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a72:	e011      	b.n	8002a98 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a74:	f7ff fa6a 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a7c:	e00c      	b.n	8002a98 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a7e:	2380      	movs	r3, #128	; 0x80
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a84:	e008      	b.n	8002a98 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002a8a:	231a      	movs	r3, #26
 8002a8c:	2218      	movs	r2, #24
 8002a8e:	189b      	adds	r3, r3, r2
 8002a90:	19db      	adds	r3, r3, r7
 8002a92:	2201      	movs	r2, #1
 8002a94:	701a      	strb	r2, [r3, #0]
        break;
 8002a96:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d020      	beq.n	8002ae0 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	085a      	lsrs	r2, r3, #1
 8002aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa6:	18d2      	adds	r2, r2, r3
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	0019      	movs	r1, r3
 8002aae:	0010      	movs	r0, r2
 8002ab0:	f7fd fb34 	bl	800011c <__udivsi3>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aba:	2b0f      	cmp	r3, #15
 8002abc:	d90a      	bls.n	8002ad4 <UART_SetConfig+0x4cc>
 8002abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	025b      	lsls	r3, r3, #9
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d205      	bcs.n	8002ad4 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	e005      	b.n	8002ae0 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002ad4:	231a      	movs	r3, #26
 8002ad6:	2218      	movs	r2, #24
 8002ad8:	189b      	adds	r3, r3, r2
 8002ada:	19db      	adds	r3, r3, r7
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002aec:	231a      	movs	r3, #26
 8002aee:	2218      	movs	r2, #24
 8002af0:	189b      	adds	r3, r3, r2
 8002af2:	19db      	adds	r3, r3, r7
 8002af4:	781b      	ldrb	r3, [r3, #0]
}
 8002af6:	0018      	movs	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b00e      	add	sp, #56	; 0x38
 8002afc:	bdb0      	pop	{r4, r5, r7, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	40021000 	.word	0x40021000
 8002b04:	003d0900 	.word	0x003d0900
 8002b08:	00f42400 	.word	0x00f42400
 8002b0c:	08003ea4 	.word	0x08003ea4

08002b10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d00b      	beq.n	8002b3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a4a      	ldr	r2, [pc, #296]	; (8002c54 <UART_AdvFeatureConfig+0x144>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	0019      	movs	r1, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	2202      	movs	r2, #2
 8002b40:	4013      	ands	r3, r2
 8002b42:	d00b      	beq.n	8002b5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4a43      	ldr	r2, [pc, #268]	; (8002c58 <UART_AdvFeatureConfig+0x148>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	0019      	movs	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	2204      	movs	r2, #4
 8002b62:	4013      	ands	r3, r2
 8002b64:	d00b      	beq.n	8002b7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4a3b      	ldr	r2, [pc, #236]	; (8002c5c <UART_AdvFeatureConfig+0x14c>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	0019      	movs	r1, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	2208      	movs	r2, #8
 8002b84:	4013      	ands	r3, r2
 8002b86:	d00b      	beq.n	8002ba0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4a34      	ldr	r2, [pc, #208]	; (8002c60 <UART_AdvFeatureConfig+0x150>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	0019      	movs	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	2210      	movs	r2, #16
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d00b      	beq.n	8002bc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4a2c      	ldr	r2, [pc, #176]	; (8002c64 <UART_AdvFeatureConfig+0x154>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d00b      	beq.n	8002be4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	4a25      	ldr	r2, [pc, #148]	; (8002c68 <UART_AdvFeatureConfig+0x158>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	2240      	movs	r2, #64	; 0x40
 8002bea:	4013      	ands	r3, r2
 8002bec:	d01d      	beq.n	8002c2a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4a1d      	ldr	r2, [pc, #116]	; (8002c6c <UART_AdvFeatureConfig+0x15c>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	035b      	lsls	r3, r3, #13
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d10b      	bne.n	8002c2a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4a15      	ldr	r2, [pc, #84]	; (8002c70 <UART_AdvFeatureConfig+0x160>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	0019      	movs	r1, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	2280      	movs	r2, #128	; 0x80
 8002c30:	4013      	ands	r3, r2
 8002c32:	d00b      	beq.n	8002c4c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4a0e      	ldr	r2, [pc, #56]	; (8002c74 <UART_AdvFeatureConfig+0x164>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	0019      	movs	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	605a      	str	r2, [r3, #4]
  }
}
 8002c4c:	46c0      	nop			; (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b002      	add	sp, #8
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	fffdffff 	.word	0xfffdffff
 8002c58:	fffeffff 	.word	0xfffeffff
 8002c5c:	fffbffff 	.word	0xfffbffff
 8002c60:	ffff7fff 	.word	0xffff7fff
 8002c64:	ffffefff 	.word	0xffffefff
 8002c68:	ffffdfff 	.word	0xffffdfff
 8002c6c:	ffefffff 	.word	0xffefffff
 8002c70:	ff9fffff 	.word	0xff9fffff
 8002c74:	fff7ffff 	.word	0xfff7ffff

08002c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b092      	sub	sp, #72	; 0x48
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2284      	movs	r2, #132	; 0x84
 8002c84:	2100      	movs	r1, #0
 8002c86:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c88:	f7fe f9a0 	bl	8000fcc <HAL_GetTick>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2208      	movs	r2, #8
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d12c      	bne.n	8002cf8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	0391      	lsls	r1, r2, #14
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	4a46      	ldr	r2, [pc, #280]	; (8002dc0 <UART_CheckIdleState+0x148>)
 8002ca8:	9200      	str	r2, [sp, #0]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f000 f88c 	bl	8002dc8 <UART_WaitOnFlagUntilTimeout>
 8002cb0:	1e03      	subs	r3, r0, #0
 8002cb2:	d021      	beq.n	8002cf8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002cbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	f383 8810 	msr	PRIMASK, r3
}
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2180      	movs	r1, #128	; 0x80
 8002cd6:	438a      	bics	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	f383 8810 	msr	PRIMASK, r3
}
 8002ce4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2278      	movs	r2, #120	; 0x78
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e05f      	b.n	8002db8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2204      	movs	r2, #4
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d146      	bne.n	8002d94 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d08:	2280      	movs	r2, #128	; 0x80
 8002d0a:	03d1      	lsls	r1, r2, #15
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	4a2c      	ldr	r2, [pc, #176]	; (8002dc0 <UART_CheckIdleState+0x148>)
 8002d10:	9200      	str	r2, [sp, #0]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f000 f858 	bl	8002dc8 <UART_WaitOnFlagUntilTimeout>
 8002d18:	1e03      	subs	r3, r0, #0
 8002d1a:	d03b      	beq.n	8002d94 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d20:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d22:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d24:	637b      	str	r3, [r7, #52]	; 0x34
 8002d26:	2301      	movs	r3, #1
 8002d28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f383 8810 	msr	PRIMASK, r3
}
 8002d30:	46c0      	nop			; (mov r8, r8)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4921      	ldr	r1, [pc, #132]	; (8002dc4 <UART_CheckIdleState+0x14c>)
 8002d3e:	400a      	ands	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f383 8810 	msr	PRIMASK, r3
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d52:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d54:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d56:	633b      	str	r3, [r7, #48]	; 0x30
 8002d58:	2301      	movs	r3, #1
 8002d5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f383 8810 	msr	PRIMASK, r3
}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2101      	movs	r1, #1
 8002d70:	438a      	bics	r2, r1
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	f383 8810 	msr	PRIMASK, r3
}
 8002d7e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2280      	movs	r2, #128	; 0x80
 8002d84:	2120      	movs	r1, #32
 8002d86:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2278      	movs	r2, #120	; 0x78
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e011      	b.n	8002db8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2280      	movs	r2, #128	; 0x80
 8002d9e:	2120      	movs	r1, #32
 8002da0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2278      	movs	r2, #120	; 0x78
 8002db2:	2100      	movs	r1, #0
 8002db4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b010      	add	sp, #64	; 0x40
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	01ffffff 	.word	0x01ffffff
 8002dc4:	fffffedf 	.word	0xfffffedf

08002dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	1dfb      	adds	r3, r7, #7
 8002dd6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd8:	e04b      	b.n	8002e72 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	d048      	beq.n	8002e72 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de0:	f7fe f8f4 	bl	8000fcc <HAL_GetTick>
 8002de4:	0002      	movs	r2, r0
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d302      	bcc.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e04b      	b.n	8002e92 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2204      	movs	r2, #4
 8002e02:	4013      	ands	r3, r2
 8002e04:	d035      	beq.n	8002e72 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	2208      	movs	r2, #8
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d111      	bne.n	8002e38 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2208      	movs	r2, #8
 8002e1a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f000 f83c 	bl	8002e9c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2284      	movs	r2, #132	; 0x84
 8002e28:	2108      	movs	r1, #8
 8002e2a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2278      	movs	r2, #120	; 0x78
 8002e30:	2100      	movs	r1, #0
 8002e32:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e02c      	b.n	8002e92 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	401a      	ands	r2, r3
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d112      	bne.n	8002e72 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2280      	movs	r2, #128	; 0x80
 8002e52:	0112      	lsls	r2, r2, #4
 8002e54:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f000 f81f 	bl	8002e9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2284      	movs	r2, #132	; 0x84
 8002e62:	2120      	movs	r1, #32
 8002e64:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2278      	movs	r2, #120	; 0x78
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e00f      	b.n	8002e92 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	425a      	negs	r2, r3
 8002e82:	4153      	adcs	r3, r2
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	001a      	movs	r2, r3
 8002e88:	1dfb      	adds	r3, r7, #7
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d0a4      	beq.n	8002dda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b004      	add	sp, #16
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08e      	sub	sp, #56	; 0x38
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea8:	617b      	str	r3, [r7, #20]
  return(result);
 8002eaa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eac:	637b      	str	r3, [r7, #52]	; 0x34
 8002eae:	2301      	movs	r3, #1
 8002eb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	f383 8810 	msr	PRIMASK, r3
}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4926      	ldr	r1, [pc, #152]	; (8002f60 <UART_EndRxTransfer+0xc4>)
 8002ec6:	400a      	ands	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ecc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	f383 8810 	msr	PRIMASK, r3
}
 8002ed4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eda:	623b      	str	r3, [r7, #32]
  return(result);
 8002edc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ede:	633b      	str	r3, [r7, #48]	; 0x30
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	f383 8810 	msr	PRIMASK, r3
}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	438a      	bics	r2, r1
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	f383 8810 	msr	PRIMASK, r3
}
 8002f06:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d118      	bne.n	8002f42 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f10:	f3ef 8310 	mrs	r3, PRIMASK
 8002f14:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f16:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f383 8810 	msr	PRIMASK, r3
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2110      	movs	r1, #16
 8002f32:	438a      	bics	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f383 8810 	msr	PRIMASK, r3
}
 8002f40:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2280      	movs	r2, #128	; 0x80
 8002f46:	2120      	movs	r1, #32
 8002f48:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b00e      	add	sp, #56	; 0x38
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	fffffedf 	.word	0xfffffedf

08002f64 <std>:
 8002f64:	2300      	movs	r3, #0
 8002f66:	b510      	push	{r4, lr}
 8002f68:	0004      	movs	r4, r0
 8002f6a:	6003      	str	r3, [r0, #0]
 8002f6c:	6043      	str	r3, [r0, #4]
 8002f6e:	6083      	str	r3, [r0, #8]
 8002f70:	8181      	strh	r1, [r0, #12]
 8002f72:	6643      	str	r3, [r0, #100]	; 0x64
 8002f74:	81c2      	strh	r2, [r0, #14]
 8002f76:	6103      	str	r3, [r0, #16]
 8002f78:	6143      	str	r3, [r0, #20]
 8002f7a:	6183      	str	r3, [r0, #24]
 8002f7c:	0019      	movs	r1, r3
 8002f7e:	2208      	movs	r2, #8
 8002f80:	305c      	adds	r0, #92	; 0x5c
 8002f82:	f000 f90f 	bl	80031a4 <memset>
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <std+0x50>)
 8002f88:	6224      	str	r4, [r4, #32]
 8002f8a:	6263      	str	r3, [r4, #36]	; 0x24
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <std+0x54>)
 8002f8e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <std+0x58>)
 8002f92:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f94:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <std+0x5c>)
 8002f96:	6323      	str	r3, [r4, #48]	; 0x30
 8002f98:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <std+0x60>)
 8002f9a:	429c      	cmp	r4, r3
 8002f9c:	d005      	beq.n	8002faa <std+0x46>
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <std+0x64>)
 8002fa0:	429c      	cmp	r4, r3
 8002fa2:	d002      	beq.n	8002faa <std+0x46>
 8002fa4:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <std+0x68>)
 8002fa6:	429c      	cmp	r4, r3
 8002fa8:	d103      	bne.n	8002fb2 <std+0x4e>
 8002faa:	0020      	movs	r0, r4
 8002fac:	3058      	adds	r0, #88	; 0x58
 8002fae:	f000 f979 	bl	80032a4 <__retarget_lock_init_recursive>
 8002fb2:	bd10      	pop	{r4, pc}
 8002fb4:	0800310d 	.word	0x0800310d
 8002fb8:	08003135 	.word	0x08003135
 8002fbc:	0800316d 	.word	0x0800316d
 8002fc0:	08003199 	.word	0x08003199
 8002fc4:	20000134 	.word	0x20000134
 8002fc8:	2000019c 	.word	0x2000019c
 8002fcc:	20000204 	.word	0x20000204

08002fd0 <stdio_exit_handler>:
 8002fd0:	b510      	push	{r4, lr}
 8002fd2:	4a03      	ldr	r2, [pc, #12]	; (8002fe0 <stdio_exit_handler+0x10>)
 8002fd4:	4903      	ldr	r1, [pc, #12]	; (8002fe4 <stdio_exit_handler+0x14>)
 8002fd6:	4804      	ldr	r0, [pc, #16]	; (8002fe8 <stdio_exit_handler+0x18>)
 8002fd8:	f000 f86c 	bl	80030b4 <_fwalk_sglue>
 8002fdc:	bd10      	pop	{r4, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	2000000c 	.word	0x2000000c
 8002fe4:	08003b45 	.word	0x08003b45
 8002fe8:	20000018 	.word	0x20000018

08002fec <cleanup_stdio>:
 8002fec:	6841      	ldr	r1, [r0, #4]
 8002fee:	4b0b      	ldr	r3, [pc, #44]	; (800301c <cleanup_stdio+0x30>)
 8002ff0:	b510      	push	{r4, lr}
 8002ff2:	0004      	movs	r4, r0
 8002ff4:	4299      	cmp	r1, r3
 8002ff6:	d001      	beq.n	8002ffc <cleanup_stdio+0x10>
 8002ff8:	f000 fda4 	bl	8003b44 <_fflush_r>
 8002ffc:	68a1      	ldr	r1, [r4, #8]
 8002ffe:	4b08      	ldr	r3, [pc, #32]	; (8003020 <cleanup_stdio+0x34>)
 8003000:	4299      	cmp	r1, r3
 8003002:	d002      	beq.n	800300a <cleanup_stdio+0x1e>
 8003004:	0020      	movs	r0, r4
 8003006:	f000 fd9d 	bl	8003b44 <_fflush_r>
 800300a:	68e1      	ldr	r1, [r4, #12]
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <cleanup_stdio+0x38>)
 800300e:	4299      	cmp	r1, r3
 8003010:	d002      	beq.n	8003018 <cleanup_stdio+0x2c>
 8003012:	0020      	movs	r0, r4
 8003014:	f000 fd96 	bl	8003b44 <_fflush_r>
 8003018:	bd10      	pop	{r4, pc}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	20000134 	.word	0x20000134
 8003020:	2000019c 	.word	0x2000019c
 8003024:	20000204 	.word	0x20000204

08003028 <global_stdio_init.part.0>:
 8003028:	b510      	push	{r4, lr}
 800302a:	4b09      	ldr	r3, [pc, #36]	; (8003050 <global_stdio_init.part.0+0x28>)
 800302c:	4a09      	ldr	r2, [pc, #36]	; (8003054 <global_stdio_init.part.0+0x2c>)
 800302e:	2104      	movs	r1, #4
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	4809      	ldr	r0, [pc, #36]	; (8003058 <global_stdio_init.part.0+0x30>)
 8003034:	2200      	movs	r2, #0
 8003036:	f7ff ff95 	bl	8002f64 <std>
 800303a:	2201      	movs	r2, #1
 800303c:	2109      	movs	r1, #9
 800303e:	4807      	ldr	r0, [pc, #28]	; (800305c <global_stdio_init.part.0+0x34>)
 8003040:	f7ff ff90 	bl	8002f64 <std>
 8003044:	2202      	movs	r2, #2
 8003046:	2112      	movs	r1, #18
 8003048:	4805      	ldr	r0, [pc, #20]	; (8003060 <global_stdio_init.part.0+0x38>)
 800304a:	f7ff ff8b 	bl	8002f64 <std>
 800304e:	bd10      	pop	{r4, pc}
 8003050:	2000026c 	.word	0x2000026c
 8003054:	08002fd1 	.word	0x08002fd1
 8003058:	20000134 	.word	0x20000134
 800305c:	2000019c 	.word	0x2000019c
 8003060:	20000204 	.word	0x20000204

08003064 <__sfp_lock_acquire>:
 8003064:	b510      	push	{r4, lr}
 8003066:	4802      	ldr	r0, [pc, #8]	; (8003070 <__sfp_lock_acquire+0xc>)
 8003068:	f000 f91d 	bl	80032a6 <__retarget_lock_acquire_recursive>
 800306c:	bd10      	pop	{r4, pc}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	20000275 	.word	0x20000275

08003074 <__sfp_lock_release>:
 8003074:	b510      	push	{r4, lr}
 8003076:	4802      	ldr	r0, [pc, #8]	; (8003080 <__sfp_lock_release+0xc>)
 8003078:	f000 f916 	bl	80032a8 <__retarget_lock_release_recursive>
 800307c:	bd10      	pop	{r4, pc}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	20000275 	.word	0x20000275

08003084 <__sinit>:
 8003084:	b510      	push	{r4, lr}
 8003086:	0004      	movs	r4, r0
 8003088:	f7ff ffec 	bl	8003064 <__sfp_lock_acquire>
 800308c:	6a23      	ldr	r3, [r4, #32]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <__sinit+0x14>
 8003092:	f7ff ffef 	bl	8003074 <__sfp_lock_release>
 8003096:	bd10      	pop	{r4, pc}
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <__sinit+0x28>)
 800309a:	6223      	str	r3, [r4, #32]
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <__sinit+0x2c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f6      	bne.n	8003092 <__sinit+0xe>
 80030a4:	f7ff ffc0 	bl	8003028 <global_stdio_init.part.0>
 80030a8:	e7f3      	b.n	8003092 <__sinit+0xe>
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	08002fed 	.word	0x08002fed
 80030b0:	2000026c 	.word	0x2000026c

080030b4 <_fwalk_sglue>:
 80030b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030b6:	0014      	movs	r4, r2
 80030b8:	2600      	movs	r6, #0
 80030ba:	9000      	str	r0, [sp, #0]
 80030bc:	9101      	str	r1, [sp, #4]
 80030be:	68a5      	ldr	r5, [r4, #8]
 80030c0:	6867      	ldr	r7, [r4, #4]
 80030c2:	3f01      	subs	r7, #1
 80030c4:	d504      	bpl.n	80030d0 <_fwalk_sglue+0x1c>
 80030c6:	6824      	ldr	r4, [r4, #0]
 80030c8:	2c00      	cmp	r4, #0
 80030ca:	d1f8      	bne.n	80030be <_fwalk_sglue+0xa>
 80030cc:	0030      	movs	r0, r6
 80030ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80030d0:	89ab      	ldrh	r3, [r5, #12]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d908      	bls.n	80030e8 <_fwalk_sglue+0x34>
 80030d6:	220e      	movs	r2, #14
 80030d8:	5eab      	ldrsh	r3, [r5, r2]
 80030da:	3301      	adds	r3, #1
 80030dc:	d004      	beq.n	80030e8 <_fwalk_sglue+0x34>
 80030de:	0029      	movs	r1, r5
 80030e0:	9800      	ldr	r0, [sp, #0]
 80030e2:	9b01      	ldr	r3, [sp, #4]
 80030e4:	4798      	blx	r3
 80030e6:	4306      	orrs	r6, r0
 80030e8:	3568      	adds	r5, #104	; 0x68
 80030ea:	e7ea      	b.n	80030c2 <_fwalk_sglue+0xe>

080030ec <iprintf>:
 80030ec:	b40f      	push	{r0, r1, r2, r3}
 80030ee:	b507      	push	{r0, r1, r2, lr}
 80030f0:	4905      	ldr	r1, [pc, #20]	; (8003108 <iprintf+0x1c>)
 80030f2:	ab04      	add	r3, sp, #16
 80030f4:	6808      	ldr	r0, [r1, #0]
 80030f6:	cb04      	ldmia	r3!, {r2}
 80030f8:	6881      	ldr	r1, [r0, #8]
 80030fa:	9301      	str	r3, [sp, #4]
 80030fc:	f000 f9fc 	bl	80034f8 <_vfiprintf_r>
 8003100:	b003      	add	sp, #12
 8003102:	bc08      	pop	{r3}
 8003104:	b004      	add	sp, #16
 8003106:	4718      	bx	r3
 8003108:	20000064 	.word	0x20000064

0800310c <__sread>:
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	000c      	movs	r4, r1
 8003110:	250e      	movs	r5, #14
 8003112:	5f49      	ldrsh	r1, [r1, r5]
 8003114:	f000 f874 	bl	8003200 <_read_r>
 8003118:	2800      	cmp	r0, #0
 800311a:	db03      	blt.n	8003124 <__sread+0x18>
 800311c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800311e:	181b      	adds	r3, r3, r0
 8003120:	6563      	str	r3, [r4, #84]	; 0x54
 8003122:	bd70      	pop	{r4, r5, r6, pc}
 8003124:	89a3      	ldrh	r3, [r4, #12]
 8003126:	4a02      	ldr	r2, [pc, #8]	; (8003130 <__sread+0x24>)
 8003128:	4013      	ands	r3, r2
 800312a:	81a3      	strh	r3, [r4, #12]
 800312c:	e7f9      	b.n	8003122 <__sread+0x16>
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	ffffefff 	.word	0xffffefff

08003134 <__swrite>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	001f      	movs	r7, r3
 8003138:	898b      	ldrh	r3, [r1, #12]
 800313a:	0005      	movs	r5, r0
 800313c:	000c      	movs	r4, r1
 800313e:	0016      	movs	r6, r2
 8003140:	05db      	lsls	r3, r3, #23
 8003142:	d505      	bpl.n	8003150 <__swrite+0x1c>
 8003144:	230e      	movs	r3, #14
 8003146:	5ec9      	ldrsh	r1, [r1, r3]
 8003148:	2200      	movs	r2, #0
 800314a:	2302      	movs	r3, #2
 800314c:	f000 f844 	bl	80031d8 <_lseek_r>
 8003150:	89a3      	ldrh	r3, [r4, #12]
 8003152:	4a05      	ldr	r2, [pc, #20]	; (8003168 <__swrite+0x34>)
 8003154:	0028      	movs	r0, r5
 8003156:	4013      	ands	r3, r2
 8003158:	81a3      	strh	r3, [r4, #12]
 800315a:	0032      	movs	r2, r6
 800315c:	230e      	movs	r3, #14
 800315e:	5ee1      	ldrsh	r1, [r4, r3]
 8003160:	003b      	movs	r3, r7
 8003162:	f000 f861 	bl	8003228 <_write_r>
 8003166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003168:	ffffefff 	.word	0xffffefff

0800316c <__sseek>:
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	000c      	movs	r4, r1
 8003170:	250e      	movs	r5, #14
 8003172:	5f49      	ldrsh	r1, [r1, r5]
 8003174:	f000 f830 	bl	80031d8 <_lseek_r>
 8003178:	89a3      	ldrh	r3, [r4, #12]
 800317a:	1c42      	adds	r2, r0, #1
 800317c:	d103      	bne.n	8003186 <__sseek+0x1a>
 800317e:	4a05      	ldr	r2, [pc, #20]	; (8003194 <__sseek+0x28>)
 8003180:	4013      	ands	r3, r2
 8003182:	81a3      	strh	r3, [r4, #12]
 8003184:	bd70      	pop	{r4, r5, r6, pc}
 8003186:	2280      	movs	r2, #128	; 0x80
 8003188:	0152      	lsls	r2, r2, #5
 800318a:	4313      	orrs	r3, r2
 800318c:	81a3      	strh	r3, [r4, #12]
 800318e:	6560      	str	r0, [r4, #84]	; 0x54
 8003190:	e7f8      	b.n	8003184 <__sseek+0x18>
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	ffffefff 	.word	0xffffefff

08003198 <__sclose>:
 8003198:	b510      	push	{r4, lr}
 800319a:	230e      	movs	r3, #14
 800319c:	5ec9      	ldrsh	r1, [r1, r3]
 800319e:	f000 f809 	bl	80031b4 <_close_r>
 80031a2:	bd10      	pop	{r4, pc}

080031a4 <memset>:
 80031a4:	0003      	movs	r3, r0
 80031a6:	1882      	adds	r2, r0, r2
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d100      	bne.n	80031ae <memset+0xa>
 80031ac:	4770      	bx	lr
 80031ae:	7019      	strb	r1, [r3, #0]
 80031b0:	3301      	adds	r3, #1
 80031b2:	e7f9      	b.n	80031a8 <memset+0x4>

080031b4 <_close_r>:
 80031b4:	2300      	movs	r3, #0
 80031b6:	b570      	push	{r4, r5, r6, lr}
 80031b8:	4d06      	ldr	r5, [pc, #24]	; (80031d4 <_close_r+0x20>)
 80031ba:	0004      	movs	r4, r0
 80031bc:	0008      	movs	r0, r1
 80031be:	602b      	str	r3, [r5, #0]
 80031c0:	f7fd fe0c 	bl	8000ddc <_close>
 80031c4:	1c43      	adds	r3, r0, #1
 80031c6:	d103      	bne.n	80031d0 <_close_r+0x1c>
 80031c8:	682b      	ldr	r3, [r5, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d000      	beq.n	80031d0 <_close_r+0x1c>
 80031ce:	6023      	str	r3, [r4, #0]
 80031d0:	bd70      	pop	{r4, r5, r6, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	20000270 	.word	0x20000270

080031d8 <_lseek_r>:
 80031d8:	b570      	push	{r4, r5, r6, lr}
 80031da:	0004      	movs	r4, r0
 80031dc:	0008      	movs	r0, r1
 80031de:	0011      	movs	r1, r2
 80031e0:	001a      	movs	r2, r3
 80031e2:	2300      	movs	r3, #0
 80031e4:	4d05      	ldr	r5, [pc, #20]	; (80031fc <_lseek_r+0x24>)
 80031e6:	602b      	str	r3, [r5, #0]
 80031e8:	f7fd fe19 	bl	8000e1e <_lseek>
 80031ec:	1c43      	adds	r3, r0, #1
 80031ee:	d103      	bne.n	80031f8 <_lseek_r+0x20>
 80031f0:	682b      	ldr	r3, [r5, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d000      	beq.n	80031f8 <_lseek_r+0x20>
 80031f6:	6023      	str	r3, [r4, #0]
 80031f8:	bd70      	pop	{r4, r5, r6, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	20000270 	.word	0x20000270

08003200 <_read_r>:
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	0004      	movs	r4, r0
 8003204:	0008      	movs	r0, r1
 8003206:	0011      	movs	r1, r2
 8003208:	001a      	movs	r2, r3
 800320a:	2300      	movs	r3, #0
 800320c:	4d05      	ldr	r5, [pc, #20]	; (8003224 <_read_r+0x24>)
 800320e:	602b      	str	r3, [r5, #0]
 8003210:	f7fd fdb0 	bl	8000d74 <_read>
 8003214:	1c43      	adds	r3, r0, #1
 8003216:	d103      	bne.n	8003220 <_read_r+0x20>
 8003218:	682b      	ldr	r3, [r5, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d000      	beq.n	8003220 <_read_r+0x20>
 800321e:	6023      	str	r3, [r4, #0]
 8003220:	bd70      	pop	{r4, r5, r6, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	20000270 	.word	0x20000270

08003228 <_write_r>:
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	0004      	movs	r4, r0
 800322c:	0008      	movs	r0, r1
 800322e:	0011      	movs	r1, r2
 8003230:	001a      	movs	r2, r3
 8003232:	2300      	movs	r3, #0
 8003234:	4d05      	ldr	r5, [pc, #20]	; (800324c <_write_r+0x24>)
 8003236:	602b      	str	r3, [r5, #0]
 8003238:	f7fd fdba 	bl	8000db0 <_write>
 800323c:	1c43      	adds	r3, r0, #1
 800323e:	d103      	bne.n	8003248 <_write_r+0x20>
 8003240:	682b      	ldr	r3, [r5, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d000      	beq.n	8003248 <_write_r+0x20>
 8003246:	6023      	str	r3, [r4, #0]
 8003248:	bd70      	pop	{r4, r5, r6, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	20000270 	.word	0x20000270

08003250 <__errno>:
 8003250:	4b01      	ldr	r3, [pc, #4]	; (8003258 <__errno+0x8>)
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	4770      	bx	lr
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	20000064 	.word	0x20000064

0800325c <__libc_init_array>:
 800325c:	b570      	push	{r4, r5, r6, lr}
 800325e:	2600      	movs	r6, #0
 8003260:	4c0c      	ldr	r4, [pc, #48]	; (8003294 <__libc_init_array+0x38>)
 8003262:	4d0d      	ldr	r5, [pc, #52]	; (8003298 <__libc_init_array+0x3c>)
 8003264:	1b64      	subs	r4, r4, r5
 8003266:	10a4      	asrs	r4, r4, #2
 8003268:	42a6      	cmp	r6, r4
 800326a:	d109      	bne.n	8003280 <__libc_init_array+0x24>
 800326c:	2600      	movs	r6, #0
 800326e:	f000 fde3 	bl	8003e38 <_init>
 8003272:	4c0a      	ldr	r4, [pc, #40]	; (800329c <__libc_init_array+0x40>)
 8003274:	4d0a      	ldr	r5, [pc, #40]	; (80032a0 <__libc_init_array+0x44>)
 8003276:	1b64      	subs	r4, r4, r5
 8003278:	10a4      	asrs	r4, r4, #2
 800327a:	42a6      	cmp	r6, r4
 800327c:	d105      	bne.n	800328a <__libc_init_array+0x2e>
 800327e:	bd70      	pop	{r4, r5, r6, pc}
 8003280:	00b3      	lsls	r3, r6, #2
 8003282:	58eb      	ldr	r3, [r5, r3]
 8003284:	4798      	blx	r3
 8003286:	3601      	adds	r6, #1
 8003288:	e7ee      	b.n	8003268 <__libc_init_array+0xc>
 800328a:	00b3      	lsls	r3, r6, #2
 800328c:	58eb      	ldr	r3, [r5, r3]
 800328e:	4798      	blx	r3
 8003290:	3601      	adds	r6, #1
 8003292:	e7f2      	b.n	800327a <__libc_init_array+0x1e>
 8003294:	08003f04 	.word	0x08003f04
 8003298:	08003f04 	.word	0x08003f04
 800329c:	08003f08 	.word	0x08003f08
 80032a0:	08003f04 	.word	0x08003f04

080032a4 <__retarget_lock_init_recursive>:
 80032a4:	4770      	bx	lr

080032a6 <__retarget_lock_acquire_recursive>:
 80032a6:	4770      	bx	lr

080032a8 <__retarget_lock_release_recursive>:
 80032a8:	4770      	bx	lr
	...

080032ac <_free_r>:
 80032ac:	b570      	push	{r4, r5, r6, lr}
 80032ae:	0005      	movs	r5, r0
 80032b0:	2900      	cmp	r1, #0
 80032b2:	d010      	beq.n	80032d6 <_free_r+0x2a>
 80032b4:	1f0c      	subs	r4, r1, #4
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	da00      	bge.n	80032be <_free_r+0x12>
 80032bc:	18e4      	adds	r4, r4, r3
 80032be:	0028      	movs	r0, r5
 80032c0:	f000 f8e2 	bl	8003488 <__malloc_lock>
 80032c4:	4a1d      	ldr	r2, [pc, #116]	; (800333c <_free_r+0x90>)
 80032c6:	6813      	ldr	r3, [r2, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d105      	bne.n	80032d8 <_free_r+0x2c>
 80032cc:	6063      	str	r3, [r4, #4]
 80032ce:	6014      	str	r4, [r2, #0]
 80032d0:	0028      	movs	r0, r5
 80032d2:	f000 f8e1 	bl	8003498 <__malloc_unlock>
 80032d6:	bd70      	pop	{r4, r5, r6, pc}
 80032d8:	42a3      	cmp	r3, r4
 80032da:	d908      	bls.n	80032ee <_free_r+0x42>
 80032dc:	6820      	ldr	r0, [r4, #0]
 80032de:	1821      	adds	r1, r4, r0
 80032e0:	428b      	cmp	r3, r1
 80032e2:	d1f3      	bne.n	80032cc <_free_r+0x20>
 80032e4:	6819      	ldr	r1, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	1809      	adds	r1, r1, r0
 80032ea:	6021      	str	r1, [r4, #0]
 80032ec:	e7ee      	b.n	80032cc <_free_r+0x20>
 80032ee:	001a      	movs	r2, r3
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <_free_r+0x4e>
 80032f6:	42a3      	cmp	r3, r4
 80032f8:	d9f9      	bls.n	80032ee <_free_r+0x42>
 80032fa:	6811      	ldr	r1, [r2, #0]
 80032fc:	1850      	adds	r0, r2, r1
 80032fe:	42a0      	cmp	r0, r4
 8003300:	d10b      	bne.n	800331a <_free_r+0x6e>
 8003302:	6820      	ldr	r0, [r4, #0]
 8003304:	1809      	adds	r1, r1, r0
 8003306:	1850      	adds	r0, r2, r1
 8003308:	6011      	str	r1, [r2, #0]
 800330a:	4283      	cmp	r3, r0
 800330c:	d1e0      	bne.n	80032d0 <_free_r+0x24>
 800330e:	6818      	ldr	r0, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	1841      	adds	r1, r0, r1
 8003314:	6011      	str	r1, [r2, #0]
 8003316:	6053      	str	r3, [r2, #4]
 8003318:	e7da      	b.n	80032d0 <_free_r+0x24>
 800331a:	42a0      	cmp	r0, r4
 800331c:	d902      	bls.n	8003324 <_free_r+0x78>
 800331e:	230c      	movs	r3, #12
 8003320:	602b      	str	r3, [r5, #0]
 8003322:	e7d5      	b.n	80032d0 <_free_r+0x24>
 8003324:	6820      	ldr	r0, [r4, #0]
 8003326:	1821      	adds	r1, r4, r0
 8003328:	428b      	cmp	r3, r1
 800332a:	d103      	bne.n	8003334 <_free_r+0x88>
 800332c:	6819      	ldr	r1, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	1809      	adds	r1, r1, r0
 8003332:	6021      	str	r1, [r4, #0]
 8003334:	6063      	str	r3, [r4, #4]
 8003336:	6054      	str	r4, [r2, #4]
 8003338:	e7ca      	b.n	80032d0 <_free_r+0x24>
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	20000278 	.word	0x20000278

08003340 <sbrk_aligned>:
 8003340:	b570      	push	{r4, r5, r6, lr}
 8003342:	4e0f      	ldr	r6, [pc, #60]	; (8003380 <sbrk_aligned+0x40>)
 8003344:	000d      	movs	r5, r1
 8003346:	6831      	ldr	r1, [r6, #0]
 8003348:	0004      	movs	r4, r0
 800334a:	2900      	cmp	r1, #0
 800334c:	d102      	bne.n	8003354 <sbrk_aligned+0x14>
 800334e:	f000 fccb 	bl	8003ce8 <_sbrk_r>
 8003352:	6030      	str	r0, [r6, #0]
 8003354:	0029      	movs	r1, r5
 8003356:	0020      	movs	r0, r4
 8003358:	f000 fcc6 	bl	8003ce8 <_sbrk_r>
 800335c:	1c43      	adds	r3, r0, #1
 800335e:	d00a      	beq.n	8003376 <sbrk_aligned+0x36>
 8003360:	2303      	movs	r3, #3
 8003362:	1cc5      	adds	r5, r0, #3
 8003364:	439d      	bics	r5, r3
 8003366:	42a8      	cmp	r0, r5
 8003368:	d007      	beq.n	800337a <sbrk_aligned+0x3a>
 800336a:	1a29      	subs	r1, r5, r0
 800336c:	0020      	movs	r0, r4
 800336e:	f000 fcbb 	bl	8003ce8 <_sbrk_r>
 8003372:	3001      	adds	r0, #1
 8003374:	d101      	bne.n	800337a <sbrk_aligned+0x3a>
 8003376:	2501      	movs	r5, #1
 8003378:	426d      	negs	r5, r5
 800337a:	0028      	movs	r0, r5
 800337c:	bd70      	pop	{r4, r5, r6, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	2000027c 	.word	0x2000027c

08003384 <_malloc_r>:
 8003384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003386:	2203      	movs	r2, #3
 8003388:	1ccb      	adds	r3, r1, #3
 800338a:	4393      	bics	r3, r2
 800338c:	3308      	adds	r3, #8
 800338e:	0006      	movs	r6, r0
 8003390:	001f      	movs	r7, r3
 8003392:	2b0c      	cmp	r3, #12
 8003394:	d238      	bcs.n	8003408 <_malloc_r+0x84>
 8003396:	270c      	movs	r7, #12
 8003398:	42b9      	cmp	r1, r7
 800339a:	d837      	bhi.n	800340c <_malloc_r+0x88>
 800339c:	0030      	movs	r0, r6
 800339e:	f000 f873 	bl	8003488 <__malloc_lock>
 80033a2:	4b38      	ldr	r3, [pc, #224]	; (8003484 <_malloc_r+0x100>)
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	001c      	movs	r4, r3
 80033aa:	2c00      	cmp	r4, #0
 80033ac:	d133      	bne.n	8003416 <_malloc_r+0x92>
 80033ae:	0039      	movs	r1, r7
 80033b0:	0030      	movs	r0, r6
 80033b2:	f7ff ffc5 	bl	8003340 <sbrk_aligned>
 80033b6:	0004      	movs	r4, r0
 80033b8:	1c43      	adds	r3, r0, #1
 80033ba:	d15e      	bne.n	800347a <_malloc_r+0xf6>
 80033bc:	9b00      	ldr	r3, [sp, #0]
 80033be:	681c      	ldr	r4, [r3, #0]
 80033c0:	0025      	movs	r5, r4
 80033c2:	2d00      	cmp	r5, #0
 80033c4:	d14e      	bne.n	8003464 <_malloc_r+0xe0>
 80033c6:	2c00      	cmp	r4, #0
 80033c8:	d051      	beq.n	800346e <_malloc_r+0xea>
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	0029      	movs	r1, r5
 80033ce:	18e3      	adds	r3, r4, r3
 80033d0:	0030      	movs	r0, r6
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	f000 fc88 	bl	8003ce8 <_sbrk_r>
 80033d8:	9b01      	ldr	r3, [sp, #4]
 80033da:	4283      	cmp	r3, r0
 80033dc:	d147      	bne.n	800346e <_malloc_r+0xea>
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	0030      	movs	r0, r6
 80033e2:	1aff      	subs	r7, r7, r3
 80033e4:	0039      	movs	r1, r7
 80033e6:	f7ff ffab 	bl	8003340 <sbrk_aligned>
 80033ea:	3001      	adds	r0, #1
 80033ec:	d03f      	beq.n	800346e <_malloc_r+0xea>
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	19db      	adds	r3, r3, r7
 80033f2:	6023      	str	r3, [r4, #0]
 80033f4:	9b00      	ldr	r3, [sp, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d040      	beq.n	800347e <_malloc_r+0xfa>
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	42a2      	cmp	r2, r4
 8003400:	d133      	bne.n	800346a <_malloc_r+0xe6>
 8003402:	2200      	movs	r2, #0
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	e014      	b.n	8003432 <_malloc_r+0xae>
 8003408:	2b00      	cmp	r3, #0
 800340a:	dac5      	bge.n	8003398 <_malloc_r+0x14>
 800340c:	230c      	movs	r3, #12
 800340e:	2500      	movs	r5, #0
 8003410:	6033      	str	r3, [r6, #0]
 8003412:	0028      	movs	r0, r5
 8003414:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003416:	6821      	ldr	r1, [r4, #0]
 8003418:	1bc9      	subs	r1, r1, r7
 800341a:	d420      	bmi.n	800345e <_malloc_r+0xda>
 800341c:	290b      	cmp	r1, #11
 800341e:	d918      	bls.n	8003452 <_malloc_r+0xce>
 8003420:	19e2      	adds	r2, r4, r7
 8003422:	6027      	str	r7, [r4, #0]
 8003424:	42a3      	cmp	r3, r4
 8003426:	d112      	bne.n	800344e <_malloc_r+0xca>
 8003428:	9b00      	ldr	r3, [sp, #0]
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	6863      	ldr	r3, [r4, #4]
 800342e:	6011      	str	r1, [r2, #0]
 8003430:	6053      	str	r3, [r2, #4]
 8003432:	0030      	movs	r0, r6
 8003434:	0025      	movs	r5, r4
 8003436:	f000 f82f 	bl	8003498 <__malloc_unlock>
 800343a:	2207      	movs	r2, #7
 800343c:	350b      	adds	r5, #11
 800343e:	1d23      	adds	r3, r4, #4
 8003440:	4395      	bics	r5, r2
 8003442:	1aea      	subs	r2, r5, r3
 8003444:	429d      	cmp	r5, r3
 8003446:	d0e4      	beq.n	8003412 <_malloc_r+0x8e>
 8003448:	1b5b      	subs	r3, r3, r5
 800344a:	50a3      	str	r3, [r4, r2]
 800344c:	e7e1      	b.n	8003412 <_malloc_r+0x8e>
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	e7ec      	b.n	800342c <_malloc_r+0xa8>
 8003452:	6862      	ldr	r2, [r4, #4]
 8003454:	42a3      	cmp	r3, r4
 8003456:	d1d5      	bne.n	8003404 <_malloc_r+0x80>
 8003458:	9b00      	ldr	r3, [sp, #0]
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	e7e9      	b.n	8003432 <_malloc_r+0xae>
 800345e:	0023      	movs	r3, r4
 8003460:	6864      	ldr	r4, [r4, #4]
 8003462:	e7a2      	b.n	80033aa <_malloc_r+0x26>
 8003464:	002c      	movs	r4, r5
 8003466:	686d      	ldr	r5, [r5, #4]
 8003468:	e7ab      	b.n	80033c2 <_malloc_r+0x3e>
 800346a:	0013      	movs	r3, r2
 800346c:	e7c4      	b.n	80033f8 <_malloc_r+0x74>
 800346e:	230c      	movs	r3, #12
 8003470:	0030      	movs	r0, r6
 8003472:	6033      	str	r3, [r6, #0]
 8003474:	f000 f810 	bl	8003498 <__malloc_unlock>
 8003478:	e7cb      	b.n	8003412 <_malloc_r+0x8e>
 800347a:	6027      	str	r7, [r4, #0]
 800347c:	e7d9      	b.n	8003432 <_malloc_r+0xae>
 800347e:	605b      	str	r3, [r3, #4]
 8003480:	deff      	udf	#255	; 0xff
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	20000278 	.word	0x20000278

08003488 <__malloc_lock>:
 8003488:	b510      	push	{r4, lr}
 800348a:	4802      	ldr	r0, [pc, #8]	; (8003494 <__malloc_lock+0xc>)
 800348c:	f7ff ff0b 	bl	80032a6 <__retarget_lock_acquire_recursive>
 8003490:	bd10      	pop	{r4, pc}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	20000274 	.word	0x20000274

08003498 <__malloc_unlock>:
 8003498:	b510      	push	{r4, lr}
 800349a:	4802      	ldr	r0, [pc, #8]	; (80034a4 <__malloc_unlock+0xc>)
 800349c:	f7ff ff04 	bl	80032a8 <__retarget_lock_release_recursive>
 80034a0:	bd10      	pop	{r4, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	20000274 	.word	0x20000274

080034a8 <__sfputc_r>:
 80034a8:	6893      	ldr	r3, [r2, #8]
 80034aa:	b510      	push	{r4, lr}
 80034ac:	3b01      	subs	r3, #1
 80034ae:	6093      	str	r3, [r2, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	da04      	bge.n	80034be <__sfputc_r+0x16>
 80034b4:	6994      	ldr	r4, [r2, #24]
 80034b6:	42a3      	cmp	r3, r4
 80034b8:	db07      	blt.n	80034ca <__sfputc_r+0x22>
 80034ba:	290a      	cmp	r1, #10
 80034bc:	d005      	beq.n	80034ca <__sfputc_r+0x22>
 80034be:	6813      	ldr	r3, [r2, #0]
 80034c0:	1c58      	adds	r0, r3, #1
 80034c2:	6010      	str	r0, [r2, #0]
 80034c4:	7019      	strb	r1, [r3, #0]
 80034c6:	0008      	movs	r0, r1
 80034c8:	bd10      	pop	{r4, pc}
 80034ca:	f000 fb66 	bl	8003b9a <__swbuf_r>
 80034ce:	0001      	movs	r1, r0
 80034d0:	e7f9      	b.n	80034c6 <__sfputc_r+0x1e>

080034d2 <__sfputs_r>:
 80034d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d4:	0006      	movs	r6, r0
 80034d6:	000f      	movs	r7, r1
 80034d8:	0014      	movs	r4, r2
 80034da:	18d5      	adds	r5, r2, r3
 80034dc:	42ac      	cmp	r4, r5
 80034de:	d101      	bne.n	80034e4 <__sfputs_r+0x12>
 80034e0:	2000      	movs	r0, #0
 80034e2:	e007      	b.n	80034f4 <__sfputs_r+0x22>
 80034e4:	7821      	ldrb	r1, [r4, #0]
 80034e6:	003a      	movs	r2, r7
 80034e8:	0030      	movs	r0, r6
 80034ea:	f7ff ffdd 	bl	80034a8 <__sfputc_r>
 80034ee:	3401      	adds	r4, #1
 80034f0:	1c43      	adds	r3, r0, #1
 80034f2:	d1f3      	bne.n	80034dc <__sfputs_r+0xa>
 80034f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080034f8 <_vfiprintf_r>:
 80034f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fa:	b0a1      	sub	sp, #132	; 0x84
 80034fc:	000f      	movs	r7, r1
 80034fe:	0015      	movs	r5, r2
 8003500:	001e      	movs	r6, r3
 8003502:	9003      	str	r0, [sp, #12]
 8003504:	2800      	cmp	r0, #0
 8003506:	d004      	beq.n	8003512 <_vfiprintf_r+0x1a>
 8003508:	6a03      	ldr	r3, [r0, #32]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <_vfiprintf_r+0x1a>
 800350e:	f7ff fdb9 	bl	8003084 <__sinit>
 8003512:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003514:	07db      	lsls	r3, r3, #31
 8003516:	d405      	bmi.n	8003524 <_vfiprintf_r+0x2c>
 8003518:	89bb      	ldrh	r3, [r7, #12]
 800351a:	059b      	lsls	r3, r3, #22
 800351c:	d402      	bmi.n	8003524 <_vfiprintf_r+0x2c>
 800351e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003520:	f7ff fec1 	bl	80032a6 <__retarget_lock_acquire_recursive>
 8003524:	89bb      	ldrh	r3, [r7, #12]
 8003526:	071b      	lsls	r3, r3, #28
 8003528:	d502      	bpl.n	8003530 <_vfiprintf_r+0x38>
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d113      	bne.n	8003558 <_vfiprintf_r+0x60>
 8003530:	0039      	movs	r1, r7
 8003532:	9803      	ldr	r0, [sp, #12]
 8003534:	f000 fb74 	bl	8003c20 <__swsetup_r>
 8003538:	2800      	cmp	r0, #0
 800353a:	d00d      	beq.n	8003558 <_vfiprintf_r+0x60>
 800353c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800353e:	07db      	lsls	r3, r3, #31
 8003540:	d503      	bpl.n	800354a <_vfiprintf_r+0x52>
 8003542:	2001      	movs	r0, #1
 8003544:	4240      	negs	r0, r0
 8003546:	b021      	add	sp, #132	; 0x84
 8003548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800354a:	89bb      	ldrh	r3, [r7, #12]
 800354c:	059b      	lsls	r3, r3, #22
 800354e:	d4f8      	bmi.n	8003542 <_vfiprintf_r+0x4a>
 8003550:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003552:	f7ff fea9 	bl	80032a8 <__retarget_lock_release_recursive>
 8003556:	e7f4      	b.n	8003542 <_vfiprintf_r+0x4a>
 8003558:	2300      	movs	r3, #0
 800355a:	ac08      	add	r4, sp, #32
 800355c:	6163      	str	r3, [r4, #20]
 800355e:	3320      	adds	r3, #32
 8003560:	7663      	strb	r3, [r4, #25]
 8003562:	3310      	adds	r3, #16
 8003564:	76a3      	strb	r3, [r4, #26]
 8003566:	9607      	str	r6, [sp, #28]
 8003568:	002e      	movs	r6, r5
 800356a:	7833      	ldrb	r3, [r6, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <_vfiprintf_r+0x7c>
 8003570:	2b25      	cmp	r3, #37	; 0x25
 8003572:	d148      	bne.n	8003606 <_vfiprintf_r+0x10e>
 8003574:	1b73      	subs	r3, r6, r5
 8003576:	9305      	str	r3, [sp, #20]
 8003578:	42ae      	cmp	r6, r5
 800357a:	d00b      	beq.n	8003594 <_vfiprintf_r+0x9c>
 800357c:	002a      	movs	r2, r5
 800357e:	0039      	movs	r1, r7
 8003580:	9803      	ldr	r0, [sp, #12]
 8003582:	f7ff ffa6 	bl	80034d2 <__sfputs_r>
 8003586:	3001      	adds	r0, #1
 8003588:	d100      	bne.n	800358c <_vfiprintf_r+0x94>
 800358a:	e0af      	b.n	80036ec <_vfiprintf_r+0x1f4>
 800358c:	6963      	ldr	r3, [r4, #20]
 800358e:	9a05      	ldr	r2, [sp, #20]
 8003590:	189b      	adds	r3, r3, r2
 8003592:	6163      	str	r3, [r4, #20]
 8003594:	7833      	ldrb	r3, [r6, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d100      	bne.n	800359c <_vfiprintf_r+0xa4>
 800359a:	e0a7      	b.n	80036ec <_vfiprintf_r+0x1f4>
 800359c:	2201      	movs	r2, #1
 800359e:	2300      	movs	r3, #0
 80035a0:	4252      	negs	r2, r2
 80035a2:	6062      	str	r2, [r4, #4]
 80035a4:	a904      	add	r1, sp, #16
 80035a6:	3254      	adds	r2, #84	; 0x54
 80035a8:	1852      	adds	r2, r2, r1
 80035aa:	1c75      	adds	r5, r6, #1
 80035ac:	6023      	str	r3, [r4, #0]
 80035ae:	60e3      	str	r3, [r4, #12]
 80035b0:	60a3      	str	r3, [r4, #8]
 80035b2:	7013      	strb	r3, [r2, #0]
 80035b4:	65a3      	str	r3, [r4, #88]	; 0x58
 80035b6:	4b59      	ldr	r3, [pc, #356]	; (800371c <_vfiprintf_r+0x224>)
 80035b8:	2205      	movs	r2, #5
 80035ba:	0018      	movs	r0, r3
 80035bc:	7829      	ldrb	r1, [r5, #0]
 80035be:	9305      	str	r3, [sp, #20]
 80035c0:	f000 fba4 	bl	8003d0c <memchr>
 80035c4:	1c6e      	adds	r6, r5, #1
 80035c6:	2800      	cmp	r0, #0
 80035c8:	d11f      	bne.n	800360a <_vfiprintf_r+0x112>
 80035ca:	6822      	ldr	r2, [r4, #0]
 80035cc:	06d3      	lsls	r3, r2, #27
 80035ce:	d504      	bpl.n	80035da <_vfiprintf_r+0xe2>
 80035d0:	2353      	movs	r3, #83	; 0x53
 80035d2:	a904      	add	r1, sp, #16
 80035d4:	185b      	adds	r3, r3, r1
 80035d6:	2120      	movs	r1, #32
 80035d8:	7019      	strb	r1, [r3, #0]
 80035da:	0713      	lsls	r3, r2, #28
 80035dc:	d504      	bpl.n	80035e8 <_vfiprintf_r+0xf0>
 80035de:	2353      	movs	r3, #83	; 0x53
 80035e0:	a904      	add	r1, sp, #16
 80035e2:	185b      	adds	r3, r3, r1
 80035e4:	212b      	movs	r1, #43	; 0x2b
 80035e6:	7019      	strb	r1, [r3, #0]
 80035e8:	782b      	ldrb	r3, [r5, #0]
 80035ea:	2b2a      	cmp	r3, #42	; 0x2a
 80035ec:	d016      	beq.n	800361c <_vfiprintf_r+0x124>
 80035ee:	002e      	movs	r6, r5
 80035f0:	2100      	movs	r1, #0
 80035f2:	200a      	movs	r0, #10
 80035f4:	68e3      	ldr	r3, [r4, #12]
 80035f6:	7832      	ldrb	r2, [r6, #0]
 80035f8:	1c75      	adds	r5, r6, #1
 80035fa:	3a30      	subs	r2, #48	; 0x30
 80035fc:	2a09      	cmp	r2, #9
 80035fe:	d94e      	bls.n	800369e <_vfiprintf_r+0x1a6>
 8003600:	2900      	cmp	r1, #0
 8003602:	d111      	bne.n	8003628 <_vfiprintf_r+0x130>
 8003604:	e017      	b.n	8003636 <_vfiprintf_r+0x13e>
 8003606:	3601      	adds	r6, #1
 8003608:	e7af      	b.n	800356a <_vfiprintf_r+0x72>
 800360a:	9b05      	ldr	r3, [sp, #20]
 800360c:	6822      	ldr	r2, [r4, #0]
 800360e:	1ac0      	subs	r0, r0, r3
 8003610:	2301      	movs	r3, #1
 8003612:	4083      	lsls	r3, r0
 8003614:	4313      	orrs	r3, r2
 8003616:	0035      	movs	r5, r6
 8003618:	6023      	str	r3, [r4, #0]
 800361a:	e7cc      	b.n	80035b6 <_vfiprintf_r+0xbe>
 800361c:	9b07      	ldr	r3, [sp, #28]
 800361e:	1d19      	adds	r1, r3, #4
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	9107      	str	r1, [sp, #28]
 8003624:	2b00      	cmp	r3, #0
 8003626:	db01      	blt.n	800362c <_vfiprintf_r+0x134>
 8003628:	930b      	str	r3, [sp, #44]	; 0x2c
 800362a:	e004      	b.n	8003636 <_vfiprintf_r+0x13e>
 800362c:	425b      	negs	r3, r3
 800362e:	60e3      	str	r3, [r4, #12]
 8003630:	2302      	movs	r3, #2
 8003632:	4313      	orrs	r3, r2
 8003634:	6023      	str	r3, [r4, #0]
 8003636:	7833      	ldrb	r3, [r6, #0]
 8003638:	2b2e      	cmp	r3, #46	; 0x2e
 800363a:	d10a      	bne.n	8003652 <_vfiprintf_r+0x15a>
 800363c:	7873      	ldrb	r3, [r6, #1]
 800363e:	2b2a      	cmp	r3, #42	; 0x2a
 8003640:	d135      	bne.n	80036ae <_vfiprintf_r+0x1b6>
 8003642:	9b07      	ldr	r3, [sp, #28]
 8003644:	3602      	adds	r6, #2
 8003646:	1d1a      	adds	r2, r3, #4
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	9207      	str	r2, [sp, #28]
 800364c:	2b00      	cmp	r3, #0
 800364e:	db2b      	blt.n	80036a8 <_vfiprintf_r+0x1b0>
 8003650:	9309      	str	r3, [sp, #36]	; 0x24
 8003652:	4d33      	ldr	r5, [pc, #204]	; (8003720 <_vfiprintf_r+0x228>)
 8003654:	2203      	movs	r2, #3
 8003656:	0028      	movs	r0, r5
 8003658:	7831      	ldrb	r1, [r6, #0]
 800365a:	f000 fb57 	bl	8003d0c <memchr>
 800365e:	2800      	cmp	r0, #0
 8003660:	d006      	beq.n	8003670 <_vfiprintf_r+0x178>
 8003662:	2340      	movs	r3, #64	; 0x40
 8003664:	1b40      	subs	r0, r0, r5
 8003666:	4083      	lsls	r3, r0
 8003668:	6822      	ldr	r2, [r4, #0]
 800366a:	3601      	adds	r6, #1
 800366c:	4313      	orrs	r3, r2
 800366e:	6023      	str	r3, [r4, #0]
 8003670:	7831      	ldrb	r1, [r6, #0]
 8003672:	2206      	movs	r2, #6
 8003674:	482b      	ldr	r0, [pc, #172]	; (8003724 <_vfiprintf_r+0x22c>)
 8003676:	1c75      	adds	r5, r6, #1
 8003678:	7621      	strb	r1, [r4, #24]
 800367a:	f000 fb47 	bl	8003d0c <memchr>
 800367e:	2800      	cmp	r0, #0
 8003680:	d043      	beq.n	800370a <_vfiprintf_r+0x212>
 8003682:	4b29      	ldr	r3, [pc, #164]	; (8003728 <_vfiprintf_r+0x230>)
 8003684:	2b00      	cmp	r3, #0
 8003686:	d125      	bne.n	80036d4 <_vfiprintf_r+0x1dc>
 8003688:	2207      	movs	r2, #7
 800368a:	9b07      	ldr	r3, [sp, #28]
 800368c:	3307      	adds	r3, #7
 800368e:	4393      	bics	r3, r2
 8003690:	3308      	adds	r3, #8
 8003692:	9307      	str	r3, [sp, #28]
 8003694:	6963      	ldr	r3, [r4, #20]
 8003696:	9a04      	ldr	r2, [sp, #16]
 8003698:	189b      	adds	r3, r3, r2
 800369a:	6163      	str	r3, [r4, #20]
 800369c:	e764      	b.n	8003568 <_vfiprintf_r+0x70>
 800369e:	4343      	muls	r3, r0
 80036a0:	002e      	movs	r6, r5
 80036a2:	2101      	movs	r1, #1
 80036a4:	189b      	adds	r3, r3, r2
 80036a6:	e7a6      	b.n	80035f6 <_vfiprintf_r+0xfe>
 80036a8:	2301      	movs	r3, #1
 80036aa:	425b      	negs	r3, r3
 80036ac:	e7d0      	b.n	8003650 <_vfiprintf_r+0x158>
 80036ae:	2300      	movs	r3, #0
 80036b0:	200a      	movs	r0, #10
 80036b2:	001a      	movs	r2, r3
 80036b4:	3601      	adds	r6, #1
 80036b6:	6063      	str	r3, [r4, #4]
 80036b8:	7831      	ldrb	r1, [r6, #0]
 80036ba:	1c75      	adds	r5, r6, #1
 80036bc:	3930      	subs	r1, #48	; 0x30
 80036be:	2909      	cmp	r1, #9
 80036c0:	d903      	bls.n	80036ca <_vfiprintf_r+0x1d2>
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0c5      	beq.n	8003652 <_vfiprintf_r+0x15a>
 80036c6:	9209      	str	r2, [sp, #36]	; 0x24
 80036c8:	e7c3      	b.n	8003652 <_vfiprintf_r+0x15a>
 80036ca:	4342      	muls	r2, r0
 80036cc:	002e      	movs	r6, r5
 80036ce:	2301      	movs	r3, #1
 80036d0:	1852      	adds	r2, r2, r1
 80036d2:	e7f1      	b.n	80036b8 <_vfiprintf_r+0x1c0>
 80036d4:	aa07      	add	r2, sp, #28
 80036d6:	9200      	str	r2, [sp, #0]
 80036d8:	0021      	movs	r1, r4
 80036da:	003a      	movs	r2, r7
 80036dc:	4b13      	ldr	r3, [pc, #76]	; (800372c <_vfiprintf_r+0x234>)
 80036de:	9803      	ldr	r0, [sp, #12]
 80036e0:	e000      	b.n	80036e4 <_vfiprintf_r+0x1ec>
 80036e2:	bf00      	nop
 80036e4:	9004      	str	r0, [sp, #16]
 80036e6:	9b04      	ldr	r3, [sp, #16]
 80036e8:	3301      	adds	r3, #1
 80036ea:	d1d3      	bne.n	8003694 <_vfiprintf_r+0x19c>
 80036ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036ee:	07db      	lsls	r3, r3, #31
 80036f0:	d405      	bmi.n	80036fe <_vfiprintf_r+0x206>
 80036f2:	89bb      	ldrh	r3, [r7, #12]
 80036f4:	059b      	lsls	r3, r3, #22
 80036f6:	d402      	bmi.n	80036fe <_vfiprintf_r+0x206>
 80036f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80036fa:	f7ff fdd5 	bl	80032a8 <__retarget_lock_release_recursive>
 80036fe:	89bb      	ldrh	r3, [r7, #12]
 8003700:	065b      	lsls	r3, r3, #25
 8003702:	d500      	bpl.n	8003706 <_vfiprintf_r+0x20e>
 8003704:	e71d      	b.n	8003542 <_vfiprintf_r+0x4a>
 8003706:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003708:	e71d      	b.n	8003546 <_vfiprintf_r+0x4e>
 800370a:	aa07      	add	r2, sp, #28
 800370c:	9200      	str	r2, [sp, #0]
 800370e:	0021      	movs	r1, r4
 8003710:	003a      	movs	r2, r7
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <_vfiprintf_r+0x234>)
 8003714:	9803      	ldr	r0, [sp, #12]
 8003716:	f000 f87b 	bl	8003810 <_printf_i>
 800371a:	e7e3      	b.n	80036e4 <_vfiprintf_r+0x1ec>
 800371c:	08003ec8 	.word	0x08003ec8
 8003720:	08003ece 	.word	0x08003ece
 8003724:	08003ed2 	.word	0x08003ed2
 8003728:	00000000 	.word	0x00000000
 800372c:	080034d3 	.word	0x080034d3

08003730 <_printf_common>:
 8003730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003732:	0016      	movs	r6, r2
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	688a      	ldr	r2, [r1, #8]
 8003738:	690b      	ldr	r3, [r1, #16]
 800373a:	000c      	movs	r4, r1
 800373c:	9000      	str	r0, [sp, #0]
 800373e:	4293      	cmp	r3, r2
 8003740:	da00      	bge.n	8003744 <_printf_common+0x14>
 8003742:	0013      	movs	r3, r2
 8003744:	0022      	movs	r2, r4
 8003746:	6033      	str	r3, [r6, #0]
 8003748:	3243      	adds	r2, #67	; 0x43
 800374a:	7812      	ldrb	r2, [r2, #0]
 800374c:	2a00      	cmp	r2, #0
 800374e:	d001      	beq.n	8003754 <_printf_common+0x24>
 8003750:	3301      	adds	r3, #1
 8003752:	6033      	str	r3, [r6, #0]
 8003754:	6823      	ldr	r3, [r4, #0]
 8003756:	069b      	lsls	r3, r3, #26
 8003758:	d502      	bpl.n	8003760 <_printf_common+0x30>
 800375a:	6833      	ldr	r3, [r6, #0]
 800375c:	3302      	adds	r3, #2
 800375e:	6033      	str	r3, [r6, #0]
 8003760:	6822      	ldr	r2, [r4, #0]
 8003762:	2306      	movs	r3, #6
 8003764:	0015      	movs	r5, r2
 8003766:	401d      	ands	r5, r3
 8003768:	421a      	tst	r2, r3
 800376a:	d027      	beq.n	80037bc <_printf_common+0x8c>
 800376c:	0023      	movs	r3, r4
 800376e:	3343      	adds	r3, #67	; 0x43
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	1e5a      	subs	r2, r3, #1
 8003774:	4193      	sbcs	r3, r2
 8003776:	6822      	ldr	r2, [r4, #0]
 8003778:	0692      	lsls	r2, r2, #26
 800377a:	d430      	bmi.n	80037de <_printf_common+0xae>
 800377c:	0022      	movs	r2, r4
 800377e:	9901      	ldr	r1, [sp, #4]
 8003780:	9800      	ldr	r0, [sp, #0]
 8003782:	9d08      	ldr	r5, [sp, #32]
 8003784:	3243      	adds	r2, #67	; 0x43
 8003786:	47a8      	blx	r5
 8003788:	3001      	adds	r0, #1
 800378a:	d025      	beq.n	80037d8 <_printf_common+0xa8>
 800378c:	2206      	movs	r2, #6
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	2500      	movs	r5, #0
 8003792:	4013      	ands	r3, r2
 8003794:	2b04      	cmp	r3, #4
 8003796:	d105      	bne.n	80037a4 <_printf_common+0x74>
 8003798:	6833      	ldr	r3, [r6, #0]
 800379a:	68e5      	ldr	r5, [r4, #12]
 800379c:	1aed      	subs	r5, r5, r3
 800379e:	43eb      	mvns	r3, r5
 80037a0:	17db      	asrs	r3, r3, #31
 80037a2:	401d      	ands	r5, r3
 80037a4:	68a3      	ldr	r3, [r4, #8]
 80037a6:	6922      	ldr	r2, [r4, #16]
 80037a8:	4293      	cmp	r3, r2
 80037aa:	dd01      	ble.n	80037b0 <_printf_common+0x80>
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	18ed      	adds	r5, r5, r3
 80037b0:	2600      	movs	r6, #0
 80037b2:	42b5      	cmp	r5, r6
 80037b4:	d120      	bne.n	80037f8 <_printf_common+0xc8>
 80037b6:	2000      	movs	r0, #0
 80037b8:	e010      	b.n	80037dc <_printf_common+0xac>
 80037ba:	3501      	adds	r5, #1
 80037bc:	68e3      	ldr	r3, [r4, #12]
 80037be:	6832      	ldr	r2, [r6, #0]
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	42ab      	cmp	r3, r5
 80037c4:	ddd2      	ble.n	800376c <_printf_common+0x3c>
 80037c6:	0022      	movs	r2, r4
 80037c8:	2301      	movs	r3, #1
 80037ca:	9901      	ldr	r1, [sp, #4]
 80037cc:	9800      	ldr	r0, [sp, #0]
 80037ce:	9f08      	ldr	r7, [sp, #32]
 80037d0:	3219      	adds	r2, #25
 80037d2:	47b8      	blx	r7
 80037d4:	3001      	adds	r0, #1
 80037d6:	d1f0      	bne.n	80037ba <_printf_common+0x8a>
 80037d8:	2001      	movs	r0, #1
 80037da:	4240      	negs	r0, r0
 80037dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80037de:	2030      	movs	r0, #48	; 0x30
 80037e0:	18e1      	adds	r1, r4, r3
 80037e2:	3143      	adds	r1, #67	; 0x43
 80037e4:	7008      	strb	r0, [r1, #0]
 80037e6:	0021      	movs	r1, r4
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	3145      	adds	r1, #69	; 0x45
 80037ec:	7809      	ldrb	r1, [r1, #0]
 80037ee:	18a2      	adds	r2, r4, r2
 80037f0:	3243      	adds	r2, #67	; 0x43
 80037f2:	3302      	adds	r3, #2
 80037f4:	7011      	strb	r1, [r2, #0]
 80037f6:	e7c1      	b.n	800377c <_printf_common+0x4c>
 80037f8:	0022      	movs	r2, r4
 80037fa:	2301      	movs	r3, #1
 80037fc:	9901      	ldr	r1, [sp, #4]
 80037fe:	9800      	ldr	r0, [sp, #0]
 8003800:	9f08      	ldr	r7, [sp, #32]
 8003802:	321a      	adds	r2, #26
 8003804:	47b8      	blx	r7
 8003806:	3001      	adds	r0, #1
 8003808:	d0e6      	beq.n	80037d8 <_printf_common+0xa8>
 800380a:	3601      	adds	r6, #1
 800380c:	e7d1      	b.n	80037b2 <_printf_common+0x82>
	...

08003810 <_printf_i>:
 8003810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003812:	b08b      	sub	sp, #44	; 0x2c
 8003814:	9206      	str	r2, [sp, #24]
 8003816:	000a      	movs	r2, r1
 8003818:	3243      	adds	r2, #67	; 0x43
 800381a:	9307      	str	r3, [sp, #28]
 800381c:	9005      	str	r0, [sp, #20]
 800381e:	9204      	str	r2, [sp, #16]
 8003820:	7e0a      	ldrb	r2, [r1, #24]
 8003822:	000c      	movs	r4, r1
 8003824:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003826:	2a78      	cmp	r2, #120	; 0x78
 8003828:	d809      	bhi.n	800383e <_printf_i+0x2e>
 800382a:	2a62      	cmp	r2, #98	; 0x62
 800382c:	d80b      	bhi.n	8003846 <_printf_i+0x36>
 800382e:	2a00      	cmp	r2, #0
 8003830:	d100      	bne.n	8003834 <_printf_i+0x24>
 8003832:	e0be      	b.n	80039b2 <_printf_i+0x1a2>
 8003834:	497c      	ldr	r1, [pc, #496]	; (8003a28 <_printf_i+0x218>)
 8003836:	9103      	str	r1, [sp, #12]
 8003838:	2a58      	cmp	r2, #88	; 0x58
 800383a:	d100      	bne.n	800383e <_printf_i+0x2e>
 800383c:	e093      	b.n	8003966 <_printf_i+0x156>
 800383e:	0026      	movs	r6, r4
 8003840:	3642      	adds	r6, #66	; 0x42
 8003842:	7032      	strb	r2, [r6, #0]
 8003844:	e022      	b.n	800388c <_printf_i+0x7c>
 8003846:	0010      	movs	r0, r2
 8003848:	3863      	subs	r0, #99	; 0x63
 800384a:	2815      	cmp	r0, #21
 800384c:	d8f7      	bhi.n	800383e <_printf_i+0x2e>
 800384e:	f7fc fc5b 	bl	8000108 <__gnu_thumb1_case_shi>
 8003852:	0016      	.short	0x0016
 8003854:	fff6001f 	.word	0xfff6001f
 8003858:	fff6fff6 	.word	0xfff6fff6
 800385c:	001ffff6 	.word	0x001ffff6
 8003860:	fff6fff6 	.word	0xfff6fff6
 8003864:	fff6fff6 	.word	0xfff6fff6
 8003868:	003600a3 	.word	0x003600a3
 800386c:	fff60083 	.word	0xfff60083
 8003870:	00b4fff6 	.word	0x00b4fff6
 8003874:	0036fff6 	.word	0x0036fff6
 8003878:	fff6fff6 	.word	0xfff6fff6
 800387c:	0087      	.short	0x0087
 800387e:	0026      	movs	r6, r4
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	3642      	adds	r6, #66	; 0x42
 8003884:	1d11      	adds	r1, r2, #4
 8003886:	6019      	str	r1, [r3, #0]
 8003888:	6813      	ldr	r3, [r2, #0]
 800388a:	7033      	strb	r3, [r6, #0]
 800388c:	2301      	movs	r3, #1
 800388e:	e0a2      	b.n	80039d6 <_printf_i+0x1c6>
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	6809      	ldr	r1, [r1, #0]
 8003894:	1d02      	adds	r2, r0, #4
 8003896:	060d      	lsls	r5, r1, #24
 8003898:	d50b      	bpl.n	80038b2 <_printf_i+0xa2>
 800389a:	6805      	ldr	r5, [r0, #0]
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	2d00      	cmp	r5, #0
 80038a0:	da03      	bge.n	80038aa <_printf_i+0x9a>
 80038a2:	232d      	movs	r3, #45	; 0x2d
 80038a4:	9a04      	ldr	r2, [sp, #16]
 80038a6:	426d      	negs	r5, r5
 80038a8:	7013      	strb	r3, [r2, #0]
 80038aa:	4b5f      	ldr	r3, [pc, #380]	; (8003a28 <_printf_i+0x218>)
 80038ac:	270a      	movs	r7, #10
 80038ae:	9303      	str	r3, [sp, #12]
 80038b0:	e01b      	b.n	80038ea <_printf_i+0xda>
 80038b2:	6805      	ldr	r5, [r0, #0]
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	0649      	lsls	r1, r1, #25
 80038b8:	d5f1      	bpl.n	800389e <_printf_i+0x8e>
 80038ba:	b22d      	sxth	r5, r5
 80038bc:	e7ef      	b.n	800389e <_printf_i+0x8e>
 80038be:	680d      	ldr	r5, [r1, #0]
 80038c0:	6819      	ldr	r1, [r3, #0]
 80038c2:	1d08      	adds	r0, r1, #4
 80038c4:	6018      	str	r0, [r3, #0]
 80038c6:	062e      	lsls	r6, r5, #24
 80038c8:	d501      	bpl.n	80038ce <_printf_i+0xbe>
 80038ca:	680d      	ldr	r5, [r1, #0]
 80038cc:	e003      	b.n	80038d6 <_printf_i+0xc6>
 80038ce:	066d      	lsls	r5, r5, #25
 80038d0:	d5fb      	bpl.n	80038ca <_printf_i+0xba>
 80038d2:	680d      	ldr	r5, [r1, #0]
 80038d4:	b2ad      	uxth	r5, r5
 80038d6:	4b54      	ldr	r3, [pc, #336]	; (8003a28 <_printf_i+0x218>)
 80038d8:	2708      	movs	r7, #8
 80038da:	9303      	str	r3, [sp, #12]
 80038dc:	2a6f      	cmp	r2, #111	; 0x6f
 80038de:	d000      	beq.n	80038e2 <_printf_i+0xd2>
 80038e0:	3702      	adds	r7, #2
 80038e2:	0023      	movs	r3, r4
 80038e4:	2200      	movs	r2, #0
 80038e6:	3343      	adds	r3, #67	; 0x43
 80038e8:	701a      	strb	r2, [r3, #0]
 80038ea:	6863      	ldr	r3, [r4, #4]
 80038ec:	60a3      	str	r3, [r4, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	db03      	blt.n	80038fa <_printf_i+0xea>
 80038f2:	2104      	movs	r1, #4
 80038f4:	6822      	ldr	r2, [r4, #0]
 80038f6:	438a      	bics	r2, r1
 80038f8:	6022      	str	r2, [r4, #0]
 80038fa:	2d00      	cmp	r5, #0
 80038fc:	d102      	bne.n	8003904 <_printf_i+0xf4>
 80038fe:	9e04      	ldr	r6, [sp, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00c      	beq.n	800391e <_printf_i+0x10e>
 8003904:	9e04      	ldr	r6, [sp, #16]
 8003906:	0028      	movs	r0, r5
 8003908:	0039      	movs	r1, r7
 800390a:	f7fc fc8d 	bl	8000228 <__aeabi_uidivmod>
 800390e:	9b03      	ldr	r3, [sp, #12]
 8003910:	3e01      	subs	r6, #1
 8003912:	5c5b      	ldrb	r3, [r3, r1]
 8003914:	7033      	strb	r3, [r6, #0]
 8003916:	002b      	movs	r3, r5
 8003918:	0005      	movs	r5, r0
 800391a:	429f      	cmp	r7, r3
 800391c:	d9f3      	bls.n	8003906 <_printf_i+0xf6>
 800391e:	2f08      	cmp	r7, #8
 8003920:	d109      	bne.n	8003936 <_printf_i+0x126>
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	07db      	lsls	r3, r3, #31
 8003926:	d506      	bpl.n	8003936 <_printf_i+0x126>
 8003928:	6862      	ldr	r2, [r4, #4]
 800392a:	6923      	ldr	r3, [r4, #16]
 800392c:	429a      	cmp	r2, r3
 800392e:	dc02      	bgt.n	8003936 <_printf_i+0x126>
 8003930:	2330      	movs	r3, #48	; 0x30
 8003932:	3e01      	subs	r6, #1
 8003934:	7033      	strb	r3, [r6, #0]
 8003936:	9b04      	ldr	r3, [sp, #16]
 8003938:	1b9b      	subs	r3, r3, r6
 800393a:	6123      	str	r3, [r4, #16]
 800393c:	9b07      	ldr	r3, [sp, #28]
 800393e:	0021      	movs	r1, r4
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	9805      	ldr	r0, [sp, #20]
 8003944:	9b06      	ldr	r3, [sp, #24]
 8003946:	aa09      	add	r2, sp, #36	; 0x24
 8003948:	f7ff fef2 	bl	8003730 <_printf_common>
 800394c:	3001      	adds	r0, #1
 800394e:	d147      	bne.n	80039e0 <_printf_i+0x1d0>
 8003950:	2001      	movs	r0, #1
 8003952:	4240      	negs	r0, r0
 8003954:	b00b      	add	sp, #44	; 0x2c
 8003956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003958:	2220      	movs	r2, #32
 800395a:	6809      	ldr	r1, [r1, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	6022      	str	r2, [r4, #0]
 8003960:	2278      	movs	r2, #120	; 0x78
 8003962:	4932      	ldr	r1, [pc, #200]	; (8003a2c <_printf_i+0x21c>)
 8003964:	9103      	str	r1, [sp, #12]
 8003966:	0021      	movs	r1, r4
 8003968:	3145      	adds	r1, #69	; 0x45
 800396a:	700a      	strb	r2, [r1, #0]
 800396c:	6819      	ldr	r1, [r3, #0]
 800396e:	6822      	ldr	r2, [r4, #0]
 8003970:	c920      	ldmia	r1!, {r5}
 8003972:	0610      	lsls	r0, r2, #24
 8003974:	d402      	bmi.n	800397c <_printf_i+0x16c>
 8003976:	0650      	lsls	r0, r2, #25
 8003978:	d500      	bpl.n	800397c <_printf_i+0x16c>
 800397a:	b2ad      	uxth	r5, r5
 800397c:	6019      	str	r1, [r3, #0]
 800397e:	07d3      	lsls	r3, r2, #31
 8003980:	d502      	bpl.n	8003988 <_printf_i+0x178>
 8003982:	2320      	movs	r3, #32
 8003984:	4313      	orrs	r3, r2
 8003986:	6023      	str	r3, [r4, #0]
 8003988:	2710      	movs	r7, #16
 800398a:	2d00      	cmp	r5, #0
 800398c:	d1a9      	bne.n	80038e2 <_printf_i+0xd2>
 800398e:	2220      	movs	r2, #32
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	4393      	bics	r3, r2
 8003994:	6023      	str	r3, [r4, #0]
 8003996:	e7a4      	b.n	80038e2 <_printf_i+0xd2>
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	680d      	ldr	r5, [r1, #0]
 800399c:	1d10      	adds	r0, r2, #4
 800399e:	6949      	ldr	r1, [r1, #20]
 80039a0:	6018      	str	r0, [r3, #0]
 80039a2:	6813      	ldr	r3, [r2, #0]
 80039a4:	062e      	lsls	r6, r5, #24
 80039a6:	d501      	bpl.n	80039ac <_printf_i+0x19c>
 80039a8:	6019      	str	r1, [r3, #0]
 80039aa:	e002      	b.n	80039b2 <_printf_i+0x1a2>
 80039ac:	066d      	lsls	r5, r5, #25
 80039ae:	d5fb      	bpl.n	80039a8 <_printf_i+0x198>
 80039b0:	8019      	strh	r1, [r3, #0]
 80039b2:	2300      	movs	r3, #0
 80039b4:	9e04      	ldr	r6, [sp, #16]
 80039b6:	6123      	str	r3, [r4, #16]
 80039b8:	e7c0      	b.n	800393c <_printf_i+0x12c>
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	1d11      	adds	r1, r2, #4
 80039be:	6019      	str	r1, [r3, #0]
 80039c0:	6816      	ldr	r6, [r2, #0]
 80039c2:	2100      	movs	r1, #0
 80039c4:	0030      	movs	r0, r6
 80039c6:	6862      	ldr	r2, [r4, #4]
 80039c8:	f000 f9a0 	bl	8003d0c <memchr>
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d001      	beq.n	80039d4 <_printf_i+0x1c4>
 80039d0:	1b80      	subs	r0, r0, r6
 80039d2:	6060      	str	r0, [r4, #4]
 80039d4:	6863      	ldr	r3, [r4, #4]
 80039d6:	6123      	str	r3, [r4, #16]
 80039d8:	2300      	movs	r3, #0
 80039da:	9a04      	ldr	r2, [sp, #16]
 80039dc:	7013      	strb	r3, [r2, #0]
 80039de:	e7ad      	b.n	800393c <_printf_i+0x12c>
 80039e0:	0032      	movs	r2, r6
 80039e2:	6923      	ldr	r3, [r4, #16]
 80039e4:	9906      	ldr	r1, [sp, #24]
 80039e6:	9805      	ldr	r0, [sp, #20]
 80039e8:	9d07      	ldr	r5, [sp, #28]
 80039ea:	47a8      	blx	r5
 80039ec:	3001      	adds	r0, #1
 80039ee:	d0af      	beq.n	8003950 <_printf_i+0x140>
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	079b      	lsls	r3, r3, #30
 80039f4:	d415      	bmi.n	8003a22 <_printf_i+0x212>
 80039f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039f8:	68e0      	ldr	r0, [r4, #12]
 80039fa:	4298      	cmp	r0, r3
 80039fc:	daaa      	bge.n	8003954 <_printf_i+0x144>
 80039fe:	0018      	movs	r0, r3
 8003a00:	e7a8      	b.n	8003954 <_printf_i+0x144>
 8003a02:	0022      	movs	r2, r4
 8003a04:	2301      	movs	r3, #1
 8003a06:	9906      	ldr	r1, [sp, #24]
 8003a08:	9805      	ldr	r0, [sp, #20]
 8003a0a:	9e07      	ldr	r6, [sp, #28]
 8003a0c:	3219      	adds	r2, #25
 8003a0e:	47b0      	blx	r6
 8003a10:	3001      	adds	r0, #1
 8003a12:	d09d      	beq.n	8003950 <_printf_i+0x140>
 8003a14:	3501      	adds	r5, #1
 8003a16:	68e3      	ldr	r3, [r4, #12]
 8003a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	42ab      	cmp	r3, r5
 8003a1e:	dcf0      	bgt.n	8003a02 <_printf_i+0x1f2>
 8003a20:	e7e9      	b.n	80039f6 <_printf_i+0x1e6>
 8003a22:	2500      	movs	r5, #0
 8003a24:	e7f7      	b.n	8003a16 <_printf_i+0x206>
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	08003ed9 	.word	0x08003ed9
 8003a2c:	08003eea 	.word	0x08003eea

08003a30 <__sflush_r>:
 8003a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a32:	898b      	ldrh	r3, [r1, #12]
 8003a34:	0005      	movs	r5, r0
 8003a36:	000c      	movs	r4, r1
 8003a38:	071a      	lsls	r2, r3, #28
 8003a3a:	d45c      	bmi.n	8003af6 <__sflush_r+0xc6>
 8003a3c:	684a      	ldr	r2, [r1, #4]
 8003a3e:	2a00      	cmp	r2, #0
 8003a40:	dc04      	bgt.n	8003a4c <__sflush_r+0x1c>
 8003a42:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003a44:	2a00      	cmp	r2, #0
 8003a46:	dc01      	bgt.n	8003a4c <__sflush_r+0x1c>
 8003a48:	2000      	movs	r0, #0
 8003a4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a4c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003a4e:	2f00      	cmp	r7, #0
 8003a50:	d0fa      	beq.n	8003a48 <__sflush_r+0x18>
 8003a52:	2200      	movs	r2, #0
 8003a54:	2080      	movs	r0, #128	; 0x80
 8003a56:	682e      	ldr	r6, [r5, #0]
 8003a58:	602a      	str	r2, [r5, #0]
 8003a5a:	001a      	movs	r2, r3
 8003a5c:	0140      	lsls	r0, r0, #5
 8003a5e:	6a21      	ldr	r1, [r4, #32]
 8003a60:	4002      	ands	r2, r0
 8003a62:	4203      	tst	r3, r0
 8003a64:	d034      	beq.n	8003ad0 <__sflush_r+0xa0>
 8003a66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a68:	89a3      	ldrh	r3, [r4, #12]
 8003a6a:	075b      	lsls	r3, r3, #29
 8003a6c:	d506      	bpl.n	8003a7c <__sflush_r+0x4c>
 8003a6e:	6863      	ldr	r3, [r4, #4]
 8003a70:	1ac0      	subs	r0, r0, r3
 8003a72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <__sflush_r+0x4c>
 8003a78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a7a:	1ac0      	subs	r0, r0, r3
 8003a7c:	0002      	movs	r2, r0
 8003a7e:	2300      	movs	r3, #0
 8003a80:	0028      	movs	r0, r5
 8003a82:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003a84:	6a21      	ldr	r1, [r4, #32]
 8003a86:	47b8      	blx	r7
 8003a88:	89a2      	ldrh	r2, [r4, #12]
 8003a8a:	1c43      	adds	r3, r0, #1
 8003a8c:	d106      	bne.n	8003a9c <__sflush_r+0x6c>
 8003a8e:	6829      	ldr	r1, [r5, #0]
 8003a90:	291d      	cmp	r1, #29
 8003a92:	d82c      	bhi.n	8003aee <__sflush_r+0xbe>
 8003a94:	4b2a      	ldr	r3, [pc, #168]	; (8003b40 <__sflush_r+0x110>)
 8003a96:	410b      	asrs	r3, r1
 8003a98:	07db      	lsls	r3, r3, #31
 8003a9a:	d428      	bmi.n	8003aee <__sflush_r+0xbe>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	6063      	str	r3, [r4, #4]
 8003aa0:	6923      	ldr	r3, [r4, #16]
 8003aa2:	6023      	str	r3, [r4, #0]
 8003aa4:	04d2      	lsls	r2, r2, #19
 8003aa6:	d505      	bpl.n	8003ab4 <__sflush_r+0x84>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	d102      	bne.n	8003ab2 <__sflush_r+0x82>
 8003aac:	682b      	ldr	r3, [r5, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d100      	bne.n	8003ab4 <__sflush_r+0x84>
 8003ab2:	6560      	str	r0, [r4, #84]	; 0x54
 8003ab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ab6:	602e      	str	r6, [r5, #0]
 8003ab8:	2900      	cmp	r1, #0
 8003aba:	d0c5      	beq.n	8003a48 <__sflush_r+0x18>
 8003abc:	0023      	movs	r3, r4
 8003abe:	3344      	adds	r3, #68	; 0x44
 8003ac0:	4299      	cmp	r1, r3
 8003ac2:	d002      	beq.n	8003aca <__sflush_r+0x9a>
 8003ac4:	0028      	movs	r0, r5
 8003ac6:	f7ff fbf1 	bl	80032ac <_free_r>
 8003aca:	2000      	movs	r0, #0
 8003acc:	6360      	str	r0, [r4, #52]	; 0x34
 8003ace:	e7bc      	b.n	8003a4a <__sflush_r+0x1a>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	0028      	movs	r0, r5
 8003ad4:	47b8      	blx	r7
 8003ad6:	1c43      	adds	r3, r0, #1
 8003ad8:	d1c6      	bne.n	8003a68 <__sflush_r+0x38>
 8003ada:	682b      	ldr	r3, [r5, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0c3      	beq.n	8003a68 <__sflush_r+0x38>
 8003ae0:	2b1d      	cmp	r3, #29
 8003ae2:	d001      	beq.n	8003ae8 <__sflush_r+0xb8>
 8003ae4:	2b16      	cmp	r3, #22
 8003ae6:	d101      	bne.n	8003aec <__sflush_r+0xbc>
 8003ae8:	602e      	str	r6, [r5, #0]
 8003aea:	e7ad      	b.n	8003a48 <__sflush_r+0x18>
 8003aec:	89a2      	ldrh	r2, [r4, #12]
 8003aee:	2340      	movs	r3, #64	; 0x40
 8003af0:	4313      	orrs	r3, r2
 8003af2:	81a3      	strh	r3, [r4, #12]
 8003af4:	e7a9      	b.n	8003a4a <__sflush_r+0x1a>
 8003af6:	690e      	ldr	r6, [r1, #16]
 8003af8:	2e00      	cmp	r6, #0
 8003afa:	d0a5      	beq.n	8003a48 <__sflush_r+0x18>
 8003afc:	680f      	ldr	r7, [r1, #0]
 8003afe:	600e      	str	r6, [r1, #0]
 8003b00:	1bba      	subs	r2, r7, r6
 8003b02:	9201      	str	r2, [sp, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	079b      	lsls	r3, r3, #30
 8003b08:	d100      	bne.n	8003b0c <__sflush_r+0xdc>
 8003b0a:	694a      	ldr	r2, [r1, #20]
 8003b0c:	60a2      	str	r2, [r4, #8]
 8003b0e:	9b01      	ldr	r3, [sp, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	dd99      	ble.n	8003a48 <__sflush_r+0x18>
 8003b14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b16:	0032      	movs	r2, r6
 8003b18:	001f      	movs	r7, r3
 8003b1a:	0028      	movs	r0, r5
 8003b1c:	9b01      	ldr	r3, [sp, #4]
 8003b1e:	6a21      	ldr	r1, [r4, #32]
 8003b20:	47b8      	blx	r7
 8003b22:	2800      	cmp	r0, #0
 8003b24:	dc06      	bgt.n	8003b34 <__sflush_r+0x104>
 8003b26:	2340      	movs	r3, #64	; 0x40
 8003b28:	2001      	movs	r0, #1
 8003b2a:	89a2      	ldrh	r2, [r4, #12]
 8003b2c:	4240      	negs	r0, r0
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	81a3      	strh	r3, [r4, #12]
 8003b32:	e78a      	b.n	8003a4a <__sflush_r+0x1a>
 8003b34:	9b01      	ldr	r3, [sp, #4]
 8003b36:	1836      	adds	r6, r6, r0
 8003b38:	1a1b      	subs	r3, r3, r0
 8003b3a:	9301      	str	r3, [sp, #4]
 8003b3c:	e7e7      	b.n	8003b0e <__sflush_r+0xde>
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	dfbffffe 	.word	0xdfbffffe

08003b44 <_fflush_r>:
 8003b44:	690b      	ldr	r3, [r1, #16]
 8003b46:	b570      	push	{r4, r5, r6, lr}
 8003b48:	0005      	movs	r5, r0
 8003b4a:	000c      	movs	r4, r1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d102      	bne.n	8003b56 <_fflush_r+0x12>
 8003b50:	2500      	movs	r5, #0
 8003b52:	0028      	movs	r0, r5
 8003b54:	bd70      	pop	{r4, r5, r6, pc}
 8003b56:	2800      	cmp	r0, #0
 8003b58:	d004      	beq.n	8003b64 <_fflush_r+0x20>
 8003b5a:	6a03      	ldr	r3, [r0, #32]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <_fflush_r+0x20>
 8003b60:	f7ff fa90 	bl	8003084 <__sinit>
 8003b64:	220c      	movs	r2, #12
 8003b66:	5ea3      	ldrsh	r3, [r4, r2]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0f1      	beq.n	8003b50 <_fflush_r+0xc>
 8003b6c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b6e:	07d2      	lsls	r2, r2, #31
 8003b70:	d404      	bmi.n	8003b7c <_fflush_r+0x38>
 8003b72:	059b      	lsls	r3, r3, #22
 8003b74:	d402      	bmi.n	8003b7c <_fflush_r+0x38>
 8003b76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b78:	f7ff fb95 	bl	80032a6 <__retarget_lock_acquire_recursive>
 8003b7c:	0028      	movs	r0, r5
 8003b7e:	0021      	movs	r1, r4
 8003b80:	f7ff ff56 	bl	8003a30 <__sflush_r>
 8003b84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b86:	0005      	movs	r5, r0
 8003b88:	07db      	lsls	r3, r3, #31
 8003b8a:	d4e2      	bmi.n	8003b52 <_fflush_r+0xe>
 8003b8c:	89a3      	ldrh	r3, [r4, #12]
 8003b8e:	059b      	lsls	r3, r3, #22
 8003b90:	d4df      	bmi.n	8003b52 <_fflush_r+0xe>
 8003b92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b94:	f7ff fb88 	bl	80032a8 <__retarget_lock_release_recursive>
 8003b98:	e7db      	b.n	8003b52 <_fflush_r+0xe>

08003b9a <__swbuf_r>:
 8003b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9c:	0006      	movs	r6, r0
 8003b9e:	000d      	movs	r5, r1
 8003ba0:	0014      	movs	r4, r2
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d004      	beq.n	8003bb0 <__swbuf_r+0x16>
 8003ba6:	6a03      	ldr	r3, [r0, #32]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <__swbuf_r+0x16>
 8003bac:	f7ff fa6a 	bl	8003084 <__sinit>
 8003bb0:	69a3      	ldr	r3, [r4, #24]
 8003bb2:	60a3      	str	r3, [r4, #8]
 8003bb4:	89a3      	ldrh	r3, [r4, #12]
 8003bb6:	071b      	lsls	r3, r3, #28
 8003bb8:	d528      	bpl.n	8003c0c <__swbuf_r+0x72>
 8003bba:	6923      	ldr	r3, [r4, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d025      	beq.n	8003c0c <__swbuf_r+0x72>
 8003bc0:	6923      	ldr	r3, [r4, #16]
 8003bc2:	6820      	ldr	r0, [r4, #0]
 8003bc4:	b2ef      	uxtb	r7, r5
 8003bc6:	1ac0      	subs	r0, r0, r3
 8003bc8:	6963      	ldr	r3, [r4, #20]
 8003bca:	b2ed      	uxtb	r5, r5
 8003bcc:	4283      	cmp	r3, r0
 8003bce:	dc05      	bgt.n	8003bdc <__swbuf_r+0x42>
 8003bd0:	0021      	movs	r1, r4
 8003bd2:	0030      	movs	r0, r6
 8003bd4:	f7ff ffb6 	bl	8003b44 <_fflush_r>
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	d11d      	bne.n	8003c18 <__swbuf_r+0x7e>
 8003bdc:	68a3      	ldr	r3, [r4, #8]
 8003bde:	3001      	adds	r0, #1
 8003be0:	3b01      	subs	r3, #1
 8003be2:	60a3      	str	r3, [r4, #8]
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	6022      	str	r2, [r4, #0]
 8003bea:	701f      	strb	r7, [r3, #0]
 8003bec:	6963      	ldr	r3, [r4, #20]
 8003bee:	4283      	cmp	r3, r0
 8003bf0:	d004      	beq.n	8003bfc <__swbuf_r+0x62>
 8003bf2:	89a3      	ldrh	r3, [r4, #12]
 8003bf4:	07db      	lsls	r3, r3, #31
 8003bf6:	d507      	bpl.n	8003c08 <__swbuf_r+0x6e>
 8003bf8:	2d0a      	cmp	r5, #10
 8003bfa:	d105      	bne.n	8003c08 <__swbuf_r+0x6e>
 8003bfc:	0021      	movs	r1, r4
 8003bfe:	0030      	movs	r0, r6
 8003c00:	f7ff ffa0 	bl	8003b44 <_fflush_r>
 8003c04:	2800      	cmp	r0, #0
 8003c06:	d107      	bne.n	8003c18 <__swbuf_r+0x7e>
 8003c08:	0028      	movs	r0, r5
 8003c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c0c:	0021      	movs	r1, r4
 8003c0e:	0030      	movs	r0, r6
 8003c10:	f000 f806 	bl	8003c20 <__swsetup_r>
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d0d3      	beq.n	8003bc0 <__swbuf_r+0x26>
 8003c18:	2501      	movs	r5, #1
 8003c1a:	426d      	negs	r5, r5
 8003c1c:	e7f4      	b.n	8003c08 <__swbuf_r+0x6e>
	...

08003c20 <__swsetup_r>:
 8003c20:	4b30      	ldr	r3, [pc, #192]	; (8003ce4 <__swsetup_r+0xc4>)
 8003c22:	b570      	push	{r4, r5, r6, lr}
 8003c24:	0005      	movs	r5, r0
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	000c      	movs	r4, r1
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	d004      	beq.n	8003c38 <__swsetup_r+0x18>
 8003c2e:	6a03      	ldr	r3, [r0, #32]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <__swsetup_r+0x18>
 8003c34:	f7ff fa26 	bl	8003084 <__sinit>
 8003c38:	230c      	movs	r3, #12
 8003c3a:	5ee2      	ldrsh	r2, [r4, r3]
 8003c3c:	b293      	uxth	r3, r2
 8003c3e:	0711      	lsls	r1, r2, #28
 8003c40:	d423      	bmi.n	8003c8a <__swsetup_r+0x6a>
 8003c42:	06d9      	lsls	r1, r3, #27
 8003c44:	d407      	bmi.n	8003c56 <__swsetup_r+0x36>
 8003c46:	2309      	movs	r3, #9
 8003c48:	2001      	movs	r0, #1
 8003c4a:	602b      	str	r3, [r5, #0]
 8003c4c:	3337      	adds	r3, #55	; 0x37
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	81a3      	strh	r3, [r4, #12]
 8003c52:	4240      	negs	r0, r0
 8003c54:	bd70      	pop	{r4, r5, r6, pc}
 8003c56:	075b      	lsls	r3, r3, #29
 8003c58:	d513      	bpl.n	8003c82 <__swsetup_r+0x62>
 8003c5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c5c:	2900      	cmp	r1, #0
 8003c5e:	d008      	beq.n	8003c72 <__swsetup_r+0x52>
 8003c60:	0023      	movs	r3, r4
 8003c62:	3344      	adds	r3, #68	; 0x44
 8003c64:	4299      	cmp	r1, r3
 8003c66:	d002      	beq.n	8003c6e <__swsetup_r+0x4e>
 8003c68:	0028      	movs	r0, r5
 8003c6a:	f7ff fb1f 	bl	80032ac <_free_r>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	6363      	str	r3, [r4, #52]	; 0x34
 8003c72:	2224      	movs	r2, #36	; 0x24
 8003c74:	89a3      	ldrh	r3, [r4, #12]
 8003c76:	4393      	bics	r3, r2
 8003c78:	81a3      	strh	r3, [r4, #12]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	6063      	str	r3, [r4, #4]
 8003c7e:	6923      	ldr	r3, [r4, #16]
 8003c80:	6023      	str	r3, [r4, #0]
 8003c82:	2308      	movs	r3, #8
 8003c84:	89a2      	ldrh	r2, [r4, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	81a3      	strh	r3, [r4, #12]
 8003c8a:	6923      	ldr	r3, [r4, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10b      	bne.n	8003ca8 <__swsetup_r+0x88>
 8003c90:	21a0      	movs	r1, #160	; 0xa0
 8003c92:	2280      	movs	r2, #128	; 0x80
 8003c94:	89a3      	ldrh	r3, [r4, #12]
 8003c96:	0089      	lsls	r1, r1, #2
 8003c98:	0092      	lsls	r2, r2, #2
 8003c9a:	400b      	ands	r3, r1
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d003      	beq.n	8003ca8 <__swsetup_r+0x88>
 8003ca0:	0021      	movs	r1, r4
 8003ca2:	0028      	movs	r0, r5
 8003ca4:	f000 f866 	bl	8003d74 <__smakebuf_r>
 8003ca8:	220c      	movs	r2, #12
 8003caa:	5ea3      	ldrsh	r3, [r4, r2]
 8003cac:	2001      	movs	r0, #1
 8003cae:	001a      	movs	r2, r3
 8003cb0:	b299      	uxth	r1, r3
 8003cb2:	4002      	ands	r2, r0
 8003cb4:	4203      	tst	r3, r0
 8003cb6:	d00f      	beq.n	8003cd8 <__swsetup_r+0xb8>
 8003cb8:	2200      	movs	r2, #0
 8003cba:	60a2      	str	r2, [r4, #8]
 8003cbc:	6962      	ldr	r2, [r4, #20]
 8003cbe:	4252      	negs	r2, r2
 8003cc0:	61a2      	str	r2, [r4, #24]
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	6922      	ldr	r2, [r4, #16]
 8003cc6:	4282      	cmp	r2, r0
 8003cc8:	d1c4      	bne.n	8003c54 <__swsetup_r+0x34>
 8003cca:	0609      	lsls	r1, r1, #24
 8003ccc:	d5c2      	bpl.n	8003c54 <__swsetup_r+0x34>
 8003cce:	2240      	movs	r2, #64	; 0x40
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	81a3      	strh	r3, [r4, #12]
 8003cd4:	3801      	subs	r0, #1
 8003cd6:	e7bd      	b.n	8003c54 <__swsetup_r+0x34>
 8003cd8:	0788      	lsls	r0, r1, #30
 8003cda:	d400      	bmi.n	8003cde <__swsetup_r+0xbe>
 8003cdc:	6962      	ldr	r2, [r4, #20]
 8003cde:	60a2      	str	r2, [r4, #8]
 8003ce0:	e7ef      	b.n	8003cc2 <__swsetup_r+0xa2>
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	20000064 	.word	0x20000064

08003ce8 <_sbrk_r>:
 8003ce8:	2300      	movs	r3, #0
 8003cea:	b570      	push	{r4, r5, r6, lr}
 8003cec:	4d06      	ldr	r5, [pc, #24]	; (8003d08 <_sbrk_r+0x20>)
 8003cee:	0004      	movs	r4, r0
 8003cf0:	0008      	movs	r0, r1
 8003cf2:	602b      	str	r3, [r5, #0]
 8003cf4:	f7fd f89e 	bl	8000e34 <_sbrk>
 8003cf8:	1c43      	adds	r3, r0, #1
 8003cfa:	d103      	bne.n	8003d04 <_sbrk_r+0x1c>
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d000      	beq.n	8003d04 <_sbrk_r+0x1c>
 8003d02:	6023      	str	r3, [r4, #0]
 8003d04:	bd70      	pop	{r4, r5, r6, pc}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	20000270 	.word	0x20000270

08003d0c <memchr>:
 8003d0c:	b2c9      	uxtb	r1, r1
 8003d0e:	1882      	adds	r2, r0, r2
 8003d10:	4290      	cmp	r0, r2
 8003d12:	d101      	bne.n	8003d18 <memchr+0xc>
 8003d14:	2000      	movs	r0, #0
 8003d16:	4770      	bx	lr
 8003d18:	7803      	ldrb	r3, [r0, #0]
 8003d1a:	428b      	cmp	r3, r1
 8003d1c:	d0fb      	beq.n	8003d16 <memchr+0xa>
 8003d1e:	3001      	adds	r0, #1
 8003d20:	e7f6      	b.n	8003d10 <memchr+0x4>
	...

08003d24 <__swhatbuf_r>:
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	000e      	movs	r6, r1
 8003d28:	001d      	movs	r5, r3
 8003d2a:	230e      	movs	r3, #14
 8003d2c:	5ec9      	ldrsh	r1, [r1, r3]
 8003d2e:	0014      	movs	r4, r2
 8003d30:	b096      	sub	sp, #88	; 0x58
 8003d32:	2900      	cmp	r1, #0
 8003d34:	da0c      	bge.n	8003d50 <__swhatbuf_r+0x2c>
 8003d36:	89b2      	ldrh	r2, [r6, #12]
 8003d38:	2380      	movs	r3, #128	; 0x80
 8003d3a:	0011      	movs	r1, r2
 8003d3c:	4019      	ands	r1, r3
 8003d3e:	421a      	tst	r2, r3
 8003d40:	d013      	beq.n	8003d6a <__swhatbuf_r+0x46>
 8003d42:	2100      	movs	r1, #0
 8003d44:	3b40      	subs	r3, #64	; 0x40
 8003d46:	2000      	movs	r0, #0
 8003d48:	6029      	str	r1, [r5, #0]
 8003d4a:	6023      	str	r3, [r4, #0]
 8003d4c:	b016      	add	sp, #88	; 0x58
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}
 8003d50:	466a      	mov	r2, sp
 8003d52:	f000 f84d 	bl	8003df0 <_fstat_r>
 8003d56:	2800      	cmp	r0, #0
 8003d58:	dbed      	blt.n	8003d36 <__swhatbuf_r+0x12>
 8003d5a:	23f0      	movs	r3, #240	; 0xf0
 8003d5c:	9901      	ldr	r1, [sp, #4]
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	4019      	ands	r1, r3
 8003d62:	4b03      	ldr	r3, [pc, #12]	; (8003d70 <__swhatbuf_r+0x4c>)
 8003d64:	18c9      	adds	r1, r1, r3
 8003d66:	424b      	negs	r3, r1
 8003d68:	4159      	adcs	r1, r3
 8003d6a:	2380      	movs	r3, #128	; 0x80
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	e7ea      	b.n	8003d46 <__swhatbuf_r+0x22>
 8003d70:	ffffe000 	.word	0xffffe000

08003d74 <__smakebuf_r>:
 8003d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d76:	2602      	movs	r6, #2
 8003d78:	898b      	ldrh	r3, [r1, #12]
 8003d7a:	0005      	movs	r5, r0
 8003d7c:	000c      	movs	r4, r1
 8003d7e:	4233      	tst	r3, r6
 8003d80:	d006      	beq.n	8003d90 <__smakebuf_r+0x1c>
 8003d82:	0023      	movs	r3, r4
 8003d84:	3347      	adds	r3, #71	; 0x47
 8003d86:	6023      	str	r3, [r4, #0]
 8003d88:	6123      	str	r3, [r4, #16]
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	6163      	str	r3, [r4, #20]
 8003d8e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003d90:	466a      	mov	r2, sp
 8003d92:	ab01      	add	r3, sp, #4
 8003d94:	f7ff ffc6 	bl	8003d24 <__swhatbuf_r>
 8003d98:	9900      	ldr	r1, [sp, #0]
 8003d9a:	0007      	movs	r7, r0
 8003d9c:	0028      	movs	r0, r5
 8003d9e:	f7ff faf1 	bl	8003384 <_malloc_r>
 8003da2:	2800      	cmp	r0, #0
 8003da4:	d108      	bne.n	8003db8 <__smakebuf_r+0x44>
 8003da6:	220c      	movs	r2, #12
 8003da8:	5ea3      	ldrsh	r3, [r4, r2]
 8003daa:	059a      	lsls	r2, r3, #22
 8003dac:	d4ef      	bmi.n	8003d8e <__smakebuf_r+0x1a>
 8003dae:	2203      	movs	r2, #3
 8003db0:	4393      	bics	r3, r2
 8003db2:	431e      	orrs	r6, r3
 8003db4:	81a6      	strh	r6, [r4, #12]
 8003db6:	e7e4      	b.n	8003d82 <__smakebuf_r+0xe>
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	89a2      	ldrh	r2, [r4, #12]
 8003dbc:	6020      	str	r0, [r4, #0]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	81a3      	strh	r3, [r4, #12]
 8003dc2:	9b00      	ldr	r3, [sp, #0]
 8003dc4:	6120      	str	r0, [r4, #16]
 8003dc6:	6163      	str	r3, [r4, #20]
 8003dc8:	9b01      	ldr	r3, [sp, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00c      	beq.n	8003de8 <__smakebuf_r+0x74>
 8003dce:	0028      	movs	r0, r5
 8003dd0:	230e      	movs	r3, #14
 8003dd2:	5ee1      	ldrsh	r1, [r4, r3]
 8003dd4:	f000 f81e 	bl	8003e14 <_isatty_r>
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	d005      	beq.n	8003de8 <__smakebuf_r+0x74>
 8003ddc:	2303      	movs	r3, #3
 8003dde:	89a2      	ldrh	r2, [r4, #12]
 8003de0:	439a      	bics	r2, r3
 8003de2:	3b02      	subs	r3, #2
 8003de4:	4313      	orrs	r3, r2
 8003de6:	81a3      	strh	r3, [r4, #12]
 8003de8:	89a3      	ldrh	r3, [r4, #12]
 8003dea:	433b      	orrs	r3, r7
 8003dec:	81a3      	strh	r3, [r4, #12]
 8003dee:	e7ce      	b.n	8003d8e <__smakebuf_r+0x1a>

08003df0 <_fstat_r>:
 8003df0:	2300      	movs	r3, #0
 8003df2:	b570      	push	{r4, r5, r6, lr}
 8003df4:	4d06      	ldr	r5, [pc, #24]	; (8003e10 <_fstat_r+0x20>)
 8003df6:	0004      	movs	r4, r0
 8003df8:	0008      	movs	r0, r1
 8003dfa:	0011      	movs	r1, r2
 8003dfc:	602b      	str	r3, [r5, #0]
 8003dfe:	f7fc fff7 	bl	8000df0 <_fstat>
 8003e02:	1c43      	adds	r3, r0, #1
 8003e04:	d103      	bne.n	8003e0e <_fstat_r+0x1e>
 8003e06:	682b      	ldr	r3, [r5, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d000      	beq.n	8003e0e <_fstat_r+0x1e>
 8003e0c:	6023      	str	r3, [r4, #0]
 8003e0e:	bd70      	pop	{r4, r5, r6, pc}
 8003e10:	20000270 	.word	0x20000270

08003e14 <_isatty_r>:
 8003e14:	2300      	movs	r3, #0
 8003e16:	b570      	push	{r4, r5, r6, lr}
 8003e18:	4d06      	ldr	r5, [pc, #24]	; (8003e34 <_isatty_r+0x20>)
 8003e1a:	0004      	movs	r4, r0
 8003e1c:	0008      	movs	r0, r1
 8003e1e:	602b      	str	r3, [r5, #0]
 8003e20:	f7fc fff4 	bl	8000e0c <_isatty>
 8003e24:	1c43      	adds	r3, r0, #1
 8003e26:	d103      	bne.n	8003e30 <_isatty_r+0x1c>
 8003e28:	682b      	ldr	r3, [r5, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d000      	beq.n	8003e30 <_isatty_r+0x1c>
 8003e2e:	6023      	str	r3, [r4, #0]
 8003e30:	bd70      	pop	{r4, r5, r6, pc}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	20000270 	.word	0x20000270

08003e38 <_init>:
 8003e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3e:	bc08      	pop	{r3}
 8003e40:	469e      	mov	lr, r3
 8003e42:	4770      	bx	lr

08003e44 <_fini>:
 8003e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4a:	bc08      	pop	{r3}
 8003e4c:	469e      	mov	lr, r3
 8003e4e:	4770      	bx	lr
