
15_1_SPI_SD_CARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d04  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  08008dc4  08008dc4  00018dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090d0  080090d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080090d0  080090d0  000190d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090d8  080090d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090d8  080090d8  000190d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090dc  080090dc  000190dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080090e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b30  20000074  08009154  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ba4  08009154  00020ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f0a2  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025c1  00000000  00000000  0002f181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  00031748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a4b  00000000  00000000  000324a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000162f0  00000000  00000000  00032eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013291  00000000  00000000  000491db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008108d  00000000  00000000  0005c46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035f4  00000000  00000000  000dd4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000e0af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008dac 	.word	0x08008dac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08008dac 	.word	0x08008dac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f852 	bl	800031c <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__aeabi_d2uiz>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	2200      	movs	r2, #0
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <__aeabi_d2uiz+0x38>)
 80002e6:	0004      	movs	r4, r0
 80002e8:	000d      	movs	r5, r1
 80002ea:	f000 ffb7 	bl	800125c <__aeabi_dcmpge>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	d104      	bne.n	80002fc <__aeabi_d2uiz+0x1c>
 80002f2:	0020      	movs	r0, r4
 80002f4:	0029      	movs	r1, r5
 80002f6:	f000 ff21 	bl	800113c <__aeabi_d2iz>
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <__aeabi_d2uiz+0x38>)
 80002fe:	2200      	movs	r2, #0
 8000300:	0020      	movs	r0, r4
 8000302:	0029      	movs	r1, r5
 8000304:	f000 fb98 	bl	8000a38 <__aeabi_dsub>
 8000308:	f000 ff18 	bl	800113c <__aeabi_d2iz>
 800030c:	2380      	movs	r3, #128	; 0x80
 800030e:	061b      	lsls	r3, r3, #24
 8000310:	469c      	mov	ip, r3
 8000312:	4460      	add	r0, ip
 8000314:	e7f1      	b.n	80002fa <__aeabi_d2uiz+0x1a>
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	41e00000 	.word	0x41e00000

0800031c <__udivmoddi4>:
 800031c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800031e:	4657      	mov	r7, sl
 8000320:	464e      	mov	r6, r9
 8000322:	4645      	mov	r5, r8
 8000324:	46de      	mov	lr, fp
 8000326:	b5e0      	push	{r5, r6, r7, lr}
 8000328:	0004      	movs	r4, r0
 800032a:	000d      	movs	r5, r1
 800032c:	4692      	mov	sl, r2
 800032e:	4699      	mov	r9, r3
 8000330:	b083      	sub	sp, #12
 8000332:	428b      	cmp	r3, r1
 8000334:	d830      	bhi.n	8000398 <__udivmoddi4+0x7c>
 8000336:	d02d      	beq.n	8000394 <__udivmoddi4+0x78>
 8000338:	4649      	mov	r1, r9
 800033a:	4650      	mov	r0, sl
 800033c:	f000 ffb6 	bl	80012ac <__clzdi2>
 8000340:	0029      	movs	r1, r5
 8000342:	0006      	movs	r6, r0
 8000344:	0020      	movs	r0, r4
 8000346:	f000 ffb1 	bl	80012ac <__clzdi2>
 800034a:	1a33      	subs	r3, r6, r0
 800034c:	4698      	mov	r8, r3
 800034e:	3b20      	subs	r3, #32
 8000350:	d434      	bmi.n	80003bc <__udivmoddi4+0xa0>
 8000352:	469b      	mov	fp, r3
 8000354:	4653      	mov	r3, sl
 8000356:	465a      	mov	r2, fp
 8000358:	4093      	lsls	r3, r2
 800035a:	4642      	mov	r2, r8
 800035c:	001f      	movs	r7, r3
 800035e:	4653      	mov	r3, sl
 8000360:	4093      	lsls	r3, r2
 8000362:	001e      	movs	r6, r3
 8000364:	42af      	cmp	r7, r5
 8000366:	d83b      	bhi.n	80003e0 <__udivmoddi4+0xc4>
 8000368:	42af      	cmp	r7, r5
 800036a:	d100      	bne.n	800036e <__udivmoddi4+0x52>
 800036c:	e079      	b.n	8000462 <__udivmoddi4+0x146>
 800036e:	465b      	mov	r3, fp
 8000370:	1ba4      	subs	r4, r4, r6
 8000372:	41bd      	sbcs	r5, r7
 8000374:	2b00      	cmp	r3, #0
 8000376:	da00      	bge.n	800037a <__udivmoddi4+0x5e>
 8000378:	e076      	b.n	8000468 <__udivmoddi4+0x14c>
 800037a:	2200      	movs	r2, #0
 800037c:	2300      	movs	r3, #0
 800037e:	9200      	str	r2, [sp, #0]
 8000380:	9301      	str	r3, [sp, #4]
 8000382:	2301      	movs	r3, #1
 8000384:	465a      	mov	r2, fp
 8000386:	4093      	lsls	r3, r2
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	2301      	movs	r3, #1
 800038c:	4642      	mov	r2, r8
 800038e:	4093      	lsls	r3, r2
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	e029      	b.n	80003e8 <__udivmoddi4+0xcc>
 8000394:	4282      	cmp	r2, r0
 8000396:	d9cf      	bls.n	8000338 <__udivmoddi4+0x1c>
 8000398:	2200      	movs	r2, #0
 800039a:	2300      	movs	r3, #0
 800039c:	9200      	str	r2, [sp, #0]
 800039e:	9301      	str	r3, [sp, #4]
 80003a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <__udivmoddi4+0x8e>
 80003a6:	601c      	str	r4, [r3, #0]
 80003a8:	605d      	str	r5, [r3, #4]
 80003aa:	9800      	ldr	r0, [sp, #0]
 80003ac:	9901      	ldr	r1, [sp, #4]
 80003ae:	b003      	add	sp, #12
 80003b0:	bcf0      	pop	{r4, r5, r6, r7}
 80003b2:	46bb      	mov	fp, r7
 80003b4:	46b2      	mov	sl, r6
 80003b6:	46a9      	mov	r9, r5
 80003b8:	46a0      	mov	r8, r4
 80003ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003bc:	4642      	mov	r2, r8
 80003be:	469b      	mov	fp, r3
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	4652      	mov	r2, sl
 80003c6:	40da      	lsrs	r2, r3
 80003c8:	4641      	mov	r1, r8
 80003ca:	0013      	movs	r3, r2
 80003cc:	464a      	mov	r2, r9
 80003ce:	408a      	lsls	r2, r1
 80003d0:	0017      	movs	r7, r2
 80003d2:	4642      	mov	r2, r8
 80003d4:	431f      	orrs	r7, r3
 80003d6:	4653      	mov	r3, sl
 80003d8:	4093      	lsls	r3, r2
 80003da:	001e      	movs	r6, r3
 80003dc:	42af      	cmp	r7, r5
 80003de:	d9c3      	bls.n	8000368 <__udivmoddi4+0x4c>
 80003e0:	2200      	movs	r2, #0
 80003e2:	2300      	movs	r3, #0
 80003e4:	9200      	str	r2, [sp, #0]
 80003e6:	9301      	str	r3, [sp, #4]
 80003e8:	4643      	mov	r3, r8
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d0d8      	beq.n	80003a0 <__udivmoddi4+0x84>
 80003ee:	07fb      	lsls	r3, r7, #31
 80003f0:	0872      	lsrs	r2, r6, #1
 80003f2:	431a      	orrs	r2, r3
 80003f4:	4646      	mov	r6, r8
 80003f6:	087b      	lsrs	r3, r7, #1
 80003f8:	e00e      	b.n	8000418 <__udivmoddi4+0xfc>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d101      	bne.n	8000402 <__udivmoddi4+0xe6>
 80003fe:	42a2      	cmp	r2, r4
 8000400:	d80c      	bhi.n	800041c <__udivmoddi4+0x100>
 8000402:	1aa4      	subs	r4, r4, r2
 8000404:	419d      	sbcs	r5, r3
 8000406:	2001      	movs	r0, #1
 8000408:	1924      	adds	r4, r4, r4
 800040a:	416d      	adcs	r5, r5
 800040c:	2100      	movs	r1, #0
 800040e:	3e01      	subs	r6, #1
 8000410:	1824      	adds	r4, r4, r0
 8000412:	414d      	adcs	r5, r1
 8000414:	2e00      	cmp	r6, #0
 8000416:	d006      	beq.n	8000426 <__udivmoddi4+0x10a>
 8000418:	42ab      	cmp	r3, r5
 800041a:	d9ee      	bls.n	80003fa <__udivmoddi4+0xde>
 800041c:	3e01      	subs	r6, #1
 800041e:	1924      	adds	r4, r4, r4
 8000420:	416d      	adcs	r5, r5
 8000422:	2e00      	cmp	r6, #0
 8000424:	d1f8      	bne.n	8000418 <__udivmoddi4+0xfc>
 8000426:	9800      	ldr	r0, [sp, #0]
 8000428:	9901      	ldr	r1, [sp, #4]
 800042a:	465b      	mov	r3, fp
 800042c:	1900      	adds	r0, r0, r4
 800042e:	4169      	adcs	r1, r5
 8000430:	2b00      	cmp	r3, #0
 8000432:	db24      	blt.n	800047e <__udivmoddi4+0x162>
 8000434:	002b      	movs	r3, r5
 8000436:	465a      	mov	r2, fp
 8000438:	4644      	mov	r4, r8
 800043a:	40d3      	lsrs	r3, r2
 800043c:	002a      	movs	r2, r5
 800043e:	40e2      	lsrs	r2, r4
 8000440:	001c      	movs	r4, r3
 8000442:	465b      	mov	r3, fp
 8000444:	0015      	movs	r5, r2
 8000446:	2b00      	cmp	r3, #0
 8000448:	db2a      	blt.n	80004a0 <__udivmoddi4+0x184>
 800044a:	0026      	movs	r6, r4
 800044c:	409e      	lsls	r6, r3
 800044e:	0033      	movs	r3, r6
 8000450:	0026      	movs	r6, r4
 8000452:	4647      	mov	r7, r8
 8000454:	40be      	lsls	r6, r7
 8000456:	0032      	movs	r2, r6
 8000458:	1a80      	subs	r0, r0, r2
 800045a:	4199      	sbcs	r1, r3
 800045c:	9000      	str	r0, [sp, #0]
 800045e:	9101      	str	r1, [sp, #4]
 8000460:	e79e      	b.n	80003a0 <__udivmoddi4+0x84>
 8000462:	42a3      	cmp	r3, r4
 8000464:	d8bc      	bhi.n	80003e0 <__udivmoddi4+0xc4>
 8000466:	e782      	b.n	800036e <__udivmoddi4+0x52>
 8000468:	4642      	mov	r2, r8
 800046a:	2320      	movs	r3, #32
 800046c:	2100      	movs	r1, #0
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	2200      	movs	r2, #0
 8000472:	9100      	str	r1, [sp, #0]
 8000474:	9201      	str	r2, [sp, #4]
 8000476:	2201      	movs	r2, #1
 8000478:	40da      	lsrs	r2, r3
 800047a:	9201      	str	r2, [sp, #4]
 800047c:	e785      	b.n	800038a <__udivmoddi4+0x6e>
 800047e:	4642      	mov	r2, r8
 8000480:	2320      	movs	r3, #32
 8000482:	1a9b      	subs	r3, r3, r2
 8000484:	002a      	movs	r2, r5
 8000486:	4646      	mov	r6, r8
 8000488:	409a      	lsls	r2, r3
 800048a:	0023      	movs	r3, r4
 800048c:	40f3      	lsrs	r3, r6
 800048e:	4644      	mov	r4, r8
 8000490:	4313      	orrs	r3, r2
 8000492:	002a      	movs	r2, r5
 8000494:	40e2      	lsrs	r2, r4
 8000496:	001c      	movs	r4, r3
 8000498:	465b      	mov	r3, fp
 800049a:	0015      	movs	r5, r2
 800049c:	2b00      	cmp	r3, #0
 800049e:	dad4      	bge.n	800044a <__udivmoddi4+0x12e>
 80004a0:	4642      	mov	r2, r8
 80004a2:	002f      	movs	r7, r5
 80004a4:	2320      	movs	r3, #32
 80004a6:	0026      	movs	r6, r4
 80004a8:	4097      	lsls	r7, r2
 80004aa:	1a9b      	subs	r3, r3, r2
 80004ac:	40de      	lsrs	r6, r3
 80004ae:	003b      	movs	r3, r7
 80004b0:	4333      	orrs	r3, r6
 80004b2:	e7cd      	b.n	8000450 <__udivmoddi4+0x134>

080004b4 <__aeabi_dmul>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	4645      	mov	r5, r8
 80004b8:	46de      	mov	lr, fp
 80004ba:	4657      	mov	r7, sl
 80004bc:	464e      	mov	r6, r9
 80004be:	b5e0      	push	{r5, r6, r7, lr}
 80004c0:	001f      	movs	r7, r3
 80004c2:	030b      	lsls	r3, r1, #12
 80004c4:	0b1b      	lsrs	r3, r3, #12
 80004c6:	469b      	mov	fp, r3
 80004c8:	004d      	lsls	r5, r1, #1
 80004ca:	0fcb      	lsrs	r3, r1, #31
 80004cc:	0004      	movs	r4, r0
 80004ce:	4691      	mov	r9, r2
 80004d0:	4698      	mov	r8, r3
 80004d2:	b087      	sub	sp, #28
 80004d4:	0d6d      	lsrs	r5, r5, #21
 80004d6:	d100      	bne.n	80004da <__aeabi_dmul+0x26>
 80004d8:	e1cd      	b.n	8000876 <__aeabi_dmul+0x3c2>
 80004da:	4bce      	ldr	r3, [pc, #824]	; (8000814 <__aeabi_dmul+0x360>)
 80004dc:	429d      	cmp	r5, r3
 80004de:	d100      	bne.n	80004e2 <__aeabi_dmul+0x2e>
 80004e0:	e1e9      	b.n	80008b6 <__aeabi_dmul+0x402>
 80004e2:	465a      	mov	r2, fp
 80004e4:	0f43      	lsrs	r3, r0, #29
 80004e6:	00d2      	lsls	r2, r2, #3
 80004e8:	4313      	orrs	r3, r2
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	0412      	lsls	r2, r2, #16
 80004ee:	431a      	orrs	r2, r3
 80004f0:	00c3      	lsls	r3, r0, #3
 80004f2:	469a      	mov	sl, r3
 80004f4:	4bc8      	ldr	r3, [pc, #800]	; (8000818 <__aeabi_dmul+0x364>)
 80004f6:	4693      	mov	fp, r2
 80004f8:	469c      	mov	ip, r3
 80004fa:	2300      	movs	r3, #0
 80004fc:	2600      	movs	r6, #0
 80004fe:	4465      	add	r5, ip
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	033c      	lsls	r4, r7, #12
 8000504:	007b      	lsls	r3, r7, #1
 8000506:	4648      	mov	r0, r9
 8000508:	0b24      	lsrs	r4, r4, #12
 800050a:	0d5b      	lsrs	r3, r3, #21
 800050c:	0fff      	lsrs	r7, r7, #31
 800050e:	2b00      	cmp	r3, #0
 8000510:	d100      	bne.n	8000514 <__aeabi_dmul+0x60>
 8000512:	e189      	b.n	8000828 <__aeabi_dmul+0x374>
 8000514:	4abf      	ldr	r2, [pc, #764]	; (8000814 <__aeabi_dmul+0x360>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d019      	beq.n	800054e <__aeabi_dmul+0x9a>
 800051a:	0f42      	lsrs	r2, r0, #29
 800051c:	00e4      	lsls	r4, r4, #3
 800051e:	4322      	orrs	r2, r4
 8000520:	2480      	movs	r4, #128	; 0x80
 8000522:	0424      	lsls	r4, r4, #16
 8000524:	4314      	orrs	r4, r2
 8000526:	4abc      	ldr	r2, [pc, #752]	; (8000818 <__aeabi_dmul+0x364>)
 8000528:	2100      	movs	r1, #0
 800052a:	4694      	mov	ip, r2
 800052c:	4642      	mov	r2, r8
 800052e:	4463      	add	r3, ip
 8000530:	195b      	adds	r3, r3, r5
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	9b01      	ldr	r3, [sp, #4]
 8000536:	407a      	eors	r2, r7
 8000538:	3301      	adds	r3, #1
 800053a:	00c0      	lsls	r0, r0, #3
 800053c:	b2d2      	uxtb	r2, r2
 800053e:	9302      	str	r3, [sp, #8]
 8000540:	2e0a      	cmp	r6, #10
 8000542:	dd1c      	ble.n	800057e <__aeabi_dmul+0xca>
 8000544:	003a      	movs	r2, r7
 8000546:	2e0b      	cmp	r6, #11
 8000548:	d05e      	beq.n	8000608 <__aeabi_dmul+0x154>
 800054a:	4647      	mov	r7, r8
 800054c:	e056      	b.n	80005fc <__aeabi_dmul+0x148>
 800054e:	4649      	mov	r1, r9
 8000550:	4bb0      	ldr	r3, [pc, #704]	; (8000814 <__aeabi_dmul+0x360>)
 8000552:	4321      	orrs	r1, r4
 8000554:	18eb      	adds	r3, r5, r3
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	2900      	cmp	r1, #0
 800055a:	d12a      	bne.n	80005b2 <__aeabi_dmul+0xfe>
 800055c:	2080      	movs	r0, #128	; 0x80
 800055e:	2202      	movs	r2, #2
 8000560:	0100      	lsls	r0, r0, #4
 8000562:	002b      	movs	r3, r5
 8000564:	4684      	mov	ip, r0
 8000566:	4316      	orrs	r6, r2
 8000568:	4642      	mov	r2, r8
 800056a:	4463      	add	r3, ip
 800056c:	407a      	eors	r2, r7
 800056e:	b2d2      	uxtb	r2, r2
 8000570:	9302      	str	r3, [sp, #8]
 8000572:	2e0a      	cmp	r6, #10
 8000574:	dd00      	ble.n	8000578 <__aeabi_dmul+0xc4>
 8000576:	e231      	b.n	80009dc <__aeabi_dmul+0x528>
 8000578:	2000      	movs	r0, #0
 800057a:	2400      	movs	r4, #0
 800057c:	2102      	movs	r1, #2
 800057e:	2e02      	cmp	r6, #2
 8000580:	dc26      	bgt.n	80005d0 <__aeabi_dmul+0x11c>
 8000582:	3e01      	subs	r6, #1
 8000584:	2e01      	cmp	r6, #1
 8000586:	d852      	bhi.n	800062e <__aeabi_dmul+0x17a>
 8000588:	2902      	cmp	r1, #2
 800058a:	d04c      	beq.n	8000626 <__aeabi_dmul+0x172>
 800058c:	2901      	cmp	r1, #1
 800058e:	d000      	beq.n	8000592 <__aeabi_dmul+0xde>
 8000590:	e118      	b.n	80007c4 <__aeabi_dmul+0x310>
 8000592:	2300      	movs	r3, #0
 8000594:	2400      	movs	r4, #0
 8000596:	2500      	movs	r5, #0
 8000598:	051b      	lsls	r3, r3, #20
 800059a:	4323      	orrs	r3, r4
 800059c:	07d2      	lsls	r2, r2, #31
 800059e:	4313      	orrs	r3, r2
 80005a0:	0028      	movs	r0, r5
 80005a2:	0019      	movs	r1, r3
 80005a4:	b007      	add	sp, #28
 80005a6:	bcf0      	pop	{r4, r5, r6, r7}
 80005a8:	46bb      	mov	fp, r7
 80005aa:	46b2      	mov	sl, r6
 80005ac:	46a9      	mov	r9, r5
 80005ae:	46a0      	mov	r8, r4
 80005b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b2:	2180      	movs	r1, #128	; 0x80
 80005b4:	2203      	movs	r2, #3
 80005b6:	0109      	lsls	r1, r1, #4
 80005b8:	002b      	movs	r3, r5
 80005ba:	468c      	mov	ip, r1
 80005bc:	4316      	orrs	r6, r2
 80005be:	4642      	mov	r2, r8
 80005c0:	4463      	add	r3, ip
 80005c2:	407a      	eors	r2, r7
 80005c4:	b2d2      	uxtb	r2, r2
 80005c6:	9302      	str	r3, [sp, #8]
 80005c8:	2e0a      	cmp	r6, #10
 80005ca:	dd00      	ble.n	80005ce <__aeabi_dmul+0x11a>
 80005cc:	e228      	b.n	8000a20 <__aeabi_dmul+0x56c>
 80005ce:	2103      	movs	r1, #3
 80005d0:	2501      	movs	r5, #1
 80005d2:	40b5      	lsls	r5, r6
 80005d4:	46ac      	mov	ip, r5
 80005d6:	26a6      	movs	r6, #166	; 0xa6
 80005d8:	4663      	mov	r3, ip
 80005da:	00f6      	lsls	r6, r6, #3
 80005dc:	4035      	ands	r5, r6
 80005de:	4233      	tst	r3, r6
 80005e0:	d10b      	bne.n	80005fa <__aeabi_dmul+0x146>
 80005e2:	2690      	movs	r6, #144	; 0x90
 80005e4:	00b6      	lsls	r6, r6, #2
 80005e6:	4233      	tst	r3, r6
 80005e8:	d118      	bne.n	800061c <__aeabi_dmul+0x168>
 80005ea:	3eb9      	subs	r6, #185	; 0xb9
 80005ec:	3eff      	subs	r6, #255	; 0xff
 80005ee:	421e      	tst	r6, r3
 80005f0:	d01d      	beq.n	800062e <__aeabi_dmul+0x17a>
 80005f2:	46a3      	mov	fp, r4
 80005f4:	4682      	mov	sl, r0
 80005f6:	9100      	str	r1, [sp, #0]
 80005f8:	e000      	b.n	80005fc <__aeabi_dmul+0x148>
 80005fa:	0017      	movs	r7, r2
 80005fc:	9900      	ldr	r1, [sp, #0]
 80005fe:	003a      	movs	r2, r7
 8000600:	2902      	cmp	r1, #2
 8000602:	d010      	beq.n	8000626 <__aeabi_dmul+0x172>
 8000604:	465c      	mov	r4, fp
 8000606:	4650      	mov	r0, sl
 8000608:	2903      	cmp	r1, #3
 800060a:	d1bf      	bne.n	800058c <__aeabi_dmul+0xd8>
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	031b      	lsls	r3, r3, #12
 8000610:	431c      	orrs	r4, r3
 8000612:	0324      	lsls	r4, r4, #12
 8000614:	0005      	movs	r5, r0
 8000616:	4b7f      	ldr	r3, [pc, #508]	; (8000814 <__aeabi_dmul+0x360>)
 8000618:	0b24      	lsrs	r4, r4, #12
 800061a:	e7bd      	b.n	8000598 <__aeabi_dmul+0xe4>
 800061c:	2480      	movs	r4, #128	; 0x80
 800061e:	2200      	movs	r2, #0
 8000620:	4b7c      	ldr	r3, [pc, #496]	; (8000814 <__aeabi_dmul+0x360>)
 8000622:	0324      	lsls	r4, r4, #12
 8000624:	e7b8      	b.n	8000598 <__aeabi_dmul+0xe4>
 8000626:	2400      	movs	r4, #0
 8000628:	2500      	movs	r5, #0
 800062a:	4b7a      	ldr	r3, [pc, #488]	; (8000814 <__aeabi_dmul+0x360>)
 800062c:	e7b4      	b.n	8000598 <__aeabi_dmul+0xe4>
 800062e:	4653      	mov	r3, sl
 8000630:	041e      	lsls	r6, r3, #16
 8000632:	0c36      	lsrs	r6, r6, #16
 8000634:	0c1f      	lsrs	r7, r3, #16
 8000636:	0033      	movs	r3, r6
 8000638:	0c01      	lsrs	r1, r0, #16
 800063a:	0400      	lsls	r0, r0, #16
 800063c:	0c00      	lsrs	r0, r0, #16
 800063e:	4343      	muls	r3, r0
 8000640:	4698      	mov	r8, r3
 8000642:	0003      	movs	r3, r0
 8000644:	437b      	muls	r3, r7
 8000646:	4699      	mov	r9, r3
 8000648:	0033      	movs	r3, r6
 800064a:	434b      	muls	r3, r1
 800064c:	469c      	mov	ip, r3
 800064e:	4643      	mov	r3, r8
 8000650:	000d      	movs	r5, r1
 8000652:	0c1b      	lsrs	r3, r3, #16
 8000654:	469a      	mov	sl, r3
 8000656:	437d      	muls	r5, r7
 8000658:	44cc      	add	ip, r9
 800065a:	44d4      	add	ip, sl
 800065c:	9500      	str	r5, [sp, #0]
 800065e:	45e1      	cmp	r9, ip
 8000660:	d904      	bls.n	800066c <__aeabi_dmul+0x1b8>
 8000662:	2380      	movs	r3, #128	; 0x80
 8000664:	025b      	lsls	r3, r3, #9
 8000666:	4699      	mov	r9, r3
 8000668:	444d      	add	r5, r9
 800066a:	9500      	str	r5, [sp, #0]
 800066c:	4663      	mov	r3, ip
 800066e:	0c1b      	lsrs	r3, r3, #16
 8000670:	001d      	movs	r5, r3
 8000672:	4663      	mov	r3, ip
 8000674:	041b      	lsls	r3, r3, #16
 8000676:	469c      	mov	ip, r3
 8000678:	4643      	mov	r3, r8
 800067a:	041b      	lsls	r3, r3, #16
 800067c:	0c1b      	lsrs	r3, r3, #16
 800067e:	4698      	mov	r8, r3
 8000680:	4663      	mov	r3, ip
 8000682:	4443      	add	r3, r8
 8000684:	9303      	str	r3, [sp, #12]
 8000686:	0c23      	lsrs	r3, r4, #16
 8000688:	4698      	mov	r8, r3
 800068a:	0033      	movs	r3, r6
 800068c:	0424      	lsls	r4, r4, #16
 800068e:	0c24      	lsrs	r4, r4, #16
 8000690:	4363      	muls	r3, r4
 8000692:	469c      	mov	ip, r3
 8000694:	0023      	movs	r3, r4
 8000696:	437b      	muls	r3, r7
 8000698:	4699      	mov	r9, r3
 800069a:	4643      	mov	r3, r8
 800069c:	435e      	muls	r6, r3
 800069e:	435f      	muls	r7, r3
 80006a0:	444e      	add	r6, r9
 80006a2:	4663      	mov	r3, ip
 80006a4:	46b2      	mov	sl, r6
 80006a6:	0c1e      	lsrs	r6, r3, #16
 80006a8:	4456      	add	r6, sl
 80006aa:	45b1      	cmp	r9, r6
 80006ac:	d903      	bls.n	80006b6 <__aeabi_dmul+0x202>
 80006ae:	2380      	movs	r3, #128	; 0x80
 80006b0:	025b      	lsls	r3, r3, #9
 80006b2:	4699      	mov	r9, r3
 80006b4:	444f      	add	r7, r9
 80006b6:	0c33      	lsrs	r3, r6, #16
 80006b8:	4699      	mov	r9, r3
 80006ba:	003b      	movs	r3, r7
 80006bc:	444b      	add	r3, r9
 80006be:	9305      	str	r3, [sp, #20]
 80006c0:	4663      	mov	r3, ip
 80006c2:	46ac      	mov	ip, r5
 80006c4:	041f      	lsls	r7, r3, #16
 80006c6:	0c3f      	lsrs	r7, r7, #16
 80006c8:	0436      	lsls	r6, r6, #16
 80006ca:	19f6      	adds	r6, r6, r7
 80006cc:	44b4      	add	ip, r6
 80006ce:	4663      	mov	r3, ip
 80006d0:	9304      	str	r3, [sp, #16]
 80006d2:	465b      	mov	r3, fp
 80006d4:	0c1b      	lsrs	r3, r3, #16
 80006d6:	469c      	mov	ip, r3
 80006d8:	465b      	mov	r3, fp
 80006da:	041f      	lsls	r7, r3, #16
 80006dc:	0c3f      	lsrs	r7, r7, #16
 80006de:	003b      	movs	r3, r7
 80006e0:	4343      	muls	r3, r0
 80006e2:	4699      	mov	r9, r3
 80006e4:	4663      	mov	r3, ip
 80006e6:	4343      	muls	r3, r0
 80006e8:	469a      	mov	sl, r3
 80006ea:	464b      	mov	r3, r9
 80006ec:	4660      	mov	r0, ip
 80006ee:	0c1b      	lsrs	r3, r3, #16
 80006f0:	469b      	mov	fp, r3
 80006f2:	4348      	muls	r0, r1
 80006f4:	4379      	muls	r1, r7
 80006f6:	4451      	add	r1, sl
 80006f8:	4459      	add	r1, fp
 80006fa:	458a      	cmp	sl, r1
 80006fc:	d903      	bls.n	8000706 <__aeabi_dmul+0x252>
 80006fe:	2380      	movs	r3, #128	; 0x80
 8000700:	025b      	lsls	r3, r3, #9
 8000702:	469a      	mov	sl, r3
 8000704:	4450      	add	r0, sl
 8000706:	0c0b      	lsrs	r3, r1, #16
 8000708:	469a      	mov	sl, r3
 800070a:	464b      	mov	r3, r9
 800070c:	041b      	lsls	r3, r3, #16
 800070e:	0c1b      	lsrs	r3, r3, #16
 8000710:	4699      	mov	r9, r3
 8000712:	003b      	movs	r3, r7
 8000714:	4363      	muls	r3, r4
 8000716:	0409      	lsls	r1, r1, #16
 8000718:	4645      	mov	r5, r8
 800071a:	4449      	add	r1, r9
 800071c:	4699      	mov	r9, r3
 800071e:	4663      	mov	r3, ip
 8000720:	435c      	muls	r4, r3
 8000722:	436b      	muls	r3, r5
 8000724:	469c      	mov	ip, r3
 8000726:	464b      	mov	r3, r9
 8000728:	0c1b      	lsrs	r3, r3, #16
 800072a:	4698      	mov	r8, r3
 800072c:	436f      	muls	r7, r5
 800072e:	193f      	adds	r7, r7, r4
 8000730:	4447      	add	r7, r8
 8000732:	4450      	add	r0, sl
 8000734:	42bc      	cmp	r4, r7
 8000736:	d903      	bls.n	8000740 <__aeabi_dmul+0x28c>
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	025b      	lsls	r3, r3, #9
 800073c:	4698      	mov	r8, r3
 800073e:	44c4      	add	ip, r8
 8000740:	9b04      	ldr	r3, [sp, #16]
 8000742:	9d00      	ldr	r5, [sp, #0]
 8000744:	4698      	mov	r8, r3
 8000746:	4445      	add	r5, r8
 8000748:	42b5      	cmp	r5, r6
 800074a:	41b6      	sbcs	r6, r6
 800074c:	4273      	negs	r3, r6
 800074e:	4698      	mov	r8, r3
 8000750:	464b      	mov	r3, r9
 8000752:	041e      	lsls	r6, r3, #16
 8000754:	9b05      	ldr	r3, [sp, #20]
 8000756:	043c      	lsls	r4, r7, #16
 8000758:	4699      	mov	r9, r3
 800075a:	0c36      	lsrs	r6, r6, #16
 800075c:	19a4      	adds	r4, r4, r6
 800075e:	444c      	add	r4, r9
 8000760:	46a1      	mov	r9, r4
 8000762:	4683      	mov	fp, r0
 8000764:	186e      	adds	r6, r5, r1
 8000766:	44c1      	add	r9, r8
 8000768:	428e      	cmp	r6, r1
 800076a:	4189      	sbcs	r1, r1
 800076c:	44cb      	add	fp, r9
 800076e:	465d      	mov	r5, fp
 8000770:	4249      	negs	r1, r1
 8000772:	186d      	adds	r5, r5, r1
 8000774:	429c      	cmp	r4, r3
 8000776:	41a4      	sbcs	r4, r4
 8000778:	45c1      	cmp	r9, r8
 800077a:	419b      	sbcs	r3, r3
 800077c:	4583      	cmp	fp, r0
 800077e:	4180      	sbcs	r0, r0
 8000780:	428d      	cmp	r5, r1
 8000782:	4189      	sbcs	r1, r1
 8000784:	425b      	negs	r3, r3
 8000786:	4264      	negs	r4, r4
 8000788:	431c      	orrs	r4, r3
 800078a:	4240      	negs	r0, r0
 800078c:	9b03      	ldr	r3, [sp, #12]
 800078e:	4249      	negs	r1, r1
 8000790:	4301      	orrs	r1, r0
 8000792:	0270      	lsls	r0, r6, #9
 8000794:	0c3f      	lsrs	r7, r7, #16
 8000796:	4318      	orrs	r0, r3
 8000798:	19e4      	adds	r4, r4, r7
 800079a:	1e47      	subs	r7, r0, #1
 800079c:	41b8      	sbcs	r0, r7
 800079e:	1864      	adds	r4, r4, r1
 80007a0:	4464      	add	r4, ip
 80007a2:	0df6      	lsrs	r6, r6, #23
 80007a4:	0261      	lsls	r1, r4, #9
 80007a6:	4330      	orrs	r0, r6
 80007a8:	0dec      	lsrs	r4, r5, #23
 80007aa:	026e      	lsls	r6, r5, #9
 80007ac:	430c      	orrs	r4, r1
 80007ae:	4330      	orrs	r0, r6
 80007b0:	01c9      	lsls	r1, r1, #7
 80007b2:	d400      	bmi.n	80007b6 <__aeabi_dmul+0x302>
 80007b4:	e0f1      	b.n	800099a <__aeabi_dmul+0x4e6>
 80007b6:	2101      	movs	r1, #1
 80007b8:	0843      	lsrs	r3, r0, #1
 80007ba:	4001      	ands	r1, r0
 80007bc:	430b      	orrs	r3, r1
 80007be:	07e0      	lsls	r0, r4, #31
 80007c0:	4318      	orrs	r0, r3
 80007c2:	0864      	lsrs	r4, r4, #1
 80007c4:	4915      	ldr	r1, [pc, #84]	; (800081c <__aeabi_dmul+0x368>)
 80007c6:	9b02      	ldr	r3, [sp, #8]
 80007c8:	468c      	mov	ip, r1
 80007ca:	4463      	add	r3, ip
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dc00      	bgt.n	80007d2 <__aeabi_dmul+0x31e>
 80007d0:	e097      	b.n	8000902 <__aeabi_dmul+0x44e>
 80007d2:	0741      	lsls	r1, r0, #29
 80007d4:	d009      	beq.n	80007ea <__aeabi_dmul+0x336>
 80007d6:	210f      	movs	r1, #15
 80007d8:	4001      	ands	r1, r0
 80007da:	2904      	cmp	r1, #4
 80007dc:	d005      	beq.n	80007ea <__aeabi_dmul+0x336>
 80007de:	1d01      	adds	r1, r0, #4
 80007e0:	4281      	cmp	r1, r0
 80007e2:	4180      	sbcs	r0, r0
 80007e4:	4240      	negs	r0, r0
 80007e6:	1824      	adds	r4, r4, r0
 80007e8:	0008      	movs	r0, r1
 80007ea:	01e1      	lsls	r1, r4, #7
 80007ec:	d506      	bpl.n	80007fc <__aeabi_dmul+0x348>
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	00c9      	lsls	r1, r1, #3
 80007f2:	468c      	mov	ip, r1
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <__aeabi_dmul+0x36c>)
 80007f6:	401c      	ands	r4, r3
 80007f8:	9b02      	ldr	r3, [sp, #8]
 80007fa:	4463      	add	r3, ip
 80007fc:	4909      	ldr	r1, [pc, #36]	; (8000824 <__aeabi_dmul+0x370>)
 80007fe:	428b      	cmp	r3, r1
 8000800:	dd00      	ble.n	8000804 <__aeabi_dmul+0x350>
 8000802:	e710      	b.n	8000626 <__aeabi_dmul+0x172>
 8000804:	0761      	lsls	r1, r4, #29
 8000806:	08c5      	lsrs	r5, r0, #3
 8000808:	0264      	lsls	r4, r4, #9
 800080a:	055b      	lsls	r3, r3, #21
 800080c:	430d      	orrs	r5, r1
 800080e:	0b24      	lsrs	r4, r4, #12
 8000810:	0d5b      	lsrs	r3, r3, #21
 8000812:	e6c1      	b.n	8000598 <__aeabi_dmul+0xe4>
 8000814:	000007ff 	.word	0x000007ff
 8000818:	fffffc01 	.word	0xfffffc01
 800081c:	000003ff 	.word	0x000003ff
 8000820:	feffffff 	.word	0xfeffffff
 8000824:	000007fe 	.word	0x000007fe
 8000828:	464b      	mov	r3, r9
 800082a:	4323      	orrs	r3, r4
 800082c:	d059      	beq.n	80008e2 <__aeabi_dmul+0x42e>
 800082e:	2c00      	cmp	r4, #0
 8000830:	d100      	bne.n	8000834 <__aeabi_dmul+0x380>
 8000832:	e0a3      	b.n	800097c <__aeabi_dmul+0x4c8>
 8000834:	0020      	movs	r0, r4
 8000836:	f000 fd1b 	bl	8001270 <__clzsi2>
 800083a:	0001      	movs	r1, r0
 800083c:	0003      	movs	r3, r0
 800083e:	390b      	subs	r1, #11
 8000840:	221d      	movs	r2, #29
 8000842:	1a52      	subs	r2, r2, r1
 8000844:	4649      	mov	r1, r9
 8000846:	0018      	movs	r0, r3
 8000848:	40d1      	lsrs	r1, r2
 800084a:	464a      	mov	r2, r9
 800084c:	3808      	subs	r0, #8
 800084e:	4082      	lsls	r2, r0
 8000850:	4084      	lsls	r4, r0
 8000852:	0010      	movs	r0, r2
 8000854:	430c      	orrs	r4, r1
 8000856:	4a74      	ldr	r2, [pc, #464]	; (8000a28 <__aeabi_dmul+0x574>)
 8000858:	1aeb      	subs	r3, r5, r3
 800085a:	4694      	mov	ip, r2
 800085c:	4642      	mov	r2, r8
 800085e:	4463      	add	r3, ip
 8000860:	9301      	str	r3, [sp, #4]
 8000862:	9b01      	ldr	r3, [sp, #4]
 8000864:	407a      	eors	r2, r7
 8000866:	3301      	adds	r3, #1
 8000868:	2100      	movs	r1, #0
 800086a:	b2d2      	uxtb	r2, r2
 800086c:	9302      	str	r3, [sp, #8]
 800086e:	2e0a      	cmp	r6, #10
 8000870:	dd00      	ble.n	8000874 <__aeabi_dmul+0x3c0>
 8000872:	e667      	b.n	8000544 <__aeabi_dmul+0x90>
 8000874:	e683      	b.n	800057e <__aeabi_dmul+0xca>
 8000876:	465b      	mov	r3, fp
 8000878:	4303      	orrs	r3, r0
 800087a:	469a      	mov	sl, r3
 800087c:	d02a      	beq.n	80008d4 <__aeabi_dmul+0x420>
 800087e:	465b      	mov	r3, fp
 8000880:	2b00      	cmp	r3, #0
 8000882:	d06d      	beq.n	8000960 <__aeabi_dmul+0x4ac>
 8000884:	4658      	mov	r0, fp
 8000886:	f000 fcf3 	bl	8001270 <__clzsi2>
 800088a:	0001      	movs	r1, r0
 800088c:	0003      	movs	r3, r0
 800088e:	390b      	subs	r1, #11
 8000890:	221d      	movs	r2, #29
 8000892:	1a52      	subs	r2, r2, r1
 8000894:	0021      	movs	r1, r4
 8000896:	0018      	movs	r0, r3
 8000898:	465d      	mov	r5, fp
 800089a:	40d1      	lsrs	r1, r2
 800089c:	3808      	subs	r0, #8
 800089e:	4085      	lsls	r5, r0
 80008a0:	000a      	movs	r2, r1
 80008a2:	4084      	lsls	r4, r0
 80008a4:	432a      	orrs	r2, r5
 80008a6:	4693      	mov	fp, r2
 80008a8:	46a2      	mov	sl, r4
 80008aa:	4d5f      	ldr	r5, [pc, #380]	; (8000a28 <__aeabi_dmul+0x574>)
 80008ac:	2600      	movs	r6, #0
 80008ae:	1aed      	subs	r5, r5, r3
 80008b0:	2300      	movs	r3, #0
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	e625      	b.n	8000502 <__aeabi_dmul+0x4e>
 80008b6:	465b      	mov	r3, fp
 80008b8:	4303      	orrs	r3, r0
 80008ba:	469a      	mov	sl, r3
 80008bc:	d105      	bne.n	80008ca <__aeabi_dmul+0x416>
 80008be:	2300      	movs	r3, #0
 80008c0:	469b      	mov	fp, r3
 80008c2:	3302      	adds	r3, #2
 80008c4:	2608      	movs	r6, #8
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	e61b      	b.n	8000502 <__aeabi_dmul+0x4e>
 80008ca:	2303      	movs	r3, #3
 80008cc:	4682      	mov	sl, r0
 80008ce:	260c      	movs	r6, #12
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	e616      	b.n	8000502 <__aeabi_dmul+0x4e>
 80008d4:	2300      	movs	r3, #0
 80008d6:	469b      	mov	fp, r3
 80008d8:	3301      	adds	r3, #1
 80008da:	2604      	movs	r6, #4
 80008dc:	2500      	movs	r5, #0
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	e60f      	b.n	8000502 <__aeabi_dmul+0x4e>
 80008e2:	4642      	mov	r2, r8
 80008e4:	3301      	adds	r3, #1
 80008e6:	9501      	str	r5, [sp, #4]
 80008e8:	431e      	orrs	r6, r3
 80008ea:	9b01      	ldr	r3, [sp, #4]
 80008ec:	407a      	eors	r2, r7
 80008ee:	3301      	adds	r3, #1
 80008f0:	2400      	movs	r4, #0
 80008f2:	2000      	movs	r0, #0
 80008f4:	2101      	movs	r1, #1
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	9302      	str	r3, [sp, #8]
 80008fa:	2e0a      	cmp	r6, #10
 80008fc:	dd00      	ble.n	8000900 <__aeabi_dmul+0x44c>
 80008fe:	e621      	b.n	8000544 <__aeabi_dmul+0x90>
 8000900:	e63d      	b.n	800057e <__aeabi_dmul+0xca>
 8000902:	2101      	movs	r1, #1
 8000904:	1ac9      	subs	r1, r1, r3
 8000906:	2938      	cmp	r1, #56	; 0x38
 8000908:	dd00      	ble.n	800090c <__aeabi_dmul+0x458>
 800090a:	e642      	b.n	8000592 <__aeabi_dmul+0xde>
 800090c:	291f      	cmp	r1, #31
 800090e:	dd47      	ble.n	80009a0 <__aeabi_dmul+0x4ec>
 8000910:	261f      	movs	r6, #31
 8000912:	0025      	movs	r5, r4
 8000914:	4276      	negs	r6, r6
 8000916:	1af3      	subs	r3, r6, r3
 8000918:	40dd      	lsrs	r5, r3
 800091a:	002b      	movs	r3, r5
 800091c:	2920      	cmp	r1, #32
 800091e:	d005      	beq.n	800092c <__aeabi_dmul+0x478>
 8000920:	4942      	ldr	r1, [pc, #264]	; (8000a2c <__aeabi_dmul+0x578>)
 8000922:	9d02      	ldr	r5, [sp, #8]
 8000924:	468c      	mov	ip, r1
 8000926:	4465      	add	r5, ip
 8000928:	40ac      	lsls	r4, r5
 800092a:	4320      	orrs	r0, r4
 800092c:	1e41      	subs	r1, r0, #1
 800092e:	4188      	sbcs	r0, r1
 8000930:	4318      	orrs	r0, r3
 8000932:	2307      	movs	r3, #7
 8000934:	001d      	movs	r5, r3
 8000936:	2400      	movs	r4, #0
 8000938:	4005      	ands	r5, r0
 800093a:	4203      	tst	r3, r0
 800093c:	d04a      	beq.n	80009d4 <__aeabi_dmul+0x520>
 800093e:	230f      	movs	r3, #15
 8000940:	2400      	movs	r4, #0
 8000942:	4003      	ands	r3, r0
 8000944:	2b04      	cmp	r3, #4
 8000946:	d042      	beq.n	80009ce <__aeabi_dmul+0x51a>
 8000948:	1d03      	adds	r3, r0, #4
 800094a:	4283      	cmp	r3, r0
 800094c:	4180      	sbcs	r0, r0
 800094e:	4240      	negs	r0, r0
 8000950:	1824      	adds	r4, r4, r0
 8000952:	0018      	movs	r0, r3
 8000954:	0223      	lsls	r3, r4, #8
 8000956:	d53a      	bpl.n	80009ce <__aeabi_dmul+0x51a>
 8000958:	2301      	movs	r3, #1
 800095a:	2400      	movs	r4, #0
 800095c:	2500      	movs	r5, #0
 800095e:	e61b      	b.n	8000598 <__aeabi_dmul+0xe4>
 8000960:	f000 fc86 	bl	8001270 <__clzsi2>
 8000964:	0001      	movs	r1, r0
 8000966:	0003      	movs	r3, r0
 8000968:	3115      	adds	r1, #21
 800096a:	3320      	adds	r3, #32
 800096c:	291c      	cmp	r1, #28
 800096e:	dd8f      	ble.n	8000890 <__aeabi_dmul+0x3dc>
 8000970:	3808      	subs	r0, #8
 8000972:	2200      	movs	r2, #0
 8000974:	4084      	lsls	r4, r0
 8000976:	4692      	mov	sl, r2
 8000978:	46a3      	mov	fp, r4
 800097a:	e796      	b.n	80008aa <__aeabi_dmul+0x3f6>
 800097c:	f000 fc78 	bl	8001270 <__clzsi2>
 8000980:	0001      	movs	r1, r0
 8000982:	0003      	movs	r3, r0
 8000984:	3115      	adds	r1, #21
 8000986:	3320      	adds	r3, #32
 8000988:	291c      	cmp	r1, #28
 800098a:	dc00      	bgt.n	800098e <__aeabi_dmul+0x4da>
 800098c:	e758      	b.n	8000840 <__aeabi_dmul+0x38c>
 800098e:	0002      	movs	r2, r0
 8000990:	464c      	mov	r4, r9
 8000992:	3a08      	subs	r2, #8
 8000994:	2000      	movs	r0, #0
 8000996:	4094      	lsls	r4, r2
 8000998:	e75d      	b.n	8000856 <__aeabi_dmul+0x3a2>
 800099a:	9b01      	ldr	r3, [sp, #4]
 800099c:	9302      	str	r3, [sp, #8]
 800099e:	e711      	b.n	80007c4 <__aeabi_dmul+0x310>
 80009a0:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <__aeabi_dmul+0x57c>)
 80009a2:	0026      	movs	r6, r4
 80009a4:	469c      	mov	ip, r3
 80009a6:	0003      	movs	r3, r0
 80009a8:	9d02      	ldr	r5, [sp, #8]
 80009aa:	40cb      	lsrs	r3, r1
 80009ac:	4465      	add	r5, ip
 80009ae:	40ae      	lsls	r6, r5
 80009b0:	431e      	orrs	r6, r3
 80009b2:	0003      	movs	r3, r0
 80009b4:	40ab      	lsls	r3, r5
 80009b6:	1e58      	subs	r0, r3, #1
 80009b8:	4183      	sbcs	r3, r0
 80009ba:	0030      	movs	r0, r6
 80009bc:	4318      	orrs	r0, r3
 80009be:	40cc      	lsrs	r4, r1
 80009c0:	0743      	lsls	r3, r0, #29
 80009c2:	d0c7      	beq.n	8000954 <__aeabi_dmul+0x4a0>
 80009c4:	230f      	movs	r3, #15
 80009c6:	4003      	ands	r3, r0
 80009c8:	2b04      	cmp	r3, #4
 80009ca:	d1bd      	bne.n	8000948 <__aeabi_dmul+0x494>
 80009cc:	e7c2      	b.n	8000954 <__aeabi_dmul+0x4a0>
 80009ce:	0765      	lsls	r5, r4, #29
 80009d0:	0264      	lsls	r4, r4, #9
 80009d2:	0b24      	lsrs	r4, r4, #12
 80009d4:	08c0      	lsrs	r0, r0, #3
 80009d6:	2300      	movs	r3, #0
 80009d8:	4305      	orrs	r5, r0
 80009da:	e5dd      	b.n	8000598 <__aeabi_dmul+0xe4>
 80009dc:	2500      	movs	r5, #0
 80009de:	2302      	movs	r3, #2
 80009e0:	2e0f      	cmp	r6, #15
 80009e2:	d10c      	bne.n	80009fe <__aeabi_dmul+0x54a>
 80009e4:	2480      	movs	r4, #128	; 0x80
 80009e6:	465b      	mov	r3, fp
 80009e8:	0324      	lsls	r4, r4, #12
 80009ea:	4223      	tst	r3, r4
 80009ec:	d00e      	beq.n	8000a0c <__aeabi_dmul+0x558>
 80009ee:	4221      	tst	r1, r4
 80009f0:	d10c      	bne.n	8000a0c <__aeabi_dmul+0x558>
 80009f2:	430c      	orrs	r4, r1
 80009f4:	0324      	lsls	r4, r4, #12
 80009f6:	003a      	movs	r2, r7
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <__aeabi_dmul+0x580>)
 80009fa:	0b24      	lsrs	r4, r4, #12
 80009fc:	e5cc      	b.n	8000598 <__aeabi_dmul+0xe4>
 80009fe:	2e0b      	cmp	r6, #11
 8000a00:	d000      	beq.n	8000a04 <__aeabi_dmul+0x550>
 8000a02:	e5a2      	b.n	800054a <__aeabi_dmul+0x96>
 8000a04:	468b      	mov	fp, r1
 8000a06:	46aa      	mov	sl, r5
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	e5f7      	b.n	80005fc <__aeabi_dmul+0x148>
 8000a0c:	2480      	movs	r4, #128	; 0x80
 8000a0e:	465b      	mov	r3, fp
 8000a10:	0324      	lsls	r4, r4, #12
 8000a12:	431c      	orrs	r4, r3
 8000a14:	0324      	lsls	r4, r4, #12
 8000a16:	4642      	mov	r2, r8
 8000a18:	4655      	mov	r5, sl
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <__aeabi_dmul+0x580>)
 8000a1c:	0b24      	lsrs	r4, r4, #12
 8000a1e:	e5bb      	b.n	8000598 <__aeabi_dmul+0xe4>
 8000a20:	464d      	mov	r5, r9
 8000a22:	0021      	movs	r1, r4
 8000a24:	2303      	movs	r3, #3
 8000a26:	e7db      	b.n	80009e0 <__aeabi_dmul+0x52c>
 8000a28:	fffffc0d 	.word	0xfffffc0d
 8000a2c:	0000043e 	.word	0x0000043e
 8000a30:	0000041e 	.word	0x0000041e
 8000a34:	000007ff 	.word	0x000007ff

08000a38 <__aeabi_dsub>:
 8000a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a3a:	4657      	mov	r7, sl
 8000a3c:	464e      	mov	r6, r9
 8000a3e:	4645      	mov	r5, r8
 8000a40:	46de      	mov	lr, fp
 8000a42:	b5e0      	push	{r5, r6, r7, lr}
 8000a44:	000d      	movs	r5, r1
 8000a46:	0004      	movs	r4, r0
 8000a48:	0019      	movs	r1, r3
 8000a4a:	0010      	movs	r0, r2
 8000a4c:	032b      	lsls	r3, r5, #12
 8000a4e:	0a5b      	lsrs	r3, r3, #9
 8000a50:	0f62      	lsrs	r2, r4, #29
 8000a52:	431a      	orrs	r2, r3
 8000a54:	00e3      	lsls	r3, r4, #3
 8000a56:	030c      	lsls	r4, r1, #12
 8000a58:	0a64      	lsrs	r4, r4, #9
 8000a5a:	0f47      	lsrs	r7, r0, #29
 8000a5c:	4327      	orrs	r7, r4
 8000a5e:	4cd0      	ldr	r4, [pc, #832]	; (8000da0 <__aeabi_dsub+0x368>)
 8000a60:	006e      	lsls	r6, r5, #1
 8000a62:	4691      	mov	r9, r2
 8000a64:	b083      	sub	sp, #12
 8000a66:	004a      	lsls	r2, r1, #1
 8000a68:	00c0      	lsls	r0, r0, #3
 8000a6a:	4698      	mov	r8, r3
 8000a6c:	46a2      	mov	sl, r4
 8000a6e:	0d76      	lsrs	r6, r6, #21
 8000a70:	0fed      	lsrs	r5, r5, #31
 8000a72:	0d52      	lsrs	r2, r2, #21
 8000a74:	0fc9      	lsrs	r1, r1, #31
 8000a76:	9001      	str	r0, [sp, #4]
 8000a78:	42a2      	cmp	r2, r4
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_dsub+0x46>
 8000a7c:	e0b9      	b.n	8000bf2 <__aeabi_dsub+0x1ba>
 8000a7e:	2401      	movs	r4, #1
 8000a80:	4061      	eors	r1, r4
 8000a82:	468b      	mov	fp, r1
 8000a84:	428d      	cmp	r5, r1
 8000a86:	d100      	bne.n	8000a8a <__aeabi_dsub+0x52>
 8000a88:	e08d      	b.n	8000ba6 <__aeabi_dsub+0x16e>
 8000a8a:	1ab4      	subs	r4, r6, r2
 8000a8c:	46a4      	mov	ip, r4
 8000a8e:	2c00      	cmp	r4, #0
 8000a90:	dc00      	bgt.n	8000a94 <__aeabi_dsub+0x5c>
 8000a92:	e0b7      	b.n	8000c04 <__aeabi_dsub+0x1cc>
 8000a94:	2a00      	cmp	r2, #0
 8000a96:	d100      	bne.n	8000a9a <__aeabi_dsub+0x62>
 8000a98:	e0cb      	b.n	8000c32 <__aeabi_dsub+0x1fa>
 8000a9a:	4ac1      	ldr	r2, [pc, #772]	; (8000da0 <__aeabi_dsub+0x368>)
 8000a9c:	4296      	cmp	r6, r2
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_dsub+0x6a>
 8000aa0:	e186      	b.n	8000db0 <__aeabi_dsub+0x378>
 8000aa2:	2280      	movs	r2, #128	; 0x80
 8000aa4:	0412      	lsls	r2, r2, #16
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	4662      	mov	r2, ip
 8000aaa:	2a38      	cmp	r2, #56	; 0x38
 8000aac:	dd00      	ble.n	8000ab0 <__aeabi_dsub+0x78>
 8000aae:	e1a4      	b.n	8000dfa <__aeabi_dsub+0x3c2>
 8000ab0:	2a1f      	cmp	r2, #31
 8000ab2:	dd00      	ble.n	8000ab6 <__aeabi_dsub+0x7e>
 8000ab4:	e21d      	b.n	8000ef2 <__aeabi_dsub+0x4ba>
 8000ab6:	4661      	mov	r1, ip
 8000ab8:	2220      	movs	r2, #32
 8000aba:	003c      	movs	r4, r7
 8000abc:	1a52      	subs	r2, r2, r1
 8000abe:	0001      	movs	r1, r0
 8000ac0:	4090      	lsls	r0, r2
 8000ac2:	4094      	lsls	r4, r2
 8000ac4:	1e42      	subs	r2, r0, #1
 8000ac6:	4190      	sbcs	r0, r2
 8000ac8:	4662      	mov	r2, ip
 8000aca:	46a0      	mov	r8, r4
 8000acc:	4664      	mov	r4, ip
 8000ace:	40d7      	lsrs	r7, r2
 8000ad0:	464a      	mov	r2, r9
 8000ad2:	40e1      	lsrs	r1, r4
 8000ad4:	4644      	mov	r4, r8
 8000ad6:	1bd2      	subs	r2, r2, r7
 8000ad8:	4691      	mov	r9, r2
 8000ada:	430c      	orrs	r4, r1
 8000adc:	4304      	orrs	r4, r0
 8000ade:	1b1c      	subs	r4, r3, r4
 8000ae0:	42a3      	cmp	r3, r4
 8000ae2:	4192      	sbcs	r2, r2
 8000ae4:	464b      	mov	r3, r9
 8000ae6:	4252      	negs	r2, r2
 8000ae8:	1a9b      	subs	r3, r3, r2
 8000aea:	469a      	mov	sl, r3
 8000aec:	4653      	mov	r3, sl
 8000aee:	021b      	lsls	r3, r3, #8
 8000af0:	d400      	bmi.n	8000af4 <__aeabi_dsub+0xbc>
 8000af2:	e12b      	b.n	8000d4c <__aeabi_dsub+0x314>
 8000af4:	4653      	mov	r3, sl
 8000af6:	025a      	lsls	r2, r3, #9
 8000af8:	0a53      	lsrs	r3, r2, #9
 8000afa:	469a      	mov	sl, r3
 8000afc:	4653      	mov	r3, sl
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d100      	bne.n	8000b04 <__aeabi_dsub+0xcc>
 8000b02:	e166      	b.n	8000dd2 <__aeabi_dsub+0x39a>
 8000b04:	4650      	mov	r0, sl
 8000b06:	f000 fbb3 	bl	8001270 <__clzsi2>
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	3b08      	subs	r3, #8
 8000b0e:	2220      	movs	r2, #32
 8000b10:	0020      	movs	r0, r4
 8000b12:	1ad2      	subs	r2, r2, r3
 8000b14:	4651      	mov	r1, sl
 8000b16:	40d0      	lsrs	r0, r2
 8000b18:	4099      	lsls	r1, r3
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	409c      	lsls	r4, r3
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	429e      	cmp	r6, r3
 8000b22:	dd00      	ble.n	8000b26 <__aeabi_dsub+0xee>
 8000b24:	e164      	b.n	8000df0 <__aeabi_dsub+0x3b8>
 8000b26:	1b9b      	subs	r3, r3, r6
 8000b28:	1c59      	adds	r1, r3, #1
 8000b2a:	291f      	cmp	r1, #31
 8000b2c:	dd00      	ble.n	8000b30 <__aeabi_dsub+0xf8>
 8000b2e:	e0fe      	b.n	8000d2e <__aeabi_dsub+0x2f6>
 8000b30:	2320      	movs	r3, #32
 8000b32:	0010      	movs	r0, r2
 8000b34:	0026      	movs	r6, r4
 8000b36:	1a5b      	subs	r3, r3, r1
 8000b38:	409c      	lsls	r4, r3
 8000b3a:	4098      	lsls	r0, r3
 8000b3c:	40ce      	lsrs	r6, r1
 8000b3e:	40ca      	lsrs	r2, r1
 8000b40:	1e63      	subs	r3, r4, #1
 8000b42:	419c      	sbcs	r4, r3
 8000b44:	4330      	orrs	r0, r6
 8000b46:	4692      	mov	sl, r2
 8000b48:	2600      	movs	r6, #0
 8000b4a:	4304      	orrs	r4, r0
 8000b4c:	0763      	lsls	r3, r4, #29
 8000b4e:	d009      	beq.n	8000b64 <__aeabi_dsub+0x12c>
 8000b50:	230f      	movs	r3, #15
 8000b52:	4023      	ands	r3, r4
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	d005      	beq.n	8000b64 <__aeabi_dsub+0x12c>
 8000b58:	1d23      	adds	r3, r4, #4
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	41a4      	sbcs	r4, r4
 8000b5e:	4264      	negs	r4, r4
 8000b60:	44a2      	add	sl, r4
 8000b62:	001c      	movs	r4, r3
 8000b64:	4653      	mov	r3, sl
 8000b66:	021b      	lsls	r3, r3, #8
 8000b68:	d400      	bmi.n	8000b6c <__aeabi_dsub+0x134>
 8000b6a:	e0f2      	b.n	8000d52 <__aeabi_dsub+0x31a>
 8000b6c:	4b8c      	ldr	r3, [pc, #560]	; (8000da0 <__aeabi_dsub+0x368>)
 8000b6e:	3601      	adds	r6, #1
 8000b70:	429e      	cmp	r6, r3
 8000b72:	d100      	bne.n	8000b76 <__aeabi_dsub+0x13e>
 8000b74:	e10f      	b.n	8000d96 <__aeabi_dsub+0x35e>
 8000b76:	4653      	mov	r3, sl
 8000b78:	498a      	ldr	r1, [pc, #552]	; (8000da4 <__aeabi_dsub+0x36c>)
 8000b7a:	08e4      	lsrs	r4, r4, #3
 8000b7c:	400b      	ands	r3, r1
 8000b7e:	0019      	movs	r1, r3
 8000b80:	075b      	lsls	r3, r3, #29
 8000b82:	4323      	orrs	r3, r4
 8000b84:	0572      	lsls	r2, r6, #21
 8000b86:	024c      	lsls	r4, r1, #9
 8000b88:	0b24      	lsrs	r4, r4, #12
 8000b8a:	0d52      	lsrs	r2, r2, #21
 8000b8c:	0512      	lsls	r2, r2, #20
 8000b8e:	4322      	orrs	r2, r4
 8000b90:	07ed      	lsls	r5, r5, #31
 8000b92:	432a      	orrs	r2, r5
 8000b94:	0018      	movs	r0, r3
 8000b96:	0011      	movs	r1, r2
 8000b98:	b003      	add	sp, #12
 8000b9a:	bcf0      	pop	{r4, r5, r6, r7}
 8000b9c:	46bb      	mov	fp, r7
 8000b9e:	46b2      	mov	sl, r6
 8000ba0:	46a9      	mov	r9, r5
 8000ba2:	46a0      	mov	r8, r4
 8000ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ba6:	1ab4      	subs	r4, r6, r2
 8000ba8:	46a4      	mov	ip, r4
 8000baa:	2c00      	cmp	r4, #0
 8000bac:	dd59      	ble.n	8000c62 <__aeabi_dsub+0x22a>
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_dsub+0x17c>
 8000bb2:	e0b0      	b.n	8000d16 <__aeabi_dsub+0x2de>
 8000bb4:	4556      	cmp	r6, sl
 8000bb6:	d100      	bne.n	8000bba <__aeabi_dsub+0x182>
 8000bb8:	e0fa      	b.n	8000db0 <__aeabi_dsub+0x378>
 8000bba:	2280      	movs	r2, #128	; 0x80
 8000bbc:	0412      	lsls	r2, r2, #16
 8000bbe:	4317      	orrs	r7, r2
 8000bc0:	4662      	mov	r2, ip
 8000bc2:	2a38      	cmp	r2, #56	; 0x38
 8000bc4:	dd00      	ble.n	8000bc8 <__aeabi_dsub+0x190>
 8000bc6:	e0d4      	b.n	8000d72 <__aeabi_dsub+0x33a>
 8000bc8:	2a1f      	cmp	r2, #31
 8000bca:	dc00      	bgt.n	8000bce <__aeabi_dsub+0x196>
 8000bcc:	e1c0      	b.n	8000f50 <__aeabi_dsub+0x518>
 8000bce:	0039      	movs	r1, r7
 8000bd0:	3a20      	subs	r2, #32
 8000bd2:	40d1      	lsrs	r1, r2
 8000bd4:	4662      	mov	r2, ip
 8000bd6:	2a20      	cmp	r2, #32
 8000bd8:	d006      	beq.n	8000be8 <__aeabi_dsub+0x1b0>
 8000bda:	4664      	mov	r4, ip
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	1b12      	subs	r2, r2, r4
 8000be0:	003c      	movs	r4, r7
 8000be2:	4094      	lsls	r4, r2
 8000be4:	4304      	orrs	r4, r0
 8000be6:	9401      	str	r4, [sp, #4]
 8000be8:	9c01      	ldr	r4, [sp, #4]
 8000bea:	1e62      	subs	r2, r4, #1
 8000bec:	4194      	sbcs	r4, r2
 8000bee:	430c      	orrs	r4, r1
 8000bf0:	e0c3      	b.n	8000d7a <__aeabi_dsub+0x342>
 8000bf2:	003c      	movs	r4, r7
 8000bf4:	4304      	orrs	r4, r0
 8000bf6:	d02b      	beq.n	8000c50 <__aeabi_dsub+0x218>
 8000bf8:	468b      	mov	fp, r1
 8000bfa:	428d      	cmp	r5, r1
 8000bfc:	d02e      	beq.n	8000c5c <__aeabi_dsub+0x224>
 8000bfe:	4c6a      	ldr	r4, [pc, #424]	; (8000da8 <__aeabi_dsub+0x370>)
 8000c00:	46a4      	mov	ip, r4
 8000c02:	44b4      	add	ip, r6
 8000c04:	4664      	mov	r4, ip
 8000c06:	2c00      	cmp	r4, #0
 8000c08:	d05f      	beq.n	8000cca <__aeabi_dsub+0x292>
 8000c0a:	1b94      	subs	r4, r2, r6
 8000c0c:	46a4      	mov	ip, r4
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d000      	beq.n	8000c14 <__aeabi_dsub+0x1dc>
 8000c12:	e120      	b.n	8000e56 <__aeabi_dsub+0x41e>
 8000c14:	464c      	mov	r4, r9
 8000c16:	431c      	orrs	r4, r3
 8000c18:	d100      	bne.n	8000c1c <__aeabi_dsub+0x1e4>
 8000c1a:	e1c7      	b.n	8000fac <__aeabi_dsub+0x574>
 8000c1c:	4661      	mov	r1, ip
 8000c1e:	1e4c      	subs	r4, r1, #1
 8000c20:	2901      	cmp	r1, #1
 8000c22:	d100      	bne.n	8000c26 <__aeabi_dsub+0x1ee>
 8000c24:	e223      	b.n	800106e <__aeabi_dsub+0x636>
 8000c26:	4d5e      	ldr	r5, [pc, #376]	; (8000da0 <__aeabi_dsub+0x368>)
 8000c28:	45ac      	cmp	ip, r5
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_dsub+0x1f6>
 8000c2c:	e1d8      	b.n	8000fe0 <__aeabi_dsub+0x5a8>
 8000c2e:	46a4      	mov	ip, r4
 8000c30:	e11a      	b.n	8000e68 <__aeabi_dsub+0x430>
 8000c32:	003a      	movs	r2, r7
 8000c34:	4302      	orrs	r2, r0
 8000c36:	d100      	bne.n	8000c3a <__aeabi_dsub+0x202>
 8000c38:	e0e4      	b.n	8000e04 <__aeabi_dsub+0x3cc>
 8000c3a:	0022      	movs	r2, r4
 8000c3c:	3a01      	subs	r2, #1
 8000c3e:	2c01      	cmp	r4, #1
 8000c40:	d100      	bne.n	8000c44 <__aeabi_dsub+0x20c>
 8000c42:	e1c3      	b.n	8000fcc <__aeabi_dsub+0x594>
 8000c44:	4956      	ldr	r1, [pc, #344]	; (8000da0 <__aeabi_dsub+0x368>)
 8000c46:	428c      	cmp	r4, r1
 8000c48:	d100      	bne.n	8000c4c <__aeabi_dsub+0x214>
 8000c4a:	e0b1      	b.n	8000db0 <__aeabi_dsub+0x378>
 8000c4c:	4694      	mov	ip, r2
 8000c4e:	e72b      	b.n	8000aa8 <__aeabi_dsub+0x70>
 8000c50:	2401      	movs	r4, #1
 8000c52:	4061      	eors	r1, r4
 8000c54:	468b      	mov	fp, r1
 8000c56:	428d      	cmp	r5, r1
 8000c58:	d000      	beq.n	8000c5c <__aeabi_dsub+0x224>
 8000c5a:	e716      	b.n	8000a8a <__aeabi_dsub+0x52>
 8000c5c:	4952      	ldr	r1, [pc, #328]	; (8000da8 <__aeabi_dsub+0x370>)
 8000c5e:	468c      	mov	ip, r1
 8000c60:	44b4      	add	ip, r6
 8000c62:	4664      	mov	r4, ip
 8000c64:	2c00      	cmp	r4, #0
 8000c66:	d100      	bne.n	8000c6a <__aeabi_dsub+0x232>
 8000c68:	e0d3      	b.n	8000e12 <__aeabi_dsub+0x3da>
 8000c6a:	1b91      	subs	r1, r2, r6
 8000c6c:	468c      	mov	ip, r1
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d100      	bne.n	8000c74 <__aeabi_dsub+0x23c>
 8000c72:	e15e      	b.n	8000f32 <__aeabi_dsub+0x4fa>
 8000c74:	494a      	ldr	r1, [pc, #296]	; (8000da0 <__aeabi_dsub+0x368>)
 8000c76:	428a      	cmp	r2, r1
 8000c78:	d100      	bne.n	8000c7c <__aeabi_dsub+0x244>
 8000c7a:	e1be      	b.n	8000ffa <__aeabi_dsub+0x5c2>
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	464c      	mov	r4, r9
 8000c80:	0409      	lsls	r1, r1, #16
 8000c82:	430c      	orrs	r4, r1
 8000c84:	46a1      	mov	r9, r4
 8000c86:	4661      	mov	r1, ip
 8000c88:	2938      	cmp	r1, #56	; 0x38
 8000c8a:	dd00      	ble.n	8000c8e <__aeabi_dsub+0x256>
 8000c8c:	e1ba      	b.n	8001004 <__aeabi_dsub+0x5cc>
 8000c8e:	291f      	cmp	r1, #31
 8000c90:	dd00      	ble.n	8000c94 <__aeabi_dsub+0x25c>
 8000c92:	e227      	b.n	80010e4 <__aeabi_dsub+0x6ac>
 8000c94:	2420      	movs	r4, #32
 8000c96:	1a64      	subs	r4, r4, r1
 8000c98:	4649      	mov	r1, r9
 8000c9a:	40a1      	lsls	r1, r4
 8000c9c:	001e      	movs	r6, r3
 8000c9e:	4688      	mov	r8, r1
 8000ca0:	4661      	mov	r1, ip
 8000ca2:	40a3      	lsls	r3, r4
 8000ca4:	40ce      	lsrs	r6, r1
 8000ca6:	4641      	mov	r1, r8
 8000ca8:	1e5c      	subs	r4, r3, #1
 8000caa:	41a3      	sbcs	r3, r4
 8000cac:	4331      	orrs	r1, r6
 8000cae:	4319      	orrs	r1, r3
 8000cb0:	000c      	movs	r4, r1
 8000cb2:	4663      	mov	r3, ip
 8000cb4:	4649      	mov	r1, r9
 8000cb6:	40d9      	lsrs	r1, r3
 8000cb8:	187f      	adds	r7, r7, r1
 8000cba:	1824      	adds	r4, r4, r0
 8000cbc:	4284      	cmp	r4, r0
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	425b      	negs	r3, r3
 8000cc2:	469a      	mov	sl, r3
 8000cc4:	0016      	movs	r6, r2
 8000cc6:	44ba      	add	sl, r7
 8000cc8:	e05d      	b.n	8000d86 <__aeabi_dsub+0x34e>
 8000cca:	4c38      	ldr	r4, [pc, #224]	; (8000dac <__aeabi_dsub+0x374>)
 8000ccc:	1c72      	adds	r2, r6, #1
 8000cce:	4222      	tst	r2, r4
 8000cd0:	d000      	beq.n	8000cd4 <__aeabi_dsub+0x29c>
 8000cd2:	e0df      	b.n	8000e94 <__aeabi_dsub+0x45c>
 8000cd4:	464a      	mov	r2, r9
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	d000      	beq.n	8000cde <__aeabi_dsub+0x2a6>
 8000cdc:	e15c      	b.n	8000f98 <__aeabi_dsub+0x560>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_dsub+0x2ac>
 8000ce2:	e1cf      	b.n	8001084 <__aeabi_dsub+0x64c>
 8000ce4:	003a      	movs	r2, r7
 8000ce6:	4302      	orrs	r2, r0
 8000ce8:	d100      	bne.n	8000cec <__aeabi_dsub+0x2b4>
 8000cea:	e17f      	b.n	8000fec <__aeabi_dsub+0x5b4>
 8000cec:	1a1c      	subs	r4, r3, r0
 8000cee:	464a      	mov	r2, r9
 8000cf0:	42a3      	cmp	r3, r4
 8000cf2:	4189      	sbcs	r1, r1
 8000cf4:	1bd2      	subs	r2, r2, r7
 8000cf6:	4249      	negs	r1, r1
 8000cf8:	1a52      	subs	r2, r2, r1
 8000cfa:	4692      	mov	sl, r2
 8000cfc:	0212      	lsls	r2, r2, #8
 8000cfe:	d400      	bmi.n	8000d02 <__aeabi_dsub+0x2ca>
 8000d00:	e20a      	b.n	8001118 <__aeabi_dsub+0x6e0>
 8000d02:	1ac4      	subs	r4, r0, r3
 8000d04:	42a0      	cmp	r0, r4
 8000d06:	4180      	sbcs	r0, r0
 8000d08:	464b      	mov	r3, r9
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	1aff      	subs	r7, r7, r3
 8000d0e:	1a3b      	subs	r3, r7, r0
 8000d10:	469a      	mov	sl, r3
 8000d12:	465d      	mov	r5, fp
 8000d14:	e71a      	b.n	8000b4c <__aeabi_dsub+0x114>
 8000d16:	003a      	movs	r2, r7
 8000d18:	4302      	orrs	r2, r0
 8000d1a:	d073      	beq.n	8000e04 <__aeabi_dsub+0x3cc>
 8000d1c:	0022      	movs	r2, r4
 8000d1e:	3a01      	subs	r2, #1
 8000d20:	2c01      	cmp	r4, #1
 8000d22:	d100      	bne.n	8000d26 <__aeabi_dsub+0x2ee>
 8000d24:	e0cb      	b.n	8000ebe <__aeabi_dsub+0x486>
 8000d26:	4554      	cmp	r4, sl
 8000d28:	d042      	beq.n	8000db0 <__aeabi_dsub+0x378>
 8000d2a:	4694      	mov	ip, r2
 8000d2c:	e748      	b.n	8000bc0 <__aeabi_dsub+0x188>
 8000d2e:	0010      	movs	r0, r2
 8000d30:	3b1f      	subs	r3, #31
 8000d32:	40d8      	lsrs	r0, r3
 8000d34:	2920      	cmp	r1, #32
 8000d36:	d003      	beq.n	8000d40 <__aeabi_dsub+0x308>
 8000d38:	2340      	movs	r3, #64	; 0x40
 8000d3a:	1a5b      	subs	r3, r3, r1
 8000d3c:	409a      	lsls	r2, r3
 8000d3e:	4314      	orrs	r4, r2
 8000d40:	1e63      	subs	r3, r4, #1
 8000d42:	419c      	sbcs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	2600      	movs	r6, #0
 8000d48:	469a      	mov	sl, r3
 8000d4a:	4304      	orrs	r4, r0
 8000d4c:	0763      	lsls	r3, r4, #29
 8000d4e:	d000      	beq.n	8000d52 <__aeabi_dsub+0x31a>
 8000d50:	e6fe      	b.n	8000b50 <__aeabi_dsub+0x118>
 8000d52:	4652      	mov	r2, sl
 8000d54:	08e3      	lsrs	r3, r4, #3
 8000d56:	0752      	lsls	r2, r2, #29
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	4652      	mov	r2, sl
 8000d5c:	46b4      	mov	ip, r6
 8000d5e:	08d2      	lsrs	r2, r2, #3
 8000d60:	490f      	ldr	r1, [pc, #60]	; (8000da0 <__aeabi_dsub+0x368>)
 8000d62:	458c      	cmp	ip, r1
 8000d64:	d02a      	beq.n	8000dbc <__aeabi_dsub+0x384>
 8000d66:	0312      	lsls	r2, r2, #12
 8000d68:	0b14      	lsrs	r4, r2, #12
 8000d6a:	4662      	mov	r2, ip
 8000d6c:	0552      	lsls	r2, r2, #21
 8000d6e:	0d52      	lsrs	r2, r2, #21
 8000d70:	e70c      	b.n	8000b8c <__aeabi_dsub+0x154>
 8000d72:	003c      	movs	r4, r7
 8000d74:	4304      	orrs	r4, r0
 8000d76:	1e62      	subs	r2, r4, #1
 8000d78:	4194      	sbcs	r4, r2
 8000d7a:	18e4      	adds	r4, r4, r3
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	4192      	sbcs	r2, r2
 8000d80:	4252      	negs	r2, r2
 8000d82:	444a      	add	r2, r9
 8000d84:	4692      	mov	sl, r2
 8000d86:	4653      	mov	r3, sl
 8000d88:	021b      	lsls	r3, r3, #8
 8000d8a:	d5df      	bpl.n	8000d4c <__aeabi_dsub+0x314>
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <__aeabi_dsub+0x368>)
 8000d8e:	3601      	adds	r6, #1
 8000d90:	429e      	cmp	r6, r3
 8000d92:	d000      	beq.n	8000d96 <__aeabi_dsub+0x35e>
 8000d94:	e0a0      	b.n	8000ed8 <__aeabi_dsub+0x4a0>
 8000d96:	0032      	movs	r2, r6
 8000d98:	2400      	movs	r4, #0
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e6f6      	b.n	8000b8c <__aeabi_dsub+0x154>
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	000007ff 	.word	0x000007ff
 8000da4:	ff7fffff 	.word	0xff7fffff
 8000da8:	fffff801 	.word	0xfffff801
 8000dac:	000007fe 	.word	0x000007fe
 8000db0:	08db      	lsrs	r3, r3, #3
 8000db2:	464a      	mov	r2, r9
 8000db4:	0752      	lsls	r2, r2, #29
 8000db6:	4313      	orrs	r3, r2
 8000db8:	464a      	mov	r2, r9
 8000dba:	08d2      	lsrs	r2, r2, #3
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	4311      	orrs	r1, r2
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_dsub+0x38c>
 8000dc2:	e1b5      	b.n	8001130 <__aeabi_dsub+0x6f8>
 8000dc4:	2480      	movs	r4, #128	; 0x80
 8000dc6:	0324      	lsls	r4, r4, #12
 8000dc8:	4314      	orrs	r4, r2
 8000dca:	0324      	lsls	r4, r4, #12
 8000dcc:	4ad5      	ldr	r2, [pc, #852]	; (8001124 <__aeabi_dsub+0x6ec>)
 8000dce:	0b24      	lsrs	r4, r4, #12
 8000dd0:	e6dc      	b.n	8000b8c <__aeabi_dsub+0x154>
 8000dd2:	0020      	movs	r0, r4
 8000dd4:	f000 fa4c 	bl	8001270 <__clzsi2>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	3318      	adds	r3, #24
 8000ddc:	2b1f      	cmp	r3, #31
 8000dde:	dc00      	bgt.n	8000de2 <__aeabi_dsub+0x3aa>
 8000de0:	e695      	b.n	8000b0e <__aeabi_dsub+0xd6>
 8000de2:	0022      	movs	r2, r4
 8000de4:	3808      	subs	r0, #8
 8000de6:	4082      	lsls	r2, r0
 8000de8:	2400      	movs	r4, #0
 8000dea:	429e      	cmp	r6, r3
 8000dec:	dc00      	bgt.n	8000df0 <__aeabi_dsub+0x3b8>
 8000dee:	e69a      	b.n	8000b26 <__aeabi_dsub+0xee>
 8000df0:	1af6      	subs	r6, r6, r3
 8000df2:	4bcd      	ldr	r3, [pc, #820]	; (8001128 <__aeabi_dsub+0x6f0>)
 8000df4:	401a      	ands	r2, r3
 8000df6:	4692      	mov	sl, r2
 8000df8:	e6a8      	b.n	8000b4c <__aeabi_dsub+0x114>
 8000dfa:	003c      	movs	r4, r7
 8000dfc:	4304      	orrs	r4, r0
 8000dfe:	1e62      	subs	r2, r4, #1
 8000e00:	4194      	sbcs	r4, r2
 8000e02:	e66c      	b.n	8000ade <__aeabi_dsub+0xa6>
 8000e04:	464a      	mov	r2, r9
 8000e06:	08db      	lsrs	r3, r3, #3
 8000e08:	0752      	lsls	r2, r2, #29
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	464a      	mov	r2, r9
 8000e0e:	08d2      	lsrs	r2, r2, #3
 8000e10:	e7a6      	b.n	8000d60 <__aeabi_dsub+0x328>
 8000e12:	4cc6      	ldr	r4, [pc, #792]	; (800112c <__aeabi_dsub+0x6f4>)
 8000e14:	1c72      	adds	r2, r6, #1
 8000e16:	4222      	tst	r2, r4
 8000e18:	d000      	beq.n	8000e1c <__aeabi_dsub+0x3e4>
 8000e1a:	e0ac      	b.n	8000f76 <__aeabi_dsub+0x53e>
 8000e1c:	464a      	mov	r2, r9
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	2e00      	cmp	r6, #0
 8000e22:	d000      	beq.n	8000e26 <__aeabi_dsub+0x3ee>
 8000e24:	e105      	b.n	8001032 <__aeabi_dsub+0x5fa>
 8000e26:	2a00      	cmp	r2, #0
 8000e28:	d100      	bne.n	8000e2c <__aeabi_dsub+0x3f4>
 8000e2a:	e156      	b.n	80010da <__aeabi_dsub+0x6a2>
 8000e2c:	003a      	movs	r2, r7
 8000e2e:	4302      	orrs	r2, r0
 8000e30:	d100      	bne.n	8000e34 <__aeabi_dsub+0x3fc>
 8000e32:	e0db      	b.n	8000fec <__aeabi_dsub+0x5b4>
 8000e34:	181c      	adds	r4, r3, r0
 8000e36:	429c      	cmp	r4, r3
 8000e38:	419b      	sbcs	r3, r3
 8000e3a:	444f      	add	r7, r9
 8000e3c:	46ba      	mov	sl, r7
 8000e3e:	425b      	negs	r3, r3
 8000e40:	449a      	add	sl, r3
 8000e42:	4653      	mov	r3, sl
 8000e44:	021b      	lsls	r3, r3, #8
 8000e46:	d400      	bmi.n	8000e4a <__aeabi_dsub+0x412>
 8000e48:	e780      	b.n	8000d4c <__aeabi_dsub+0x314>
 8000e4a:	4652      	mov	r2, sl
 8000e4c:	4bb6      	ldr	r3, [pc, #728]	; (8001128 <__aeabi_dsub+0x6f0>)
 8000e4e:	2601      	movs	r6, #1
 8000e50:	401a      	ands	r2, r3
 8000e52:	4692      	mov	sl, r2
 8000e54:	e77a      	b.n	8000d4c <__aeabi_dsub+0x314>
 8000e56:	4cb3      	ldr	r4, [pc, #716]	; (8001124 <__aeabi_dsub+0x6ec>)
 8000e58:	42a2      	cmp	r2, r4
 8000e5a:	d100      	bne.n	8000e5e <__aeabi_dsub+0x426>
 8000e5c:	e0c0      	b.n	8000fe0 <__aeabi_dsub+0x5a8>
 8000e5e:	2480      	movs	r4, #128	; 0x80
 8000e60:	464d      	mov	r5, r9
 8000e62:	0424      	lsls	r4, r4, #16
 8000e64:	4325      	orrs	r5, r4
 8000e66:	46a9      	mov	r9, r5
 8000e68:	4664      	mov	r4, ip
 8000e6a:	2c38      	cmp	r4, #56	; 0x38
 8000e6c:	dc53      	bgt.n	8000f16 <__aeabi_dsub+0x4de>
 8000e6e:	4661      	mov	r1, ip
 8000e70:	2c1f      	cmp	r4, #31
 8000e72:	dd00      	ble.n	8000e76 <__aeabi_dsub+0x43e>
 8000e74:	e0cd      	b.n	8001012 <__aeabi_dsub+0x5da>
 8000e76:	2520      	movs	r5, #32
 8000e78:	001e      	movs	r6, r3
 8000e7a:	1b2d      	subs	r5, r5, r4
 8000e7c:	464c      	mov	r4, r9
 8000e7e:	40ab      	lsls	r3, r5
 8000e80:	40ac      	lsls	r4, r5
 8000e82:	40ce      	lsrs	r6, r1
 8000e84:	1e5d      	subs	r5, r3, #1
 8000e86:	41ab      	sbcs	r3, r5
 8000e88:	4334      	orrs	r4, r6
 8000e8a:	4323      	orrs	r3, r4
 8000e8c:	464c      	mov	r4, r9
 8000e8e:	40cc      	lsrs	r4, r1
 8000e90:	1b3f      	subs	r7, r7, r4
 8000e92:	e045      	b.n	8000f20 <__aeabi_dsub+0x4e8>
 8000e94:	464a      	mov	r2, r9
 8000e96:	1a1c      	subs	r4, r3, r0
 8000e98:	1bd1      	subs	r1, r2, r7
 8000e9a:	42a3      	cmp	r3, r4
 8000e9c:	4192      	sbcs	r2, r2
 8000e9e:	4252      	negs	r2, r2
 8000ea0:	4692      	mov	sl, r2
 8000ea2:	000a      	movs	r2, r1
 8000ea4:	4651      	mov	r1, sl
 8000ea6:	1a52      	subs	r2, r2, r1
 8000ea8:	4692      	mov	sl, r2
 8000eaa:	0212      	lsls	r2, r2, #8
 8000eac:	d500      	bpl.n	8000eb0 <__aeabi_dsub+0x478>
 8000eae:	e083      	b.n	8000fb8 <__aeabi_dsub+0x580>
 8000eb0:	4653      	mov	r3, sl
 8000eb2:	4323      	orrs	r3, r4
 8000eb4:	d000      	beq.n	8000eb8 <__aeabi_dsub+0x480>
 8000eb6:	e621      	b.n	8000afc <__aeabi_dsub+0xc4>
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2500      	movs	r5, #0
 8000ebc:	e753      	b.n	8000d66 <__aeabi_dsub+0x32e>
 8000ebe:	181c      	adds	r4, r3, r0
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	419b      	sbcs	r3, r3
 8000ec4:	444f      	add	r7, r9
 8000ec6:	46ba      	mov	sl, r7
 8000ec8:	425b      	negs	r3, r3
 8000eca:	449a      	add	sl, r3
 8000ecc:	4653      	mov	r3, sl
 8000ece:	2601      	movs	r6, #1
 8000ed0:	021b      	lsls	r3, r3, #8
 8000ed2:	d400      	bmi.n	8000ed6 <__aeabi_dsub+0x49e>
 8000ed4:	e73a      	b.n	8000d4c <__aeabi_dsub+0x314>
 8000ed6:	2602      	movs	r6, #2
 8000ed8:	4652      	mov	r2, sl
 8000eda:	4b93      	ldr	r3, [pc, #588]	; (8001128 <__aeabi_dsub+0x6f0>)
 8000edc:	2101      	movs	r1, #1
 8000ede:	401a      	ands	r2, r3
 8000ee0:	0013      	movs	r3, r2
 8000ee2:	4021      	ands	r1, r4
 8000ee4:	0862      	lsrs	r2, r4, #1
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	07dc      	lsls	r4, r3, #31
 8000eea:	085b      	lsrs	r3, r3, #1
 8000eec:	469a      	mov	sl, r3
 8000eee:	4314      	orrs	r4, r2
 8000ef0:	e62c      	b.n	8000b4c <__aeabi_dsub+0x114>
 8000ef2:	0039      	movs	r1, r7
 8000ef4:	3a20      	subs	r2, #32
 8000ef6:	40d1      	lsrs	r1, r2
 8000ef8:	4662      	mov	r2, ip
 8000efa:	2a20      	cmp	r2, #32
 8000efc:	d006      	beq.n	8000f0c <__aeabi_dsub+0x4d4>
 8000efe:	4664      	mov	r4, ip
 8000f00:	2240      	movs	r2, #64	; 0x40
 8000f02:	1b12      	subs	r2, r2, r4
 8000f04:	003c      	movs	r4, r7
 8000f06:	4094      	lsls	r4, r2
 8000f08:	4304      	orrs	r4, r0
 8000f0a:	9401      	str	r4, [sp, #4]
 8000f0c:	9c01      	ldr	r4, [sp, #4]
 8000f0e:	1e62      	subs	r2, r4, #1
 8000f10:	4194      	sbcs	r4, r2
 8000f12:	430c      	orrs	r4, r1
 8000f14:	e5e3      	b.n	8000ade <__aeabi_dsub+0xa6>
 8000f16:	4649      	mov	r1, r9
 8000f18:	4319      	orrs	r1, r3
 8000f1a:	000b      	movs	r3, r1
 8000f1c:	1e5c      	subs	r4, r3, #1
 8000f1e:	41a3      	sbcs	r3, r4
 8000f20:	1ac4      	subs	r4, r0, r3
 8000f22:	42a0      	cmp	r0, r4
 8000f24:	419b      	sbcs	r3, r3
 8000f26:	425b      	negs	r3, r3
 8000f28:	1afb      	subs	r3, r7, r3
 8000f2a:	469a      	mov	sl, r3
 8000f2c:	465d      	mov	r5, fp
 8000f2e:	0016      	movs	r6, r2
 8000f30:	e5dc      	b.n	8000aec <__aeabi_dsub+0xb4>
 8000f32:	4649      	mov	r1, r9
 8000f34:	4319      	orrs	r1, r3
 8000f36:	d100      	bne.n	8000f3a <__aeabi_dsub+0x502>
 8000f38:	e0ae      	b.n	8001098 <__aeabi_dsub+0x660>
 8000f3a:	4661      	mov	r1, ip
 8000f3c:	4664      	mov	r4, ip
 8000f3e:	3901      	subs	r1, #1
 8000f40:	2c01      	cmp	r4, #1
 8000f42:	d100      	bne.n	8000f46 <__aeabi_dsub+0x50e>
 8000f44:	e0e0      	b.n	8001108 <__aeabi_dsub+0x6d0>
 8000f46:	4c77      	ldr	r4, [pc, #476]	; (8001124 <__aeabi_dsub+0x6ec>)
 8000f48:	45a4      	cmp	ip, r4
 8000f4a:	d056      	beq.n	8000ffa <__aeabi_dsub+0x5c2>
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	e69a      	b.n	8000c86 <__aeabi_dsub+0x24e>
 8000f50:	4661      	mov	r1, ip
 8000f52:	2220      	movs	r2, #32
 8000f54:	003c      	movs	r4, r7
 8000f56:	1a52      	subs	r2, r2, r1
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	0001      	movs	r1, r0
 8000f5c:	4090      	lsls	r0, r2
 8000f5e:	46a0      	mov	r8, r4
 8000f60:	4664      	mov	r4, ip
 8000f62:	1e42      	subs	r2, r0, #1
 8000f64:	4190      	sbcs	r0, r2
 8000f66:	4662      	mov	r2, ip
 8000f68:	40e1      	lsrs	r1, r4
 8000f6a:	4644      	mov	r4, r8
 8000f6c:	40d7      	lsrs	r7, r2
 8000f6e:	430c      	orrs	r4, r1
 8000f70:	4304      	orrs	r4, r0
 8000f72:	44b9      	add	r9, r7
 8000f74:	e701      	b.n	8000d7a <__aeabi_dsub+0x342>
 8000f76:	496b      	ldr	r1, [pc, #428]	; (8001124 <__aeabi_dsub+0x6ec>)
 8000f78:	428a      	cmp	r2, r1
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_dsub+0x546>
 8000f7c:	e70c      	b.n	8000d98 <__aeabi_dsub+0x360>
 8000f7e:	1818      	adds	r0, r3, r0
 8000f80:	4298      	cmp	r0, r3
 8000f82:	419b      	sbcs	r3, r3
 8000f84:	444f      	add	r7, r9
 8000f86:	425b      	negs	r3, r3
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	07dc      	lsls	r4, r3, #31
 8000f8c:	0840      	lsrs	r0, r0, #1
 8000f8e:	085b      	lsrs	r3, r3, #1
 8000f90:	469a      	mov	sl, r3
 8000f92:	0016      	movs	r6, r2
 8000f94:	4304      	orrs	r4, r0
 8000f96:	e6d9      	b.n	8000d4c <__aeabi_dsub+0x314>
 8000f98:	2a00      	cmp	r2, #0
 8000f9a:	d000      	beq.n	8000f9e <__aeabi_dsub+0x566>
 8000f9c:	e081      	b.n	80010a2 <__aeabi_dsub+0x66a>
 8000f9e:	003b      	movs	r3, r7
 8000fa0:	4303      	orrs	r3, r0
 8000fa2:	d11d      	bne.n	8000fe0 <__aeabi_dsub+0x5a8>
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	2500      	movs	r5, #0
 8000fa8:	0312      	lsls	r2, r2, #12
 8000faa:	e70b      	b.n	8000dc4 <__aeabi_dsub+0x38c>
 8000fac:	08c0      	lsrs	r0, r0, #3
 8000fae:	077b      	lsls	r3, r7, #29
 8000fb0:	465d      	mov	r5, fp
 8000fb2:	4303      	orrs	r3, r0
 8000fb4:	08fa      	lsrs	r2, r7, #3
 8000fb6:	e6d3      	b.n	8000d60 <__aeabi_dsub+0x328>
 8000fb8:	1ac4      	subs	r4, r0, r3
 8000fba:	42a0      	cmp	r0, r4
 8000fbc:	4180      	sbcs	r0, r0
 8000fbe:	464b      	mov	r3, r9
 8000fc0:	4240      	negs	r0, r0
 8000fc2:	1aff      	subs	r7, r7, r3
 8000fc4:	1a3b      	subs	r3, r7, r0
 8000fc6:	469a      	mov	sl, r3
 8000fc8:	465d      	mov	r5, fp
 8000fca:	e597      	b.n	8000afc <__aeabi_dsub+0xc4>
 8000fcc:	1a1c      	subs	r4, r3, r0
 8000fce:	464a      	mov	r2, r9
 8000fd0:	42a3      	cmp	r3, r4
 8000fd2:	419b      	sbcs	r3, r3
 8000fd4:	1bd7      	subs	r7, r2, r7
 8000fd6:	425b      	negs	r3, r3
 8000fd8:	1afb      	subs	r3, r7, r3
 8000fda:	469a      	mov	sl, r3
 8000fdc:	2601      	movs	r6, #1
 8000fde:	e585      	b.n	8000aec <__aeabi_dsub+0xb4>
 8000fe0:	08c0      	lsrs	r0, r0, #3
 8000fe2:	077b      	lsls	r3, r7, #29
 8000fe4:	465d      	mov	r5, fp
 8000fe6:	4303      	orrs	r3, r0
 8000fe8:	08fa      	lsrs	r2, r7, #3
 8000fea:	e6e7      	b.n	8000dbc <__aeabi_dsub+0x384>
 8000fec:	464a      	mov	r2, r9
 8000fee:	08db      	lsrs	r3, r3, #3
 8000ff0:	0752      	lsls	r2, r2, #29
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	464a      	mov	r2, r9
 8000ff6:	08d2      	lsrs	r2, r2, #3
 8000ff8:	e6b5      	b.n	8000d66 <__aeabi_dsub+0x32e>
 8000ffa:	08c0      	lsrs	r0, r0, #3
 8000ffc:	077b      	lsls	r3, r7, #29
 8000ffe:	4303      	orrs	r3, r0
 8001000:	08fa      	lsrs	r2, r7, #3
 8001002:	e6db      	b.n	8000dbc <__aeabi_dsub+0x384>
 8001004:	4649      	mov	r1, r9
 8001006:	4319      	orrs	r1, r3
 8001008:	000b      	movs	r3, r1
 800100a:	1e59      	subs	r1, r3, #1
 800100c:	418b      	sbcs	r3, r1
 800100e:	001c      	movs	r4, r3
 8001010:	e653      	b.n	8000cba <__aeabi_dsub+0x282>
 8001012:	464d      	mov	r5, r9
 8001014:	3c20      	subs	r4, #32
 8001016:	40e5      	lsrs	r5, r4
 8001018:	2920      	cmp	r1, #32
 800101a:	d005      	beq.n	8001028 <__aeabi_dsub+0x5f0>
 800101c:	2440      	movs	r4, #64	; 0x40
 800101e:	1a64      	subs	r4, r4, r1
 8001020:	4649      	mov	r1, r9
 8001022:	40a1      	lsls	r1, r4
 8001024:	430b      	orrs	r3, r1
 8001026:	4698      	mov	r8, r3
 8001028:	4643      	mov	r3, r8
 800102a:	1e5c      	subs	r4, r3, #1
 800102c:	41a3      	sbcs	r3, r4
 800102e:	432b      	orrs	r3, r5
 8001030:	e776      	b.n	8000f20 <__aeabi_dsub+0x4e8>
 8001032:	2a00      	cmp	r2, #0
 8001034:	d0e1      	beq.n	8000ffa <__aeabi_dsub+0x5c2>
 8001036:	003a      	movs	r2, r7
 8001038:	08db      	lsrs	r3, r3, #3
 800103a:	4302      	orrs	r2, r0
 800103c:	d100      	bne.n	8001040 <__aeabi_dsub+0x608>
 800103e:	e6b8      	b.n	8000db2 <__aeabi_dsub+0x37a>
 8001040:	464a      	mov	r2, r9
 8001042:	0752      	lsls	r2, r2, #29
 8001044:	2480      	movs	r4, #128	; 0x80
 8001046:	4313      	orrs	r3, r2
 8001048:	464a      	mov	r2, r9
 800104a:	0324      	lsls	r4, r4, #12
 800104c:	08d2      	lsrs	r2, r2, #3
 800104e:	4222      	tst	r2, r4
 8001050:	d007      	beq.n	8001062 <__aeabi_dsub+0x62a>
 8001052:	08fe      	lsrs	r6, r7, #3
 8001054:	4226      	tst	r6, r4
 8001056:	d104      	bne.n	8001062 <__aeabi_dsub+0x62a>
 8001058:	465d      	mov	r5, fp
 800105a:	0032      	movs	r2, r6
 800105c:	08c3      	lsrs	r3, r0, #3
 800105e:	077f      	lsls	r7, r7, #29
 8001060:	433b      	orrs	r3, r7
 8001062:	0f59      	lsrs	r1, r3, #29
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	0749      	lsls	r1, r1, #29
 8001068:	08db      	lsrs	r3, r3, #3
 800106a:	430b      	orrs	r3, r1
 800106c:	e6a6      	b.n	8000dbc <__aeabi_dsub+0x384>
 800106e:	1ac4      	subs	r4, r0, r3
 8001070:	42a0      	cmp	r0, r4
 8001072:	4180      	sbcs	r0, r0
 8001074:	464b      	mov	r3, r9
 8001076:	4240      	negs	r0, r0
 8001078:	1aff      	subs	r7, r7, r3
 800107a:	1a3b      	subs	r3, r7, r0
 800107c:	469a      	mov	sl, r3
 800107e:	465d      	mov	r5, fp
 8001080:	2601      	movs	r6, #1
 8001082:	e533      	b.n	8000aec <__aeabi_dsub+0xb4>
 8001084:	003b      	movs	r3, r7
 8001086:	4303      	orrs	r3, r0
 8001088:	d100      	bne.n	800108c <__aeabi_dsub+0x654>
 800108a:	e715      	b.n	8000eb8 <__aeabi_dsub+0x480>
 800108c:	08c0      	lsrs	r0, r0, #3
 800108e:	077b      	lsls	r3, r7, #29
 8001090:	465d      	mov	r5, fp
 8001092:	4303      	orrs	r3, r0
 8001094:	08fa      	lsrs	r2, r7, #3
 8001096:	e666      	b.n	8000d66 <__aeabi_dsub+0x32e>
 8001098:	08c0      	lsrs	r0, r0, #3
 800109a:	077b      	lsls	r3, r7, #29
 800109c:	4303      	orrs	r3, r0
 800109e:	08fa      	lsrs	r2, r7, #3
 80010a0:	e65e      	b.n	8000d60 <__aeabi_dsub+0x328>
 80010a2:	003a      	movs	r2, r7
 80010a4:	08db      	lsrs	r3, r3, #3
 80010a6:	4302      	orrs	r2, r0
 80010a8:	d100      	bne.n	80010ac <__aeabi_dsub+0x674>
 80010aa:	e682      	b.n	8000db2 <__aeabi_dsub+0x37a>
 80010ac:	464a      	mov	r2, r9
 80010ae:	0752      	lsls	r2, r2, #29
 80010b0:	2480      	movs	r4, #128	; 0x80
 80010b2:	4313      	orrs	r3, r2
 80010b4:	464a      	mov	r2, r9
 80010b6:	0324      	lsls	r4, r4, #12
 80010b8:	08d2      	lsrs	r2, r2, #3
 80010ba:	4222      	tst	r2, r4
 80010bc:	d007      	beq.n	80010ce <__aeabi_dsub+0x696>
 80010be:	08fe      	lsrs	r6, r7, #3
 80010c0:	4226      	tst	r6, r4
 80010c2:	d104      	bne.n	80010ce <__aeabi_dsub+0x696>
 80010c4:	465d      	mov	r5, fp
 80010c6:	0032      	movs	r2, r6
 80010c8:	08c3      	lsrs	r3, r0, #3
 80010ca:	077f      	lsls	r7, r7, #29
 80010cc:	433b      	orrs	r3, r7
 80010ce:	0f59      	lsrs	r1, r3, #29
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	08db      	lsrs	r3, r3, #3
 80010d4:	0749      	lsls	r1, r1, #29
 80010d6:	430b      	orrs	r3, r1
 80010d8:	e670      	b.n	8000dbc <__aeabi_dsub+0x384>
 80010da:	08c0      	lsrs	r0, r0, #3
 80010dc:	077b      	lsls	r3, r7, #29
 80010de:	4303      	orrs	r3, r0
 80010e0:	08fa      	lsrs	r2, r7, #3
 80010e2:	e640      	b.n	8000d66 <__aeabi_dsub+0x32e>
 80010e4:	464c      	mov	r4, r9
 80010e6:	3920      	subs	r1, #32
 80010e8:	40cc      	lsrs	r4, r1
 80010ea:	4661      	mov	r1, ip
 80010ec:	2920      	cmp	r1, #32
 80010ee:	d006      	beq.n	80010fe <__aeabi_dsub+0x6c6>
 80010f0:	4666      	mov	r6, ip
 80010f2:	2140      	movs	r1, #64	; 0x40
 80010f4:	1b89      	subs	r1, r1, r6
 80010f6:	464e      	mov	r6, r9
 80010f8:	408e      	lsls	r6, r1
 80010fa:	4333      	orrs	r3, r6
 80010fc:	4698      	mov	r8, r3
 80010fe:	4643      	mov	r3, r8
 8001100:	1e59      	subs	r1, r3, #1
 8001102:	418b      	sbcs	r3, r1
 8001104:	431c      	orrs	r4, r3
 8001106:	e5d8      	b.n	8000cba <__aeabi_dsub+0x282>
 8001108:	181c      	adds	r4, r3, r0
 800110a:	4284      	cmp	r4, r0
 800110c:	4180      	sbcs	r0, r0
 800110e:	444f      	add	r7, r9
 8001110:	46ba      	mov	sl, r7
 8001112:	4240      	negs	r0, r0
 8001114:	4482      	add	sl, r0
 8001116:	e6d9      	b.n	8000ecc <__aeabi_dsub+0x494>
 8001118:	4653      	mov	r3, sl
 800111a:	4323      	orrs	r3, r4
 800111c:	d100      	bne.n	8001120 <__aeabi_dsub+0x6e8>
 800111e:	e6cb      	b.n	8000eb8 <__aeabi_dsub+0x480>
 8001120:	e614      	b.n	8000d4c <__aeabi_dsub+0x314>
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	000007ff 	.word	0x000007ff
 8001128:	ff7fffff 	.word	0xff7fffff
 800112c:	000007fe 	.word	0x000007fe
 8001130:	2300      	movs	r3, #0
 8001132:	4a01      	ldr	r2, [pc, #4]	; (8001138 <__aeabi_dsub+0x700>)
 8001134:	001c      	movs	r4, r3
 8001136:	e529      	b.n	8000b8c <__aeabi_dsub+0x154>
 8001138:	000007ff 	.word	0x000007ff

0800113c <__aeabi_d2iz>:
 800113c:	000a      	movs	r2, r1
 800113e:	b530      	push	{r4, r5, lr}
 8001140:	4c13      	ldr	r4, [pc, #76]	; (8001190 <__aeabi_d2iz+0x54>)
 8001142:	0053      	lsls	r3, r2, #1
 8001144:	0309      	lsls	r1, r1, #12
 8001146:	0005      	movs	r5, r0
 8001148:	0b09      	lsrs	r1, r1, #12
 800114a:	2000      	movs	r0, #0
 800114c:	0d5b      	lsrs	r3, r3, #21
 800114e:	0fd2      	lsrs	r2, r2, #31
 8001150:	42a3      	cmp	r3, r4
 8001152:	dd04      	ble.n	800115e <__aeabi_d2iz+0x22>
 8001154:	480f      	ldr	r0, [pc, #60]	; (8001194 <__aeabi_d2iz+0x58>)
 8001156:	4283      	cmp	r3, r0
 8001158:	dd02      	ble.n	8001160 <__aeabi_d2iz+0x24>
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <__aeabi_d2iz+0x5c>)
 800115c:	18d0      	adds	r0, r2, r3
 800115e:	bd30      	pop	{r4, r5, pc}
 8001160:	2080      	movs	r0, #128	; 0x80
 8001162:	0340      	lsls	r0, r0, #13
 8001164:	4301      	orrs	r1, r0
 8001166:	480d      	ldr	r0, [pc, #52]	; (800119c <__aeabi_d2iz+0x60>)
 8001168:	1ac0      	subs	r0, r0, r3
 800116a:	281f      	cmp	r0, #31
 800116c:	dd08      	ble.n	8001180 <__aeabi_d2iz+0x44>
 800116e:	480c      	ldr	r0, [pc, #48]	; (80011a0 <__aeabi_d2iz+0x64>)
 8001170:	1ac3      	subs	r3, r0, r3
 8001172:	40d9      	lsrs	r1, r3
 8001174:	000b      	movs	r3, r1
 8001176:	4258      	negs	r0, r3
 8001178:	2a00      	cmp	r2, #0
 800117a:	d1f0      	bne.n	800115e <__aeabi_d2iz+0x22>
 800117c:	0018      	movs	r0, r3
 800117e:	e7ee      	b.n	800115e <__aeabi_d2iz+0x22>
 8001180:	4c08      	ldr	r4, [pc, #32]	; (80011a4 <__aeabi_d2iz+0x68>)
 8001182:	40c5      	lsrs	r5, r0
 8001184:	46a4      	mov	ip, r4
 8001186:	4463      	add	r3, ip
 8001188:	4099      	lsls	r1, r3
 800118a:	000b      	movs	r3, r1
 800118c:	432b      	orrs	r3, r5
 800118e:	e7f2      	b.n	8001176 <__aeabi_d2iz+0x3a>
 8001190:	000003fe 	.word	0x000003fe
 8001194:	0000041d 	.word	0x0000041d
 8001198:	7fffffff 	.word	0x7fffffff
 800119c:	00000433 	.word	0x00000433
 80011a0:	00000413 	.word	0x00000413
 80011a4:	fffffbed 	.word	0xfffffbed

080011a8 <__aeabi_ui2d>:
 80011a8:	b510      	push	{r4, lr}
 80011aa:	1e04      	subs	r4, r0, #0
 80011ac:	d010      	beq.n	80011d0 <__aeabi_ui2d+0x28>
 80011ae:	f000 f85f 	bl	8001270 <__clzsi2>
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <__aeabi_ui2d+0x48>)
 80011b4:	1a1b      	subs	r3, r3, r0
 80011b6:	280a      	cmp	r0, #10
 80011b8:	dc11      	bgt.n	80011de <__aeabi_ui2d+0x36>
 80011ba:	220b      	movs	r2, #11
 80011bc:	0021      	movs	r1, r4
 80011be:	1a12      	subs	r2, r2, r0
 80011c0:	40d1      	lsrs	r1, r2
 80011c2:	3015      	adds	r0, #21
 80011c4:	030a      	lsls	r2, r1, #12
 80011c6:	055b      	lsls	r3, r3, #21
 80011c8:	4084      	lsls	r4, r0
 80011ca:	0b12      	lsrs	r2, r2, #12
 80011cc:	0d5b      	lsrs	r3, r3, #21
 80011ce:	e001      	b.n	80011d4 <__aeabi_ui2d+0x2c>
 80011d0:	2300      	movs	r3, #0
 80011d2:	2200      	movs	r2, #0
 80011d4:	051b      	lsls	r3, r3, #20
 80011d6:	4313      	orrs	r3, r2
 80011d8:	0020      	movs	r0, r4
 80011da:	0019      	movs	r1, r3
 80011dc:	bd10      	pop	{r4, pc}
 80011de:	0022      	movs	r2, r4
 80011e0:	380b      	subs	r0, #11
 80011e2:	4082      	lsls	r2, r0
 80011e4:	055b      	lsls	r3, r3, #21
 80011e6:	0312      	lsls	r2, r2, #12
 80011e8:	2400      	movs	r4, #0
 80011ea:	0b12      	lsrs	r2, r2, #12
 80011ec:	0d5b      	lsrs	r3, r3, #21
 80011ee:	e7f1      	b.n	80011d4 <__aeabi_ui2d+0x2c>
 80011f0:	0000041e 	.word	0x0000041e

080011f4 <__aeabi_cdrcmple>:
 80011f4:	4684      	mov	ip, r0
 80011f6:	0010      	movs	r0, r2
 80011f8:	4662      	mov	r2, ip
 80011fa:	468c      	mov	ip, r1
 80011fc:	0019      	movs	r1, r3
 80011fe:	4663      	mov	r3, ip
 8001200:	e000      	b.n	8001204 <__aeabi_cdcmpeq>
 8001202:	46c0      	nop			; (mov r8, r8)

08001204 <__aeabi_cdcmpeq>:
 8001204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001206:	f000 f905 	bl	8001414 <__ledf2>
 800120a:	2800      	cmp	r0, #0
 800120c:	d401      	bmi.n	8001212 <__aeabi_cdcmpeq+0xe>
 800120e:	2100      	movs	r1, #0
 8001210:	42c8      	cmn	r0, r1
 8001212:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001214 <__aeabi_dcmpeq>:
 8001214:	b510      	push	{r4, lr}
 8001216:	f000 f855 	bl	80012c4 <__eqdf2>
 800121a:	4240      	negs	r0, r0
 800121c:	3001      	adds	r0, #1
 800121e:	bd10      	pop	{r4, pc}

08001220 <__aeabi_dcmplt>:
 8001220:	b510      	push	{r4, lr}
 8001222:	f000 f8f7 	bl	8001414 <__ledf2>
 8001226:	2800      	cmp	r0, #0
 8001228:	db01      	blt.n	800122e <__aeabi_dcmplt+0xe>
 800122a:	2000      	movs	r0, #0
 800122c:	bd10      	pop	{r4, pc}
 800122e:	2001      	movs	r0, #1
 8001230:	bd10      	pop	{r4, pc}
 8001232:	46c0      	nop			; (mov r8, r8)

08001234 <__aeabi_dcmple>:
 8001234:	b510      	push	{r4, lr}
 8001236:	f000 f8ed 	bl	8001414 <__ledf2>
 800123a:	2800      	cmp	r0, #0
 800123c:	dd01      	ble.n	8001242 <__aeabi_dcmple+0xe>
 800123e:	2000      	movs	r0, #0
 8001240:	bd10      	pop	{r4, pc}
 8001242:	2001      	movs	r0, #1
 8001244:	bd10      	pop	{r4, pc}
 8001246:	46c0      	nop			; (mov r8, r8)

08001248 <__aeabi_dcmpgt>:
 8001248:	b510      	push	{r4, lr}
 800124a:	f000 f87d 	bl	8001348 <__gedf2>
 800124e:	2800      	cmp	r0, #0
 8001250:	dc01      	bgt.n	8001256 <__aeabi_dcmpgt+0xe>
 8001252:	2000      	movs	r0, #0
 8001254:	bd10      	pop	{r4, pc}
 8001256:	2001      	movs	r0, #1
 8001258:	bd10      	pop	{r4, pc}
 800125a:	46c0      	nop			; (mov r8, r8)

0800125c <__aeabi_dcmpge>:
 800125c:	b510      	push	{r4, lr}
 800125e:	f000 f873 	bl	8001348 <__gedf2>
 8001262:	2800      	cmp	r0, #0
 8001264:	da01      	bge.n	800126a <__aeabi_dcmpge+0xe>
 8001266:	2000      	movs	r0, #0
 8001268:	bd10      	pop	{r4, pc}
 800126a:	2001      	movs	r0, #1
 800126c:	bd10      	pop	{r4, pc}
 800126e:	46c0      	nop			; (mov r8, r8)

08001270 <__clzsi2>:
 8001270:	211c      	movs	r1, #28
 8001272:	2301      	movs	r3, #1
 8001274:	041b      	lsls	r3, r3, #16
 8001276:	4298      	cmp	r0, r3
 8001278:	d301      	bcc.n	800127e <__clzsi2+0xe>
 800127a:	0c00      	lsrs	r0, r0, #16
 800127c:	3910      	subs	r1, #16
 800127e:	0a1b      	lsrs	r3, r3, #8
 8001280:	4298      	cmp	r0, r3
 8001282:	d301      	bcc.n	8001288 <__clzsi2+0x18>
 8001284:	0a00      	lsrs	r0, r0, #8
 8001286:	3908      	subs	r1, #8
 8001288:	091b      	lsrs	r3, r3, #4
 800128a:	4298      	cmp	r0, r3
 800128c:	d301      	bcc.n	8001292 <__clzsi2+0x22>
 800128e:	0900      	lsrs	r0, r0, #4
 8001290:	3904      	subs	r1, #4
 8001292:	a202      	add	r2, pc, #8	; (adr r2, 800129c <__clzsi2+0x2c>)
 8001294:	5c10      	ldrb	r0, [r2, r0]
 8001296:	1840      	adds	r0, r0, r1
 8001298:	4770      	bx	lr
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	02020304 	.word	0x02020304
 80012a0:	01010101 	.word	0x01010101
	...

080012ac <__clzdi2>:
 80012ac:	b510      	push	{r4, lr}
 80012ae:	2900      	cmp	r1, #0
 80012b0:	d103      	bne.n	80012ba <__clzdi2+0xe>
 80012b2:	f7ff ffdd 	bl	8001270 <__clzsi2>
 80012b6:	3020      	adds	r0, #32
 80012b8:	e002      	b.n	80012c0 <__clzdi2+0x14>
 80012ba:	0008      	movs	r0, r1
 80012bc:	f7ff ffd8 	bl	8001270 <__clzsi2>
 80012c0:	bd10      	pop	{r4, pc}
 80012c2:	46c0      	nop			; (mov r8, r8)

080012c4 <__eqdf2>:
 80012c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c6:	464e      	mov	r6, r9
 80012c8:	4645      	mov	r5, r8
 80012ca:	46de      	mov	lr, fp
 80012cc:	4657      	mov	r7, sl
 80012ce:	4690      	mov	r8, r2
 80012d0:	b5e0      	push	{r5, r6, r7, lr}
 80012d2:	0017      	movs	r7, r2
 80012d4:	031a      	lsls	r2, r3, #12
 80012d6:	0b12      	lsrs	r2, r2, #12
 80012d8:	0005      	movs	r5, r0
 80012da:	4684      	mov	ip, r0
 80012dc:	4819      	ldr	r0, [pc, #100]	; (8001344 <__eqdf2+0x80>)
 80012de:	030e      	lsls	r6, r1, #12
 80012e0:	004c      	lsls	r4, r1, #1
 80012e2:	4691      	mov	r9, r2
 80012e4:	005a      	lsls	r2, r3, #1
 80012e6:	0fdb      	lsrs	r3, r3, #31
 80012e8:	469b      	mov	fp, r3
 80012ea:	0b36      	lsrs	r6, r6, #12
 80012ec:	0d64      	lsrs	r4, r4, #21
 80012ee:	0fc9      	lsrs	r1, r1, #31
 80012f0:	0d52      	lsrs	r2, r2, #21
 80012f2:	4284      	cmp	r4, r0
 80012f4:	d019      	beq.n	800132a <__eqdf2+0x66>
 80012f6:	4282      	cmp	r2, r0
 80012f8:	d010      	beq.n	800131c <__eqdf2+0x58>
 80012fa:	2001      	movs	r0, #1
 80012fc:	4294      	cmp	r4, r2
 80012fe:	d10e      	bne.n	800131e <__eqdf2+0x5a>
 8001300:	454e      	cmp	r6, r9
 8001302:	d10c      	bne.n	800131e <__eqdf2+0x5a>
 8001304:	2001      	movs	r0, #1
 8001306:	45c4      	cmp	ip, r8
 8001308:	d109      	bne.n	800131e <__eqdf2+0x5a>
 800130a:	4559      	cmp	r1, fp
 800130c:	d017      	beq.n	800133e <__eqdf2+0x7a>
 800130e:	2c00      	cmp	r4, #0
 8001310:	d105      	bne.n	800131e <__eqdf2+0x5a>
 8001312:	0030      	movs	r0, r6
 8001314:	4328      	orrs	r0, r5
 8001316:	1e43      	subs	r3, r0, #1
 8001318:	4198      	sbcs	r0, r3
 800131a:	e000      	b.n	800131e <__eqdf2+0x5a>
 800131c:	2001      	movs	r0, #1
 800131e:	bcf0      	pop	{r4, r5, r6, r7}
 8001320:	46bb      	mov	fp, r7
 8001322:	46b2      	mov	sl, r6
 8001324:	46a9      	mov	r9, r5
 8001326:	46a0      	mov	r8, r4
 8001328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132a:	0033      	movs	r3, r6
 800132c:	2001      	movs	r0, #1
 800132e:	432b      	orrs	r3, r5
 8001330:	d1f5      	bne.n	800131e <__eqdf2+0x5a>
 8001332:	42a2      	cmp	r2, r4
 8001334:	d1f3      	bne.n	800131e <__eqdf2+0x5a>
 8001336:	464b      	mov	r3, r9
 8001338:	433b      	orrs	r3, r7
 800133a:	d1f0      	bne.n	800131e <__eqdf2+0x5a>
 800133c:	e7e2      	b.n	8001304 <__eqdf2+0x40>
 800133e:	2000      	movs	r0, #0
 8001340:	e7ed      	b.n	800131e <__eqdf2+0x5a>
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	000007ff 	.word	0x000007ff

08001348 <__gedf2>:
 8001348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134a:	4647      	mov	r7, r8
 800134c:	46ce      	mov	lr, r9
 800134e:	0004      	movs	r4, r0
 8001350:	0018      	movs	r0, r3
 8001352:	0016      	movs	r6, r2
 8001354:	031b      	lsls	r3, r3, #12
 8001356:	0b1b      	lsrs	r3, r3, #12
 8001358:	4d2d      	ldr	r5, [pc, #180]	; (8001410 <__gedf2+0xc8>)
 800135a:	004a      	lsls	r2, r1, #1
 800135c:	4699      	mov	r9, r3
 800135e:	b580      	push	{r7, lr}
 8001360:	0043      	lsls	r3, r0, #1
 8001362:	030f      	lsls	r7, r1, #12
 8001364:	46a4      	mov	ip, r4
 8001366:	46b0      	mov	r8, r6
 8001368:	0b3f      	lsrs	r7, r7, #12
 800136a:	0d52      	lsrs	r2, r2, #21
 800136c:	0fc9      	lsrs	r1, r1, #31
 800136e:	0d5b      	lsrs	r3, r3, #21
 8001370:	0fc0      	lsrs	r0, r0, #31
 8001372:	42aa      	cmp	r2, r5
 8001374:	d021      	beq.n	80013ba <__gedf2+0x72>
 8001376:	42ab      	cmp	r3, r5
 8001378:	d013      	beq.n	80013a2 <__gedf2+0x5a>
 800137a:	2a00      	cmp	r2, #0
 800137c:	d122      	bne.n	80013c4 <__gedf2+0x7c>
 800137e:	433c      	orrs	r4, r7
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <__gedf2+0x42>
 8001384:	464d      	mov	r5, r9
 8001386:	432e      	orrs	r6, r5
 8001388:	d022      	beq.n	80013d0 <__gedf2+0x88>
 800138a:	2c00      	cmp	r4, #0
 800138c:	d010      	beq.n	80013b0 <__gedf2+0x68>
 800138e:	4281      	cmp	r1, r0
 8001390:	d022      	beq.n	80013d8 <__gedf2+0x90>
 8001392:	2002      	movs	r0, #2
 8001394:	3901      	subs	r1, #1
 8001396:	4008      	ands	r0, r1
 8001398:	3801      	subs	r0, #1
 800139a:	bcc0      	pop	{r6, r7}
 800139c:	46b9      	mov	r9, r7
 800139e:	46b0      	mov	r8, r6
 80013a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a2:	464d      	mov	r5, r9
 80013a4:	432e      	orrs	r6, r5
 80013a6:	d129      	bne.n	80013fc <__gedf2+0xb4>
 80013a8:	2a00      	cmp	r2, #0
 80013aa:	d1f0      	bne.n	800138e <__gedf2+0x46>
 80013ac:	433c      	orrs	r4, r7
 80013ae:	d1ee      	bne.n	800138e <__gedf2+0x46>
 80013b0:	2800      	cmp	r0, #0
 80013b2:	d1f2      	bne.n	800139a <__gedf2+0x52>
 80013b4:	2001      	movs	r0, #1
 80013b6:	4240      	negs	r0, r0
 80013b8:	e7ef      	b.n	800139a <__gedf2+0x52>
 80013ba:	003d      	movs	r5, r7
 80013bc:	4325      	orrs	r5, r4
 80013be:	d11d      	bne.n	80013fc <__gedf2+0xb4>
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d0ee      	beq.n	80013a2 <__gedf2+0x5a>
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1e2      	bne.n	800138e <__gedf2+0x46>
 80013c8:	464c      	mov	r4, r9
 80013ca:	4326      	orrs	r6, r4
 80013cc:	d1df      	bne.n	800138e <__gedf2+0x46>
 80013ce:	e7e0      	b.n	8001392 <__gedf2+0x4a>
 80013d0:	2000      	movs	r0, #0
 80013d2:	2c00      	cmp	r4, #0
 80013d4:	d0e1      	beq.n	800139a <__gedf2+0x52>
 80013d6:	e7dc      	b.n	8001392 <__gedf2+0x4a>
 80013d8:	429a      	cmp	r2, r3
 80013da:	dc0a      	bgt.n	80013f2 <__gedf2+0xaa>
 80013dc:	dbe8      	blt.n	80013b0 <__gedf2+0x68>
 80013de:	454f      	cmp	r7, r9
 80013e0:	d8d7      	bhi.n	8001392 <__gedf2+0x4a>
 80013e2:	d00e      	beq.n	8001402 <__gedf2+0xba>
 80013e4:	2000      	movs	r0, #0
 80013e6:	454f      	cmp	r7, r9
 80013e8:	d2d7      	bcs.n	800139a <__gedf2+0x52>
 80013ea:	2900      	cmp	r1, #0
 80013ec:	d0e2      	beq.n	80013b4 <__gedf2+0x6c>
 80013ee:	0008      	movs	r0, r1
 80013f0:	e7d3      	b.n	800139a <__gedf2+0x52>
 80013f2:	4243      	negs	r3, r0
 80013f4:	4158      	adcs	r0, r3
 80013f6:	0040      	lsls	r0, r0, #1
 80013f8:	3801      	subs	r0, #1
 80013fa:	e7ce      	b.n	800139a <__gedf2+0x52>
 80013fc:	2002      	movs	r0, #2
 80013fe:	4240      	negs	r0, r0
 8001400:	e7cb      	b.n	800139a <__gedf2+0x52>
 8001402:	45c4      	cmp	ip, r8
 8001404:	d8c5      	bhi.n	8001392 <__gedf2+0x4a>
 8001406:	2000      	movs	r0, #0
 8001408:	45c4      	cmp	ip, r8
 800140a:	d2c6      	bcs.n	800139a <__gedf2+0x52>
 800140c:	e7ed      	b.n	80013ea <__gedf2+0xa2>
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	000007ff 	.word	0x000007ff

08001414 <__ledf2>:
 8001414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001416:	4647      	mov	r7, r8
 8001418:	46ce      	mov	lr, r9
 800141a:	0004      	movs	r4, r0
 800141c:	0018      	movs	r0, r3
 800141e:	0016      	movs	r6, r2
 8001420:	031b      	lsls	r3, r3, #12
 8001422:	0b1b      	lsrs	r3, r3, #12
 8001424:	4d2c      	ldr	r5, [pc, #176]	; (80014d8 <__ledf2+0xc4>)
 8001426:	004a      	lsls	r2, r1, #1
 8001428:	4699      	mov	r9, r3
 800142a:	b580      	push	{r7, lr}
 800142c:	0043      	lsls	r3, r0, #1
 800142e:	030f      	lsls	r7, r1, #12
 8001430:	46a4      	mov	ip, r4
 8001432:	46b0      	mov	r8, r6
 8001434:	0b3f      	lsrs	r7, r7, #12
 8001436:	0d52      	lsrs	r2, r2, #21
 8001438:	0fc9      	lsrs	r1, r1, #31
 800143a:	0d5b      	lsrs	r3, r3, #21
 800143c:	0fc0      	lsrs	r0, r0, #31
 800143e:	42aa      	cmp	r2, r5
 8001440:	d00d      	beq.n	800145e <__ledf2+0x4a>
 8001442:	42ab      	cmp	r3, r5
 8001444:	d010      	beq.n	8001468 <__ledf2+0x54>
 8001446:	2a00      	cmp	r2, #0
 8001448:	d127      	bne.n	800149a <__ledf2+0x86>
 800144a:	433c      	orrs	r4, r7
 800144c:	2b00      	cmp	r3, #0
 800144e:	d111      	bne.n	8001474 <__ledf2+0x60>
 8001450:	464d      	mov	r5, r9
 8001452:	432e      	orrs	r6, r5
 8001454:	d10e      	bne.n	8001474 <__ledf2+0x60>
 8001456:	2000      	movs	r0, #0
 8001458:	2c00      	cmp	r4, #0
 800145a:	d015      	beq.n	8001488 <__ledf2+0x74>
 800145c:	e00e      	b.n	800147c <__ledf2+0x68>
 800145e:	003d      	movs	r5, r7
 8001460:	4325      	orrs	r5, r4
 8001462:	d110      	bne.n	8001486 <__ledf2+0x72>
 8001464:	4293      	cmp	r3, r2
 8001466:	d118      	bne.n	800149a <__ledf2+0x86>
 8001468:	464d      	mov	r5, r9
 800146a:	432e      	orrs	r6, r5
 800146c:	d10b      	bne.n	8001486 <__ledf2+0x72>
 800146e:	2a00      	cmp	r2, #0
 8001470:	d102      	bne.n	8001478 <__ledf2+0x64>
 8001472:	433c      	orrs	r4, r7
 8001474:	2c00      	cmp	r4, #0
 8001476:	d00b      	beq.n	8001490 <__ledf2+0x7c>
 8001478:	4281      	cmp	r1, r0
 800147a:	d014      	beq.n	80014a6 <__ledf2+0x92>
 800147c:	2002      	movs	r0, #2
 800147e:	3901      	subs	r1, #1
 8001480:	4008      	ands	r0, r1
 8001482:	3801      	subs	r0, #1
 8001484:	e000      	b.n	8001488 <__ledf2+0x74>
 8001486:	2002      	movs	r0, #2
 8001488:	bcc0      	pop	{r6, r7}
 800148a:	46b9      	mov	r9, r7
 800148c:	46b0      	mov	r8, r6
 800148e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001490:	2800      	cmp	r0, #0
 8001492:	d1f9      	bne.n	8001488 <__ledf2+0x74>
 8001494:	2001      	movs	r0, #1
 8001496:	4240      	negs	r0, r0
 8001498:	e7f6      	b.n	8001488 <__ledf2+0x74>
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1ec      	bne.n	8001478 <__ledf2+0x64>
 800149e:	464c      	mov	r4, r9
 80014a0:	4326      	orrs	r6, r4
 80014a2:	d1e9      	bne.n	8001478 <__ledf2+0x64>
 80014a4:	e7ea      	b.n	800147c <__ledf2+0x68>
 80014a6:	429a      	cmp	r2, r3
 80014a8:	dd04      	ble.n	80014b4 <__ledf2+0xa0>
 80014aa:	4243      	negs	r3, r0
 80014ac:	4158      	adcs	r0, r3
 80014ae:	0040      	lsls	r0, r0, #1
 80014b0:	3801      	subs	r0, #1
 80014b2:	e7e9      	b.n	8001488 <__ledf2+0x74>
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dbeb      	blt.n	8001490 <__ledf2+0x7c>
 80014b8:	454f      	cmp	r7, r9
 80014ba:	d8df      	bhi.n	800147c <__ledf2+0x68>
 80014bc:	d006      	beq.n	80014cc <__ledf2+0xb8>
 80014be:	2000      	movs	r0, #0
 80014c0:	454f      	cmp	r7, r9
 80014c2:	d2e1      	bcs.n	8001488 <__ledf2+0x74>
 80014c4:	2900      	cmp	r1, #0
 80014c6:	d0e5      	beq.n	8001494 <__ledf2+0x80>
 80014c8:	0008      	movs	r0, r1
 80014ca:	e7dd      	b.n	8001488 <__ledf2+0x74>
 80014cc:	45c4      	cmp	ip, r8
 80014ce:	d8d5      	bhi.n	800147c <__ledf2+0x68>
 80014d0:	2000      	movs	r0, #0
 80014d2:	45c4      	cmp	ip, r8
 80014d4:	d2d8      	bcs.n	8001488 <__ledf2+0x74>
 80014d6:	e7f5      	b.n	80014c4 <__ledf2+0xb0>
 80014d8:	000007ff 	.word	0x000007ff

080014dc <SELECT>:
#define BSP_SD_CS_Pin GPIO_PIN_12
#define BSP_SD_CS_GPIO_Port GPIOB

/* SPI Chip Select */
static void SELECT(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(BSP_SD_CS_GPIO_Port, BSP_SD_CS_Pin, GPIO_PIN_RESET);
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	015b      	lsls	r3, r3, #5
 80014e4:	4803      	ldr	r0, [pc, #12]	; (80014f4 <SELECT+0x18>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	0019      	movs	r1, r3
 80014ea:	f001 fc6d 	bl	8002dc8 <HAL_GPIO_WritePin>
}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	50000400 	.word	0x50000400

080014f8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(BSP_SD_CS_GPIO_Port, BSP_SD_CS_Pin, GPIO_PIN_SET);
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	015b      	lsls	r3, r3, #5
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <DESELECT+0x18>)
 8001502:	2201      	movs	r2, #1
 8001504:	0019      	movs	r1, r3
 8001506:	f001 fc5f 	bl	8002dc8 <HAL_GPIO_WritePin>
}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	50000400 	.word	0x50000400

08001514 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	0002      	movs	r2, r0
 800151c:	1dfb      	adds	r3, r7, #7
 800151e:	701a      	strb	r2, [r3, #0]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <SPI_TxByte+0x34>)
 8001524:	0018      	movs	r0, r3
 8001526:	f003 fa9f 	bl	8004a68 <HAL_SPI_GetState>
 800152a:	0003      	movs	r3, r0
 800152c:	2b01      	cmp	r3, #1
 800152e:	d1f8      	bne.n	8001522 <SPI_TxByte+0xe>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8001530:	23fa      	movs	r3, #250	; 0xfa
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	1df9      	adds	r1, r7, #7
 8001536:	4804      	ldr	r0, [pc, #16]	; (8001548 <SPI_TxByte+0x34>)
 8001538:	2201      	movs	r2, #1
 800153a:	f002 ff6d 	bl	8004418 <HAL_SPI_Transmit>
}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b002      	add	sp, #8
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	200000b8 	.word	0x200000b8

0800154c <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001552:	1dfb      	adds	r3, r7, #7
 8001554:	22ff      	movs	r2, #255	; 0xff
 8001556:	701a      	strb	r2, [r3, #0]
  data = 0;
 8001558:	1dbb      	adds	r3, r7, #6
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
  
  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <SPI_RxByte+0x40>)
 8001562:	0018      	movs	r0, r3
 8001564:	f003 fa80 	bl	8004a68 <HAL_SPI_GetState>
 8001568:	0003      	movs	r3, r0
 800156a:	2b01      	cmp	r3, #1
 800156c:	d1f8      	bne.n	8001560 <SPI_RxByte+0x14>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 800156e:	1dba      	adds	r2, r7, #6
 8001570:	1df9      	adds	r1, r7, #7
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <SPI_RxByte+0x40>)
 8001574:	23fa      	movs	r3, #250	; 0xfa
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2301      	movs	r3, #1
 800157c:	f003 f8a9 	bl	80046d2 <HAL_SPI_TransmitReceive>
  
  return data;
 8001580:	1dbb      	adds	r3, r7, #6
 8001582:	781b      	ldrb	r3, [r3, #0]
}
 8001584:	0018      	movs	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	b002      	add	sp, #8
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200000b8 	.word	0x200000b8

08001590 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001598:	f7ff ffd8 	bl	800154c <SPI_RxByte>
 800159c:	0003      	movs	r3, r0
 800159e:	001a      	movs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	701a      	strb	r2, [r3, #0]
}
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b002      	add	sp, #8
 80015aa:	bd80      	pop	{r7, pc}

080015ac <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void) 
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <SD_ReadyWait+0x38>)
 80015b4:	2232      	movs	r2, #50	; 0x32
 80015b6:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80015b8:	f7ff ffc8 	bl	800154c <SPI_RxByte>
  
  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80015bc:	1dfc      	adds	r4, r7, #7
 80015be:	f7ff ffc5 	bl	800154c <SPI_RxByte>
 80015c2:	0003      	movs	r3, r0
 80015c4:	7023      	strb	r3, [r4, #0]
  } while ((res != 0xFF) && Timer2);
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2bff      	cmp	r3, #255	; 0xff
 80015cc:	d004      	beq.n	80015d8 <SD_ReadyWait+0x2c>
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <SD_ReadyWait+0x38>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f1      	bne.n	80015bc <SD_ReadyWait+0x10>
  
  return res;
 80015d8:	1dfb      	adds	r3, r7, #7
 80015da:	781b      	ldrb	r3, [r3, #0]
}
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	b003      	add	sp, #12
 80015e2:	bd90      	pop	{r4, r7, pc}
 80015e4:	20000a16 	.word	0x20000a16

080015e8 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80015ee:	4b26      	ldr	r3, [pc, #152]	; (8001688 <SD_PowerOn+0xa0>)
 80015f0:	617b      	str	r3, [r7, #20]
  
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80015f2:	f7ff ff81 	bl	80014f8 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	e005      	b.n	8001608 <SD_PowerOn+0x20>
  {
    SPI_TxByte(0xFF);
 80015fc:	20ff      	movs	r0, #255	; 0xff
 80015fe:	f7ff ff89 	bl	8001514 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	3301      	adds	r3, #1
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	2b09      	cmp	r3, #9
 800160c:	ddf6      	ble.n	80015fc <SD_PowerOn+0x14>
  }
  
  /* SPI Chips Select */
  SELECT();
 800160e:	f7ff ff65 	bl	80014dc <SELECT>
  
  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2240      	movs	r2, #64	; 0x40
 8001616:	701a      	strb	r2, [r3, #0]
  cmd_arg[1] = 0;
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2200      	movs	r2, #0
 800161c:	705a      	strb	r2, [r3, #1]
  cmd_arg[2] = 0;
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2200      	movs	r2, #0
 8001622:	709a      	strb	r2, [r3, #2]
  cmd_arg[3] = 0;
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	70da      	strb	r2, [r3, #3]
  cmd_arg[4] = 0;
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2200      	movs	r2, #0
 800162e:	711a      	strb	r2, [r3, #4]
  cmd_arg[5] = 0x95;
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2295      	movs	r2, #149	; 0x95
 8001634:	715a      	strb	r2, [r3, #5]
  
  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	e009      	b.n	8001650 <SD_PowerOn+0x68>
  {
    SPI_TxByte(cmd_arg[i]);
 800163c:	1d3a      	adds	r2, r7, #4
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	18d3      	adds	r3, r2, r3
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	0018      	movs	r0, r3
 8001646:	f7ff ff65 	bl	8001514 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3301      	adds	r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b05      	cmp	r3, #5
 8001654:	ddf2      	ble.n	800163c <SD_PowerOn+0x54>
  }
  
  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001656:	e002      	b.n	800165e <SD_PowerOn+0x76>
  {
    Count--;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	3b01      	subs	r3, #1
 800165c:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800165e:	f7ff ff75 	bl	800154c <SPI_RxByte>
 8001662:	0003      	movs	r3, r0
 8001664:	2b01      	cmp	r3, #1
 8001666:	d002      	beq.n	800166e <SD_PowerOn+0x86>
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f4      	bne.n	8001658 <SD_PowerOn+0x70>
  }
  
  DESELECT();
 800166e:	f7ff ff43 	bl	80014f8 <DESELECT>
  SPI_TxByte(0XFF);
 8001672:	20ff      	movs	r0, #255	; 0xff
 8001674:	f7ff ff4e 	bl	8001514 <SPI_TxByte>
  
  PowerFlag = 1;
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <SD_PowerOn+0xa4>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	b006      	add	sp, #24
 8001684:	bd80      	pop	{r7, pc}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	00001fff 	.word	0x00001fff
 800168c:	20000091 	.word	0x20000091

08001690 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001694:	4b02      	ldr	r3, [pc, #8]	; (80016a0 <SD_PowerOff+0x10>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000091 	.word	0x20000091

080016a4 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80016a8:	4b02      	ldr	r3, [pc, #8]	; (80016b4 <SD_CheckPower+0x10>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
}
 80016ac:	0018      	movs	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	20000091 	.word	0x20000091

080016b8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 80016b8:	b5b0      	push	{r4, r5, r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 80016c2:	4b1a      	ldr	r3, [pc, #104]	; (800172c <SD_RxDataBlock+0x74>)
 80016c4:	220a      	movs	r2, #10
 80016c6:	701a      	strb	r2, [r3, #0]
  
  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 80016c8:	250f      	movs	r5, #15
 80016ca:	197c      	adds	r4, r7, r5
 80016cc:	f7ff ff3e 	bl	800154c <SPI_RxByte>
 80016d0:	0003      	movs	r3, r0
 80016d2:	7023      	strb	r3, [r4, #0]
  } while((token == 0xFF) && Timer1);
 80016d4:	197b      	adds	r3, r7, r5
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2bff      	cmp	r3, #255	; 0xff
 80016da:	d104      	bne.n	80016e6 <SD_RxDataBlock+0x2e>
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <SD_RxDataBlock+0x74>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80016e6:	230f      	movs	r3, #15
 80016e8:	18fb      	adds	r3, r7, r3
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2bfe      	cmp	r3, #254	; 0xfe
 80016ee:	d001      	beq.n	80016f4 <SD_RxDataBlock+0x3c>
    return FALSE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	e016      	b.n	8001722 <SD_RxDataBlock+0x6a>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	0018      	movs	r0, r3
 80016fc:	f7ff ff48 	bl	8001590 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	0018      	movs	r0, r3
 8001708:	f7ff ff42 	bl	8001590 <SPI_RxBytePtr>
  } while(btr -= 2);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	3b02      	subs	r3, #2
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1ed      	bne.n	80016f4 <SD_RxDataBlock+0x3c>
  
  SPI_RxByte(); /* CRC 무시 */
 8001718:	f7ff ff18 	bl	800154c <SPI_RxByte>
  SPI_RxByte();
 800171c:	f7ff ff16 	bl	800154c <SPI_RxByte>
  
  return TRUE;
 8001720:	2301      	movs	r3, #1
}
 8001722:	0018      	movs	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	b004      	add	sp, #16
 8001728:	bdb0      	pop	{r4, r5, r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	20000a15 	.word	0x20000a15

08001730 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001730:	b5b0      	push	{r4, r5, r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	000a      	movs	r2, r1
 800173a:	1cfb      	adds	r3, r7, #3
 800173c:	701a      	strb	r2, [r3, #0]
  uint8_t resp, wc;
  uint8_t i = 0;
 800173e:	230d      	movs	r3, #13
 8001740:	18fb      	adds	r3, r7, r3
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001746:	f7ff ff31 	bl	80015ac <SD_ReadyWait>
 800174a:	0003      	movs	r3, r0
 800174c:	2bff      	cmp	r3, #255	; 0xff
 800174e:	d001      	beq.n	8001754 <SD_TxDataBlock+0x24>
    return FALSE;
 8001750:	2300      	movs	r3, #0
 8001752:	e051      	b.n	80017f8 <SD_TxDataBlock+0xc8>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8001754:	1cfb      	adds	r3, r7, #3
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	0018      	movs	r0, r3
 800175a:	f7ff fedb 	bl	8001514 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800175e:	1cfb      	adds	r3, r7, #3
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2bfd      	cmp	r3, #253	; 0xfd
 8001764:	d03e      	beq.n	80017e4 <SD_TxDataBlock+0xb4>
  { 
    wc = 0;
 8001766:	230e      	movs	r3, #14
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	0018      	movs	r0, r3
 8001778:	f7ff fecc 	bl	8001514 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	0018      	movs	r0, r3
 8001786:	f7ff fec5 	bl	8001514 <SPI_TxByte>
    } while (--wc);
 800178a:	210e      	movs	r1, #14
 800178c:	187b      	adds	r3, r7, r1
 800178e:	187a      	adds	r2, r7, r1
 8001790:	7812      	ldrb	r2, [r2, #0]
 8001792:	3a01      	subs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
 8001796:	187b      	adds	r3, r7, r1
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1e7      	bne.n	800176e <SD_TxDataBlock+0x3e>
    
    SPI_RxByte();       /* CRC 무시 */
 800179e:	f7ff fed5 	bl	800154c <SPI_RxByte>
    SPI_RxByte();
 80017a2:	f7ff fed3 	bl	800154c <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80017a6:	e011      	b.n	80017cc <SD_TxDataBlock+0x9c>
    {			
      resp = SPI_RxByte();
 80017a8:	250f      	movs	r5, #15
 80017aa:	197c      	adds	r4, r7, r5
 80017ac:	f7ff fece 	bl	800154c <SPI_RxByte>
 80017b0:	0003      	movs	r3, r0
 80017b2:	7023      	strb	r3, [r4, #0]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80017b4:	197b      	adds	r3, r7, r5
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	221f      	movs	r2, #31
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b05      	cmp	r3, #5
 80017be:	d00b      	beq.n	80017d8 <SD_TxDataBlock+0xa8>
        break;
      
      i++;
 80017c0:	210d      	movs	r1, #13
 80017c2:	187b      	adds	r3, r7, r1
 80017c4:	781a      	ldrb	r2, [r3, #0]
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	3201      	adds	r2, #1
 80017ca:	701a      	strb	r2, [r3, #0]
    while (i <= 64) 
 80017cc:	230d      	movs	r3, #13
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b40      	cmp	r3, #64	; 0x40
 80017d4:	d9e8      	bls.n	80017a8 <SD_TxDataBlock+0x78>
 80017d6:	e000      	b.n	80017da <SD_TxDataBlock+0xaa>
        break;
 80017d8:	46c0      	nop			; (mov r8, r8)
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	f7ff feb6 	bl	800154c <SPI_RxByte>
 80017e0:	1e03      	subs	r3, r0, #0
 80017e2:	d0fb      	beq.n	80017dc <SD_TxDataBlock+0xac>
  }
  
  if ((resp & 0x1F) == 0x05)
 80017e4:	230f      	movs	r3, #15
 80017e6:	18fb      	adds	r3, r7, r3
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	221f      	movs	r2, #31
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d101      	bne.n	80017f6 <SD_TxDataBlock+0xc6>
    return TRUE;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <SD_TxDataBlock+0xc8>
  else
    return FALSE;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b004      	add	sp, #16
 80017fe:	bdb0      	pop	{r4, r5, r7, pc}

08001800 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	0002      	movs	r2, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	701a      	strb	r2, [r3, #0]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800180e:	f7ff fecd 	bl	80015ac <SD_ReadyWait>
 8001812:	0003      	movs	r3, r0
 8001814:	2bff      	cmp	r3, #255	; 0xff
 8001816:	d001      	beq.n	800181c <SD_SendCmd+0x1c>
    return 0xFF;
 8001818:	23ff      	movs	r3, #255	; 0xff
 800181a:	e056      	b.n	80018ca <SD_SendCmd+0xca>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800181c:	1dfb      	adds	r3, r7, #7
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	0018      	movs	r0, r3
 8001822:	f7ff fe77 	bl	8001514 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	0e1b      	lsrs	r3, r3, #24
 800182a:	b2db      	uxtb	r3, r3
 800182c:	0018      	movs	r0, r3
 800182e:	f7ff fe71 	bl	8001514 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	b2db      	uxtb	r3, r3
 8001838:	0018      	movs	r0, r3
 800183a:	f7ff fe6b 	bl	8001514 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	b2db      	uxtb	r3, r3
 8001844:	0018      	movs	r0, r3
 8001846:	f7ff fe65 	bl	8001514 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	0018      	movs	r0, r3
 8001850:	f7ff fe60 	bl	8001514 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8001854:	210f      	movs	r1, #15
 8001856:	187b      	adds	r3, r7, r1
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
  if (cmd == CMD0)
 800185c:	1dfb      	adds	r3, r7, #7
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b40      	cmp	r3, #64	; 0x40
 8001862:	d102      	bne.n	800186a <SD_SendCmd+0x6a>
    crc = 0x95; /* CRC for CMD0(0) */
 8001864:	187b      	adds	r3, r7, r1
 8001866:	2295      	movs	r2, #149	; 0x95
 8001868:	701a      	strb	r2, [r3, #0]
  
  if (cmd == CMD8)
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b48      	cmp	r3, #72	; 0x48
 8001870:	d103      	bne.n	800187a <SD_SendCmd+0x7a>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001872:	230f      	movs	r3, #15
 8001874:	18fb      	adds	r3, r7, r3
 8001876:	2287      	movs	r2, #135	; 0x87
 8001878:	701a      	strb	r2, [r3, #0]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 800187a:	230f      	movs	r3, #15
 800187c:	18fb      	adds	r3, r7, r3
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff fe47 	bl	8001514 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b4c      	cmp	r3, #76	; 0x4c
 800188c:	d101      	bne.n	8001892 <SD_SendCmd+0x92>
    SPI_RxByte();
 800188e:	f7ff fe5d 	bl	800154c <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8001892:	230e      	movs	r3, #14
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	220a      	movs	r2, #10
 8001898:	701a      	strb	r2, [r3, #0]
  do
  {
    res = SPI_RxByte();
 800189a:	250d      	movs	r5, #13
 800189c:	197c      	adds	r4, r7, r5
 800189e:	f7ff fe55 	bl	800154c <SPI_RxByte>
 80018a2:	0003      	movs	r3, r0
 80018a4:	7023      	strb	r3, [r4, #0]
  } while ((res & 0x80) && --n);
 80018a6:	197b      	adds	r3, r7, r5
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	b25b      	sxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	da09      	bge.n	80018c4 <SD_SendCmd+0xc4>
 80018b0:	210e      	movs	r1, #14
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	187a      	adds	r2, r7, r1
 80018b6:	7812      	ldrb	r2, [r2, #0]
 80018b8:	3a01      	subs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]
 80018bc:	187b      	adds	r3, r7, r1
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1ea      	bne.n	800189a <SD_SendCmd+0x9a>
  
  return res;
 80018c4:	230d      	movs	r3, #13
 80018c6:	18fb      	adds	r3, r7, r3
 80018c8:	781b      	ldrb	r3, [r3, #0]
}
 80018ca:	0018      	movs	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b004      	add	sp, #16
 80018d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080018d4 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	0002      	movs	r2, r0
 80018dc:	1dfb      	adds	r3, r7, #7
 80018de:	701a      	strb	r2, [r3, #0]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80018e0:	1dfb      	adds	r3, r7, #7
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <SD_disk_initialize+0x18>
    return STA_NOINIT;  
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0f5      	b.n	8001ad8 <SD_disk_initialize+0x204>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80018ec:	4b7c      	ldr	r3, [pc, #496]	; (8001ae0 <SD_disk_initialize+0x20c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	001a      	movs	r2, r3
 80018f4:	2302      	movs	r3, #2
 80018f6:	4013      	ands	r3, r2
 80018f8:	d003      	beq.n	8001902 <SD_disk_initialize+0x2e>
    return Stat;        
 80018fa:	4b79      	ldr	r3, [pc, #484]	; (8001ae0 <SD_disk_initialize+0x20c>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	e0ea      	b.n	8001ad8 <SD_disk_initialize+0x204>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8001902:	f7ff fe71 	bl	80015e8 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001906:	f7ff fde9 	bl	80014dc <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 800190a:	230e      	movs	r3, #14
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001912:	2100      	movs	r1, #0
 8001914:	2040      	movs	r0, #64	; 0x40
 8001916:	f7ff ff73 	bl	8001800 <SD_SendCmd>
 800191a:	0003      	movs	r3, r0
 800191c:	2b01      	cmp	r3, #1
 800191e:	d000      	beq.n	8001922 <SD_disk_initialize+0x4e>
 8001920:	e0bf      	b.n	8001aa2 <SD_disk_initialize+0x1ce>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001922:	4b70      	ldr	r3, [pc, #448]	; (8001ae4 <SD_disk_initialize+0x210>)
 8001924:	2264      	movs	r2, #100	; 0x64
 8001926:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001928:	23d5      	movs	r3, #213	; 0xd5
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	0019      	movs	r1, r3
 800192e:	2048      	movs	r0, #72	; 0x48
 8001930:	f7ff ff66 	bl	8001800 <SD_SendCmd>
 8001934:	0003      	movs	r3, r0
 8001936:	2b01      	cmp	r3, #1
 8001938:	d000      	beq.n	800193c <SD_disk_initialize+0x68>
 800193a:	e06d      	b.n	8001a18 <SD_disk_initialize+0x144>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800193c:	230f      	movs	r3, #15
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	e00e      	b.n	8001964 <SD_disk_initialize+0x90>
      {
        ocr[n] = SPI_RxByte();
 8001946:	250f      	movs	r5, #15
 8001948:	197b      	adds	r3, r7, r5
 800194a:	781c      	ldrb	r4, [r3, #0]
 800194c:	f7ff fdfe 	bl	800154c <SPI_RxByte>
 8001950:	0003      	movs	r3, r0
 8001952:	001a      	movs	r2, r3
 8001954:	2308      	movs	r3, #8
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	551a      	strb	r2, [r3, r4]
      for (n = 0; n < 4; n++)
 800195a:	197b      	adds	r3, r7, r5
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	197b      	adds	r3, r7, r5
 8001960:	3201      	adds	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
 8001964:	230f      	movs	r3, #15
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b03      	cmp	r3, #3
 800196c:	d9eb      	bls.n	8001946 <SD_disk_initialize+0x72>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 800196e:	2208      	movs	r2, #8
 8001970:	18bb      	adds	r3, r7, r2
 8001972:	789b      	ldrb	r3, [r3, #2]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d000      	beq.n	800197a <SD_disk_initialize+0xa6>
 8001978:	e093      	b.n	8001aa2 <SD_disk_initialize+0x1ce>
 800197a:	18bb      	adds	r3, r7, r2
 800197c:	78db      	ldrb	r3, [r3, #3]
 800197e:	2baa      	cmp	r3, #170	; 0xaa
 8001980:	d000      	beq.n	8001984 <SD_disk_initialize+0xb0>
 8001982:	e08e      	b.n	8001aa2 <SD_disk_initialize+0x1ce>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001984:	2100      	movs	r1, #0
 8001986:	2077      	movs	r0, #119	; 0x77
 8001988:	f7ff ff3a 	bl	8001800 <SD_SendCmd>
 800198c:	0003      	movs	r3, r0
 800198e:	2b01      	cmp	r3, #1
 8001990:	d807      	bhi.n	80019a2 <SD_disk_initialize+0xce>
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	05db      	lsls	r3, r3, #23
 8001996:	0019      	movs	r1, r3
 8001998:	2069      	movs	r0, #105	; 0x69
 800199a:	f7ff ff31 	bl	8001800 <SD_SendCmd>
 800199e:	1e03      	subs	r3, r0, #0
 80019a0:	d005      	beq.n	80019ae <SD_disk_initialize+0xda>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80019a2:	4b50      	ldr	r3, [pc, #320]	; (8001ae4 <SD_disk_initialize+0x210>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1eb      	bne.n	8001984 <SD_disk_initialize+0xb0>
 80019ac:	e000      	b.n	80019b0 <SD_disk_initialize+0xdc>
            break; /* ACMD41 with HCS bit */
 80019ae:	46c0      	nop			; (mov r8, r8)
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80019b0:	4b4c      	ldr	r3, [pc, #304]	; (8001ae4 <SD_disk_initialize+0x210>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d100      	bne.n	80019bc <SD_disk_initialize+0xe8>
 80019ba:	e072      	b.n	8001aa2 <SD_disk_initialize+0x1ce>
 80019bc:	2100      	movs	r1, #0
 80019be:	207a      	movs	r0, #122	; 0x7a
 80019c0:	f7ff ff1e 	bl	8001800 <SD_SendCmd>
 80019c4:	1e03      	subs	r3, r0, #0
 80019c6:	d000      	beq.n	80019ca <SD_disk_initialize+0xf6>
 80019c8:	e06b      	b.n	8001aa2 <SD_disk_initialize+0x1ce>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80019ca:	230f      	movs	r3, #15
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
 80019d2:	e00e      	b.n	80019f2 <SD_disk_initialize+0x11e>
          {
            ocr[n] = SPI_RxByte();
 80019d4:	250f      	movs	r5, #15
 80019d6:	197b      	adds	r3, r7, r5
 80019d8:	781c      	ldrb	r4, [r3, #0]
 80019da:	f7ff fdb7 	bl	800154c <SPI_RxByte>
 80019de:	0003      	movs	r3, r0
 80019e0:	001a      	movs	r2, r3
 80019e2:	2308      	movs	r3, #8
 80019e4:	18fb      	adds	r3, r7, r3
 80019e6:	551a      	strb	r2, [r3, r4]
          for (n = 0; n < 4; n++)
 80019e8:	197b      	adds	r3, r7, r5
 80019ea:	781a      	ldrb	r2, [r3, #0]
 80019ec:	197b      	adds	r3, r7, r5
 80019ee:	3201      	adds	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
 80019f2:	230f      	movs	r3, #15
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d9eb      	bls.n	80019d4 <SD_disk_initialize+0x100>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80019fc:	2308      	movs	r3, #8
 80019fe:	18fb      	adds	r3, r7, r3
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	001a      	movs	r2, r3
 8001a04:	2340      	movs	r3, #64	; 0x40
 8001a06:	4013      	ands	r3, r2
 8001a08:	d001      	beq.n	8001a0e <SD_disk_initialize+0x13a>
 8001a0a:	2206      	movs	r2, #6
 8001a0c:	e000      	b.n	8001a10 <SD_disk_initialize+0x13c>
 8001a0e:	2202      	movs	r2, #2
 8001a10:	230e      	movs	r3, #14
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	701a      	strb	r2, [r3, #0]
 8001a16:	e044      	b.n	8001aa2 <SD_disk_initialize+0x1ce>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2077      	movs	r0, #119	; 0x77
 8001a1c:	f7ff fef0 	bl	8001800 <SD_SendCmd>
 8001a20:	0003      	movs	r3, r0
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d808      	bhi.n	8001a38 <SD_disk_initialize+0x164>
 8001a26:	2100      	movs	r1, #0
 8001a28:	2069      	movs	r0, #105	; 0x69
 8001a2a:	f7ff fee9 	bl	8001800 <SD_SendCmd>
 8001a2e:	0003      	movs	r3, r0
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d801      	bhi.n	8001a38 <SD_disk_initialize+0x164>
 8001a34:	2202      	movs	r2, #2
 8001a36:	e000      	b.n	8001a3a <SD_disk_initialize+0x166>
 8001a38:	2201      	movs	r2, #1
 8001a3a:	230e      	movs	r3, #14
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	701a      	strb	r2, [r3, #0]
      
      do {
        if (type == 2) 
 8001a40:	230e      	movs	r3, #14
 8001a42:	18fb      	adds	r3, r7, r3
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d10d      	bne.n	8001a66 <SD_disk_initialize+0x192>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	2077      	movs	r0, #119	; 0x77
 8001a4e:	f7ff fed7 	bl	8001800 <SD_SendCmd>
 8001a52:	0003      	movs	r3, r0
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d80c      	bhi.n	8001a72 <SD_disk_initialize+0x19e>
 8001a58:	2100      	movs	r1, #0
 8001a5a:	2069      	movs	r0, #105	; 0x69
 8001a5c:	f7ff fed0 	bl	8001800 <SD_SendCmd>
 8001a60:	1e03      	subs	r3, r0, #0
 8001a62:	d106      	bne.n	8001a72 <SD_disk_initialize+0x19e>
            break; /* ACMD41 */
 8001a64:	e00c      	b.n	8001a80 <SD_disk_initialize+0x1ac>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001a66:	2100      	movs	r1, #0
 8001a68:	2041      	movs	r0, #65	; 0x41
 8001a6a:	f7ff fec9 	bl	8001800 <SD_SendCmd>
 8001a6e:	1e03      	subs	r3, r0, #0
 8001a70:	d005      	beq.n	8001a7e <SD_disk_initialize+0x1aa>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <SD_disk_initialize+0x210>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e1      	bne.n	8001a40 <SD_disk_initialize+0x16c>
 8001a7c:	e000      	b.n	8001a80 <SD_disk_initialize+0x1ac>
            break; /* CMD1 */
 8001a7e:	46c0      	nop			; (mov r8, r8)
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <SD_disk_initialize+0x210>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <SD_disk_initialize+0x1c6>
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	0019      	movs	r1, r3
 8001a90:	2050      	movs	r0, #80	; 0x50
 8001a92:	f7ff feb5 	bl	8001800 <SD_SendCmd>
 8001a96:	1e03      	subs	r3, r0, #0
 8001a98:	d003      	beq.n	8001aa2 <SD_disk_initialize+0x1ce>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001a9a:	230e      	movs	r3, #14
 8001a9c:	18fb      	adds	r3, r7, r3
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  
  CardType = type;
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <SD_disk_initialize+0x214>)
 8001aa4:	240e      	movs	r4, #14
 8001aa6:	193a      	adds	r2, r7, r4
 8001aa8:	7812      	ldrb	r2, [r2, #0]
 8001aaa:	701a      	strb	r2, [r3, #0]
  
  DESELECT();
 8001aac:	f7ff fd24 	bl	80014f8 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001ab0:	f7ff fd4c 	bl	800154c <SPI_RxByte>
  
  if (type) 
 8001ab4:	193b      	adds	r3, r7, r4
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <SD_disk_initialize+0x1fa>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <SD_disk_initialize+0x20c>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4393      	bics	r3, r2
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <SD_disk_initialize+0x20c>)
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	e001      	b.n	8001ad2 <SD_disk_initialize+0x1fe>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001ace:	f7ff fddf 	bl	8001690 <SD_PowerOff>
  }
  
  return Stat;
 8001ad2:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <SD_disk_initialize+0x20c>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	b2db      	uxtb	r3, r3
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b004      	add	sp, #16
 8001ade:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	20000a15 	.word	0x20000a15
 8001ae8:	20000090 	.word	0x20000090

08001aec <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	0002      	movs	r2, r0
 8001af4:	1dfb      	adds	r3, r7, #7
 8001af6:	701a      	strb	r2, [r3, #0]
  if (drv)
 8001af8:	1dfb      	adds	r3, r7, #7
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <SD_disk_status+0x18>
    return STA_NOINIT; 
 8001b00:	2301      	movs	r3, #1
 8001b02:	e002      	b.n	8001b0a <SD_disk_status+0x1e>
  
  return Stat;
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <SD_disk_status+0x28>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b2db      	uxtb	r3, r3
}
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b002      	add	sp, #8
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	20000000 	.word	0x20000000

08001b18 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	210f      	movs	r1, #15
 8001b26:	187b      	adds	r3, r7, r1
 8001b28:	1c02      	adds	r2, r0, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
  if (pdrv || !count)
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d102      	bne.n	8001b3a <SD_disk_read+0x22>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <SD_disk_read+0x26>
    return RES_PARERR;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	e053      	b.n	8001be6 <SD_disk_read+0xce>
  
  if (Stat & STA_NOINIT)
 8001b3e:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <SD_disk_read+0xd8>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	001a      	movs	r2, r3
 8001b46:	2301      	movs	r3, #1
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d001      	beq.n	8001b50 <SD_disk_read+0x38>
    return RES_NOTRDY;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e04a      	b.n	8001be6 <SD_disk_read+0xce>
  
  if (!(CardType & 4))
 8001b50:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <SD_disk_read+0xdc>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	001a      	movs	r2, r3
 8001b56:	2304      	movs	r3, #4
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d102      	bne.n	8001b62 <SD_disk_read+0x4a>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	025b      	lsls	r3, r3, #9
 8001b60:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001b62:	f7ff fcbb 	bl	80014dc <SELECT>
  
  if (count == 1) 
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d112      	bne.n	8001b92 <SD_disk_read+0x7a>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	0019      	movs	r1, r3
 8001b70:	2051      	movs	r0, #81	; 0x51
 8001b72:	f7ff fe45 	bl	8001800 <SD_SendCmd>
 8001b76:	1e03      	subs	r3, r0, #0
 8001b78:	d12d      	bne.n	8001bd6 <SD_disk_read+0xbe>
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	009a      	lsls	r2, r3, #2
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	0011      	movs	r1, r2
 8001b82:	0018      	movs	r0, r3
 8001b84:	f7ff fd98 	bl	80016b8 <SD_RxDataBlock>
 8001b88:	1e03      	subs	r3, r0, #0
 8001b8a:	d024      	beq.n	8001bd6 <SD_disk_read+0xbe>
      count = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	e021      	b.n	8001bd6 <SD_disk_read+0xbe>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	0019      	movs	r1, r3
 8001b96:	2052      	movs	r0, #82	; 0x52
 8001b98:	f7ff fe32 	bl	8001800 <SD_SendCmd>
 8001b9c:	1e03      	subs	r3, r0, #0
 8001b9e:	d11a      	bne.n	8001bd6 <SD_disk_read+0xbe>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	009a      	lsls	r2, r3, #2
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	0011      	movs	r1, r2
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7ff fd85 	bl	80016b8 <SD_RxDataBlock>
 8001bae:	1e03      	subs	r3, r0, #0
 8001bb0:	d00c      	beq.n	8001bcc <SD_disk_read+0xb4>
          break;
        
        buff += 512;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2280      	movs	r2, #128	; 0x80
 8001bb6:	0092      	lsls	r2, r2, #2
 8001bb8:	4694      	mov	ip, r2
 8001bba:	4463      	add	r3, ip
 8001bbc:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1ea      	bne.n	8001ba0 <SD_disk_read+0x88>
 8001bca:	e000      	b.n	8001bce <SD_disk_read+0xb6>
          break;
 8001bcc:	46c0      	nop			; (mov r8, r8)
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001bce:	2100      	movs	r1, #0
 8001bd0:	204c      	movs	r0, #76	; 0x4c
 8001bd2:	f7ff fe15 	bl	8001800 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001bd6:	f7ff fc8f 	bl	80014f8 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001bda:	f7ff fcb7 	bl	800154c <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	1e5a      	subs	r2, r3, #1
 8001be2:	4193      	sbcs	r3, r2
 8001be4:	b2db      	uxtb	r3, r3
}
 8001be6:	0018      	movs	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b004      	add	sp, #16
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000090 	.word	0x20000090

08001bf8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	210f      	movs	r1, #15
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	1c02      	adds	r2, r0, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
  if (pdrv || !count)
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d102      	bne.n	8001c1a <SD_disk_write+0x22>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <SD_disk_write+0x26>
    return RES_PARERR;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e06b      	b.n	8001cf6 <SD_disk_write+0xfe>
  
  if (Stat & STA_NOINIT)
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <SD_disk_write+0x108>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	001a      	movs	r2, r3
 8001c26:	2301      	movs	r3, #1
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d001      	beq.n	8001c30 <SD_disk_write+0x38>
    return RES_NOTRDY;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e062      	b.n	8001cf6 <SD_disk_write+0xfe>
  
  if (Stat & STA_PROTECT)
 8001c30:	4b33      	ldr	r3, [pc, #204]	; (8001d00 <SD_disk_write+0x108>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	001a      	movs	r2, r3
 8001c38:	2304      	movs	r3, #4
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d001      	beq.n	8001c42 <SD_disk_write+0x4a>
    return RES_WRPRT;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e059      	b.n	8001cf6 <SD_disk_write+0xfe>
  
  if (!(CardType & 4))
 8001c42:	4b30      	ldr	r3, [pc, #192]	; (8001d04 <SD_disk_write+0x10c>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	001a      	movs	r2, r3
 8001c48:	2304      	movs	r3, #4
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d102      	bne.n	8001c54 <SD_disk_write+0x5c>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	025b      	lsls	r3, r3, #9
 8001c52:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001c54:	f7ff fc42 	bl	80014dc <SELECT>
  
  if (count == 1) 
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d110      	bne.n	8001c80 <SD_disk_write+0x88>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0019      	movs	r1, r3
 8001c62:	2058      	movs	r0, #88	; 0x58
 8001c64:	f7ff fdcc 	bl	8001800 <SD_SendCmd>
 8001c68:	1e03      	subs	r3, r0, #0
 8001c6a:	d13c      	bne.n	8001ce6 <SD_disk_write+0xee>
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	21fe      	movs	r1, #254	; 0xfe
 8001c70:	0018      	movs	r0, r3
 8001c72:	f7ff fd5d 	bl	8001730 <SD_TxDataBlock>
 8001c76:	1e03      	subs	r3, r0, #0
 8001c78:	d035      	beq.n	8001ce6 <SD_disk_write+0xee>
      count = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	e032      	b.n	8001ce6 <SD_disk_write+0xee>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001c80:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <SD_disk_write+0x10c>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	001a      	movs	r2, r3
 8001c86:	2302      	movs	r3, #2
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d008      	beq.n	8001c9e <SD_disk_write+0xa6>
    {
      SD_SendCmd(CMD55, 0);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2077      	movs	r0, #119	; 0x77
 8001c90:	f7ff fdb6 	bl	8001800 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	0019      	movs	r1, r3
 8001c98:	2057      	movs	r0, #87	; 0x57
 8001c9a:	f7ff fdb1 	bl	8001800 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	0019      	movs	r1, r3
 8001ca2:	2059      	movs	r0, #89	; 0x59
 8001ca4:	f7ff fdac 	bl	8001800 <SD_SendCmd>
 8001ca8:	1e03      	subs	r3, r0, #0
 8001caa:	d11c      	bne.n	8001ce6 <SD_disk_write+0xee>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	21fc      	movs	r1, #252	; 0xfc
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f7ff fd3d 	bl	8001730 <SD_TxDataBlock>
 8001cb6:	1e03      	subs	r3, r0, #0
 8001cb8:	d00c      	beq.n	8001cd4 <SD_disk_write+0xdc>
          break;
        
        buff += 512;
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	0092      	lsls	r2, r2, #2
 8001cc0:	4694      	mov	ip, r2
 8001cc2:	4463      	add	r3, ip
 8001cc4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1ec      	bne.n	8001cac <SD_disk_write+0xb4>
 8001cd2:	e000      	b.n	8001cd6 <SD_disk_write+0xde>
          break;
 8001cd4:	46c0      	nop			; (mov r8, r8)
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001cd6:	21fd      	movs	r1, #253	; 0xfd
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f7ff fd29 	bl	8001730 <SD_TxDataBlock>
 8001cde:	1e03      	subs	r3, r0, #0
 8001ce0:	d101      	bne.n	8001ce6 <SD_disk_write+0xee>
      {        
        count = 1;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001ce6:	f7ff fc07 	bl	80014f8 <DESELECT>
  SPI_RxByte();
 8001cea:	f7ff fc2f 	bl	800154c <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	1e5a      	subs	r2, r3, #1
 8001cf2:	4193      	sbcs	r3, r2
 8001cf4:	b2db      	uxtb	r3, r3
}
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b004      	add	sp, #16
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	20000000 	.word	0x20000000
 8001d04:	20000090 	.word	0x20000090

08001d08 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b08b      	sub	sp, #44	; 0x2c
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	603a      	str	r2, [r7, #0]
 8001d10:	1dfb      	adds	r3, r7, #7
 8001d12:	1c02      	adds	r2, r0, #0
 8001d14:	701a      	strb	r2, [r3, #0]
 8001d16:	1dbb      	adds	r3, r7, #6
 8001d18:	1c0a      	adds	r2, r1, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001d20:	1dfb      	adds	r3, r7, #7
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <SD_disk_ioctl+0x24>
    return RES_PARERR;
 8001d28:	2304      	movs	r3, #4
 8001d2a:	e11f      	b.n	8001f6c <SD_disk_ioctl+0x264>
  
  res = RES_ERROR;
 8001d2c:	2327      	movs	r3, #39	; 0x27
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]
  
  if (ctrl == CTRL_POWER) 
 8001d34:	1dbb      	adds	r3, r7, #6
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	d12b      	bne.n	8001d94 <SD_disk_ioctl+0x8c>
  {
    switch (*ptr) 
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d017      	beq.n	8001d74 <SD_disk_ioctl+0x6c>
 8001d44:	dc21      	bgt.n	8001d8a <SD_disk_ioctl+0x82>
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <SD_disk_ioctl+0x48>
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d00b      	beq.n	8001d66 <SD_disk_ioctl+0x5e>
 8001d4e:	e01c      	b.n	8001d8a <SD_disk_ioctl+0x82>
    {
    case 0:
      if (SD_CheckPower())
 8001d50:	f7ff fca8 	bl	80016a4 <SD_CheckPower>
 8001d54:	1e03      	subs	r3, r0, #0
 8001d56:	d001      	beq.n	8001d5c <SD_disk_ioctl+0x54>
        SD_PowerOff();          /* Power Off */
 8001d58:	f7ff fc9a 	bl	8001690 <SD_PowerOff>
      res = RES_OK;
 8001d5c:	2327      	movs	r3, #39	; 0x27
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
      break;
 8001d64:	e0ff      	b.n	8001f66 <SD_disk_ioctl+0x25e>
    case 1:
      SD_PowerOn();             /* Power On */
 8001d66:	f7ff fc3f 	bl	80015e8 <SD_PowerOn>
      res = RES_OK;
 8001d6a:	2327      	movs	r3, #39	; 0x27
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
      break;
 8001d72:	e0f8      	b.n	8001f66 <SD_disk_ioctl+0x25e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	1c5c      	adds	r4, r3, #1
 8001d78:	f7ff fc94 	bl	80016a4 <SD_CheckPower>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001d80:	2327      	movs	r3, #39	; 0x27
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
      break;
 8001d88:	e0ed      	b.n	8001f66 <SD_disk_ioctl+0x25e>
    default:
      res = RES_PARERR;
 8001d8a:	2327      	movs	r3, #39	; 0x27
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	2204      	movs	r2, #4
 8001d90:	701a      	strb	r2, [r3, #0]
 8001d92:	e0e8      	b.n	8001f66 <SD_disk_ioctl+0x25e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001d94:	4b77      	ldr	r3, [pc, #476]	; (8001f74 <SD_disk_ioctl+0x26c>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	001a      	movs	r2, r3
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d001      	beq.n	8001da6 <SD_disk_ioctl+0x9e>
      return RES_NOTRDY;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e0e2      	b.n	8001f6c <SD_disk_ioctl+0x264>
    
    SELECT();
 8001da6:	f7ff fb99 	bl	80014dc <SELECT>
    
    switch (ctrl) 
 8001daa:	1dbb      	adds	r3, r7, #6
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b0d      	cmp	r3, #13
 8001db0:	d900      	bls.n	8001db4 <SD_disk_ioctl+0xac>
 8001db2:	e0c8      	b.n	8001f46 <SD_disk_ioctl+0x23e>
 8001db4:	009a      	lsls	r2, r3, #2
 8001db6:	4b70      	ldr	r3, [pc, #448]	; (8001f78 <SD_disk_ioctl+0x270>)
 8001db8:	18d3      	adds	r3, r2, r3
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	469f      	mov	pc, r3
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2049      	movs	r0, #73	; 0x49
 8001dc2:	f7ff fd1d 	bl	8001800 <SD_SendCmd>
 8001dc6:	1e03      	subs	r3, r0, #0
 8001dc8:	d000      	beq.n	8001dcc <SD_disk_ioctl+0xc4>
 8001dca:	e0c1      	b.n	8001f50 <SD_disk_ioctl+0x248>
 8001dcc:	240c      	movs	r4, #12
 8001dce:	193b      	adds	r3, r7, r4
 8001dd0:	2110      	movs	r1, #16
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f7ff fc70 	bl	80016b8 <SD_RxDataBlock>
 8001dd8:	1e03      	subs	r3, r0, #0
 8001dda:	d100      	bne.n	8001dde <SD_disk_ioctl+0xd6>
 8001ddc:	e0b8      	b.n	8001f50 <SD_disk_ioctl+0x248>
      {
        if ((csd[0] >> 6) == 1) 
 8001dde:	0022      	movs	r2, r4
 8001de0:	18bb      	adds	r3, r7, r2
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	099b      	lsrs	r3, r3, #6
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d114      	bne.n	8001e16 <SD_disk_ioctl+0x10e>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001dec:	0011      	movs	r1, r2
 8001dee:	18bb      	adds	r3, r7, r2
 8001df0:	7a5b      	ldrb	r3, [r3, #9]
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	187b      	adds	r3, r7, r1
 8001df6:	7a1b      	ldrb	r3, [r3, #8]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	021b      	lsls	r3, r3, #8
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	18d3      	adds	r3, r2, r3
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	211e      	movs	r1, #30
 8001e04:	187b      	adds	r3, r7, r1
 8001e06:	3201      	adds	r2, #1
 8001e08:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001e0a:	187b      	adds	r3, r7, r1
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	029a      	lsls	r2, r3, #10
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e03a      	b.n	8001e8c <SD_disk_ioctl+0x184>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001e16:	200c      	movs	r0, #12
 8001e18:	183b      	adds	r3, r7, r0
 8001e1a:	795b      	ldrb	r3, [r3, #5]
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	4013      	ands	r3, r2
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	183b      	adds	r3, r7, r0
 8001e24:	7a9b      	ldrb	r3, [r3, #10]
 8001e26:	09db      	lsrs	r3, r3, #7
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	18d3      	adds	r3, r2, r3
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	183b      	adds	r3, r7, r0
 8001e30:	7a5b      	ldrb	r3, [r3, #9]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2106      	movs	r1, #6
 8001e38:	400b      	ands	r3, r1
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	18d3      	adds	r3, r2, r3
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	2426      	movs	r4, #38	; 0x26
 8001e42:	193b      	adds	r3, r7, r4
 8001e44:	3202      	adds	r2, #2
 8001e46:	701a      	strb	r2, [r3, #0]
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001e48:	183b      	adds	r3, r7, r0
 8001e4a:	7a1b      	ldrb	r3, [r3, #8]
 8001e4c:	099b      	lsrs	r3, r3, #6
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	183b      	adds	r3, r7, r0
 8001e54:	79db      	ldrb	r3, [r3, #7]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	18d3      	adds	r3, r2, r3
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	183b      	adds	r3, r7, r0
 8001e62:	799b      	ldrb	r3, [r3, #6]
 8001e64:	029b      	lsls	r3, r3, #10
 8001e66:	b299      	uxth	r1, r3
 8001e68:	23c0      	movs	r3, #192	; 0xc0
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	400b      	ands	r3, r1
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	18d3      	adds	r3, r2, r3
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	211e      	movs	r1, #30
 8001e76:	187b      	adds	r3, r7, r1
 8001e78:	3201      	adds	r2, #1
 8001e7a:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	881a      	ldrh	r2, [r3, #0]
 8001e80:	193b      	adds	r3, r7, r4
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	3b09      	subs	r3, #9
 8001e86:	409a      	lsls	r2, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8001e8c:	2327      	movs	r3, #39	; 0x27
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001e94:	e05c      	b.n	8001f50 <SD_disk_ioctl+0x248>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2280      	movs	r2, #128	; 0x80
 8001e9a:	0092      	lsls	r2, r2, #2
 8001e9c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001e9e:	2327      	movs	r3, #39	; 0x27
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
      break;
 8001ea6:	e05a      	b.n	8001f5e <SD_disk_ioctl+0x256>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001ea8:	f7ff fb80 	bl	80015ac <SD_ReadyWait>
 8001eac:	0003      	movs	r3, r0
 8001eae:	2bff      	cmp	r3, #255	; 0xff
 8001eb0:	d150      	bne.n	8001f54 <SD_disk_ioctl+0x24c>
        res = RES_OK;
 8001eb2:	2327      	movs	r3, #39	; 0x27
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
      break;
 8001eba:	e04b      	b.n	8001f54 <SD_disk_ioctl+0x24c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2049      	movs	r0, #73	; 0x49
 8001ec0:	f7ff fc9e 	bl	8001800 <SD_SendCmd>
 8001ec4:	1e03      	subs	r3, r0, #0
 8001ec6:	d147      	bne.n	8001f58 <SD_disk_ioctl+0x250>
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	2110      	movs	r1, #16
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f7ff fbf3 	bl	80016b8 <SD_RxDataBlock>
 8001ed2:	1e03      	subs	r3, r0, #0
 8001ed4:	d040      	beq.n	8001f58 <SD_disk_ioctl+0x250>
        res = RES_OK;
 8001ed6:	2327      	movs	r3, #39	; 0x27
 8001ed8:	18fb      	adds	r3, r7, r3
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
      break;
 8001ede:	e03b      	b.n	8001f58 <SD_disk_ioctl+0x250>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	204a      	movs	r0, #74	; 0x4a
 8001ee4:	f7ff fc8c 	bl	8001800 <SD_SendCmd>
 8001ee8:	1e03      	subs	r3, r0, #0
 8001eea:	d137      	bne.n	8001f5c <SD_disk_ioctl+0x254>
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	2110      	movs	r1, #16
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f7ff fbe1 	bl	80016b8 <SD_RxDataBlock>
 8001ef6:	1e03      	subs	r3, r0, #0
 8001ef8:	d030      	beq.n	8001f5c <SD_disk_ioctl+0x254>
        res = RES_OK;
 8001efa:	2327      	movs	r3, #39	; 0x27
 8001efc:	18fb      	adds	r3, r7, r3
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
      break;
 8001f02:	e02b      	b.n	8001f5c <SD_disk_ioctl+0x254>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001f04:	2100      	movs	r1, #0
 8001f06:	207a      	movs	r0, #122	; 0x7a
 8001f08:	f7ff fc7a 	bl	8001800 <SD_SendCmd>
 8001f0c:	1e03      	subs	r3, r0, #0
 8001f0e:	d11a      	bne.n	8001f46 <SD_disk_ioctl+0x23e>
      {         
        for (n = 0; n < 4; n++)
 8001f10:	2326      	movs	r3, #38	; 0x26
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
 8001f18:	e00c      	b.n	8001f34 <SD_disk_ioctl+0x22c>
        {
          *ptr++ = SPI_RxByte();
 8001f1a:	6a3c      	ldr	r4, [r7, #32]
 8001f1c:	1c63      	adds	r3, r4, #1
 8001f1e:	623b      	str	r3, [r7, #32]
 8001f20:	f7ff fb14 	bl	800154c <SPI_RxByte>
 8001f24:	0003      	movs	r3, r0
 8001f26:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001f28:	2126      	movs	r1, #38	; 0x26
 8001f2a:	187b      	adds	r3, r7, r1
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	187b      	adds	r3, r7, r1
 8001f30:	3201      	adds	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	2326      	movs	r3, #38	; 0x26
 8001f36:	18fb      	adds	r3, r7, r3
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d9ed      	bls.n	8001f1a <SD_disk_ioctl+0x212>
        }
        
        res = RES_OK;
 8001f3e:	2327      	movs	r3, #39	; 0x27
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
      }     
      
    default:
      res = RES_PARERR;
 8001f46:	2327      	movs	r3, #39	; 0x27
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	e006      	b.n	8001f5e <SD_disk_ioctl+0x256>
      break;
 8001f50:	46c0      	nop			; (mov r8, r8)
 8001f52:	e004      	b.n	8001f5e <SD_disk_ioctl+0x256>
      break;
 8001f54:	46c0      	nop			; (mov r8, r8)
 8001f56:	e002      	b.n	8001f5e <SD_disk_ioctl+0x256>
      break;
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	e000      	b.n	8001f5e <SD_disk_ioctl+0x256>
      break;
 8001f5c:	46c0      	nop			; (mov r8, r8)
    }
    
    DESELECT();
 8001f5e:	f7ff facb 	bl	80014f8 <DESELECT>
    SPI_RxByte();
 8001f62:	f7ff faf3 	bl	800154c <SPI_RxByte>
  }
  
  return res;
 8001f66:	2327      	movs	r3, #39	; 0x27
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	781b      	ldrb	r3, [r3, #0]
}
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b00b      	add	sp, #44	; 0x2c
 8001f72:	bd90      	pop	{r4, r7, pc}
 8001f74:	20000000 	.word	0x20000000
 8001f78:	08008f78 	.word	0x08008f78

08001f7c <send_uart>:
uint32_t  total, free_space;

/* to send the data to uart */

void send_uart(char *string)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	0018      	movs	r0, r3
 8001f88:	f7fe f8be 	bl	8000108 <strlen>
 8001f8c:	0002      	movs	r2, r0
 8001f8e:	210f      	movs	r1, #15
 8001f90:	187b      	adds	r3, r7, r1
 8001f92:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1,(uint8_t *)string, len, 2000);	// transmit in blocking mode
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	23fa      	movs	r3, #250	; 0xfa
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <send_uart+0x34>)
 8001fa2:	f002 fe95 	bl	8004cd0 <HAL_UART_Transmit>
}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b004      	add	sp, #16
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	20000110 	.word	0x20000110

08001fb4 <bufsize>:

/* to find the size of the data in the buffer */
int bufsize(char *buf)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	int i =0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8001fc0:	e002      	b.n	8001fc8 <bufsize+0x14>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1f6      	bne.n	8001fc2 <bufsize+0xe>
	return i;
 8001fd4:	68fb      	ldr	r3, [r7, #12]

}
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b004      	add	sp, #16
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <bufclear>:

void bufclear(void)		// clear buffer
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++){
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	e007      	b.n	8001ffc <bufclear+0x1c>
		buffer[i] = '\0';
 8001fec:	4a08      	ldr	r2, [pc, #32]	; (8002010 <bufclear+0x30>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	18d3      	adds	r3, r2, r3
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++){
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	429a      	cmp	r2, r3
 8002004:	dbf2      	blt.n	8001fec <bufclear+0xc>
	}
}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	46c0      	nop			; (mov r8, r8)
 800200a:	46bd      	mov	sp, r7
 800200c:	b002      	add	sp, #8
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200005fc 	.word	0x200005fc

08002014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800201a:	f000 fc3b 	bl	8002894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800201e:	f000 f933 	bl	8002288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002022:	f000 fa77 	bl	8002514 <MX_GPIO_Init>
  MX_SPI2_Init();
 8002026:	f000 fa0d 	bl	8002444 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800202a:	f000 fa43 	bl	80024b4 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800202e:	f003 fb9d 	bl	800576c <MX_FATFS_Init>
  MX_RTC_Init();
 8002032:	f000 f9a3 	bl	800237c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  //Mount sd card

    fresult = f_mount(&fs, "/", 1);
 8002036:	497b      	ldr	r1, [pc, #492]	; (8002224 <main+0x210>)
 8002038:	4b7b      	ldr	r3, [pc, #492]	; (8002228 <main+0x214>)
 800203a:	2201      	movs	r2, #1
 800203c:	0018      	movs	r0, r3
 800203e:	f005 fa55 	bl	80074ec <f_mount>
 8002042:	0003      	movs	r3, r0
 8002044:	001a      	movs	r2, r3
 8002046:	4b79      	ldr	r3, [pc, #484]	; (800222c <main+0x218>)
 8002048:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK)
 800204a:	4b78      	ldr	r3, [pc, #480]	; (800222c <main+0x218>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <main+0x48>
  	   send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8002052:	4b77      	ldr	r3, [pc, #476]	; (8002230 <main+0x21c>)
 8002054:	0018      	movs	r0, r3
 8002056:	f7ff ff91 	bl	8001f7c <send_uart>
 800205a:	e003      	b.n	8002064 <main+0x50>
    else send_uart("SD CARD mounted successfully...\n\n");
 800205c:	4b75      	ldr	r3, [pc, #468]	; (8002234 <main+0x220>)
 800205e:	0018      	movs	r0, r3
 8002060:	f7ff ff8c 	bl	8001f7c <send_uart>

    /******************* Card capacity details **********************/

        	/* Check free space */

        	f_getfree("", &fre_clust, &pfs);
 8002064:	4a74      	ldr	r2, [pc, #464]	; (8002238 <main+0x224>)
 8002066:	4975      	ldr	r1, [pc, #468]	; (800223c <main+0x228>)
 8002068:	4b75      	ldr	r3, [pc, #468]	; (8002240 <main+0x22c>)
 800206a:	0018      	movs	r0, r3
 800206c:	f005 fff6 	bl	800805c <f_getfree>

        	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002070:	4b71      	ldr	r3, [pc, #452]	; (8002238 <main+0x224>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	1e9a      	subs	r2, r3, #2
 8002078:	4b6f      	ldr	r3, [pc, #444]	; (8002238 <main+0x224>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	895b      	ldrh	r3, [r3, #10]
 800207e:	4353      	muls	r3, r2
 8002080:	0018      	movs	r0, r3
 8002082:	f7ff f891 	bl	80011a8 <__aeabi_ui2d>
 8002086:	2200      	movs	r2, #0
 8002088:	4b6e      	ldr	r3, [pc, #440]	; (8002244 <main+0x230>)
 800208a:	f7fe fa13 	bl	80004b4 <__aeabi_dmul>
 800208e:	0002      	movs	r2, r0
 8002090:	000b      	movs	r3, r1
 8002092:	0010      	movs	r0, r2
 8002094:	0019      	movs	r1, r3
 8002096:	f7fe f923 	bl	80002e0 <__aeabi_d2uiz>
 800209a:	0002      	movs	r2, r0
 800209c:	4b6a      	ldr	r3, [pc, #424]	; (8002248 <main+0x234>)
 800209e:	601a      	str	r2, [r3, #0]
        	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 80020a0:	4b69      	ldr	r3, [pc, #420]	; (8002248 <main+0x234>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4969      	ldr	r1, [pc, #420]	; (800224c <main+0x238>)
 80020a6:	4b6a      	ldr	r3, [pc, #424]	; (8002250 <main+0x23c>)
 80020a8:	0018      	movs	r0, r3
 80020aa:	f006 f9d9 	bl	8008460 <siprintf>
        	send_uart(buffer);
 80020ae:	4b68      	ldr	r3, [pc, #416]	; (8002250 <main+0x23c>)
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff ff63 	bl	8001f7c <send_uart>
        	bufclear();
 80020b6:	f7ff ff93 	bl	8001fe0 <bufclear>

        	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80020ba:	4b5f      	ldr	r3, [pc, #380]	; (8002238 <main+0x224>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	895b      	ldrh	r3, [r3, #10]
 80020c0:	001a      	movs	r2, r3
 80020c2:	4b5e      	ldr	r3, [pc, #376]	; (800223c <main+0x228>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4353      	muls	r3, r2
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7ff f86d 	bl	80011a8 <__aeabi_ui2d>
 80020ce:	2200      	movs	r2, #0
 80020d0:	4b5c      	ldr	r3, [pc, #368]	; (8002244 <main+0x230>)
 80020d2:	f7fe f9ef 	bl	80004b4 <__aeabi_dmul>
 80020d6:	0002      	movs	r2, r0
 80020d8:	000b      	movs	r3, r1
 80020da:	0010      	movs	r0, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	f7fe f8ff 	bl	80002e0 <__aeabi_d2uiz>
 80020e2:	0002      	movs	r2, r0
 80020e4:	4b5b      	ldr	r3, [pc, #364]	; (8002254 <main+0x240>)
 80020e6:	601a      	str	r2, [r3, #0]
        	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 80020e8:	4b5a      	ldr	r3, [pc, #360]	; (8002254 <main+0x240>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	495a      	ldr	r1, [pc, #360]	; (8002258 <main+0x244>)
 80020ee:	4b58      	ldr	r3, [pc, #352]	; (8002250 <main+0x23c>)
 80020f0:	0018      	movs	r0, r3
 80020f2:	f006 f9b5 	bl	8008460 <siprintf>
        	send_uart(buffer);
 80020f6:	4b56      	ldr	r3, [pc, #344]	; (8002250 <main+0x23c>)
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7ff ff3f 	bl	8001f7c <send_uart>
        	bufclear();
 80020fe:	f7ff ff6f 	bl	8001fe0 <bufclear>



        	/* Get current date from RTC */
        	RTC_DateTypeDef date;
            HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002102:	1d39      	adds	r1, r7, #4
 8002104:	4b55      	ldr	r3, [pc, #340]	; (800225c <main+0x248>)
 8002106:	2200      	movs	r2, #0
 8002108:	0018      	movs	r0, r3
 800210a:	f001 ffcb 	bl	80040a4 <HAL_RTC_GetDate>

//
//     /**************** the following operation is using PUTS and GETS  ******************/
//
        	/* open a file to write/ create a file if it does not exist */
        	fresult = f_open(&fil, "file.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800210e:	4954      	ldr	r1, [pc, #336]	; (8002260 <main+0x24c>)
 8002110:	4b54      	ldr	r3, [pc, #336]	; (8002264 <main+0x250>)
 8002112:	2213      	movs	r2, #19
 8002114:	0018      	movs	r0, r3
 8002116:	f005 fa35 	bl	8007584 <f_open>
 800211a:	0003      	movs	r3, r0
 800211c:	001a      	movs	r2, r3
 800211e:	4b43      	ldr	r3, [pc, #268]	; (800222c <main+0x218>)
 8002120:	701a      	strb	r2, [r3, #0]

        	if(fresult == FR_OK)
 8002122:	4b42      	ldr	r3, [pc, #264]	; (800222c <main+0x218>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <main+0x11e>
        	{
        		send_uart("file created created\n");
 800212a:	4b4f      	ldr	r3, [pc, #316]	; (8002268 <main+0x254>)
 800212c:	0018      	movs	r0, r3
 800212e:	f7ff ff25 	bl	8001f7c <send_uart>
        	}
        	/* TO WRITE IN FILE */
        	fresult = f_puts("This is from the first file \n", &fil);
 8002132:	4a4c      	ldr	r2, [pc, #304]	; (8002264 <main+0x250>)
 8002134:	4b4d      	ldr	r3, [pc, #308]	; (800226c <main+0x258>)
 8002136:	0011      	movs	r1, r2
 8002138:	0018      	movs	r0, r3
 800213a:	f006 f908 	bl	800834e <f_puts>
 800213e:	0003      	movs	r3, r0
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4b3a      	ldr	r3, [pc, #232]	; (800222c <main+0x218>)
 8002144:	701a      	strb	r2, [r3, #0]

        	send_uart("file.txt is created and text is written \n");
 8002146:	4b4a      	ldr	r3, [pc, #296]	; (8002270 <main+0x25c>)
 8002148:	0018      	movs	r0, r3
 800214a:	f7ff ff17 	bl	8001f7c <send_uart>

        	/* to close file */
        	fresult = f_close(&fil);
 800214e:	4b45      	ldr	r3, [pc, #276]	; (8002264 <main+0x250>)
 8002150:	0018      	movs	r0, r3
 8002152:	f005 ff4f 	bl	8007ff4 <f_close>
 8002156:	0003      	movs	r3, r0
 8002158:	001a      	movs	r2, r3
 800215a:	4b34      	ldr	r3, [pc, #208]	; (800222c <main+0x218>)
 800215c:	701a      	strb	r2, [r3, #0]

        	/* open file to read */
        	fresult = f_open(&fil, "file.txt", FA_READ);
 800215e:	4940      	ldr	r1, [pc, #256]	; (8002260 <main+0x24c>)
 8002160:	4b40      	ldr	r3, [pc, #256]	; (8002264 <main+0x250>)
 8002162:	2201      	movs	r2, #1
 8002164:	0018      	movs	r0, r3
 8002166:	f005 fa0d 	bl	8007584 <f_open>
 800216a:	0003      	movs	r3, r0
 800216c:	001a      	movs	r2, r3
 800216e:	4b2f      	ldr	r3, [pc, #188]	; (800222c <main+0x218>)
 8002170:	701a      	strb	r2, [r3, #0]

        	/* READ string from the file */
        	f_gets(buffer, sizeof(buffer), &fil);
 8002172:	4a3c      	ldr	r2, [pc, #240]	; (8002264 <main+0x250>)
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	00d9      	lsls	r1, r3, #3
 8002178:	4b35      	ldr	r3, [pc, #212]	; (8002250 <main+0x23c>)
 800217a:	0018      	movs	r0, r3
 800217c:	f006 f82b 	bl	80081d6 <f_gets>

        	send_uart(buffer);
 8002180:	4b33      	ldr	r3, [pc, #204]	; (8002250 <main+0x23c>)
 8002182:	0018      	movs	r0, r3
 8002184:	f7ff fefa 	bl	8001f7c <send_uart>

        	f_close(&fil);
 8002188:	4b36      	ldr	r3, [pc, #216]	; (8002264 <main+0x250>)
 800218a:	0018      	movs	r0, r3
 800218c:	f005 ff32 	bl	8007ff4 <f_close>

        	bufclear();
 8002190:	f7ff ff26 	bl	8001fe0 <bufclear>

      /**************** The following operation is using f_write and f_read *********************/


        	 /* Create second file with read write access and open it */
        	 fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 8002194:	4937      	ldr	r1, [pc, #220]	; (8002274 <main+0x260>)
 8002196:	4b33      	ldr	r3, [pc, #204]	; (8002264 <main+0x250>)
 8002198:	220b      	movs	r2, #11
 800219a:	0018      	movs	r0, r3
 800219c:	f005 f9f2 	bl	8007584 <f_open>
 80021a0:	0003      	movs	r3, r0
 80021a2:	001a      	movs	r2, r3
 80021a4:	4b21      	ldr	r3, [pc, #132]	; (800222c <main+0x218>)
 80021a6:	701a      	strb	r2, [r3, #0]

       	  	/* Writing text */
        	 strcpy (buffer, "This is File2.txt, written using ...f_write... and it says Hello \n");
 80021a8:	4a29      	ldr	r2, [pc, #164]	; (8002250 <main+0x23c>)
 80021aa:	4b33      	ldr	r3, [pc, #204]	; (8002278 <main+0x264>)
 80021ac:	0010      	movs	r0, r2
 80021ae:	0019      	movs	r1, r3
 80021b0:	2343      	movs	r3, #67	; 0x43
 80021b2:	001a      	movs	r2, r3
 80021b4:	f006 f9a8 	bl	8008508 <memcpy>

        	 fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80021b8:	4b25      	ldr	r3, [pc, #148]	; (8002250 <main+0x23c>)
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7ff fefa 	bl	8001fb4 <bufsize>
 80021c0:	0003      	movs	r3, r0
 80021c2:	001a      	movs	r2, r3
 80021c4:	4b2d      	ldr	r3, [pc, #180]	; (800227c <main+0x268>)
 80021c6:	4922      	ldr	r1, [pc, #136]	; (8002250 <main+0x23c>)
 80021c8:	4826      	ldr	r0, [pc, #152]	; (8002264 <main+0x250>)
 80021ca:	f005 fd10 	bl	8007bee <f_write>
 80021ce:	0003      	movs	r3, r0
 80021d0:	001a      	movs	r2, r3
 80021d2:	4b16      	ldr	r3, [pc, #88]	; (800222c <main+0x218>)
 80021d4:	701a      	strb	r2, [r3, #0]

        	 send_uart ("File2.txt created and data is written\n");
 80021d6:	4b2a      	ldr	r3, [pc, #168]	; (8002280 <main+0x26c>)
 80021d8:	0018      	movs	r0, r3
 80021da:	f7ff fecf 	bl	8001f7c <send_uart>

       	  	/* Close file */
        	 f_close(&fil);
 80021de:	4b21      	ldr	r3, [pc, #132]	; (8002264 <main+0x250>)
 80021e0:	0018      	movs	r0, r3
 80021e2:	f005 ff07 	bl	8007ff4 <f_close>

        	 bufclear();
 80021e6:	f7ff fefb 	bl	8001fe0 <bufclear>

        	 /* open second file to read */
        	 fresult =f_open(&fil, "file2.txt", FA_READ);
 80021ea:	4922      	ldr	r1, [pc, #136]	; (8002274 <main+0x260>)
 80021ec:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <main+0x250>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	0018      	movs	r0, r3
 80021f2:	f005 f9c7 	bl	8007584 <f_open>
 80021f6:	0003      	movs	r3, r0
 80021f8:	001a      	movs	r2, r3
 80021fa:	4b0c      	ldr	r3, [pc, #48]	; (800222c <main+0x218>)
 80021fc:	701a      	strb	r2, [r3, #0]

        	 /* READ data from the file */

        	 f_read(&fil, buffer, sizeof(buffer), &br);
 80021fe:	4b21      	ldr	r3, [pc, #132]	; (8002284 <main+0x270>)
 8002200:	2280      	movs	r2, #128	; 0x80
 8002202:	00d2      	lsls	r2, r2, #3
 8002204:	4912      	ldr	r1, [pc, #72]	; (8002250 <main+0x23c>)
 8002206:	4817      	ldr	r0, [pc, #92]	; (8002264 <main+0x250>)
 8002208:	f005 fbb0 	bl	800796c <f_read>
        	 send_uart(buffer);
 800220c:	4b10      	ldr	r3, [pc, #64]	; (8002250 <main+0x23c>)
 800220e:	0018      	movs	r0, r3
 8002210:	f7ff feb4 	bl	8001f7c <send_uart>

        	 f_close(&fil);
 8002214:	4b13      	ldr	r3, [pc, #76]	; (8002264 <main+0x250>)
 8002216:	0018      	movs	r0, r3
 8002218:	f005 feec 	bl	8007ff4 <f_close>

        	 bufclear();
 800221c:	f7ff fee0 	bl	8001fe0 <bufclear>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
 8002220:	e7fe      	b.n	8002220 <main+0x20c>
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	08008dc4 	.word	0x08008dc4
 8002228:	20000198 	.word	0x20000198
 800222c:	200005f8 	.word	0x200005f8
 8002230:	08008dc8 	.word	0x08008dc8
 8002234:	08008dec 	.word	0x08008dec
 8002238:	20000a04 	.word	0x20000a04
 800223c:	20000a08 	.word	0x20000a08
 8002240:	08008e10 	.word	0x08008e10
 8002244:	3fe00000 	.word	0x3fe00000
 8002248:	20000a0c 	.word	0x20000a0c
 800224c:	08008e14 	.word	0x08008e14
 8002250:	200005fc 	.word	0x200005fc
 8002254:	20000a10 	.word	0x20000a10
 8002258:	08008e30 	.word	0x08008e30
 800225c:	20000094 	.word	0x20000094
 8002260:	08008e4c 	.word	0x08008e4c
 8002264:	200003c8 	.word	0x200003c8
 8002268:	08008e58 	.word	0x08008e58
 800226c:	08008e70 	.word	0x08008e70
 8002270:	08008e90 	.word	0x08008e90
 8002274:	08008ebc 	.word	0x08008ebc
 8002278:	08008ec8 	.word	0x08008ec8
 800227c:	20000a00 	.word	0x20000a00
 8002280:	08008f0c 	.word	0x08008f0c
 8002284:	200009fc 	.word	0x200009fc

08002288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b09d      	sub	sp, #116	; 0x74
 800228c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800228e:	2438      	movs	r4, #56	; 0x38
 8002290:	193b      	adds	r3, r7, r4
 8002292:	0018      	movs	r0, r3
 8002294:	2338      	movs	r3, #56	; 0x38
 8002296:	001a      	movs	r2, r3
 8002298:	2100      	movs	r1, #0
 800229a:	f006 f901 	bl	80084a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800229e:	2324      	movs	r3, #36	; 0x24
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	0018      	movs	r0, r3
 80022a4:	2314      	movs	r3, #20
 80022a6:	001a      	movs	r2, r3
 80022a8:	2100      	movs	r1, #0
 80022aa:	f006 f8f9 	bl	80084a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022ae:	003b      	movs	r3, r7
 80022b0:	0018      	movs	r0, r3
 80022b2:	2324      	movs	r3, #36	; 0x24
 80022b4:	001a      	movs	r2, r3
 80022b6:	2100      	movs	r1, #0
 80022b8:	f006 f8f2 	bl	80084a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022bc:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <SystemClock_Config+0xec>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a2d      	ldr	r2, [pc, #180]	; (8002378 <SystemClock_Config+0xf0>)
 80022c2:	401a      	ands	r2, r3
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <SystemClock_Config+0xec>)
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	0109      	lsls	r1, r1, #4
 80022ca:	430a      	orrs	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80022ce:	0021      	movs	r1, r4
 80022d0:	187b      	adds	r3, r7, r1
 80022d2:	220a      	movs	r2, #10
 80022d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022d6:	187b      	adds	r3, r7, r1
 80022d8:	2201      	movs	r2, #1
 80022da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022dc:	187b      	adds	r3, r7, r1
 80022de:	2210      	movs	r2, #16
 80022e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80022e2:	187b      	adds	r3, r7, r1
 80022e4:	2201      	movs	r2, #1
 80022e6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e8:	187b      	adds	r3, r7, r1
 80022ea:	2202      	movs	r2, #2
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022ee:	187b      	adds	r3, r7, r1
 80022f0:	2200      	movs	r2, #0
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80022f4:	187b      	adds	r3, r7, r1
 80022f6:	2200      	movs	r2, #0
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80022fa:	187b      	adds	r3, r7, r1
 80022fc:	2280      	movs	r2, #128	; 0x80
 80022fe:	0412      	lsls	r2, r2, #16
 8002300:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002302:	187b      	adds	r3, r7, r1
 8002304:	0018      	movs	r0, r3
 8002306:	f000 fd7d 	bl	8002e04 <HAL_RCC_OscConfig>
 800230a:	1e03      	subs	r3, r0, #0
 800230c:	d001      	beq.n	8002312 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800230e:	f000 f953 	bl	80025b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002312:	2124      	movs	r1, #36	; 0x24
 8002314:	187b      	adds	r3, r7, r1
 8002316:	220f      	movs	r2, #15
 8002318:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800231a:	187b      	adds	r3, r7, r1
 800231c:	2203      	movs	r2, #3
 800231e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002320:	187b      	adds	r3, r7, r1
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002326:	187b      	adds	r3, r7, r1
 8002328:	2200      	movs	r2, #0
 800232a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800232c:	187b      	adds	r3, r7, r1
 800232e:	2280      	movs	r2, #128	; 0x80
 8002330:	00d2      	lsls	r2, r2, #3
 8002332:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002334:	187b      	adds	r3, r7, r1
 8002336:	2100      	movs	r1, #0
 8002338:	0018      	movs	r0, r3
 800233a:	f001 f927 	bl	800358c <HAL_RCC_ClockConfig>
 800233e:	1e03      	subs	r3, r0, #0
 8002340:	d001      	beq.n	8002346 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002342:	f000 f939 	bl	80025b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8002346:	003b      	movs	r3, r7
 8002348:	2221      	movs	r2, #33	; 0x21
 800234a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800234c:	003b      	movs	r3, r7
 800234e:	2200      	movs	r2, #0
 8002350:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002352:	003b      	movs	r3, r7
 8002354:	2280      	movs	r2, #128	; 0x80
 8002356:	0292      	lsls	r2, r2, #10
 8002358:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800235a:	003b      	movs	r3, r7
 800235c:	0018      	movs	r0, r3
 800235e:	f001 fb39 	bl	80039d4 <HAL_RCCEx_PeriphCLKConfig>
 8002362:	1e03      	subs	r3, r0, #0
 8002364:	d001      	beq.n	800236a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8002366:	f000 f927 	bl	80025b8 <Error_Handler>
  }
}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	46bd      	mov	sp, r7
 800236e:	b01d      	add	sp, #116	; 0x74
 8002370:	bd90      	pop	{r4, r7, pc}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	40007000 	.word	0x40007000
 8002378:	ffffe7ff 	.word	0xffffe7ff

0800237c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	0018      	movs	r0, r3
 8002386:	2314      	movs	r3, #20
 8002388:	001a      	movs	r2, r3
 800238a:	2100      	movs	r1, #0
 800238c:	f006 f888 	bl	80084a0 <memset>
  RTC_DateTypeDef sDate = {0};
 8002390:	003b      	movs	r3, r7
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002396:	4b29      	ldr	r3, [pc, #164]	; (800243c <MX_RTC_Init+0xc0>)
 8002398:	4a29      	ldr	r2, [pc, #164]	; (8002440 <MX_RTC_Init+0xc4>)
 800239a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <MX_RTC_Init+0xc0>)
 800239e:	2200      	movs	r2, #0
 80023a0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80023a2:	4b26      	ldr	r3, [pc, #152]	; (800243c <MX_RTC_Init+0xc0>)
 80023a4:	227f      	movs	r2, #127	; 0x7f
 80023a6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80023a8:	4b24      	ldr	r3, [pc, #144]	; (800243c <MX_RTC_Init+0xc0>)
 80023aa:	22ff      	movs	r2, #255	; 0xff
 80023ac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80023ae:	4b23      	ldr	r3, [pc, #140]	; (800243c <MX_RTC_Init+0xc0>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80023b4:	4b21      	ldr	r3, [pc, #132]	; (800243c <MX_RTC_Init+0xc0>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <MX_RTC_Init+0xc0>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80023c0:	4b1e      	ldr	r3, [pc, #120]	; (800243c <MX_RTC_Init+0xc0>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80023c6:	4b1d      	ldr	r3, [pc, #116]	; (800243c <MX_RTC_Init+0xc0>)
 80023c8:	0018      	movs	r0, r3
 80023ca:	f001 fc91 	bl	8003cf0 <HAL_RTC_Init>
 80023ce:	1e03      	subs	r3, r0, #0
 80023d0:	d001      	beq.n	80023d6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80023d2:	f000 f8f1 	bl	80025b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	2200      	movs	r2, #0
 80023e0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	2200      	movs	r2, #0
 80023e6:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	2200      	movs	r2, #0
 80023f2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80023f4:	1d39      	adds	r1, r7, #4
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <MX_RTC_Init+0xc0>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	0018      	movs	r0, r3
 80023fc:	f001 fd14 	bl	8003e28 <HAL_RTC_SetTime>
 8002400:	1e03      	subs	r3, r0, #0
 8002402:	d001      	beq.n	8002408 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8002404:	f000 f8d8 	bl	80025b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8002408:	003b      	movs	r3, r7
 800240a:	2203      	movs	r2, #3
 800240c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_APRIL;
 800240e:	003b      	movs	r3, r7
 8002410:	2204      	movs	r2, #4
 8002412:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x10;
 8002414:	003b      	movs	r3, r7
 8002416:	2210      	movs	r2, #16
 8002418:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x24;
 800241a:	003b      	movs	r3, r7
 800241c:	2224      	movs	r2, #36	; 0x24
 800241e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002420:	0039      	movs	r1, r7
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <MX_RTC_Init+0xc0>)
 8002424:	2201      	movs	r2, #1
 8002426:	0018      	movs	r0, r3
 8002428:	f001 fda8 	bl	8003f7c <HAL_RTC_SetDate>
 800242c:	1e03      	subs	r3, r0, #0
 800242e:	d001      	beq.n	8002434 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8002430:	f000 f8c2 	bl	80025b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	b006      	add	sp, #24
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000094 	.word	0x20000094
 8002440:	40002800 	.word	0x40002800

08002444 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002448:	4b18      	ldr	r3, [pc, #96]	; (80024ac <MX_SPI2_Init+0x68>)
 800244a:	4a19      	ldr	r2, [pc, #100]	; (80024b0 <MX_SPI2_Init+0x6c>)
 800244c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800244e:	4b17      	ldr	r3, [pc, #92]	; (80024ac <MX_SPI2_Init+0x68>)
 8002450:	2282      	movs	r2, #130	; 0x82
 8002452:	0052      	lsls	r2, r2, #1
 8002454:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <MX_SPI2_Init+0x68>)
 8002458:	2200      	movs	r2, #0
 800245a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <MX_SPI2_Init+0x68>)
 800245e:	2200      	movs	r2, #0
 8002460:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <MX_SPI2_Init+0x68>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <MX_SPI2_Init+0x68>)
 800246a:	2200      	movs	r2, #0
 800246c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <MX_SPI2_Init+0x68>)
 8002470:	2280      	movs	r2, #128	; 0x80
 8002472:	0092      	lsls	r2, r2, #2
 8002474:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <MX_SPI2_Init+0x68>)
 8002478:	2210      	movs	r2, #16
 800247a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <MX_SPI2_Init+0x68>)
 800247e:	2200      	movs	r2, #0
 8002480:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <MX_SPI2_Init+0x68>)
 8002484:	2200      	movs	r2, #0
 8002486:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <MX_SPI2_Init+0x68>)
 800248a:	2200      	movs	r2, #0
 800248c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800248e:	4b07      	ldr	r3, [pc, #28]	; (80024ac <MX_SPI2_Init+0x68>)
 8002490:	2207      	movs	r2, #7
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <MX_SPI2_Init+0x68>)
 8002496:	0018      	movs	r0, r3
 8002498:	f001 ff2a 	bl	80042f0 <HAL_SPI_Init>
 800249c:	1e03      	subs	r3, r0, #0
 800249e:	d001      	beq.n	80024a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80024a0:	f000 f88a 	bl	80025b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	200000b8 	.word	0x200000b8
 80024b0:	40003800 	.word	0x40003800

080024b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024ba:	4a15      	ldr	r2, [pc, #84]	; (8002510 <MX_USART1_UART_Init+0x5c>)
 80024bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024be:	4b13      	ldr	r3, [pc, #76]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024c0:	22e1      	movs	r2, #225	; 0xe1
 80024c2:	0252      	lsls	r2, r2, #9
 80024c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024da:	220c      	movs	r2, #12
 80024dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024f6:	4b05      	ldr	r3, [pc, #20]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024f8:	0018      	movs	r0, r3
 80024fa:	f002 fb95 	bl	8004c28 <HAL_UART_Init>
 80024fe:	1e03      	subs	r3, r0, #0
 8002500:	d001      	beq.n	8002506 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002502:	f000 f859 	bl	80025b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000110 	.word	0x20000110
 8002510:	40013800 	.word	0x40013800

08002514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b089      	sub	sp, #36	; 0x24
 8002518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251a:	240c      	movs	r4, #12
 800251c:	193b      	adds	r3, r7, r4
 800251e:	0018      	movs	r0, r3
 8002520:	2314      	movs	r3, #20
 8002522:	001a      	movs	r2, r3
 8002524:	2100      	movs	r1, #0
 8002526:	f005 ffbb 	bl	80084a0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <MX_GPIO_Init+0x9c>)
 800252c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252e:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <MX_GPIO_Init+0x9c>)
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	430a      	orrs	r2, r1
 8002534:	62da      	str	r2, [r3, #44]	; 0x2c
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <MX_GPIO_Init+0x9c>)
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	2280      	movs	r2, #128	; 0x80
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002542:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <MX_GPIO_Init+0x9c>)
 8002544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002546:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <MX_GPIO_Init+0x9c>)
 8002548:	2102      	movs	r1, #2
 800254a:	430a      	orrs	r2, r1
 800254c:	62da      	str	r2, [r3, #44]	; 0x2c
 800254e:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <MX_GPIO_Init+0x9c>)
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	2202      	movs	r2, #2
 8002554:	4013      	ands	r3, r2
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <MX_GPIO_Init+0x9c>)
 800255c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255e:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <MX_GPIO_Init+0x9c>)
 8002560:	2101      	movs	r1, #1
 8002562:	430a      	orrs	r2, r1
 8002564:	62da      	str	r2, [r3, #44]	; 0x2c
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <MX_GPIO_Init+0x9c>)
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	2201      	movs	r2, #1
 800256c:	4013      	ands	r3, r2
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_SD_CS_GPIO_Port, BSP_SD_CS_Pin, GPIO_PIN_RESET);
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	015b      	lsls	r3, r3, #5
 8002576:	480f      	ldr	r0, [pc, #60]	; (80025b4 <MX_GPIO_Init+0xa0>)
 8002578:	2200      	movs	r2, #0
 800257a:	0019      	movs	r1, r3
 800257c:	f000 fc24 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_SD_CS_Pin */
  GPIO_InitStruct.Pin = BSP_SD_CS_Pin;
 8002580:	193b      	adds	r3, r7, r4
 8002582:	2280      	movs	r2, #128	; 0x80
 8002584:	0152      	lsls	r2, r2, #5
 8002586:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002588:	193b      	adds	r3, r7, r4
 800258a:	2201      	movs	r2, #1
 800258c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	193b      	adds	r3, r7, r4
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002594:	193b      	adds	r3, r7, r4
 8002596:	2200      	movs	r2, #0
 8002598:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_SD_CS_GPIO_Port, &GPIO_InitStruct);
 800259a:	193b      	adds	r3, r7, r4
 800259c:	4a05      	ldr	r2, [pc, #20]	; (80025b4 <MX_GPIO_Init+0xa0>)
 800259e:	0019      	movs	r1, r3
 80025a0:	0010      	movs	r0, r2
 80025a2:	f000 fa9b 	bl	8002adc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b009      	add	sp, #36	; 0x24
 80025ac:	bd90      	pop	{r4, r7, pc}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	40021000 	.word	0x40021000
 80025b4:	50000400 	.word	0x50000400

080025b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025bc:	b672      	cpsid	i
}
 80025be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <Error_Handler+0x8>
	...

080025c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c8:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <HAL_MspInit+0x24>)
 80025ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_MspInit+0x24>)
 80025ce:	2101      	movs	r1, #1
 80025d0:	430a      	orrs	r2, r1
 80025d2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80025d4:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <HAL_MspInit+0x24>)
 80025d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <HAL_MspInit+0x24>)
 80025da:	2180      	movs	r1, #128	; 0x80
 80025dc:	0549      	lsls	r1, r1, #21
 80025de:	430a      	orrs	r2, r1
 80025e0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40021000 	.word	0x40021000

080025ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a06      	ldr	r2, [pc, #24]	; (8002614 <HAL_RTC_MspInit+0x28>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d106      	bne.n	800260c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_RTC_MspInit+0x2c>)
 8002600:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002602:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_RTC_MspInit+0x2c>)
 8002604:	2180      	movs	r1, #128	; 0x80
 8002606:	02c9      	lsls	r1, r1, #11
 8002608:	430a      	orrs	r2, r1
 800260a:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b002      	add	sp, #8
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40002800 	.word	0x40002800
 8002618:	40021000 	.word	0x40021000

0800261c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800261c:	b590      	push	{r4, r7, lr}
 800261e:	b089      	sub	sp, #36	; 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	240c      	movs	r4, #12
 8002626:	193b      	adds	r3, r7, r4
 8002628:	0018      	movs	r0, r3
 800262a:	2314      	movs	r3, #20
 800262c:	001a      	movs	r2, r3
 800262e:	2100      	movs	r1, #0
 8002630:	f005 ff36 	bl	80084a0 <memset>
  if(hspi->Instance==SPI2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a18      	ldr	r2, [pc, #96]	; (800269c <HAL_SPI_MspInit+0x80>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d129      	bne.n	8002692 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800263e:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <HAL_SPI_MspInit+0x84>)
 8002640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002642:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <HAL_SPI_MspInit+0x84>)
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	01c9      	lsls	r1, r1, #7
 8002648:	430a      	orrs	r2, r1
 800264a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <HAL_SPI_MspInit+0x84>)
 800264e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <HAL_SPI_MspInit+0x84>)
 8002652:	2102      	movs	r1, #2
 8002654:	430a      	orrs	r2, r1
 8002656:	62da      	str	r2, [r3, #44]	; 0x2c
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_SPI_MspInit+0x84>)
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	2202      	movs	r2, #2
 800265e:	4013      	ands	r3, r2
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = BSP_SPI2_SCK_Pin|BSP_SPI2_MISO_Pin|BSP_SPI2_MOSI_Pin;
 8002664:	193b      	adds	r3, r7, r4
 8002666:	22e0      	movs	r2, #224	; 0xe0
 8002668:	0212      	lsls	r2, r2, #8
 800266a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266c:	0021      	movs	r1, r4
 800266e:	187b      	adds	r3, r7, r1
 8002670:	2202      	movs	r2, #2
 8002672:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	187b      	adds	r3, r7, r1
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267a:	187b      	adds	r3, r7, r1
 800267c:	2203      	movs	r2, #3
 800267e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002680:	187b      	adds	r3, r7, r1
 8002682:	2200      	movs	r2, #0
 8002684:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002686:	187b      	adds	r3, r7, r1
 8002688:	4a06      	ldr	r2, [pc, #24]	; (80026a4 <HAL_SPI_MspInit+0x88>)
 800268a:	0019      	movs	r1, r3
 800268c:	0010      	movs	r0, r2
 800268e:	f000 fa25 	bl	8002adc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	46bd      	mov	sp, r7
 8002696:	b009      	add	sp, #36	; 0x24
 8002698:	bd90      	pop	{r4, r7, pc}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	40003800 	.word	0x40003800
 80026a0:	40021000 	.word	0x40021000
 80026a4:	50000400 	.word	0x50000400

080026a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	240c      	movs	r4, #12
 80026b2:	193b      	adds	r3, r7, r4
 80026b4:	0018      	movs	r0, r3
 80026b6:	2314      	movs	r3, #20
 80026b8:	001a      	movs	r2, r3
 80026ba:	2100      	movs	r1, #0
 80026bc:	f005 fef0 	bl	80084a0 <memset>
  if(huart->Instance==USART1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a18      	ldr	r2, [pc, #96]	; (8002728 <HAL_UART_MspInit+0x80>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d12a      	bne.n	8002720 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ca:	4b18      	ldr	r3, [pc, #96]	; (800272c <HAL_UART_MspInit+0x84>)
 80026cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ce:	4b17      	ldr	r3, [pc, #92]	; (800272c <HAL_UART_MspInit+0x84>)
 80026d0:	2180      	movs	r1, #128	; 0x80
 80026d2:	01c9      	lsls	r1, r1, #7
 80026d4:	430a      	orrs	r2, r1
 80026d6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d8:	4b14      	ldr	r3, [pc, #80]	; (800272c <HAL_UART_MspInit+0x84>)
 80026da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <HAL_UART_MspInit+0x84>)
 80026de:	2101      	movs	r1, #1
 80026e0:	430a      	orrs	r2, r1
 80026e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <HAL_UART_MspInit+0x84>)
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	2201      	movs	r2, #1
 80026ea:	4013      	ands	r3, r2
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_USART1_TX_Pin|BSP_USART1_RX_Pin;
 80026f0:	193b      	adds	r3, r7, r4
 80026f2:	22c0      	movs	r2, #192	; 0xc0
 80026f4:	00d2      	lsls	r2, r2, #3
 80026f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	0021      	movs	r1, r4
 80026fa:	187b      	adds	r3, r7, r1
 80026fc:	2202      	movs	r2, #2
 80026fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	187b      	adds	r3, r7, r1
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002706:	187b      	adds	r3, r7, r1
 8002708:	2203      	movs	r2, #3
 800270a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800270c:	187b      	adds	r3, r7, r1
 800270e:	2204      	movs	r2, #4
 8002710:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002712:	187a      	adds	r2, r7, r1
 8002714:	23a0      	movs	r3, #160	; 0xa0
 8002716:	05db      	lsls	r3, r3, #23
 8002718:	0011      	movs	r1, r2
 800271a:	0018      	movs	r0, r3
 800271c:	f000 f9de 	bl	8002adc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002720:	46c0      	nop			; (mov r8, r8)
 8002722:	46bd      	mov	sp, r7
 8002724:	b009      	add	sp, #36	; 0x24
 8002726:	bd90      	pop	{r4, r7, pc}
 8002728:	40013800 	.word	0x40013800
 800272c:	40021000 	.word	0x40021000

08002730 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002734:	4b0d      	ldr	r3, [pc, #52]	; (800276c <SDTimer_Handler+0x3c>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d006      	beq.n	800274c <SDTimer_Handler+0x1c>
    Timer1--;
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <SDTimer_Handler+0x3c>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b2da      	uxtb	r2, r3
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <SDTimer_Handler+0x3c>)
 800274a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <SDTimer_Handler+0x40>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d006      	beq.n	8002764 <SDTimer_Handler+0x34>
	  Timer2--;
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <SDTimer_Handler+0x40>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b2da      	uxtb	r2, r3
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <SDTimer_Handler+0x40>)
 8002762:	701a      	strb	r2, [r3, #0]

}
 8002764:	46c0      	nop			; (mov r8, r8)
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	20000a15 	.word	0x20000a15
 8002770:	20000a16 	.word	0x20000a16

08002774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002778:	e7fe      	b.n	8002778 <NMI_Handler+0x4>

0800277a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800277e:	e7fe      	b.n	800277e <HardFault_Handler+0x4>

08002780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8002798:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <SysTick_Handler+0x30>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	3301      	adds	r3, #1
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <SysTick_Handler+0x30>)
 80027a4:	701a      	strb	r2, [r3, #0]
			  if(FatFsCnt >= 10)
 80027a6:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <SysTick_Handler+0x30>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b09      	cmp	r3, #9
 80027ae:	d904      	bls.n	80027ba <SysTick_Handler+0x26>
			  {
			    FatFsCnt = 0;
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <SysTick_Handler+0x30>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
			    SDTimer_Handler();
 80027b6:	f7ff ffbb 	bl	8002730 <SDTimer_Handler>
			  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ba:	f000 f8bf 	bl	800293c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000a14 	.word	0x20000a14

080027c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d0:	4a14      	ldr	r2, [pc, #80]	; (8002824 <_sbrk+0x5c>)
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <_sbrk+0x60>)
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027dc:	4b13      	ldr	r3, [pc, #76]	; (800282c <_sbrk+0x64>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <_sbrk+0x64>)
 80027e6:	4a12      	ldr	r2, [pc, #72]	; (8002830 <_sbrk+0x68>)
 80027e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <_sbrk+0x64>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	18d3      	adds	r3, r2, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d207      	bcs.n	8002808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f8:	f005 fe5a 	bl	80084b0 <__errno>
 80027fc:	0003      	movs	r3, r0
 80027fe:	220c      	movs	r2, #12
 8002800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002802:	2301      	movs	r3, #1
 8002804:	425b      	negs	r3, r3
 8002806:	e009      	b.n	800281c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <_sbrk+0x64>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <_sbrk+0x64>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	18d2      	adds	r2, r2, r3
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <_sbrk+0x64>)
 8002818:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	0018      	movs	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	b006      	add	sp, #24
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20002000 	.word	0x20002000
 8002828:	00000400 	.word	0x00000400
 800282c:	20000a18 	.word	0x20000a18
 8002830:	20000ba8 	.word	0x20000ba8

08002834 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002838:	46c0      	nop			; (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8002840:	480d      	ldr	r0, [pc, #52]	; (8002878 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002842:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002844:	f7ff fff6 	bl	8002834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002848:	480c      	ldr	r0, [pc, #48]	; (800287c <LoopForever+0x6>)
  ldr r1, =_edata
 800284a:	490d      	ldr	r1, [pc, #52]	; (8002880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800284c:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <LoopForever+0xe>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002850:	e002      	b.n	8002858 <LoopCopyDataInit>

08002852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002856:	3304      	adds	r3, #4

08002858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800285c:	d3f9      	bcc.n	8002852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002860:	4c0a      	ldr	r4, [pc, #40]	; (800288c <LoopForever+0x16>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002864:	e001      	b.n	800286a <LoopFillZerobss>

08002866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002868:	3204      	adds	r2, #4

0800286a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800286c:	d3fb      	bcc.n	8002866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800286e:	f005 fe25 	bl	80084bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002872:	f7ff fbcf 	bl	8002014 <main>

08002876 <LoopForever>:

LoopForever:
    b LoopForever
 8002876:	e7fe      	b.n	8002876 <LoopForever>
  ldr   r0, =_estack
 8002878:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800287c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002880:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002884:	080090e0 	.word	0x080090e0
  ldr r2, =_sbss
 8002888:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800288c:	20000ba4 	.word	0x20000ba4

08002890 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002890:	e7fe      	b.n	8002890 <ADC1_COMP_IRQHandler>
	...

08002894 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800289a:	1dfb      	adds	r3, r7, #7
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_Init+0x3c>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <HAL_Init+0x3c>)
 80028a6:	2140      	movs	r1, #64	; 0x40
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028ac:	2000      	movs	r0, #0
 80028ae:	f000 f811 	bl	80028d4 <HAL_InitTick>
 80028b2:	1e03      	subs	r3, r0, #0
 80028b4:	d003      	beq.n	80028be <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80028b6:	1dfb      	adds	r3, r7, #7
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
 80028bc:	e001      	b.n	80028c2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028be:	f7ff fe81 	bl	80025c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028c2:	1dfb      	adds	r3, r7, #7
 80028c4:	781b      	ldrb	r3, [r3, #0]
}
 80028c6:	0018      	movs	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b002      	add	sp, #8
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	40022000 	.word	0x40022000

080028d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028dc:	4b14      	ldr	r3, [pc, #80]	; (8002930 <HAL_InitTick+0x5c>)
 80028de:	681c      	ldr	r4, [r3, #0]
 80028e0:	4b14      	ldr	r3, [pc, #80]	; (8002934 <HAL_InitTick+0x60>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	0019      	movs	r1, r3
 80028e6:	23fa      	movs	r3, #250	; 0xfa
 80028e8:	0098      	lsls	r0, r3, #2
 80028ea:	f7fd fc1f 	bl	800012c <__udivsi3>
 80028ee:	0003      	movs	r3, r0
 80028f0:	0019      	movs	r1, r3
 80028f2:	0020      	movs	r0, r4
 80028f4:	f7fd fc1a 	bl	800012c <__udivsi3>
 80028f8:	0003      	movs	r3, r0
 80028fa:	0018      	movs	r0, r3
 80028fc:	f000 f8e1 	bl	8002ac2 <HAL_SYSTICK_Config>
 8002900:	1e03      	subs	r3, r0, #0
 8002902:	d001      	beq.n	8002908 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e00f      	b.n	8002928 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d80b      	bhi.n	8002926 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	2301      	movs	r3, #1
 8002912:	425b      	negs	r3, r3
 8002914:	2200      	movs	r2, #0
 8002916:	0018      	movs	r0, r3
 8002918:	f000 f8be 	bl	8002a98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_InitTick+0x64>)
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	e000      	b.n	8002928 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
}
 8002928:	0018      	movs	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	b003      	add	sp, #12
 800292e:	bd90      	pop	{r4, r7, pc}
 8002930:	20000004 	.word	0x20000004
 8002934:	2000000c 	.word	0x2000000c
 8002938:	20000008 	.word	0x20000008

0800293c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_IncTick+0x1c>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	001a      	movs	r2, r3
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_IncTick+0x20>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	18d2      	adds	r2, r2, r3
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <HAL_IncTick+0x20>)
 800294e:	601a      	str	r2, [r3, #0]
}
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	2000000c 	.word	0x2000000c
 800295c:	20000a1c 	.word	0x20000a1c

08002960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  return uwTick;
 8002964:	4b02      	ldr	r3, [pc, #8]	; (8002970 <HAL_GetTick+0x10>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	0018      	movs	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	20000a1c 	.word	0x20000a1c

08002974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	0002      	movs	r2, r0
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	1dfb      	adds	r3, r7, #7
 8002980:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002982:	1dfb      	adds	r3, r7, #7
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b7f      	cmp	r3, #127	; 0x7f
 8002988:	d828      	bhi.n	80029dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800298a:	4a2f      	ldr	r2, [pc, #188]	; (8002a48 <__NVIC_SetPriority+0xd4>)
 800298c:	1dfb      	adds	r3, r7, #7
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	b25b      	sxtb	r3, r3
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	33c0      	adds	r3, #192	; 0xc0
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	589b      	ldr	r3, [r3, r2]
 800299a:	1dfa      	adds	r2, r7, #7
 800299c:	7812      	ldrb	r2, [r2, #0]
 800299e:	0011      	movs	r1, r2
 80029a0:	2203      	movs	r2, #3
 80029a2:	400a      	ands	r2, r1
 80029a4:	00d2      	lsls	r2, r2, #3
 80029a6:	21ff      	movs	r1, #255	; 0xff
 80029a8:	4091      	lsls	r1, r2
 80029aa:	000a      	movs	r2, r1
 80029ac:	43d2      	mvns	r2, r2
 80029ae:	401a      	ands	r2, r3
 80029b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	019b      	lsls	r3, r3, #6
 80029b6:	22ff      	movs	r2, #255	; 0xff
 80029b8:	401a      	ands	r2, r3
 80029ba:	1dfb      	adds	r3, r7, #7
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	0018      	movs	r0, r3
 80029c0:	2303      	movs	r3, #3
 80029c2:	4003      	ands	r3, r0
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029c8:	481f      	ldr	r0, [pc, #124]	; (8002a48 <__NVIC_SetPriority+0xd4>)
 80029ca:	1dfb      	adds	r3, r7, #7
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	b25b      	sxtb	r3, r3
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	430a      	orrs	r2, r1
 80029d4:	33c0      	adds	r3, #192	; 0xc0
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80029da:	e031      	b.n	8002a40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029dc:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <__NVIC_SetPriority+0xd8>)
 80029de:	1dfb      	adds	r3, r7, #7
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	0019      	movs	r1, r3
 80029e4:	230f      	movs	r3, #15
 80029e6:	400b      	ands	r3, r1
 80029e8:	3b08      	subs	r3, #8
 80029ea:	089b      	lsrs	r3, r3, #2
 80029ec:	3306      	adds	r3, #6
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	18d3      	adds	r3, r2, r3
 80029f2:	3304      	adds	r3, #4
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	1dfa      	adds	r2, r7, #7
 80029f8:	7812      	ldrb	r2, [r2, #0]
 80029fa:	0011      	movs	r1, r2
 80029fc:	2203      	movs	r2, #3
 80029fe:	400a      	ands	r2, r1
 8002a00:	00d2      	lsls	r2, r2, #3
 8002a02:	21ff      	movs	r1, #255	; 0xff
 8002a04:	4091      	lsls	r1, r2
 8002a06:	000a      	movs	r2, r1
 8002a08:	43d2      	mvns	r2, r2
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	019b      	lsls	r3, r3, #6
 8002a12:	22ff      	movs	r2, #255	; 0xff
 8002a14:	401a      	ands	r2, r3
 8002a16:	1dfb      	adds	r3, r7, #7
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	4003      	ands	r3, r0
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a24:	4809      	ldr	r0, [pc, #36]	; (8002a4c <__NVIC_SetPriority+0xd8>)
 8002a26:	1dfb      	adds	r3, r7, #7
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	001c      	movs	r4, r3
 8002a2c:	230f      	movs	r3, #15
 8002a2e:	4023      	ands	r3, r4
 8002a30:	3b08      	subs	r3, #8
 8002a32:	089b      	lsrs	r3, r3, #2
 8002a34:	430a      	orrs	r2, r1
 8002a36:	3306      	adds	r3, #6
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	18c3      	adds	r3, r0, r3
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	601a      	str	r2, [r3, #0]
}
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b003      	add	sp, #12
 8002a46:	bd90      	pop	{r4, r7, pc}
 8002a48:	e000e100 	.word	0xe000e100
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	1e5a      	subs	r2, r3, #1
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	045b      	lsls	r3, r3, #17
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d301      	bcc.n	8002a68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a64:	2301      	movs	r3, #1
 8002a66:	e010      	b.n	8002a8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a68:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <SysTick_Config+0x44>)
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	3a01      	subs	r2, #1
 8002a6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a70:	2301      	movs	r3, #1
 8002a72:	425b      	negs	r3, r3
 8002a74:	2103      	movs	r1, #3
 8002a76:	0018      	movs	r0, r3
 8002a78:	f7ff ff7c 	bl	8002974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <SysTick_Config+0x44>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a82:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <SysTick_Config+0x44>)
 8002a84:	2207      	movs	r2, #7
 8002a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b002      	add	sp, #8
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	e000e010 	.word	0xe000e010

08002a98 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	210f      	movs	r1, #15
 8002aa4:	187b      	adds	r3, r7, r1
 8002aa6:	1c02      	adds	r2, r0, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	187b      	adds	r3, r7, r1
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	b25b      	sxtb	r3, r3
 8002ab2:	0011      	movs	r1, r2
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f7ff ff5d 	bl	8002974 <__NVIC_SetPriority>
}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b004      	add	sp, #16
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	0018      	movs	r0, r3
 8002ace:	f7ff ffbf 	bl	8002a50 <SysTick_Config>
 8002ad2:	0003      	movs	r3, r0
}
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002af2:	e14f      	b.n	8002d94 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2101      	movs	r1, #1
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4091      	lsls	r1, r2
 8002afe:	000a      	movs	r2, r1
 8002b00:	4013      	ands	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d100      	bne.n	8002b0c <HAL_GPIO_Init+0x30>
 8002b0a:	e140      	b.n	8002d8e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2203      	movs	r2, #3
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d005      	beq.n	8002b24 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d130      	bne.n	8002b86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	2203      	movs	r2, #3
 8002b30:	409a      	lsls	r2, r3
 8002b32:	0013      	movs	r3, r2
 8002b34:	43da      	mvns	r2, r3
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	409a      	lsls	r2, r3
 8002b46:	0013      	movs	r3, r2
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	0013      	movs	r3, r2
 8002b62:	43da      	mvns	r2, r3
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	2201      	movs	r2, #1
 8002b72:	401a      	ands	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	409a      	lsls	r2, r3
 8002b78:	0013      	movs	r3, r2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d017      	beq.n	8002bc2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	0013      	movs	r3, r2
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	0013      	movs	r3, r2
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d123      	bne.n	8002c16 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	08da      	lsrs	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3208      	adds	r2, #8
 8002bd6:	0092      	lsls	r2, r2, #2
 8002bd8:	58d3      	ldr	r3, [r2, r3]
 8002bda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2207      	movs	r2, #7
 8002be0:	4013      	ands	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	220f      	movs	r2, #15
 8002be6:	409a      	lsls	r2, r3
 8002be8:	0013      	movs	r3, r2
 8002bea:	43da      	mvns	r2, r3
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2107      	movs	r1, #7
 8002bfa:	400b      	ands	r3, r1
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	0013      	movs	r3, r2
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	08da      	lsrs	r2, r3, #3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3208      	adds	r2, #8
 8002c10:	0092      	lsls	r2, r2, #2
 8002c12:	6939      	ldr	r1, [r7, #16]
 8002c14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	2203      	movs	r2, #3
 8002c22:	409a      	lsls	r2, r3
 8002c24:	0013      	movs	r3, r2
 8002c26:	43da      	mvns	r2, r3
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2203      	movs	r2, #3
 8002c34:	401a      	ands	r2, r3
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	0013      	movs	r3, r2
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	23c0      	movs	r3, #192	; 0xc0
 8002c50:	029b      	lsls	r3, r3, #10
 8002c52:	4013      	ands	r3, r2
 8002c54:	d100      	bne.n	8002c58 <HAL_GPIO_Init+0x17c>
 8002c56:	e09a      	b.n	8002d8e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c58:	4b54      	ldr	r3, [pc, #336]	; (8002dac <HAL_GPIO_Init+0x2d0>)
 8002c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5c:	4b53      	ldr	r3, [pc, #332]	; (8002dac <HAL_GPIO_Init+0x2d0>)
 8002c5e:	2101      	movs	r1, #1
 8002c60:	430a      	orrs	r2, r1
 8002c62:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c64:	4a52      	ldr	r2, [pc, #328]	; (8002db0 <HAL_GPIO_Init+0x2d4>)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	089b      	lsrs	r3, r3, #2
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	589b      	ldr	r3, [r3, r2]
 8002c70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2203      	movs	r2, #3
 8002c76:	4013      	ands	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	220f      	movs	r2, #15
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	0013      	movs	r3, r2
 8002c80:	43da      	mvns	r2, r3
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4013      	ands	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	23a0      	movs	r3, #160	; 0xa0
 8002c8c:	05db      	lsls	r3, r3, #23
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d019      	beq.n	8002cc6 <HAL_GPIO_Init+0x1ea>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a47      	ldr	r2, [pc, #284]	; (8002db4 <HAL_GPIO_Init+0x2d8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d013      	beq.n	8002cc2 <HAL_GPIO_Init+0x1e6>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a46      	ldr	r2, [pc, #280]	; (8002db8 <HAL_GPIO_Init+0x2dc>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00d      	beq.n	8002cbe <HAL_GPIO_Init+0x1e2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a45      	ldr	r2, [pc, #276]	; (8002dbc <HAL_GPIO_Init+0x2e0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d007      	beq.n	8002cba <HAL_GPIO_Init+0x1de>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a44      	ldr	r2, [pc, #272]	; (8002dc0 <HAL_GPIO_Init+0x2e4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d101      	bne.n	8002cb6 <HAL_GPIO_Init+0x1da>
 8002cb2:	2305      	movs	r3, #5
 8002cb4:	e008      	b.n	8002cc8 <HAL_GPIO_Init+0x1ec>
 8002cb6:	2306      	movs	r3, #6
 8002cb8:	e006      	b.n	8002cc8 <HAL_GPIO_Init+0x1ec>
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e004      	b.n	8002cc8 <HAL_GPIO_Init+0x1ec>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e002      	b.n	8002cc8 <HAL_GPIO_Init+0x1ec>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <HAL_GPIO_Init+0x1ec>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	2103      	movs	r1, #3
 8002ccc:	400a      	ands	r2, r1
 8002cce:	0092      	lsls	r2, r2, #2
 8002cd0:	4093      	lsls	r3, r2
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd8:	4935      	ldr	r1, [pc, #212]	; (8002db0 <HAL_GPIO_Init+0x2d4>)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	089b      	lsrs	r3, r3, #2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce6:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	2380      	movs	r3, #128	; 0x80
 8002cfc:	035b      	lsls	r3, r3, #13
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d0a:	4b2e      	ldr	r3, [pc, #184]	; (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002d10:	4b2c      	ldr	r3, [pc, #176]	; (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	43da      	mvns	r2, r3
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	039b      	lsls	r3, r3, #14
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d34:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002d3a:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	43da      	mvns	r2, r3
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4013      	ands	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	2380      	movs	r3, #128	; 0x80
 8002d50:	029b      	lsls	r3, r3, #10
 8002d52:	4013      	ands	r3, r2
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d5e:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d64:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	43da      	mvns	r2, r3
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	025b      	lsls	r3, r3, #9
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d88:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	3301      	adds	r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	40da      	lsrs	r2, r3
 8002d9c:	1e13      	subs	r3, r2, #0
 8002d9e:	d000      	beq.n	8002da2 <HAL_GPIO_Init+0x2c6>
 8002da0:	e6a8      	b.n	8002af4 <HAL_GPIO_Init+0x18>
  }
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b006      	add	sp, #24
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40010000 	.word	0x40010000
 8002db4:	50000400 	.word	0x50000400
 8002db8:	50000800 	.word	0x50000800
 8002dbc:	50000c00 	.word	0x50000c00
 8002dc0:	50001c00 	.word	0x50001c00
 8002dc4:	40010400 	.word	0x40010400

08002dc8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	0008      	movs	r0, r1
 8002dd2:	0011      	movs	r1, r2
 8002dd4:	1cbb      	adds	r3, r7, #2
 8002dd6:	1c02      	adds	r2, r0, #0
 8002dd8:	801a      	strh	r2, [r3, #0]
 8002dda:	1c7b      	adds	r3, r7, #1
 8002ddc:	1c0a      	adds	r2, r1, #0
 8002dde:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002de0:	1c7b      	adds	r3, r7, #1
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002de8:	1cbb      	adds	r3, r7, #2
 8002dea:	881a      	ldrh	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002df0:	e003      	b.n	8002dfa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002df2:	1cbb      	adds	r3, r7, #2
 8002df4:	881a      	ldrh	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b002      	add	sp, #8
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e04:	b5b0      	push	{r4, r5, r7, lr}
 8002e06:	b08a      	sub	sp, #40	; 0x28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f000 fbaf 	bl	8003576 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e18:	4bcf      	ldr	r3, [pc, #828]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	220c      	movs	r2, #12
 8002e1e:	4013      	ands	r3, r2
 8002e20:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e22:	4bcd      	ldr	r3, [pc, #820]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	025b      	lsls	r3, r3, #9
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2201      	movs	r2, #1
 8002e34:	4013      	ands	r3, r2
 8002e36:	d100      	bne.n	8002e3a <HAL_RCC_OscConfig+0x36>
 8002e38:	e07e      	b.n	8002f38 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d007      	beq.n	8002e50 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	d112      	bne.n	8002e6c <HAL_RCC_OscConfig+0x68>
 8002e46:	69fa      	ldr	r2, [r7, #28]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	025b      	lsls	r3, r3, #9
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d10d      	bne.n	8002e6c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e50:	4bc1      	ldr	r3, [pc, #772]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	2380      	movs	r3, #128	; 0x80
 8002e56:	029b      	lsls	r3, r3, #10
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d100      	bne.n	8002e5e <HAL_RCC_OscConfig+0x5a>
 8002e5c:	e06b      	b.n	8002f36 <HAL_RCC_OscConfig+0x132>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d167      	bne.n	8002f36 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f000 fb85 	bl	8003576 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	025b      	lsls	r3, r3, #9
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d107      	bne.n	8002e88 <HAL_RCC_OscConfig+0x84>
 8002e78:	4bb7      	ldr	r3, [pc, #732]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4bb6      	ldr	r3, [pc, #728]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002e7e:	2180      	movs	r1, #128	; 0x80
 8002e80:	0249      	lsls	r1, r1, #9
 8002e82:	430a      	orrs	r2, r1
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	e027      	b.n	8002ed8 <HAL_RCC_OscConfig+0xd4>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	23a0      	movs	r3, #160	; 0xa0
 8002e8e:	02db      	lsls	r3, r3, #11
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d10e      	bne.n	8002eb2 <HAL_RCC_OscConfig+0xae>
 8002e94:	4bb0      	ldr	r3, [pc, #704]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4baf      	ldr	r3, [pc, #700]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002e9a:	2180      	movs	r1, #128	; 0x80
 8002e9c:	02c9      	lsls	r1, r1, #11
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	4bad      	ldr	r3, [pc, #692]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4bac      	ldr	r3, [pc, #688]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002ea8:	2180      	movs	r1, #128	; 0x80
 8002eaa:	0249      	lsls	r1, r1, #9
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e012      	b.n	8002ed8 <HAL_RCC_OscConfig+0xd4>
 8002eb2:	4ba9      	ldr	r3, [pc, #676]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4ba8      	ldr	r3, [pc, #672]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002eb8:	49a8      	ldr	r1, [pc, #672]	; (800315c <HAL_RCC_OscConfig+0x358>)
 8002eba:	400a      	ands	r2, r1
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	4ba6      	ldr	r3, [pc, #664]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	025b      	lsls	r3, r3, #9
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4ba2      	ldr	r3, [pc, #648]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4ba1      	ldr	r3, [pc, #644]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002ed2:	49a3      	ldr	r1, [pc, #652]	; (8003160 <HAL_RCC_OscConfig+0x35c>)
 8002ed4:	400a      	ands	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d015      	beq.n	8002f0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7ff fd3e 	bl	8002960 <HAL_GetTick>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ee8:	e009      	b.n	8002efe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eea:	f7ff fd39 	bl	8002960 <HAL_GetTick>
 8002eee:	0002      	movs	r2, r0
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b64      	cmp	r3, #100	; 0x64
 8002ef6:	d902      	bls.n	8002efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	f000 fb3c 	bl	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002efe:	4b96      	ldr	r3, [pc, #600]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	029b      	lsls	r3, r3, #10
 8002f06:	4013      	ands	r3, r2
 8002f08:	d0ef      	beq.n	8002eea <HAL_RCC_OscConfig+0xe6>
 8002f0a:	e015      	b.n	8002f38 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7ff fd28 	bl	8002960 <HAL_GetTick>
 8002f10:	0003      	movs	r3, r0
 8002f12:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f16:	f7ff fd23 	bl	8002960 <HAL_GetTick>
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b64      	cmp	r3, #100	; 0x64
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e326      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f28:	4b8b      	ldr	r3, [pc, #556]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	029b      	lsls	r3, r3, #10
 8002f30:	4013      	ands	r3, r2
 8002f32:	d1f0      	bne.n	8002f16 <HAL_RCC_OscConfig+0x112>
 8002f34:	e000      	b.n	8002f38 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f36:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d100      	bne.n	8002f44 <HAL_RCC_OscConfig+0x140>
 8002f42:	e08b      	b.n	800305c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	2b0c      	cmp	r3, #12
 8002f54:	d13e      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x1d0>
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d13b      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002f5c:	4b7e      	ldr	r3, [pc, #504]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2204      	movs	r2, #4
 8002f62:	4013      	ands	r3, r2
 8002f64:	d004      	beq.n	8002f70 <HAL_RCC_OscConfig+0x16c>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e302      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f70:	4b79      	ldr	r3, [pc, #484]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a7b      	ldr	r2, [pc, #492]	; (8003164 <HAL_RCC_OscConfig+0x360>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	0019      	movs	r1, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	021a      	lsls	r2, r3, #8
 8002f80:	4b75      	ldr	r3, [pc, #468]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002f86:	4b74      	ldr	r3, [pc, #464]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2209      	movs	r2, #9
 8002f8c:	4393      	bics	r3, r2
 8002f8e:	0019      	movs	r1, r3
 8002f90:	4b71      	ldr	r3, [pc, #452]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f98:	f000 fc40 	bl	800381c <HAL_RCC_GetSysClockFreq>
 8002f9c:	0001      	movs	r1, r0
 8002f9e:	4b6e      	ldr	r3, [pc, #440]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	220f      	movs	r2, #15
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	4a6f      	ldr	r2, [pc, #444]	; (8003168 <HAL_RCC_OscConfig+0x364>)
 8002faa:	5cd3      	ldrb	r3, [r2, r3]
 8002fac:	000a      	movs	r2, r1
 8002fae:	40da      	lsrs	r2, r3
 8002fb0:	4b6e      	ldr	r3, [pc, #440]	; (800316c <HAL_RCC_OscConfig+0x368>)
 8002fb2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002fb4:	4b6e      	ldr	r3, [pc, #440]	; (8003170 <HAL_RCC_OscConfig+0x36c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2513      	movs	r5, #19
 8002fba:	197c      	adds	r4, r7, r5
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f7ff fc89 	bl	80028d4 <HAL_InitTick>
 8002fc2:	0003      	movs	r3, r0
 8002fc4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002fc6:	197b      	adds	r3, r7, r5
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d046      	beq.n	800305c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002fce:	197b      	adds	r3, r7, r5
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	e2d0      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d027      	beq.n	800302a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002fda:	4b5f      	ldr	r3, [pc, #380]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2209      	movs	r2, #9
 8002fe0:	4393      	bics	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	4b5c      	ldr	r3, [pc, #368]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7ff fcb8 	bl	8002960 <HAL_GetTick>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff6:	f7ff fcb3 	bl	8002960 <HAL_GetTick>
 8002ffa:	0002      	movs	r2, r0
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e2b6      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003008:	4b53      	ldr	r3, [pc, #332]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2204      	movs	r2, #4
 800300e:	4013      	ands	r3, r2
 8003010:	d0f1      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003012:	4b51      	ldr	r3, [pc, #324]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4a53      	ldr	r2, [pc, #332]	; (8003164 <HAL_RCC_OscConfig+0x360>)
 8003018:	4013      	ands	r3, r2
 800301a:	0019      	movs	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	021a      	lsls	r2, r3, #8
 8003022:	4b4d      	ldr	r3, [pc, #308]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003024:	430a      	orrs	r2, r1
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	e018      	b.n	800305c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302a:	4b4b      	ldr	r3, [pc, #300]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4b4a      	ldr	r3, [pc, #296]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003030:	2101      	movs	r1, #1
 8003032:	438a      	bics	r2, r1
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7ff fc93 	bl	8002960 <HAL_GetTick>
 800303a:	0003      	movs	r3, r0
 800303c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003040:	f7ff fc8e 	bl	8002960 <HAL_GetTick>
 8003044:	0002      	movs	r2, r0
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e291      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003052:	4b41      	ldr	r3, [pc, #260]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2204      	movs	r2, #4
 8003058:	4013      	ands	r3, r2
 800305a:	d1f1      	bne.n	8003040 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2210      	movs	r2, #16
 8003062:	4013      	ands	r3, r2
 8003064:	d100      	bne.n	8003068 <HAL_RCC_OscConfig+0x264>
 8003066:	e0a1      	b.n	80031ac <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d140      	bne.n	80030f0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800306e:	4b3a      	ldr	r3, [pc, #232]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4013      	ands	r3, r2
 8003078:	d005      	beq.n	8003086 <HAL_RCC_OscConfig+0x282>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e277      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003086:	4b34      	ldr	r3, [pc, #208]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4a3a      	ldr	r2, [pc, #232]	; (8003174 <HAL_RCC_OscConfig+0x370>)
 800308c:	4013      	ands	r3, r2
 800308e:	0019      	movs	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003094:	4b30      	ldr	r3, [pc, #192]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800309a:	4b2f      	ldr	r3, [pc, #188]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	021b      	lsls	r3, r3, #8
 80030a0:	0a19      	lsrs	r1, r3, #8
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	061a      	lsls	r2, r3, #24
 80030a8:	4b2b      	ldr	r3, [pc, #172]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	0b5b      	lsrs	r3, r3, #13
 80030b4:	3301      	adds	r3, #1
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	0212      	lsls	r2, r2, #8
 80030ba:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80030bc:	4b26      	ldr	r3, [pc, #152]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	210f      	movs	r1, #15
 80030c4:	400b      	ands	r3, r1
 80030c6:	4928      	ldr	r1, [pc, #160]	; (8003168 <HAL_RCC_OscConfig+0x364>)
 80030c8:	5ccb      	ldrb	r3, [r1, r3]
 80030ca:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80030cc:	4b27      	ldr	r3, [pc, #156]	; (800316c <HAL_RCC_OscConfig+0x368>)
 80030ce:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80030d0:	4b27      	ldr	r3, [pc, #156]	; (8003170 <HAL_RCC_OscConfig+0x36c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2513      	movs	r5, #19
 80030d6:	197c      	adds	r4, r7, r5
 80030d8:	0018      	movs	r0, r3
 80030da:	f7ff fbfb 	bl	80028d4 <HAL_InitTick>
 80030de:	0003      	movs	r3, r0
 80030e0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80030e2:	197b      	adds	r3, r7, r5
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d060      	beq.n	80031ac <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80030ea:	197b      	adds	r3, r7, r5
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	e242      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d03f      	beq.n	8003178 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030f8:	4b17      	ldr	r3, [pc, #92]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b16      	ldr	r3, [pc, #88]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 80030fe:	2180      	movs	r1, #128	; 0x80
 8003100:	0049      	lsls	r1, r1, #1
 8003102:	430a      	orrs	r2, r1
 8003104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003106:	f7ff fc2b 	bl	8002960 <HAL_GetTick>
 800310a:	0003      	movs	r3, r0
 800310c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003110:	f7ff fc26 	bl	8002960 <HAL_GetTick>
 8003114:	0002      	movs	r2, r0
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e229      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003122:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4013      	ands	r3, r2
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800312e:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4a10      	ldr	r2, [pc, #64]	; (8003174 <HAL_RCC_OscConfig+0x370>)
 8003134:	4013      	ands	r3, r2
 8003136:	0019      	movs	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	0a19      	lsrs	r1, r3, #8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	061a      	lsls	r2, r3, #24
 8003150:	4b01      	ldr	r3, [pc, #4]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003152:	430a      	orrs	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	e029      	b.n	80031ac <HAL_RCC_OscConfig+0x3a8>
 8003158:	40021000 	.word	0x40021000
 800315c:	fffeffff 	.word	0xfffeffff
 8003160:	fffbffff 	.word	0xfffbffff
 8003164:	ffffe0ff 	.word	0xffffe0ff
 8003168:	08008fb0 	.word	0x08008fb0
 800316c:	20000004 	.word	0x20000004
 8003170:	20000008 	.word	0x20000008
 8003174:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003178:	4bbd      	ldr	r3, [pc, #756]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4bbc      	ldr	r3, [pc, #752]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 800317e:	49bd      	ldr	r1, [pc, #756]	; (8003474 <HAL_RCC_OscConfig+0x670>)
 8003180:	400a      	ands	r2, r1
 8003182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7ff fbec 	bl	8002960 <HAL_GetTick>
 8003188:	0003      	movs	r3, r0
 800318a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800318e:	f7ff fbe7 	bl	8002960 <HAL_GetTick>
 8003192:	0002      	movs	r2, r0
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e1ea      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80031a0:	4bb3      	ldr	r3, [pc, #716]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4013      	ands	r3, r2
 80031aa:	d1f0      	bne.n	800318e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2208      	movs	r2, #8
 80031b2:	4013      	ands	r3, r2
 80031b4:	d036      	beq.n	8003224 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d019      	beq.n	80031f2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031be:	4bac      	ldr	r3, [pc, #688]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80031c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031c2:	4bab      	ldr	r3, [pc, #684]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80031c4:	2101      	movs	r1, #1
 80031c6:	430a      	orrs	r2, r1
 80031c8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ca:	f7ff fbc9 	bl	8002960 <HAL_GetTick>
 80031ce:	0003      	movs	r3, r0
 80031d0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d4:	f7ff fbc4 	bl	8002960 <HAL_GetTick>
 80031d8:	0002      	movs	r2, r0
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e1c7      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031e6:	4ba2      	ldr	r3, [pc, #648]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80031e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ea:	2202      	movs	r2, #2
 80031ec:	4013      	ands	r3, r2
 80031ee:	d0f1      	beq.n	80031d4 <HAL_RCC_OscConfig+0x3d0>
 80031f0:	e018      	b.n	8003224 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f2:	4b9f      	ldr	r3, [pc, #636]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80031f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031f6:	4b9e      	ldr	r3, [pc, #632]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80031f8:	2101      	movs	r1, #1
 80031fa:	438a      	bics	r2, r1
 80031fc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fe:	f7ff fbaf 	bl	8002960 <HAL_GetTick>
 8003202:	0003      	movs	r3, r0
 8003204:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003208:	f7ff fbaa 	bl	8002960 <HAL_GetTick>
 800320c:	0002      	movs	r2, r0
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e1ad      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800321a:	4b95      	ldr	r3, [pc, #596]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 800321c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321e:	2202      	movs	r2, #2
 8003220:	4013      	ands	r3, r2
 8003222:	d1f1      	bne.n	8003208 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2204      	movs	r2, #4
 800322a:	4013      	ands	r3, r2
 800322c:	d100      	bne.n	8003230 <HAL_RCC_OscConfig+0x42c>
 800322e:	e0ae      	b.n	800338e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003230:	2027      	movs	r0, #39	; 0x27
 8003232:	183b      	adds	r3, r7, r0
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003238:	4b8d      	ldr	r3, [pc, #564]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 800323a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	055b      	lsls	r3, r3, #21
 8003240:	4013      	ands	r3, r2
 8003242:	d109      	bne.n	8003258 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003244:	4b8a      	ldr	r3, [pc, #552]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003248:	4b89      	ldr	r3, [pc, #548]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 800324a:	2180      	movs	r1, #128	; 0x80
 800324c:	0549      	lsls	r1, r1, #21
 800324e:	430a      	orrs	r2, r1
 8003250:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003252:	183b      	adds	r3, r7, r0
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	4b87      	ldr	r3, [pc, #540]	; (8003478 <HAL_RCC_OscConfig+0x674>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4013      	ands	r3, r2
 8003262:	d11a      	bne.n	800329a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003264:	4b84      	ldr	r3, [pc, #528]	; (8003478 <HAL_RCC_OscConfig+0x674>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b83      	ldr	r3, [pc, #524]	; (8003478 <HAL_RCC_OscConfig+0x674>)
 800326a:	2180      	movs	r1, #128	; 0x80
 800326c:	0049      	lsls	r1, r1, #1
 800326e:	430a      	orrs	r2, r1
 8003270:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003272:	f7ff fb75 	bl	8002960 <HAL_GetTick>
 8003276:	0003      	movs	r3, r0
 8003278:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327c:	f7ff fb70 	bl	8002960 <HAL_GetTick>
 8003280:	0002      	movs	r2, r0
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e173      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328e:	4b7a      	ldr	r3, [pc, #488]	; (8003478 <HAL_RCC_OscConfig+0x674>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4013      	ands	r3, r2
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	2380      	movs	r3, #128	; 0x80
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d107      	bne.n	80032b6 <HAL_RCC_OscConfig+0x4b2>
 80032a6:	4b72      	ldr	r3, [pc, #456]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032aa:	4b71      	ldr	r3, [pc, #452]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032ac:	2180      	movs	r1, #128	; 0x80
 80032ae:	0049      	lsls	r1, r1, #1
 80032b0:	430a      	orrs	r2, r1
 80032b2:	651a      	str	r2, [r3, #80]	; 0x50
 80032b4:	e031      	b.n	800331a <HAL_RCC_OscConfig+0x516>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x4d4>
 80032be:	4b6c      	ldr	r3, [pc, #432]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032c2:	4b6b      	ldr	r3, [pc, #428]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032c4:	496b      	ldr	r1, [pc, #428]	; (8003474 <HAL_RCC_OscConfig+0x670>)
 80032c6:	400a      	ands	r2, r1
 80032c8:	651a      	str	r2, [r3, #80]	; 0x50
 80032ca:	4b69      	ldr	r3, [pc, #420]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032ce:	4b68      	ldr	r3, [pc, #416]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032d0:	496a      	ldr	r1, [pc, #424]	; (800347c <HAL_RCC_OscConfig+0x678>)
 80032d2:	400a      	ands	r2, r1
 80032d4:	651a      	str	r2, [r3, #80]	; 0x50
 80032d6:	e020      	b.n	800331a <HAL_RCC_OscConfig+0x516>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	23a0      	movs	r3, #160	; 0xa0
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d10e      	bne.n	8003302 <HAL_RCC_OscConfig+0x4fe>
 80032e4:	4b62      	ldr	r3, [pc, #392]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032e8:	4b61      	ldr	r3, [pc, #388]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032ea:	2180      	movs	r1, #128	; 0x80
 80032ec:	00c9      	lsls	r1, r1, #3
 80032ee:	430a      	orrs	r2, r1
 80032f0:	651a      	str	r2, [r3, #80]	; 0x50
 80032f2:	4b5f      	ldr	r3, [pc, #380]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032f6:	4b5e      	ldr	r3, [pc, #376]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032f8:	2180      	movs	r1, #128	; 0x80
 80032fa:	0049      	lsls	r1, r1, #1
 80032fc:	430a      	orrs	r2, r1
 80032fe:	651a      	str	r2, [r3, #80]	; 0x50
 8003300:	e00b      	b.n	800331a <HAL_RCC_OscConfig+0x516>
 8003302:	4b5b      	ldr	r3, [pc, #364]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003304:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003306:	4b5a      	ldr	r3, [pc, #360]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003308:	495a      	ldr	r1, [pc, #360]	; (8003474 <HAL_RCC_OscConfig+0x670>)
 800330a:	400a      	ands	r2, r1
 800330c:	651a      	str	r2, [r3, #80]	; 0x50
 800330e:	4b58      	ldr	r3, [pc, #352]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003310:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003312:	4b57      	ldr	r3, [pc, #348]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003314:	4959      	ldr	r1, [pc, #356]	; (800347c <HAL_RCC_OscConfig+0x678>)
 8003316:	400a      	ands	r2, r1
 8003318:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d015      	beq.n	800334e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003322:	f7ff fb1d 	bl	8002960 <HAL_GetTick>
 8003326:	0003      	movs	r3, r0
 8003328:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800332a:	e009      	b.n	8003340 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800332c:	f7ff fb18 	bl	8002960 <HAL_GetTick>
 8003330:	0002      	movs	r2, r0
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	4a52      	ldr	r2, [pc, #328]	; (8003480 <HAL_RCC_OscConfig+0x67c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e11a      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003340:	4b4b      	ldr	r3, [pc, #300]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003342:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4013      	ands	r3, r2
 800334a:	d0ef      	beq.n	800332c <HAL_RCC_OscConfig+0x528>
 800334c:	e014      	b.n	8003378 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334e:	f7ff fb07 	bl	8002960 <HAL_GetTick>
 8003352:	0003      	movs	r3, r0
 8003354:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003356:	e009      	b.n	800336c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003358:	f7ff fb02 	bl	8002960 <HAL_GetTick>
 800335c:	0002      	movs	r2, r0
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	4a47      	ldr	r2, [pc, #284]	; (8003480 <HAL_RCC_OscConfig+0x67c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e104      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800336c:	4b40      	ldr	r3, [pc, #256]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 800336e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4013      	ands	r3, r2
 8003376:	d1ef      	bne.n	8003358 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003378:	2327      	movs	r3, #39	; 0x27
 800337a:	18fb      	adds	r3, r7, r3
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d105      	bne.n	800338e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003382:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003386:	4b3a      	ldr	r3, [pc, #232]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003388:	493e      	ldr	r1, [pc, #248]	; (8003484 <HAL_RCC_OscConfig+0x680>)
 800338a:	400a      	ands	r2, r1
 800338c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2220      	movs	r2, #32
 8003394:	4013      	ands	r3, r2
 8003396:	d049      	beq.n	800342c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d026      	beq.n	80033ee <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80033a0:	4b33      	ldr	r3, [pc, #204]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80033a6:	2101      	movs	r1, #1
 80033a8:	430a      	orrs	r2, r1
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	4b30      	ldr	r3, [pc, #192]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80033ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b0:	4b2f      	ldr	r3, [pc, #188]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80033b2:	2101      	movs	r1, #1
 80033b4:	430a      	orrs	r2, r1
 80033b6:	635a      	str	r2, [r3, #52]	; 0x34
 80033b8:	4b33      	ldr	r3, [pc, #204]	; (8003488 <HAL_RCC_OscConfig+0x684>)
 80033ba:	6a1a      	ldr	r2, [r3, #32]
 80033bc:	4b32      	ldr	r3, [pc, #200]	; (8003488 <HAL_RCC_OscConfig+0x684>)
 80033be:	2180      	movs	r1, #128	; 0x80
 80033c0:	0189      	lsls	r1, r1, #6
 80033c2:	430a      	orrs	r2, r1
 80033c4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c6:	f7ff facb 	bl	8002960 <HAL_GetTick>
 80033ca:	0003      	movs	r3, r0
 80033cc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033d0:	f7ff fac6 	bl	8002960 <HAL_GetTick>
 80033d4:	0002      	movs	r2, r0
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e0c9      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033e2:	4b23      	ldr	r3, [pc, #140]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2202      	movs	r2, #2
 80033e8:	4013      	ands	r3, r2
 80033ea:	d0f1      	beq.n	80033d0 <HAL_RCC_OscConfig+0x5cc>
 80033ec:	e01e      	b.n	800342c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80033ee:	4b20      	ldr	r3, [pc, #128]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80033f4:	2101      	movs	r1, #1
 80033f6:	438a      	bics	r2, r1
 80033f8:	609a      	str	r2, [r3, #8]
 80033fa:	4b23      	ldr	r3, [pc, #140]	; (8003488 <HAL_RCC_OscConfig+0x684>)
 80033fc:	6a1a      	ldr	r2, [r3, #32]
 80033fe:	4b22      	ldr	r3, [pc, #136]	; (8003488 <HAL_RCC_OscConfig+0x684>)
 8003400:	4922      	ldr	r1, [pc, #136]	; (800348c <HAL_RCC_OscConfig+0x688>)
 8003402:	400a      	ands	r2, r1
 8003404:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003406:	f7ff faab 	bl	8002960 <HAL_GetTick>
 800340a:	0003      	movs	r3, r0
 800340c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003410:	f7ff faa6 	bl	8002960 <HAL_GetTick>
 8003414:	0002      	movs	r2, r0
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e0a9      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003422:	4b13      	ldr	r3, [pc, #76]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2202      	movs	r2, #2
 8003428:	4013      	ands	r3, r2
 800342a:	d1f1      	bne.n	8003410 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	2b00      	cmp	r3, #0
 8003432:	d100      	bne.n	8003436 <HAL_RCC_OscConfig+0x632>
 8003434:	e09e      	b.n	8003574 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	2b0c      	cmp	r3, #12
 800343a:	d100      	bne.n	800343e <HAL_RCC_OscConfig+0x63a>
 800343c:	e077      	b.n	800352e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	2b02      	cmp	r3, #2
 8003444:	d158      	bne.n	80034f8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4b09      	ldr	r3, [pc, #36]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 800344c:	4910      	ldr	r1, [pc, #64]	; (8003490 <HAL_RCC_OscConfig+0x68c>)
 800344e:	400a      	ands	r2, r1
 8003450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003452:	f7ff fa85 	bl	8002960 <HAL_GetTick>
 8003456:	0003      	movs	r3, r0
 8003458:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800345a:	e01b      	b.n	8003494 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345c:	f7ff fa80 	bl	8002960 <HAL_GetTick>
 8003460:	0002      	movs	r2, r0
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d914      	bls.n	8003494 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e083      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	40021000 	.word	0x40021000
 8003474:	fffffeff 	.word	0xfffffeff
 8003478:	40007000 	.word	0x40007000
 800347c:	fffffbff 	.word	0xfffffbff
 8003480:	00001388 	.word	0x00001388
 8003484:	efffffff 	.word	0xefffffff
 8003488:	40010000 	.word	0x40010000
 800348c:	ffffdfff 	.word	0xffffdfff
 8003490:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003494:	4b3a      	ldr	r3, [pc, #232]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	2380      	movs	r3, #128	; 0x80
 800349a:	049b      	lsls	r3, r3, #18
 800349c:	4013      	ands	r3, r2
 800349e:	d1dd      	bne.n	800345c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a0:	4b37      	ldr	r3, [pc, #220]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4a37      	ldr	r2, [pc, #220]	; (8003584 <HAL_RCC_OscConfig+0x780>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	0019      	movs	r1, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b8:	431a      	orrs	r2, r3
 80034ba:	4b31      	ldr	r3, [pc, #196]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 80034bc:	430a      	orrs	r2, r1
 80034be:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034c0:	4b2f      	ldr	r3, [pc, #188]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4b2e      	ldr	r3, [pc, #184]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 80034c6:	2180      	movs	r1, #128	; 0x80
 80034c8:	0449      	lsls	r1, r1, #17
 80034ca:	430a      	orrs	r2, r1
 80034cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ce:	f7ff fa47 	bl	8002960 <HAL_GetTick>
 80034d2:	0003      	movs	r3, r0
 80034d4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d8:	f7ff fa42 	bl	8002960 <HAL_GetTick>
 80034dc:	0002      	movs	r2, r0
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e045      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80034ea:	4b25      	ldr	r3, [pc, #148]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	049b      	lsls	r3, r3, #18
 80034f2:	4013      	ands	r3, r2
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0x6d4>
 80034f6:	e03d      	b.n	8003574 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f8:	4b21      	ldr	r3, [pc, #132]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4b20      	ldr	r3, [pc, #128]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 80034fe:	4922      	ldr	r1, [pc, #136]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 8003500:	400a      	ands	r2, r1
 8003502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7ff fa2c 	bl	8002960 <HAL_GetTick>
 8003508:	0003      	movs	r3, r0
 800350a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800350e:	f7ff fa27 	bl	8002960 <HAL_GetTick>
 8003512:	0002      	movs	r2, r0
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e02a      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003520:	4b17      	ldr	r3, [pc, #92]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	049b      	lsls	r3, r3, #18
 8003528:	4013      	ands	r3, r2
 800352a:	d1f0      	bne.n	800350e <HAL_RCC_OscConfig+0x70a>
 800352c:	e022      	b.n	8003574 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e01d      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800353a:	4b11      	ldr	r3, [pc, #68]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	025b      	lsls	r3, r3, #9
 8003546:	401a      	ands	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	429a      	cmp	r2, r3
 800354e:	d10f      	bne.n	8003570 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	23f0      	movs	r3, #240	; 0xf0
 8003554:	039b      	lsls	r3, r3, #14
 8003556:	401a      	ands	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d107      	bne.n	8003570 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003560:	69fa      	ldr	r2, [r7, #28]
 8003562:	23c0      	movs	r3, #192	; 0xc0
 8003564:	041b      	lsls	r3, r3, #16
 8003566:	401a      	ands	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	0018      	movs	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	b00a      	add	sp, #40	; 0x28
 800357c:	bdb0      	pop	{r4, r5, r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	40021000 	.word	0x40021000
 8003584:	ff02ffff 	.word	0xff02ffff
 8003588:	feffffff 	.word	0xfeffffff

0800358c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800358c:	b5b0      	push	{r4, r5, r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e128      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a0:	4b96      	ldr	r3, [pc, #600]	; (80037fc <HAL_RCC_ClockConfig+0x270>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2201      	movs	r2, #1
 80035a6:	4013      	ands	r3, r2
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d91e      	bls.n	80035ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ae:	4b93      	ldr	r3, [pc, #588]	; (80037fc <HAL_RCC_ClockConfig+0x270>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2201      	movs	r2, #1
 80035b4:	4393      	bics	r3, r2
 80035b6:	0019      	movs	r1, r3
 80035b8:	4b90      	ldr	r3, [pc, #576]	; (80037fc <HAL_RCC_ClockConfig+0x270>)
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035c0:	f7ff f9ce 	bl	8002960 <HAL_GetTick>
 80035c4:	0003      	movs	r3, r0
 80035c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c8:	e009      	b.n	80035de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ca:	f7ff f9c9 	bl	8002960 <HAL_GetTick>
 80035ce:	0002      	movs	r2, r0
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	4a8a      	ldr	r2, [pc, #552]	; (8003800 <HAL_RCC_ClockConfig+0x274>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e109      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b87      	ldr	r3, [pc, #540]	; (80037fc <HAL_RCC_ClockConfig+0x270>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2201      	movs	r2, #1
 80035e4:	4013      	ands	r3, r2
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d1ee      	bne.n	80035ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2202      	movs	r2, #2
 80035f2:	4013      	ands	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f6:	4b83      	ldr	r3, [pc, #524]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	22f0      	movs	r2, #240	; 0xf0
 80035fc:	4393      	bics	r3, r2
 80035fe:	0019      	movs	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	4b7f      	ldr	r3, [pc, #508]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 8003606:	430a      	orrs	r2, r1
 8003608:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2201      	movs	r2, #1
 8003610:	4013      	ands	r3, r2
 8003612:	d100      	bne.n	8003616 <HAL_RCC_ClockConfig+0x8a>
 8003614:	e089      	b.n	800372a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800361e:	4b79      	ldr	r3, [pc, #484]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	029b      	lsls	r3, r3, #10
 8003626:	4013      	ands	r3, r2
 8003628:	d120      	bne.n	800366c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e0e1      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b03      	cmp	r3, #3
 8003634:	d107      	bne.n	8003646 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003636:	4b73      	ldr	r3, [pc, #460]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	2380      	movs	r3, #128	; 0x80
 800363c:	049b      	lsls	r3, r3, #18
 800363e:	4013      	ands	r3, r2
 8003640:	d114      	bne.n	800366c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e0d5      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d106      	bne.n	800365c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800364e:	4b6d      	ldr	r3, [pc, #436]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2204      	movs	r2, #4
 8003654:	4013      	ands	r3, r2
 8003656:	d109      	bne.n	800366c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0ca      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800365c:	4b69      	ldr	r3, [pc, #420]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4013      	ands	r3, r2
 8003666:	d101      	bne.n	800366c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0c2      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800366c:	4b65      	ldr	r3, [pc, #404]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2203      	movs	r2, #3
 8003672:	4393      	bics	r3, r2
 8003674:	0019      	movs	r1, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	4b62      	ldr	r3, [pc, #392]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 800367c:	430a      	orrs	r2, r1
 800367e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003680:	f7ff f96e 	bl	8002960 <HAL_GetTick>
 8003684:	0003      	movs	r3, r0
 8003686:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d111      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003690:	e009      	b.n	80036a6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003692:	f7ff f965 	bl	8002960 <HAL_GetTick>
 8003696:	0002      	movs	r2, r0
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	4a58      	ldr	r2, [pc, #352]	; (8003800 <HAL_RCC_ClockConfig+0x274>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e0a5      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036a6:	4b57      	ldr	r3, [pc, #348]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	220c      	movs	r2, #12
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d1ef      	bne.n	8003692 <HAL_RCC_ClockConfig+0x106>
 80036b2:	e03a      	b.n	800372a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d111      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036bc:	e009      	b.n	80036d2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036be:	f7ff f94f 	bl	8002960 <HAL_GetTick>
 80036c2:	0002      	movs	r2, r0
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	4a4d      	ldr	r2, [pc, #308]	; (8003800 <HAL_RCC_ClockConfig+0x274>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e08f      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036d2:	4b4c      	ldr	r3, [pc, #304]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	220c      	movs	r2, #12
 80036d8:	4013      	ands	r3, r2
 80036da:	2b0c      	cmp	r3, #12
 80036dc:	d1ef      	bne.n	80036be <HAL_RCC_ClockConfig+0x132>
 80036de:	e024      	b.n	800372a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d11b      	bne.n	8003720 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80036e8:	e009      	b.n	80036fe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ea:	f7ff f939 	bl	8002960 <HAL_GetTick>
 80036ee:	0002      	movs	r2, r0
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	4a42      	ldr	r2, [pc, #264]	; (8003800 <HAL_RCC_ClockConfig+0x274>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e079      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80036fe:	4b41      	ldr	r3, [pc, #260]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	220c      	movs	r2, #12
 8003704:	4013      	ands	r3, r2
 8003706:	2b04      	cmp	r3, #4
 8003708:	d1ef      	bne.n	80036ea <HAL_RCC_ClockConfig+0x15e>
 800370a:	e00e      	b.n	800372a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800370c:	f7ff f928 	bl	8002960 <HAL_GetTick>
 8003710:	0002      	movs	r2, r0
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	4a3a      	ldr	r2, [pc, #232]	; (8003800 <HAL_RCC_ClockConfig+0x274>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e068      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003720:	4b38      	ldr	r3, [pc, #224]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	220c      	movs	r2, #12
 8003726:	4013      	ands	r3, r2
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800372a:	4b34      	ldr	r3, [pc, #208]	; (80037fc <HAL_RCC_ClockConfig+0x270>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2201      	movs	r2, #1
 8003730:	4013      	ands	r3, r2
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d21e      	bcs.n	8003776 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003738:	4b30      	ldr	r3, [pc, #192]	; (80037fc <HAL_RCC_ClockConfig+0x270>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2201      	movs	r2, #1
 800373e:	4393      	bics	r3, r2
 8003740:	0019      	movs	r1, r3
 8003742:	4b2e      	ldr	r3, [pc, #184]	; (80037fc <HAL_RCC_ClockConfig+0x270>)
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800374a:	f7ff f909 	bl	8002960 <HAL_GetTick>
 800374e:	0003      	movs	r3, r0
 8003750:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003752:	e009      	b.n	8003768 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003754:	f7ff f904 	bl	8002960 <HAL_GetTick>
 8003758:	0002      	movs	r2, r0
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	4a28      	ldr	r2, [pc, #160]	; (8003800 <HAL_RCC_ClockConfig+0x274>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e044      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003768:	4b24      	ldr	r3, [pc, #144]	; (80037fc <HAL_RCC_ClockConfig+0x270>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2201      	movs	r2, #1
 800376e:	4013      	ands	r3, r2
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d1ee      	bne.n	8003754 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2204      	movs	r2, #4
 800377c:	4013      	ands	r3, r2
 800377e:	d009      	beq.n	8003794 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003780:	4b20      	ldr	r3, [pc, #128]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a20      	ldr	r2, [pc, #128]	; (8003808 <HAL_RCC_ClockConfig+0x27c>)
 8003786:	4013      	ands	r3, r2
 8003788:	0019      	movs	r1, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 8003790:	430a      	orrs	r2, r1
 8003792:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2208      	movs	r2, #8
 800379a:	4013      	ands	r3, r2
 800379c:	d00a      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800379e:	4b19      	ldr	r3, [pc, #100]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	4a1a      	ldr	r2, [pc, #104]	; (800380c <HAL_RCC_ClockConfig+0x280>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	0019      	movs	r1, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	00da      	lsls	r2, r3, #3
 80037ae:	4b15      	ldr	r3, [pc, #84]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 80037b0:	430a      	orrs	r2, r1
 80037b2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037b4:	f000 f832 	bl	800381c <HAL_RCC_GetSysClockFreq>
 80037b8:	0001      	movs	r1, r0
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	220f      	movs	r2, #15
 80037c2:	4013      	ands	r3, r2
 80037c4:	4a12      	ldr	r2, [pc, #72]	; (8003810 <HAL_RCC_ClockConfig+0x284>)
 80037c6:	5cd3      	ldrb	r3, [r2, r3]
 80037c8:	000a      	movs	r2, r1
 80037ca:	40da      	lsrs	r2, r3
 80037cc:	4b11      	ldr	r3, [pc, #68]	; (8003814 <HAL_RCC_ClockConfig+0x288>)
 80037ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <HAL_RCC_ClockConfig+0x28c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	250b      	movs	r5, #11
 80037d6:	197c      	adds	r4, r7, r5
 80037d8:	0018      	movs	r0, r3
 80037da:	f7ff f87b 	bl	80028d4 <HAL_InitTick>
 80037de:	0003      	movs	r3, r0
 80037e0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80037e2:	197b      	adds	r3, r7, r5
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80037ea:	197b      	adds	r3, r7, r5
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	0018      	movs	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b004      	add	sp, #16
 80037f8:	bdb0      	pop	{r4, r5, r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	40022000 	.word	0x40022000
 8003800:	00001388 	.word	0x00001388
 8003804:	40021000 	.word	0x40021000
 8003808:	fffff8ff 	.word	0xfffff8ff
 800380c:	ffffc7ff 	.word	0xffffc7ff
 8003810:	08008fb0 	.word	0x08008fb0
 8003814:	20000004 	.word	0x20000004
 8003818:	20000008 	.word	0x20000008

0800381c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800381c:	b5b0      	push	{r4, r5, r7, lr}
 800381e:	b08e      	sub	sp, #56	; 0x38
 8003820:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003822:	4b4c      	ldr	r3, [pc, #304]	; (8003954 <HAL_RCC_GetSysClockFreq+0x138>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800382a:	230c      	movs	r3, #12
 800382c:	4013      	ands	r3, r2
 800382e:	2b0c      	cmp	r3, #12
 8003830:	d014      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x40>
 8003832:	d900      	bls.n	8003836 <HAL_RCC_GetSysClockFreq+0x1a>
 8003834:	e07b      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x112>
 8003836:	2b04      	cmp	r3, #4
 8003838:	d002      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0x24>
 800383a:	2b08      	cmp	r3, #8
 800383c:	d00b      	beq.n	8003856 <HAL_RCC_GetSysClockFreq+0x3a>
 800383e:	e076      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003840:	4b44      	ldr	r3, [pc, #272]	; (8003954 <HAL_RCC_GetSysClockFreq+0x138>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2210      	movs	r2, #16
 8003846:	4013      	ands	r3, r2
 8003848:	d002      	beq.n	8003850 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800384a:	4b43      	ldr	r3, [pc, #268]	; (8003958 <HAL_RCC_GetSysClockFreq+0x13c>)
 800384c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800384e:	e07c      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003850:	4b42      	ldr	r3, [pc, #264]	; (800395c <HAL_RCC_GetSysClockFreq+0x140>)
 8003852:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003854:	e079      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003856:	4b42      	ldr	r3, [pc, #264]	; (8003960 <HAL_RCC_GetSysClockFreq+0x144>)
 8003858:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800385a:	e076      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385e:	0c9a      	lsrs	r2, r3, #18
 8003860:	230f      	movs	r3, #15
 8003862:	401a      	ands	r2, r3
 8003864:	4b3f      	ldr	r3, [pc, #252]	; (8003964 <HAL_RCC_GetSysClockFreq+0x148>)
 8003866:	5c9b      	ldrb	r3, [r3, r2]
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	0d9a      	lsrs	r2, r3, #22
 800386e:	2303      	movs	r3, #3
 8003870:	4013      	ands	r3, r2
 8003872:	3301      	adds	r3, #1
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003876:	4b37      	ldr	r3, [pc, #220]	; (8003954 <HAL_RCC_GetSysClockFreq+0x138>)
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	025b      	lsls	r3, r3, #9
 800387e:	4013      	ands	r3, r2
 8003880:	d01a      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
 800388a:	4a35      	ldr	r2, [pc, #212]	; (8003960 <HAL_RCC_GetSysClockFreq+0x144>)
 800388c:	2300      	movs	r3, #0
 800388e:	69b8      	ldr	r0, [r7, #24]
 8003890:	69f9      	ldr	r1, [r7, #28]
 8003892:	f7fc fcf7 	bl	8000284 <__aeabi_lmul>
 8003896:	0002      	movs	r2, r0
 8003898:	000b      	movs	r3, r1
 800389a:	0010      	movs	r0, r2
 800389c:	0019      	movs	r1, r3
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f7fc fccb 	bl	8000244 <__aeabi_uldivmod>
 80038ae:	0002      	movs	r2, r0
 80038b0:	000b      	movs	r3, r1
 80038b2:	0013      	movs	r3, r2
 80038b4:	637b      	str	r3, [r7, #52]	; 0x34
 80038b6:	e037      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80038b8:	4b26      	ldr	r3, [pc, #152]	; (8003954 <HAL_RCC_GetSysClockFreq+0x138>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2210      	movs	r2, #16
 80038be:	4013      	ands	r3, r2
 80038c0:	d01a      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	4a23      	ldr	r2, [pc, #140]	; (8003958 <HAL_RCC_GetSysClockFreq+0x13c>)
 80038cc:	2300      	movs	r3, #0
 80038ce:	68b8      	ldr	r0, [r7, #8]
 80038d0:	68f9      	ldr	r1, [r7, #12]
 80038d2:	f7fc fcd7 	bl	8000284 <__aeabi_lmul>
 80038d6:	0002      	movs	r2, r0
 80038d8:	000b      	movs	r3, r1
 80038da:	0010      	movs	r0, r2
 80038dc:	0019      	movs	r1, r3
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	2300      	movs	r3, #0
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f7fc fcab 	bl	8000244 <__aeabi_uldivmod>
 80038ee:	0002      	movs	r2, r0
 80038f0:	000b      	movs	r3, r1
 80038f2:	0013      	movs	r3, r2
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
 80038f6:	e017      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80038f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fa:	0018      	movs	r0, r3
 80038fc:	2300      	movs	r3, #0
 80038fe:	0019      	movs	r1, r3
 8003900:	4a16      	ldr	r2, [pc, #88]	; (800395c <HAL_RCC_GetSysClockFreq+0x140>)
 8003902:	2300      	movs	r3, #0
 8003904:	f7fc fcbe 	bl	8000284 <__aeabi_lmul>
 8003908:	0002      	movs	r2, r0
 800390a:	000b      	movs	r3, r1
 800390c:	0010      	movs	r0, r2
 800390e:	0019      	movs	r1, r3
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	001c      	movs	r4, r3
 8003914:	2300      	movs	r3, #0
 8003916:	001d      	movs	r5, r3
 8003918:	0022      	movs	r2, r4
 800391a:	002b      	movs	r3, r5
 800391c:	f7fc fc92 	bl	8000244 <__aeabi_uldivmod>
 8003920:	0002      	movs	r2, r0
 8003922:	000b      	movs	r3, r1
 8003924:	0013      	movs	r3, r2
 8003926:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800392c:	e00d      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <HAL_RCC_GetSysClockFreq+0x138>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	0b5b      	lsrs	r3, r3, #13
 8003934:	2207      	movs	r2, #7
 8003936:	4013      	ands	r3, r2
 8003938:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	3301      	adds	r3, #1
 800393e:	2280      	movs	r2, #128	; 0x80
 8003940:	0212      	lsls	r2, r2, #8
 8003942:	409a      	lsls	r2, r3
 8003944:	0013      	movs	r3, r2
 8003946:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003948:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800394c:	0018      	movs	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	b00e      	add	sp, #56	; 0x38
 8003952:	bdb0      	pop	{r4, r5, r7, pc}
 8003954:	40021000 	.word	0x40021000
 8003958:	003d0900 	.word	0x003d0900
 800395c:	00f42400 	.word	0x00f42400
 8003960:	007a1200 	.word	0x007a1200
 8003964:	08008fc8 	.word	0x08008fc8

08003968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800396c:	4b02      	ldr	r3, [pc, #8]	; (8003978 <HAL_RCC_GetHCLKFreq+0x10>)
 800396e:	681b      	ldr	r3, [r3, #0]
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	20000004 	.word	0x20000004

0800397c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003980:	f7ff fff2 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 8003984:	0001      	movs	r1, r0
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	0a1b      	lsrs	r3, r3, #8
 800398c:	2207      	movs	r2, #7
 800398e:	4013      	ands	r3, r2
 8003990:	4a04      	ldr	r2, [pc, #16]	; (80039a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003992:	5cd3      	ldrb	r3, [r2, r3]
 8003994:	40d9      	lsrs	r1, r3
 8003996:	000b      	movs	r3, r1
}
 8003998:	0018      	movs	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	40021000 	.word	0x40021000
 80039a4:	08008fc0 	.word	0x08008fc0

080039a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039ac:	f7ff ffdc 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 80039b0:	0001      	movs	r1, r0
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	0adb      	lsrs	r3, r3, #11
 80039b8:	2207      	movs	r2, #7
 80039ba:	4013      	ands	r3, r2
 80039bc:	4a04      	ldr	r2, [pc, #16]	; (80039d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039be:	5cd3      	ldrb	r3, [r2, r3]
 80039c0:	40d9      	lsrs	r1, r3
 80039c2:	000b      	movs	r3, r1
}
 80039c4:	0018      	movs	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	40021000 	.word	0x40021000
 80039d0:	08008fc0 	.word	0x08008fc0

080039d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80039dc:	2317      	movs	r3, #23
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2220      	movs	r2, #32
 80039ea:	4013      	ands	r3, r2
 80039ec:	d106      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	4013      	ands	r3, r2
 80039f8:	d100      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80039fa:	e104      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fc:	4bb1      	ldr	r3, [pc, #708]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a00:	2380      	movs	r3, #128	; 0x80
 8003a02:	055b      	lsls	r3, r3, #21
 8003a04:	4013      	ands	r3, r2
 8003a06:	d10a      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a08:	4bae      	ldr	r3, [pc, #696]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a0c:	4bad      	ldr	r3, [pc, #692]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a0e:	2180      	movs	r1, #128	; 0x80
 8003a10:	0549      	lsls	r1, r1, #21
 8003a12:	430a      	orrs	r2, r1
 8003a14:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003a16:	2317      	movs	r3, #23
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1e:	4baa      	ldr	r3, [pc, #680]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4013      	ands	r3, r2
 8003a28:	d11a      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a2a:	4ba7      	ldr	r3, [pc, #668]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	4ba6      	ldr	r3, [pc, #664]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a30:	2180      	movs	r1, #128	; 0x80
 8003a32:	0049      	lsls	r1, r1, #1
 8003a34:	430a      	orrs	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a38:	f7fe ff92 	bl	8002960 <HAL_GetTick>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a40:	e008      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a42:	f7fe ff8d 	bl	8002960 <HAL_GetTick>
 8003a46:	0002      	movs	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b64      	cmp	r3, #100	; 0x64
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e133      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a54:	4b9c      	ldr	r3, [pc, #624]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003a60:	4b98      	ldr	r3, [pc, #608]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	23c0      	movs	r3, #192	; 0xc0
 8003a66:	039b      	lsls	r3, r3, #14
 8003a68:	4013      	ands	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	23c0      	movs	r3, #192	; 0xc0
 8003a72:	039b      	lsls	r3, r3, #14
 8003a74:	4013      	ands	r3, r2
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d107      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	23c0      	movs	r3, #192	; 0xc0
 8003a82:	039b      	lsls	r3, r3, #14
 8003a84:	4013      	ands	r3, r2
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d013      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	23c0      	movs	r3, #192	; 0xc0
 8003a92:	029b      	lsls	r3, r3, #10
 8003a94:	401a      	ands	r2, r3
 8003a96:	23c0      	movs	r3, #192	; 0xc0
 8003a98:	029b      	lsls	r3, r3, #10
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d10a      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003a9e:	4b89      	ldr	r3, [pc, #548]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	2380      	movs	r3, #128	; 0x80
 8003aa4:	029b      	lsls	r3, r3, #10
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	029b      	lsls	r3, r3, #10
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e103      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003ab4:	4b83      	ldr	r3, [pc, #524]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ab6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ab8:	23c0      	movs	r3, #192	; 0xc0
 8003aba:	029b      	lsls	r3, r3, #10
 8003abc:	4013      	ands	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d049      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	23c0      	movs	r3, #192	; 0xc0
 8003acc:	029b      	lsls	r3, r3, #10
 8003ace:	4013      	ands	r3, r2
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d004      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2220      	movs	r2, #32
 8003adc:	4013      	ands	r3, r2
 8003ade:	d10d      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	23c0      	movs	r3, #192	; 0xc0
 8003ae6:	029b      	lsls	r3, r3, #10
 8003ae8:	4013      	ands	r3, r2
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d034      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	2380      	movs	r3, #128	; 0x80
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	4013      	ands	r3, r2
 8003afa:	d02e      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003afc:	4b71      	ldr	r3, [pc, #452]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b00:	4a72      	ldr	r2, [pc, #456]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b06:	4b6f      	ldr	r3, [pc, #444]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b0a:	4b6e      	ldr	r3, [pc, #440]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b0c:	2180      	movs	r1, #128	; 0x80
 8003b0e:	0309      	lsls	r1, r1, #12
 8003b10:	430a      	orrs	r2, r1
 8003b12:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b14:	4b6b      	ldr	r3, [pc, #428]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b18:	4b6a      	ldr	r3, [pc, #424]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b1a:	496d      	ldr	r1, [pc, #436]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b1c:	400a      	ands	r2, r1
 8003b1e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003b20:	4b68      	ldr	r3, [pc, #416]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d014      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b30:	f7fe ff16 	bl	8002960 <HAL_GetTick>
 8003b34:	0003      	movs	r3, r0
 8003b36:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b38:	e009      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b3a:	f7fe ff11 	bl	8002960 <HAL_GetTick>
 8003b3e:	0002      	movs	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	4a63      	ldr	r2, [pc, #396]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e0b6      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b4e:	4b5d      	ldr	r3, [pc, #372]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4013      	ands	r3, r2
 8003b58:	d0ef      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	2380      	movs	r3, #128	; 0x80
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	4013      	ands	r3, r2
 8003b64:	d01f      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	23c0      	movs	r3, #192	; 0xc0
 8003b6c:	029b      	lsls	r3, r3, #10
 8003b6e:	401a      	ands	r2, r3
 8003b70:	23c0      	movs	r3, #192	; 0xc0
 8003b72:	029b      	lsls	r3, r3, #10
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d10c      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003b78:	4b52      	ldr	r3, [pc, #328]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a56      	ldr	r2, [pc, #344]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b7e:	4013      	ands	r3, r2
 8003b80:	0019      	movs	r1, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	23c0      	movs	r3, #192	; 0xc0
 8003b88:	039b      	lsls	r3, r3, #14
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	4b4d      	ldr	r3, [pc, #308]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	4b4c      	ldr	r3, [pc, #304]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b94:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	23c0      	movs	r3, #192	; 0xc0
 8003b9c:	029b      	lsls	r3, r3, #10
 8003b9e:	401a      	ands	r2, r3
 8003ba0:	4b48      	ldr	r3, [pc, #288]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2220      	movs	r2, #32
 8003bac:	4013      	ands	r3, r2
 8003bae:	d01f      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	23c0      	movs	r3, #192	; 0xc0
 8003bb6:	029b      	lsls	r3, r3, #10
 8003bb8:	401a      	ands	r2, r3
 8003bba:	23c0      	movs	r3, #192	; 0xc0
 8003bbc:	029b      	lsls	r3, r3, #10
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d10c      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003bc2:	4b40      	ldr	r3, [pc, #256]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a44      	ldr	r2, [pc, #272]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	0019      	movs	r1, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	23c0      	movs	r3, #192	; 0xc0
 8003bd2:	039b      	lsls	r3, r3, #14
 8003bd4:	401a      	ands	r2, r3
 8003bd6:	4b3b      	ldr	r3, [pc, #236]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	4b39      	ldr	r3, [pc, #228]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bde:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	23c0      	movs	r3, #192	; 0xc0
 8003be6:	029b      	lsls	r3, r3, #10
 8003be8:	401a      	ands	r2, r3
 8003bea:	4b36      	ldr	r3, [pc, #216]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bec:	430a      	orrs	r2, r1
 8003bee:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bf0:	2317      	movs	r3, #23
 8003bf2:	18fb      	adds	r3, r7, r3
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d105      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bfa:	4b32      	ldr	r3, [pc, #200]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bfe:	4b31      	ldr	r3, [pc, #196]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c00:	4936      	ldr	r1, [pc, #216]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c02:	400a      	ands	r2, r1
 8003c04:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d009      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c10:	4b2c      	ldr	r3, [pc, #176]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c14:	2203      	movs	r2, #3
 8003c16:	4393      	bics	r3, r2
 8003c18:	0019      	movs	r1, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	4b29      	ldr	r3, [pc, #164]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c20:	430a      	orrs	r2, r1
 8003c22:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2202      	movs	r2, #2
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d009      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c2e:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c32:	220c      	movs	r2, #12
 8003c34:	4393      	bics	r3, r2
 8003c36:	0019      	movs	r1, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	4b21      	ldr	r3, [pc, #132]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2204      	movs	r2, #4
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d009      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c4c:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c50:	4a23      	ldr	r2, [pc, #140]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	0019      	movs	r1, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2208      	movs	r2, #8
 8003c66:	4013      	ands	r3, r2
 8003c68:	d009      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c6a:	4b16      	ldr	r3, [pc, #88]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	0019      	movs	r1, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699a      	ldr	r2, [r3, #24]
 8003c78:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2240      	movs	r2, #64	; 0x40
 8003c84:	4013      	ands	r3, r2
 8003c86:	d009      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c88:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8c:	4a16      	ldr	r2, [pc, #88]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	0019      	movs	r1, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1a      	ldr	r2, [r3, #32]
 8003c96:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2280      	movs	r2, #128	; 0x80
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d009      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003ca6:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003caa:	4a10      	ldr	r2, [pc, #64]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	0019      	movs	r1, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	4b03      	ldr	r3, [pc, #12]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b006      	add	sp, #24
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	40007000 	.word	0x40007000
 8003ccc:	fffcffff 	.word	0xfffcffff
 8003cd0:	fff7ffff 	.word	0xfff7ffff
 8003cd4:	00001388 	.word	0x00001388
 8003cd8:	ffcfffff 	.word	0xffcfffff
 8003cdc:	efffffff 	.word	0xefffffff
 8003ce0:	fffff3ff 	.word	0xfffff3ff
 8003ce4:	ffffcfff 	.word	0xffffcfff
 8003ce8:	fbffffff 	.word	0xfbffffff
 8003cec:	fff3ffff 	.word	0xfff3ffff

08003cf0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003cf0:	b5b0      	push	{r4, r5, r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003cf8:	230f      	movs	r3, #15
 8003cfa:	18fb      	adds	r3, r7, r3
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e088      	b.n	8003e1c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2221      	movs	r2, #33	; 0x21
 8003d0e:	5c9b      	ldrb	r3, [r3, r2]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d107      	bne.n	8003d26 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	0018      	movs	r0, r3
 8003d22:	f7fe fc63 	bl	80025ec <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2221      	movs	r2, #33	; 0x21
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	2210      	movs	r2, #16
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d05f      	beq.n	8003dfc <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	22ca      	movs	r2, #202	; 0xca
 8003d42:	625a      	str	r2, [r3, #36]	; 0x24
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2253      	movs	r2, #83	; 0x53
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003d4c:	250f      	movs	r5, #15
 8003d4e:	197c      	adds	r4, r7, r5
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	0018      	movs	r0, r3
 8003d54:	f000 fa1e 	bl	8004194 <RTC_EnterInitMode>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8003d5c:	0028      	movs	r0, r5
 8003d5e:	183b      	adds	r3, r7, r0
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d12c      	bne.n	8003dc0 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	492c      	ldr	r1, [pc, #176]	; (8003e24 <HAL_RTC_Init+0x134>)
 8003d72:	400a      	ands	r2, r1
 8003d74:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6899      	ldr	r1, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	68d2      	ldr	r2, [r2, #12]
 8003d9c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6919      	ldr	r1, [r3, #16]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	041a      	lsls	r2, r3, #16
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003db2:	183c      	adds	r4, r7, r0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	0018      	movs	r0, r3
 8003db8:	f000 fa30 	bl	800421c <RTC_ExitInitMode>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8003dc0:	230f      	movs	r3, #15
 8003dc2:	18fb      	adds	r3, r7, r3
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d113      	bne.n	8003df2 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2103      	movs	r1, #3
 8003dd6:	438a      	bics	r2, r1
 8003dd8:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	22ff      	movs	r2, #255	; 0xff
 8003df8:	625a      	str	r2, [r3, #36]	; 0x24
 8003dfa:	e003      	b.n	8003e04 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003dfc:	230f      	movs	r3, #15
 8003dfe:	18fb      	adds	r3, r7, r3
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8003e04:	230f      	movs	r3, #15
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d103      	bne.n	8003e16 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2221      	movs	r2, #33	; 0x21
 8003e12:	2101      	movs	r1, #1
 8003e14:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003e16:	230f      	movs	r3, #15
 8003e18:	18fb      	adds	r3, r7, r3
 8003e1a:	781b      	ldrb	r3, [r3, #0]
}
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b004      	add	sp, #16
 8003e22:	bdb0      	pop	{r4, r5, r7, pc}
 8003e24:	ff8fffbf 	.word	0xff8fffbf

08003e28 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003e28:	b5b0      	push	{r4, r5, r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	5c9b      	ldrb	r3, [r3, r2]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_RTC_SetTime+0x1e>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e092      	b.n	8003f6c <HAL_RTC_SetTime+0x144>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2221      	movs	r2, #33	; 0x21
 8003e52:	2102      	movs	r1, #2
 8003e54:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d125      	bne.n	8003ea8 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2240      	movs	r2, #64	; 0x40
 8003e64:	4013      	ands	r3, r2
 8003e66:	d102      	bne.n	8003e6e <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	0018      	movs	r0, r3
 8003e74:	f000 f9fc 	bl	8004270 <RTC_ByteToBcd2>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	785b      	ldrb	r3, [r3, #1]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f000 f9f5 	bl	8004270 <RTC_ByteToBcd2>
 8003e86:	0003      	movs	r3, r0
 8003e88:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003e8a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	789b      	ldrb	r3, [r3, #2]
 8003e90:	0018      	movs	r0, r3
 8003e92:	f000 f9ed 	bl	8004270 <RTC_ByteToBcd2>
 8003e96:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003e98:	0022      	movs	r2, r4
 8003e9a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	78db      	ldrb	r3, [r3, #3]
 8003ea0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	e017      	b.n	8003ed8 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2240      	movs	r2, #64	; 0x40
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	d102      	bne.n	8003eba <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	785b      	ldrb	r3, [r3, #1]
 8003ec4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003ec6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003ecc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	78db      	ldrb	r3, [r3, #3]
 8003ed2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	22ca      	movs	r2, #202	; 0xca
 8003ede:	625a      	str	r2, [r3, #36]	; 0x24
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2253      	movs	r2, #83	; 0x53
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ee8:	2513      	movs	r5, #19
 8003eea:	197c      	adds	r4, r7, r5
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f000 f950 	bl	8004194 <RTC_EnterInitMode>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003ef8:	0028      	movs	r0, r5
 8003efa:	183b      	adds	r3, r7, r0
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d120      	bne.n	8003f44 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	491a      	ldr	r1, [pc, #104]	; (8003f74 <HAL_RTC_SetTime+0x14c>)
 8003f0a:	400a      	ands	r2, r1
 8003f0c:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4917      	ldr	r1, [pc, #92]	; (8003f78 <HAL_RTC_SetTime+0x150>)
 8003f1a:	400a      	ands	r2, r1
 8003f1c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6899      	ldr	r1, [r3, #8]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f36:	183c      	adds	r4, r7, r0
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	f000 f96e 	bl	800421c <RTC_ExitInitMode>
 8003f40:	0003      	movs	r3, r0
 8003f42:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003f44:	2313      	movs	r3, #19
 8003f46:	18fb      	adds	r3, r7, r3
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d103      	bne.n	8003f56 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2221      	movs	r2, #33	; 0x21
 8003f52:	2101      	movs	r1, #1
 8003f54:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	22ff      	movs	r2, #255	; 0xff
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	2100      	movs	r1, #0
 8003f64:	5499      	strb	r1, [r3, r2]

  return status;
 8003f66:	2313      	movs	r3, #19
 8003f68:	18fb      	adds	r3, r7, r3
 8003f6a:	781b      	ldrb	r3, [r3, #0]
}
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b006      	add	sp, #24
 8003f72:	bdb0      	pop	{r4, r5, r7, pc}
 8003f74:	007f7f7f 	.word	0x007f7f7f
 8003f78:	fffbffff 	.word	0xfffbffff

08003f7c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003f7c:	b5b0      	push	{r4, r5, r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	5c9b      	ldrb	r3, [r3, r2]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_RTC_SetDate+0x1e>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e07e      	b.n	8004098 <HAL_RTC_SetDate+0x11c>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2221      	movs	r2, #33	; 0x21
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10e      	bne.n	8003fce <HAL_RTC_SetDate+0x52>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	785b      	ldrb	r3, [r3, #1]
 8003fb4:	001a      	movs	r2, r3
 8003fb6:	2310      	movs	r3, #16
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d008      	beq.n	8003fce <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	785b      	ldrb	r3, [r3, #1]
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	4393      	bics	r3, r2
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	330a      	adds	r3, #10
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d11c      	bne.n	800400e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	78db      	ldrb	r3, [r3, #3]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f000 f949 	bl	8004270 <RTC_ByteToBcd2>
 8003fde:	0003      	movs	r3, r0
 8003fe0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	785b      	ldrb	r3, [r3, #1]
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f000 f942 	bl	8004270 <RTC_ByteToBcd2>
 8003fec:	0003      	movs	r3, r0
 8003fee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003ff0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	789b      	ldrb	r3, [r3, #2]
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f000 f93a 	bl	8004270 <RTC_ByteToBcd2>
 8003ffc:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003ffe:	0022      	movs	r2, r4
 8004000:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	e00e      	b.n	800402c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	78db      	ldrb	r3, [r3, #3]
 8004012:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	785b      	ldrb	r3, [r3, #1]
 8004018:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800401a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004020:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	22ca      	movs	r2, #202	; 0xca
 8004032:	625a      	str	r2, [r3, #36]	; 0x24
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2253      	movs	r2, #83	; 0x53
 800403a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800403c:	2513      	movs	r5, #19
 800403e:	197c      	adds	r4, r7, r5
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	0018      	movs	r0, r3
 8004044:	f000 f8a6 	bl	8004194 <RTC_EnterInitMode>
 8004048:	0003      	movs	r3, r0
 800404a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800404c:	0028      	movs	r0, r5
 800404e:	183b      	adds	r3, r7, r0
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10c      	bne.n	8004070 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4910      	ldr	r1, [pc, #64]	; (80040a0 <HAL_RTC_SetDate+0x124>)
 800405e:	400a      	ands	r2, r1
 8004060:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004062:	183c      	adds	r4, r7, r0
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	0018      	movs	r0, r3
 8004068:	f000 f8d8 	bl	800421c <RTC_ExitInitMode>
 800406c:	0003      	movs	r3, r0
 800406e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8004070:	2313      	movs	r3, #19
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d103      	bne.n	8004082 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2221      	movs	r2, #33	; 0x21
 800407e:	2101      	movs	r1, #1
 8004080:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	22ff      	movs	r2, #255	; 0xff
 8004088:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	2100      	movs	r1, #0
 8004090:	5499      	strb	r1, [r3, r2]

  return status;
 8004092:	2313      	movs	r3, #19
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	781b      	ldrb	r3, [r3, #0]
}
 8004098:	0018      	movs	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	b006      	add	sp, #24
 800409e:	bdb0      	pop	{r4, r5, r7, pc}
 80040a0:	00ffff3f 	.word	0x00ffff3f

080040a4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	4a21      	ldr	r2, [pc, #132]	; (8004140 <HAL_RTC_GetDate+0x9c>)
 80040bc:	4013      	ands	r3, r2
 80040be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	0c1b      	lsrs	r3, r3, #16
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	0a1b      	lsrs	r3, r3, #8
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	221f      	movs	r2, #31
 80040d2:	4013      	ands	r3, r2
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	223f      	movs	r2, #63	; 0x3f
 80040e0:	4013      	ands	r3, r2
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	0b5b      	lsrs	r3, r3, #13
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2207      	movs	r2, #7
 80040f0:	4013      	ands	r3, r2
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d11a      	bne.n	8004134 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	78db      	ldrb	r3, [r3, #3]
 8004102:	0018      	movs	r0, r3
 8004104:	f000 f8d5 	bl	80042b2 <RTC_Bcd2ToByte>
 8004108:	0003      	movs	r3, r0
 800410a:	001a      	movs	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	785b      	ldrb	r3, [r3, #1]
 8004114:	0018      	movs	r0, r3
 8004116:	f000 f8cc 	bl	80042b2 <RTC_Bcd2ToByte>
 800411a:	0003      	movs	r3, r0
 800411c:	001a      	movs	r2, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	789b      	ldrb	r3, [r3, #2]
 8004126:	0018      	movs	r0, r3
 8004128:	f000 f8c3 	bl	80042b2 <RTC_Bcd2ToByte>
 800412c:	0003      	movs	r3, r0
 800412e:	001a      	movs	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	0018      	movs	r0, r3
 8004138:	46bd      	mov	sp, r7
 800413a:	b006      	add	sp, #24
 800413c:	bd80      	pop	{r7, pc}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	00ffff3f 	.word	0x00ffff3f

08004144 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a0e      	ldr	r2, [pc, #56]	; (8004190 <HAL_RTC_WaitForSynchro+0x4c>)
 8004156:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004158:	f7fe fc02 	bl	8002960 <HAL_GetTick>
 800415c:	0003      	movs	r3, r0
 800415e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004160:	e00a      	b.n	8004178 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004162:	f7fe fbfd 	bl	8002960 <HAL_GetTick>
 8004166:	0002      	movs	r2, r0
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	1ad2      	subs	r2, r2, r3
 800416c:	23fa      	movs	r3, #250	; 0xfa
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	429a      	cmp	r2, r3
 8004172:	d901      	bls.n	8004178 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e006      	b.n	8004186 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	4013      	ands	r3, r2
 8004182:	d0ee      	beq.n	8004162 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	0018      	movs	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	b004      	add	sp, #16
 800418c:	bd80      	pop	{r7, pc}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	00017f5f 	.word	0x00017f5f

08004194 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80041a0:	230f      	movs	r3, #15
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	2200      	movs	r2, #0
 80041a6:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	2240      	movs	r2, #64	; 0x40
 80041b0:	4013      	ands	r3, r2
 80041b2:	d12c      	bne.n	800420e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2180      	movs	r1, #128	; 0x80
 80041c0:	430a      	orrs	r2, r1
 80041c2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041c4:	f7fe fbcc 	bl	8002960 <HAL_GetTick>
 80041c8:	0003      	movs	r3, r0
 80041ca:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80041cc:	e014      	b.n	80041f8 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80041ce:	f7fe fbc7 	bl	8002960 <HAL_GetTick>
 80041d2:	0002      	movs	r2, r0
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	1ad2      	subs	r2, r2, r3
 80041d8:	200f      	movs	r0, #15
 80041da:	183b      	adds	r3, r7, r0
 80041dc:	1839      	adds	r1, r7, r0
 80041de:	7809      	ldrb	r1, [r1, #0]
 80041e0:	7019      	strb	r1, [r3, #0]
 80041e2:	23fa      	movs	r3, #250	; 0xfa
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d906      	bls.n	80041f8 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2221      	movs	r2, #33	; 0x21
 80041ee:	2104      	movs	r1, #4
 80041f0:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80041f2:	183b      	adds	r3, r7, r0
 80041f4:	2201      	movs	r2, #1
 80041f6:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	2240      	movs	r2, #64	; 0x40
 8004200:	4013      	ands	r3, r2
 8004202:	d104      	bne.n	800420e <RTC_EnterInitMode+0x7a>
 8004204:	230f      	movs	r3, #15
 8004206:	18fb      	adds	r3, r7, r3
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d1df      	bne.n	80041ce <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800420e:	230f      	movs	r3, #15
 8004210:	18fb      	adds	r3, r7, r3
 8004212:	781b      	ldrb	r3, [r3, #0]
}
 8004214:	0018      	movs	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	b004      	add	sp, #16
 800421a:	bd80      	pop	{r7, pc}

0800421c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800421c:	b590      	push	{r4, r7, lr}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004224:	240f      	movs	r4, #15
 8004226:	193b      	adds	r3, r7, r4
 8004228:	2200      	movs	r2, #0
 800422a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2180      	movs	r1, #128	; 0x80
 8004238:	438a      	bics	r2, r1
 800423a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2220      	movs	r2, #32
 8004244:	4013      	ands	r3, r2
 8004246:	d10c      	bne.n	8004262 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	0018      	movs	r0, r3
 800424c:	f7ff ff7a 	bl	8004144 <HAL_RTC_WaitForSynchro>
 8004250:	1e03      	subs	r3, r0, #0
 8004252:	d006      	beq.n	8004262 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2221      	movs	r2, #33	; 0x21
 8004258:	2104      	movs	r1, #4
 800425a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 800425c:	193b      	adds	r3, r7, r4
 800425e:	2201      	movs	r2, #1
 8004260:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004262:	230f      	movs	r3, #15
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	781b      	ldrb	r3, [r3, #0]
}
 8004268:	0018      	movs	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	b005      	add	sp, #20
 800426e:	bd90      	pop	{r4, r7, pc}

08004270 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	0002      	movs	r2, r0
 8004278:	1dfb      	adds	r3, r7, #7
 800427a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004280:	e007      	b.n	8004292 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3301      	adds	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004288:	1dfb      	adds	r3, r7, #7
 800428a:	1dfa      	adds	r2, r7, #7
 800428c:	7812      	ldrb	r2, [r2, #0]
 800428e:	3a0a      	subs	r2, #10
 8004290:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8004292:	1dfb      	adds	r3, r7, #7
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b09      	cmp	r3, #9
 8004298:	d8f3      	bhi.n	8004282 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	1dfb      	adds	r3, r7, #7
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	b2db      	uxtb	r3, r3
}
 80042aa:	0018      	movs	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b004      	add	sp, #16
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b084      	sub	sp, #16
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	0002      	movs	r2, r0
 80042ba:	1dfb      	adds	r3, r7, #7
 80042bc:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80042c2:	1dfb      	adds	r3, r7, #7
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	091b      	lsrs	r3, r3, #4
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	001a      	movs	r2, r3
 80042cc:	0013      	movs	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	189b      	adds	r3, r3, r2
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	1dfb      	adds	r3, r7, #7
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	210f      	movs	r1, #15
 80042e0:	400b      	ands	r3, r1
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	18d3      	adds	r3, r2, r3
 80042e6:	b2db      	uxtb	r3, r3
}
 80042e8:	0018      	movs	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b004      	add	sp, #16
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e083      	b.n	800440a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	2382      	movs	r3, #130	; 0x82
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	429a      	cmp	r2, r3
 8004314:	d009      	beq.n	800432a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	61da      	str	r2, [r3, #28]
 800431c:	e005      	b.n	800432a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2251      	movs	r2, #81	; 0x51
 8004334:	5c9b      	ldrb	r3, [r3, r2]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d107      	bne.n	800434c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2250      	movs	r2, #80	; 0x50
 8004340:	2100      	movs	r1, #0
 8004342:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	0018      	movs	r0, r3
 8004348:	f7fe f968 	bl	800261c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2251      	movs	r2, #81	; 0x51
 8004350:	2102      	movs	r1, #2
 8004352:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2140      	movs	r1, #64	; 0x40
 8004360:	438a      	bics	r2, r1
 8004362:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	2382      	movs	r3, #130	; 0x82
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	401a      	ands	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6899      	ldr	r1, [r3, #8]
 8004372:	2384      	movs	r3, #132	; 0x84
 8004374:	021b      	lsls	r3, r3, #8
 8004376:	400b      	ands	r3, r1
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68d9      	ldr	r1, [r3, #12]
 800437e:	2380      	movs	r3, #128	; 0x80
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	400b      	ands	r3, r1
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2102      	movs	r1, #2
 800438c:	400b      	ands	r3, r1
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	2101      	movs	r1, #1
 8004396:	400b      	ands	r3, r1
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6999      	ldr	r1, [r3, #24]
 800439e:	2380      	movs	r3, #128	; 0x80
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	400b      	ands	r3, r1
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	2138      	movs	r1, #56	; 0x38
 80043ac:	400b      	ands	r3, r1
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	2180      	movs	r1, #128	; 0x80
 80043b6:	400b      	ands	r3, r1
 80043b8:	431a      	orrs	r2, r3
 80043ba:	0011      	movs	r1, r2
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	019b      	lsls	r3, r3, #6
 80043c4:	401a      	ands	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	0c1b      	lsrs	r3, r3, #16
 80043d4:	2204      	movs	r2, #4
 80043d6:	4013      	ands	r3, r2
 80043d8:	0019      	movs	r1, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	2210      	movs	r2, #16
 80043e0:	401a      	ands	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69da      	ldr	r2, [r3, #28]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4907      	ldr	r1, [pc, #28]	; (8004414 <HAL_SPI_Init+0x124>)
 80043f6:	400a      	ands	r2, r1
 80043f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2251      	movs	r2, #81	; 0x51
 8004404:	2101      	movs	r1, #1
 8004406:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	0018      	movs	r0, r3
 800440c:	46bd      	mov	sp, r7
 800440e:	b002      	add	sp, #8
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	fffff7ff 	.word	0xfffff7ff

08004418 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	603b      	str	r3, [r7, #0]
 8004424:	1dbb      	adds	r3, r7, #6
 8004426:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004428:	231f      	movs	r3, #31
 800442a:	18fb      	adds	r3, r7, r3
 800442c:	2200      	movs	r2, #0
 800442e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2250      	movs	r2, #80	; 0x50
 8004434:	5c9b      	ldrb	r3, [r3, r2]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d101      	bne.n	800443e <HAL_SPI_Transmit+0x26>
 800443a:	2302      	movs	r3, #2
 800443c:	e145      	b.n	80046ca <HAL_SPI_Transmit+0x2b2>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2250      	movs	r2, #80	; 0x50
 8004442:	2101      	movs	r1, #1
 8004444:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004446:	f7fe fa8b 	bl	8002960 <HAL_GetTick>
 800444a:	0003      	movs	r3, r0
 800444c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800444e:	2316      	movs	r3, #22
 8004450:	18fb      	adds	r3, r7, r3
 8004452:	1dba      	adds	r2, r7, #6
 8004454:	8812      	ldrh	r2, [r2, #0]
 8004456:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2251      	movs	r2, #81	; 0x51
 800445c:	5c9b      	ldrb	r3, [r3, r2]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b01      	cmp	r3, #1
 8004462:	d004      	beq.n	800446e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004464:	231f      	movs	r3, #31
 8004466:	18fb      	adds	r3, r7, r3
 8004468:	2202      	movs	r2, #2
 800446a:	701a      	strb	r2, [r3, #0]
    goto error;
 800446c:	e126      	b.n	80046bc <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_SPI_Transmit+0x64>
 8004474:	1dbb      	adds	r3, r7, #6
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d104      	bne.n	8004486 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800447c:	231f      	movs	r3, #31
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	2201      	movs	r2, #1
 8004482:	701a      	strb	r2, [r3, #0]
    goto error;
 8004484:	e11a      	b.n	80046bc <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2251      	movs	r2, #81	; 0x51
 800448a:	2103      	movs	r1, #3
 800448c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1dba      	adds	r2, r7, #6
 800449e:	8812      	ldrh	r2, [r2, #0]
 80044a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1dba      	adds	r2, r7, #6
 80044a6:	8812      	ldrh	r2, [r2, #0]
 80044a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	2380      	movs	r3, #128	; 0x80
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d110      	bne.n	80044f6 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2140      	movs	r1, #64	; 0x40
 80044e0:	438a      	bics	r2, r1
 80044e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2180      	movs	r1, #128	; 0x80
 80044f0:	01c9      	lsls	r1, r1, #7
 80044f2:	430a      	orrs	r2, r1
 80044f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2240      	movs	r2, #64	; 0x40
 80044fe:	4013      	ands	r3, r2
 8004500:	2b40      	cmp	r3, #64	; 0x40
 8004502:	d007      	beq.n	8004514 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2140      	movs	r1, #64	; 0x40
 8004510:	430a      	orrs	r2, r1
 8004512:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	2380      	movs	r3, #128	; 0x80
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	429a      	cmp	r2, r3
 800451e:	d152      	bne.n	80045c6 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d004      	beq.n	8004532 <HAL_SPI_Transmit+0x11a>
 8004528:	2316      	movs	r3, #22
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d143      	bne.n	80045ba <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	881a      	ldrh	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	1c9a      	adds	r2, r3, #2
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b01      	subs	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004556:	e030      	b.n	80045ba <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2202      	movs	r2, #2
 8004560:	4013      	ands	r3, r2
 8004562:	2b02      	cmp	r3, #2
 8004564:	d112      	bne.n	800458c <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	881a      	ldrh	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	1c9a      	adds	r2, r3, #2
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	86da      	strh	r2, [r3, #54]	; 0x36
 800458a:	e016      	b.n	80045ba <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800458c:	f7fe f9e8 	bl	8002960 <HAL_GetTick>
 8004590:	0002      	movs	r2, r0
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d802      	bhi.n	80045a2 <HAL_SPI_Transmit+0x18a>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	3301      	adds	r3, #1
 80045a0:	d102      	bne.n	80045a8 <HAL_SPI_Transmit+0x190>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d108      	bne.n	80045ba <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 80045a8:	231f      	movs	r3, #31
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	2203      	movs	r2, #3
 80045ae:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2251      	movs	r2, #81	; 0x51
 80045b4:	2101      	movs	r1, #1
 80045b6:	5499      	strb	r1, [r3, r2]
          goto error;
 80045b8:	e080      	b.n	80046bc <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1c9      	bne.n	8004558 <HAL_SPI_Transmit+0x140>
 80045c4:	e053      	b.n	800466e <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d004      	beq.n	80045d8 <HAL_SPI_Transmit+0x1c0>
 80045ce:	2316      	movs	r3, #22
 80045d0:	18fb      	adds	r3, r7, r3
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d145      	bne.n	8004664 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	330c      	adds	r3, #12
 80045e2:	7812      	ldrb	r2, [r2, #0]
 80045e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80045fe:	e031      	b.n	8004664 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2202      	movs	r2, #2
 8004608:	4013      	ands	r3, r2
 800460a:	2b02      	cmp	r3, #2
 800460c:	d113      	bne.n	8004636 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	330c      	adds	r3, #12
 8004618:	7812      	ldrb	r2, [r2, #0]
 800461a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	86da      	strh	r2, [r3, #54]	; 0x36
 8004634:	e016      	b.n	8004664 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004636:	f7fe f993 	bl	8002960 <HAL_GetTick>
 800463a:	0002      	movs	r2, r0
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d802      	bhi.n	800464c <HAL_SPI_Transmit+0x234>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	3301      	adds	r3, #1
 800464a:	d102      	bne.n	8004652 <HAL_SPI_Transmit+0x23a>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d108      	bne.n	8004664 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8004652:	231f      	movs	r3, #31
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	2203      	movs	r2, #3
 8004658:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2251      	movs	r2, #81	; 0x51
 800465e:	2101      	movs	r1, #1
 8004660:	5499      	strb	r1, [r3, r2]
          goto error;
 8004662:	e02b      	b.n	80046bc <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1c8      	bne.n	8004600 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	6839      	ldr	r1, [r7, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	0018      	movs	r0, r3
 8004676:	f000 fa91 	bl	8004b9c <SPI_EndRxTxTransaction>
 800467a:	1e03      	subs	r3, r0, #0
 800467c:	d002      	beq.n	8004684 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2220      	movs	r2, #32
 8004682:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800468c:	2300      	movs	r3, #0
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d004      	beq.n	80046b4 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 80046aa:	231f      	movs	r3, #31
 80046ac:	18fb      	adds	r3, r7, r3
 80046ae:	2201      	movs	r2, #1
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	e003      	b.n	80046bc <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2251      	movs	r2, #81	; 0x51
 80046b8:	2101      	movs	r1, #1
 80046ba:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2250      	movs	r2, #80	; 0x50
 80046c0:	2100      	movs	r1, #0
 80046c2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80046c4:	231f      	movs	r3, #31
 80046c6:	18fb      	adds	r3, r7, r3
 80046c8:	781b      	ldrb	r3, [r3, #0]
}
 80046ca:	0018      	movs	r0, r3
 80046cc:	46bd      	mov	sp, r7
 80046ce:	b008      	add	sp, #32
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b08c      	sub	sp, #48	; 0x30
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	607a      	str	r2, [r7, #4]
 80046de:	001a      	movs	r2, r3
 80046e0:	1cbb      	adds	r3, r7, #2
 80046e2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046e4:	2301      	movs	r3, #1
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046e8:	232b      	movs	r3, #43	; 0x2b
 80046ea:	18fb      	adds	r3, r7, r3
 80046ec:	2200      	movs	r2, #0
 80046ee:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2250      	movs	r2, #80	; 0x50
 80046f4:	5c9b      	ldrb	r3, [r3, r2]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_SPI_TransmitReceive+0x2c>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e1b0      	b.n	8004a60 <HAL_SPI_TransmitReceive+0x38e>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2250      	movs	r2, #80	; 0x50
 8004702:	2101      	movs	r1, #1
 8004704:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004706:	f7fe f92b 	bl	8002960 <HAL_GetTick>
 800470a:	0003      	movs	r3, r0
 800470c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800470e:	2023      	movs	r0, #35	; 0x23
 8004710:	183b      	adds	r3, r7, r0
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	2151      	movs	r1, #81	; 0x51
 8004716:	5c52      	ldrb	r2, [r2, r1]
 8004718:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004720:	231a      	movs	r3, #26
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	1cba      	adds	r2, r7, #2
 8004726:	8812      	ldrh	r2, [r2, #0]
 8004728:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800472a:	183b      	adds	r3, r7, r0
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d011      	beq.n	8004756 <HAL_SPI_TransmitReceive+0x84>
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	2382      	movs	r3, #130	; 0x82
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	429a      	cmp	r2, r3
 800473a:	d107      	bne.n	800474c <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d103      	bne.n	800474c <HAL_SPI_TransmitReceive+0x7a>
 8004744:	183b      	adds	r3, r7, r0
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	2b04      	cmp	r3, #4
 800474a:	d004      	beq.n	8004756 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800474c:	232b      	movs	r3, #43	; 0x2b
 800474e:	18fb      	adds	r3, r7, r3
 8004750:	2202      	movs	r2, #2
 8004752:	701a      	strb	r2, [r3, #0]
    goto error;
 8004754:	e17d      	b.n	8004a52 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d006      	beq.n	800476a <HAL_SPI_TransmitReceive+0x98>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_SPI_TransmitReceive+0x98>
 8004762:	1cbb      	adds	r3, r7, #2
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d104      	bne.n	8004774 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800476a:	232b      	movs	r3, #43	; 0x2b
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	2201      	movs	r2, #1
 8004770:	701a      	strb	r2, [r3, #0]
    goto error;
 8004772:	e16e      	b.n	8004a52 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2251      	movs	r2, #81	; 0x51
 8004778:	5c9b      	ldrb	r3, [r3, r2]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b04      	cmp	r3, #4
 800477e:	d003      	beq.n	8004788 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2251      	movs	r2, #81	; 0x51
 8004784:	2105      	movs	r1, #5
 8004786:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	1cba      	adds	r2, r7, #2
 8004798:	8812      	ldrh	r2, [r2, #0]
 800479a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	1cba      	adds	r2, r7, #2
 80047a0:	8812      	ldrh	r2, [r2, #0]
 80047a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1cba      	adds	r2, r7, #2
 80047ae:	8812      	ldrh	r2, [r2, #0]
 80047b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1cba      	adds	r2, r7, #2
 80047b6:	8812      	ldrh	r2, [r2, #0]
 80047b8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2240      	movs	r2, #64	; 0x40
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b40      	cmp	r3, #64	; 0x40
 80047d2:	d007      	beq.n	80047e4 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2140      	movs	r1, #64	; 0x40
 80047e0:	430a      	orrs	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d000      	beq.n	80047f2 <HAL_SPI_TransmitReceive+0x120>
 80047f0:	e07f      	b.n	80048f2 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d005      	beq.n	8004806 <HAL_SPI_TransmitReceive+0x134>
 80047fa:	231a      	movs	r3, #26
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d000      	beq.n	8004806 <HAL_SPI_TransmitReceive+0x134>
 8004804:	e06a      	b.n	80048dc <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	881a      	ldrh	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004816:	1c9a      	adds	r2, r3, #2
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004820:	b29b      	uxth	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800482a:	e057      	b.n	80048dc <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2202      	movs	r2, #2
 8004834:	4013      	ands	r3, r2
 8004836:	2b02      	cmp	r3, #2
 8004838:	d11b      	bne.n	8004872 <HAL_SPI_TransmitReceive+0x1a0>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d016      	beq.n	8004872 <HAL_SPI_TransmitReceive+0x1a0>
 8004844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004846:	2b01      	cmp	r3, #1
 8004848:	d113      	bne.n	8004872 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	881a      	ldrh	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485a:	1c9a      	adds	r2, r3, #2
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	2201      	movs	r2, #1
 800487a:	4013      	ands	r3, r2
 800487c:	2b01      	cmp	r3, #1
 800487e:	d119      	bne.n	80048b4 <HAL_SPI_TransmitReceive+0x1e2>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d014      	beq.n	80048b4 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	b292      	uxth	r2, r2
 8004896:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489c:	1c9a      	adds	r2, r3, #2
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048b0:	2301      	movs	r3, #1
 80048b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048b4:	f7fe f854 	bl	8002960 <HAL_GetTick>
 80048b8:	0002      	movs	r2, r0
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d80b      	bhi.n	80048dc <HAL_SPI_TransmitReceive+0x20a>
 80048c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c6:	3301      	adds	r3, #1
 80048c8:	d008      	beq.n	80048dc <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 80048ca:	232b      	movs	r3, #43	; 0x2b
 80048cc:	18fb      	adds	r3, r7, r3
 80048ce:	2203      	movs	r2, #3
 80048d0:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2251      	movs	r2, #81	; 0x51
 80048d6:	2101      	movs	r1, #1
 80048d8:	5499      	strb	r1, [r3, r2]
        goto error;
 80048da:	e0ba      	b.n	8004a52 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1a2      	bne.n	800482c <HAL_SPI_TransmitReceive+0x15a>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d19d      	bne.n	800482c <HAL_SPI_TransmitReceive+0x15a>
 80048f0:	e083      	b.n	80049fa <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <HAL_SPI_TransmitReceive+0x234>
 80048fa:	231a      	movs	r3, #26
 80048fc:	18fb      	adds	r3, r7, r3
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d000      	beq.n	8004906 <HAL_SPI_TransmitReceive+0x234>
 8004904:	e06f      	b.n	80049e6 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	7812      	ldrb	r2, [r2, #0]
 8004912:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800492c:	e05b      	b.n	80049e6 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2202      	movs	r2, #2
 8004936:	4013      	ands	r3, r2
 8004938:	2b02      	cmp	r3, #2
 800493a:	d11c      	bne.n	8004976 <HAL_SPI_TransmitReceive+0x2a4>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d017      	beq.n	8004976 <HAL_SPI_TransmitReceive+0x2a4>
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	2b01      	cmp	r3, #1
 800494a:	d114      	bne.n	8004976 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	330c      	adds	r3, #12
 8004956:	7812      	ldrb	r2, [r2, #0]
 8004958:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	2201      	movs	r2, #1
 800497e:	4013      	ands	r3, r2
 8004980:	2b01      	cmp	r3, #1
 8004982:	d119      	bne.n	80049b8 <HAL_SPI_TransmitReceive+0x2e6>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d014      	beq.n	80049b8 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049b4:	2301      	movs	r3, #1
 80049b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049b8:	f7fd ffd2 	bl	8002960 <HAL_GetTick>
 80049bc:	0002      	movs	r2, r0
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d802      	bhi.n	80049ce <HAL_SPI_TransmitReceive+0x2fc>
 80049c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ca:	3301      	adds	r3, #1
 80049cc:	d102      	bne.n	80049d4 <HAL_SPI_TransmitReceive+0x302>
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d108      	bne.n	80049e6 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 80049d4:	232b      	movs	r3, #43	; 0x2b
 80049d6:	18fb      	adds	r3, r7, r3
 80049d8:	2203      	movs	r2, #3
 80049da:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2251      	movs	r2, #81	; 0x51
 80049e0:	2101      	movs	r1, #1
 80049e2:	5499      	strb	r1, [r3, r2]
        goto error;
 80049e4:	e035      	b.n	8004a52 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d19e      	bne.n	800492e <HAL_SPI_TransmitReceive+0x25c>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d199      	bne.n	800492e <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	0018      	movs	r0, r3
 8004a02:	f000 f8cb 	bl	8004b9c <SPI_EndRxTxTransaction>
 8004a06:	1e03      	subs	r3, r0, #0
 8004a08:	d007      	beq.n	8004a1a <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8004a0a:	232b      	movs	r3, #43	; 0x2b
 8004a0c:	18fb      	adds	r3, r7, r3
 8004a0e:	2201      	movs	r2, #1
 8004a10:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a18:	e01b      	b.n	8004a52 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10a      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d004      	beq.n	8004a4a <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8004a40:	232b      	movs	r3, #43	; 0x2b
 8004a42:	18fb      	adds	r3, r7, r3
 8004a44:	2201      	movs	r2, #1
 8004a46:	701a      	strb	r2, [r3, #0]
 8004a48:	e003      	b.n	8004a52 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2251      	movs	r2, #81	; 0x51
 8004a4e:	2101      	movs	r1, #1
 8004a50:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2250      	movs	r2, #80	; 0x50
 8004a56:	2100      	movs	r1, #0
 8004a58:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004a5a:	232b      	movs	r3, #43	; 0x2b
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	781b      	ldrb	r3, [r3, #0]
}
 8004a60:	0018      	movs	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b00c      	add	sp, #48	; 0x30
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2251      	movs	r2, #81	; 0x51
 8004a74:	5c9b      	ldrb	r3, [r3, r2]
 8004a76:	b2db      	uxtb	r3, r3
}
 8004a78:	0018      	movs	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	b002      	add	sp, #8
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	1dfb      	adds	r3, r7, #7
 8004a8e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a90:	f7fd ff66 	bl	8002960 <HAL_GetTick>
 8004a94:	0002      	movs	r2, r0
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	1a9b      	subs	r3, r3, r2
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	18d3      	adds	r3, r2, r3
 8004a9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004aa0:	f7fd ff5e 	bl	8002960 <HAL_GetTick>
 8004aa4:	0003      	movs	r3, r0
 8004aa6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004aa8:	4b3a      	ldr	r3, [pc, #232]	; (8004b94 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	015b      	lsls	r3, r3, #5
 8004aae:	0d1b      	lsrs	r3, r3, #20
 8004ab0:	69fa      	ldr	r2, [r7, #28]
 8004ab2:	4353      	muls	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ab6:	e058      	b.n	8004b6a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	3301      	adds	r3, #1
 8004abc:	d055      	beq.n	8004b6a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004abe:	f7fd ff4f 	bl	8002960 <HAL_GetTick>
 8004ac2:	0002      	movs	r2, r0
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d902      	bls.n	8004ad4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d142      	bne.n	8004b5a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	21e0      	movs	r1, #224	; 0xe0
 8004ae0:	438a      	bics	r2, r1
 8004ae2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	2382      	movs	r3, #130	; 0x82
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d113      	bne.n	8004b18 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	2380      	movs	r3, #128	; 0x80
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d005      	beq.n	8004b08 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d107      	bne.n	8004b18 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2140      	movs	r1, #64	; 0x40
 8004b14:	438a      	bics	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b1c:	2380      	movs	r3, #128	; 0x80
 8004b1e:	019b      	lsls	r3, r3, #6
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d110      	bne.n	8004b46 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	491a      	ldr	r1, [pc, #104]	; (8004b98 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004b30:	400a      	ands	r2, r1
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2180      	movs	r1, #128	; 0x80
 8004b40:	0189      	lsls	r1, r1, #6
 8004b42:	430a      	orrs	r2, r1
 8004b44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2251      	movs	r2, #81	; 0x51
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2250      	movs	r2, #80	; 0x50
 8004b52:	2100      	movs	r1, #0
 8004b54:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e017      	b.n	8004b8a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	4013      	ands	r3, r2
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	425a      	negs	r2, r3
 8004b7a:	4153      	adcs	r3, r2
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	001a      	movs	r2, r3
 8004b80:	1dfb      	adds	r3, r7, #7
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d197      	bne.n	8004ab8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	b008      	add	sp, #32
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	20000004 	.word	0x20000004
 8004b98:	ffffdfff 	.word	0xffffdfff

08004b9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af02      	add	r7, sp, #8
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ba8:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <SPI_EndRxTxTransaction+0x84>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	491d      	ldr	r1, [pc, #116]	; (8004c24 <SPI_EndRxTxTransaction+0x88>)
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f7fb fabc 	bl	800012c <__udivsi3>
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	001a      	movs	r2, r3
 8004bb8:	0013      	movs	r3, r2
 8004bba:	015b      	lsls	r3, r3, #5
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	189b      	adds	r3, r3, r2
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	2382      	movs	r3, #130	; 0x82
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d112      	bne.n	8004bf8 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	0013      	movs	r3, r2
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2180      	movs	r1, #128	; 0x80
 8004be0:	f7ff ff4e 	bl	8004a80 <SPI_WaitFlagStateUntilTimeout>
 8004be4:	1e03      	subs	r3, r0, #0
 8004be6:	d016      	beq.n	8004c16 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bec:	2220      	movs	r2, #32
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e00f      	b.n	8004c18 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	3b01      	subs	r3, #1
 8004c02:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	2280      	movs	r2, #128	; 0x80
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	2b80      	cmp	r3, #128	; 0x80
 8004c10:	d0f2      	beq.n	8004bf8 <SPI_EndRxTxTransaction+0x5c>
 8004c12:	e000      	b.n	8004c16 <SPI_EndRxTxTransaction+0x7a>
        break;
 8004c14:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	0018      	movs	r0, r3
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	b006      	add	sp, #24
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	20000004 	.word	0x20000004
 8004c24:	016e3600 	.word	0x016e3600

08004c28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e044      	b.n	8004cc4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d107      	bne.n	8004c52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2278      	movs	r2, #120	; 0x78
 8004c46:	2100      	movs	r1, #0
 8004c48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f7fd fd2b 	bl	80026a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2224      	movs	r2, #36	; 0x24
 8004c56:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2101      	movs	r1, #1
 8004c64:	438a      	bics	r2, r1
 8004c66:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f000 f8d0 	bl	8004e10 <UART_SetConfig>
 8004c70:	0003      	movs	r3, r0
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e024      	b.n	8004cc4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	0018      	movs	r0, r3
 8004c86:	f000 fb47 	bl	8005318 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	490d      	ldr	r1, [pc, #52]	; (8004ccc <HAL_UART_Init+0xa4>)
 8004c96:	400a      	ands	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	212a      	movs	r1, #42	; 0x2a
 8004ca6:	438a      	bics	r2, r1
 8004ca8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f000 fbdf 	bl	8005480 <UART_CheckIdleState>
 8004cc2:	0003      	movs	r3, r0
}
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	b002      	add	sp, #8
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	ffffb7ff 	.word	0xffffb7ff

08004cd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	; 0x28
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	1dbb      	adds	r3, r7, #6
 8004cde:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d000      	beq.n	8004cea <HAL_UART_Transmit+0x1a>
 8004ce8:	e08c      	b.n	8004e04 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_UART_Transmit+0x28>
 8004cf0:	1dbb      	adds	r3, r7, #6
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e084      	b.n	8004e06 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	015b      	lsls	r3, r3, #5
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d109      	bne.n	8004d1c <HAL_UART_Transmit+0x4c>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d105      	bne.n	8004d1c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2201      	movs	r2, #1
 8004d14:	4013      	ands	r3, r2
 8004d16:	d001      	beq.n	8004d1c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e074      	b.n	8004e06 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2284      	movs	r2, #132	; 0x84
 8004d20:	2100      	movs	r1, #0
 8004d22:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2221      	movs	r2, #33	; 0x21
 8004d28:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d2a:	f7fd fe19 	bl	8002960 <HAL_GetTick>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1dba      	adds	r2, r7, #6
 8004d36:	2150      	movs	r1, #80	; 0x50
 8004d38:	8812      	ldrh	r2, [r2, #0]
 8004d3a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1dba      	adds	r2, r7, #6
 8004d40:	2152      	movs	r1, #82	; 0x52
 8004d42:	8812      	ldrh	r2, [r2, #0]
 8004d44:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	015b      	lsls	r3, r3, #5
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d108      	bne.n	8004d64 <HAL_UART_Transmit+0x94>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d104      	bne.n	8004d64 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	e003      	b.n	8004d6c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d6c:	e02f      	b.n	8004dce <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	0013      	movs	r3, r2
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2180      	movs	r1, #128	; 0x80
 8004d7c:	f000 fc28 	bl	80055d0 <UART_WaitOnFlagUntilTimeout>
 8004d80:	1e03      	subs	r3, r0, #0
 8004d82:	d004      	beq.n	8004d8e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2220      	movs	r2, #32
 8004d88:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e03b      	b.n	8004e06 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10b      	bne.n	8004dac <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	001a      	movs	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	05d2      	lsls	r2, r2, #23
 8004da0:	0dd2      	lsrs	r2, r2, #23
 8004da2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	3302      	adds	r3, #2
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	e007      	b.n	8004dbc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	781a      	ldrb	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	3301      	adds	r3, #1
 8004dba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2252      	movs	r2, #82	; 0x52
 8004dc0:	5a9b      	ldrh	r3, [r3, r2]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b299      	uxth	r1, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2252      	movs	r2, #82	; 0x52
 8004dcc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2252      	movs	r2, #82	; 0x52
 8004dd2:	5a9b      	ldrh	r3, [r3, r2]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1c9      	bne.n	8004d6e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	0013      	movs	r3, r2
 8004de4:	2200      	movs	r2, #0
 8004de6:	2140      	movs	r1, #64	; 0x40
 8004de8:	f000 fbf2 	bl	80055d0 <UART_WaitOnFlagUntilTimeout>
 8004dec:	1e03      	subs	r3, r0, #0
 8004dee:	d004      	beq.n	8004dfa <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e005      	b.n	8004e06 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	e000      	b.n	8004e06 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004e04:	2302      	movs	r3, #2
  }
}
 8004e06:	0018      	movs	r0, r3
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	b008      	add	sp, #32
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e10:	b5b0      	push	{r4, r5, r7, lr}
 8004e12:	b08e      	sub	sp, #56	; 0x38
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e18:	231a      	movs	r3, #26
 8004e1a:	2218      	movs	r2, #24
 8004e1c:	189b      	adds	r3, r3, r2
 8004e1e:	19db      	adds	r3, r3, r7
 8004e20:	2200      	movs	r2, #0
 8004e22:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4ac6      	ldr	r2, [pc, #792]	; (800515c <UART_SetConfig+0x34c>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	0019      	movs	r1, r3
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	4ac1      	ldr	r2, [pc, #772]	; (8005160 <UART_SetConfig+0x350>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	0019      	movs	r1, r3
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4abb      	ldr	r2, [pc, #748]	; (8005164 <UART_SetConfig+0x354>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d004      	beq.n	8004e84 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e80:	4313      	orrs	r3, r2
 8004e82:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	4ab7      	ldr	r2, [pc, #732]	; (8005168 <UART_SetConfig+0x358>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	0019      	movs	r1, r3
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e96:	430a      	orrs	r2, r1
 8004e98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4ab3      	ldr	r2, [pc, #716]	; (800516c <UART_SetConfig+0x35c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d131      	bne.n	8004f08 <UART_SetConfig+0xf8>
 8004ea4:	4bb2      	ldr	r3, [pc, #712]	; (8005170 <UART_SetConfig+0x360>)
 8004ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea8:	2203      	movs	r2, #3
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d01d      	beq.n	8004eec <UART_SetConfig+0xdc>
 8004eb0:	d823      	bhi.n	8004efa <UART_SetConfig+0xea>
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d00c      	beq.n	8004ed0 <UART_SetConfig+0xc0>
 8004eb6:	d820      	bhi.n	8004efa <UART_SetConfig+0xea>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <UART_SetConfig+0xb2>
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d00e      	beq.n	8004ede <UART_SetConfig+0xce>
 8004ec0:	e01b      	b.n	8004efa <UART_SetConfig+0xea>
 8004ec2:	231b      	movs	r3, #27
 8004ec4:	2218      	movs	r2, #24
 8004ec6:	189b      	adds	r3, r3, r2
 8004ec8:	19db      	adds	r3, r3, r7
 8004eca:	2201      	movs	r2, #1
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	e09c      	b.n	800500a <UART_SetConfig+0x1fa>
 8004ed0:	231b      	movs	r3, #27
 8004ed2:	2218      	movs	r2, #24
 8004ed4:	189b      	adds	r3, r3, r2
 8004ed6:	19db      	adds	r3, r3, r7
 8004ed8:	2202      	movs	r2, #2
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	e095      	b.n	800500a <UART_SetConfig+0x1fa>
 8004ede:	231b      	movs	r3, #27
 8004ee0:	2218      	movs	r2, #24
 8004ee2:	189b      	adds	r3, r3, r2
 8004ee4:	19db      	adds	r3, r3, r7
 8004ee6:	2204      	movs	r2, #4
 8004ee8:	701a      	strb	r2, [r3, #0]
 8004eea:	e08e      	b.n	800500a <UART_SetConfig+0x1fa>
 8004eec:	231b      	movs	r3, #27
 8004eee:	2218      	movs	r2, #24
 8004ef0:	189b      	adds	r3, r3, r2
 8004ef2:	19db      	adds	r3, r3, r7
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	701a      	strb	r2, [r3, #0]
 8004ef8:	e087      	b.n	800500a <UART_SetConfig+0x1fa>
 8004efa:	231b      	movs	r3, #27
 8004efc:	2218      	movs	r2, #24
 8004efe:	189b      	adds	r3, r3, r2
 8004f00:	19db      	adds	r3, r3, r7
 8004f02:	2210      	movs	r2, #16
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	e080      	b.n	800500a <UART_SetConfig+0x1fa>
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a99      	ldr	r2, [pc, #612]	; (8005174 <UART_SetConfig+0x364>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d131      	bne.n	8004f76 <UART_SetConfig+0x166>
 8004f12:	4b97      	ldr	r3, [pc, #604]	; (8005170 <UART_SetConfig+0x360>)
 8004f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f16:	220c      	movs	r2, #12
 8004f18:	4013      	ands	r3, r2
 8004f1a:	2b0c      	cmp	r3, #12
 8004f1c:	d01d      	beq.n	8004f5a <UART_SetConfig+0x14a>
 8004f1e:	d823      	bhi.n	8004f68 <UART_SetConfig+0x158>
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d00c      	beq.n	8004f3e <UART_SetConfig+0x12e>
 8004f24:	d820      	bhi.n	8004f68 <UART_SetConfig+0x158>
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <UART_SetConfig+0x120>
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d00e      	beq.n	8004f4c <UART_SetConfig+0x13c>
 8004f2e:	e01b      	b.n	8004f68 <UART_SetConfig+0x158>
 8004f30:	231b      	movs	r3, #27
 8004f32:	2218      	movs	r2, #24
 8004f34:	189b      	adds	r3, r3, r2
 8004f36:	19db      	adds	r3, r3, r7
 8004f38:	2200      	movs	r2, #0
 8004f3a:	701a      	strb	r2, [r3, #0]
 8004f3c:	e065      	b.n	800500a <UART_SetConfig+0x1fa>
 8004f3e:	231b      	movs	r3, #27
 8004f40:	2218      	movs	r2, #24
 8004f42:	189b      	adds	r3, r3, r2
 8004f44:	19db      	adds	r3, r3, r7
 8004f46:	2202      	movs	r2, #2
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	e05e      	b.n	800500a <UART_SetConfig+0x1fa>
 8004f4c:	231b      	movs	r3, #27
 8004f4e:	2218      	movs	r2, #24
 8004f50:	189b      	adds	r3, r3, r2
 8004f52:	19db      	adds	r3, r3, r7
 8004f54:	2204      	movs	r2, #4
 8004f56:	701a      	strb	r2, [r3, #0]
 8004f58:	e057      	b.n	800500a <UART_SetConfig+0x1fa>
 8004f5a:	231b      	movs	r3, #27
 8004f5c:	2218      	movs	r2, #24
 8004f5e:	189b      	adds	r3, r3, r2
 8004f60:	19db      	adds	r3, r3, r7
 8004f62:	2208      	movs	r2, #8
 8004f64:	701a      	strb	r2, [r3, #0]
 8004f66:	e050      	b.n	800500a <UART_SetConfig+0x1fa>
 8004f68:	231b      	movs	r3, #27
 8004f6a:	2218      	movs	r2, #24
 8004f6c:	189b      	adds	r3, r3, r2
 8004f6e:	19db      	adds	r3, r3, r7
 8004f70:	2210      	movs	r2, #16
 8004f72:	701a      	strb	r2, [r3, #0]
 8004f74:	e049      	b.n	800500a <UART_SetConfig+0x1fa>
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a7a      	ldr	r2, [pc, #488]	; (8005164 <UART_SetConfig+0x354>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d13e      	bne.n	8004ffe <UART_SetConfig+0x1ee>
 8004f80:	4b7b      	ldr	r3, [pc, #492]	; (8005170 <UART_SetConfig+0x360>)
 8004f82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f84:	23c0      	movs	r3, #192	; 0xc0
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	4013      	ands	r3, r2
 8004f8a:	22c0      	movs	r2, #192	; 0xc0
 8004f8c:	0112      	lsls	r2, r2, #4
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d027      	beq.n	8004fe2 <UART_SetConfig+0x1d2>
 8004f92:	22c0      	movs	r2, #192	; 0xc0
 8004f94:	0112      	lsls	r2, r2, #4
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d82a      	bhi.n	8004ff0 <UART_SetConfig+0x1e0>
 8004f9a:	2280      	movs	r2, #128	; 0x80
 8004f9c:	0112      	lsls	r2, r2, #4
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d011      	beq.n	8004fc6 <UART_SetConfig+0x1b6>
 8004fa2:	2280      	movs	r2, #128	; 0x80
 8004fa4:	0112      	lsls	r2, r2, #4
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d822      	bhi.n	8004ff0 <UART_SetConfig+0x1e0>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d004      	beq.n	8004fb8 <UART_SetConfig+0x1a8>
 8004fae:	2280      	movs	r2, #128	; 0x80
 8004fb0:	00d2      	lsls	r2, r2, #3
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00e      	beq.n	8004fd4 <UART_SetConfig+0x1c4>
 8004fb6:	e01b      	b.n	8004ff0 <UART_SetConfig+0x1e0>
 8004fb8:	231b      	movs	r3, #27
 8004fba:	2218      	movs	r2, #24
 8004fbc:	189b      	adds	r3, r3, r2
 8004fbe:	19db      	adds	r3, r3, r7
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	701a      	strb	r2, [r3, #0]
 8004fc4:	e021      	b.n	800500a <UART_SetConfig+0x1fa>
 8004fc6:	231b      	movs	r3, #27
 8004fc8:	2218      	movs	r2, #24
 8004fca:	189b      	adds	r3, r3, r2
 8004fcc:	19db      	adds	r3, r3, r7
 8004fce:	2202      	movs	r2, #2
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	e01a      	b.n	800500a <UART_SetConfig+0x1fa>
 8004fd4:	231b      	movs	r3, #27
 8004fd6:	2218      	movs	r2, #24
 8004fd8:	189b      	adds	r3, r3, r2
 8004fda:	19db      	adds	r3, r3, r7
 8004fdc:	2204      	movs	r2, #4
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	e013      	b.n	800500a <UART_SetConfig+0x1fa>
 8004fe2:	231b      	movs	r3, #27
 8004fe4:	2218      	movs	r2, #24
 8004fe6:	189b      	adds	r3, r3, r2
 8004fe8:	19db      	adds	r3, r3, r7
 8004fea:	2208      	movs	r2, #8
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	e00c      	b.n	800500a <UART_SetConfig+0x1fa>
 8004ff0:	231b      	movs	r3, #27
 8004ff2:	2218      	movs	r2, #24
 8004ff4:	189b      	adds	r3, r3, r2
 8004ff6:	19db      	adds	r3, r3, r7
 8004ff8:	2210      	movs	r2, #16
 8004ffa:	701a      	strb	r2, [r3, #0]
 8004ffc:	e005      	b.n	800500a <UART_SetConfig+0x1fa>
 8004ffe:	231b      	movs	r3, #27
 8005000:	2218      	movs	r2, #24
 8005002:	189b      	adds	r3, r3, r2
 8005004:	19db      	adds	r3, r3, r7
 8005006:	2210      	movs	r2, #16
 8005008:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a55      	ldr	r2, [pc, #340]	; (8005164 <UART_SetConfig+0x354>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d000      	beq.n	8005016 <UART_SetConfig+0x206>
 8005014:	e084      	b.n	8005120 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005016:	231b      	movs	r3, #27
 8005018:	2218      	movs	r2, #24
 800501a:	189b      	adds	r3, r3, r2
 800501c:	19db      	adds	r3, r3, r7
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b08      	cmp	r3, #8
 8005022:	d01d      	beq.n	8005060 <UART_SetConfig+0x250>
 8005024:	dc20      	bgt.n	8005068 <UART_SetConfig+0x258>
 8005026:	2b04      	cmp	r3, #4
 8005028:	d015      	beq.n	8005056 <UART_SetConfig+0x246>
 800502a:	dc1d      	bgt.n	8005068 <UART_SetConfig+0x258>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <UART_SetConfig+0x226>
 8005030:	2b02      	cmp	r3, #2
 8005032:	d005      	beq.n	8005040 <UART_SetConfig+0x230>
 8005034:	e018      	b.n	8005068 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005036:	f7fe fca1 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 800503a:	0003      	movs	r3, r0
 800503c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800503e:	e01c      	b.n	800507a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005040:	4b4b      	ldr	r3, [pc, #300]	; (8005170 <UART_SetConfig+0x360>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2210      	movs	r2, #16
 8005046:	4013      	ands	r3, r2
 8005048:	d002      	beq.n	8005050 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800504a:	4b4b      	ldr	r3, [pc, #300]	; (8005178 <UART_SetConfig+0x368>)
 800504c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800504e:	e014      	b.n	800507a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8005050:	4b4a      	ldr	r3, [pc, #296]	; (800517c <UART_SetConfig+0x36c>)
 8005052:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005054:	e011      	b.n	800507a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005056:	f7fe fbe1 	bl	800381c <HAL_RCC_GetSysClockFreq>
 800505a:	0003      	movs	r3, r0
 800505c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800505e:	e00c      	b.n	800507a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005060:	2380      	movs	r3, #128	; 0x80
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005066:	e008      	b.n	800507a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800506c:	231a      	movs	r3, #26
 800506e:	2218      	movs	r2, #24
 8005070:	189b      	adds	r3, r3, r2
 8005072:	19db      	adds	r3, r3, r7
 8005074:	2201      	movs	r2, #1
 8005076:	701a      	strb	r2, [r3, #0]
        break;
 8005078:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507c:	2b00      	cmp	r3, #0
 800507e:	d100      	bne.n	8005082 <UART_SetConfig+0x272>
 8005080:	e132      	b.n	80052e8 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	0013      	movs	r3, r2
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	189b      	adds	r3, r3, r2
 800508c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800508e:	429a      	cmp	r2, r3
 8005090:	d305      	bcc.n	800509e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800509a:	429a      	cmp	r2, r3
 800509c:	d906      	bls.n	80050ac <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800509e:	231a      	movs	r3, #26
 80050a0:	2218      	movs	r2, #24
 80050a2:	189b      	adds	r3, r3, r2
 80050a4:	19db      	adds	r3, r3, r7
 80050a6:	2201      	movs	r2, #1
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	e11d      	b.n	80052e8 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	2300      	movs	r3, #0
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	6939      	ldr	r1, [r7, #16]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	000b      	movs	r3, r1
 80050ba:	0e1b      	lsrs	r3, r3, #24
 80050bc:	0010      	movs	r0, r2
 80050be:	0205      	lsls	r5, r0, #8
 80050c0:	431d      	orrs	r5, r3
 80050c2:	000b      	movs	r3, r1
 80050c4:	021c      	lsls	r4, r3, #8
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	085b      	lsrs	r3, r3, #1
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	68b8      	ldr	r0, [r7, #8]
 80050d4:	68f9      	ldr	r1, [r7, #12]
 80050d6:	1900      	adds	r0, r0, r4
 80050d8:	4169      	adcs	r1, r5
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	2300      	movs	r3, #0
 80050e2:	607b      	str	r3, [r7, #4]
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f7fb f8ac 	bl	8000244 <__aeabi_uldivmod>
 80050ec:	0002      	movs	r2, r0
 80050ee:	000b      	movs	r3, r1
 80050f0:	0013      	movs	r3, r2
 80050f2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050f6:	23c0      	movs	r3, #192	; 0xc0
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d309      	bcc.n	8005112 <UART_SetConfig+0x302>
 80050fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005100:	2380      	movs	r3, #128	; 0x80
 8005102:	035b      	lsls	r3, r3, #13
 8005104:	429a      	cmp	r2, r3
 8005106:	d204      	bcs.n	8005112 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800510e:	60da      	str	r2, [r3, #12]
 8005110:	e0ea      	b.n	80052e8 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8005112:	231a      	movs	r3, #26
 8005114:	2218      	movs	r2, #24
 8005116:	189b      	adds	r3, r3, r2
 8005118:	19db      	adds	r3, r3, r7
 800511a:	2201      	movs	r2, #1
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	e0e3      	b.n	80052e8 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	69da      	ldr	r2, [r3, #28]
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	429a      	cmp	r2, r3
 800512a:	d000      	beq.n	800512e <UART_SetConfig+0x31e>
 800512c:	e085      	b.n	800523a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800512e:	231b      	movs	r3, #27
 8005130:	2218      	movs	r2, #24
 8005132:	189b      	adds	r3, r3, r2
 8005134:	19db      	adds	r3, r3, r7
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b08      	cmp	r3, #8
 800513a:	d837      	bhi.n	80051ac <UART_SetConfig+0x39c>
 800513c:	009a      	lsls	r2, r3, #2
 800513e:	4b10      	ldr	r3, [pc, #64]	; (8005180 <UART_SetConfig+0x370>)
 8005140:	18d3      	adds	r3, r2, r3
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005146:	f7fe fc19 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 800514a:	0003      	movs	r3, r0
 800514c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800514e:	e036      	b.n	80051be <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005150:	f7fe fc2a 	bl	80039a8 <HAL_RCC_GetPCLK2Freq>
 8005154:	0003      	movs	r3, r0
 8005156:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005158:	e031      	b.n	80051be <UART_SetConfig+0x3ae>
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	efff69f3 	.word	0xefff69f3
 8005160:	ffffcfff 	.word	0xffffcfff
 8005164:	40004800 	.word	0x40004800
 8005168:	fffff4ff 	.word	0xfffff4ff
 800516c:	40013800 	.word	0x40013800
 8005170:	40021000 	.word	0x40021000
 8005174:	40004400 	.word	0x40004400
 8005178:	003d0900 	.word	0x003d0900
 800517c:	00f42400 	.word	0x00f42400
 8005180:	08008fd4 	.word	0x08008fd4
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005184:	4b60      	ldr	r3, [pc, #384]	; (8005308 <UART_SetConfig+0x4f8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2210      	movs	r2, #16
 800518a:	4013      	ands	r3, r2
 800518c:	d002      	beq.n	8005194 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800518e:	4b5f      	ldr	r3, [pc, #380]	; (800530c <UART_SetConfig+0x4fc>)
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005192:	e014      	b.n	80051be <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8005194:	4b5e      	ldr	r3, [pc, #376]	; (8005310 <UART_SetConfig+0x500>)
 8005196:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005198:	e011      	b.n	80051be <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800519a:	f7fe fb3f 	bl	800381c <HAL_RCC_GetSysClockFreq>
 800519e:	0003      	movs	r3, r0
 80051a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051a2:	e00c      	b.n	80051be <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051a4:	2380      	movs	r3, #128	; 0x80
 80051a6:	021b      	lsls	r3, r3, #8
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051aa:	e008      	b.n	80051be <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80051b0:	231a      	movs	r3, #26
 80051b2:	2218      	movs	r2, #24
 80051b4:	189b      	adds	r3, r3, r2
 80051b6:	19db      	adds	r3, r3, r7
 80051b8:	2201      	movs	r2, #1
 80051ba:	701a      	strb	r2, [r3, #0]
        break;
 80051bc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d100      	bne.n	80051c6 <UART_SetConfig+0x3b6>
 80051c4:	e090      	b.n	80052e8 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c8:	005a      	lsls	r2, r3, #1
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	085b      	lsrs	r3, r3, #1
 80051d0:	18d2      	adds	r2, r2, r3
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	0019      	movs	r1, r3
 80051d8:	0010      	movs	r0, r2
 80051da:	f7fa ffa7 	bl	800012c <__udivsi3>
 80051de:	0003      	movs	r3, r0
 80051e0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	2b0f      	cmp	r3, #15
 80051e6:	d921      	bls.n	800522c <UART_SetConfig+0x41c>
 80051e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ea:	2380      	movs	r3, #128	; 0x80
 80051ec:	025b      	lsls	r3, r3, #9
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d21c      	bcs.n	800522c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	200e      	movs	r0, #14
 80051f8:	2418      	movs	r4, #24
 80051fa:	1903      	adds	r3, r0, r4
 80051fc:	19db      	adds	r3, r3, r7
 80051fe:	210f      	movs	r1, #15
 8005200:	438a      	bics	r2, r1
 8005202:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005206:	085b      	lsrs	r3, r3, #1
 8005208:	b29b      	uxth	r3, r3
 800520a:	2207      	movs	r2, #7
 800520c:	4013      	ands	r3, r2
 800520e:	b299      	uxth	r1, r3
 8005210:	1903      	adds	r3, r0, r4
 8005212:	19db      	adds	r3, r3, r7
 8005214:	1902      	adds	r2, r0, r4
 8005216:	19d2      	adds	r2, r2, r7
 8005218:	8812      	ldrh	r2, [r2, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	1902      	adds	r2, r0, r4
 8005224:	19d2      	adds	r2, r2, r7
 8005226:	8812      	ldrh	r2, [r2, #0]
 8005228:	60da      	str	r2, [r3, #12]
 800522a:	e05d      	b.n	80052e8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800522c:	231a      	movs	r3, #26
 800522e:	2218      	movs	r2, #24
 8005230:	189b      	adds	r3, r3, r2
 8005232:	19db      	adds	r3, r3, r7
 8005234:	2201      	movs	r2, #1
 8005236:	701a      	strb	r2, [r3, #0]
 8005238:	e056      	b.n	80052e8 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800523a:	231b      	movs	r3, #27
 800523c:	2218      	movs	r2, #24
 800523e:	189b      	adds	r3, r3, r2
 8005240:	19db      	adds	r3, r3, r7
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b08      	cmp	r3, #8
 8005246:	d822      	bhi.n	800528e <UART_SetConfig+0x47e>
 8005248:	009a      	lsls	r2, r3, #2
 800524a:	4b32      	ldr	r3, [pc, #200]	; (8005314 <UART_SetConfig+0x504>)
 800524c:	18d3      	adds	r3, r2, r3
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005252:	f7fe fb93 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 8005256:	0003      	movs	r3, r0
 8005258:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800525a:	e021      	b.n	80052a0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800525c:	f7fe fba4 	bl	80039a8 <HAL_RCC_GetPCLK2Freq>
 8005260:	0003      	movs	r3, r0
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005264:	e01c      	b.n	80052a0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005266:	4b28      	ldr	r3, [pc, #160]	; (8005308 <UART_SetConfig+0x4f8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2210      	movs	r2, #16
 800526c:	4013      	ands	r3, r2
 800526e:	d002      	beq.n	8005276 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005270:	4b26      	ldr	r3, [pc, #152]	; (800530c <UART_SetConfig+0x4fc>)
 8005272:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005274:	e014      	b.n	80052a0 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8005276:	4b26      	ldr	r3, [pc, #152]	; (8005310 <UART_SetConfig+0x500>)
 8005278:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800527a:	e011      	b.n	80052a0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800527c:	f7fe face 	bl	800381c <HAL_RCC_GetSysClockFreq>
 8005280:	0003      	movs	r3, r0
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005284:	e00c      	b.n	80052a0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005286:	2380      	movs	r3, #128	; 0x80
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800528c:	e008      	b.n	80052a0 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800528e:	2300      	movs	r3, #0
 8005290:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005292:	231a      	movs	r3, #26
 8005294:	2218      	movs	r2, #24
 8005296:	189b      	adds	r3, r3, r2
 8005298:	19db      	adds	r3, r3, r7
 800529a:	2201      	movs	r2, #1
 800529c:	701a      	strb	r2, [r3, #0]
        break;
 800529e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80052a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d020      	beq.n	80052e8 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	085a      	lsrs	r2, r3, #1
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ae:	18d2      	adds	r2, r2, r3
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	0019      	movs	r1, r3
 80052b6:	0010      	movs	r0, r2
 80052b8:	f7fa ff38 	bl	800012c <__udivsi3>
 80052bc:	0003      	movs	r3, r0
 80052be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c2:	2b0f      	cmp	r3, #15
 80052c4:	d90a      	bls.n	80052dc <UART_SetConfig+0x4cc>
 80052c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052c8:	2380      	movs	r3, #128	; 0x80
 80052ca:	025b      	lsls	r3, r3, #9
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d205      	bcs.n	80052dc <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	60da      	str	r2, [r3, #12]
 80052da:	e005      	b.n	80052e8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80052dc:	231a      	movs	r3, #26
 80052de:	2218      	movs	r2, #24
 80052e0:	189b      	adds	r3, r3, r2
 80052e2:	19db      	adds	r3, r3, r7
 80052e4:	2201      	movs	r2, #1
 80052e6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	2200      	movs	r2, #0
 80052ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2200      	movs	r2, #0
 80052f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80052f4:	231a      	movs	r3, #26
 80052f6:	2218      	movs	r2, #24
 80052f8:	189b      	adds	r3, r3, r2
 80052fa:	19db      	adds	r3, r3, r7
 80052fc:	781b      	ldrb	r3, [r3, #0]
}
 80052fe:	0018      	movs	r0, r3
 8005300:	46bd      	mov	sp, r7
 8005302:	b00e      	add	sp, #56	; 0x38
 8005304:	bdb0      	pop	{r4, r5, r7, pc}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	40021000 	.word	0x40021000
 800530c:	003d0900 	.word	0x003d0900
 8005310:	00f42400 	.word	0x00f42400
 8005314:	08008ff8 	.word	0x08008ff8

08005318 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	2201      	movs	r2, #1
 8005326:	4013      	ands	r3, r2
 8005328:	d00b      	beq.n	8005342 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	4a4a      	ldr	r2, [pc, #296]	; (800545c <UART_AdvFeatureConfig+0x144>)
 8005332:	4013      	ands	r3, r2
 8005334:	0019      	movs	r1, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	2202      	movs	r2, #2
 8005348:	4013      	ands	r3, r2
 800534a:	d00b      	beq.n	8005364 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	4a43      	ldr	r2, [pc, #268]	; (8005460 <UART_AdvFeatureConfig+0x148>)
 8005354:	4013      	ands	r3, r2
 8005356:	0019      	movs	r1, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	2204      	movs	r2, #4
 800536a:	4013      	ands	r3, r2
 800536c:	d00b      	beq.n	8005386 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	4a3b      	ldr	r2, [pc, #236]	; (8005464 <UART_AdvFeatureConfig+0x14c>)
 8005376:	4013      	ands	r3, r2
 8005378:	0019      	movs	r1, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	2208      	movs	r2, #8
 800538c:	4013      	ands	r3, r2
 800538e:	d00b      	beq.n	80053a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	4a34      	ldr	r2, [pc, #208]	; (8005468 <UART_AdvFeatureConfig+0x150>)
 8005398:	4013      	ands	r3, r2
 800539a:	0019      	movs	r1, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	2210      	movs	r2, #16
 80053ae:	4013      	ands	r3, r2
 80053b0:	d00b      	beq.n	80053ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	4a2c      	ldr	r2, [pc, #176]	; (800546c <UART_AdvFeatureConfig+0x154>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	0019      	movs	r1, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	2220      	movs	r2, #32
 80053d0:	4013      	ands	r3, r2
 80053d2:	d00b      	beq.n	80053ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	4a25      	ldr	r2, [pc, #148]	; (8005470 <UART_AdvFeatureConfig+0x158>)
 80053dc:	4013      	ands	r3, r2
 80053de:	0019      	movs	r1, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	2240      	movs	r2, #64	; 0x40
 80053f2:	4013      	ands	r3, r2
 80053f4:	d01d      	beq.n	8005432 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <UART_AdvFeatureConfig+0x15c>)
 80053fe:	4013      	ands	r3, r2
 8005400:	0019      	movs	r1, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005412:	2380      	movs	r3, #128	; 0x80
 8005414:	035b      	lsls	r3, r3, #13
 8005416:	429a      	cmp	r2, r3
 8005418:	d10b      	bne.n	8005432 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	4a15      	ldr	r2, [pc, #84]	; (8005478 <UART_AdvFeatureConfig+0x160>)
 8005422:	4013      	ands	r3, r2
 8005424:	0019      	movs	r1, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	2280      	movs	r2, #128	; 0x80
 8005438:	4013      	ands	r3, r2
 800543a:	d00b      	beq.n	8005454 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	4a0e      	ldr	r2, [pc, #56]	; (800547c <UART_AdvFeatureConfig+0x164>)
 8005444:	4013      	ands	r3, r2
 8005446:	0019      	movs	r1, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	605a      	str	r2, [r3, #4]
  }
}
 8005454:	46c0      	nop			; (mov r8, r8)
 8005456:	46bd      	mov	sp, r7
 8005458:	b002      	add	sp, #8
 800545a:	bd80      	pop	{r7, pc}
 800545c:	fffdffff 	.word	0xfffdffff
 8005460:	fffeffff 	.word	0xfffeffff
 8005464:	fffbffff 	.word	0xfffbffff
 8005468:	ffff7fff 	.word	0xffff7fff
 800546c:	ffffefff 	.word	0xffffefff
 8005470:	ffffdfff 	.word	0xffffdfff
 8005474:	ffefffff 	.word	0xffefffff
 8005478:	ff9fffff 	.word	0xff9fffff
 800547c:	fff7ffff 	.word	0xfff7ffff

08005480 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b092      	sub	sp, #72	; 0x48
 8005484:	af02      	add	r7, sp, #8
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2284      	movs	r2, #132	; 0x84
 800548c:	2100      	movs	r1, #0
 800548e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005490:	f7fd fa66 	bl	8002960 <HAL_GetTick>
 8005494:	0003      	movs	r3, r0
 8005496:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2208      	movs	r2, #8
 80054a0:	4013      	ands	r3, r2
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d12c      	bne.n	8005500 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a8:	2280      	movs	r2, #128	; 0x80
 80054aa:	0391      	lsls	r1, r2, #14
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	4a46      	ldr	r2, [pc, #280]	; (80055c8 <UART_CheckIdleState+0x148>)
 80054b0:	9200      	str	r2, [sp, #0]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f000 f88c 	bl	80055d0 <UART_WaitOnFlagUntilTimeout>
 80054b8:	1e03      	subs	r3, r0, #0
 80054ba:	d021      	beq.n	8005500 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054bc:	f3ef 8310 	mrs	r3, PRIMASK
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80054c6:	2301      	movs	r3, #1
 80054c8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	f383 8810 	msr	PRIMASK, r3
}
 80054d0:	46c0      	nop			; (mov r8, r8)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2180      	movs	r1, #128	; 0x80
 80054de:	438a      	bics	r2, r1
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	f383 8810 	msr	PRIMASK, r3
}
 80054ec:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2278      	movs	r2, #120	; 0x78
 80054f8:	2100      	movs	r1, #0
 80054fa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e05f      	b.n	80055c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2204      	movs	r2, #4
 8005508:	4013      	ands	r3, r2
 800550a:	2b04      	cmp	r3, #4
 800550c:	d146      	bne.n	800559c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800550e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005510:	2280      	movs	r2, #128	; 0x80
 8005512:	03d1      	lsls	r1, r2, #15
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	4a2c      	ldr	r2, [pc, #176]	; (80055c8 <UART_CheckIdleState+0x148>)
 8005518:	9200      	str	r2, [sp, #0]
 800551a:	2200      	movs	r2, #0
 800551c:	f000 f858 	bl	80055d0 <UART_WaitOnFlagUntilTimeout>
 8005520:	1e03      	subs	r3, r0, #0
 8005522:	d03b      	beq.n	800559c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005524:	f3ef 8310 	mrs	r3, PRIMASK
 8005528:	60fb      	str	r3, [r7, #12]
  return(result);
 800552a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800552c:	637b      	str	r3, [r7, #52]	; 0x34
 800552e:	2301      	movs	r3, #1
 8005530:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f383 8810 	msr	PRIMASK, r3
}
 8005538:	46c0      	nop			; (mov r8, r8)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4921      	ldr	r1, [pc, #132]	; (80055cc <UART_CheckIdleState+0x14c>)
 8005546:	400a      	ands	r2, r1
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f383 8810 	msr	PRIMASK, r3
}
 8005554:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005556:	f3ef 8310 	mrs	r3, PRIMASK
 800555a:	61bb      	str	r3, [r7, #24]
  return(result);
 800555c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555e:	633b      	str	r3, [r7, #48]	; 0x30
 8005560:	2301      	movs	r3, #1
 8005562:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f383 8810 	msr	PRIMASK, r3
}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2101      	movs	r1, #1
 8005578:	438a      	bics	r2, r1
 800557a:	609a      	str	r2, [r3, #8]
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	f383 8810 	msr	PRIMASK, r3
}
 8005586:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2280      	movs	r2, #128	; 0x80
 800558c:	2120      	movs	r1, #32
 800558e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2278      	movs	r2, #120	; 0x78
 8005594:	2100      	movs	r1, #0
 8005596:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e011      	b.n	80055c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2280      	movs	r2, #128	; 0x80
 80055a6:	2120      	movs	r1, #32
 80055a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2278      	movs	r2, #120	; 0x78
 80055ba:	2100      	movs	r1, #0
 80055bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	0018      	movs	r0, r3
 80055c2:	46bd      	mov	sp, r7
 80055c4:	b010      	add	sp, #64	; 0x40
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	01ffffff 	.word	0x01ffffff
 80055cc:	fffffedf 	.word	0xfffffedf

080055d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	1dfb      	adds	r3, r7, #7
 80055de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e0:	e04b      	b.n	800567a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	3301      	adds	r3, #1
 80055e6:	d048      	beq.n	800567a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e8:	f7fd f9ba 	bl	8002960 <HAL_GetTick>
 80055ec:	0002      	movs	r2, r0
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d302      	bcc.n	80055fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e04b      	b.n	800569a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2204      	movs	r2, #4
 800560a:	4013      	ands	r3, r2
 800560c:	d035      	beq.n	800567a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	2208      	movs	r2, #8
 8005616:	4013      	ands	r3, r2
 8005618:	2b08      	cmp	r3, #8
 800561a:	d111      	bne.n	8005640 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2208      	movs	r2, #8
 8005622:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	0018      	movs	r0, r3
 8005628:	f000 f83c 	bl	80056a4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2284      	movs	r2, #132	; 0x84
 8005630:	2108      	movs	r1, #8
 8005632:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2278      	movs	r2, #120	; 0x78
 8005638:	2100      	movs	r1, #0
 800563a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e02c      	b.n	800569a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69da      	ldr	r2, [r3, #28]
 8005646:	2380      	movs	r3, #128	; 0x80
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	401a      	ands	r2, r3
 800564c:	2380      	movs	r3, #128	; 0x80
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	429a      	cmp	r2, r3
 8005652:	d112      	bne.n	800567a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2280      	movs	r2, #128	; 0x80
 800565a:	0112      	lsls	r2, r2, #4
 800565c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	0018      	movs	r0, r3
 8005662:	f000 f81f 	bl	80056a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2284      	movs	r2, #132	; 0x84
 800566a:	2120      	movs	r1, #32
 800566c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2278      	movs	r2, #120	; 0x78
 8005672:	2100      	movs	r1, #0
 8005674:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e00f      	b.n	800569a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	4013      	ands	r3, r2
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	425a      	negs	r2, r3
 800568a:	4153      	adcs	r3, r2
 800568c:	b2db      	uxtb	r3, r3
 800568e:	001a      	movs	r2, r3
 8005690:	1dfb      	adds	r3, r7, #7
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d0a4      	beq.n	80055e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	0018      	movs	r0, r3
 800569c:	46bd      	mov	sp, r7
 800569e:	b004      	add	sp, #16
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08e      	sub	sp, #56	; 0x38
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ac:	f3ef 8310 	mrs	r3, PRIMASK
 80056b0:	617b      	str	r3, [r7, #20]
  return(result);
 80056b2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056b4:	637b      	str	r3, [r7, #52]	; 0x34
 80056b6:	2301      	movs	r3, #1
 80056b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	f383 8810 	msr	PRIMASK, r3
}
 80056c0:	46c0      	nop			; (mov r8, r8)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4926      	ldr	r1, [pc, #152]	; (8005768 <UART_EndRxTransfer+0xc4>)
 80056ce:	400a      	ands	r2, r1
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	f383 8810 	msr	PRIMASK, r3
}
 80056dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056de:	f3ef 8310 	mrs	r3, PRIMASK
 80056e2:	623b      	str	r3, [r7, #32]
  return(result);
 80056e4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e6:	633b      	str	r3, [r7, #48]	; 0x30
 80056e8:	2301      	movs	r3, #1
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	f383 8810 	msr	PRIMASK, r3
}
 80056f2:	46c0      	nop			; (mov r8, r8)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689a      	ldr	r2, [r3, #8]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2101      	movs	r1, #1
 8005700:	438a      	bics	r2, r1
 8005702:	609a      	str	r2, [r3, #8]
 8005704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005706:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	f383 8810 	msr	PRIMASK, r3
}
 800570e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005714:	2b01      	cmp	r3, #1
 8005716:	d118      	bne.n	800574a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005718:	f3ef 8310 	mrs	r3, PRIMASK
 800571c:	60bb      	str	r3, [r7, #8]
  return(result);
 800571e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005722:	2301      	movs	r3, #1
 8005724:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f383 8810 	msr	PRIMASK, r3
}
 800572c:	46c0      	nop			; (mov r8, r8)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2110      	movs	r1, #16
 800573a:	438a      	bics	r2, r1
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f383 8810 	msr	PRIMASK, r3
}
 8005748:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2280      	movs	r2, #128	; 0x80
 800574e:	2120      	movs	r1, #32
 8005750:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800575e:	46c0      	nop			; (mov r8, r8)
 8005760:	46bd      	mov	sp, r7
 8005762:	b00e      	add	sp, #56	; 0x38
 8005764:	bd80      	pop	{r7, pc}
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	fffffedf 	.word	0xfffffedf

0800576c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005770:	4a06      	ldr	r2, [pc, #24]	; (800578c <MX_FATFS_Init+0x20>)
 8005772:	4b07      	ldr	r3, [pc, #28]	; (8005790 <MX_FATFS_Init+0x24>)
 8005774:	0011      	movs	r1, r2
 8005776:	0018      	movs	r0, r3
 8005778:	f002 fe62 	bl	8008440 <FATFS_LinkDriver>
 800577c:	0003      	movs	r3, r0
 800577e:	001a      	movs	r2, r3
 8005780:	4b04      	ldr	r3, [pc, #16]	; (8005794 <MX_FATFS_Init+0x28>)
 8005782:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005784:	46c0      	nop			; (mov r8, r8)
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	20000a24 	.word	0x20000a24
 8005790:	20000010 	.word	0x20000010
 8005794:	20000a20 	.word	0x20000a20

08005798 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800579c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800579e:	0018      	movs	r0, r3
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	0002      	movs	r2, r0
 80057ac:	1dfb      	adds	r3, r7, #7
 80057ae:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize (pdrv);
 80057b0:	1dfb      	adds	r3, r7, #7
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	0018      	movs	r0, r3
 80057b6:	f7fc f88d 	bl	80018d4 <SD_disk_initialize>
 80057ba:	0003      	movs	r3, r0
 80057bc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80057be:	0018      	movs	r0, r3
 80057c0:	46bd      	mov	sp, r7
 80057c2:	b002      	add	sp, #8
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	0002      	movs	r2, r0
 80057ce:	1dfb      	adds	r3, r7, #7
 80057d0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 80057d2:	1dfb      	adds	r3, r7, #7
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	0018      	movs	r0, r3
 80057d8:	f7fc f988 	bl	8001aec <SD_disk_status>
 80057dc:	0003      	movs	r3, r0
 80057de:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80057e0:	0018      	movs	r0, r3
 80057e2:	46bd      	mov	sp, r7
 80057e4:	b002      	add	sp, #8
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	607a      	str	r2, [r7, #4]
 80057f2:	603b      	str	r3, [r7, #0]
 80057f4:	210f      	movs	r1, #15
 80057f6:	187b      	adds	r3, r7, r1
 80057f8:	1c02      	adds	r2, r0, #0
 80057fa:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
//    return RES_OK;
    return SD_disk_read(pdrv, buff, sector, count);
 80057fc:	187b      	adds	r3, r7, r1
 80057fe:	7818      	ldrb	r0, [r3, #0]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	f7fc f987 	bl	8001b18 <SD_disk_read>
 800580a:	0003      	movs	r3, r0
 800580c:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800580e:	0018      	movs	r0, r3
 8005810:	46bd      	mov	sp, r7
 8005812:	b004      	add	sp, #16
 8005814:	bd80      	pop	{r7, pc}

08005816 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	603b      	str	r3, [r7, #0]
 8005822:	210f      	movs	r1, #15
 8005824:	187b      	adds	r3, r7, r1
 8005826:	1c02      	adds	r2, r0, #0
 8005828:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 800582a:	187b      	adds	r3, r7, r1
 800582c:	7818      	ldrb	r0, [r3, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	68b9      	ldr	r1, [r7, #8]
 8005834:	f7fc f9e0 	bl	8001bf8 <SD_disk_write>
 8005838:	0003      	movs	r3, r0
 800583a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800583c:	0018      	movs	r0, r3
 800583e:	46bd      	mov	sp, r7
 8005840:	b004      	add	sp, #16
 8005842:	bd80      	pop	{r7, pc}

08005844 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	603a      	str	r2, [r7, #0]
 800584c:	1dfb      	adds	r3, r7, #7
 800584e:	1c02      	adds	r2, r0, #0
 8005850:	701a      	strb	r2, [r3, #0]
 8005852:	1dbb      	adds	r3, r7, #6
 8005854:	1c0a      	adds	r2, r1, #0
 8005856:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8005858:	1dfb      	adds	r3, r7, #7
 800585a:	7818      	ldrb	r0, [r3, #0]
 800585c:	1dbb      	adds	r3, r7, #6
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	0019      	movs	r1, r3
 8005864:	f7fc fa50 	bl	8001d08 <SD_disk_ioctl>
 8005868:	0003      	movs	r3, r0
 800586a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800586c:	0018      	movs	r0, r3
 800586e:	46bd      	mov	sp, r7
 8005870:	b002      	add	sp, #8
 8005872:	bd80      	pop	{r7, pc}

08005874 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005874:	b5b0      	push	{r4, r5, r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	0002      	movs	r2, r0
 800587c:	1dfb      	adds	r3, r7, #7
 800587e:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005880:	1dfb      	adds	r3, r7, #7
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	4a0b      	ldr	r2, [pc, #44]	; (80058b4 <disk_status+0x40>)
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	18d3      	adds	r3, r2, r3
 800588a:	3304      	adds	r3, #4
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	1dfa      	adds	r2, r7, #7
 8005892:	7812      	ldrb	r2, [r2, #0]
 8005894:	4907      	ldr	r1, [pc, #28]	; (80058b4 <disk_status+0x40>)
 8005896:	188a      	adds	r2, r1, r2
 8005898:	7a12      	ldrb	r2, [r2, #8]
 800589a:	250f      	movs	r5, #15
 800589c:	197c      	adds	r4, r7, r5
 800589e:	0010      	movs	r0, r2
 80058a0:	4798      	blx	r3
 80058a2:	0003      	movs	r3, r0
 80058a4:	7023      	strb	r3, [r4, #0]
  return stat;
 80058a6:	197b      	adds	r3, r7, r5
 80058a8:	781b      	ldrb	r3, [r3, #0]
}
 80058aa:	0018      	movs	r0, r3
 80058ac:	46bd      	mov	sp, r7
 80058ae:	b004      	add	sp, #16
 80058b0:	bdb0      	pop	{r4, r5, r7, pc}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	20000a50 	.word	0x20000a50

080058b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80058b8:	b590      	push	{r4, r7, lr}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	0002      	movs	r2, r0
 80058c0:	1dfb      	adds	r3, r7, #7
 80058c2:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80058c4:	200f      	movs	r0, #15
 80058c6:	183b      	adds	r3, r7, r0
 80058c8:	2200      	movs	r2, #0
 80058ca:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 80058cc:	1dfb      	adds	r3, r7, #7
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	4a10      	ldr	r2, [pc, #64]	; (8005914 <disk_initialize+0x5c>)
 80058d2:	5cd3      	ldrb	r3, [r2, r3]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d116      	bne.n	8005906 <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 80058d8:	1dfb      	adds	r3, r7, #7
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	4a0d      	ldr	r2, [pc, #52]	; (8005914 <disk_initialize+0x5c>)
 80058de:	2101      	movs	r1, #1
 80058e0:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80058e2:	1dfb      	adds	r3, r7, #7
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	4a0b      	ldr	r2, [pc, #44]	; (8005914 <disk_initialize+0x5c>)
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	18d3      	adds	r3, r2, r3
 80058ec:	3304      	adds	r3, #4
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	1dfa      	adds	r2, r7, #7
 80058f4:	7812      	ldrb	r2, [r2, #0]
 80058f6:	4907      	ldr	r1, [pc, #28]	; (8005914 <disk_initialize+0x5c>)
 80058f8:	188a      	adds	r2, r1, r2
 80058fa:	7a12      	ldrb	r2, [r2, #8]
 80058fc:	183c      	adds	r4, r7, r0
 80058fe:	0010      	movs	r0, r2
 8005900:	4798      	blx	r3
 8005902:	0003      	movs	r3, r0
 8005904:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8005906:	230f      	movs	r3, #15
 8005908:	18fb      	adds	r3, r7, r3
 800590a:	781b      	ldrb	r3, [r3, #0]
}
 800590c:	0018      	movs	r0, r3
 800590e:	46bd      	mov	sp, r7
 8005910:	b005      	add	sp, #20
 8005912:	bd90      	pop	{r4, r7, pc}
 8005914:	20000a50 	.word	0x20000a50

08005918 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60b9      	str	r1, [r7, #8]
 8005920:	607a      	str	r2, [r7, #4]
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	210f      	movs	r1, #15
 8005926:	187b      	adds	r3, r7, r1
 8005928:	1c02      	adds	r2, r0, #0
 800592a:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800592c:	187b      	adds	r3, r7, r1
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	4a0c      	ldr	r2, [pc, #48]	; (8005964 <disk_read+0x4c>)
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	18d3      	adds	r3, r2, r3
 8005936:	3304      	adds	r3, #4
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689d      	ldr	r5, [r3, #8]
 800593c:	187b      	adds	r3, r7, r1
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	4a08      	ldr	r2, [pc, #32]	; (8005964 <disk_read+0x4c>)
 8005942:	18d3      	adds	r3, r2, r3
 8005944:	7a18      	ldrb	r0, [r3, #8]
 8005946:	2617      	movs	r6, #23
 8005948:	19bc      	adds	r4, r7, r6
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	68b9      	ldr	r1, [r7, #8]
 8005950:	47a8      	blx	r5
 8005952:	0003      	movs	r3, r0
 8005954:	7023      	strb	r3, [r4, #0]
  return res;
 8005956:	19bb      	adds	r3, r7, r6
 8005958:	781b      	ldrb	r3, [r3, #0]
}
 800595a:	0018      	movs	r0, r3
 800595c:	46bd      	mov	sp, r7
 800595e:	b007      	add	sp, #28
 8005960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005962:	46c0      	nop			; (mov r8, r8)
 8005964:	20000a50 	.word	0x20000a50

08005968 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	607a      	str	r2, [r7, #4]
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	210f      	movs	r1, #15
 8005976:	187b      	adds	r3, r7, r1
 8005978:	1c02      	adds	r2, r0, #0
 800597a:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800597c:	187b      	adds	r3, r7, r1
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	4a0c      	ldr	r2, [pc, #48]	; (80059b4 <disk_write+0x4c>)
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	18d3      	adds	r3, r2, r3
 8005986:	3304      	adds	r3, #4
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68dd      	ldr	r5, [r3, #12]
 800598c:	187b      	adds	r3, r7, r1
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	4a08      	ldr	r2, [pc, #32]	; (80059b4 <disk_write+0x4c>)
 8005992:	18d3      	adds	r3, r2, r3
 8005994:	7a18      	ldrb	r0, [r3, #8]
 8005996:	2617      	movs	r6, #23
 8005998:	19bc      	adds	r4, r7, r6
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	68b9      	ldr	r1, [r7, #8]
 80059a0:	47a8      	blx	r5
 80059a2:	0003      	movs	r3, r0
 80059a4:	7023      	strb	r3, [r4, #0]
  return res;
 80059a6:	19bb      	adds	r3, r7, r6
 80059a8:	781b      	ldrb	r3, [r3, #0]
}
 80059aa:	0018      	movs	r0, r3
 80059ac:	46bd      	mov	sp, r7
 80059ae:	b007      	add	sp, #28
 80059b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b2:	46c0      	nop			; (mov r8, r8)
 80059b4:	20000a50 	.word	0x20000a50

080059b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80059b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	603a      	str	r2, [r7, #0]
 80059c0:	1dfb      	adds	r3, r7, #7
 80059c2:	1c02      	adds	r2, r0, #0
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	1dbb      	adds	r3, r7, #6
 80059c8:	1c0a      	adds	r2, r1, #0
 80059ca:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80059cc:	1dfb      	adds	r3, r7, #7
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	4a0c      	ldr	r2, [pc, #48]	; (8005a04 <disk_ioctl+0x4c>)
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	18d3      	adds	r3, r2, r3
 80059d6:	3304      	adds	r3, #4
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	1dfa      	adds	r2, r7, #7
 80059de:	7812      	ldrb	r2, [r2, #0]
 80059e0:	4908      	ldr	r1, [pc, #32]	; (8005a04 <disk_ioctl+0x4c>)
 80059e2:	188a      	adds	r2, r1, r2
 80059e4:	7a10      	ldrb	r0, [r2, #8]
 80059e6:	260f      	movs	r6, #15
 80059e8:	19bc      	adds	r4, r7, r6
 80059ea:	683d      	ldr	r5, [r7, #0]
 80059ec:	1dba      	adds	r2, r7, #6
 80059ee:	7811      	ldrb	r1, [r2, #0]
 80059f0:	002a      	movs	r2, r5
 80059f2:	4798      	blx	r3
 80059f4:	0003      	movs	r3, r0
 80059f6:	7023      	strb	r3, [r4, #0]
  return res;
 80059f8:	19bb      	adds	r3, r7, r6
 80059fa:	781b      	ldrb	r3, [r3, #0]
}
 80059fc:	0018      	movs	r0, r3
 80059fe:	46bd      	mov	sp, r7
 8005a00:	b005      	add	sp, #20
 8005a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a04:	20000a50 	.word	0x20000a50

08005a08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3301      	adds	r3, #1
 8005a14:	781a      	ldrb	r2, [r3, #0]
 8005a16:	210e      	movs	r1, #14
 8005a18:	187b      	adds	r3, r7, r1
 8005a1a:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8005a1c:	187b      	adds	r3, r7, r1
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	b21a      	sxth	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	b21b      	sxth	r3, r3
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	b21a      	sxth	r2, r3
 8005a2e:	187b      	adds	r3, r7, r1
 8005a30:	801a      	strh	r2, [r3, #0]
	return rv;
 8005a32:	187b      	adds	r3, r7, r1
 8005a34:	881b      	ldrh	r3, [r3, #0]
}
 8005a36:	0018      	movs	r0, r3
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	b004      	add	sp, #16
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3303      	adds	r3, #3
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	021b      	lsls	r3, r3, #8
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	3202      	adds	r2, #2
 8005a56:	7812      	ldrb	r2, [r2, #0]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	3201      	adds	r2, #1
 8005a64:	7812      	ldrb	r2, [r2, #0]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	021b      	lsls	r3, r3, #8
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	7812      	ldrb	r2, [r2, #0]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
	return rv;
 8005a76:	68fb      	ldr	r3, [r7, #12]
}
 8005a78:	0018      	movs	r0, r3
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	b004      	add	sp, #16
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	000a      	movs	r2, r1
 8005a8a:	1cbb      	adds	r3, r7, #2
 8005a8c:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	1cba      	adds	r2, r7, #2
 8005a96:	8812      	ldrh	r2, [r2, #0]
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	701a      	strb	r2, [r3, #0]
 8005a9c:	1cbb      	adds	r3, r7, #2
 8005a9e:	1cba      	adds	r2, r7, #2
 8005aa0:	8812      	ldrh	r2, [r2, #0]
 8005aa2:	0a12      	lsrs	r2, r2, #8
 8005aa4:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	1cba      	adds	r2, r7, #2
 8005aae:	8812      	ldrh	r2, [r2, #0]
 8005ab0:	b2d2      	uxtb	r2, r2
 8005ab2:	701a      	strb	r2, [r3, #0]
}
 8005ab4:	46c0      	nop			; (mov r8, r8)
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b002      	add	sp, #8
 8005aba:	bd80      	pop	{r7, pc}

08005abc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	0a1b      	lsrs	r3, r3, #8
 8005ad6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	607a      	str	r2, [r7, #4]
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	701a      	strb	r2, [r3, #0]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	0a1b      	lsrs	r3, r3, #8
 8005ae8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	701a      	strb	r2, [r3, #0]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	0a1b      	lsrs	r3, r3, #8
 8005afa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	607a      	str	r2, [r7, #4]
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]
}
 8005b08:	46c0      	nop			; (mov r8, r8)
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b002      	add	sp, #8
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00d      	beq.n	8005b46 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	1c53      	adds	r3, r2, #1
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	1c59      	adds	r1, r3, #1
 8005b34:	6179      	str	r1, [r7, #20]
 8005b36:	7812      	ldrb	r2, [r2, #0]
 8005b38:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	607b      	str	r3, [r7, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f1      	bne.n	8005b2a <mem_cpy+0x1a>
	}
}
 8005b46:	46c0      	nop			; (mov r8, r8)
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	b006      	add	sp, #24
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b086      	sub	sp, #24
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	617a      	str	r2, [r7, #20]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	607b      	str	r3, [r7, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1f3      	bne.n	8005b5e <mem_set+0x10>
}
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	46c0      	nop			; (mov r8, r8)
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	b006      	add	sp, #24
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	61fb      	str	r3, [r7, #28]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	61fa      	str	r2, [r7, #28]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	0019      	movs	r1, r3
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	61ba      	str	r2, [r7, #24]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	1acb      	subs	r3, r1, r3
 8005bac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	607b      	str	r3, [r7, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <mem_cmp+0x40>
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0eb      	beq.n	8005b98 <mem_cmp+0x18>

	return r;
 8005bc0:	697b      	ldr	r3, [r7, #20]
}
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b008      	add	sp, #32
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b082      	sub	sp, #8
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005bd4:	e002      	b.n	8005bdc <chk_chr+0x12>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	607b      	str	r3, [r7, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d005      	beq.n	8005bf0 <chk_chr+0x26>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	001a      	movs	r2, r3
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d1f2      	bne.n	8005bd6 <chk_chr+0xc>
	return *str;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
}
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	b002      	add	sp, #8
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005c06:	2300      	movs	r3, #0
 8005c08:	60bb      	str	r3, [r7, #8]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	e027      	b.n	8005c60 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 8005c10:	4b25      	ldr	r3, [pc, #148]	; (8005ca8 <chk_lock+0xac>)
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	0112      	lsls	r2, r2, #4
 8005c16:	58d3      	ldr	r3, [r2, r3]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01c      	beq.n	8005c56 <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005c1c:	4b22      	ldr	r3, [pc, #136]	; (8005ca8 <chk_lock+0xac>)
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	0112      	lsls	r2, r2, #4
 8005c22:	58d2      	ldr	r2, [r2, r3]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d116      	bne.n	8005c5a <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 8005c2c:	4a1e      	ldr	r2, [pc, #120]	; (8005ca8 <chk_lock+0xac>)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	18d3      	adds	r3, r2, r3
 8005c34:	3304      	adds	r3, #4
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d10c      	bne.n	8005c5a <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8005c40:	4a19      	ldr	r2, [pc, #100]	; (8005ca8 <chk_lock+0xac>)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	011b      	lsls	r3, r3, #4
 8005c46:	18d3      	adds	r3, r2, r3
 8005c48:	3308      	adds	r3, #8
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d102      	bne.n	8005c5a <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8005c54:	e007      	b.n	8005c66 <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 8005c56:	2301      	movs	r3, #1
 8005c58:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d9d4      	bls.n	8005c10 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d109      	bne.n	8005c80 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d102      	bne.n	8005c78 <chk_lock+0x7c>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d101      	bne.n	8005c7c <chk_lock+0x80>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	e011      	b.n	8005ca0 <chk_lock+0xa4>
 8005c7c:	2312      	movs	r3, #18
 8005c7e:	e00f      	b.n	8005ca0 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d109      	bne.n	8005c9a <chk_lock+0x9e>
 8005c86:	4a08      	ldr	r2, [pc, #32]	; (8005ca8 <chk_lock+0xac>)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	18d3      	adds	r3, r2, r3
 8005c8e:	330c      	adds	r3, #12
 8005c90:	881a      	ldrh	r2, [r3, #0]
 8005c92:	2380      	movs	r3, #128	; 0x80
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d101      	bne.n	8005c9e <chk_lock+0xa2>
 8005c9a:	2310      	movs	r3, #16
 8005c9c:	e000      	b.n	8005ca0 <chk_lock+0xa4>
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	b004      	add	sp, #16
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	20000a30 	.word	0x20000a30

08005cac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	607b      	str	r3, [r7, #4]
 8005cb6:	e002      	b.n	8005cbe <enq_lock+0x12>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	607b      	str	r3, [r7, #4]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d805      	bhi.n	8005cd0 <enq_lock+0x24>
 8005cc4:	4b07      	ldr	r3, [pc, #28]	; (8005ce4 <enq_lock+0x38>)
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	0112      	lsls	r2, r2, #4
 8005cca:	58d3      	ldr	r3, [r2, r3]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1f3      	bne.n	8005cb8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3b02      	subs	r3, #2
 8005cd4:	1e5a      	subs	r2, r3, #1
 8005cd6:	4193      	sbcs	r3, r2
 8005cd8:	b2db      	uxtb	r3, r3
}
 8005cda:	0018      	movs	r0, r3
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	b002      	add	sp, #8
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	46c0      	nop			; (mov r8, r8)
 8005ce4:	20000a30 	.word	0x20000a30

08005ce8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	e01e      	b.n	8005d36 <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 8005cf8:	4b3f      	ldr	r3, [pc, #252]	; (8005df8 <inc_lock+0x110>)
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	0112      	lsls	r2, r2, #4
 8005cfe:	58d2      	ldr	r2, [r2, r3]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d113      	bne.n	8005d30 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 8005d08:	4a3b      	ldr	r2, [pc, #236]	; (8005df8 <inc_lock+0x110>)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	011b      	lsls	r3, r3, #4
 8005d0e:	18d3      	adds	r3, r2, r3
 8005d10:	3304      	adds	r3, #4
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d109      	bne.n	8005d30 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 8005d1c:	4a36      	ldr	r2, [pc, #216]	; (8005df8 <inc_lock+0x110>)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	18d3      	adds	r3, r2, r3
 8005d24:	3308      	adds	r3, #8
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d006      	beq.n	8005d3e <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	3301      	adds	r3, #1
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d9dd      	bls.n	8005cf8 <inc_lock+0x10>
 8005d3c:	e000      	b.n	8005d40 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 8005d3e:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d130      	bne.n	8005da8 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	e002      	b.n	8005d52 <inc_lock+0x6a>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d805      	bhi.n	8005d64 <inc_lock+0x7c>
 8005d58:	4b27      	ldr	r3, [pc, #156]	; (8005df8 <inc_lock+0x110>)
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	0112      	lsls	r2, r2, #4
 8005d5e:	58d3      	ldr	r3, [r2, r3]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1f3      	bne.n	8005d4c <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d101      	bne.n	8005d6e <inc_lock+0x86>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e03f      	b.n	8005dee <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6819      	ldr	r1, [r3, #0]
 8005d72:	4b21      	ldr	r3, [pc, #132]	; (8005df8 <inc_lock+0x110>)
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	0112      	lsls	r2, r2, #4
 8005d78:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	491e      	ldr	r1, [pc, #120]	; (8005df8 <inc_lock+0x110>)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	18cb      	adds	r3, r1, r3
 8005d86:	3304      	adds	r3, #4
 8005d88:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	695a      	ldr	r2, [r3, #20]
 8005d8e:	491a      	ldr	r1, [pc, #104]	; (8005df8 <inc_lock+0x110>)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	18cb      	adds	r3, r1, r3
 8005d96:	3308      	adds	r3, #8
 8005d98:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005d9a:	4a17      	ldr	r2, [pc, #92]	; (8005df8 <inc_lock+0x110>)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	011b      	lsls	r3, r3, #4
 8005da0:	18d3      	adds	r3, r2, r3
 8005da2:	330c      	adds	r3, #12
 8005da4:	2200      	movs	r2, #0
 8005da6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d009      	beq.n	8005dc2 <inc_lock+0xda>
 8005dae:	4a12      	ldr	r2, [pc, #72]	; (8005df8 <inc_lock+0x110>)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	18d3      	adds	r3, r2, r3
 8005db6:	330c      	adds	r3, #12
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <inc_lock+0xda>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e015      	b.n	8005dee <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d108      	bne.n	8005dda <inc_lock+0xf2>
 8005dc8:	4a0b      	ldr	r2, [pc, #44]	; (8005df8 <inc_lock+0x110>)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	18d3      	adds	r3, r2, r3
 8005dd0:	330c      	adds	r3, #12
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	e001      	b.n	8005dde <inc_lock+0xf6>
 8005dda:	2380      	movs	r3, #128	; 0x80
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	4906      	ldr	r1, [pc, #24]	; (8005df8 <inc_lock+0x110>)
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	0112      	lsls	r2, r2, #4
 8005de4:	188a      	adds	r2, r1, r2
 8005de6:	320c      	adds	r2, #12
 8005de8:	8013      	strh	r3, [r2, #0]

	return i + 1;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	3301      	adds	r3, #1
}
 8005dee:	0018      	movs	r0, r3
 8005df0:	46bd      	mov	sp, r7
 8005df2:	b004      	add	sp, #16
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	20000a30 	.word	0x20000a30

08005dfc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	607b      	str	r3, [r7, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d832      	bhi.n	8005e76 <dec_lock+0x7a>
		n = Files[i].ctr;
 8005e10:	200e      	movs	r0, #14
 8005e12:	183b      	adds	r3, r7, r0
 8005e14:	491d      	ldr	r1, [pc, #116]	; (8005e8c <dec_lock+0x90>)
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	0112      	lsls	r2, r2, #4
 8005e1a:	188a      	adds	r2, r1, r2
 8005e1c:	320c      	adds	r2, #12
 8005e1e:	8812      	ldrh	r2, [r2, #0]
 8005e20:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005e22:	183b      	adds	r3, r7, r0
 8005e24:	881a      	ldrh	r2, [r3, #0]
 8005e26:	2380      	movs	r3, #128	; 0x80
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d102      	bne.n	8005e34 <dec_lock+0x38>
 8005e2e:	183b      	adds	r3, r7, r0
 8005e30:	2200      	movs	r2, #0
 8005e32:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005e34:	210e      	movs	r1, #14
 8005e36:	187b      	adds	r3, r7, r1
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d004      	beq.n	8005e48 <dec_lock+0x4c>
 8005e3e:	187b      	adds	r3, r7, r1
 8005e40:	881a      	ldrh	r2, [r3, #0]
 8005e42:	187b      	adds	r3, r7, r1
 8005e44:	3a01      	subs	r2, #1
 8005e46:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8005e48:	4a10      	ldr	r2, [pc, #64]	; (8005e8c <dec_lock+0x90>)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	011b      	lsls	r3, r3, #4
 8005e4e:	18d3      	adds	r3, r2, r3
 8005e50:	330c      	adds	r3, #12
 8005e52:	210e      	movs	r1, #14
 8005e54:	187a      	adds	r2, r7, r1
 8005e56:	8812      	ldrh	r2, [r2, #0]
 8005e58:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005e5a:	187b      	adds	r3, r7, r1
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d104      	bne.n	8005e6c <dec_lock+0x70>
 8005e62:	4b0a      	ldr	r3, [pc, #40]	; (8005e8c <dec_lock+0x90>)
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	0112      	lsls	r2, r2, #4
 8005e68:	2100      	movs	r1, #0
 8005e6a:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 8005e6c:	230d      	movs	r3, #13
 8005e6e:	18fb      	adds	r3, r7, r3
 8005e70:	2200      	movs	r2, #0
 8005e72:	701a      	strb	r2, [r3, #0]
 8005e74:	e003      	b.n	8005e7e <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005e76:	230d      	movs	r3, #13
 8005e78:	18fb      	adds	r3, r7, r3
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8005e7e:	230d      	movs	r3, #13
 8005e80:	18fb      	adds	r3, r7, r3
 8005e82:	781b      	ldrb	r3, [r3, #0]
}
 8005e84:	0018      	movs	r0, r3
 8005e86:	46bd      	mov	sp, r7
 8005e88:	b004      	add	sp, #16
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	20000a30 	.word	0x20000a30

08005e90 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	e00e      	b.n	8005ebc <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005e9e:	4b0b      	ldr	r3, [pc, #44]	; (8005ecc <clear_lock+0x3c>)
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	0112      	lsls	r2, r2, #4
 8005ea4:	58d3      	ldr	r3, [r2, r3]
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d104      	bne.n	8005eb6 <clear_lock+0x26>
 8005eac:	4b07      	ldr	r3, [pc, #28]	; (8005ecc <clear_lock+0x3c>)
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	0112      	lsls	r2, r2, #4
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d9ed      	bls.n	8005e9e <clear_lock+0xe>
	}
}
 8005ec2:	46c0      	nop			; (mov r8, r8)
 8005ec4:	46c0      	nop			; (mov r8, r8)
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b004      	add	sp, #16
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	20000a30 	.word	0x20000a30

08005ed0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005ed0:	b590      	push	{r4, r7, lr}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005ed8:	240f      	movs	r4, #15
 8005eda:	193b      	adds	r3, r7, r4
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	78db      	ldrb	r3, [r3, #3]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d034      	beq.n	8005f52 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	7858      	ldrb	r0, [r3, #1]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3330      	adds	r3, #48	; 0x30
 8005ef6:	0019      	movs	r1, r3
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	2301      	movs	r3, #1
 8005efc:	f7ff fd34 	bl	8005968 <disk_write>
 8005f00:	1e03      	subs	r3, r0, #0
 8005f02:	d003      	beq.n	8005f0c <sync_window+0x3c>
			res = FR_DISK_ERR;
 8005f04:	193b      	adds	r3, r7, r4
 8005f06:	2201      	movs	r2, #1
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	e022      	b.n	8005f52 <sync_window+0x82>
		} else {
			fs->wflag = 0;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	1ad2      	subs	r2, r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d217      	bcs.n	8005f52 <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	789b      	ldrb	r3, [r3, #2]
 8005f26:	613b      	str	r3, [r7, #16]
 8005f28:	e010      	b.n	8005f4c <sync_window+0x7c>
					wsect += fs->fsize;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	18d3      	adds	r3, r2, r3
 8005f32:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	7858      	ldrb	r0, [r3, #1]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3330      	adds	r3, #48	; 0x30
 8005f3c:	0019      	movs	r1, r3
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	2301      	movs	r3, #1
 8005f42:	f7ff fd11 	bl	8005968 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	613b      	str	r3, [r7, #16]
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d8eb      	bhi.n	8005f2a <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 8005f52:	230f      	movs	r3, #15
 8005f54:	18fb      	adds	r3, r7, r3
 8005f56:	781b      	ldrb	r3, [r3, #0]
}
 8005f58:	0018      	movs	r0, r3
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	b007      	add	sp, #28
 8005f5e:	bd90      	pop	{r4, r7, pc}

08005f60 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005f60:	b5b0      	push	{r4, r5, r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005f6a:	250f      	movs	r5, #15
 8005f6c:	197b      	adds	r3, r7, r5
 8005f6e:	2200      	movs	r2, #0
 8005f70:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d01f      	beq.n	8005fbc <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005f7c:	197c      	adds	r4, r7, r5
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	0018      	movs	r0, r3
 8005f82:	f7ff ffa5 	bl	8005ed0 <sync_window>
 8005f86:	0003      	movs	r3, r0
 8005f88:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005f8a:	002c      	movs	r4, r5
 8005f8c:	193b      	adds	r3, r7, r4
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d113      	bne.n	8005fbc <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	7858      	ldrb	r0, [r3, #1]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3330      	adds	r3, #48	; 0x30
 8005f9c:	0019      	movs	r1, r3
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f7ff fcb9 	bl	8005918 <disk_read>
 8005fa6:	1e03      	subs	r3, r0, #0
 8005fa8:	d005      	beq.n	8005fb6 <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005faa:	2301      	movs	r3, #1
 8005fac:	425b      	negs	r3, r3
 8005fae:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005fb0:	193b      	adds	r3, r7, r4
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005fbc:	230f      	movs	r3, #15
 8005fbe:	18fb      	adds	r3, r7, r3
 8005fc0:	781b      	ldrb	r3, [r3, #0]
}
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	b004      	add	sp, #16
 8005fc8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005fcc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005fcc:	b5b0      	push	{r4, r5, r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005fd4:	250f      	movs	r5, #15
 8005fd6:	197c      	adds	r4, r7, r5
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f7ff ff78 	bl	8005ed0 <sync_window>
 8005fe0:	0003      	movs	r3, r0
 8005fe2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8005fe4:	197b      	adds	r3, r7, r5
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d15d      	bne.n	80060a8 <sync_fs+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	2b03      	cmp	r3, #3
 8005ff2:	d14c      	bne.n	800608e <sync_fs+0xc2>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	791b      	ldrb	r3, [r3, #4]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d148      	bne.n	800608e <sync_fs+0xc2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3330      	adds	r3, #48	; 0x30
 8006000:	2280      	movs	r2, #128	; 0x80
 8006002:	0092      	lsls	r2, r2, #2
 8006004:	2100      	movs	r1, #0
 8006006:	0018      	movs	r0, r3
 8006008:	f7ff fda1 	bl	8005b4e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3330      	adds	r3, #48	; 0x30
 8006010:	33ff      	adds	r3, #255	; 0xff
 8006012:	33ff      	adds	r3, #255	; 0xff
 8006014:	4a28      	ldr	r2, [pc, #160]	; (80060b8 <sync_fs+0xec>)
 8006016:	0011      	movs	r1, r2
 8006018:	0018      	movs	r0, r3
 800601a:	f7ff fd31 	bl	8005a80 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3330      	adds	r3, #48	; 0x30
 8006022:	4a26      	ldr	r2, [pc, #152]	; (80060bc <sync_fs+0xf0>)
 8006024:	0011      	movs	r1, r2
 8006026:	0018      	movs	r0, r3
 8006028:	f7ff fd48 	bl	8005abc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3330      	adds	r3, #48	; 0x30
 8006030:	33e5      	adds	r3, #229	; 0xe5
 8006032:	33ff      	adds	r3, #255	; 0xff
 8006034:	4a22      	ldr	r2, [pc, #136]	; (80060c0 <sync_fs+0xf4>)
 8006036:	0011      	movs	r1, r2
 8006038:	0018      	movs	r0, r3
 800603a:	f7ff fd3f 	bl	8005abc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	3330      	adds	r3, #48	; 0x30
 8006042:	33e9      	adds	r3, #233	; 0xe9
 8006044:	33ff      	adds	r3, #255	; 0xff
 8006046:	001a      	movs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	0019      	movs	r1, r3
 800604e:	0010      	movs	r0, r2
 8006050:	f7ff fd34 	bl	8005abc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3330      	adds	r3, #48	; 0x30
 8006058:	33ed      	adds	r3, #237	; 0xed
 800605a:	33ff      	adds	r3, #255	; 0xff
 800605c:	001a      	movs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	0019      	movs	r1, r3
 8006064:	0010      	movs	r0, r2
 8006066:	f7ff fd29 	bl	8005abc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	7858      	ldrb	r0, [r3, #1]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3330      	adds	r3, #48	; 0x30
 800607c:	0019      	movs	r1, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006082:	2301      	movs	r3, #1
 8006084:	f7ff fc70 	bl	8005968 <disk_write>
			fs->fsi_flag = 0;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	785b      	ldrb	r3, [r3, #1]
 8006092:	2200      	movs	r2, #0
 8006094:	2100      	movs	r1, #0
 8006096:	0018      	movs	r0, r3
 8006098:	f7ff fc8e 	bl	80059b8 <disk_ioctl>
 800609c:	1e03      	subs	r3, r0, #0
 800609e:	d003      	beq.n	80060a8 <sync_fs+0xdc>
 80060a0:	230f      	movs	r3, #15
 80060a2:	18fb      	adds	r3, r7, r3
 80060a4:	2201      	movs	r2, #1
 80060a6:	701a      	strb	r2, [r3, #0]
	}

	return res;
 80060a8:	230f      	movs	r3, #15
 80060aa:	18fb      	adds	r3, r7, r3
 80060ac:	781b      	ldrb	r3, [r3, #0]
}
 80060ae:	0018      	movs	r0, r3
 80060b0:	46bd      	mov	sp, r7
 80060b2:	b004      	add	sp, #16
 80060b4:	bdb0      	pop	{r4, r5, r7, pc}
 80060b6:	46c0      	nop			; (mov r8, r8)
 80060b8:	0000aa55 	.word	0x0000aa55
 80060bc:	41615252 	.word	0x41615252
 80060c0:	61417272 	.word	0x61417272

080060c4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	3b02      	subs	r3, #2
 80060d2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	3b02      	subs	r3, #2
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d301      	bcc.n	80060e4 <clust2sect+0x20>
 80060e0:	2300      	movs	r3, #0
 80060e2:	e007      	b.n	80060f4 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	895b      	ldrh	r3, [r3, #10]
 80060e8:	001a      	movs	r2, r3
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	435a      	muls	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f2:	18d3      	adds	r3, r2, r3
}
 80060f4:	0018      	movs	r0, r3
 80060f6:	46bd      	mov	sp, r7
 80060f8:	b002      	add	sp, #8
 80060fa:	bd80      	pop	{r7, pc}

080060fc <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d904      	bls.n	800611c <get_fat+0x20>
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	429a      	cmp	r2, r3
 800611a:	d302      	bcc.n	8006122 <get_fat+0x26>
		val = 1;	/* Internal error */
 800611c:	2301      	movs	r3, #1
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	e092      	b.n	8006248 <get_fat+0x14c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006122:	2301      	movs	r3, #1
 8006124:	425b      	negs	r3, r3
 8006126:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b03      	cmp	r3, #3
 800612e:	d064      	beq.n	80061fa <get_fat+0xfe>
 8006130:	dd00      	ble.n	8006134 <get_fat+0x38>
 8006132:	e07f      	b.n	8006234 <get_fat+0x138>
 8006134:	2b01      	cmp	r3, #1
 8006136:	d002      	beq.n	800613e <get_fat+0x42>
 8006138:	2b02      	cmp	r3, #2
 800613a:	d043      	beq.n	80061c4 <get_fat+0xc8>
 800613c:	e07a      	b.n	8006234 <get_fat+0x138>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	085b      	lsrs	r3, r3, #1
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	18d3      	adds	r3, r2, r3
 800614a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	6a1a      	ldr	r2, [r3, #32]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	0a5b      	lsrs	r3, r3, #9
 8006154:	18d2      	adds	r2, r2, r3
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	0011      	movs	r1, r2
 800615a:	0018      	movs	r0, r3
 800615c:	f7ff ff00 	bl	8005f60 <move_window>
 8006160:	1e03      	subs	r3, r0, #0
 8006162:	d16a      	bne.n	800623a <get_fat+0x13e>
			wc = fs->win[bc++ % SS(fs)];
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	60fa      	str	r2, [r7, #12]
 800616a:	05db      	lsls	r3, r3, #23
 800616c:	0ddb      	lsrs	r3, r3, #23
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	2130      	movs	r1, #48	; 0x30
 8006172:	18d3      	adds	r3, r2, r3
 8006174:	185b      	adds	r3, r3, r1
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	6a1a      	ldr	r2, [r3, #32]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	0a5b      	lsrs	r3, r3, #9
 8006182:	18d2      	adds	r2, r2, r3
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	0011      	movs	r1, r2
 8006188:	0018      	movs	r0, r3
 800618a:	f7ff fee9 	bl	8005f60 <move_window>
 800618e:	1e03      	subs	r3, r0, #0
 8006190:	d155      	bne.n	800623e <get_fat+0x142>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	05db      	lsls	r3, r3, #23
 8006196:	0ddb      	lsrs	r3, r3, #23
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	2130      	movs	r1, #48	; 0x30
 800619c:	18d3      	adds	r3, r2, r3
 800619e:	185b      	adds	r3, r3, r1
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	001a      	movs	r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2201      	movs	r2, #1
 80061b0:	4013      	ands	r3, r2
 80061b2:	d002      	beq.n	80061ba <get_fat+0xbe>
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	091b      	lsrs	r3, r3, #4
 80061b8:	e002      	b.n	80061c0 <get_fat+0xc4>
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	051b      	lsls	r3, r3, #20
 80061be:	0d1b      	lsrs	r3, r3, #20
 80061c0:	617b      	str	r3, [r7, #20]
			break;
 80061c2:	e041      	b.n	8006248 <get_fat+0x14c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	0a1b      	lsrs	r3, r3, #8
 80061cc:	18d2      	adds	r2, r2, r3
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	0011      	movs	r1, r2
 80061d2:	0018      	movs	r0, r3
 80061d4:	f7ff fec4 	bl	8005f60 <move_window>
 80061d8:	1e03      	subs	r3, r0, #0
 80061da:	d132      	bne.n	8006242 <get_fat+0x146>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	3330      	adds	r3, #48	; 0x30
 80061e0:	001a      	movs	r2, r3
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	0059      	lsls	r1, r3, #1
 80061e6:	23ff      	movs	r3, #255	; 0xff
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	400b      	ands	r3, r1
 80061ec:	18d3      	adds	r3, r2, r3
 80061ee:	0018      	movs	r0, r3
 80061f0:	f7ff fc0a 	bl	8005a08 <ld_word>
 80061f4:	0003      	movs	r3, r0
 80061f6:	617b      	str	r3, [r7, #20]
			break;
 80061f8:	e026      	b.n	8006248 <get_fat+0x14c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	6a1a      	ldr	r2, [r3, #32]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	09db      	lsrs	r3, r3, #7
 8006202:	18d2      	adds	r2, r2, r3
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	0011      	movs	r1, r2
 8006208:	0018      	movs	r0, r3
 800620a:	f7ff fea9 	bl	8005f60 <move_window>
 800620e:	1e03      	subs	r3, r0, #0
 8006210:	d119      	bne.n	8006246 <get_fat+0x14a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	3330      	adds	r3, #48	; 0x30
 8006216:	001a      	movs	r2, r3
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	0099      	lsls	r1, r3, #2
 800621c:	23fe      	movs	r3, #254	; 0xfe
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	400b      	ands	r3, r1
 8006222:	18d3      	adds	r3, r2, r3
 8006224:	0018      	movs	r0, r3
 8006226:	f7ff fc0a 	bl	8005a3e <ld_dword>
 800622a:	0003      	movs	r3, r0
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	091b      	lsrs	r3, r3, #4
 8006230:	617b      	str	r3, [r7, #20]
			break;
 8006232:	e009      	b.n	8006248 <get_fat+0x14c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006234:	2301      	movs	r3, #1
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	e006      	b.n	8006248 <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800623a:	46c0      	nop			; (mov r8, r8)
 800623c:	e004      	b.n	8006248 <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800623e:	46c0      	nop			; (mov r8, r8)
 8006240:	e002      	b.n	8006248 <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	e000      	b.n	8006248 <get_fat+0x14c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006246:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8006248:	697b      	ldr	r3, [r7, #20]
}
 800624a:	0018      	movs	r0, r3
 800624c:	46bd      	mov	sp, r7
 800624e:	b006      	add	sp, #24
 8006250:	bd80      	pop	{r7, pc}

08006252 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006252:	b5b0      	push	{r4, r5, r7, lr}
 8006254:	b088      	sub	sp, #32
 8006256:	af00      	add	r7, sp, #0
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800625e:	231f      	movs	r3, #31
 8006260:	18fb      	adds	r3, r7, r3
 8006262:	2202      	movs	r2, #2
 8006264:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d800      	bhi.n	800626e <put_fat+0x1c>
 800626c:	e0eb      	b.n	8006446 <put_fat+0x1f4>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	429a      	cmp	r2, r3
 8006276:	d300      	bcc.n	800627a <put_fat+0x28>
 8006278:	e0e5      	b.n	8006446 <put_fat+0x1f4>
		switch (fs->fs_type) {
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	2b03      	cmp	r3, #3
 8006280:	d100      	bne.n	8006284 <put_fat+0x32>
 8006282:	e0a1      	b.n	80063c8 <put_fat+0x176>
 8006284:	dd00      	ble.n	8006288 <put_fat+0x36>
 8006286:	e0de      	b.n	8006446 <put_fat+0x1f4>
 8006288:	2b01      	cmp	r3, #1
 800628a:	d003      	beq.n	8006294 <put_fat+0x42>
 800628c:	2b02      	cmp	r3, #2
 800628e:	d100      	bne.n	8006292 <put_fat+0x40>
 8006290:	e075      	b.n	800637e <put_fat+0x12c>
 8006292:	e0d8      	b.n	8006446 <put_fat+0x1f4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	61bb      	str	r3, [r7, #24]
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	18d3      	adds	r3, r2, r3
 80062a0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a1a      	ldr	r2, [r3, #32]
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	0a5b      	lsrs	r3, r3, #9
 80062aa:	18d2      	adds	r2, r2, r3
 80062ac:	251f      	movs	r5, #31
 80062ae:	197c      	adds	r4, r7, r5
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	0011      	movs	r1, r2
 80062b4:	0018      	movs	r0, r3
 80062b6:	f7ff fe53 	bl	8005f60 <move_window>
 80062ba:	0003      	movs	r3, r0
 80062bc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80062be:	197b      	adds	r3, r7, r5
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d000      	beq.n	80062c8 <put_fat+0x76>
 80062c6:	e0b7      	b.n	8006438 <put_fat+0x1e6>
			p = fs->win + bc++ % SS(fs);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	3330      	adds	r3, #48	; 0x30
 80062cc:	001a      	movs	r2, r3
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	1c59      	adds	r1, r3, #1
 80062d2:	61b9      	str	r1, [r7, #24]
 80062d4:	05db      	lsls	r3, r3, #23
 80062d6:	0ddb      	lsrs	r3, r3, #23
 80062d8:	18d3      	adds	r3, r2, r3
 80062da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2201      	movs	r2, #1
 80062e0:	4013      	ands	r3, r2
 80062e2:	d00d      	beq.n	8006300 <put_fat+0xae>
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	b25b      	sxtb	r3, r3
 80062ea:	220f      	movs	r2, #15
 80062ec:	4013      	ands	r3, r2
 80062ee:	b25a      	sxtb	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	011b      	lsls	r3, r3, #4
 80062f6:	b25b      	sxtb	r3, r3
 80062f8:	4313      	orrs	r3, r2
 80062fa:	b25b      	sxtb	r3, r3
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	e001      	b.n	8006304 <put_fat+0xb2>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	b2db      	uxtb	r3, r3
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a1a      	ldr	r2, [r3, #32]
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	0a5b      	lsrs	r3, r3, #9
 8006316:	18d2      	adds	r2, r2, r3
 8006318:	251f      	movs	r5, #31
 800631a:	197c      	adds	r4, r7, r5
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	0011      	movs	r1, r2
 8006320:	0018      	movs	r0, r3
 8006322:	f7ff fe1d 	bl	8005f60 <move_window>
 8006326:	0003      	movs	r3, r0
 8006328:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800632a:	197b      	adds	r3, r7, r5
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d000      	beq.n	8006334 <put_fat+0xe2>
 8006332:	e083      	b.n	800643c <put_fat+0x1ea>
			p = fs->win + bc % SS(fs);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3330      	adds	r3, #48	; 0x30
 8006338:	001a      	movs	r2, r3
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	05db      	lsls	r3, r3, #23
 800633e:	0ddb      	lsrs	r3, r3, #23
 8006340:	18d3      	adds	r3, r2, r3
 8006342:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2201      	movs	r2, #1
 8006348:	4013      	ands	r3, r2
 800634a:	d003      	beq.n	8006354 <put_fat+0x102>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	091b      	lsrs	r3, r3, #4
 8006350:	b2db      	uxtb	r3, r3
 8006352:	e00e      	b.n	8006372 <put_fat+0x120>
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	b25b      	sxtb	r3, r3
 800635a:	220f      	movs	r2, #15
 800635c:	4393      	bics	r3, r2
 800635e:	b25a      	sxtb	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	0a1b      	lsrs	r3, r3, #8
 8006364:	b25b      	sxtb	r3, r3
 8006366:	210f      	movs	r1, #15
 8006368:	400b      	ands	r3, r1
 800636a:	b25b      	sxtb	r3, r3
 800636c:	4313      	orrs	r3, r2
 800636e:	b25b      	sxtb	r3, r3
 8006370:	b2db      	uxtb	r3, r3
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	70da      	strb	r2, [r3, #3]
			break;
 800637c:	e063      	b.n	8006446 <put_fat+0x1f4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a1a      	ldr	r2, [r3, #32]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	0a1b      	lsrs	r3, r3, #8
 8006386:	18d2      	adds	r2, r2, r3
 8006388:	251f      	movs	r5, #31
 800638a:	197c      	adds	r4, r7, r5
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	0011      	movs	r1, r2
 8006390:	0018      	movs	r0, r3
 8006392:	f7ff fde5 	bl	8005f60 <move_window>
 8006396:	0003      	movs	r3, r0
 8006398:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800639a:	197b      	adds	r3, r7, r5
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d14e      	bne.n	8006440 <put_fat+0x1ee>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3330      	adds	r3, #48	; 0x30
 80063a6:	001a      	movs	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	0059      	lsls	r1, r3, #1
 80063ac:	23ff      	movs	r3, #255	; 0xff
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	400b      	ands	r3, r1
 80063b2:	18d3      	adds	r3, r2, r3
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	b292      	uxth	r2, r2
 80063b8:	0011      	movs	r1, r2
 80063ba:	0018      	movs	r0, r3
 80063bc:	f7ff fb60 	bl	8005a80 <st_word>
			fs->wflag = 1;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2201      	movs	r2, #1
 80063c4:	70da      	strb	r2, [r3, #3]
			break;
 80063c6:	e03e      	b.n	8006446 <put_fat+0x1f4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a1a      	ldr	r2, [r3, #32]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	09db      	lsrs	r3, r3, #7
 80063d0:	18d2      	adds	r2, r2, r3
 80063d2:	251f      	movs	r5, #31
 80063d4:	197c      	adds	r4, r7, r5
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	0011      	movs	r1, r2
 80063da:	0018      	movs	r0, r3
 80063dc:	f7ff fdc0 	bl	8005f60 <move_window>
 80063e0:	0003      	movs	r3, r0
 80063e2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80063e4:	197b      	adds	r3, r7, r5
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d12b      	bne.n	8006444 <put_fat+0x1f2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	091c      	lsrs	r4, r3, #4
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3330      	adds	r3, #48	; 0x30
 80063f6:	001a      	movs	r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	0099      	lsls	r1, r3, #2
 80063fc:	23fe      	movs	r3, #254	; 0xfe
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	400b      	ands	r3, r1
 8006402:	18d3      	adds	r3, r2, r3
 8006404:	0018      	movs	r0, r3
 8006406:	f7ff fb1a 	bl	8005a3e <ld_dword>
 800640a:	0003      	movs	r3, r0
 800640c:	0f1b      	lsrs	r3, r3, #28
 800640e:	071b      	lsls	r3, r3, #28
 8006410:	4323      	orrs	r3, r4
 8006412:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3330      	adds	r3, #48	; 0x30
 8006418:	001a      	movs	r2, r3
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	0099      	lsls	r1, r3, #2
 800641e:	23fe      	movs	r3, #254	; 0xfe
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	400b      	ands	r3, r1
 8006424:	18d3      	adds	r3, r2, r3
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	0011      	movs	r1, r2
 800642a:	0018      	movs	r0, r3
 800642c:	f7ff fb46 	bl	8005abc <st_dword>
			fs->wflag = 1;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2201      	movs	r2, #1
 8006434:	70da      	strb	r2, [r3, #3]
			break;
 8006436:	e006      	b.n	8006446 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8006438:	46c0      	nop			; (mov r8, r8)
 800643a:	e004      	b.n	8006446 <put_fat+0x1f4>
			if (res != FR_OK) break;
 800643c:	46c0      	nop			; (mov r8, r8)
 800643e:	e002      	b.n	8006446 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8006440:	46c0      	nop			; (mov r8, r8)
 8006442:	e000      	b.n	8006446 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8006444:	46c0      	nop			; (mov r8, r8)
		}
	}
	return res;
 8006446:	231f      	movs	r3, #31
 8006448:	18fb      	adds	r3, r7, r3
 800644a:	781b      	ldrb	r3, [r3, #0]
}
 800644c:	0018      	movs	r0, r3
 800644e:	46bd      	mov	sp, r7
 8006450:	b008      	add	sp, #32
 8006452:	bdb0      	pop	{r4, r5, r7, pc}

08006454 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006454:	b5b0      	push	{r4, r5, r7, lr}
 8006456:	b088      	sub	sp, #32
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006460:	231f      	movs	r3, #31
 8006462:	18fb      	adds	r3, r7, r3
 8006464:	2200      	movs	r2, #0
 8006466:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d904      	bls.n	800647e <remove_chain+0x2a>
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	429a      	cmp	r2, r3
 800647c:	d301      	bcc.n	8006482 <remove_chain+0x2e>
 800647e:	2302      	movs	r3, #2
 8006480:	e057      	b.n	8006532 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d011      	beq.n	80064ac <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006488:	251f      	movs	r5, #31
 800648a:	197c      	adds	r4, r7, r5
 800648c:	2301      	movs	r3, #1
 800648e:	425a      	negs	r2, r3
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	0018      	movs	r0, r3
 8006496:	f7ff fedc 	bl	8006252 <put_fat>
 800649a:	0003      	movs	r3, r0
 800649c:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 800649e:	197b      	adds	r3, r7, r5
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <remove_chain+0x58>
 80064a6:	197b      	adds	r3, r7, r5
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	e042      	b.n	8006532 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	0011      	movs	r1, r2
 80064b2:	0018      	movs	r0, r3
 80064b4:	f7ff fe22 	bl	80060fc <get_fat>
 80064b8:	0003      	movs	r3, r0
 80064ba:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d035      	beq.n	800652e <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <remove_chain+0x78>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e032      	b.n	8006532 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	3301      	adds	r3, #1
 80064d0:	d101      	bne.n	80064d6 <remove_chain+0x82>
 80064d2:	2301      	movs	r3, #1
 80064d4:	e02d      	b.n	8006532 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80064d6:	251f      	movs	r5, #31
 80064d8:	197c      	adds	r4, r7, r5
 80064da:	68b9      	ldr	r1, [r7, #8]
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	2200      	movs	r2, #0
 80064e0:	0018      	movs	r0, r3
 80064e2:	f7ff feb6 	bl	8006252 <put_fat>
 80064e6:	0003      	movs	r3, r0
 80064e8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 80064ea:	197b      	adds	r3, r7, r5
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <remove_chain+0xa4>
 80064f2:	197b      	adds	r3, r7, r5
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	e01c      	b.n	8006532 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	3b02      	subs	r3, #2
 8006502:	429a      	cmp	r2, r3
 8006504:	d20b      	bcs.n	800651e <remove_chain+0xca>
			fs->free_clst++;
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	1c5a      	adds	r2, r3, #1
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	791b      	ldrb	r3, [r3, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	4313      	orrs	r3, r2
 8006518:	b2da      	uxtb	r2, r3
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	429a      	cmp	r2, r3
 800652a:	d3bf      	bcc.n	80064ac <remove_chain+0x58>
 800652c:	e000      	b.n	8006530 <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 800652e:	46c0      	nop			; (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	0018      	movs	r0, r3
 8006534:	46bd      	mov	sp, r7
 8006536:	b008      	add	sp, #32
 8006538:	bdb0      	pop	{r4, r5, r7, pc}

0800653a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800653a:	b5b0      	push	{r4, r5, r7, lr}
 800653c:	b088      	sub	sp, #32
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10d      	bne.n	800656c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d004      	beq.n	8006566 <create_chain+0x2c>
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	429a      	cmp	r2, r3
 8006564:	d31d      	bcc.n	80065a2 <create_chain+0x68>
 8006566:	2301      	movs	r3, #1
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	e01a      	b.n	80065a2 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	0011      	movs	r1, r2
 8006572:	0018      	movs	r0, r3
 8006574:	f7ff fdc2 	bl	80060fc <get_fat>
 8006578:	0003      	movs	r3, r0
 800657a:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d801      	bhi.n	8006586 <create_chain+0x4c>
 8006582:	2301      	movs	r3, #1
 8006584:	e07b      	b.n	800667e <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	3301      	adds	r3, #1
 800658a:	d101      	bne.n	8006590 <create_chain+0x56>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	e076      	b.n	800667e <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	429a      	cmp	r2, r3
 8006598:	d201      	bcs.n	800659e <create_chain+0x64>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	e06f      	b.n	800667e <create_chain+0x144>
		scl = clst;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	3301      	adds	r3, #1
 80065aa:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d307      	bcc.n	80065c6 <create_chain+0x8c>
				ncl = 2;
 80065b6:	2302      	movs	r3, #2
 80065b8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80065ba:	69fa      	ldr	r2, [r7, #28]
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d901      	bls.n	80065c6 <create_chain+0x8c>
 80065c2:	2300      	movs	r3, #0
 80065c4:	e05b      	b.n	800667e <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	0011      	movs	r1, r2
 80065cc:	0018      	movs	r0, r3
 80065ce:	f7ff fd95 	bl	80060fc <get_fat>
 80065d2:	0003      	movs	r3, r0
 80065d4:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00d      	beq.n	80065f8 <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d002      	beq.n	80065e8 <create_chain+0xae>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3301      	adds	r3, #1
 80065e6:	d101      	bne.n	80065ec <create_chain+0xb2>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	e048      	b.n	800667e <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 80065ec:	69fa      	ldr	r2, [r7, #28]
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d1d8      	bne.n	80065a6 <create_chain+0x6c>
 80065f4:	2300      	movs	r3, #0
 80065f6:	e042      	b.n	800667e <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 80065f8:	46c0      	nop			; (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80065fa:	2517      	movs	r5, #23
 80065fc:	197c      	adds	r4, r7, r5
 80065fe:	2301      	movs	r3, #1
 8006600:	425a      	negs	r2, r3
 8006602:	69f9      	ldr	r1, [r7, #28]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	0018      	movs	r0, r3
 8006608:	f7ff fe23 	bl	8006252 <put_fat>
 800660c:	0003      	movs	r3, r0
 800660e:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 8006610:	197b      	adds	r3, r7, r5
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10b      	bne.n	8006630 <create_chain+0xf6>
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d008      	beq.n	8006630 <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800661e:	197c      	adds	r4, r7, r5
 8006620:	69fa      	ldr	r2, [r7, #28]
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	0018      	movs	r0, r3
 8006628:	f7ff fe13 	bl	8006252 <put_fat>
 800662c:	0003      	movs	r3, r0
 800662e:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006630:	2317      	movs	r3, #23
 8006632:	18fb      	adds	r3, r7, r3
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d116      	bne.n	8006668 <create_chain+0x12e>
		fs->last_clst = ncl;
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	3b02      	subs	r3, #2
 800664a:	429a      	cmp	r2, r3
 800664c:	d804      	bhi.n	8006658 <create_chain+0x11e>
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	1e5a      	subs	r2, r3, #1
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	791b      	ldrb	r3, [r3, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	4313      	orrs	r3, r2
 8006660:	b2da      	uxtb	r2, r3
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	711a      	strb	r2, [r3, #4]
 8006666:	e009      	b.n	800667c <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006668:	2317      	movs	r3, #23
 800666a:	18fb      	adds	r3, r7, r3
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d102      	bne.n	8006678 <create_chain+0x13e>
 8006672:	2301      	movs	r3, #1
 8006674:	425b      	negs	r3, r3
 8006676:	e000      	b.n	800667a <create_chain+0x140>
 8006678:	2301      	movs	r3, #1
 800667a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800667c:	69fb      	ldr	r3, [r7, #28]
}
 800667e:	0018      	movs	r0, r3
 8006680:	46bd      	mov	sp, r7
 8006682:	b008      	add	sp, #32
 8006684:	bdb0      	pop	{r4, r5, r7, pc}

08006686 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b086      	sub	sp, #24
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	3304      	adds	r3, #4
 800669c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	0a5a      	lsrs	r2, r3, #9
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	895b      	ldrh	r3, [r3, #10]
 80066a6:	0019      	movs	r1, r3
 80066a8:	0010      	movs	r0, r2
 80066aa:	f7f9 fd3f 	bl	800012c <__udivsi3>
 80066ae:	0003      	movs	r3, r0
 80066b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1d1a      	adds	r2, r3, #4
 80066b6:	613a      	str	r2, [r7, #16]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <clmt_clust+0x40>
 80066c2:	2300      	movs	r3, #0
 80066c4:	e010      	b.n	80066e8 <clmt_clust+0x62>
		if (cl < ncl) break;	/* In this fragment? */
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d307      	bcc.n	80066de <clmt_clust+0x58>
		cl -= ncl; tbl++;		/* Next fragment */
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	617b      	str	r3, [r7, #20]
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	3304      	adds	r3, #4
 80066da:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80066dc:	e7e9      	b.n	80066b2 <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 80066de:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	18d3      	adds	r3, r2, r3
}
 80066e8:	0018      	movs	r0, r3
 80066ea:	46bd      	mov	sp, r7
 80066ec:	b006      	add	sp, #24
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	2380      	movs	r3, #128	; 0x80
 8006704:	039b      	lsls	r3, r3, #14
 8006706:	429a      	cmp	r2, r3
 8006708:	d203      	bcs.n	8006712 <dir_sdi+0x22>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	221f      	movs	r2, #31
 800670e:	4013      	ands	r3, r2
 8006710:	d001      	beq.n	8006716 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006712:	2302      	movs	r3, #2
 8006714:	e066      	b.n	80067e4 <dir_sdi+0xf4>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d106      	bne.n	8006736 <dir_sdi+0x46>
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	2b02      	cmp	r3, #2
 800672e:	d902      	bls.n	8006736 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10c      	bne.n	8006756 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	095b      	lsrs	r3, r3, #5
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	8912      	ldrh	r2, [r2, #8]
 8006744:	4293      	cmp	r3, r2
 8006746:	d301      	bcc.n	800674c <dir_sdi+0x5c>
 8006748:	2302      	movs	r3, #2
 800674a:	e04b      	b.n	80067e4 <dir_sdi+0xf4>
		dp->sect = fs->dirbase;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	61da      	str	r2, [r3, #28]
 8006754:	e02c      	b.n	80067b0 <dir_sdi+0xc0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	895b      	ldrh	r3, [r3, #10]
 800675a:	025b      	lsls	r3, r3, #9
 800675c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800675e:	e01a      	b.n	8006796 <dir_sdi+0xa6>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	0011      	movs	r1, r2
 8006766:	0018      	movs	r0, r3
 8006768:	f7ff fcc8 	bl	80060fc <get_fat>
 800676c:	0003      	movs	r3, r0
 800676e:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	3301      	adds	r3, #1
 8006774:	d101      	bne.n	800677a <dir_sdi+0x8a>
 8006776:	2301      	movs	r3, #1
 8006778:	e034      	b.n	80067e4 <dir_sdi+0xf4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d904      	bls.n	800678a <dir_sdi+0x9a>
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	429a      	cmp	r2, r3
 8006788:	d301      	bcc.n	800678e <dir_sdi+0x9e>
 800678a:	2302      	movs	r3, #2
 800678c:	e02a      	b.n	80067e4 <dir_sdi+0xf4>
			ofs -= csz;
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	429a      	cmp	r2, r3
 800679c:	d2e0      	bcs.n	8006760 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	0011      	movs	r1, r2
 80067a4:	0018      	movs	r0, r3
 80067a6:	f7ff fc8d 	bl	80060c4 <clust2sect>
 80067aa:	0002      	movs	r2, r0
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <dir_sdi+0xd2>
 80067be:	2302      	movs	r3, #2
 80067c0:	e010      	b.n	80067e4 <dir_sdi+0xf4>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69da      	ldr	r2, [r3, #28]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	0a5b      	lsrs	r3, r3, #9
 80067ca:	18d2      	adds	r2, r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	3330      	adds	r3, #48	; 0x30
 80067d4:	001a      	movs	r2, r3
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	05db      	lsls	r3, r3, #23
 80067da:	0ddb      	lsrs	r3, r3, #23
 80067dc:	18d2      	adds	r2, r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	0018      	movs	r0, r3
 80067e6:	46bd      	mov	sp, r7
 80067e8:	b006      	add	sp, #24
 80067ea:	bd80      	pop	{r7, pc}

080067ec <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	3320      	adds	r3, #32
 8006802:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d004      	beq.n	8006816 <dir_next+0x2a>
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	2380      	movs	r3, #128	; 0x80
 8006810:	039b      	lsls	r3, r3, #14
 8006812:	429a      	cmp	r2, r3
 8006814:	d301      	bcc.n	800681a <dir_next+0x2e>
 8006816:	2304      	movs	r3, #4
 8006818:	e0ad      	b.n	8006976 <dir_next+0x18a>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	05db      	lsls	r3, r3, #23
 800681e:	0ddb      	lsrs	r3, r3, #23
 8006820:	d000      	beq.n	8006824 <dir_next+0x38>
 8006822:	e09b      	b.n	800695c <dir_next+0x170>
		dp->sect++;				/* Next sector */
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	1c5a      	adds	r2, r3, #1
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10b      	bne.n	800684e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	095b      	lsrs	r3, r3, #5
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	8912      	ldrh	r2, [r2, #8]
 800683e:	4293      	cmp	r3, r2
 8006840:	d200      	bcs.n	8006844 <dir_next+0x58>
 8006842:	e08b      	b.n	800695c <dir_next+0x170>
				dp->sect = 0; return FR_NO_FILE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	61da      	str	r2, [r3, #28]
 800684a:	2304      	movs	r3, #4
 800684c:	e093      	b.n	8006976 <dir_next+0x18a>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	0a5b      	lsrs	r3, r3, #9
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	8952      	ldrh	r2, [r2, #10]
 8006856:	3a01      	subs	r2, #1
 8006858:	4013      	ands	r3, r2
 800685a:	d000      	beq.n	800685e <dir_next+0x72>
 800685c:	e07e      	b.n	800695c <dir_next+0x170>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	0019      	movs	r1, r3
 8006866:	0010      	movs	r0, r2
 8006868:	f7ff fc48 	bl	80060fc <get_fat>
 800686c:	0003      	movs	r3, r0
 800686e:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d801      	bhi.n	800687a <dir_next+0x8e>
 8006876:	2302      	movs	r3, #2
 8006878:	e07d      	b.n	8006976 <dir_next+0x18a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	3301      	adds	r3, #1
 800687e:	d101      	bne.n	8006884 <dir_next+0x98>
 8006880:	2301      	movs	r3, #1
 8006882:	e078      	b.n	8006976 <dir_next+0x18a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	429a      	cmp	r2, r3
 800688c:	d35a      	bcc.n	8006944 <dir_next+0x158>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d104      	bne.n	800689e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	61da      	str	r2, [r3, #28]
 800689a:	2304      	movs	r3, #4
 800689c:	e06b      	b.n	8006976 <dir_next+0x18a>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	0019      	movs	r1, r3
 80068a6:	0010      	movs	r0, r2
 80068a8:	f7ff fe47 	bl	800653a <create_chain>
 80068ac:	0003      	movs	r3, r0
 80068ae:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <dir_next+0xce>
 80068b6:	2307      	movs	r3, #7
 80068b8:	e05d      	b.n	8006976 <dir_next+0x18a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d101      	bne.n	80068c4 <dir_next+0xd8>
 80068c0:	2302      	movs	r3, #2
 80068c2:	e058      	b.n	8006976 <dir_next+0x18a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	3301      	adds	r3, #1
 80068c8:	d101      	bne.n	80068ce <dir_next+0xe2>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e053      	b.n	8006976 <dir_next+0x18a>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	0018      	movs	r0, r3
 80068d2:	f7ff fafd 	bl	8005ed0 <sync_window>
 80068d6:	1e03      	subs	r3, r0, #0
 80068d8:	d001      	beq.n	80068de <dir_next+0xf2>
 80068da:	2301      	movs	r3, #1
 80068dc:	e04b      	b.n	8006976 <dir_next+0x18a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3330      	adds	r3, #48	; 0x30
 80068e2:	2280      	movs	r2, #128	; 0x80
 80068e4:	0092      	lsls	r2, r2, #2
 80068e6:	2100      	movs	r1, #0
 80068e8:	0018      	movs	r0, r3
 80068ea:	f7ff f930 	bl	8005b4e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80068ee:	2300      	movs	r3, #0
 80068f0:	613b      	str	r3, [r7, #16]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	0011      	movs	r1, r2
 80068f8:	0018      	movs	r0, r3
 80068fa:	f7ff fbe3 	bl	80060c4 <clust2sect>
 80068fe:	0002      	movs	r2, r0
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	62da      	str	r2, [r3, #44]	; 0x2c
 8006904:	e012      	b.n	800692c <dir_next+0x140>
						fs->wflag = 1;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2201      	movs	r2, #1
 800690a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	0018      	movs	r0, r3
 8006910:	f7ff fade 	bl	8005ed0 <sync_window>
 8006914:	1e03      	subs	r3, r0, #0
 8006916:	d001      	beq.n	800691c <dir_next+0x130>
 8006918:	2301      	movs	r3, #1
 800691a:	e02c      	b.n	8006976 <dir_next+0x18a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	3301      	adds	r3, #1
 8006920:	613b      	str	r3, [r7, #16]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	62da      	str	r2, [r3, #44]	; 0x2c
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	895b      	ldrh	r3, [r3, #10]
 8006930:	001a      	movs	r2, r3
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	4293      	cmp	r3, r2
 8006936:	d3e6      	bcc.n	8006906 <dir_next+0x11a>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	1ad2      	subs	r2, r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	0011      	movs	r1, r2
 8006950:	0018      	movs	r0, r3
 8006952:	f7ff fbb7 	bl	80060c4 <clust2sect>
 8006956:	0002      	movs	r2, r0
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3330      	adds	r3, #48	; 0x30
 8006966:	001a      	movs	r2, r3
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	05db      	lsls	r3, r3, #23
 800696c:	0ddb      	lsrs	r3, r3, #23
 800696e:	18d2      	adds	r2, r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	0018      	movs	r0, r3
 8006978:	46bd      	mov	sp, r7
 800697a:	b006      	add	sp, #24
 800697c:	bd80      	pop	{r7, pc}

0800697e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800697e:	b5b0      	push	{r4, r5, r7, lr}
 8006980:	b086      	sub	sp, #24
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800698e:	2517      	movs	r5, #23
 8006990:	197c      	adds	r4, r7, r5
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2100      	movs	r1, #0
 8006996:	0018      	movs	r0, r3
 8006998:	f7ff feaa 	bl	80066f0 <dir_sdi>
 800699c:	0003      	movs	r3, r0
 800699e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80069a0:	197b      	adds	r3, r7, r5
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d133      	bne.n	8006a10 <dir_alloc+0x92>
		n = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	69da      	ldr	r2, [r3, #28]
 80069b0:	2517      	movs	r5, #23
 80069b2:	197c      	adds	r4, r7, r5
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	0011      	movs	r1, r2
 80069b8:	0018      	movs	r0, r3
 80069ba:	f7ff fad1 	bl	8005f60 <move_window>
 80069be:	0003      	movs	r3, r0
 80069c0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80069c2:	197b      	adds	r3, r7, r5
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d121      	bne.n	8006a0e <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2be5      	cmp	r3, #229	; 0xe5
 80069d2:	d004      	beq.n	80069de <dir_alloc+0x60>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d107      	bne.n	80069ee <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	3301      	adds	r3, #1
 80069e2:	613b      	str	r3, [r7, #16]
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d102      	bne.n	80069f2 <dir_alloc+0x74>
 80069ec:	e010      	b.n	8006a10 <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80069ee:	2300      	movs	r3, #0
 80069f0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80069f2:	2517      	movs	r5, #23
 80069f4:	197c      	adds	r4, r7, r5
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2101      	movs	r1, #1
 80069fa:	0018      	movs	r0, r3
 80069fc:	f7ff fef6 	bl	80067ec <dir_next>
 8006a00:	0003      	movs	r3, r0
 8006a02:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006a04:	197b      	adds	r3, r7, r5
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0cf      	beq.n	80069ac <dir_alloc+0x2e>
 8006a0c:	e000      	b.n	8006a10 <dir_alloc+0x92>
			if (res != FR_OK) break;
 8006a0e:	46c0      	nop			; (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006a10:	2217      	movs	r2, #23
 8006a12:	18bb      	adds	r3, r7, r2
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	d102      	bne.n	8006a20 <dir_alloc+0xa2>
 8006a1a:	18bb      	adds	r3, r7, r2
 8006a1c:	2207      	movs	r2, #7
 8006a1e:	701a      	strb	r2, [r3, #0]
	return res;
 8006a20:	2317      	movs	r3, #23
 8006a22:	18fb      	adds	r3, r7, r3
 8006a24:	781b      	ldrb	r3, [r3, #0]
}
 8006a26:	0018      	movs	r0, r3
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	b006      	add	sp, #24
 8006a2c:	bdb0      	pop	{r4, r5, r7, pc}

08006a2e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	331a      	adds	r3, #26
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	f7fe ffe3 	bl	8005a08 <ld_word>
 8006a42:	0003      	movs	r3, r0
 8006a44:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d109      	bne.n	8006a62 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	3314      	adds	r3, #20
 8006a52:	0018      	movs	r0, r3
 8006a54:	f7fe ffd8 	bl	8005a08 <ld_word>
 8006a58:	0003      	movs	r3, r0
 8006a5a:	041b      	lsls	r3, r3, #16
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006a62:	68fb      	ldr	r3, [r7, #12]
}
 8006a64:	0018      	movs	r0, r3
 8006a66:	46bd      	mov	sp, r7
 8006a68:	b004      	add	sp, #16
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	331a      	adds	r3, #26
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	b292      	uxth	r2, r2
 8006a80:	0011      	movs	r1, r2
 8006a82:	0018      	movs	r0, r3
 8006a84:	f7fe fffc 	bl	8005a80 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	d109      	bne.n	8006aa4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	3314      	adds	r3, #20
 8006a94:	001a      	movs	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	0c1b      	lsrs	r3, r3, #16
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	0019      	movs	r1, r3
 8006a9e:	0010      	movs	r0, r2
 8006aa0:	f7fe ffee 	bl	8005a80 <st_word>
	}
}
 8006aa4:	46c0      	nop			; (mov r8, r8)
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	b004      	add	sp, #16
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006aac:	b5b0      	push	{r4, r5, r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006aba:	2517      	movs	r5, #23
 8006abc:	197c      	adds	r4, r7, r5
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f7ff fe14 	bl	80066f0 <dir_sdi>
 8006ac8:	0003      	movs	r3, r0
 8006aca:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8006acc:	197b      	adds	r3, r7, r5
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <dir_find+0x2e>
 8006ad4:	197b      	adds	r3, r7, r5
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	e04c      	b.n	8006b74 <dir_find+0xc8>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	69da      	ldr	r2, [r3, #28]
 8006ade:	2517      	movs	r5, #23
 8006ae0:	197c      	adds	r4, r7, r5
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	0011      	movs	r1, r2
 8006ae6:	0018      	movs	r0, r3
 8006ae8:	f7ff fa3a 	bl	8005f60 <move_window>
 8006aec:	0003      	movs	r3, r0
 8006aee:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8006af0:	0029      	movs	r1, r5
 8006af2:	187b      	adds	r3, r7, r1
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d136      	bne.n	8006b68 <dir_find+0xbc>
		c = dp->dir[DIR_Name];
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1a      	ldr	r2, [r3, #32]
 8006afe:	200f      	movs	r0, #15
 8006b00:	183b      	adds	r3, r7, r0
 8006b02:	7812      	ldrb	r2, [r2, #0]
 8006b04:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006b06:	183b      	adds	r3, r7, r0
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d103      	bne.n	8006b16 <dir_find+0x6a>
 8006b0e:	187b      	adds	r3, r7, r1
 8006b10:	2204      	movs	r2, #4
 8006b12:	701a      	strb	r2, [r3, #0]
 8006b14:	e02b      	b.n	8006b6e <dir_find+0xc2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	330b      	adds	r3, #11
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	223f      	movs	r2, #63	; 0x3f
 8006b20:	4013      	ands	r3, r2
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	330b      	adds	r3, #11
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	001a      	movs	r2, r3
 8006b32:	2308      	movs	r3, #8
 8006b34:	4013      	ands	r3, r2
 8006b36:	d109      	bne.n	8006b4c <dir_find+0xa0>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a18      	ldr	r0, [r3, #32]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	3324      	adds	r3, #36	; 0x24
 8006b40:	220b      	movs	r2, #11
 8006b42:	0019      	movs	r1, r3
 8006b44:	f7ff f81c 	bl	8005b80 <mem_cmp>
 8006b48:	1e03      	subs	r3, r0, #0
 8006b4a:	d00f      	beq.n	8006b6c <dir_find+0xc0>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006b4c:	2517      	movs	r5, #23
 8006b4e:	197c      	adds	r4, r7, r5
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2100      	movs	r1, #0
 8006b54:	0018      	movs	r0, r3
 8006b56:	f7ff fe49 	bl	80067ec <dir_next>
 8006b5a:	0003      	movs	r3, r0
 8006b5c:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 8006b5e:	197b      	adds	r3, r7, r5
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0b9      	beq.n	8006ada <dir_find+0x2e>
 8006b66:	e002      	b.n	8006b6e <dir_find+0xc2>
		if (res != FR_OK) break;
 8006b68:	46c0      	nop			; (mov r8, r8)
 8006b6a:	e000      	b.n	8006b6e <dir_find+0xc2>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006b6c:	46c0      	nop			; (mov r8, r8)

	return res;
 8006b6e:	2317      	movs	r3, #23
 8006b70:	18fb      	adds	r3, r7, r3
 8006b72:	781b      	ldrb	r3, [r3, #0]
}
 8006b74:	0018      	movs	r0, r3
 8006b76:	46bd      	mov	sp, r7
 8006b78:	b006      	add	sp, #24
 8006b7a:	bdb0      	pop	{r4, r5, r7, pc}

08006b7c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006b7c:	b5b0      	push	{r4, r5, r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006b8a:	250f      	movs	r5, #15
 8006b8c:	197c      	adds	r4, r7, r5
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2101      	movs	r1, #1
 8006b92:	0018      	movs	r0, r3
 8006b94:	f7ff fef3 	bl	800697e <dir_alloc>
 8006b98:	0003      	movs	r3, r0
 8006b9a:	7023      	strb	r3, [r4, #0]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006b9c:	197b      	adds	r3, r7, r5
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d11f      	bne.n	8006be4 <dir_register+0x68>
		res = move_window(fs, dp->sect);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	69da      	ldr	r2, [r3, #28]
 8006ba8:	197c      	adds	r4, r7, r5
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	0011      	movs	r1, r2
 8006bae:	0018      	movs	r0, r3
 8006bb0:	f7ff f9d6 	bl	8005f60 <move_window>
 8006bb4:	0003      	movs	r3, r0
 8006bb6:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8006bb8:	197b      	adds	r3, r7, r5
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d111      	bne.n	8006be4 <dir_register+0x68>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	0018      	movs	r0, r3
 8006bca:	f7fe ffc0 	bl	8005b4e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a18      	ldr	r0, [r3, #32]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	3324      	adds	r3, #36	; 0x24
 8006bd6:	220b      	movs	r2, #11
 8006bd8:	0019      	movs	r1, r3
 8006bda:	f7fe ff99 	bl	8005b10 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2201      	movs	r2, #1
 8006be2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006be4:	230f      	movs	r3, #15
 8006be6:	18fb      	adds	r3, r7, r3
 8006be8:	781b      	ldrb	r3, [r3, #0]
}
 8006bea:	0018      	movs	r0, r3
 8006bec:	46bd      	mov	sp, r7
 8006bee:	b004      	add	sp, #16
 8006bf0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006bf4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b088      	sub	sp, #32
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	3324      	adds	r3, #36	; 0x24
 8006c08:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	220b      	movs	r2, #11
 8006c0e:	2120      	movs	r1, #32
 8006c10:	0018      	movs	r0, r3
 8006c12:	f7fe ff9c 	bl	8005b4e <mem_set>
	si = i = 0; ni = 8;
 8006c16:	2300      	movs	r3, #0
 8006c18:	613b      	str	r3, [r7, #16]
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	61fb      	str	r3, [r7, #28]
 8006c1e:	2308      	movs	r3, #8
 8006c20:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	61fa      	str	r2, [r7, #28]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	18d2      	adds	r2, r2, r3
 8006c2c:	211b      	movs	r1, #27
 8006c2e:	187b      	adds	r3, r7, r1
 8006c30:	7812      	ldrb	r2, [r2, #0]
 8006c32:	701a      	strb	r2, [r3, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006c34:	000a      	movs	r2, r1
 8006c36:	18bb      	adds	r3, r7, r2
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	2b20      	cmp	r3, #32
 8006c3c:	d800      	bhi.n	8006c40 <create_name+0x4c>
 8006c3e:	e062      	b.n	8006d06 <create_name+0x112>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006c40:	18bb      	adds	r3, r7, r2
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b2f      	cmp	r3, #47	; 0x2f
 8006c46:	d007      	beq.n	8006c58 <create_name+0x64>
 8006c48:	18bb      	adds	r3, r7, r2
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	2b5c      	cmp	r3, #92	; 0x5c
 8006c4e:	d110      	bne.n	8006c72 <create_name+0x7e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006c50:	e002      	b.n	8006c58 <create_name+0x64>
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	3301      	adds	r3, #1
 8006c56:	61fb      	str	r3, [r7, #28]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	18d3      	adds	r3, r2, r3
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2b2f      	cmp	r3, #47	; 0x2f
 8006c62:	d0f6      	beq.n	8006c52 <create_name+0x5e>
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	18d3      	adds	r3, r2, r3
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b5c      	cmp	r3, #92	; 0x5c
 8006c6e:	d0f0      	beq.n	8006c52 <create_name+0x5e>
			break;
 8006c70:	e04a      	b.n	8006d08 <create_name+0x114>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006c72:	231b      	movs	r3, #27
 8006c74:	18fb      	adds	r3, r7, r3
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2b2e      	cmp	r3, #46	; 0x2e
 8006c7a:	d003      	beq.n	8006c84 <create_name+0x90>
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d30e      	bcc.n	8006ca2 <create_name+0xae>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	2b0b      	cmp	r3, #11
 8006c88:	d004      	beq.n	8006c94 <create_name+0xa0>
 8006c8a:	231b      	movs	r3, #27
 8006c8c:	18fb      	adds	r3, r7, r3
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	2b2e      	cmp	r3, #46	; 0x2e
 8006c92:	d001      	beq.n	8006c98 <create_name+0xa4>
 8006c94:	2306      	movs	r3, #6
 8006c96:	e054      	b.n	8006d42 <create_name+0x14e>
			i = 8; ni = 11;				/* Goto extension */
 8006c98:	2308      	movs	r3, #8
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	230b      	movs	r3, #11
 8006c9e:	617b      	str	r3, [r7, #20]
			continue;
 8006ca0:	e030      	b.n	8006d04 <create_name+0x110>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006ca2:	211b      	movs	r1, #27
 8006ca4:	187b      	adds	r3, r7, r1
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	b25b      	sxtb	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	da07      	bge.n	8006cbe <create_name+0xca>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006cae:	187b      	adds	r3, r7, r1
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	3b80      	subs	r3, #128	; 0x80
 8006cb4:	001a      	movs	r2, r3
 8006cb6:	187b      	adds	r3, r7, r1
 8006cb8:	4924      	ldr	r1, [pc, #144]	; (8006d4c <create_name+0x158>)
 8006cba:	5c8a      	ldrb	r2, [r1, r2]
 8006cbc:	701a      	strb	r2, [r3, #0]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006cbe:	231b      	movs	r3, #27
 8006cc0:	18fb      	adds	r3, r7, r3
 8006cc2:	781a      	ldrb	r2, [r3, #0]
 8006cc4:	4b22      	ldr	r3, [pc, #136]	; (8006d50 <create_name+0x15c>)
 8006cc6:	0011      	movs	r1, r2
 8006cc8:	0018      	movs	r0, r3
 8006cca:	f7fe ff7e 	bl	8005bca <chk_chr>
 8006cce:	1e03      	subs	r3, r0, #0
 8006cd0:	d001      	beq.n	8006cd6 <create_name+0xe2>
 8006cd2:	2306      	movs	r3, #6
 8006cd4:	e035      	b.n	8006d42 <create_name+0x14e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006cd6:	221b      	movs	r2, #27
 8006cd8:	18bb      	adds	r3, r7, r2
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	2b60      	cmp	r3, #96	; 0x60
 8006cde:	d908      	bls.n	8006cf2 <create_name+0xfe>
 8006ce0:	18bb      	adds	r3, r7, r2
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b7a      	cmp	r3, #122	; 0x7a
 8006ce6:	d804      	bhi.n	8006cf2 <create_name+0xfe>
 8006ce8:	18bb      	adds	r3, r7, r2
 8006cea:	18ba      	adds	r2, r7, r2
 8006cec:	7812      	ldrb	r2, [r2, #0]
 8006cee:	3a20      	subs	r2, #32
 8006cf0:	701a      	strb	r2, [r3, #0]
			sfn[i++] = c;
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	613a      	str	r2, [r7, #16]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	18d3      	adds	r3, r2, r3
 8006cfc:	221b      	movs	r2, #27
 8006cfe:	18ba      	adds	r2, r7, r2
 8006d00:	7812      	ldrb	r2, [r2, #0]
 8006d02:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006d04:	e78d      	b.n	8006c22 <create_name+0x2e>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006d06:	46c0      	nop			; (mov r8, r8)
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	18d2      	adds	r2, r2, r3
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <create_name+0x128>
 8006d18:	2306      	movs	r3, #6
 8006d1a:	e012      	b.n	8006d42 <create_name+0x14e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2be5      	cmp	r3, #229	; 0xe5
 8006d22:	d102      	bne.n	8006d2a <create_name+0x136>
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2205      	movs	r2, #5
 8006d28:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006d2a:	231b      	movs	r3, #27
 8006d2c:	18fb      	adds	r3, r7, r3
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	2b20      	cmp	r3, #32
 8006d32:	d801      	bhi.n	8006d38 <create_name+0x144>
 8006d34:	2204      	movs	r2, #4
 8006d36:	e000      	b.n	8006d3a <create_name+0x146>
 8006d38:	2200      	movs	r2, #0
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	330b      	adds	r3, #11
 8006d3e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006d40:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006d42:	0018      	movs	r0, r3
 8006d44:	46bd      	mov	sp, r7
 8006d46:	b008      	add	sp, #32
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	46c0      	nop			; (mov r8, r8)
 8006d4c:	0800901c 	.word	0x0800901c
 8006d50:	08008f34 	.word	0x08008f34

08006d54 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006d54:	b5b0      	push	{r4, r5, r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006d68:	e002      	b.n	8006d70 <follow_path+0x1c>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	603b      	str	r3, [r7, #0]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	2b2f      	cmp	r3, #47	; 0x2f
 8006d76:	d0f8      	beq.n	8006d6a <follow_path+0x16>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	2b5c      	cmp	r3, #92	; 0x5c
 8006d7e:	d0f4      	beq.n	8006d6a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	2200      	movs	r2, #0
 8006d84:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2b1f      	cmp	r3, #31
 8006d8c:	d80d      	bhi.n	8006daa <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	222f      	movs	r2, #47	; 0x2f
 8006d92:	2180      	movs	r1, #128	; 0x80
 8006d94:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 8006d96:	2317      	movs	r3, #23
 8006d98:	18fc      	adds	r4, r7, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	0018      	movs	r0, r3
 8006da0:	f7ff fca6 	bl	80066f0 <dir_sdi>
 8006da4:	0003      	movs	r3, r0
 8006da6:	7023      	strb	r3, [r4, #0]
 8006da8:	e052      	b.n	8006e50 <follow_path+0xfc>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006daa:	2517      	movs	r5, #23
 8006dac:	197c      	adds	r4, r7, r5
 8006dae:	003a      	movs	r2, r7
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	0011      	movs	r1, r2
 8006db4:	0018      	movs	r0, r3
 8006db6:	f7ff ff1d 	bl	8006bf4 <create_name>
 8006dba:	0003      	movs	r3, r0
 8006dbc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006dbe:	197b      	adds	r3, r7, r5
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d13f      	bne.n	8006e46 <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006dc6:	197c      	adds	r4, r7, r5
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	0018      	movs	r0, r3
 8006dcc:	f7ff fe6e 	bl	8006aac <dir_find>
 8006dd0:	0003      	movs	r3, r0
 8006dd2:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8006dd4:	200b      	movs	r0, #11
 8006dd6:	183b      	adds	r3, r7, r0
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	212f      	movs	r1, #47	; 0x2f
 8006ddc:	5c52      	ldrb	r2, [r2, r1]
 8006dde:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8006de0:	197b      	adds	r3, r7, r5
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00c      	beq.n	8006e02 <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006de8:	197b      	adds	r3, r7, r5
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	d12c      	bne.n	8006e4a <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006df0:	183b      	adds	r3, r7, r0
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	2204      	movs	r2, #4
 8006df6:	4013      	ands	r3, r2
 8006df8:	d127      	bne.n	8006e4a <follow_path+0xf6>
 8006dfa:	197b      	adds	r3, r7, r5
 8006dfc:	2205      	movs	r2, #5
 8006dfe:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8006e00:	e023      	b.n	8006e4a <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e02:	230b      	movs	r3, #11
 8006e04:	18fb      	adds	r3, r7, r3
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	2204      	movs	r2, #4
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	d11f      	bne.n	8006e4e <follow_path+0xfa>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	799b      	ldrb	r3, [r3, #6]
 8006e12:	001a      	movs	r2, r3
 8006e14:	2310      	movs	r3, #16
 8006e16:	4013      	ands	r3, r2
 8006e18:	d104      	bne.n	8006e24 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 8006e1a:	2317      	movs	r3, #23
 8006e1c:	18fb      	adds	r3, r7, r3
 8006e1e:	2205      	movs	r2, #5
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	e015      	b.n	8006e50 <follow_path+0xfc>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3330      	adds	r3, #48	; 0x30
 8006e28:	001a      	movs	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	05db      	lsls	r3, r3, #23
 8006e30:	0ddb      	lsrs	r3, r3, #23
 8006e32:	18d2      	adds	r2, r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	0011      	movs	r1, r2
 8006e38:	0018      	movs	r0, r3
 8006e3a:	f7ff fdf8 	bl	8006a2e <ld_clust>
 8006e3e:	0002      	movs	r2, r0
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e44:	e7b1      	b.n	8006daa <follow_path+0x56>
			if (res != FR_OK) break;
 8006e46:	46c0      	nop			; (mov r8, r8)
 8006e48:	e002      	b.n	8006e50 <follow_path+0xfc>
				break;
 8006e4a:	46c0      	nop			; (mov r8, r8)
 8006e4c:	e000      	b.n	8006e50 <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e4e:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	return res;
 8006e50:	2317      	movs	r3, #23
 8006e52:	18fb      	adds	r3, r7, r3
 8006e54:	781b      	ldrb	r3, [r3, #0]
}
 8006e56:	0018      	movs	r0, r3
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	b006      	add	sp, #24
 8006e5c:	bdb0      	pop	{r4, r5, r7, pc}

08006e5e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b086      	sub	sp, #24
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006e66:	2301      	movs	r3, #1
 8006e68:	425b      	negs	r3, r3
 8006e6a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d031      	beq.n	8006ed8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	e002      	b.n	8006e82 <get_ldnumber+0x24>
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	2b20      	cmp	r3, #32
 8006e88:	d903      	bls.n	8006e92 <get_ldnumber+0x34>
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	2b3a      	cmp	r3, #58	; 0x3a
 8006e90:	d1f4      	bne.n	8006e7c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	2b3a      	cmp	r3, #58	; 0x3a
 8006e98:	d11c      	bne.n	8006ed4 <get_ldnumber+0x76>
			tp = *path;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	60fa      	str	r2, [r7, #12]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	3b30      	subs	r3, #48	; 0x30
 8006eaa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2b09      	cmp	r3, #9
 8006eb0:	d80e      	bhi.n	8006ed0 <get_ldnumber+0x72>
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d10a      	bne.n	8006ed0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d107      	bne.n	8006ed0 <get_ldnumber+0x72>
					vol = (int)i;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	e002      	b.n	8006eda <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006ed8:	693b      	ldr	r3, [r7, #16]
}
 8006eda:	0018      	movs	r0, r3
 8006edc:	46bd      	mov	sp, r7
 8006ede:	b006      	add	sp, #24
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	70da      	strb	r2, [r3, #3]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	4252      	negs	r2, r2
 8006efa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	0011      	movs	r1, r2
 8006f02:	0018      	movs	r0, r3
 8006f04:	f7ff f82c 	bl	8005f60 <move_window>
 8006f08:	1e03      	subs	r3, r0, #0
 8006f0a:	d001      	beq.n	8006f10 <check_fs+0x2c>
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	e037      	b.n	8006f80 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3330      	adds	r3, #48	; 0x30
 8006f14:	33ff      	adds	r3, #255	; 0xff
 8006f16:	33ff      	adds	r3, #255	; 0xff
 8006f18:	0018      	movs	r0, r3
 8006f1a:	f7fe fd75 	bl	8005a08 <ld_word>
 8006f1e:	0003      	movs	r3, r0
 8006f20:	001a      	movs	r2, r3
 8006f22:	4b19      	ldr	r3, [pc, #100]	; (8006f88 <check_fs+0xa4>)
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d001      	beq.n	8006f2c <check_fs+0x48>
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e029      	b.n	8006f80 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2230      	movs	r2, #48	; 0x30
 8006f30:	5c9b      	ldrb	r3, [r3, r2]
 8006f32:	2be9      	cmp	r3, #233	; 0xe9
 8006f34:	d009      	beq.n	8006f4a <check_fs+0x66>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2230      	movs	r2, #48	; 0x30
 8006f3a:	5c9b      	ldrb	r3, [r3, r2]
 8006f3c:	2beb      	cmp	r3, #235	; 0xeb
 8006f3e:	d11e      	bne.n	8006f7e <check_fs+0x9a>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2232      	movs	r2, #50	; 0x32
 8006f44:	5c9b      	ldrb	r3, [r3, r2]
 8006f46:	2b90      	cmp	r3, #144	; 0x90
 8006f48:	d119      	bne.n	8006f7e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	3330      	adds	r3, #48	; 0x30
 8006f4e:	3336      	adds	r3, #54	; 0x36
 8006f50:	0018      	movs	r0, r3
 8006f52:	f7fe fd74 	bl	8005a3e <ld_dword>
 8006f56:	0003      	movs	r3, r0
 8006f58:	021b      	lsls	r3, r3, #8
 8006f5a:	0a1b      	lsrs	r3, r3, #8
 8006f5c:	4a0b      	ldr	r2, [pc, #44]	; (8006f8c <check_fs+0xa8>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d101      	bne.n	8006f66 <check_fs+0x82>
 8006f62:	2300      	movs	r3, #0
 8006f64:	e00c      	b.n	8006f80 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	3330      	adds	r3, #48	; 0x30
 8006f6a:	3352      	adds	r3, #82	; 0x52
 8006f6c:	0018      	movs	r0, r3
 8006f6e:	f7fe fd66 	bl	8005a3e <ld_dword>
 8006f72:	0003      	movs	r3, r0
 8006f74:	4a06      	ldr	r2, [pc, #24]	; (8006f90 <check_fs+0xac>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d101      	bne.n	8006f7e <check_fs+0x9a>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e000      	b.n	8006f80 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006f7e:	2302      	movs	r3, #2
}
 8006f80:	0018      	movs	r0, r3
 8006f82:	46bd      	mov	sp, r7
 8006f84:	b002      	add	sp, #8
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	0000aa55 	.word	0x0000aa55
 8006f8c:	00544146 	.word	0x00544146
 8006f90:	33544146 	.word	0x33544146

08006f94 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006f94:	b5b0      	push	{r4, r5, r7, lr}
 8006f96:	b096      	sub	sp, #88	; 0x58
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	1dfb      	adds	r3, r7, #7
 8006fa0:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	0018      	movs	r0, r3
 8006fac:	f7ff ff57 	bl	8006e5e <get_ldnumber>
 8006fb0:	0003      	movs	r3, r0
 8006fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	da01      	bge.n	8006fbe <find_volume+0x2a>
 8006fba:	230b      	movs	r3, #11
 8006fbc:	e24b      	b.n	8007456 <find_volume+0x4c2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006fbe:	4bcc      	ldr	r3, [pc, #816]	; (80072f0 <find_volume+0x35c>)
 8006fc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006fc2:	0092      	lsls	r2, r2, #2
 8006fc4:	58d3      	ldr	r3, [r2, r3]
 8006fc6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <find_volume+0x3e>
 8006fce:	230c      	movs	r3, #12
 8006fd0:	e241      	b.n	8007456 <find_volume+0x4c2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fd6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006fd8:	1dfb      	adds	r3, r7, #7
 8006fda:	1dfa      	adds	r2, r7, #7
 8006fdc:	7812      	ldrb	r2, [r2, #0]
 8006fde:	2101      	movs	r1, #1
 8006fe0:	438a      	bics	r2, r1
 8006fe2:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d01b      	beq.n	8007024 <find_volume+0x90>
		stat = disk_status(fs->drv);
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	785b      	ldrb	r3, [r3, #1]
 8006ff0:	2537      	movs	r5, #55	; 0x37
 8006ff2:	197c      	adds	r4, r7, r5
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	f7fe fc3d 	bl	8005874 <disk_status>
 8006ffa:	0003      	movs	r3, r0
 8006ffc:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006ffe:	0029      	movs	r1, r5
 8007000:	187b      	adds	r3, r7, r1
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2201      	movs	r2, #1
 8007006:	4013      	ands	r3, r2
 8007008:	d10c      	bne.n	8007024 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800700a:	1dfb      	adds	r3, r7, #7
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d006      	beq.n	8007020 <find_volume+0x8c>
 8007012:	187b      	adds	r3, r7, r1
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2204      	movs	r2, #4
 8007018:	4013      	ands	r3, r2
 800701a:	d001      	beq.n	8007020 <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 800701c:	230a      	movs	r3, #10
 800701e:	e21a      	b.n	8007456 <find_volume+0x4c2>
			}
			return FR_OK;				/* The file system object is valid */
 8007020:	2300      	movs	r3, #0
 8007022:	e218      	b.n	8007456 <find_volume+0x4c2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	2200      	movs	r2, #0
 8007028:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800702a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800702c:	b2da      	uxtb	r2, r3
 800702e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007030:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	785b      	ldrb	r3, [r3, #1]
 8007036:	2537      	movs	r5, #55	; 0x37
 8007038:	197c      	adds	r4, r7, r5
 800703a:	0018      	movs	r0, r3
 800703c:	f7fe fc3c 	bl	80058b8 <disk_initialize>
 8007040:	0003      	movs	r3, r0
 8007042:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007044:	197b      	adds	r3, r7, r5
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	2201      	movs	r2, #1
 800704a:	4013      	ands	r3, r2
 800704c:	d001      	beq.n	8007052 <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800704e:	2303      	movs	r3, #3
 8007050:	e201      	b.n	8007456 <find_volume+0x4c2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007052:	1dfb      	adds	r3, r7, #7
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d007      	beq.n	800706a <find_volume+0xd6>
 800705a:	2337      	movs	r3, #55	; 0x37
 800705c:	18fb      	adds	r3, r7, r3
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2204      	movs	r2, #4
 8007062:	4013      	ands	r3, r2
 8007064:	d001      	beq.n	800706a <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8007066:	230a      	movs	r3, #10
 8007068:	e1f5      	b.n	8007456 <find_volume+0x4c2>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800706a:	2300      	movs	r3, #0
 800706c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800706e:	2557      	movs	r5, #87	; 0x57
 8007070:	197c      	adds	r4, r7, r5
 8007072:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007076:	0011      	movs	r1, r2
 8007078:	0018      	movs	r0, r3
 800707a:	f7ff ff33 	bl	8006ee4 <check_fs>
 800707e:	0003      	movs	r3, r0
 8007080:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007082:	197b      	adds	r3, r7, r5
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	2b02      	cmp	r3, #2
 8007088:	d14b      	bne.n	8007122 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800708a:	2300      	movs	r3, #0
 800708c:	643b      	str	r3, [r7, #64]	; 0x40
 800708e:	e01d      	b.n	80070cc <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007092:	3330      	adds	r3, #48	; 0x30
 8007094:	001a      	movs	r2, r3
 8007096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007098:	011b      	lsls	r3, r3, #4
 800709a:	33bf      	adds	r3, #191	; 0xbf
 800709c:	33ff      	adds	r3, #255	; 0xff
 800709e:	18d3      	adds	r3, r2, r3
 80070a0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	3304      	adds	r3, #4
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d006      	beq.n	80070ba <find_volume+0x126>
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	3308      	adds	r3, #8
 80070b0:	0018      	movs	r0, r3
 80070b2:	f7fe fcc4 	bl	8005a3e <ld_dword>
 80070b6:	0003      	movs	r3, r0
 80070b8:	e000      	b.n	80070bc <find_volume+0x128>
 80070ba:	2300      	movs	r3, #0
 80070bc:	2214      	movs	r2, #20
 80070be:	18ba      	adds	r2, r7, r2
 80070c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070c2:	0089      	lsls	r1, r1, #2
 80070c4:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80070c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c8:	3301      	adds	r3, #1
 80070ca:	643b      	str	r3, [r7, #64]	; 0x40
 80070cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d9de      	bls.n	8007090 <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80070d2:	2300      	movs	r3, #0
 80070d4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80070d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <find_volume+0x14e>
 80070dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070de:	3b01      	subs	r3, #1
 80070e0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80070e2:	2314      	movs	r3, #20
 80070e4:	18fb      	adds	r3, r7, r3
 80070e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070e8:	0092      	lsls	r2, r2, #2
 80070ea:	58d3      	ldr	r3, [r2, r3]
 80070ec:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80070ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d008      	beq.n	8007106 <find_volume+0x172>
 80070f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	0011      	movs	r1, r2
 80070fa:	0018      	movs	r0, r3
 80070fc:	f7ff fef2 	bl	8006ee4 <check_fs>
 8007100:	0003      	movs	r3, r0
 8007102:	001a      	movs	r2, r3
 8007104:	e000      	b.n	8007108 <find_volume+0x174>
 8007106:	2203      	movs	r2, #3
 8007108:	2157      	movs	r1, #87	; 0x57
 800710a:	187b      	adds	r3, r7, r1
 800710c:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800710e:	187b      	adds	r3, r7, r1
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d905      	bls.n	8007122 <find_volume+0x18e>
 8007116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007118:	3301      	adds	r3, #1
 800711a:	643b      	str	r3, [r7, #64]	; 0x40
 800711c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800711e:	2b03      	cmp	r3, #3
 8007120:	d9df      	bls.n	80070e2 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007122:	2357      	movs	r3, #87	; 0x57
 8007124:	18fb      	adds	r3, r7, r3
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b04      	cmp	r3, #4
 800712a:	d101      	bne.n	8007130 <find_volume+0x19c>
 800712c:	2301      	movs	r3, #1
 800712e:	e192      	b.n	8007456 <find_volume+0x4c2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007130:	2357      	movs	r3, #87	; 0x57
 8007132:	18fb      	adds	r3, r7, r3
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d901      	bls.n	800713e <find_volume+0x1aa>
 800713a:	230d      	movs	r3, #13
 800713c:	e18b      	b.n	8007456 <find_volume+0x4c2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800713e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007140:	3330      	adds	r3, #48	; 0x30
 8007142:	330b      	adds	r3, #11
 8007144:	0018      	movs	r0, r3
 8007146:	f7fe fc5f 	bl	8005a08 <ld_word>
 800714a:	0003      	movs	r3, r0
 800714c:	001a      	movs	r2, r3
 800714e:	2380      	movs	r3, #128	; 0x80
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	429a      	cmp	r2, r3
 8007154:	d001      	beq.n	800715a <find_volume+0x1c6>
 8007156:	230d      	movs	r3, #13
 8007158:	e17d      	b.n	8007456 <find_volume+0x4c2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715c:	3330      	adds	r3, #48	; 0x30
 800715e:	3316      	adds	r3, #22
 8007160:	0018      	movs	r0, r3
 8007162:	f7fe fc51 	bl	8005a08 <ld_word>
 8007166:	0003      	movs	r3, r0
 8007168:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800716a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d107      	bne.n	8007180 <find_volume+0x1ec>
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007172:	3330      	adds	r3, #48	; 0x30
 8007174:	3324      	adds	r3, #36	; 0x24
 8007176:	0018      	movs	r0, r3
 8007178:	f7fe fc61 	bl	8005a3e <ld_dword>
 800717c:	0003      	movs	r3, r0
 800717e:	64fb      	str	r3, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007182:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007184:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	2240      	movs	r2, #64	; 0x40
 800718a:	5c9a      	ldrb	r2, [r3, r2]
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007192:	789b      	ldrb	r3, [r3, #2]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d005      	beq.n	80071a4 <find_volume+0x210>
 8007198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719a:	789b      	ldrb	r3, [r3, #2]
 800719c:	2b02      	cmp	r3, #2
 800719e:	d001      	beq.n	80071a4 <find_volume+0x210>
 80071a0:	230d      	movs	r3, #13
 80071a2:	e158      	b.n	8007456 <find_volume+0x4c2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80071a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a6:	789b      	ldrb	r3, [r3, #2]
 80071a8:	001a      	movs	r2, r3
 80071aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ac:	4353      	muls	r3, r2
 80071ae:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80071b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b2:	223d      	movs	r2, #61	; 0x3d
 80071b4:	5c9b      	ldrb	r3, [r3, r2]
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ba:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80071bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071be:	895b      	ldrh	r3, [r3, #10]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d007      	beq.n	80071d4 <find_volume+0x240>
 80071c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c6:	895b      	ldrh	r3, [r3, #10]
 80071c8:	001a      	movs	r2, r3
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	895b      	ldrh	r3, [r3, #10]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	4013      	ands	r3, r2
 80071d2:	d001      	beq.n	80071d8 <find_volume+0x244>
 80071d4:	230d      	movs	r3, #13
 80071d6:	e13e      	b.n	8007456 <find_volume+0x4c2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	3330      	adds	r3, #48	; 0x30
 80071dc:	3311      	adds	r3, #17
 80071de:	0018      	movs	r0, r3
 80071e0:	f7fe fc12 	bl	8005a08 <ld_word>
 80071e4:	0003      	movs	r3, r0
 80071e6:	001a      	movs	r2, r3
 80071e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80071ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ee:	891b      	ldrh	r3, [r3, #8]
 80071f0:	220f      	movs	r2, #15
 80071f2:	4013      	ands	r3, r2
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <find_volume+0x26a>
 80071fa:	230d      	movs	r3, #13
 80071fc:	e12b      	b.n	8007456 <find_volume+0x4c2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80071fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007200:	3330      	adds	r3, #48	; 0x30
 8007202:	3313      	adds	r3, #19
 8007204:	0018      	movs	r0, r3
 8007206:	f7fe fbff 	bl	8005a08 <ld_word>
 800720a:	0003      	movs	r3, r0
 800720c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800720e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007210:	2b00      	cmp	r3, #0
 8007212:	d107      	bne.n	8007224 <find_volume+0x290>
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	3330      	adds	r3, #48	; 0x30
 8007218:	3320      	adds	r3, #32
 800721a:	0018      	movs	r0, r3
 800721c:	f7fe fc0f 	bl	8005a3e <ld_dword>
 8007220:	0003      	movs	r3, r0
 8007222:	64bb      	str	r3, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007226:	3330      	adds	r3, #48	; 0x30
 8007228:	330e      	adds	r3, #14
 800722a:	252e      	movs	r5, #46	; 0x2e
 800722c:	197c      	adds	r4, r7, r5
 800722e:	0018      	movs	r0, r3
 8007230:	f7fe fbea 	bl	8005a08 <ld_word>
 8007234:	0003      	movs	r3, r0
 8007236:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007238:	197b      	adds	r3, r7, r5
 800723a:	881b      	ldrh	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <find_volume+0x2b0>
 8007240:	230d      	movs	r3, #13
 8007242:	e108      	b.n	8007456 <find_volume+0x4c2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007244:	232e      	movs	r3, #46	; 0x2e
 8007246:	18fb      	adds	r3, r7, r3
 8007248:	881a      	ldrh	r2, [r3, #0]
 800724a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800724c:	18d3      	adds	r3, r2, r3
 800724e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007250:	8912      	ldrh	r2, [r2, #8]
 8007252:	0912      	lsrs	r2, r2, #4
 8007254:	b292      	uxth	r2, r2
 8007256:	189b      	adds	r3, r3, r2
 8007258:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800725a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725e:	429a      	cmp	r2, r3
 8007260:	d201      	bcs.n	8007266 <find_volume+0x2d2>
 8007262:	230d      	movs	r3, #13
 8007264:	e0f7      	b.n	8007456 <find_volume+0x4c2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726a:	1ad2      	subs	r2, r2, r3
 800726c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726e:	895b      	ldrh	r3, [r3, #10]
 8007270:	0019      	movs	r1, r3
 8007272:	0010      	movs	r0, r2
 8007274:	f7f8 ff5a 	bl	800012c <__udivsi3>
 8007278:	0003      	movs	r3, r0
 800727a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <find_volume+0x2f2>
 8007282:	230d      	movs	r3, #13
 8007284:	e0e7      	b.n	8007456 <find_volume+0x4c2>
		fmt = FS_FAT32;
 8007286:	2157      	movs	r1, #87	; 0x57
 8007288:	187b      	adds	r3, r7, r1
 800728a:	2203      	movs	r2, #3
 800728c:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800728e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007290:	4a18      	ldr	r2, [pc, #96]	; (80072f4 <find_volume+0x360>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d802      	bhi.n	800729c <find_volume+0x308>
 8007296:	187b      	adds	r3, r7, r1
 8007298:	2202      	movs	r2, #2
 800729a:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	4a16      	ldr	r2, [pc, #88]	; (80072f8 <find_volume+0x364>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d803      	bhi.n	80072ac <find_volume+0x318>
 80072a4:	2357      	movs	r3, #87	; 0x57
 80072a6:	18fb      	adds	r3, r7, r3
 80072a8:	2201      	movs	r2, #1
 80072aa:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	1c9a      	adds	r2, r3, #2
 80072b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80072b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072b8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80072ba:	232e      	movs	r3, #46	; 0x2e
 80072bc:	18fb      	adds	r3, r7, r3
 80072be:	881a      	ldrh	r2, [r3, #0]
 80072c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072c2:	18d2      	adds	r2, r2, r3
 80072c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80072c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072cc:	18d2      	adds	r2, r2, r3
 80072ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80072d2:	2357      	movs	r3, #87	; 0x57
 80072d4:	18fb      	adds	r3, r7, r3
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	2b03      	cmp	r3, #3
 80072da:	d123      	bne.n	8007324 <find_volume+0x390>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80072dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072de:	3330      	adds	r3, #48	; 0x30
 80072e0:	332a      	adds	r3, #42	; 0x2a
 80072e2:	0018      	movs	r0, r3
 80072e4:	f7fe fb90 	bl	8005a08 <ld_word>
 80072e8:	1e03      	subs	r3, r0, #0
 80072ea:	d007      	beq.n	80072fc <find_volume+0x368>
 80072ec:	230d      	movs	r3, #13
 80072ee:	e0b2      	b.n	8007456 <find_volume+0x4c2>
 80072f0:	20000a28 	.word	0x20000a28
 80072f4:	0000fff5 	.word	0x0000fff5
 80072f8:	00000ff5 	.word	0x00000ff5
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80072fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fe:	891b      	ldrh	r3, [r3, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <find_volume+0x374>
 8007304:	230d      	movs	r3, #13
 8007306:	e0a6      	b.n	8007456 <find_volume+0x4c2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730a:	3330      	adds	r3, #48	; 0x30
 800730c:	332c      	adds	r3, #44	; 0x2c
 800730e:	0018      	movs	r0, r3
 8007310:	f7fe fb95 	bl	8005a3e <ld_dword>
 8007314:	0002      	movs	r2, r0
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800731a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	647b      	str	r3, [r7, #68]	; 0x44
 8007322:	e020      	b.n	8007366 <find_volume+0x3d2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007326:	891b      	ldrh	r3, [r3, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <find_volume+0x39c>
 800732c:	230d      	movs	r3, #13
 800732e:	e092      	b.n	8007456 <find_volume+0x4c2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007332:	6a1a      	ldr	r2, [r3, #32]
 8007334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007336:	18d2      	adds	r2, r2, r3
 8007338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800733c:	2357      	movs	r3, #87	; 0x57
 800733e:	18fb      	adds	r3, r7, r3
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b02      	cmp	r3, #2
 8007344:	d103      	bne.n	800734e <find_volume+0x3ba>
 8007346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	e00a      	b.n	8007364 <find_volume+0x3d0>
 800734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007350:	695a      	ldr	r2, [r3, #20]
 8007352:	0013      	movs	r3, r2
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	189b      	adds	r3, r3, r2
 8007358:	085a      	lsrs	r2, r3, #1
 800735a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	2101      	movs	r1, #1
 8007360:	400b      	ands	r3, r1
 8007362:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007364:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	699a      	ldr	r2, [r3, #24]
 800736a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800736c:	493c      	ldr	r1, [pc, #240]	; (8007460 <find_volume+0x4cc>)
 800736e:	468c      	mov	ip, r1
 8007370:	4463      	add	r3, ip
 8007372:	0a5b      	lsrs	r3, r3, #9
 8007374:	429a      	cmp	r2, r3
 8007376:	d201      	bcs.n	800737c <find_volume+0x3e8>
 8007378:	230d      	movs	r3, #13
 800737a:	e06c      	b.n	8007456 <find_volume+0x4c2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	2201      	movs	r2, #1
 8007380:	4252      	negs	r2, r2
 8007382:	611a      	str	r2, [r3, #16]
 8007384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007386:	691a      	ldr	r2, [r3, #16]
 8007388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800738c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738e:	2280      	movs	r2, #128	; 0x80
 8007390:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007392:	2357      	movs	r3, #87	; 0x57
 8007394:	18fb      	adds	r3, r7, r3
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2b03      	cmp	r3, #3
 800739a:	d148      	bne.n	800742e <find_volume+0x49a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800739c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739e:	3330      	adds	r3, #48	; 0x30
 80073a0:	3330      	adds	r3, #48	; 0x30
 80073a2:	0018      	movs	r0, r3
 80073a4:	f7fe fb30 	bl	8005a08 <ld_word>
 80073a8:	0003      	movs	r3, r0
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d13f      	bne.n	800742e <find_volume+0x49a>
			&& move_window(fs, bsect + 1) == FR_OK)
 80073ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b4:	0011      	movs	r1, r2
 80073b6:	0018      	movs	r0, r3
 80073b8:	f7fe fdd2 	bl	8005f60 <move_window>
 80073bc:	1e03      	subs	r3, r0, #0
 80073be:	d136      	bne.n	800742e <find_volume+0x49a>
		{
			fs->fsi_flag = 0;
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	2200      	movs	r2, #0
 80073c4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80073c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c8:	3330      	adds	r3, #48	; 0x30
 80073ca:	33ff      	adds	r3, #255	; 0xff
 80073cc:	33ff      	adds	r3, #255	; 0xff
 80073ce:	0018      	movs	r0, r3
 80073d0:	f7fe fb1a 	bl	8005a08 <ld_word>
 80073d4:	0003      	movs	r3, r0
 80073d6:	001a      	movs	r2, r3
 80073d8:	4b22      	ldr	r3, [pc, #136]	; (8007464 <find_volume+0x4d0>)
 80073da:	429a      	cmp	r2, r3
 80073dc:	d127      	bne.n	800742e <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80073de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e0:	3330      	adds	r3, #48	; 0x30
 80073e2:	0018      	movs	r0, r3
 80073e4:	f7fe fb2b 	bl	8005a3e <ld_dword>
 80073e8:	0003      	movs	r3, r0
 80073ea:	4a1f      	ldr	r2, [pc, #124]	; (8007468 <find_volume+0x4d4>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d11e      	bne.n	800742e <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	3330      	adds	r3, #48	; 0x30
 80073f4:	33e5      	adds	r3, #229	; 0xe5
 80073f6:	33ff      	adds	r3, #255	; 0xff
 80073f8:	0018      	movs	r0, r3
 80073fa:	f7fe fb20 	bl	8005a3e <ld_dword>
 80073fe:	0003      	movs	r3, r0
 8007400:	4a1a      	ldr	r2, [pc, #104]	; (800746c <find_volume+0x4d8>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d113      	bne.n	800742e <find_volume+0x49a>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007408:	3330      	adds	r3, #48	; 0x30
 800740a:	33e9      	adds	r3, #233	; 0xe9
 800740c:	33ff      	adds	r3, #255	; 0xff
 800740e:	0018      	movs	r0, r3
 8007410:	f7fe fb15 	bl	8005a3e <ld_dword>
 8007414:	0002      	movs	r2, r0
 8007416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007418:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741c:	3330      	adds	r3, #48	; 0x30
 800741e:	33ed      	adds	r3, #237	; 0xed
 8007420:	33ff      	adds	r3, #255	; 0xff
 8007422:	0018      	movs	r0, r3
 8007424:	f7fe fb0b 	bl	8005a3e <ld_dword>
 8007428:	0002      	movs	r2, r0
 800742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800742e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007430:	2257      	movs	r2, #87	; 0x57
 8007432:	18ba      	adds	r2, r7, r2
 8007434:	7812      	ldrb	r2, [r2, #0]
 8007436:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007438:	4b0d      	ldr	r3, [pc, #52]	; (8007470 <find_volume+0x4dc>)
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	3301      	adds	r3, #1
 800743e:	b29a      	uxth	r2, r3
 8007440:	4b0b      	ldr	r3, [pc, #44]	; (8007470 <find_volume+0x4dc>)
 8007442:	801a      	strh	r2, [r3, #0]
 8007444:	4b0a      	ldr	r3, [pc, #40]	; (8007470 <find_volume+0x4dc>)
 8007446:	881a      	ldrh	r2, [r3, #0]
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800744c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744e:	0018      	movs	r0, r3
 8007450:	f7fe fd1e 	bl	8005e90 <clear_lock>
#endif
	return FR_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	0018      	movs	r0, r3
 8007458:	46bd      	mov	sp, r7
 800745a:	b016      	add	sp, #88	; 0x58
 800745c:	bdb0      	pop	{r4, r5, r7, pc}
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	000001ff 	.word	0x000001ff
 8007464:	0000aa55 	.word	0x0000aa55
 8007468:	41615252 	.word	0x41615252
 800746c:	61417272 	.word	0x61417272
 8007470:	20000a2c 	.word	0x20000a2c

08007474 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007474:	b590      	push	{r4, r7, lr}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800747e:	240f      	movs	r4, #15
 8007480:	193b      	adds	r3, r7, r4
 8007482:	2209      	movs	r2, #9
 8007484:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d01d      	beq.n	80074c8 <validate+0x54>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d019      	beq.n	80074c8 <validate+0x54>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d014      	beq.n	80074c8 <validate+0x54>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	889a      	ldrh	r2, [r3, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	88db      	ldrh	r3, [r3, #6]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d10d      	bne.n	80074c8 <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	785b      	ldrb	r3, [r3, #1]
 80074b2:	0018      	movs	r0, r3
 80074b4:	f7fe f9de 	bl	8005874 <disk_status>
 80074b8:	0003      	movs	r3, r0
 80074ba:	001a      	movs	r2, r3
 80074bc:	2301      	movs	r3, #1
 80074be:	4013      	ands	r3, r2
 80074c0:	d102      	bne.n	80074c8 <validate+0x54>
			res = FR_OK;
 80074c2:	193b      	adds	r3, r7, r4
 80074c4:	2200      	movs	r2, #0
 80074c6:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80074c8:	230f      	movs	r3, #15
 80074ca:	18fb      	adds	r3, r7, r3
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d102      	bne.n	80074d8 <validate+0x64>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	e000      	b.n	80074da <validate+0x66>
 80074d8:	2200      	movs	r2, #0
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	601a      	str	r2, [r3, #0]
	return res;
 80074de:	230f      	movs	r3, #15
 80074e0:	18fb      	adds	r3, r7, r3
 80074e2:	781b      	ldrb	r3, [r3, #0]
}
 80074e4:	0018      	movs	r0, r3
 80074e6:	46bd      	mov	sp, r7
 80074e8:	b005      	add	sp, #20
 80074ea:	bd90      	pop	{r4, r7, pc}

080074ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80074ec:	b5b0      	push	{r4, r5, r7, lr}
 80074ee:	b088      	sub	sp, #32
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	1dfb      	adds	r3, r7, #7
 80074f8:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80074fe:	2310      	movs	r3, #16
 8007500:	18fb      	adds	r3, r7, r3
 8007502:	0018      	movs	r0, r3
 8007504:	f7ff fcab 	bl	8006e5e <get_ldnumber>
 8007508:	0003      	movs	r3, r0
 800750a:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	2b00      	cmp	r3, #0
 8007510:	da01      	bge.n	8007516 <f_mount+0x2a>
 8007512:	230b      	movs	r3, #11
 8007514:	e030      	b.n	8007578 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007516:	4b1a      	ldr	r3, [pc, #104]	; (8007580 <f_mount+0x94>)
 8007518:	69fa      	ldr	r2, [r7, #28]
 800751a:	0092      	lsls	r2, r2, #2
 800751c:	58d3      	ldr	r3, [r2, r3]
 800751e:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d006      	beq.n	8007534 <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	0018      	movs	r0, r3
 800752a:	f7fe fcb1 	bl	8005e90 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	2200      	movs	r2, #0
 8007532:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007540:	68f9      	ldr	r1, [r7, #12]
 8007542:	4b0f      	ldr	r3, [pc, #60]	; (8007580 <f_mount+0x94>)
 8007544:	69fa      	ldr	r2, [r7, #28]
 8007546:	0092      	lsls	r2, r2, #2
 8007548:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <f_mount+0x6c>
 8007550:	1dfb      	adds	r3, r7, #7
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d001      	beq.n	800755c <f_mount+0x70>
 8007558:	2300      	movs	r3, #0
 800755a:	e00d      	b.n	8007578 <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800755c:	2517      	movs	r5, #23
 800755e:	197c      	adds	r4, r7, r5
 8007560:	230c      	movs	r3, #12
 8007562:	18f9      	adds	r1, r7, r3
 8007564:	2308      	movs	r3, #8
 8007566:	18fb      	adds	r3, r7, r3
 8007568:	2200      	movs	r2, #0
 800756a:	0018      	movs	r0, r3
 800756c:	f7ff fd12 	bl	8006f94 <find_volume>
 8007570:	0003      	movs	r3, r0
 8007572:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8007574:	197b      	adds	r3, r7, r5
 8007576:	781b      	ldrb	r3, [r3, #0]
}
 8007578:	0018      	movs	r0, r3
 800757a:	46bd      	mov	sp, r7
 800757c:	b008      	add	sp, #32
 800757e:	bdb0      	pop	{r4, r5, r7, pc}
 8007580:	20000a28 	.word	0x20000a28

08007584 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007586:	b099      	sub	sp, #100	; 0x64
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	1dfb      	adds	r3, r7, #7
 8007590:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <f_open+0x18>
 8007598:	2309      	movs	r3, #9
 800759a:	e1e3      	b.n	8007964 <f_open+0x3e0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800759c:	1dfb      	adds	r3, r7, #7
 800759e:	1dfa      	adds	r2, r7, #7
 80075a0:	7812      	ldrb	r2, [r2, #0]
 80075a2:	213f      	movs	r1, #63	; 0x3f
 80075a4:	400a      	ands	r2, r1
 80075a6:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80075a8:	255f      	movs	r5, #95	; 0x5f
 80075aa:	197c      	adds	r4, r7, r5
 80075ac:	1dfb      	adds	r3, r7, #7
 80075ae:	781a      	ldrb	r2, [r3, #0]
 80075b0:	2310      	movs	r3, #16
 80075b2:	18f9      	adds	r1, r7, r3
 80075b4:	2308      	movs	r3, #8
 80075b6:	18fb      	adds	r3, r7, r3
 80075b8:	0018      	movs	r0, r3
 80075ba:	f7ff fceb 	bl	8006f94 <find_volume>
 80075be:	0003      	movs	r3, r0
 80075c0:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80075c2:	197b      	adds	r3, r7, r5
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d000      	beq.n	80075cc <f_open+0x48>
 80075ca:	e1c0      	b.n	800794e <f_open+0x3ca>
		dj.obj.fs = fs;
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	2614      	movs	r6, #20
 80075d0:	19bb      	adds	r3, r7, r6
 80075d2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	197c      	adds	r4, r7, r5
 80075d8:	19bb      	adds	r3, r7, r6
 80075da:	0011      	movs	r1, r2
 80075dc:	0018      	movs	r0, r3
 80075de:	f7ff fbb9 	bl	8006d54 <follow_path>
 80075e2:	0003      	movs	r3, r0
 80075e4:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80075e6:	0029      	movs	r1, r5
 80075e8:	197b      	adds	r3, r7, r5
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d11b      	bne.n	8007628 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80075f0:	19bb      	adds	r3, r7, r6
 80075f2:	222f      	movs	r2, #47	; 0x2f
 80075f4:	5c9b      	ldrb	r3, [r3, r2]
 80075f6:	b25b      	sxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	da03      	bge.n	8007604 <f_open+0x80>
				res = FR_INVALID_NAME;
 80075fc:	187b      	adds	r3, r7, r1
 80075fe:	2206      	movs	r2, #6
 8007600:	701a      	strb	r2, [r3, #0]
 8007602:	e011      	b.n	8007628 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007604:	1dfb      	adds	r3, r7, #7
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	2201      	movs	r2, #1
 800760a:	4393      	bics	r3, r2
 800760c:	1e5a      	subs	r2, r3, #1
 800760e:	4193      	sbcs	r3, r2
 8007610:	b2db      	uxtb	r3, r3
 8007612:	001a      	movs	r2, r3
 8007614:	235f      	movs	r3, #95	; 0x5f
 8007616:	18fc      	adds	r4, r7, r3
 8007618:	2314      	movs	r3, #20
 800761a:	18fb      	adds	r3, r7, r3
 800761c:	0011      	movs	r1, r2
 800761e:	0018      	movs	r0, r3
 8007620:	f7fe faec 	bl	8005bfc <chk_lock>
 8007624:	0003      	movs	r3, r0
 8007626:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007628:	1dfb      	adds	r3, r7, #7
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	221c      	movs	r2, #28
 800762e:	4013      	ands	r3, r2
 8007630:	d100      	bne.n	8007634 <f_open+0xb0>
 8007632:	e096      	b.n	8007762 <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 8007634:	225f      	movs	r2, #95	; 0x5f
 8007636:	18bb      	adds	r3, r7, r2
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d01a      	beq.n	8007674 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800763e:	18bb      	adds	r3, r7, r2
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	2b04      	cmp	r3, #4
 8007644:	d10f      	bne.n	8007666 <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007646:	f7fe fb31 	bl	8005cac <enq_lock>
 800764a:	1e03      	subs	r3, r0, #0
 800764c:	d007      	beq.n	800765e <f_open+0xda>
 800764e:	2314      	movs	r3, #20
 8007650:	18fb      	adds	r3, r7, r3
 8007652:	0018      	movs	r0, r3
 8007654:	f7ff fa92 	bl	8006b7c <dir_register>
 8007658:	0003      	movs	r3, r0
 800765a:	001a      	movs	r2, r3
 800765c:	e000      	b.n	8007660 <f_open+0xdc>
 800765e:	2212      	movs	r2, #18
 8007660:	235f      	movs	r3, #95	; 0x5f
 8007662:	18fb      	adds	r3, r7, r3
 8007664:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007666:	1dfb      	adds	r3, r7, #7
 8007668:	1dfa      	adds	r2, r7, #7
 800766a:	7812      	ldrb	r2, [r2, #0]
 800766c:	2108      	movs	r1, #8
 800766e:	430a      	orrs	r2, r1
 8007670:	701a      	strb	r2, [r3, #0]
 8007672:	e014      	b.n	800769e <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007674:	2314      	movs	r3, #20
 8007676:	18fb      	adds	r3, r7, r3
 8007678:	799b      	ldrb	r3, [r3, #6]
 800767a:	001a      	movs	r2, r3
 800767c:	2311      	movs	r3, #17
 800767e:	4013      	ands	r3, r2
 8007680:	d004      	beq.n	800768c <f_open+0x108>
					res = FR_DENIED;
 8007682:	235f      	movs	r3, #95	; 0x5f
 8007684:	18fb      	adds	r3, r7, r3
 8007686:	2207      	movs	r2, #7
 8007688:	701a      	strb	r2, [r3, #0]
 800768a:	e008      	b.n	800769e <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800768c:	1dfb      	adds	r3, r7, #7
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	2204      	movs	r2, #4
 8007692:	4013      	ands	r3, r2
 8007694:	d003      	beq.n	800769e <f_open+0x11a>
 8007696:	235f      	movs	r3, #95	; 0x5f
 8007698:	18fb      	adds	r3, r7, r3
 800769a:	2208      	movs	r2, #8
 800769c:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800769e:	245f      	movs	r4, #95	; 0x5f
 80076a0:	193b      	adds	r3, r7, r4
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d000      	beq.n	80076aa <f_open+0x126>
 80076a8:	e07b      	b.n	80077a2 <f_open+0x21e>
 80076aa:	1dfb      	adds	r3, r7, #7
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2208      	movs	r2, #8
 80076b0:	4013      	ands	r3, r2
 80076b2:	d100      	bne.n	80076b6 <f_open+0x132>
 80076b4:	e075      	b.n	80077a2 <f_open+0x21e>
				dw = GET_FATTIME();
 80076b6:	f7fe f86f 	bl	8005798 <get_fattime>
 80076ba:	0003      	movs	r3, r0
 80076bc:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80076be:	2514      	movs	r5, #20
 80076c0:	197b      	adds	r3, r7, r5
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	330e      	adds	r3, #14
 80076c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80076c8:	0011      	movs	r1, r2
 80076ca:	0018      	movs	r0, r3
 80076cc:	f7fe f9f6 	bl	8005abc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80076d0:	197b      	adds	r3, r7, r5
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	3316      	adds	r3, #22
 80076d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80076d8:	0011      	movs	r1, r2
 80076da:	0018      	movs	r0, r3
 80076dc:	f7fe f9ee 	bl	8005abc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80076e0:	197b      	adds	r3, r7, r5
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	330b      	adds	r3, #11
 80076e6:	2220      	movs	r2, #32
 80076e8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	197b      	adds	r3, r7, r5
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	0019      	movs	r1, r3
 80076f2:	0010      	movs	r0, r2
 80076f4:	f7ff f99b 	bl	8006a2e <ld_clust>
 80076f8:	0003      	movs	r3, r0
 80076fa:	64fb      	str	r3, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80076fc:	6938      	ldr	r0, [r7, #16]
 80076fe:	197b      	adds	r3, r7, r5
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	2200      	movs	r2, #0
 8007704:	0019      	movs	r1, r3
 8007706:	f7ff f9b1 	bl	8006a6c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800770a:	197b      	adds	r3, r7, r5
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	331c      	adds	r3, #28
 8007710:	2100      	movs	r1, #0
 8007712:	0018      	movs	r0, r3
 8007714:	f7fe f9d2 	bl	8005abc <st_dword>
					fs->wflag = 1;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	2201      	movs	r2, #1
 800771c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800771e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007720:	2b00      	cmp	r3, #0
 8007722:	d03e      	beq.n	80077a2 <f_open+0x21e>
						dw = fs->winsect;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800772a:	0026      	movs	r6, r4
 800772c:	193c      	adds	r4, r7, r4
 800772e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007730:	197b      	adds	r3, r7, r5
 8007732:	2200      	movs	r2, #0
 8007734:	0018      	movs	r0, r3
 8007736:	f7fe fe8d 	bl	8006454 <remove_chain>
 800773a:	0003      	movs	r3, r0
 800773c:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 800773e:	19bb      	adds	r3, r7, r6
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d12d      	bne.n	80077a2 <f_open+0x21e>
							res = move_window(fs, dw);
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	19bc      	adds	r4, r7, r6
 800774a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800774c:	0011      	movs	r1, r2
 800774e:	0018      	movs	r0, r3
 8007750:	f7fe fc06 	bl	8005f60 <move_window>
 8007754:	0003      	movs	r3, r0
 8007756:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800775c:	3a01      	subs	r2, #1
 800775e:	60da      	str	r2, [r3, #12]
 8007760:	e01f      	b.n	80077a2 <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007762:	215f      	movs	r1, #95	; 0x5f
 8007764:	187b      	adds	r3, r7, r1
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d11a      	bne.n	80077a2 <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800776c:	2314      	movs	r3, #20
 800776e:	18fb      	adds	r3, r7, r3
 8007770:	799b      	ldrb	r3, [r3, #6]
 8007772:	001a      	movs	r2, r3
 8007774:	2310      	movs	r3, #16
 8007776:	4013      	ands	r3, r2
 8007778:	d003      	beq.n	8007782 <f_open+0x1fe>
					res = FR_NO_FILE;
 800777a:	187b      	adds	r3, r7, r1
 800777c:	2204      	movs	r2, #4
 800777e:	701a      	strb	r2, [r3, #0]
 8007780:	e00f      	b.n	80077a2 <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007782:	1dfb      	adds	r3, r7, #7
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	2202      	movs	r2, #2
 8007788:	4013      	ands	r3, r2
 800778a:	d00a      	beq.n	80077a2 <f_open+0x21e>
 800778c:	2314      	movs	r3, #20
 800778e:	18fb      	adds	r3, r7, r3
 8007790:	799b      	ldrb	r3, [r3, #6]
 8007792:	001a      	movs	r2, r3
 8007794:	2301      	movs	r3, #1
 8007796:	4013      	ands	r3, r2
 8007798:	d003      	beq.n	80077a2 <f_open+0x21e>
						res = FR_DENIED;
 800779a:	235f      	movs	r3, #95	; 0x5f
 800779c:	18fb      	adds	r3, r7, r3
 800779e:	2207      	movs	r2, #7
 80077a0:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 80077a2:	235f      	movs	r3, #95	; 0x5f
 80077a4:	18fb      	adds	r3, r7, r3
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d12b      	bne.n	8007804 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80077ac:	1dfb      	adds	r3, r7, #7
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2208      	movs	r2, #8
 80077b2:	4013      	ands	r3, r2
 80077b4:	d005      	beq.n	80077c2 <f_open+0x23e>
				mode |= FA_MODIFIED;
 80077b6:	1dfb      	adds	r3, r7, #7
 80077b8:	1dfa      	adds	r2, r7, #7
 80077ba:	7812      	ldrb	r2, [r2, #0]
 80077bc:	2140      	movs	r1, #64	; 0x40
 80077be:	430a      	orrs	r2, r1
 80077c0:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80077ca:	2114      	movs	r1, #20
 80077cc:	187b      	adds	r3, r7, r1
 80077ce:	6a1a      	ldr	r2, [r3, #32]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80077d4:	1dfb      	adds	r3, r7, #7
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	2201      	movs	r2, #1
 80077da:	4393      	bics	r3, r2
 80077dc:	1e5a      	subs	r2, r3, #1
 80077de:	4193      	sbcs	r3, r2
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	001a      	movs	r2, r3
 80077e4:	187b      	adds	r3, r7, r1
 80077e6:	0011      	movs	r1, r2
 80077e8:	0018      	movs	r0, r3
 80077ea:	f7fe fa7d 	bl	8005ce8 <inc_lock>
 80077ee:	0002      	movs	r2, r0
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d103      	bne.n	8007804 <f_open+0x280>
 80077fc:	235f      	movs	r3, #95	; 0x5f
 80077fe:	18fb      	adds	r3, r7, r3
 8007800:	2202      	movs	r2, #2
 8007802:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007804:	235f      	movs	r3, #95	; 0x5f
 8007806:	18fb      	adds	r3, r7, r3
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d000      	beq.n	8007810 <f_open+0x28c>
 800780e:	e09e      	b.n	800794e <f_open+0x3ca>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	2414      	movs	r4, #20
 8007814:	193b      	adds	r3, r7, r4
 8007816:	6a1b      	ldr	r3, [r3, #32]
 8007818:	0019      	movs	r1, r3
 800781a:	0010      	movs	r0, r2
 800781c:	f7ff f907 	bl	8006a2e <ld_clust>
 8007820:	0002      	movs	r2, r0
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007826:	193b      	adds	r3, r7, r4
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	331c      	adds	r3, #28
 800782c:	0018      	movs	r0, r3
 800782e:	f7fe f906 	bl	8005a3e <ld_dword>
 8007832:	0002      	movs	r2, r0
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	88da      	ldrh	r2, [r3, #6]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	1dfa      	adds	r2, r7, #7
 8007850:	7812      	ldrb	r2, [r2, #0]
 8007852:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3330      	adds	r3, #48	; 0x30
 800786a:	2280      	movs	r2, #128	; 0x80
 800786c:	0092      	lsls	r2, r2, #2
 800786e:	2100      	movs	r1, #0
 8007870:	0018      	movs	r0, r3
 8007872:	f7fe f96c 	bl	8005b4e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007876:	1dfb      	adds	r3, r7, #7
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	2220      	movs	r2, #32
 800787c:	4013      	ands	r3, r2
 800787e:	d066      	beq.n	800794e <f_open+0x3ca>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d062      	beq.n	800794e <f_open+0x3ca>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	895b      	ldrh	r3, [r3, #10]
 8007894:	025b      	lsls	r3, r3, #9
 8007896:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	657b      	str	r3, [r7, #84]	; 0x54
 80078a4:	e019      	b.n	80078da <f_open+0x356>
					clst = get_fat(&fp->obj, clst);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078aa:	0011      	movs	r1, r2
 80078ac:	0018      	movs	r0, r3
 80078ae:	f7fe fc25 	bl	80060fc <get_fat>
 80078b2:	0003      	movs	r3, r0
 80078b4:	65bb      	str	r3, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80078b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d803      	bhi.n	80078c4 <f_open+0x340>
 80078bc:	235f      	movs	r3, #95	; 0x5f
 80078be:	18fb      	adds	r3, r7, r3
 80078c0:	2202      	movs	r2, #2
 80078c2:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80078c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078c6:	3301      	adds	r3, #1
 80078c8:	d103      	bne.n	80078d2 <f_open+0x34e>
 80078ca:	235f      	movs	r3, #95	; 0x5f
 80078cc:	18fb      	adds	r3, r7, r3
 80078ce:	2201      	movs	r2, #1
 80078d0:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80078d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	657b      	str	r3, [r7, #84]	; 0x54
 80078da:	235f      	movs	r3, #95	; 0x5f
 80078dc:	18fb      	adds	r3, r7, r3
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d103      	bne.n	80078ec <f_open+0x368>
 80078e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d8dc      	bhi.n	80078a6 <f_open+0x322>
				}
				fp->clust = clst;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078f0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80078f2:	245f      	movs	r4, #95	; 0x5f
 80078f4:	193b      	adds	r3, r7, r4
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d128      	bne.n	800794e <f_open+0x3ca>
 80078fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078fe:	05db      	lsls	r3, r3, #23
 8007900:	0ddb      	lsrs	r3, r3, #23
 8007902:	d024      	beq.n	800794e <f_open+0x3ca>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007908:	0011      	movs	r1, r2
 800790a:	0018      	movs	r0, r3
 800790c:	f7fe fbda 	bl	80060c4 <clust2sect>
 8007910:	0003      	movs	r3, r0
 8007912:	647b      	str	r3, [r7, #68]	; 0x44
 8007914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007916:	2b00      	cmp	r3, #0
 8007918:	d103      	bne.n	8007922 <f_open+0x39e>
						res = FR_INT_ERR;
 800791a:	193b      	adds	r3, r7, r4
 800791c:	2202      	movs	r2, #2
 800791e:	701a      	strb	r2, [r3, #0]
 8007920:	e015      	b.n	800794e <f_open+0x3ca>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007924:	0a5a      	lsrs	r2, r3, #9
 8007926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007928:	18d2      	adds	r2, r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	7858      	ldrb	r0, [r3, #1]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	3330      	adds	r3, #48	; 0x30
 8007936:	0019      	movs	r1, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6a1a      	ldr	r2, [r3, #32]
 800793c:	2301      	movs	r3, #1
 800793e:	f7fd ffeb 	bl	8005918 <disk_read>
 8007942:	1e03      	subs	r3, r0, #0
 8007944:	d003      	beq.n	800794e <f_open+0x3ca>
 8007946:	235f      	movs	r3, #95	; 0x5f
 8007948:	18fb      	adds	r3, r7, r3
 800794a:	2201      	movs	r2, #1
 800794c:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800794e:	235f      	movs	r3, #95	; 0x5f
 8007950:	18fb      	adds	r3, r7, r3
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <f_open+0x3da>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800795e:	235f      	movs	r3, #95	; 0x5f
 8007960:	18fb      	adds	r3, r7, r3
 8007962:	781b      	ldrb	r3, [r3, #0]
}
 8007964:	0018      	movs	r0, r3
 8007966:	46bd      	mov	sp, r7
 8007968:	b019      	add	sp, #100	; 0x64
 800796a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800796c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800796c:	b5b0      	push	{r4, r5, r7, lr}
 800796e:	b08e      	sub	sp, #56	; 0x38
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
 8007978:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2200      	movs	r2, #0
 8007982:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2537      	movs	r5, #55	; 0x37
 8007988:	197c      	adds	r4, r7, r5
 800798a:	2214      	movs	r2, #20
 800798c:	18ba      	adds	r2, r7, r2
 800798e:	0011      	movs	r1, r2
 8007990:	0018      	movs	r0, r3
 8007992:	f7ff fd6f 	bl	8007474 <validate>
 8007996:	0003      	movs	r3, r0
 8007998:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800799a:	197b      	adds	r3, r7, r5
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d107      	bne.n	80079b2 <f_read+0x46>
 80079a2:	197b      	adds	r3, r7, r5
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	7d52      	ldrb	r2, [r2, #21]
 80079a8:	701a      	strb	r2, [r3, #0]
 80079aa:	197b      	adds	r3, r7, r5
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <f_read+0x4e>
 80079b2:	2337      	movs	r3, #55	; 0x37
 80079b4:	18fb      	adds	r3, r7, r3
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	e115      	b.n	8007be6 <f_read+0x27a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	7d1b      	ldrb	r3, [r3, #20]
 80079be:	001a      	movs	r2, r3
 80079c0:	2301      	movs	r3, #1
 80079c2:	4013      	ands	r3, r2
 80079c4:	d101      	bne.n	80079ca <f_read+0x5e>
 80079c6:	2307      	movs	r3, #7
 80079c8:	e10d      	b.n	8007be6 <f_read+0x27a>
	remain = fp->obj.objsize - fp->fptr;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	68da      	ldr	r2, [r3, #12]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d800      	bhi.n	80079e0 <f_read+0x74>
 80079de:	e0fd      	b.n	8007bdc <f_read+0x270>
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80079e4:	e0fa      	b.n	8007bdc <f_read+0x270>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	05db      	lsls	r3, r3, #23
 80079ec:	0ddb      	lsrs	r3, r3, #23
 80079ee:	d000      	beq.n	80079f2 <f_read+0x86>
 80079f0:	e0c5      	b.n	8007b7e <f_read+0x212>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	0a5b      	lsrs	r3, r3, #9
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	8952      	ldrh	r2, [r2, #10]
 80079fc:	3a01      	subs	r2, #1
 80079fe:	4013      	ands	r3, r2
 8007a00:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d131      	bne.n	8007a6c <f_read+0x100>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d103      	bne.n	8007a18 <f_read+0xac>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	633b      	str	r3, [r7, #48]	; 0x30
 8007a16:	e016      	b.n	8007a46 <f_read+0xda>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d009      	beq.n	8007a34 <f_read+0xc8>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	699a      	ldr	r2, [r3, #24]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	0011      	movs	r1, r2
 8007a28:	0018      	movs	r0, r3
 8007a2a:	f7fe fe2c 	bl	8006686 <clmt_clust>
 8007a2e:	0003      	movs	r3, r0
 8007a30:	633b      	str	r3, [r7, #48]	; 0x30
 8007a32:	e008      	b.n	8007a46 <f_read+0xda>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	0019      	movs	r1, r3
 8007a3c:	0010      	movs	r0, r2
 8007a3e:	f7fe fb5d 	bl	80060fc <get_fat>
 8007a42:	0003      	movs	r3, r0
 8007a44:	633b      	str	r3, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d804      	bhi.n	8007a56 <f_read+0xea>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	755a      	strb	r2, [r3, #21]
 8007a52:	2302      	movs	r3, #2
 8007a54:	e0c7      	b.n	8007be6 <f_read+0x27a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	3301      	adds	r3, #1
 8007a5a:	d104      	bne.n	8007a66 <f_read+0xfa>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	755a      	strb	r2, [r3, #21]
 8007a62:	2301      	movs	r3, #1
 8007a64:	e0bf      	b.n	8007be6 <f_read+0x27a>
				fp->clust = clst;				/* Update current cluster */
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a6a:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	0019      	movs	r1, r3
 8007a74:	0010      	movs	r0, r2
 8007a76:	f7fe fb25 	bl	80060c4 <clust2sect>
 8007a7a:	0003      	movs	r3, r0
 8007a7c:	61bb      	str	r3, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d104      	bne.n	8007a8e <f_read+0x122>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2202      	movs	r2, #2
 8007a88:	755a      	strb	r2, [r3, #21]
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	e0ab      	b.n	8007be6 <f_read+0x27a>
			sect += csect;
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	18d3      	adds	r3, r2, r3
 8007a94:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	0a5b      	lsrs	r3, r3, #9
 8007a9a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d038      	beq.n	8007b14 <f_read+0x1a8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007aa2:	69fa      	ldr	r2, [r7, #28]
 8007aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa6:	18d3      	adds	r3, r2, r3
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	8952      	ldrh	r2, [r2, #10]
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d905      	bls.n	8007abc <f_read+0x150>
					cc = fs->csize - csect;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	895b      	ldrh	r3, [r3, #10]
 8007ab4:	001a      	movs	r2, r3
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	7858      	ldrb	r0, [r3, #1]
 8007ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ac6:	f7fd ff27 	bl	8005918 <disk_read>
 8007aca:	1e03      	subs	r3, r0, #0
 8007acc:	d004      	beq.n	8007ad8 <f_read+0x16c>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	755a      	strb	r2, [r3, #21]
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e086      	b.n	8007be6 <f_read+0x27a>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	7d1b      	ldrb	r3, [r3, #20]
 8007adc:	b25b      	sxtb	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	da14      	bge.n	8007b0c <f_read+0x1a0>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a1a      	ldr	r2, [r3, #32]
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d90d      	bls.n	8007b0c <f_read+0x1a0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6a1a      	ldr	r2, [r3, #32]
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	025b      	lsls	r3, r3, #9
 8007afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007afc:	18d0      	adds	r0, r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3330      	adds	r3, #48	; 0x30
 8007b02:	2280      	movs	r2, #128	; 0x80
 8007b04:	0092      	lsls	r2, r2, #2
 8007b06:	0019      	movs	r1, r3
 8007b08:	f7fe f802 	bl	8005b10 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0e:	025b      	lsls	r3, r3, #9
 8007b10:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007b12:	e04f      	b.n	8007bb4 <f_read+0x248>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d02c      	beq.n	8007b78 <f_read+0x20c>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	7d1b      	ldrb	r3, [r3, #20]
 8007b22:	b25b      	sxtb	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	da17      	bge.n	8007b58 <f_read+0x1ec>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	7858      	ldrb	r0, [r3, #1]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	3330      	adds	r3, #48	; 0x30
 8007b30:	0019      	movs	r1, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6a1a      	ldr	r2, [r3, #32]
 8007b36:	2301      	movs	r3, #1
 8007b38:	f7fd ff16 	bl	8005968 <disk_write>
 8007b3c:	1e03      	subs	r3, r0, #0
 8007b3e:	d004      	beq.n	8007b4a <f_read+0x1de>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2201      	movs	r2, #1
 8007b44:	755a      	strb	r2, [r3, #21]
 8007b46:	2301      	movs	r3, #1
 8007b48:	e04d      	b.n	8007be6 <f_read+0x27a>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	7d1b      	ldrb	r3, [r3, #20]
 8007b4e:	227f      	movs	r2, #127	; 0x7f
 8007b50:	4013      	ands	r3, r2
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	7858      	ldrb	r0, [r3, #1]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	3330      	adds	r3, #48	; 0x30
 8007b60:	0019      	movs	r1, r3
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	2301      	movs	r3, #1
 8007b66:	f7fd fed7 	bl	8005918 <disk_read>
 8007b6a:	1e03      	subs	r3, r0, #0
 8007b6c:	d004      	beq.n	8007b78 <f_read+0x20c>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2201      	movs	r2, #1
 8007b72:	755a      	strb	r2, [r3, #21]
 8007b74:	2301      	movs	r3, #1
 8007b76:	e036      	b.n	8007be6 <f_read+0x27a>
			}
#endif
			fp->sect = sect;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	05db      	lsls	r3, r3, #23
 8007b84:	0ddb      	lsrs	r3, r3, #23
 8007b86:	2280      	movs	r2, #128	; 0x80
 8007b88:	0092      	lsls	r2, r2, #2
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d901      	bls.n	8007b9a <f_read+0x22e>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3330      	adds	r3, #48	; 0x30
 8007b9e:	001a      	movs	r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	05db      	lsls	r3, r3, #23
 8007ba6:	0ddb      	lsrs	r3, r3, #23
 8007ba8:	18d1      	adds	r1, r2, r3
 8007baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f7fd ffae 	bl	8005b10 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb8:	18d3      	adds	r3, r2, r3
 8007bba:	627b      	str	r3, [r7, #36]	; 0x24
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	699a      	ldr	r2, [r3, #24]
 8007bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc2:	18d2      	adds	r2, r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	619a      	str	r2, [r3, #24]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bce:	18d2      	adds	r2, r2, r3
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d000      	beq.n	8007be4 <f_read+0x278>
 8007be2:	e700      	b.n	80079e6 <f_read+0x7a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	0018      	movs	r0, r3
 8007be8:	46bd      	mov	sp, r7
 8007bea:	b00e      	add	sp, #56	; 0x38
 8007bec:	bdb0      	pop	{r4, r5, r7, pc}

08007bee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007bee:	b5b0      	push	{r4, r5, r7, lr}
 8007bf0:	b08c      	sub	sp, #48	; 0x30
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	607a      	str	r2, [r7, #4]
 8007bfa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2200      	movs	r2, #0
 8007c04:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	252f      	movs	r5, #47	; 0x2f
 8007c0a:	197c      	adds	r4, r7, r5
 8007c0c:	2210      	movs	r2, #16
 8007c0e:	18ba      	adds	r2, r7, r2
 8007c10:	0011      	movs	r1, r2
 8007c12:	0018      	movs	r0, r3
 8007c14:	f7ff fc2e 	bl	8007474 <validate>
 8007c18:	0003      	movs	r3, r0
 8007c1a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007c1c:	197b      	adds	r3, r7, r5
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d107      	bne.n	8007c34 <f_write+0x46>
 8007c24:	197b      	adds	r3, r7, r5
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	7d52      	ldrb	r2, [r2, #21]
 8007c2a:	701a      	strb	r2, [r3, #0]
 8007c2c:	197b      	adds	r3, r7, r5
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d003      	beq.n	8007c3c <f_write+0x4e>
 8007c34:	232f      	movs	r3, #47	; 0x2f
 8007c36:	18fb      	adds	r3, r7, r3
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	e14e      	b.n	8007eda <f_write+0x2ec>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	7d1b      	ldrb	r3, [r3, #20]
 8007c40:	001a      	movs	r2, r3
 8007c42:	2302      	movs	r3, #2
 8007c44:	4013      	ands	r3, r2
 8007c46:	d101      	bne.n	8007c4c <f_write+0x5e>
 8007c48:	2307      	movs	r3, #7
 8007c4a:	e146      	b.n	8007eda <f_write+0x2ec>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	699a      	ldr	r2, [r3, #24]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	18d2      	adds	r2, r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d300      	bcc.n	8007c5e <f_write+0x70>
 8007c5c:	e12f      	b.n	8007ebe <f_write+0x2d0>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	43db      	mvns	r3, r3
 8007c64:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007c66:	e12a      	b.n	8007ebe <f_write+0x2d0>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	05db      	lsls	r3, r3, #23
 8007c6e:	0ddb      	lsrs	r3, r3, #23
 8007c70:	d000      	beq.n	8007c74 <f_write+0x86>
 8007c72:	e0e3      	b.n	8007e3c <f_write+0x24e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	0a5b      	lsrs	r3, r3, #9
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	8952      	ldrh	r2, [r2, #10]
 8007c7e:	3a01      	subs	r2, #1
 8007c80:	4013      	ands	r3, r2
 8007c82:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d146      	bne.n	8007d18 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10d      	bne.n	8007cae <f_write+0xc0>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d11e      	bne.n	8007cdc <f_write+0xee>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	0018      	movs	r0, r3
 8007ca4:	f7fe fc49 	bl	800653a <create_chain>
 8007ca8:	0003      	movs	r3, r0
 8007caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cac:	e016      	b.n	8007cdc <f_write+0xee>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d009      	beq.n	8007cca <f_write+0xdc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	699a      	ldr	r2, [r3, #24]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	0011      	movs	r1, r2
 8007cbe:	0018      	movs	r0, r3
 8007cc0:	f7fe fce1 	bl	8006686 <clmt_clust>
 8007cc4:	0003      	movs	r3, r0
 8007cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cc8:	e008      	b.n	8007cdc <f_write+0xee>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	0019      	movs	r1, r3
 8007cd2:	0010      	movs	r0, r2
 8007cd4:	f7fe fc31 	bl	800653a <create_chain>
 8007cd8:	0003      	movs	r3, r0
 8007cda:	62bb      	str	r3, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d100      	bne.n	8007ce4 <f_write+0xf6>
 8007ce2:	e0f1      	b.n	8007ec8 <f_write+0x2da>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d104      	bne.n	8007cf4 <f_write+0x106>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2202      	movs	r2, #2
 8007cee:	755a      	strb	r2, [r3, #21]
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e0f2      	b.n	8007eda <f_write+0x2ec>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	d104      	bne.n	8007d04 <f_write+0x116>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	755a      	strb	r2, [r3, #21]
 8007d00:	2301      	movs	r3, #1
 8007d02:	e0ea      	b.n	8007eda <f_write+0x2ec>
				fp->clust = clst;			/* Update current cluster */
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d08:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d102      	bne.n	8007d18 <f_write+0x12a>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d16:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	7d1b      	ldrb	r3, [r3, #20]
 8007d1c:	b25b      	sxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	da17      	bge.n	8007d52 <f_write+0x164>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	7858      	ldrb	r0, [r3, #1]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	3330      	adds	r3, #48	; 0x30
 8007d2a:	0019      	movs	r1, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6a1a      	ldr	r2, [r3, #32]
 8007d30:	2301      	movs	r3, #1
 8007d32:	f7fd fe19 	bl	8005968 <disk_write>
 8007d36:	1e03      	subs	r3, r0, #0
 8007d38:	d004      	beq.n	8007d44 <f_write+0x156>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	755a      	strb	r2, [r3, #21]
 8007d40:	2301      	movs	r3, #1
 8007d42:	e0ca      	b.n	8007eda <f_write+0x2ec>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	7d1b      	ldrb	r3, [r3, #20]
 8007d48:	227f      	movs	r2, #127	; 0x7f
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	69db      	ldr	r3, [r3, #28]
 8007d58:	0019      	movs	r1, r3
 8007d5a:	0010      	movs	r0, r2
 8007d5c:	f7fe f9b2 	bl	80060c4 <clust2sect>
 8007d60:	0003      	movs	r3, r0
 8007d62:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d104      	bne.n	8007d74 <f_write+0x186>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2202      	movs	r2, #2
 8007d6e:	755a      	strb	r2, [r3, #21]
 8007d70:	2302      	movs	r3, #2
 8007d72:	e0b2      	b.n	8007eda <f_write+0x2ec>
			sect += csect;
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	18d3      	adds	r3, r2, r3
 8007d7a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	0a5b      	lsrs	r3, r3, #9
 8007d80:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d03b      	beq.n	8007e00 <f_write+0x212>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007d88:	69ba      	ldr	r2, [r7, #24]
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	18d3      	adds	r3, r2, r3
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	8952      	ldrh	r2, [r2, #10]
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d905      	bls.n	8007da2 <f_write+0x1b4>
					cc = fs->csize - csect;
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	895b      	ldrh	r3, [r3, #10]
 8007d9a:	001a      	movs	r2, r3
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	7858      	ldrb	r0, [r3, #1]
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	69f9      	ldr	r1, [r7, #28]
 8007dac:	f7fd fddc 	bl	8005968 <disk_write>
 8007db0:	1e03      	subs	r3, r0, #0
 8007db2:	d004      	beq.n	8007dbe <f_write+0x1d0>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2201      	movs	r2, #1
 8007db8:	755a      	strb	r2, [r3, #21]
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e08d      	b.n	8007eda <f_write+0x2ec>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6a1a      	ldr	r2, [r3, #32]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	6a3a      	ldr	r2, [r7, #32]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d915      	bls.n	8007df8 <f_write+0x20a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	3330      	adds	r3, #48	; 0x30
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a1a      	ldr	r2, [r3, #32]
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	025b      	lsls	r3, r3, #9
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	18d3      	adds	r3, r2, r3
 8007de0:	2280      	movs	r2, #128	; 0x80
 8007de2:	0092      	lsls	r2, r2, #2
 8007de4:	0019      	movs	r1, r3
 8007de6:	f7fd fe93 	bl	8005b10 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	7d1b      	ldrb	r3, [r3, #20]
 8007dee:	227f      	movs	r2, #127	; 0x7f
 8007df0:	4013      	ands	r3, r2
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	025b      	lsls	r3, r3, #9
 8007dfc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007dfe:	e040      	b.n	8007e82 <f_write+0x294>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6a1b      	ldr	r3, [r3, #32]
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d015      	beq.n	8007e36 <f_write+0x248>
				fp->fptr < fp->obj.objsize &&
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	699a      	ldr	r2, [r3, #24]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d20f      	bcs.n	8007e36 <f_write+0x248>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	7858      	ldrb	r0, [r3, #1]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3330      	adds	r3, #48	; 0x30
 8007e1e:	0019      	movs	r1, r3
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	2301      	movs	r3, #1
 8007e24:	f7fd fd78 	bl	8005918 <disk_read>
 8007e28:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 8007e2a:	d004      	beq.n	8007e36 <f_write+0x248>
					ABORT(fs, FR_DISK_ERR);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	755a      	strb	r2, [r3, #21]
 8007e32:	2301      	movs	r3, #1
 8007e34:	e051      	b.n	8007eda <f_write+0x2ec>
			}
#endif
			fp->sect = sect;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	05db      	lsls	r3, r3, #23
 8007e42:	0ddb      	lsrs	r3, r3, #23
 8007e44:	2280      	movs	r2, #128	; 0x80
 8007e46:	0092      	lsls	r2, r2, #2
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d901      	bls.n	8007e58 <f_write+0x26a>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	3330      	adds	r3, #48	; 0x30
 8007e5c:	001a      	movs	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	05db      	lsls	r3, r3, #23
 8007e64:	0ddb      	lsrs	r3, r3, #23
 8007e66:	18d3      	adds	r3, r2, r3
 8007e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e6a:	69f9      	ldr	r1, [r7, #28]
 8007e6c:	0018      	movs	r0, r3
 8007e6e:	f7fd fe4f 	bl	8005b10 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	7d1b      	ldrb	r3, [r3, #20]
 8007e76:	2280      	movs	r2, #128	; 0x80
 8007e78:	4252      	negs	r2, r2
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	b2da      	uxtb	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007e82:	69fa      	ldr	r2, [r7, #28]
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	18d3      	adds	r3, r2, r3
 8007e88:	61fb      	str	r3, [r7, #28]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	699a      	ldr	r2, [r3, #24]
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e90:	18d2      	adds	r2, r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	619a      	str	r2, [r3, #24]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	68d9      	ldr	r1, [r3, #12]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	699a      	ldr	r2, [r3, #24]
 8007e9e:	000b      	movs	r3, r1
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d200      	bcs.n	8007ea6 <f_write+0x2b8>
 8007ea4:	0013      	movs	r3, r2
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	60d3      	str	r3, [r2, #12]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	18d2      	adds	r2, r2, r3
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d000      	beq.n	8007ec6 <f_write+0x2d8>
 8007ec4:	e6d0      	b.n	8007c68 <f_write+0x7a>
 8007ec6:	e000      	b.n	8007eca <f_write+0x2dc>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007ec8:	46c0      	nop			; (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	7d1b      	ldrb	r3, [r3, #20]
 8007ece:	2240      	movs	r2, #64	; 0x40
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	0018      	movs	r0, r3
 8007edc:	46bd      	mov	sp, r7
 8007ede:	b00c      	add	sp, #48	; 0x30
 8007ee0:	bdb0      	pop	{r4, r5, r7, pc}

08007ee2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007ee2:	b5b0      	push	{r4, r5, r7, lr}
 8007ee4:	b086      	sub	sp, #24
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2517      	movs	r5, #23
 8007eee:	197c      	adds	r4, r7, r5
 8007ef0:	2208      	movs	r2, #8
 8007ef2:	18ba      	adds	r2, r7, r2
 8007ef4:	0011      	movs	r1, r2
 8007ef6:	0018      	movs	r0, r3
 8007ef8:	f7ff fabc 	bl	8007474 <validate>
 8007efc:	0003      	movs	r3, r0
 8007efe:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8007f00:	197b      	adds	r3, r7, r5
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d16e      	bne.n	8007fe6 <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	7d1b      	ldrb	r3, [r3, #20]
 8007f0c:	001a      	movs	r2, r3
 8007f0e:	2340      	movs	r3, #64	; 0x40
 8007f10:	4013      	ands	r3, r2
 8007f12:	d068      	beq.n	8007fe6 <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	7d1b      	ldrb	r3, [r3, #20]
 8007f18:	b25b      	sxtb	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	da14      	bge.n	8007f48 <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	7858      	ldrb	r0, [r3, #1]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3330      	adds	r3, #48	; 0x30
 8007f26:	0019      	movs	r1, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a1a      	ldr	r2, [r3, #32]
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	f7fd fd1b 	bl	8005968 <disk_write>
 8007f32:	1e03      	subs	r3, r0, #0
 8007f34:	d001      	beq.n	8007f3a <f_sync+0x58>
 8007f36:	2301      	movs	r3, #1
 8007f38:	e058      	b.n	8007fec <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	7d1b      	ldrb	r3, [r3, #20]
 8007f3e:	227f      	movs	r2, #127	; 0x7f
 8007f40:	4013      	ands	r3, r2
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007f48:	f7fd fc26 	bl	8005798 <get_fattime>
 8007f4c:	0003      	movs	r3, r0
 8007f4e:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	2517      	movs	r5, #23
 8007f58:	197c      	adds	r4, r7, r5
 8007f5a:	0019      	movs	r1, r3
 8007f5c:	0010      	movs	r0, r2
 8007f5e:	f7fd ffff 	bl	8005f60 <move_window>
 8007f62:	0003      	movs	r3, r0
 8007f64:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 8007f66:	002c      	movs	r4, r5
 8007f68:	193b      	adds	r3, r7, r4
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d13a      	bne.n	8007fe6 <f_sync+0x104>
					dir = fp->dir_ptr;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f74:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	330b      	adds	r3, #11
 8007f7a:	781a      	ldrb	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	330b      	adds	r3, #11
 8007f80:	2120      	movs	r1, #32
 8007f82:	430a      	orrs	r2, r1
 8007f84:	b2d2      	uxtb	r2, r2
 8007f86:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6818      	ldr	r0, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	689a      	ldr	r2, [r3, #8]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	0019      	movs	r1, r3
 8007f94:	f7fe fd6a 	bl	8006a6c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	331c      	adds	r3, #28
 8007f9c:	001a      	movs	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	0019      	movs	r1, r3
 8007fa4:	0010      	movs	r0, r2
 8007fa6:	f7fd fd89 	bl	8005abc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	3316      	adds	r3, #22
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	0011      	movs	r1, r2
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	f7fd fd82 	bl	8005abc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3312      	adds	r3, #18
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	0018      	movs	r0, r3
 8007fc0:	f7fd fd5e 	bl	8005a80 <st_word>
					fs->wflag = 1;
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	193c      	adds	r4, r7, r4
 8007fce:	0018      	movs	r0, r3
 8007fd0:	f7fd fffc 	bl	8005fcc <sync_fs>
 8007fd4:	0003      	movs	r3, r0
 8007fd6:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	7d1b      	ldrb	r3, [r3, #20]
 8007fdc:	2240      	movs	r2, #64	; 0x40
 8007fde:	4393      	bics	r3, r2
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007fe6:	2317      	movs	r3, #23
 8007fe8:	18fb      	adds	r3, r7, r3
 8007fea:	781b      	ldrb	r3, [r3, #0]
}
 8007fec:	0018      	movs	r0, r3
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	b006      	add	sp, #24
 8007ff2:	bdb0      	pop	{r4, r5, r7, pc}

08007ff4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007ff4:	b5b0      	push	{r4, r5, r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007ffc:	250f      	movs	r5, #15
 8007ffe:	197c      	adds	r4, r7, r5
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	0018      	movs	r0, r3
 8008004:	f7ff ff6d 	bl	8007ee2 <f_sync>
 8008008:	0003      	movs	r3, r0
 800800a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 800800c:	197b      	adds	r3, r7, r5
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d11c      	bne.n	800804e <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	197c      	adds	r4, r7, r5
 8008018:	2208      	movs	r2, #8
 800801a:	18ba      	adds	r2, r7, r2
 800801c:	0011      	movs	r1, r2
 800801e:	0018      	movs	r0, r3
 8008020:	f7ff fa28 	bl	8007474 <validate>
 8008024:	0003      	movs	r3, r0
 8008026:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8008028:	197b      	adds	r3, r7, r5
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10e      	bne.n	800804e <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	197c      	adds	r4, r7, r5
 8008036:	0018      	movs	r0, r3
 8008038:	f7fd fee0 	bl	8005dfc <dec_lock>
 800803c:	0003      	movs	r3, r0
 800803e:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8008040:	197b      	adds	r3, r7, r5
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d102      	bne.n	800804e <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800804e:	230f      	movs	r3, #15
 8008050:	18fb      	adds	r3, r7, r3
 8008052:	781b      	ldrb	r3, [r3, #0]
}
 8008054:	0018      	movs	r0, r3
 8008056:	46bd      	mov	sp, r7
 8008058:	b004      	add	sp, #16
 800805a:	bdb0      	pop	{r4, r5, r7, pc}

0800805c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800805c:	b5b0      	push	{r4, r5, r7, lr}
 800805e:	b092      	sub	sp, #72	; 0x48
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008068:	2547      	movs	r5, #71	; 0x47
 800806a:	197c      	adds	r4, r7, r5
 800806c:	2328      	movs	r3, #40	; 0x28
 800806e:	18f9      	adds	r1, r7, r3
 8008070:	230c      	movs	r3, #12
 8008072:	18fb      	adds	r3, r7, r3
 8008074:	2200      	movs	r2, #0
 8008076:	0018      	movs	r0, r3
 8008078:	f7fe ff8c 	bl	8006f94 <find_volume>
 800807c:	0003      	movs	r3, r0
 800807e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8008080:	197b      	adds	r3, r7, r5
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d000      	beq.n	800808a <f_getfree+0x2e>
 8008088:	e09e      	b.n	80081c8 <f_getfree+0x16c>
		*fatfs = fs;				/* Return ptr to the fs object */
 800808a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008092:	691a      	ldr	r2, [r3, #16]
 8008094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	3b02      	subs	r3, #2
 800809a:	429a      	cmp	r2, r3
 800809c:	d804      	bhi.n	80080a8 <f_getfree+0x4c>
			*nclst = fs->free_clst;
 800809e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a0:	691a      	ldr	r2, [r3, #16]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	e08f      	b.n	80081c8 <f_getfree+0x16c>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80080a8:	2300      	movs	r3, #0
 80080aa:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80080ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d12d      	bne.n	8008110 <f_getfree+0xb4>
				clst = 2; obj.fs = fs;
 80080b4:	2302      	movs	r3, #2
 80080b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ba:	2314      	movs	r3, #20
 80080bc:	18fb      	adds	r3, r7, r3
 80080be:	601a      	str	r2, [r3, #0]
				do {
					stat = get_fat(&obj, clst);
 80080c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080c2:	2314      	movs	r3, #20
 80080c4:	18fb      	adds	r3, r7, r3
 80080c6:	0011      	movs	r1, r2
 80080c8:	0018      	movs	r0, r3
 80080ca:	f7fe f817 	bl	80060fc <get_fat>
 80080ce:	0003      	movs	r3, r0
 80080d0:	62fb      	str	r3, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80080d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d4:	3301      	adds	r3, #1
 80080d6:	d104      	bne.n	80080e2 <f_getfree+0x86>
 80080d8:	2347      	movs	r3, #71	; 0x47
 80080da:	18fb      	adds	r3, r7, r3
 80080dc:	2201      	movs	r2, #1
 80080de:	701a      	strb	r2, [r3, #0]
 80080e0:	e065      	b.n	80081ae <f_getfree+0x152>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80080e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d104      	bne.n	80080f2 <f_getfree+0x96>
 80080e8:	2347      	movs	r3, #71	; 0x47
 80080ea:	18fb      	adds	r3, r7, r3
 80080ec:	2202      	movs	r2, #2
 80080ee:	701a      	strb	r2, [r3, #0]
 80080f0:	e05d      	b.n	80081ae <f_getfree+0x152>
					if (stat == 0) nfree++;
 80080f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d102      	bne.n	80080fe <f_getfree+0xa2>
 80080f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080fa:	3301      	adds	r3, #1
 80080fc:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80080fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008100:	3301      	adds	r3, #1
 8008102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800810a:	429a      	cmp	r2, r3
 800810c:	d3d8      	bcc.n	80080c0 <f_getfree+0x64>
 800810e:	e04e      	b.n	80081ae <f_getfree+0x152>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008112:	695b      	ldr	r3, [r3, #20]
 8008114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	637b      	str	r3, [r7, #52]	; 0x34
 8008120:	2300      	movs	r3, #0
 8008122:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008126:	2b00      	cmp	r3, #0
 8008128:	d114      	bne.n	8008154 <f_getfree+0xf8>
							res = move_window(fs, sect++);
 800812a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800812c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812e:	1c5a      	adds	r2, r3, #1
 8008130:	63ba      	str	r2, [r7, #56]	; 0x38
 8008132:	2547      	movs	r5, #71	; 0x47
 8008134:	197c      	adds	r4, r7, r5
 8008136:	0019      	movs	r1, r3
 8008138:	f7fd ff12 	bl	8005f60 <move_window>
 800813c:	0003      	movs	r3, r0
 800813e:	7023      	strb	r3, [r4, #0]
							if (res != FR_OK) break;
 8008140:	197b      	adds	r3, r7, r5
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d131      	bne.n	80081ac <f_getfree+0x150>
							p = fs->win;
 8008148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814a:	3330      	adds	r3, #48	; 0x30
 800814c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800814e:	2380      	movs	r3, #128	; 0x80
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2b02      	cmp	r3, #2
 800815a:	d10f      	bne.n	800817c <f_getfree+0x120>
							if (ld_word(p) == 0) nfree++;
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	0018      	movs	r0, r3
 8008160:	f7fd fc52 	bl	8005a08 <ld_word>
 8008164:	1e03      	subs	r3, r0, #0
 8008166:	d102      	bne.n	800816e <f_getfree+0x112>
 8008168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800816a:	3301      	adds	r3, #1
 800816c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008170:	3302      	adds	r3, #2
 8008172:	633b      	str	r3, [r7, #48]	; 0x30
 8008174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008176:	3b02      	subs	r3, #2
 8008178:	637b      	str	r3, [r7, #52]	; 0x34
 800817a:	e010      	b.n	800819e <f_getfree+0x142>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800817c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817e:	0018      	movs	r0, r3
 8008180:	f7fd fc5d 	bl	8005a3e <ld_dword>
 8008184:	0003      	movs	r3, r0
 8008186:	011b      	lsls	r3, r3, #4
 8008188:	091b      	lsrs	r3, r3, #4
 800818a:	d102      	bne.n	8008192 <f_getfree+0x136>
 800818c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800818e:	3301      	adds	r3, #1
 8008190:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8008192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008194:	3304      	adds	r3, #4
 8008196:	633b      	str	r3, [r7, #48]	; 0x30
 8008198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800819a:	3b04      	subs	r3, #4
 800819c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800819e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a0:	3b01      	subs	r3, #1
 80081a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1bc      	bne.n	8008124 <f_getfree+0xc8>
 80081aa:	e000      	b.n	80081ae <f_getfree+0x152>
							if (res != FR_OK) break;
 80081ac:	46c0      	nop			; (mov r8, r8)
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081b2:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80081b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081b8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80081ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081bc:	791a      	ldrb	r2, [r3, #4]
 80081be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c0:	2101      	movs	r1, #1
 80081c2:	430a      	orrs	r2, r1
 80081c4:	b2d2      	uxtb	r2, r2
 80081c6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80081c8:	2347      	movs	r3, #71	; 0x47
 80081ca:	18fb      	adds	r3, r7, r3
 80081cc:	781b      	ldrb	r3, [r3, #0]
}
 80081ce:	0018      	movs	r0, r3
 80081d0:	46bd      	mov	sp, r7
 80081d2:	b012      	add	sp, #72	; 0x48
 80081d4:	bdb0      	pop	{r4, r5, r7, pc}

080081d6 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80081d6:	b590      	push	{r4, r7, lr}
 80081d8:	b089      	sub	sp, #36	; 0x24
 80081da:	af00      	add	r7, sp, #0
 80081dc:	60f8      	str	r0, [r7, #12]
 80081de:	60b9      	str	r1, [r7, #8]
 80081e0:	607a      	str	r2, [r7, #4]
	int n = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80081ea:	e022      	b.n	8008232 <f_gets+0x5c>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80081ec:	2310      	movs	r3, #16
 80081ee:	18fb      	adds	r3, r7, r3
 80081f0:	2414      	movs	r4, #20
 80081f2:	1939      	adds	r1, r7, r4
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f7ff fbb8 	bl	800796c <f_read>
		if (rc != 1) break;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d11d      	bne.n	800823e <f_gets+0x68>
		c = s[0];
 8008202:	2117      	movs	r1, #23
 8008204:	187b      	adds	r3, r7, r1
 8008206:	193a      	adds	r2, r7, r4
 8008208:	7812      	ldrb	r2, [r2, #0]
 800820a:	701a      	strb	r2, [r3, #0]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800820c:	187b      	adds	r3, r7, r1
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	2b0d      	cmp	r3, #13
 8008212:	d100      	bne.n	8008216 <f_gets+0x40>
 8008214:	e00d      	b.n	8008232 <f_gets+0x5c>
		*p++ = c;
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	1c5a      	adds	r2, r3, #1
 800821a:	61ba      	str	r2, [r7, #24]
 800821c:	2117      	movs	r1, #23
 800821e:	187a      	adds	r2, r7, r1
 8008220:	7812      	ldrb	r2, [r2, #0]
 8008222:	701a      	strb	r2, [r3, #0]
		n++;
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	3301      	adds	r3, #1
 8008228:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800822a:	187b      	adds	r3, r7, r1
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	2b0a      	cmp	r3, #10
 8008230:	d007      	beq.n	8008242 <f_gets+0x6c>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	3b01      	subs	r3, #1
 8008236:	69fa      	ldr	r2, [r7, #28]
 8008238:	429a      	cmp	r2, r3
 800823a:	dbd7      	blt.n	80081ec <f_gets+0x16>
 800823c:	e002      	b.n	8008244 <f_gets+0x6e>
		if (rc != 1) break;
 800823e:	46c0      	nop			; (mov r8, r8)
 8008240:	e000      	b.n	8008244 <f_gets+0x6e>
		if (c == '\n') break;		/* Break on EOL */
 8008242:	46c0      	nop			; (mov r8, r8)
	}
	*p = 0;
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	2200      	movs	r2, #0
 8008248:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <f_gets+0x7e>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	e000      	b.n	8008256 <f_gets+0x80>
 8008254:	2300      	movs	r3, #0
}
 8008256:	0018      	movs	r0, r3
 8008258:	46bd      	mov	sp, r7
 800825a:	b009      	add	sp, #36	; 0x24
 800825c:	bd90      	pop	{r4, r7, pc}

0800825e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	000a      	movs	r2, r1
 8008268:	1cfb      	adds	r3, r7, #3
 800826a:	701a      	strb	r2, [r3, #0]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800826c:	1cfb      	adds	r3, r7, #3
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	2b0a      	cmp	r3, #10
 8008272:	d104      	bne.n	800827e <putc_bfd+0x20>
		putc_bfd(pb, '\r');
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	210d      	movs	r1, #13
 8008278:	0018      	movs	r0, r3
 800827a:	f7ff fff0 	bl	800825e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	db26      	blt.n	80082d8 <putc_bfd+0x7a>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	1c5a      	adds	r2, r3, #1
 800828e:	60fa      	str	r2, [r7, #12]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	18d3      	adds	r3, r2, r3
 8008294:	1cfa      	adds	r2, r7, #3
 8008296:	7812      	ldrb	r2, [r2, #0]
 8008298:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2b3c      	cmp	r3, #60	; 0x3c
 800829e:	dd12      	ble.n	80082c6 <putc_bfd+0x68>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6818      	ldr	r0, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	330c      	adds	r3, #12
 80082a8:	0019      	movs	r1, r3
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	2308      	movs	r3, #8
 80082ae:	18fb      	adds	r3, r7, r3
 80082b0:	f7ff fc9d 	bl	8007bee <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d101      	bne.n	80082c0 <putc_bfd+0x62>
 80082bc:	2300      	movs	r3, #0
 80082be:	e001      	b.n	80082c4 <putc_bfd+0x66>
 80082c0:	2301      	movs	r3, #1
 80082c2:	425b      	negs	r3, r3
 80082c4:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	1c5a      	adds	r2, r3, #1
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	609a      	str	r2, [r3, #8]
 80082d6:	e000      	b.n	80082da <putc_bfd+0x7c>
	if (i < 0) return;
 80082d8:	46c0      	nop			; (mov r8, r8)
}
 80082da:	46bd      	mov	sp, r7
 80082dc:	b004      	add	sp, #16
 80082de:	bd80      	pop	{r7, pc}

080082e0 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	db15      	blt.n	800831c <putc_flush+0x3c>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6818      	ldr	r0, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	330c      	adds	r3, #12
 80082f8:	0019      	movs	r1, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	001a      	movs	r2, r3
 8008300:	230c      	movs	r3, #12
 8008302:	18fb      	adds	r3, r7, r3
 8008304:	f7ff fc73 	bl	8007bee <f_write>
 8008308:	1e03      	subs	r3, r0, #0
 800830a:	d107      	bne.n	800831c <putc_flush+0x3c>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	4293      	cmp	r3, r2
 8008314:	d102      	bne.n	800831c <putc_flush+0x3c>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	e001      	b.n	8008320 <putc_flush+0x40>
	return EOF;
 800831c:	2301      	movs	r3, #1
 800831e:	425b      	negs	r3, r3
}
 8008320:	0018      	movs	r0, r3
 8008322:	46bd      	mov	sp, r7
 8008324:	b004      	add	sp, #16
 8008326:	bd80      	pop	{r7, pc}

08008328 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	605a      	str	r2, [r3, #4]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	685a      	ldr	r2, [r3, #4]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	609a      	str	r2, [r3, #8]
}
 8008346:	46c0      	nop			; (mov r8, r8)
 8008348:	46bd      	mov	sp, r7
 800834a:	b002      	add	sp, #8
 800834c:	bd80      	pop	{r7, pc}

0800834e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b096      	sub	sp, #88	; 0x58
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	230c      	movs	r3, #12
 800835c:	18fb      	adds	r3, r7, r3
 800835e:	0011      	movs	r1, r2
 8008360:	0018      	movs	r0, r3
 8008362:	f7ff ffe1 	bl	8008328 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008366:	e009      	b.n	800837c <f_puts+0x2e>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	607a      	str	r2, [r7, #4]
 800836e:	781a      	ldrb	r2, [r3, #0]
 8008370:	230c      	movs	r3, #12
 8008372:	18fb      	adds	r3, r7, r3
 8008374:	0011      	movs	r1, r2
 8008376:	0018      	movs	r0, r3
 8008378:	f7ff ff71 	bl	800825e <putc_bfd>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1f1      	bne.n	8008368 <f_puts+0x1a>
	return putc_flush(&pb);
 8008384:	230c      	movs	r3, #12
 8008386:	18fb      	adds	r3, r7, r3
 8008388:	0018      	movs	r0, r3
 800838a:	f7ff ffa9 	bl	80082e0 <putc_flush>
 800838e:	0003      	movs	r3, r0
}
 8008390:	0018      	movs	r0, r3
 8008392:	46bd      	mov	sp, r7
 8008394:	b016      	add	sp, #88	; 0x58
 8008396:	bd80      	pop	{r7, pc}

08008398 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008398:	b590      	push	{r4, r7, lr}
 800839a:	b087      	sub	sp, #28
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	1dfb      	adds	r3, r7, #7
 80083a4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 80083a6:	2417      	movs	r4, #23
 80083a8:	193b      	adds	r3, r7, r4
 80083aa:	2201      	movs	r2, #1
 80083ac:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 80083ae:	2016      	movs	r0, #22
 80083b0:	183b      	adds	r3, r7, r0
 80083b2:	2200      	movs	r2, #0
 80083b4:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 80083b6:	4b21      	ldr	r3, [pc, #132]	; (800843c <FATFS_LinkDriverEx+0xa4>)
 80083b8:	7a5b      	ldrb	r3, [r3, #9]
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d136      	bne.n	800842e <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 80083c0:	4b1e      	ldr	r3, [pc, #120]	; (800843c <FATFS_LinkDriverEx+0xa4>)
 80083c2:	7a5b      	ldrb	r3, [r3, #9]
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	001a      	movs	r2, r3
 80083c8:	4b1c      	ldr	r3, [pc, #112]	; (800843c <FATFS_LinkDriverEx+0xa4>)
 80083ca:	2100      	movs	r1, #0
 80083cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80083ce:	4b1b      	ldr	r3, [pc, #108]	; (800843c <FATFS_LinkDriverEx+0xa4>)
 80083d0:	7a5b      	ldrb	r3, [r3, #9]
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	4a19      	ldr	r2, [pc, #100]	; (800843c <FATFS_LinkDriverEx+0xa4>)
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	18d3      	adds	r3, r2, r3
 80083da:	3304      	adds	r3, #4
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 80083e0:	4b16      	ldr	r3, [pc, #88]	; (800843c <FATFS_LinkDriverEx+0xa4>)
 80083e2:	7a5b      	ldrb	r3, [r3, #9]
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	001a      	movs	r2, r3
 80083e8:	4b14      	ldr	r3, [pc, #80]	; (800843c <FATFS_LinkDriverEx+0xa4>)
 80083ea:	189b      	adds	r3, r3, r2
 80083ec:	1dfa      	adds	r2, r7, #7
 80083ee:	7812      	ldrb	r2, [r2, #0]
 80083f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80083f2:	4b12      	ldr	r3, [pc, #72]	; (800843c <FATFS_LinkDriverEx+0xa4>)
 80083f4:	7a5b      	ldrb	r3, [r3, #9]
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	1c5a      	adds	r2, r3, #1
 80083fa:	b2d1      	uxtb	r1, r2
 80083fc:	4a0f      	ldr	r2, [pc, #60]	; (800843c <FATFS_LinkDriverEx+0xa4>)
 80083fe:	7251      	strb	r1, [r2, #9]
 8008400:	183a      	adds	r2, r7, r0
 8008402:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8008404:	183b      	adds	r3, r7, r0
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	3330      	adds	r3, #48	; 0x30
 800840a:	b2da      	uxtb	r2, r3
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	3301      	adds	r3, #1
 8008414:	223a      	movs	r2, #58	; 0x3a
 8008416:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	3302      	adds	r3, #2
 800841c:	222f      	movs	r2, #47	; 0x2f
 800841e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	3303      	adds	r3, #3
 8008424:	2200      	movs	r2, #0
 8008426:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008428:	193b      	adds	r3, r7, r4
 800842a:	2200      	movs	r2, #0
 800842c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800842e:	2317      	movs	r3, #23
 8008430:	18fb      	adds	r3, r7, r3
 8008432:	781b      	ldrb	r3, [r3, #0]
}
 8008434:	0018      	movs	r0, r3
 8008436:	46bd      	mov	sp, r7
 8008438:	b007      	add	sp, #28
 800843a:	bd90      	pop	{r4, r7, pc}
 800843c:	20000a50 	.word	0x20000a50

08008440 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	0018      	movs	r0, r3
 8008452:	f7ff ffa1 	bl	8008398 <FATFS_LinkDriverEx>
 8008456:	0003      	movs	r3, r0
}
 8008458:	0018      	movs	r0, r3
 800845a:	46bd      	mov	sp, r7
 800845c:	b002      	add	sp, #8
 800845e:	bd80      	pop	{r7, pc}

08008460 <siprintf>:
 8008460:	b40e      	push	{r1, r2, r3}
 8008462:	b500      	push	{lr}
 8008464:	490b      	ldr	r1, [pc, #44]	; (8008494 <siprintf+0x34>)
 8008466:	b09c      	sub	sp, #112	; 0x70
 8008468:	ab1d      	add	r3, sp, #116	; 0x74
 800846a:	9002      	str	r0, [sp, #8]
 800846c:	9006      	str	r0, [sp, #24]
 800846e:	9107      	str	r1, [sp, #28]
 8008470:	9104      	str	r1, [sp, #16]
 8008472:	4809      	ldr	r0, [pc, #36]	; (8008498 <siprintf+0x38>)
 8008474:	4909      	ldr	r1, [pc, #36]	; (800849c <siprintf+0x3c>)
 8008476:	cb04      	ldmia	r3!, {r2}
 8008478:	9105      	str	r1, [sp, #20]
 800847a:	6800      	ldr	r0, [r0, #0]
 800847c:	a902      	add	r1, sp, #8
 800847e:	9301      	str	r3, [sp, #4]
 8008480:	f000 f9ac 	bl	80087dc <_svfiprintf_r>
 8008484:	2200      	movs	r2, #0
 8008486:	9b02      	ldr	r3, [sp, #8]
 8008488:	701a      	strb	r2, [r3, #0]
 800848a:	b01c      	add	sp, #112	; 0x70
 800848c:	bc08      	pop	{r3}
 800848e:	b003      	add	sp, #12
 8008490:	4718      	bx	r3
 8008492:	46c0      	nop			; (mov r8, r8)
 8008494:	7fffffff 	.word	0x7fffffff
 8008498:	20000070 	.word	0x20000070
 800849c:	ffff0208 	.word	0xffff0208

080084a0 <memset>:
 80084a0:	0003      	movs	r3, r0
 80084a2:	1882      	adds	r2, r0, r2
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d100      	bne.n	80084aa <memset+0xa>
 80084a8:	4770      	bx	lr
 80084aa:	7019      	strb	r1, [r3, #0]
 80084ac:	3301      	adds	r3, #1
 80084ae:	e7f9      	b.n	80084a4 <memset+0x4>

080084b0 <__errno>:
 80084b0:	4b01      	ldr	r3, [pc, #4]	; (80084b8 <__errno+0x8>)
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	4770      	bx	lr
 80084b6:	46c0      	nop			; (mov r8, r8)
 80084b8:	20000070 	.word	0x20000070

080084bc <__libc_init_array>:
 80084bc:	b570      	push	{r4, r5, r6, lr}
 80084be:	2600      	movs	r6, #0
 80084c0:	4c0c      	ldr	r4, [pc, #48]	; (80084f4 <__libc_init_array+0x38>)
 80084c2:	4d0d      	ldr	r5, [pc, #52]	; (80084f8 <__libc_init_array+0x3c>)
 80084c4:	1b64      	subs	r4, r4, r5
 80084c6:	10a4      	asrs	r4, r4, #2
 80084c8:	42a6      	cmp	r6, r4
 80084ca:	d109      	bne.n	80084e0 <__libc_init_array+0x24>
 80084cc:	2600      	movs	r6, #0
 80084ce:	f000 fc6d 	bl	8008dac <_init>
 80084d2:	4c0a      	ldr	r4, [pc, #40]	; (80084fc <__libc_init_array+0x40>)
 80084d4:	4d0a      	ldr	r5, [pc, #40]	; (8008500 <__libc_init_array+0x44>)
 80084d6:	1b64      	subs	r4, r4, r5
 80084d8:	10a4      	asrs	r4, r4, #2
 80084da:	42a6      	cmp	r6, r4
 80084dc:	d105      	bne.n	80084ea <__libc_init_array+0x2e>
 80084de:	bd70      	pop	{r4, r5, r6, pc}
 80084e0:	00b3      	lsls	r3, r6, #2
 80084e2:	58eb      	ldr	r3, [r5, r3]
 80084e4:	4798      	blx	r3
 80084e6:	3601      	adds	r6, #1
 80084e8:	e7ee      	b.n	80084c8 <__libc_init_array+0xc>
 80084ea:	00b3      	lsls	r3, r6, #2
 80084ec:	58eb      	ldr	r3, [r5, r3]
 80084ee:	4798      	blx	r3
 80084f0:	3601      	adds	r6, #1
 80084f2:	e7f2      	b.n	80084da <__libc_init_array+0x1e>
 80084f4:	080090d8 	.word	0x080090d8
 80084f8:	080090d8 	.word	0x080090d8
 80084fc:	080090dc 	.word	0x080090dc
 8008500:	080090d8 	.word	0x080090d8

08008504 <__retarget_lock_acquire_recursive>:
 8008504:	4770      	bx	lr

08008506 <__retarget_lock_release_recursive>:
 8008506:	4770      	bx	lr

08008508 <memcpy>:
 8008508:	2300      	movs	r3, #0
 800850a:	b510      	push	{r4, lr}
 800850c:	429a      	cmp	r2, r3
 800850e:	d100      	bne.n	8008512 <memcpy+0xa>
 8008510:	bd10      	pop	{r4, pc}
 8008512:	5ccc      	ldrb	r4, [r1, r3]
 8008514:	54c4      	strb	r4, [r0, r3]
 8008516:	3301      	adds	r3, #1
 8008518:	e7f8      	b.n	800850c <memcpy+0x4>
	...

0800851c <_free_r>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	0005      	movs	r5, r0
 8008520:	2900      	cmp	r1, #0
 8008522:	d010      	beq.n	8008546 <_free_r+0x2a>
 8008524:	1f0c      	subs	r4, r1, #4
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	da00      	bge.n	800852e <_free_r+0x12>
 800852c:	18e4      	adds	r4, r4, r3
 800852e:	0028      	movs	r0, r5
 8008530:	f000 f8e2 	bl	80086f8 <__malloc_lock>
 8008534:	4a1d      	ldr	r2, [pc, #116]	; (80085ac <_free_r+0x90>)
 8008536:	6813      	ldr	r3, [r2, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d105      	bne.n	8008548 <_free_r+0x2c>
 800853c:	6063      	str	r3, [r4, #4]
 800853e:	6014      	str	r4, [r2, #0]
 8008540:	0028      	movs	r0, r5
 8008542:	f000 f8e1 	bl	8008708 <__malloc_unlock>
 8008546:	bd70      	pop	{r4, r5, r6, pc}
 8008548:	42a3      	cmp	r3, r4
 800854a:	d908      	bls.n	800855e <_free_r+0x42>
 800854c:	6820      	ldr	r0, [r4, #0]
 800854e:	1821      	adds	r1, r4, r0
 8008550:	428b      	cmp	r3, r1
 8008552:	d1f3      	bne.n	800853c <_free_r+0x20>
 8008554:	6819      	ldr	r1, [r3, #0]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	1809      	adds	r1, r1, r0
 800855a:	6021      	str	r1, [r4, #0]
 800855c:	e7ee      	b.n	800853c <_free_r+0x20>
 800855e:	001a      	movs	r2, r3
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <_free_r+0x4e>
 8008566:	42a3      	cmp	r3, r4
 8008568:	d9f9      	bls.n	800855e <_free_r+0x42>
 800856a:	6811      	ldr	r1, [r2, #0]
 800856c:	1850      	adds	r0, r2, r1
 800856e:	42a0      	cmp	r0, r4
 8008570:	d10b      	bne.n	800858a <_free_r+0x6e>
 8008572:	6820      	ldr	r0, [r4, #0]
 8008574:	1809      	adds	r1, r1, r0
 8008576:	1850      	adds	r0, r2, r1
 8008578:	6011      	str	r1, [r2, #0]
 800857a:	4283      	cmp	r3, r0
 800857c:	d1e0      	bne.n	8008540 <_free_r+0x24>
 800857e:	6818      	ldr	r0, [r3, #0]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	1841      	adds	r1, r0, r1
 8008584:	6011      	str	r1, [r2, #0]
 8008586:	6053      	str	r3, [r2, #4]
 8008588:	e7da      	b.n	8008540 <_free_r+0x24>
 800858a:	42a0      	cmp	r0, r4
 800858c:	d902      	bls.n	8008594 <_free_r+0x78>
 800858e:	230c      	movs	r3, #12
 8008590:	602b      	str	r3, [r5, #0]
 8008592:	e7d5      	b.n	8008540 <_free_r+0x24>
 8008594:	6820      	ldr	r0, [r4, #0]
 8008596:	1821      	adds	r1, r4, r0
 8008598:	428b      	cmp	r3, r1
 800859a:	d103      	bne.n	80085a4 <_free_r+0x88>
 800859c:	6819      	ldr	r1, [r3, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	1809      	adds	r1, r1, r0
 80085a2:	6021      	str	r1, [r4, #0]
 80085a4:	6063      	str	r3, [r4, #4]
 80085a6:	6054      	str	r4, [r2, #4]
 80085a8:	e7ca      	b.n	8008540 <_free_r+0x24>
 80085aa:	46c0      	nop			; (mov r8, r8)
 80085ac:	20000b9c 	.word	0x20000b9c

080085b0 <sbrk_aligned>:
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	4e0f      	ldr	r6, [pc, #60]	; (80085f0 <sbrk_aligned+0x40>)
 80085b4:	000d      	movs	r5, r1
 80085b6:	6831      	ldr	r1, [r6, #0]
 80085b8:	0004      	movs	r4, r0
 80085ba:	2900      	cmp	r1, #0
 80085bc:	d102      	bne.n	80085c4 <sbrk_aligned+0x14>
 80085be:	f000 fba1 	bl	8008d04 <_sbrk_r>
 80085c2:	6030      	str	r0, [r6, #0]
 80085c4:	0029      	movs	r1, r5
 80085c6:	0020      	movs	r0, r4
 80085c8:	f000 fb9c 	bl	8008d04 <_sbrk_r>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	d00a      	beq.n	80085e6 <sbrk_aligned+0x36>
 80085d0:	2303      	movs	r3, #3
 80085d2:	1cc5      	adds	r5, r0, #3
 80085d4:	439d      	bics	r5, r3
 80085d6:	42a8      	cmp	r0, r5
 80085d8:	d007      	beq.n	80085ea <sbrk_aligned+0x3a>
 80085da:	1a29      	subs	r1, r5, r0
 80085dc:	0020      	movs	r0, r4
 80085de:	f000 fb91 	bl	8008d04 <_sbrk_r>
 80085e2:	3001      	adds	r0, #1
 80085e4:	d101      	bne.n	80085ea <sbrk_aligned+0x3a>
 80085e6:	2501      	movs	r5, #1
 80085e8:	426d      	negs	r5, r5
 80085ea:	0028      	movs	r0, r5
 80085ec:	bd70      	pop	{r4, r5, r6, pc}
 80085ee:	46c0      	nop			; (mov r8, r8)
 80085f0:	20000ba0 	.word	0x20000ba0

080085f4 <_malloc_r>:
 80085f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085f6:	2203      	movs	r2, #3
 80085f8:	1ccb      	adds	r3, r1, #3
 80085fa:	4393      	bics	r3, r2
 80085fc:	3308      	adds	r3, #8
 80085fe:	0006      	movs	r6, r0
 8008600:	001f      	movs	r7, r3
 8008602:	2b0c      	cmp	r3, #12
 8008604:	d238      	bcs.n	8008678 <_malloc_r+0x84>
 8008606:	270c      	movs	r7, #12
 8008608:	42b9      	cmp	r1, r7
 800860a:	d837      	bhi.n	800867c <_malloc_r+0x88>
 800860c:	0030      	movs	r0, r6
 800860e:	f000 f873 	bl	80086f8 <__malloc_lock>
 8008612:	4b38      	ldr	r3, [pc, #224]	; (80086f4 <_malloc_r+0x100>)
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	001c      	movs	r4, r3
 800861a:	2c00      	cmp	r4, #0
 800861c:	d133      	bne.n	8008686 <_malloc_r+0x92>
 800861e:	0039      	movs	r1, r7
 8008620:	0030      	movs	r0, r6
 8008622:	f7ff ffc5 	bl	80085b0 <sbrk_aligned>
 8008626:	0004      	movs	r4, r0
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	d15e      	bne.n	80086ea <_malloc_r+0xf6>
 800862c:	9b00      	ldr	r3, [sp, #0]
 800862e:	681c      	ldr	r4, [r3, #0]
 8008630:	0025      	movs	r5, r4
 8008632:	2d00      	cmp	r5, #0
 8008634:	d14e      	bne.n	80086d4 <_malloc_r+0xe0>
 8008636:	2c00      	cmp	r4, #0
 8008638:	d051      	beq.n	80086de <_malloc_r+0xea>
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	0029      	movs	r1, r5
 800863e:	18e3      	adds	r3, r4, r3
 8008640:	0030      	movs	r0, r6
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	f000 fb5e 	bl	8008d04 <_sbrk_r>
 8008648:	9b01      	ldr	r3, [sp, #4]
 800864a:	4283      	cmp	r3, r0
 800864c:	d147      	bne.n	80086de <_malloc_r+0xea>
 800864e:	6823      	ldr	r3, [r4, #0]
 8008650:	0030      	movs	r0, r6
 8008652:	1aff      	subs	r7, r7, r3
 8008654:	0039      	movs	r1, r7
 8008656:	f7ff ffab 	bl	80085b0 <sbrk_aligned>
 800865a:	3001      	adds	r0, #1
 800865c:	d03f      	beq.n	80086de <_malloc_r+0xea>
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	19db      	adds	r3, r3, r7
 8008662:	6023      	str	r3, [r4, #0]
 8008664:	9b00      	ldr	r3, [sp, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d040      	beq.n	80086ee <_malloc_r+0xfa>
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	42a2      	cmp	r2, r4
 8008670:	d133      	bne.n	80086da <_malloc_r+0xe6>
 8008672:	2200      	movs	r2, #0
 8008674:	605a      	str	r2, [r3, #4]
 8008676:	e014      	b.n	80086a2 <_malloc_r+0xae>
 8008678:	2b00      	cmp	r3, #0
 800867a:	dac5      	bge.n	8008608 <_malloc_r+0x14>
 800867c:	230c      	movs	r3, #12
 800867e:	2500      	movs	r5, #0
 8008680:	6033      	str	r3, [r6, #0]
 8008682:	0028      	movs	r0, r5
 8008684:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008686:	6821      	ldr	r1, [r4, #0]
 8008688:	1bc9      	subs	r1, r1, r7
 800868a:	d420      	bmi.n	80086ce <_malloc_r+0xda>
 800868c:	290b      	cmp	r1, #11
 800868e:	d918      	bls.n	80086c2 <_malloc_r+0xce>
 8008690:	19e2      	adds	r2, r4, r7
 8008692:	6027      	str	r7, [r4, #0]
 8008694:	42a3      	cmp	r3, r4
 8008696:	d112      	bne.n	80086be <_malloc_r+0xca>
 8008698:	9b00      	ldr	r3, [sp, #0]
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	6863      	ldr	r3, [r4, #4]
 800869e:	6011      	str	r1, [r2, #0]
 80086a0:	6053      	str	r3, [r2, #4]
 80086a2:	0030      	movs	r0, r6
 80086a4:	0025      	movs	r5, r4
 80086a6:	f000 f82f 	bl	8008708 <__malloc_unlock>
 80086aa:	2207      	movs	r2, #7
 80086ac:	350b      	adds	r5, #11
 80086ae:	1d23      	adds	r3, r4, #4
 80086b0:	4395      	bics	r5, r2
 80086b2:	1aea      	subs	r2, r5, r3
 80086b4:	429d      	cmp	r5, r3
 80086b6:	d0e4      	beq.n	8008682 <_malloc_r+0x8e>
 80086b8:	1b5b      	subs	r3, r3, r5
 80086ba:	50a3      	str	r3, [r4, r2]
 80086bc:	e7e1      	b.n	8008682 <_malloc_r+0x8e>
 80086be:	605a      	str	r2, [r3, #4]
 80086c0:	e7ec      	b.n	800869c <_malloc_r+0xa8>
 80086c2:	6862      	ldr	r2, [r4, #4]
 80086c4:	42a3      	cmp	r3, r4
 80086c6:	d1d5      	bne.n	8008674 <_malloc_r+0x80>
 80086c8:	9b00      	ldr	r3, [sp, #0]
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	e7e9      	b.n	80086a2 <_malloc_r+0xae>
 80086ce:	0023      	movs	r3, r4
 80086d0:	6864      	ldr	r4, [r4, #4]
 80086d2:	e7a2      	b.n	800861a <_malloc_r+0x26>
 80086d4:	002c      	movs	r4, r5
 80086d6:	686d      	ldr	r5, [r5, #4]
 80086d8:	e7ab      	b.n	8008632 <_malloc_r+0x3e>
 80086da:	0013      	movs	r3, r2
 80086dc:	e7c4      	b.n	8008668 <_malloc_r+0x74>
 80086de:	230c      	movs	r3, #12
 80086e0:	0030      	movs	r0, r6
 80086e2:	6033      	str	r3, [r6, #0]
 80086e4:	f000 f810 	bl	8008708 <__malloc_unlock>
 80086e8:	e7cb      	b.n	8008682 <_malloc_r+0x8e>
 80086ea:	6027      	str	r7, [r4, #0]
 80086ec:	e7d9      	b.n	80086a2 <_malloc_r+0xae>
 80086ee:	605b      	str	r3, [r3, #4]
 80086f0:	deff      	udf	#255	; 0xff
 80086f2:	46c0      	nop			; (mov r8, r8)
 80086f4:	20000b9c 	.word	0x20000b9c

080086f8 <__malloc_lock>:
 80086f8:	b510      	push	{r4, lr}
 80086fa:	4802      	ldr	r0, [pc, #8]	; (8008704 <__malloc_lock+0xc>)
 80086fc:	f7ff ff02 	bl	8008504 <__retarget_lock_acquire_recursive>
 8008700:	bd10      	pop	{r4, pc}
 8008702:	46c0      	nop			; (mov r8, r8)
 8008704:	20000b98 	.word	0x20000b98

08008708 <__malloc_unlock>:
 8008708:	b510      	push	{r4, lr}
 800870a:	4802      	ldr	r0, [pc, #8]	; (8008714 <__malloc_unlock+0xc>)
 800870c:	f7ff fefb 	bl	8008506 <__retarget_lock_release_recursive>
 8008710:	bd10      	pop	{r4, pc}
 8008712:	46c0      	nop			; (mov r8, r8)
 8008714:	20000b98 	.word	0x20000b98

08008718 <__ssputs_r>:
 8008718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800871a:	b085      	sub	sp, #20
 800871c:	9301      	str	r3, [sp, #4]
 800871e:	9203      	str	r2, [sp, #12]
 8008720:	688e      	ldr	r6, [r1, #8]
 8008722:	9a01      	ldr	r2, [sp, #4]
 8008724:	0007      	movs	r7, r0
 8008726:	000c      	movs	r4, r1
 8008728:	680b      	ldr	r3, [r1, #0]
 800872a:	4296      	cmp	r6, r2
 800872c:	d831      	bhi.n	8008792 <__ssputs_r+0x7a>
 800872e:	898a      	ldrh	r2, [r1, #12]
 8008730:	2190      	movs	r1, #144	; 0x90
 8008732:	00c9      	lsls	r1, r1, #3
 8008734:	420a      	tst	r2, r1
 8008736:	d029      	beq.n	800878c <__ssputs_r+0x74>
 8008738:	2003      	movs	r0, #3
 800873a:	6921      	ldr	r1, [r4, #16]
 800873c:	1a5b      	subs	r3, r3, r1
 800873e:	9302      	str	r3, [sp, #8]
 8008740:	6963      	ldr	r3, [r4, #20]
 8008742:	4343      	muls	r3, r0
 8008744:	0fdd      	lsrs	r5, r3, #31
 8008746:	18ed      	adds	r5, r5, r3
 8008748:	9b01      	ldr	r3, [sp, #4]
 800874a:	9802      	ldr	r0, [sp, #8]
 800874c:	3301      	adds	r3, #1
 800874e:	181b      	adds	r3, r3, r0
 8008750:	106d      	asrs	r5, r5, #1
 8008752:	42ab      	cmp	r3, r5
 8008754:	d900      	bls.n	8008758 <__ssputs_r+0x40>
 8008756:	001d      	movs	r5, r3
 8008758:	0552      	lsls	r2, r2, #21
 800875a:	d529      	bpl.n	80087b0 <__ssputs_r+0x98>
 800875c:	0029      	movs	r1, r5
 800875e:	0038      	movs	r0, r7
 8008760:	f7ff ff48 	bl	80085f4 <_malloc_r>
 8008764:	1e06      	subs	r6, r0, #0
 8008766:	d02d      	beq.n	80087c4 <__ssputs_r+0xac>
 8008768:	9a02      	ldr	r2, [sp, #8]
 800876a:	6921      	ldr	r1, [r4, #16]
 800876c:	f7ff fecc 	bl	8008508 <memcpy>
 8008770:	89a2      	ldrh	r2, [r4, #12]
 8008772:	4b19      	ldr	r3, [pc, #100]	; (80087d8 <__ssputs_r+0xc0>)
 8008774:	401a      	ands	r2, r3
 8008776:	2380      	movs	r3, #128	; 0x80
 8008778:	4313      	orrs	r3, r2
 800877a:	81a3      	strh	r3, [r4, #12]
 800877c:	9b02      	ldr	r3, [sp, #8]
 800877e:	6126      	str	r6, [r4, #16]
 8008780:	18f6      	adds	r6, r6, r3
 8008782:	6026      	str	r6, [r4, #0]
 8008784:	6165      	str	r5, [r4, #20]
 8008786:	9e01      	ldr	r6, [sp, #4]
 8008788:	1aed      	subs	r5, r5, r3
 800878a:	60a5      	str	r5, [r4, #8]
 800878c:	9b01      	ldr	r3, [sp, #4]
 800878e:	429e      	cmp	r6, r3
 8008790:	d900      	bls.n	8008794 <__ssputs_r+0x7c>
 8008792:	9e01      	ldr	r6, [sp, #4]
 8008794:	0032      	movs	r2, r6
 8008796:	9903      	ldr	r1, [sp, #12]
 8008798:	6820      	ldr	r0, [r4, #0]
 800879a:	f000 fa9f 	bl	8008cdc <memmove>
 800879e:	2000      	movs	r0, #0
 80087a0:	68a3      	ldr	r3, [r4, #8]
 80087a2:	1b9b      	subs	r3, r3, r6
 80087a4:	60a3      	str	r3, [r4, #8]
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	199b      	adds	r3, r3, r6
 80087aa:	6023      	str	r3, [r4, #0]
 80087ac:	b005      	add	sp, #20
 80087ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087b0:	002a      	movs	r2, r5
 80087b2:	0038      	movs	r0, r7
 80087b4:	f000 fac3 	bl	8008d3e <_realloc_r>
 80087b8:	1e06      	subs	r6, r0, #0
 80087ba:	d1df      	bne.n	800877c <__ssputs_r+0x64>
 80087bc:	0038      	movs	r0, r7
 80087be:	6921      	ldr	r1, [r4, #16]
 80087c0:	f7ff feac 	bl	800851c <_free_r>
 80087c4:	230c      	movs	r3, #12
 80087c6:	2001      	movs	r0, #1
 80087c8:	603b      	str	r3, [r7, #0]
 80087ca:	89a2      	ldrh	r2, [r4, #12]
 80087cc:	3334      	adds	r3, #52	; 0x34
 80087ce:	4313      	orrs	r3, r2
 80087d0:	81a3      	strh	r3, [r4, #12]
 80087d2:	4240      	negs	r0, r0
 80087d4:	e7ea      	b.n	80087ac <__ssputs_r+0x94>
 80087d6:	46c0      	nop			; (mov r8, r8)
 80087d8:	fffffb7f 	.word	0xfffffb7f

080087dc <_svfiprintf_r>:
 80087dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087de:	b0a1      	sub	sp, #132	; 0x84
 80087e0:	9003      	str	r0, [sp, #12]
 80087e2:	001d      	movs	r5, r3
 80087e4:	898b      	ldrh	r3, [r1, #12]
 80087e6:	000f      	movs	r7, r1
 80087e8:	0016      	movs	r6, r2
 80087ea:	061b      	lsls	r3, r3, #24
 80087ec:	d511      	bpl.n	8008812 <_svfiprintf_r+0x36>
 80087ee:	690b      	ldr	r3, [r1, #16]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10e      	bne.n	8008812 <_svfiprintf_r+0x36>
 80087f4:	2140      	movs	r1, #64	; 0x40
 80087f6:	f7ff fefd 	bl	80085f4 <_malloc_r>
 80087fa:	6038      	str	r0, [r7, #0]
 80087fc:	6138      	str	r0, [r7, #16]
 80087fe:	2800      	cmp	r0, #0
 8008800:	d105      	bne.n	800880e <_svfiprintf_r+0x32>
 8008802:	230c      	movs	r3, #12
 8008804:	9a03      	ldr	r2, [sp, #12]
 8008806:	3801      	subs	r0, #1
 8008808:	6013      	str	r3, [r2, #0]
 800880a:	b021      	add	sp, #132	; 0x84
 800880c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800880e:	2340      	movs	r3, #64	; 0x40
 8008810:	617b      	str	r3, [r7, #20]
 8008812:	2300      	movs	r3, #0
 8008814:	ac08      	add	r4, sp, #32
 8008816:	6163      	str	r3, [r4, #20]
 8008818:	3320      	adds	r3, #32
 800881a:	7663      	strb	r3, [r4, #25]
 800881c:	3310      	adds	r3, #16
 800881e:	76a3      	strb	r3, [r4, #26]
 8008820:	9507      	str	r5, [sp, #28]
 8008822:	0035      	movs	r5, r6
 8008824:	782b      	ldrb	r3, [r5, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <_svfiprintf_r+0x52>
 800882a:	2b25      	cmp	r3, #37	; 0x25
 800882c:	d148      	bne.n	80088c0 <_svfiprintf_r+0xe4>
 800882e:	1bab      	subs	r3, r5, r6
 8008830:	9305      	str	r3, [sp, #20]
 8008832:	42b5      	cmp	r5, r6
 8008834:	d00b      	beq.n	800884e <_svfiprintf_r+0x72>
 8008836:	0032      	movs	r2, r6
 8008838:	0039      	movs	r1, r7
 800883a:	9803      	ldr	r0, [sp, #12]
 800883c:	f7ff ff6c 	bl	8008718 <__ssputs_r>
 8008840:	3001      	adds	r0, #1
 8008842:	d100      	bne.n	8008846 <_svfiprintf_r+0x6a>
 8008844:	e0af      	b.n	80089a6 <_svfiprintf_r+0x1ca>
 8008846:	6963      	ldr	r3, [r4, #20]
 8008848:	9a05      	ldr	r2, [sp, #20]
 800884a:	189b      	adds	r3, r3, r2
 800884c:	6163      	str	r3, [r4, #20]
 800884e:	782b      	ldrb	r3, [r5, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d100      	bne.n	8008856 <_svfiprintf_r+0x7a>
 8008854:	e0a7      	b.n	80089a6 <_svfiprintf_r+0x1ca>
 8008856:	2201      	movs	r2, #1
 8008858:	2300      	movs	r3, #0
 800885a:	4252      	negs	r2, r2
 800885c:	6062      	str	r2, [r4, #4]
 800885e:	a904      	add	r1, sp, #16
 8008860:	3254      	adds	r2, #84	; 0x54
 8008862:	1852      	adds	r2, r2, r1
 8008864:	1c6e      	adds	r6, r5, #1
 8008866:	6023      	str	r3, [r4, #0]
 8008868:	60e3      	str	r3, [r4, #12]
 800886a:	60a3      	str	r3, [r4, #8]
 800886c:	7013      	strb	r3, [r2, #0]
 800886e:	65a3      	str	r3, [r4, #88]	; 0x58
 8008870:	4b55      	ldr	r3, [pc, #340]	; (80089c8 <_svfiprintf_r+0x1ec>)
 8008872:	2205      	movs	r2, #5
 8008874:	0018      	movs	r0, r3
 8008876:	7831      	ldrb	r1, [r6, #0]
 8008878:	9305      	str	r3, [sp, #20]
 800887a:	f000 fa55 	bl	8008d28 <memchr>
 800887e:	1c75      	adds	r5, r6, #1
 8008880:	2800      	cmp	r0, #0
 8008882:	d11f      	bne.n	80088c4 <_svfiprintf_r+0xe8>
 8008884:	6822      	ldr	r2, [r4, #0]
 8008886:	06d3      	lsls	r3, r2, #27
 8008888:	d504      	bpl.n	8008894 <_svfiprintf_r+0xb8>
 800888a:	2353      	movs	r3, #83	; 0x53
 800888c:	a904      	add	r1, sp, #16
 800888e:	185b      	adds	r3, r3, r1
 8008890:	2120      	movs	r1, #32
 8008892:	7019      	strb	r1, [r3, #0]
 8008894:	0713      	lsls	r3, r2, #28
 8008896:	d504      	bpl.n	80088a2 <_svfiprintf_r+0xc6>
 8008898:	2353      	movs	r3, #83	; 0x53
 800889a:	a904      	add	r1, sp, #16
 800889c:	185b      	adds	r3, r3, r1
 800889e:	212b      	movs	r1, #43	; 0x2b
 80088a0:	7019      	strb	r1, [r3, #0]
 80088a2:	7833      	ldrb	r3, [r6, #0]
 80088a4:	2b2a      	cmp	r3, #42	; 0x2a
 80088a6:	d016      	beq.n	80088d6 <_svfiprintf_r+0xfa>
 80088a8:	0035      	movs	r5, r6
 80088aa:	2100      	movs	r1, #0
 80088ac:	200a      	movs	r0, #10
 80088ae:	68e3      	ldr	r3, [r4, #12]
 80088b0:	782a      	ldrb	r2, [r5, #0]
 80088b2:	1c6e      	adds	r6, r5, #1
 80088b4:	3a30      	subs	r2, #48	; 0x30
 80088b6:	2a09      	cmp	r2, #9
 80088b8:	d94e      	bls.n	8008958 <_svfiprintf_r+0x17c>
 80088ba:	2900      	cmp	r1, #0
 80088bc:	d111      	bne.n	80088e2 <_svfiprintf_r+0x106>
 80088be:	e017      	b.n	80088f0 <_svfiprintf_r+0x114>
 80088c0:	3501      	adds	r5, #1
 80088c2:	e7af      	b.n	8008824 <_svfiprintf_r+0x48>
 80088c4:	9b05      	ldr	r3, [sp, #20]
 80088c6:	6822      	ldr	r2, [r4, #0]
 80088c8:	1ac0      	subs	r0, r0, r3
 80088ca:	2301      	movs	r3, #1
 80088cc:	4083      	lsls	r3, r0
 80088ce:	4313      	orrs	r3, r2
 80088d0:	002e      	movs	r6, r5
 80088d2:	6023      	str	r3, [r4, #0]
 80088d4:	e7cc      	b.n	8008870 <_svfiprintf_r+0x94>
 80088d6:	9b07      	ldr	r3, [sp, #28]
 80088d8:	1d19      	adds	r1, r3, #4
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	9107      	str	r1, [sp, #28]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	db01      	blt.n	80088e6 <_svfiprintf_r+0x10a>
 80088e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80088e4:	e004      	b.n	80088f0 <_svfiprintf_r+0x114>
 80088e6:	425b      	negs	r3, r3
 80088e8:	60e3      	str	r3, [r4, #12]
 80088ea:	2302      	movs	r3, #2
 80088ec:	4313      	orrs	r3, r2
 80088ee:	6023      	str	r3, [r4, #0]
 80088f0:	782b      	ldrb	r3, [r5, #0]
 80088f2:	2b2e      	cmp	r3, #46	; 0x2e
 80088f4:	d10a      	bne.n	800890c <_svfiprintf_r+0x130>
 80088f6:	786b      	ldrb	r3, [r5, #1]
 80088f8:	2b2a      	cmp	r3, #42	; 0x2a
 80088fa:	d135      	bne.n	8008968 <_svfiprintf_r+0x18c>
 80088fc:	9b07      	ldr	r3, [sp, #28]
 80088fe:	3502      	adds	r5, #2
 8008900:	1d1a      	adds	r2, r3, #4
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	9207      	str	r2, [sp, #28]
 8008906:	2b00      	cmp	r3, #0
 8008908:	db2b      	blt.n	8008962 <_svfiprintf_r+0x186>
 800890a:	9309      	str	r3, [sp, #36]	; 0x24
 800890c:	4e2f      	ldr	r6, [pc, #188]	; (80089cc <_svfiprintf_r+0x1f0>)
 800890e:	2203      	movs	r2, #3
 8008910:	0030      	movs	r0, r6
 8008912:	7829      	ldrb	r1, [r5, #0]
 8008914:	f000 fa08 	bl	8008d28 <memchr>
 8008918:	2800      	cmp	r0, #0
 800891a:	d006      	beq.n	800892a <_svfiprintf_r+0x14e>
 800891c:	2340      	movs	r3, #64	; 0x40
 800891e:	1b80      	subs	r0, r0, r6
 8008920:	4083      	lsls	r3, r0
 8008922:	6822      	ldr	r2, [r4, #0]
 8008924:	3501      	adds	r5, #1
 8008926:	4313      	orrs	r3, r2
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	7829      	ldrb	r1, [r5, #0]
 800892c:	2206      	movs	r2, #6
 800892e:	4828      	ldr	r0, [pc, #160]	; (80089d0 <_svfiprintf_r+0x1f4>)
 8008930:	1c6e      	adds	r6, r5, #1
 8008932:	7621      	strb	r1, [r4, #24]
 8008934:	f000 f9f8 	bl	8008d28 <memchr>
 8008938:	2800      	cmp	r0, #0
 800893a:	d03c      	beq.n	80089b6 <_svfiprintf_r+0x1da>
 800893c:	4b25      	ldr	r3, [pc, #148]	; (80089d4 <_svfiprintf_r+0x1f8>)
 800893e:	2b00      	cmp	r3, #0
 8008940:	d125      	bne.n	800898e <_svfiprintf_r+0x1b2>
 8008942:	2207      	movs	r2, #7
 8008944:	9b07      	ldr	r3, [sp, #28]
 8008946:	3307      	adds	r3, #7
 8008948:	4393      	bics	r3, r2
 800894a:	3308      	adds	r3, #8
 800894c:	9307      	str	r3, [sp, #28]
 800894e:	6963      	ldr	r3, [r4, #20]
 8008950:	9a04      	ldr	r2, [sp, #16]
 8008952:	189b      	adds	r3, r3, r2
 8008954:	6163      	str	r3, [r4, #20]
 8008956:	e764      	b.n	8008822 <_svfiprintf_r+0x46>
 8008958:	4343      	muls	r3, r0
 800895a:	0035      	movs	r5, r6
 800895c:	2101      	movs	r1, #1
 800895e:	189b      	adds	r3, r3, r2
 8008960:	e7a6      	b.n	80088b0 <_svfiprintf_r+0xd4>
 8008962:	2301      	movs	r3, #1
 8008964:	425b      	negs	r3, r3
 8008966:	e7d0      	b.n	800890a <_svfiprintf_r+0x12e>
 8008968:	2300      	movs	r3, #0
 800896a:	200a      	movs	r0, #10
 800896c:	001a      	movs	r2, r3
 800896e:	3501      	adds	r5, #1
 8008970:	6063      	str	r3, [r4, #4]
 8008972:	7829      	ldrb	r1, [r5, #0]
 8008974:	1c6e      	adds	r6, r5, #1
 8008976:	3930      	subs	r1, #48	; 0x30
 8008978:	2909      	cmp	r1, #9
 800897a:	d903      	bls.n	8008984 <_svfiprintf_r+0x1a8>
 800897c:	2b00      	cmp	r3, #0
 800897e:	d0c5      	beq.n	800890c <_svfiprintf_r+0x130>
 8008980:	9209      	str	r2, [sp, #36]	; 0x24
 8008982:	e7c3      	b.n	800890c <_svfiprintf_r+0x130>
 8008984:	4342      	muls	r2, r0
 8008986:	0035      	movs	r5, r6
 8008988:	2301      	movs	r3, #1
 800898a:	1852      	adds	r2, r2, r1
 800898c:	e7f1      	b.n	8008972 <_svfiprintf_r+0x196>
 800898e:	aa07      	add	r2, sp, #28
 8008990:	9200      	str	r2, [sp, #0]
 8008992:	0021      	movs	r1, r4
 8008994:	003a      	movs	r2, r7
 8008996:	4b10      	ldr	r3, [pc, #64]	; (80089d8 <_svfiprintf_r+0x1fc>)
 8008998:	9803      	ldr	r0, [sp, #12]
 800899a:	e000      	b.n	800899e <_svfiprintf_r+0x1c2>
 800899c:	bf00      	nop
 800899e:	9004      	str	r0, [sp, #16]
 80089a0:	9b04      	ldr	r3, [sp, #16]
 80089a2:	3301      	adds	r3, #1
 80089a4:	d1d3      	bne.n	800894e <_svfiprintf_r+0x172>
 80089a6:	89bb      	ldrh	r3, [r7, #12]
 80089a8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80089aa:	065b      	lsls	r3, r3, #25
 80089ac:	d400      	bmi.n	80089b0 <_svfiprintf_r+0x1d4>
 80089ae:	e72c      	b.n	800880a <_svfiprintf_r+0x2e>
 80089b0:	2001      	movs	r0, #1
 80089b2:	4240      	negs	r0, r0
 80089b4:	e729      	b.n	800880a <_svfiprintf_r+0x2e>
 80089b6:	aa07      	add	r2, sp, #28
 80089b8:	9200      	str	r2, [sp, #0]
 80089ba:	0021      	movs	r1, r4
 80089bc:	003a      	movs	r2, r7
 80089be:	4b06      	ldr	r3, [pc, #24]	; (80089d8 <_svfiprintf_r+0x1fc>)
 80089c0:	9803      	ldr	r0, [sp, #12]
 80089c2:	f000 f87b 	bl	8008abc <_printf_i>
 80089c6:	e7ea      	b.n	800899e <_svfiprintf_r+0x1c2>
 80089c8:	0800909c 	.word	0x0800909c
 80089cc:	080090a2 	.word	0x080090a2
 80089d0:	080090a6 	.word	0x080090a6
 80089d4:	00000000 	.word	0x00000000
 80089d8:	08008719 	.word	0x08008719

080089dc <_printf_common>:
 80089dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089de:	0016      	movs	r6, r2
 80089e0:	9301      	str	r3, [sp, #4]
 80089e2:	688a      	ldr	r2, [r1, #8]
 80089e4:	690b      	ldr	r3, [r1, #16]
 80089e6:	000c      	movs	r4, r1
 80089e8:	9000      	str	r0, [sp, #0]
 80089ea:	4293      	cmp	r3, r2
 80089ec:	da00      	bge.n	80089f0 <_printf_common+0x14>
 80089ee:	0013      	movs	r3, r2
 80089f0:	0022      	movs	r2, r4
 80089f2:	6033      	str	r3, [r6, #0]
 80089f4:	3243      	adds	r2, #67	; 0x43
 80089f6:	7812      	ldrb	r2, [r2, #0]
 80089f8:	2a00      	cmp	r2, #0
 80089fa:	d001      	beq.n	8008a00 <_printf_common+0x24>
 80089fc:	3301      	adds	r3, #1
 80089fe:	6033      	str	r3, [r6, #0]
 8008a00:	6823      	ldr	r3, [r4, #0]
 8008a02:	069b      	lsls	r3, r3, #26
 8008a04:	d502      	bpl.n	8008a0c <_printf_common+0x30>
 8008a06:	6833      	ldr	r3, [r6, #0]
 8008a08:	3302      	adds	r3, #2
 8008a0a:	6033      	str	r3, [r6, #0]
 8008a0c:	6822      	ldr	r2, [r4, #0]
 8008a0e:	2306      	movs	r3, #6
 8008a10:	0015      	movs	r5, r2
 8008a12:	401d      	ands	r5, r3
 8008a14:	421a      	tst	r2, r3
 8008a16:	d027      	beq.n	8008a68 <_printf_common+0x8c>
 8008a18:	0023      	movs	r3, r4
 8008a1a:	3343      	adds	r3, #67	; 0x43
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	1e5a      	subs	r2, r3, #1
 8008a20:	4193      	sbcs	r3, r2
 8008a22:	6822      	ldr	r2, [r4, #0]
 8008a24:	0692      	lsls	r2, r2, #26
 8008a26:	d430      	bmi.n	8008a8a <_printf_common+0xae>
 8008a28:	0022      	movs	r2, r4
 8008a2a:	9901      	ldr	r1, [sp, #4]
 8008a2c:	9800      	ldr	r0, [sp, #0]
 8008a2e:	9d08      	ldr	r5, [sp, #32]
 8008a30:	3243      	adds	r2, #67	; 0x43
 8008a32:	47a8      	blx	r5
 8008a34:	3001      	adds	r0, #1
 8008a36:	d025      	beq.n	8008a84 <_printf_common+0xa8>
 8008a38:	2206      	movs	r2, #6
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	2500      	movs	r5, #0
 8008a3e:	4013      	ands	r3, r2
 8008a40:	2b04      	cmp	r3, #4
 8008a42:	d105      	bne.n	8008a50 <_printf_common+0x74>
 8008a44:	6833      	ldr	r3, [r6, #0]
 8008a46:	68e5      	ldr	r5, [r4, #12]
 8008a48:	1aed      	subs	r5, r5, r3
 8008a4a:	43eb      	mvns	r3, r5
 8008a4c:	17db      	asrs	r3, r3, #31
 8008a4e:	401d      	ands	r5, r3
 8008a50:	68a3      	ldr	r3, [r4, #8]
 8008a52:	6922      	ldr	r2, [r4, #16]
 8008a54:	4293      	cmp	r3, r2
 8008a56:	dd01      	ble.n	8008a5c <_printf_common+0x80>
 8008a58:	1a9b      	subs	r3, r3, r2
 8008a5a:	18ed      	adds	r5, r5, r3
 8008a5c:	2600      	movs	r6, #0
 8008a5e:	42b5      	cmp	r5, r6
 8008a60:	d120      	bne.n	8008aa4 <_printf_common+0xc8>
 8008a62:	2000      	movs	r0, #0
 8008a64:	e010      	b.n	8008a88 <_printf_common+0xac>
 8008a66:	3501      	adds	r5, #1
 8008a68:	68e3      	ldr	r3, [r4, #12]
 8008a6a:	6832      	ldr	r2, [r6, #0]
 8008a6c:	1a9b      	subs	r3, r3, r2
 8008a6e:	42ab      	cmp	r3, r5
 8008a70:	ddd2      	ble.n	8008a18 <_printf_common+0x3c>
 8008a72:	0022      	movs	r2, r4
 8008a74:	2301      	movs	r3, #1
 8008a76:	9901      	ldr	r1, [sp, #4]
 8008a78:	9800      	ldr	r0, [sp, #0]
 8008a7a:	9f08      	ldr	r7, [sp, #32]
 8008a7c:	3219      	adds	r2, #25
 8008a7e:	47b8      	blx	r7
 8008a80:	3001      	adds	r0, #1
 8008a82:	d1f0      	bne.n	8008a66 <_printf_common+0x8a>
 8008a84:	2001      	movs	r0, #1
 8008a86:	4240      	negs	r0, r0
 8008a88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a8a:	2030      	movs	r0, #48	; 0x30
 8008a8c:	18e1      	adds	r1, r4, r3
 8008a8e:	3143      	adds	r1, #67	; 0x43
 8008a90:	7008      	strb	r0, [r1, #0]
 8008a92:	0021      	movs	r1, r4
 8008a94:	1c5a      	adds	r2, r3, #1
 8008a96:	3145      	adds	r1, #69	; 0x45
 8008a98:	7809      	ldrb	r1, [r1, #0]
 8008a9a:	18a2      	adds	r2, r4, r2
 8008a9c:	3243      	adds	r2, #67	; 0x43
 8008a9e:	3302      	adds	r3, #2
 8008aa0:	7011      	strb	r1, [r2, #0]
 8008aa2:	e7c1      	b.n	8008a28 <_printf_common+0x4c>
 8008aa4:	0022      	movs	r2, r4
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	9901      	ldr	r1, [sp, #4]
 8008aaa:	9800      	ldr	r0, [sp, #0]
 8008aac:	9f08      	ldr	r7, [sp, #32]
 8008aae:	321a      	adds	r2, #26
 8008ab0:	47b8      	blx	r7
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	d0e6      	beq.n	8008a84 <_printf_common+0xa8>
 8008ab6:	3601      	adds	r6, #1
 8008ab8:	e7d1      	b.n	8008a5e <_printf_common+0x82>
	...

08008abc <_printf_i>:
 8008abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008abe:	b08b      	sub	sp, #44	; 0x2c
 8008ac0:	9206      	str	r2, [sp, #24]
 8008ac2:	000a      	movs	r2, r1
 8008ac4:	3243      	adds	r2, #67	; 0x43
 8008ac6:	9307      	str	r3, [sp, #28]
 8008ac8:	9005      	str	r0, [sp, #20]
 8008aca:	9204      	str	r2, [sp, #16]
 8008acc:	7e0a      	ldrb	r2, [r1, #24]
 8008ace:	000c      	movs	r4, r1
 8008ad0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ad2:	2a78      	cmp	r2, #120	; 0x78
 8008ad4:	d809      	bhi.n	8008aea <_printf_i+0x2e>
 8008ad6:	2a62      	cmp	r2, #98	; 0x62
 8008ad8:	d80b      	bhi.n	8008af2 <_printf_i+0x36>
 8008ada:	2a00      	cmp	r2, #0
 8008adc:	d100      	bne.n	8008ae0 <_printf_i+0x24>
 8008ade:	e0be      	b.n	8008c5e <_printf_i+0x1a2>
 8008ae0:	497c      	ldr	r1, [pc, #496]	; (8008cd4 <_printf_i+0x218>)
 8008ae2:	9103      	str	r1, [sp, #12]
 8008ae4:	2a58      	cmp	r2, #88	; 0x58
 8008ae6:	d100      	bne.n	8008aea <_printf_i+0x2e>
 8008ae8:	e093      	b.n	8008c12 <_printf_i+0x156>
 8008aea:	0026      	movs	r6, r4
 8008aec:	3642      	adds	r6, #66	; 0x42
 8008aee:	7032      	strb	r2, [r6, #0]
 8008af0:	e022      	b.n	8008b38 <_printf_i+0x7c>
 8008af2:	0010      	movs	r0, r2
 8008af4:	3863      	subs	r0, #99	; 0x63
 8008af6:	2815      	cmp	r0, #21
 8008af8:	d8f7      	bhi.n	8008aea <_printf_i+0x2e>
 8008afa:	f7f7 fb0d 	bl	8000118 <__gnu_thumb1_case_shi>
 8008afe:	0016      	.short	0x0016
 8008b00:	fff6001f 	.word	0xfff6001f
 8008b04:	fff6fff6 	.word	0xfff6fff6
 8008b08:	001ffff6 	.word	0x001ffff6
 8008b0c:	fff6fff6 	.word	0xfff6fff6
 8008b10:	fff6fff6 	.word	0xfff6fff6
 8008b14:	003600a3 	.word	0x003600a3
 8008b18:	fff60083 	.word	0xfff60083
 8008b1c:	00b4fff6 	.word	0x00b4fff6
 8008b20:	0036fff6 	.word	0x0036fff6
 8008b24:	fff6fff6 	.word	0xfff6fff6
 8008b28:	0087      	.short	0x0087
 8008b2a:	0026      	movs	r6, r4
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	3642      	adds	r6, #66	; 0x42
 8008b30:	1d11      	adds	r1, r2, #4
 8008b32:	6019      	str	r1, [r3, #0]
 8008b34:	6813      	ldr	r3, [r2, #0]
 8008b36:	7033      	strb	r3, [r6, #0]
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e0a2      	b.n	8008c82 <_printf_i+0x1c6>
 8008b3c:	6818      	ldr	r0, [r3, #0]
 8008b3e:	6809      	ldr	r1, [r1, #0]
 8008b40:	1d02      	adds	r2, r0, #4
 8008b42:	060d      	lsls	r5, r1, #24
 8008b44:	d50b      	bpl.n	8008b5e <_printf_i+0xa2>
 8008b46:	6805      	ldr	r5, [r0, #0]
 8008b48:	601a      	str	r2, [r3, #0]
 8008b4a:	2d00      	cmp	r5, #0
 8008b4c:	da03      	bge.n	8008b56 <_printf_i+0x9a>
 8008b4e:	232d      	movs	r3, #45	; 0x2d
 8008b50:	9a04      	ldr	r2, [sp, #16]
 8008b52:	426d      	negs	r5, r5
 8008b54:	7013      	strb	r3, [r2, #0]
 8008b56:	4b5f      	ldr	r3, [pc, #380]	; (8008cd4 <_printf_i+0x218>)
 8008b58:	270a      	movs	r7, #10
 8008b5a:	9303      	str	r3, [sp, #12]
 8008b5c:	e01b      	b.n	8008b96 <_printf_i+0xda>
 8008b5e:	6805      	ldr	r5, [r0, #0]
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	0649      	lsls	r1, r1, #25
 8008b64:	d5f1      	bpl.n	8008b4a <_printf_i+0x8e>
 8008b66:	b22d      	sxth	r5, r5
 8008b68:	e7ef      	b.n	8008b4a <_printf_i+0x8e>
 8008b6a:	680d      	ldr	r5, [r1, #0]
 8008b6c:	6819      	ldr	r1, [r3, #0]
 8008b6e:	1d08      	adds	r0, r1, #4
 8008b70:	6018      	str	r0, [r3, #0]
 8008b72:	062e      	lsls	r6, r5, #24
 8008b74:	d501      	bpl.n	8008b7a <_printf_i+0xbe>
 8008b76:	680d      	ldr	r5, [r1, #0]
 8008b78:	e003      	b.n	8008b82 <_printf_i+0xc6>
 8008b7a:	066d      	lsls	r5, r5, #25
 8008b7c:	d5fb      	bpl.n	8008b76 <_printf_i+0xba>
 8008b7e:	680d      	ldr	r5, [r1, #0]
 8008b80:	b2ad      	uxth	r5, r5
 8008b82:	4b54      	ldr	r3, [pc, #336]	; (8008cd4 <_printf_i+0x218>)
 8008b84:	2708      	movs	r7, #8
 8008b86:	9303      	str	r3, [sp, #12]
 8008b88:	2a6f      	cmp	r2, #111	; 0x6f
 8008b8a:	d000      	beq.n	8008b8e <_printf_i+0xd2>
 8008b8c:	3702      	adds	r7, #2
 8008b8e:	0023      	movs	r3, r4
 8008b90:	2200      	movs	r2, #0
 8008b92:	3343      	adds	r3, #67	; 0x43
 8008b94:	701a      	strb	r2, [r3, #0]
 8008b96:	6863      	ldr	r3, [r4, #4]
 8008b98:	60a3      	str	r3, [r4, #8]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	db03      	blt.n	8008ba6 <_printf_i+0xea>
 8008b9e:	2104      	movs	r1, #4
 8008ba0:	6822      	ldr	r2, [r4, #0]
 8008ba2:	438a      	bics	r2, r1
 8008ba4:	6022      	str	r2, [r4, #0]
 8008ba6:	2d00      	cmp	r5, #0
 8008ba8:	d102      	bne.n	8008bb0 <_printf_i+0xf4>
 8008baa:	9e04      	ldr	r6, [sp, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00c      	beq.n	8008bca <_printf_i+0x10e>
 8008bb0:	9e04      	ldr	r6, [sp, #16]
 8008bb2:	0028      	movs	r0, r5
 8008bb4:	0039      	movs	r1, r7
 8008bb6:	f7f7 fb3f 	bl	8000238 <__aeabi_uidivmod>
 8008bba:	9b03      	ldr	r3, [sp, #12]
 8008bbc:	3e01      	subs	r6, #1
 8008bbe:	5c5b      	ldrb	r3, [r3, r1]
 8008bc0:	7033      	strb	r3, [r6, #0]
 8008bc2:	002b      	movs	r3, r5
 8008bc4:	0005      	movs	r5, r0
 8008bc6:	429f      	cmp	r7, r3
 8008bc8:	d9f3      	bls.n	8008bb2 <_printf_i+0xf6>
 8008bca:	2f08      	cmp	r7, #8
 8008bcc:	d109      	bne.n	8008be2 <_printf_i+0x126>
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	07db      	lsls	r3, r3, #31
 8008bd2:	d506      	bpl.n	8008be2 <_printf_i+0x126>
 8008bd4:	6862      	ldr	r2, [r4, #4]
 8008bd6:	6923      	ldr	r3, [r4, #16]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	dc02      	bgt.n	8008be2 <_printf_i+0x126>
 8008bdc:	2330      	movs	r3, #48	; 0x30
 8008bde:	3e01      	subs	r6, #1
 8008be0:	7033      	strb	r3, [r6, #0]
 8008be2:	9b04      	ldr	r3, [sp, #16]
 8008be4:	1b9b      	subs	r3, r3, r6
 8008be6:	6123      	str	r3, [r4, #16]
 8008be8:	9b07      	ldr	r3, [sp, #28]
 8008bea:	0021      	movs	r1, r4
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	9805      	ldr	r0, [sp, #20]
 8008bf0:	9b06      	ldr	r3, [sp, #24]
 8008bf2:	aa09      	add	r2, sp, #36	; 0x24
 8008bf4:	f7ff fef2 	bl	80089dc <_printf_common>
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	d147      	bne.n	8008c8c <_printf_i+0x1d0>
 8008bfc:	2001      	movs	r0, #1
 8008bfe:	4240      	negs	r0, r0
 8008c00:	b00b      	add	sp, #44	; 0x2c
 8008c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c04:	2220      	movs	r2, #32
 8008c06:	6809      	ldr	r1, [r1, #0]
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	6022      	str	r2, [r4, #0]
 8008c0c:	2278      	movs	r2, #120	; 0x78
 8008c0e:	4932      	ldr	r1, [pc, #200]	; (8008cd8 <_printf_i+0x21c>)
 8008c10:	9103      	str	r1, [sp, #12]
 8008c12:	0021      	movs	r1, r4
 8008c14:	3145      	adds	r1, #69	; 0x45
 8008c16:	700a      	strb	r2, [r1, #0]
 8008c18:	6819      	ldr	r1, [r3, #0]
 8008c1a:	6822      	ldr	r2, [r4, #0]
 8008c1c:	c920      	ldmia	r1!, {r5}
 8008c1e:	0610      	lsls	r0, r2, #24
 8008c20:	d402      	bmi.n	8008c28 <_printf_i+0x16c>
 8008c22:	0650      	lsls	r0, r2, #25
 8008c24:	d500      	bpl.n	8008c28 <_printf_i+0x16c>
 8008c26:	b2ad      	uxth	r5, r5
 8008c28:	6019      	str	r1, [r3, #0]
 8008c2a:	07d3      	lsls	r3, r2, #31
 8008c2c:	d502      	bpl.n	8008c34 <_printf_i+0x178>
 8008c2e:	2320      	movs	r3, #32
 8008c30:	4313      	orrs	r3, r2
 8008c32:	6023      	str	r3, [r4, #0]
 8008c34:	2710      	movs	r7, #16
 8008c36:	2d00      	cmp	r5, #0
 8008c38:	d1a9      	bne.n	8008b8e <_printf_i+0xd2>
 8008c3a:	2220      	movs	r2, #32
 8008c3c:	6823      	ldr	r3, [r4, #0]
 8008c3e:	4393      	bics	r3, r2
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	e7a4      	b.n	8008b8e <_printf_i+0xd2>
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	680d      	ldr	r5, [r1, #0]
 8008c48:	1d10      	adds	r0, r2, #4
 8008c4a:	6949      	ldr	r1, [r1, #20]
 8008c4c:	6018      	str	r0, [r3, #0]
 8008c4e:	6813      	ldr	r3, [r2, #0]
 8008c50:	062e      	lsls	r6, r5, #24
 8008c52:	d501      	bpl.n	8008c58 <_printf_i+0x19c>
 8008c54:	6019      	str	r1, [r3, #0]
 8008c56:	e002      	b.n	8008c5e <_printf_i+0x1a2>
 8008c58:	066d      	lsls	r5, r5, #25
 8008c5a:	d5fb      	bpl.n	8008c54 <_printf_i+0x198>
 8008c5c:	8019      	strh	r1, [r3, #0]
 8008c5e:	2300      	movs	r3, #0
 8008c60:	9e04      	ldr	r6, [sp, #16]
 8008c62:	6123      	str	r3, [r4, #16]
 8008c64:	e7c0      	b.n	8008be8 <_printf_i+0x12c>
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	1d11      	adds	r1, r2, #4
 8008c6a:	6019      	str	r1, [r3, #0]
 8008c6c:	6816      	ldr	r6, [r2, #0]
 8008c6e:	2100      	movs	r1, #0
 8008c70:	0030      	movs	r0, r6
 8008c72:	6862      	ldr	r2, [r4, #4]
 8008c74:	f000 f858 	bl	8008d28 <memchr>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d001      	beq.n	8008c80 <_printf_i+0x1c4>
 8008c7c:	1b80      	subs	r0, r0, r6
 8008c7e:	6060      	str	r0, [r4, #4]
 8008c80:	6863      	ldr	r3, [r4, #4]
 8008c82:	6123      	str	r3, [r4, #16]
 8008c84:	2300      	movs	r3, #0
 8008c86:	9a04      	ldr	r2, [sp, #16]
 8008c88:	7013      	strb	r3, [r2, #0]
 8008c8a:	e7ad      	b.n	8008be8 <_printf_i+0x12c>
 8008c8c:	0032      	movs	r2, r6
 8008c8e:	6923      	ldr	r3, [r4, #16]
 8008c90:	9906      	ldr	r1, [sp, #24]
 8008c92:	9805      	ldr	r0, [sp, #20]
 8008c94:	9d07      	ldr	r5, [sp, #28]
 8008c96:	47a8      	blx	r5
 8008c98:	3001      	adds	r0, #1
 8008c9a:	d0af      	beq.n	8008bfc <_printf_i+0x140>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	079b      	lsls	r3, r3, #30
 8008ca0:	d415      	bmi.n	8008cce <_printf_i+0x212>
 8008ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ca4:	68e0      	ldr	r0, [r4, #12]
 8008ca6:	4298      	cmp	r0, r3
 8008ca8:	daaa      	bge.n	8008c00 <_printf_i+0x144>
 8008caa:	0018      	movs	r0, r3
 8008cac:	e7a8      	b.n	8008c00 <_printf_i+0x144>
 8008cae:	0022      	movs	r2, r4
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	9906      	ldr	r1, [sp, #24]
 8008cb4:	9805      	ldr	r0, [sp, #20]
 8008cb6:	9e07      	ldr	r6, [sp, #28]
 8008cb8:	3219      	adds	r2, #25
 8008cba:	47b0      	blx	r6
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	d09d      	beq.n	8008bfc <_printf_i+0x140>
 8008cc0:	3501      	adds	r5, #1
 8008cc2:	68e3      	ldr	r3, [r4, #12]
 8008cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cc6:	1a9b      	subs	r3, r3, r2
 8008cc8:	42ab      	cmp	r3, r5
 8008cca:	dcf0      	bgt.n	8008cae <_printf_i+0x1f2>
 8008ccc:	e7e9      	b.n	8008ca2 <_printf_i+0x1e6>
 8008cce:	2500      	movs	r5, #0
 8008cd0:	e7f7      	b.n	8008cc2 <_printf_i+0x206>
 8008cd2:	46c0      	nop			; (mov r8, r8)
 8008cd4:	080090ad 	.word	0x080090ad
 8008cd8:	080090be 	.word	0x080090be

08008cdc <memmove>:
 8008cdc:	b510      	push	{r4, lr}
 8008cde:	4288      	cmp	r0, r1
 8008ce0:	d902      	bls.n	8008ce8 <memmove+0xc>
 8008ce2:	188b      	adds	r3, r1, r2
 8008ce4:	4298      	cmp	r0, r3
 8008ce6:	d303      	bcc.n	8008cf0 <memmove+0x14>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	e007      	b.n	8008cfc <memmove+0x20>
 8008cec:	5c8b      	ldrb	r3, [r1, r2]
 8008cee:	5483      	strb	r3, [r0, r2]
 8008cf0:	3a01      	subs	r2, #1
 8008cf2:	d2fb      	bcs.n	8008cec <memmove+0x10>
 8008cf4:	bd10      	pop	{r4, pc}
 8008cf6:	5ccc      	ldrb	r4, [r1, r3]
 8008cf8:	54c4      	strb	r4, [r0, r3]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d1fa      	bne.n	8008cf6 <memmove+0x1a>
 8008d00:	e7f8      	b.n	8008cf4 <memmove+0x18>
	...

08008d04 <_sbrk_r>:
 8008d04:	2300      	movs	r3, #0
 8008d06:	b570      	push	{r4, r5, r6, lr}
 8008d08:	4d06      	ldr	r5, [pc, #24]	; (8008d24 <_sbrk_r+0x20>)
 8008d0a:	0004      	movs	r4, r0
 8008d0c:	0008      	movs	r0, r1
 8008d0e:	602b      	str	r3, [r5, #0]
 8008d10:	f7f9 fd5a 	bl	80027c8 <_sbrk>
 8008d14:	1c43      	adds	r3, r0, #1
 8008d16:	d103      	bne.n	8008d20 <_sbrk_r+0x1c>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d000      	beq.n	8008d20 <_sbrk_r+0x1c>
 8008d1e:	6023      	str	r3, [r4, #0]
 8008d20:	bd70      	pop	{r4, r5, r6, pc}
 8008d22:	46c0      	nop			; (mov r8, r8)
 8008d24:	20000b94 	.word	0x20000b94

08008d28 <memchr>:
 8008d28:	b2c9      	uxtb	r1, r1
 8008d2a:	1882      	adds	r2, r0, r2
 8008d2c:	4290      	cmp	r0, r2
 8008d2e:	d101      	bne.n	8008d34 <memchr+0xc>
 8008d30:	2000      	movs	r0, #0
 8008d32:	4770      	bx	lr
 8008d34:	7803      	ldrb	r3, [r0, #0]
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d0fb      	beq.n	8008d32 <memchr+0xa>
 8008d3a:	3001      	adds	r0, #1
 8008d3c:	e7f6      	b.n	8008d2c <memchr+0x4>

08008d3e <_realloc_r>:
 8008d3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d40:	0007      	movs	r7, r0
 8008d42:	000e      	movs	r6, r1
 8008d44:	0014      	movs	r4, r2
 8008d46:	2900      	cmp	r1, #0
 8008d48:	d105      	bne.n	8008d56 <_realloc_r+0x18>
 8008d4a:	0011      	movs	r1, r2
 8008d4c:	f7ff fc52 	bl	80085f4 <_malloc_r>
 8008d50:	0005      	movs	r5, r0
 8008d52:	0028      	movs	r0, r5
 8008d54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d56:	2a00      	cmp	r2, #0
 8008d58:	d103      	bne.n	8008d62 <_realloc_r+0x24>
 8008d5a:	f7ff fbdf 	bl	800851c <_free_r>
 8008d5e:	0025      	movs	r5, r4
 8008d60:	e7f7      	b.n	8008d52 <_realloc_r+0x14>
 8008d62:	f000 f81b 	bl	8008d9c <_malloc_usable_size_r>
 8008d66:	9001      	str	r0, [sp, #4]
 8008d68:	4284      	cmp	r4, r0
 8008d6a:	d803      	bhi.n	8008d74 <_realloc_r+0x36>
 8008d6c:	0035      	movs	r5, r6
 8008d6e:	0843      	lsrs	r3, r0, #1
 8008d70:	42a3      	cmp	r3, r4
 8008d72:	d3ee      	bcc.n	8008d52 <_realloc_r+0x14>
 8008d74:	0021      	movs	r1, r4
 8008d76:	0038      	movs	r0, r7
 8008d78:	f7ff fc3c 	bl	80085f4 <_malloc_r>
 8008d7c:	1e05      	subs	r5, r0, #0
 8008d7e:	d0e8      	beq.n	8008d52 <_realloc_r+0x14>
 8008d80:	9b01      	ldr	r3, [sp, #4]
 8008d82:	0022      	movs	r2, r4
 8008d84:	429c      	cmp	r4, r3
 8008d86:	d900      	bls.n	8008d8a <_realloc_r+0x4c>
 8008d88:	001a      	movs	r2, r3
 8008d8a:	0031      	movs	r1, r6
 8008d8c:	0028      	movs	r0, r5
 8008d8e:	f7ff fbbb 	bl	8008508 <memcpy>
 8008d92:	0031      	movs	r1, r6
 8008d94:	0038      	movs	r0, r7
 8008d96:	f7ff fbc1 	bl	800851c <_free_r>
 8008d9a:	e7da      	b.n	8008d52 <_realloc_r+0x14>

08008d9c <_malloc_usable_size_r>:
 8008d9c:	1f0b      	subs	r3, r1, #4
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	1f18      	subs	r0, r3, #4
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	da01      	bge.n	8008daa <_malloc_usable_size_r+0xe>
 8008da6:	580b      	ldr	r3, [r1, r0]
 8008da8:	18c0      	adds	r0, r0, r3
 8008daa:	4770      	bx	lr

08008dac <_init>:
 8008dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dae:	46c0      	nop			; (mov r8, r8)
 8008db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008db2:	bc08      	pop	{r3}
 8008db4:	469e      	mov	lr, r3
 8008db6:	4770      	bx	lr

08008db8 <_fini>:
 8008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dba:	46c0      	nop			; (mov r8, r8)
 8008dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dbe:	bc08      	pop	{r3}
 8008dc0:	469e      	mov	lr, r3
 8008dc2:	4770      	bx	lr
