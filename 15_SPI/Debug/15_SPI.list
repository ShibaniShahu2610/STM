
15_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080052a8  080052a8  000152a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005380  08005380  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005380  08005380  00015380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005388  08005388  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005388  08005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800538c  0800538c  0001538c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000070  08005400  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08005400  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c689  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002061  00000000  00000000  0002c764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  0002e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000803  00000000  00000000  0002f238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014e78  00000000  00000000  0002fa3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d7db  00000000  00000000  000448b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b440  00000000  00000000  0005208e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c28  00000000  00000000  000cd4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000d00f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005290 	.word	0x08005290

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005290 	.word	0x08005290

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fb9e 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f81c 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f912 	bl	80006f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004cc:	f000 f8f2 	bl	80006b4 <MX_DMA_Init>
  MX_SPI2_Init();
 80004d0:	f000 f888 	bl	80005e4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80004d4:	f000 f8be 	bl	8000654 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Clear the buffer before transmitting and receiving data
  memset(rx_data, 0, BUFFER_SIZE);
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <main+0x38>)
 80004da:	2205      	movs	r2, #5
 80004dc:	2100      	movs	r1, #0
 80004de:	0018      	movs	r0, r3
 80004e0:	f004 f932 	bl	8004748 <memset>

  HAL_SPI_TransmitReceive_DMA(&hspi2, tx_data, rx_data, sizeof(tx_data));
 80004e4:	4a03      	ldr	r2, [pc, #12]	; (80004f4 <main+0x38>)
 80004e6:	4904      	ldr	r1, [pc, #16]	; (80004f8 <main+0x3c>)
 80004e8:	4804      	ldr	r0, [pc, #16]	; (80004fc <main+0x40>)
 80004ea:	2305      	movs	r3, #5
 80004ec:	f002 f958 	bl	80027a0 <HAL_SPI_TransmitReceive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <main+0x34>
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	200001fc 	.word	0x200001fc
 80004f8:	20000000 	.word	0x20000000
 80004fc:	2000008c 	.word	0x2000008c

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b09d      	sub	sp, #116	; 0x74
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	2438      	movs	r4, #56	; 0x38
 8000508:	193b      	adds	r3, r7, r4
 800050a:	0018      	movs	r0, r3
 800050c:	2338      	movs	r3, #56	; 0x38
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f004 f919 	bl	8004748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000516:	2324      	movs	r3, #36	; 0x24
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	0018      	movs	r0, r3
 800051c:	2314      	movs	r3, #20
 800051e:	001a      	movs	r2, r3
 8000520:	2100      	movs	r1, #0
 8000522:	f004 f911 	bl	8004748 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000526:	003b      	movs	r3, r7
 8000528:	0018      	movs	r0, r3
 800052a:	2324      	movs	r3, #36	; 0x24
 800052c:	001a      	movs	r2, r3
 800052e:	2100      	movs	r1, #0
 8000530:	f004 f90a 	bl	8004748 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000534:	4b29      	ldr	r3, [pc, #164]	; (80005dc <SystemClock_Config+0xdc>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a29      	ldr	r2, [pc, #164]	; (80005e0 <SystemClock_Config+0xe0>)
 800053a:	401a      	ands	r2, r3
 800053c:	4b27      	ldr	r3, [pc, #156]	; (80005dc <SystemClock_Config+0xdc>)
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	0109      	lsls	r1, r1, #4
 8000542:	430a      	orrs	r2, r1
 8000544:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000546:	0021      	movs	r1, r4
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2202      	movs	r2, #2
 800054c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2201      	movs	r2, #1
 8000552:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2210      	movs	r2, #16
 8000558:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2202      	movs	r2, #2
 800055e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2200      	movs	r2, #0
 8000564:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2280      	movs	r2, #128	; 0x80
 8000570:	0412      	lsls	r2, r2, #16
 8000572:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	187b      	adds	r3, r7, r1
 8000576:	0018      	movs	r0, r3
 8000578:	f001 f848 	bl	800160c <HAL_RCC_OscConfig>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000580:	f000 f912 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	2124      	movs	r1, #36	; 0x24
 8000586:	187b      	adds	r3, r7, r1
 8000588:	220f      	movs	r2, #15
 800058a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2203      	movs	r2, #3
 8000590:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2100      	movs	r1, #0
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fbf3 	bl	8001d94 <HAL_RCC_ClockConfig>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005b2:	f000 f8f9 	bl	80007a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005b6:	003b      	movs	r3, r7
 80005b8:	2201      	movs	r2, #1
 80005ba:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005bc:	003b      	movs	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c2:	003b      	movs	r3, r7
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 fe09 	bl	80021dc <HAL_RCCEx_PeriphCLKConfig>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005ce:	f000 f8eb 	bl	80007a8 <Error_Handler>
  }
}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b01d      	add	sp, #116	; 0x74
 80005d8:	bd90      	pop	{r4, r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	40007000 	.word	0x40007000
 80005e0:	ffffe7ff 	.word	0xffffe7ff

080005e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005e8:	4b18      	ldr	r3, [pc, #96]	; (800064c <MX_SPI2_Init+0x68>)
 80005ea:	4a19      	ldr	r2, [pc, #100]	; (8000650 <MX_SPI2_Init+0x6c>)
 80005ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_SPI2_Init+0x68>)
 80005f0:	2282      	movs	r2, #130	; 0x82
 80005f2:	0052      	lsls	r2, r2, #1
 80005f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_SPI2_Init+0x68>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_SPI2_Init+0x68>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_SPI2_Init+0x68>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <MX_SPI2_Init+0x68>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_SPI2_Init+0x68>)
 8000610:	2280      	movs	r2, #128	; 0x80
 8000612:	0092      	lsls	r2, r2, #2
 8000614:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <MX_SPI2_Init+0x68>)
 8000618:	2200      	movs	r2, #0
 800061a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_SPI2_Init+0x68>)
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_SPI2_Init+0x68>)
 8000624:	2200      	movs	r2, #0
 8000626:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_SPI2_Init+0x68>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <MX_SPI2_Init+0x68>)
 8000630:	2207      	movs	r2, #7
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <MX_SPI2_Init+0x68>)
 8000636:	0018      	movs	r0, r3
 8000638:	f001 ff5e 	bl	80024f8 <HAL_SPI_Init>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000640:	f000 f8b2 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	2000008c 	.word	0x2000008c
 8000650:	40003800 	.word	0x40003800

08000654 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_USART1_UART_Init+0x58>)
 800065a:	4a15      	ldr	r2, [pc, #84]	; (80006b0 <MX_USART1_UART_Init+0x5c>)
 800065c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000660:	22e1      	movs	r2, #225	; 0xe1
 8000662:	0252      	lsls	r2, r2, #9
 8000664:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_USART1_UART_Init+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_USART1_UART_Init+0x58>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_USART1_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000698:	0018      	movs	r0, r3
 800069a:	f002 fd45 	bl	8003128 <HAL_UART_Init>
 800069e:	1e03      	subs	r3, r0, #0
 80006a0:	d001      	beq.n	80006a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006a2:	f000 f881 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000174 	.word	0x20000174
 80006b0:	40013800 	.word	0x40013800

080006b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_DMA_Init+0x38>)
 80006bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_DMA_Init+0x38>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	430a      	orrs	r2, r1
 80006c4:	631a      	str	r2, [r3, #48]	; 0x30
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_DMA_Init+0x38>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	2201      	movs	r2, #1
 80006cc:	4013      	ands	r3, r2
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	200b      	movs	r0, #11
 80006d8:	f000 fbae 	bl	8000e38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80006dc:	200b      	movs	r0, #11
 80006de:	f000 fbc0 	bl	8000e62 <HAL_NVIC_EnableIRQ>

}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	40021000 	.word	0x40021000

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_GPIO_Init+0x40>)
 80006f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_GPIO_Init+0x40>)
 80006fc:	2102      	movs	r1, #2
 80006fe:	430a      	orrs	r2, r1
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_GPIO_Init+0x40>)
 8000704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000706:	2202      	movs	r2, #2
 8000708:	4013      	ands	r3, r2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_GPIO_Init+0x40>)
 8000710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_GPIO_Init+0x40>)
 8000714:	2101      	movs	r1, #1
 8000716:	430a      	orrs	r2, r1
 8000718:	62da      	str	r2, [r3, #44]	; 0x2c
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <MX_GPIO_Init+0x40>)
 800071c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071e:	2201      	movs	r2, #1
 8000720:	4013      	ands	r3, r2
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b002      	add	sp, #8
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	40021000 	.word	0x40021000

08000734 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
//  UNUSED(hspi);
    HAL_SPI_Transmit_DMA(&hspi2, rx_data, sizeof(rx_data));
 800073c:	4914      	ldr	r1, [pc, #80]	; (8000790 <HAL_SPI_TxRxCpltCallback+0x5c>)
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <HAL_SPI_TxRxCpltCallback+0x60>)
 8000740:	2205      	movs	r2, #5
 8000742:	0018      	movs	r0, r3
 8000744:	f001 ff6c 	bl	8002620 <HAL_SPI_Transmit_DMA>
    printf("callback function is called\r\n");
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <HAL_SPI_TxRxCpltCallback+0x64>)
 800074a:	0018      	movs	r0, r3
 800074c:	f003 ff00 	bl	8004550 <puts>
    printf("Received data: ");
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_SPI_TxRxCpltCallback+0x68>)
 8000752:	0018      	movs	r0, r3
 8000754:	f003 fe96 	bl	8004484 <iprintf>
      for (int i = 0; i < BUFFER_SIZE; i++) {
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	e00c      	b.n	8000778 <HAL_SPI_TxRxCpltCallback+0x44>
          printf("%d ", rx_data[i]);
 800075e:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <HAL_SPI_TxRxCpltCallback+0x5c>)
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	18d3      	adds	r3, r2, r3
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	001a      	movs	r2, r3
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <HAL_SPI_TxRxCpltCallback+0x6c>)
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f003 fe89 	bl	8004484 <iprintf>
      for (int i = 0; i < BUFFER_SIZE; i++) {
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	3301      	adds	r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2b04      	cmp	r3, #4
 800077c:	ddef      	ble.n	800075e <HAL_SPI_TxRxCpltCallback+0x2a>
      }
      printf("\r\n");
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_SPI_TxRxCpltCallback+0x70>)
 8000780:	0018      	movs	r0, r3
 8000782:	f003 fee5 	bl	8004550 <puts>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b004      	add	sp, #16
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	200001fc 	.word	0x200001fc
 8000794:	2000008c 	.word	0x2000008c
 8000798:	080052a8 	.word	0x080052a8
 800079c:	080052c8 	.word	0x080052c8
 80007a0:	080052d8 	.word	0x080052d8
 80007a4:	080052dc 	.word	0x080052dc

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <HAL_MspInit+0x24>)
 80007ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_MspInit+0x24>)
 80007be:	2101      	movs	r1, #1
 80007c0:	430a      	orrs	r2, r1
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <HAL_MspInit+0x24>)
 80007c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <HAL_MspInit+0x24>)
 80007ca:	2180      	movs	r1, #128	; 0x80
 80007cc:	0549      	lsls	r1, r1, #21
 80007ce:	430a      	orrs	r2, r1
 80007d0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000

080007dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b089      	sub	sp, #36	; 0x24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	240c      	movs	r4, #12
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	0018      	movs	r0, r3
 80007ea:	2314      	movs	r3, #20
 80007ec:	001a      	movs	r2, r3
 80007ee:	2100      	movs	r1, #0
 80007f0:	f003 ffaa 	bl	8004748 <memset>
  if(hspi->Instance==SPI2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a50      	ldr	r2, [pc, #320]	; (800093c <HAL_SPI_MspInit+0x160>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d000      	beq.n	8000800 <HAL_SPI_MspInit+0x24>
 80007fe:	e099      	b.n	8000934 <HAL_SPI_MspInit+0x158>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000800:	4b4f      	ldr	r3, [pc, #316]	; (8000940 <HAL_SPI_MspInit+0x164>)
 8000802:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000804:	4b4e      	ldr	r3, [pc, #312]	; (8000940 <HAL_SPI_MspInit+0x164>)
 8000806:	2180      	movs	r1, #128	; 0x80
 8000808:	01c9      	lsls	r1, r1, #7
 800080a:	430a      	orrs	r2, r1
 800080c:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b4c      	ldr	r3, [pc, #304]	; (8000940 <HAL_SPI_MspInit+0x164>)
 8000810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000812:	4b4b      	ldr	r3, [pc, #300]	; (8000940 <HAL_SPI_MspInit+0x164>)
 8000814:	2102      	movs	r1, #2
 8000816:	430a      	orrs	r2, r1
 8000818:	62da      	str	r2, [r3, #44]	; 0x2c
 800081a:	4b49      	ldr	r3, [pc, #292]	; (8000940 <HAL_SPI_MspInit+0x164>)
 800081c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081e:	2202      	movs	r2, #2
 8000820:	4013      	ands	r3, r2
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = BSP_SPI2_SCK_Pin;
 8000826:	193b      	adds	r3, r7, r4
 8000828:	2280      	movs	r2, #128	; 0x80
 800082a:	00d2      	lsls	r2, r2, #3
 800082c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2202      	movs	r2, #2
 8000832:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2203      	movs	r2, #3
 800083e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2205      	movs	r2, #5
 8000844:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BSP_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000846:	193b      	adds	r3, r7, r4
 8000848:	4a3e      	ldr	r2, [pc, #248]	; (8000944 <HAL_SPI_MspInit+0x168>)
 800084a:	0019      	movs	r1, r3
 800084c:	0010      	movs	r0, r2
 800084e:	f000 fd67 	bl	8001320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BSP_SPI2_MISO_Pin|BSP_SPI2_MOSI_Pin;
 8000852:	0021      	movs	r1, r4
 8000854:	187b      	adds	r3, r7, r1
 8000856:	22c0      	movs	r2, #192	; 0xc0
 8000858:	0212      	lsls	r2, r2, #8
 800085a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2202      	movs	r2, #2
 8000860:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2203      	movs	r2, #3
 800086c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000874:	187b      	adds	r3, r7, r1
 8000876:	4a33      	ldr	r2, [pc, #204]	; (8000944 <HAL_SPI_MspInit+0x168>)
 8000878:	0019      	movs	r1, r3
 800087a:	0010      	movs	r0, r2
 800087c:	f000 fd50 	bl	8001320 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000880:	4b31      	ldr	r3, [pc, #196]	; (8000948 <HAL_SPI_MspInit+0x16c>)
 8000882:	4a32      	ldr	r2, [pc, #200]	; (800094c <HAL_SPI_MspInit+0x170>)
 8000884:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8000886:	4b30      	ldr	r3, [pc, #192]	; (8000948 <HAL_SPI_MspInit+0x16c>)
 8000888:	2202      	movs	r2, #2
 800088a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800088c:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <HAL_SPI_MspInit+0x16c>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000892:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <HAL_SPI_MspInit+0x16c>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000898:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <HAL_SPI_MspInit+0x16c>)
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800089e:	4b2a      	ldr	r3, [pc, #168]	; (8000948 <HAL_SPI_MspInit+0x16c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008a4:	4b28      	ldr	r3, [pc, #160]	; (8000948 <HAL_SPI_MspInit+0x16c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80008aa:	4b27      	ldr	r3, [pc, #156]	; (8000948 <HAL_SPI_MspInit+0x16c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008b0:	4b25      	ldr	r3, [pc, #148]	; (8000948 <HAL_SPI_MspInit+0x16c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80008b6:	4b24      	ldr	r3, [pc, #144]	; (8000948 <HAL_SPI_MspInit+0x16c>)
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 faef 	bl	8000e9c <HAL_DMA_Init>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_SPI_MspInit+0xea>
    {
      Error_Handler();
 80008c2:	f7ff ff71 	bl	80007a8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a1f      	ldr	r2, [pc, #124]	; (8000948 <HAL_SPI_MspInit+0x16c>)
 80008ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80008cc:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <HAL_SPI_MspInit+0x16c>)
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <HAL_SPI_MspInit+0x174>)
 80008d4:	4a1f      	ldr	r2, [pc, #124]	; (8000954 <HAL_SPI_MspInit+0x178>)
 80008d6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <HAL_SPI_MspInit+0x174>)
 80008da:	2202      	movs	r2, #2
 80008dc:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <HAL_SPI_MspInit+0x174>)
 80008e0:	2210      	movs	r2, #16
 80008e2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <HAL_SPI_MspInit+0x174>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <HAL_SPI_MspInit+0x174>)
 80008ec:	2280      	movs	r2, #128	; 0x80
 80008ee:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <HAL_SPI_MspInit+0x174>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <HAL_SPI_MspInit+0x174>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <HAL_SPI_MspInit+0x174>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <HAL_SPI_MspInit+0x174>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <HAL_SPI_MspInit+0x174>)
 800090a:	0018      	movs	r0, r3
 800090c:	f000 fac6 	bl	8000e9c <HAL_DMA_Init>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <HAL_SPI_MspInit+0x13c>
    {
      Error_Handler();
 8000914:	f7ff ff48 	bl	80007a8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a0d      	ldr	r2, [pc, #52]	; (8000950 <HAL_SPI_MspInit+0x174>)
 800091c:	649a      	str	r2, [r3, #72]	; 0x48
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <HAL_SPI_MspInit+0x174>)
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	201a      	movs	r0, #26
 800092a:	f000 fa85 	bl	8000e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800092e:	201a      	movs	r0, #26
 8000930:	f000 fa97 	bl	8000e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b009      	add	sp, #36	; 0x24
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	40003800 	.word	0x40003800
 8000940:	40021000 	.word	0x40021000
 8000944:	50000400 	.word	0x50000400
 8000948:	200000e4 	.word	0x200000e4
 800094c:	40020044 	.word	0x40020044
 8000950:	2000012c 	.word	0x2000012c
 8000954:	40020058 	.word	0x40020058

08000958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b089      	sub	sp, #36	; 0x24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	240c      	movs	r4, #12
 8000962:	193b      	adds	r3, r7, r4
 8000964:	0018      	movs	r0, r3
 8000966:	2314      	movs	r3, #20
 8000968:	001a      	movs	r2, r3
 800096a:	2100      	movs	r1, #0
 800096c:	f003 feec 	bl	8004748 <memset>
  if(huart->Instance==USART1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <HAL_UART_MspInit+0x90>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d132      	bne.n	80009e0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <HAL_UART_MspInit+0x94>)
 800097c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800097e:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <HAL_UART_MspInit+0x94>)
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	01c9      	lsls	r1, r1, #7
 8000984:	430a      	orrs	r2, r1
 8000986:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_UART_MspInit+0x94>)
 800098a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <HAL_UART_MspInit+0x94>)
 800098e:	2101      	movs	r1, #1
 8000990:	430a      	orrs	r2, r1
 8000992:	62da      	str	r2, [r3, #44]	; 0x2c
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <HAL_UART_MspInit+0x94>)
 8000996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000998:	2201      	movs	r2, #1
 800099a:	4013      	ands	r3, r2
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_USART1_TX_Pin|BSP_USART1_RX_Pin;
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	22c0      	movs	r2, #192	; 0xc0
 80009a4:	00d2      	lsls	r2, r2, #3
 80009a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	0021      	movs	r1, r4
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2202      	movs	r2, #2
 80009ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2203      	movs	r2, #3
 80009ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2204      	movs	r2, #4
 80009c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	187a      	adds	r2, r7, r1
 80009c4:	23a0      	movs	r3, #160	; 0xa0
 80009c6:	05db      	lsls	r3, r3, #23
 80009c8:	0011      	movs	r1, r2
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 fca8 	bl	8001320 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2100      	movs	r1, #0
 80009d4:	201b      	movs	r0, #27
 80009d6:	f000 fa2f 	bl	8000e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009da:	201b      	movs	r0, #27
 80009dc:	f000 fa41 	bl	8000e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b009      	add	sp, #36	; 0x24
 80009e6:	bd90      	pop	{r4, r7, pc}
 80009e8:	40013800 	.word	0x40013800
 80009ec:	40021000 	.word	0x40021000

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f4:	e7fe      	b.n	80009f4 <NMI_Handler+0x4>

080009f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <HardFault_Handler+0x4>

080009fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a14:	f000 f948 	bl	8000ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 fb9d 	bl	8001166 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 fb99 	bl	8001166 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	200000e4 	.word	0x200000e4
 8000a40:	2000012c 	.word	0x2000012c

08000a44 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <SPI2_IRQHandler+0x14>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 ffba 	bl	80029c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	2000008c 	.word	0x2000008c

08000a5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <USART1_IRQHandler+0x14>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f002 fc54 	bl	8003310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a68:	46c0      	nop			; (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	20000174 	.word	0x20000174

08000a74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e00a      	b.n	8000a9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a86:	e000      	b.n	8000a8a <_read+0x16>
 8000a88:	bf00      	nop
 8000a8a:	0001      	movs	r1, r0
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	1c5a      	adds	r2, r3, #1
 8000a90:	60ba      	str	r2, [r7, #8]
 8000a92:	b2ca      	uxtb	r2, r1
 8000a94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	dbf0      	blt.n	8000a86 <_read+0x12>
  }

  return len;
 8000aa4:	687b      	ldr	r3, [r7, #4]
}
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b006      	add	sp, #24
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&huart1, (const unsigned char *)ptr, len,1000);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	23fa      	movs	r3, #250	; 0xfa
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	68b9      	ldr	r1, [r7, #8]
 8000ac6:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <_write+0x28>)
 8000ac8:	f002 fb82 	bl	80031d0 <HAL_UART_Transmit>
  return len;
 8000acc:	687b      	ldr	r3, [r7, #4]
}
 8000ace:	0018      	movs	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b004      	add	sp, #16
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	20000174 	.word	0x20000174

08000adc <_close>:

int _close(int file)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	425b      	negs	r3, r3
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b002      	add	sp, #8
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	2280      	movs	r2, #128	; 0x80
 8000afe:	0192      	lsls	r2, r2, #6
 8000b00:	605a      	str	r2, [r3, #4]
  return 0;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	0018      	movs	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b002      	add	sp, #8
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <_isatty>:

int _isatty(int file)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b14:	2301      	movs	r3, #1
}
 8000b16:	0018      	movs	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b084      	sub	sp, #16
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b2a:	2300      	movs	r3, #0
}
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b004      	add	sp, #16
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b3c:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	18d3      	adds	r3, r2, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d207      	bcs.n	8000b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b64:	f003 fe46 	bl	80047f4 <__errno>
 8000b68:	0003      	movs	r3, r0
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	425b      	negs	r3, r3
 8000b72:	e009      	b.n	8000b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	18d2      	adds	r2, r2, r3
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <_sbrk+0x64>)
 8000b84:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b006      	add	sp, #24
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20002000 	.word	0x20002000
 8000b94:	00000400 	.word	0x00000400
 8000b98:	20000204 	.word	0x20000204
 8000b9c:	20000358 	.word	0x20000358

08000ba0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bae:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb0:	f7ff fff6 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	; (8000bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <LoopForever+0xe>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	; (8000bf8 <LoopForever+0x16>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bda:	f003 fe11 	bl	8004800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fc6d 	bl	80004bc <main>

08000be2 <LoopForever>:

LoopForever:
    b LoopForever
 8000be2:	e7fe      	b.n	8000be2 <LoopForever>
  ldr   r0, =_estack
 8000be4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bf0:	08005390 	.word	0x08005390
  ldr r2, =_sbss
 8000bf4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bf8:	20000358 	.word	0x20000358

08000bfc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC1_COMP_IRQHandler>
	...

08000c00 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <HAL_Init+0x3c>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_Init+0x3c>)
 8000c12:	2140      	movs	r1, #64	; 0x40
 8000c14:	430a      	orrs	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f000 f811 	bl	8000c40 <HAL_InitTick>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d003      	beq.n	8000c2a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
 8000c28:	e001      	b.n	8000c2e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c2a:	f7ff fdc3 	bl	80007b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
}
 8000c32:	0018      	movs	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	40022000 	.word	0x40022000

08000c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_InitTick+0x5c>)
 8000c4a:	681c      	ldr	r4, [r3, #0]
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_InitTick+0x60>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	0019      	movs	r1, r3
 8000c52:	23fa      	movs	r3, #250	; 0xfa
 8000c54:	0098      	lsls	r0, r3, #2
 8000c56:	f7ff fa61 	bl	800011c <__udivsi3>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	0020      	movs	r0, r4
 8000c60:	f7ff fa5c 	bl	800011c <__udivsi3>
 8000c64:	0003      	movs	r3, r0
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 f90b 	bl	8000e82 <HAL_SYSTICK_Config>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e00f      	b.n	8000c94 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d80b      	bhi.n	8000c92 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	425b      	negs	r3, r3
 8000c80:	2200      	movs	r2, #0
 8000c82:	0018      	movs	r0, r3
 8000c84:	f000 f8d8 	bl	8000e38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_InitTick+0x64>)
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	0018      	movs	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b003      	add	sp, #12
 8000c9a:	bd90      	pop	{r4, r7, pc}
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000010 	.word	0x20000010
 8000ca4:	2000000c 	.word	0x2000000c

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <HAL_IncTick+0x1c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	18d2      	adds	r2, r2, r3
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cba:	601a      	str	r2, [r3, #0]
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	20000010 	.word	0x20000010
 8000cc8:	20000208 	.word	0x20000208

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b02      	ldr	r3, [pc, #8]	; (8000cdc <HAL_GetTick+0x10>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	20000208 	.word	0x20000208

08000ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	0002      	movs	r2, r0
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b7f      	cmp	r3, #127	; 0x7f
 8000cf2:	d809      	bhi.n	8000d08 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf4:	1dfb      	adds	r3, r7, #7
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	231f      	movs	r3, #31
 8000cfc:	401a      	ands	r2, r3
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <__NVIC_EnableIRQ+0x30>)
 8000d00:	2101      	movs	r1, #1
 8000d02:	4091      	lsls	r1, r2
 8000d04:	000a      	movs	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]
  }
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b7f      	cmp	r3, #127	; 0x7f
 8000d28:	d828      	bhi.n	8000d7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d2a:	4a2f      	ldr	r2, [pc, #188]	; (8000de8 <__NVIC_SetPriority+0xd4>)
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	089b      	lsrs	r3, r3, #2
 8000d34:	33c0      	adds	r3, #192	; 0xc0
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	589b      	ldr	r3, [r3, r2]
 8000d3a:	1dfa      	adds	r2, r7, #7
 8000d3c:	7812      	ldrb	r2, [r2, #0]
 8000d3e:	0011      	movs	r1, r2
 8000d40:	2203      	movs	r2, #3
 8000d42:	400a      	ands	r2, r1
 8000d44:	00d2      	lsls	r2, r2, #3
 8000d46:	21ff      	movs	r1, #255	; 0xff
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	000a      	movs	r2, r1
 8000d4c:	43d2      	mvns	r2, r2
 8000d4e:	401a      	ands	r2, r3
 8000d50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	019b      	lsls	r3, r3, #6
 8000d56:	22ff      	movs	r2, #255	; 0xff
 8000d58:	401a      	ands	r2, r3
 8000d5a:	1dfb      	adds	r3, r7, #7
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	0018      	movs	r0, r3
 8000d60:	2303      	movs	r3, #3
 8000d62:	4003      	ands	r3, r0
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d68:	481f      	ldr	r0, [pc, #124]	; (8000de8 <__NVIC_SetPriority+0xd4>)
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	430a      	orrs	r2, r1
 8000d74:	33c0      	adds	r3, #192	; 0xc0
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d7a:	e031      	b.n	8000de0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <__NVIC_SetPriority+0xd8>)
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	0019      	movs	r1, r3
 8000d84:	230f      	movs	r3, #15
 8000d86:	400b      	ands	r3, r1
 8000d88:	3b08      	subs	r3, #8
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	3306      	adds	r3, #6
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	18d3      	adds	r3, r2, r3
 8000d92:	3304      	adds	r3, #4
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	1dfa      	adds	r2, r7, #7
 8000d98:	7812      	ldrb	r2, [r2, #0]
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	400a      	ands	r2, r1
 8000da0:	00d2      	lsls	r2, r2, #3
 8000da2:	21ff      	movs	r1, #255	; 0xff
 8000da4:	4091      	lsls	r1, r2
 8000da6:	000a      	movs	r2, r1
 8000da8:	43d2      	mvns	r2, r2
 8000daa:	401a      	ands	r2, r3
 8000dac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	019b      	lsls	r3, r3, #6
 8000db2:	22ff      	movs	r2, #255	; 0xff
 8000db4:	401a      	ands	r2, r3
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	0018      	movs	r0, r3
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	4003      	ands	r3, r0
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <__NVIC_SetPriority+0xd8>)
 8000dc6:	1dfb      	adds	r3, r7, #7
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	001c      	movs	r4, r3
 8000dcc:	230f      	movs	r3, #15
 8000dce:	4023      	ands	r3, r4
 8000dd0:	3b08      	subs	r3, #8
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	3306      	adds	r3, #6
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	18c3      	adds	r3, r0, r3
 8000ddc:	3304      	adds	r3, #4
 8000dde:	601a      	str	r2, [r3, #0]
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b003      	add	sp, #12
 8000de6:	bd90      	pop	{r4, r7, pc}
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	1e5a      	subs	r2, r3, #1
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	045b      	lsls	r3, r3, #17
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d301      	bcc.n	8000e08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e04:	2301      	movs	r3, #1
 8000e06:	e010      	b.n	8000e2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <SysTick_Config+0x44>)
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e10:	2301      	movs	r3, #1
 8000e12:	425b      	negs	r3, r3
 8000e14:	2103      	movs	r1, #3
 8000e16:	0018      	movs	r0, r3
 8000e18:	f7ff ff7c 	bl	8000d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <SysTick_Config+0x44>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SysTick_Config+0x44>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b002      	add	sp, #8
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	210f      	movs	r1, #15
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	1c02      	adds	r2, r0, #0
 8000e48:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b25b      	sxtb	r3, r3
 8000e52:	0011      	movs	r1, r2
 8000e54:	0018      	movs	r0, r3
 8000e56:	f7ff ff5d 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b004      	add	sp, #16
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	0002      	movs	r2, r0
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b25b      	sxtb	r3, r3
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff ff33 	bl	8000ce0 <__NVIC_EnableIRQ>
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b002      	add	sp, #8
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f7ff ffaf 	bl	8000df0 <SysTick_Config>
 8000e92:	0003      	movs	r3, r0
}
 8000e94:	0018      	movs	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e061      	b.n	8000f72 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a32      	ldr	r2, [pc, #200]	; (8000f7c <HAL_DMA_Init+0xe0>)
 8000eb4:	4694      	mov	ip, r2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	2114      	movs	r1, #20
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f7ff f92e 	bl	800011c <__udivsi3>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	009a      	lsls	r2, r3, #2
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a2d      	ldr	r2, [pc, #180]	; (8000f80 <HAL_DMA_Init+0xe4>)
 8000ecc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2225      	movs	r2, #37	; 0x25
 8000ed2:	2102      	movs	r1, #2
 8000ed4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4a28      	ldr	r2, [pc, #160]	; (8000f84 <HAL_DMA_Init+0xe8>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	01db      	lsls	r3, r3, #7
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d018      	beq.n	8000f5a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <HAL_DMA_Init+0xec>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f30:	211c      	movs	r1, #28
 8000f32:	400b      	ands	r3, r1
 8000f34:	210f      	movs	r1, #15
 8000f36:	4099      	lsls	r1, r3
 8000f38:	000b      	movs	r3, r1
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_DMA_Init+0xec>)
 8000f3e:	400a      	ands	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_DMA_Init+0xec>)
 8000f44:	6819      	ldr	r1, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	201c      	movs	r0, #28
 8000f50:	4003      	ands	r3, r0
 8000f52:	409a      	lsls	r2, r3
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_DMA_Init+0xec>)
 8000f56:	430a      	orrs	r2, r1
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2225      	movs	r2, #37	; 0x25
 8000f64:	2101      	movs	r1, #1
 8000f66:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2224      	movs	r2, #36	; 0x24
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	0018      	movs	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b004      	add	sp, #16
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	bffdfff8 	.word	0xbffdfff8
 8000f80:	40020000 	.word	0x40020000
 8000f84:	ffff800f 	.word	0xffff800f
 8000f88:	400200a8 	.word	0x400200a8

08000f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f9a:	2317      	movs	r3, #23
 8000f9c:	18fb      	adds	r3, r7, r3
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2224      	movs	r2, #36	; 0x24
 8000fa6:	5c9b      	ldrb	r3, [r3, r2]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d101      	bne.n	8000fb0 <HAL_DMA_Start_IT+0x24>
 8000fac:	2302      	movs	r3, #2
 8000fae:	e04f      	b.n	8001050 <HAL_DMA_Start_IT+0xc4>
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2224      	movs	r2, #36	; 0x24
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2225      	movs	r2, #37	; 0x25
 8000fbc:	5c9b      	ldrb	r3, [r3, r2]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d13a      	bne.n	800103a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2225      	movs	r2, #37	; 0x25
 8000fc8:	2102      	movs	r1, #2
 8000fca:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2101      	movs	r1, #1
 8000fde:	438a      	bics	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f000 f96a 	bl	80012c2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d008      	beq.n	8001008 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	210e      	movs	r1, #14
 8001002:	430a      	orrs	r2, r1
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	e00f      	b.n	8001028 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2104      	movs	r1, #4
 8001014:	438a      	bics	r2, r1
 8001016:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	210a      	movs	r1, #10
 8001024:	430a      	orrs	r2, r1
 8001026:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2101      	movs	r1, #1
 8001034:	430a      	orrs	r2, r1
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	e007      	b.n	800104a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2224      	movs	r2, #36	; 0x24
 800103e:	2100      	movs	r1, #0
 8001040:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001042:	2317      	movs	r3, #23
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	2202      	movs	r2, #2
 8001048:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800104a:	2317      	movs	r3, #23
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	781b      	ldrb	r3, [r3, #0]
}
 8001050:	0018      	movs	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	b006      	add	sp, #24
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001060:	230f      	movs	r3, #15
 8001062:	18fb      	adds	r3, r7, r3
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2225      	movs	r2, #37	; 0x25
 800106c:	5c9b      	ldrb	r3, [r3, r2]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d008      	beq.n	8001086 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2204      	movs	r2, #4
 8001078:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2224      	movs	r2, #36	; 0x24
 800107e:	2100      	movs	r1, #0
 8001080:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e024      	b.n	80010d0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	210e      	movs	r1, #14
 8001092:	438a      	bics	r2, r1
 8001094:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2101      	movs	r1, #1
 80010a2:	438a      	bics	r2, r1
 80010a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	221c      	movs	r2, #28
 80010ac:	401a      	ands	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	2101      	movs	r1, #1
 80010b4:	4091      	lsls	r1, r2
 80010b6:	000a      	movs	r2, r1
 80010b8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2225      	movs	r2, #37	; 0x25
 80010be:	2101      	movs	r1, #1
 80010c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2224      	movs	r2, #36	; 0x24
 80010c6:	2100      	movs	r1, #0
 80010c8:	5499      	strb	r1, [r3, r2]

    return status;
 80010ca:	230f      	movs	r3, #15
 80010cc:	18fb      	adds	r3, r7, r3
 80010ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80010d0:	0018      	movs	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b004      	add	sp, #16
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010e0:	210f      	movs	r1, #15
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2225      	movs	r2, #37	; 0x25
 80010ec:	5c9b      	ldrb	r3, [r3, r2]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d006      	beq.n	8001102 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2204      	movs	r2, #4
 80010f8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
 8001100:	e02a      	b.n	8001158 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	210e      	movs	r1, #14
 800110e:	438a      	bics	r2, r1
 8001110:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2101      	movs	r1, #1
 800111e:	438a      	bics	r2, r1
 8001120:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	221c      	movs	r2, #28
 8001128:	401a      	ands	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	2101      	movs	r1, #1
 8001130:	4091      	lsls	r1, r2
 8001132:	000a      	movs	r2, r1
 8001134:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2225      	movs	r2, #37	; 0x25
 800113a:	2101      	movs	r1, #1
 800113c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2224      	movs	r2, #36	; 0x24
 8001142:	2100      	movs	r1, #0
 8001144:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800114a:	2b00      	cmp	r3, #0
 800114c:	d004      	beq.n	8001158 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	0010      	movs	r0, r2
 8001156:	4798      	blx	r3
    }
  }
  return status;
 8001158:	230f      	movs	r3, #15
 800115a:	18fb      	adds	r3, r7, r3
 800115c:	781b      	ldrb	r3, [r3, #0]
}
 800115e:	0018      	movs	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	b004      	add	sp, #16
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b084      	sub	sp, #16
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	221c      	movs	r2, #28
 8001184:	4013      	ands	r3, r2
 8001186:	2204      	movs	r2, #4
 8001188:	409a      	lsls	r2, r3
 800118a:	0013      	movs	r3, r2
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	4013      	ands	r3, r2
 8001190:	d026      	beq.n	80011e0 <HAL_DMA_IRQHandler+0x7a>
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	2204      	movs	r2, #4
 8001196:	4013      	ands	r3, r2
 8001198:	d022      	beq.n	80011e0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2220      	movs	r2, #32
 80011a2:	4013      	ands	r3, r2
 80011a4:	d107      	bne.n	80011b6 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2104      	movs	r1, #4
 80011b2:	438a      	bics	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	221c      	movs	r2, #28
 80011bc:	401a      	ands	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	2104      	movs	r1, #4
 80011c4:	4091      	lsls	r1, r2
 80011c6:	000a      	movs	r2, r1
 80011c8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d100      	bne.n	80011d4 <HAL_DMA_IRQHandler+0x6e>
 80011d2:	e071      	b.n	80012b8 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	0010      	movs	r0, r2
 80011dc:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80011de:	e06b      	b.n	80012b8 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e4:	221c      	movs	r2, #28
 80011e6:	4013      	ands	r3, r2
 80011e8:	2202      	movs	r2, #2
 80011ea:	409a      	lsls	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	4013      	ands	r3, r2
 80011f2:	d02d      	beq.n	8001250 <HAL_DMA_IRQHandler+0xea>
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	2202      	movs	r2, #2
 80011f8:	4013      	ands	r3, r2
 80011fa:	d029      	beq.n	8001250 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2220      	movs	r2, #32
 8001204:	4013      	ands	r3, r2
 8001206:	d10b      	bne.n	8001220 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	210a      	movs	r1, #10
 8001214:	438a      	bics	r2, r1
 8001216:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2225      	movs	r2, #37	; 0x25
 800121c:	2101      	movs	r1, #1
 800121e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001224:	221c      	movs	r2, #28
 8001226:	401a      	ands	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	2102      	movs	r1, #2
 800122e:	4091      	lsls	r1, r2
 8001230:	000a      	movs	r2, r1
 8001232:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2224      	movs	r2, #36	; 0x24
 8001238:	2100      	movs	r1, #0
 800123a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001240:	2b00      	cmp	r3, #0
 8001242:	d039      	beq.n	80012b8 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	0010      	movs	r0, r2
 800124c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800124e:	e033      	b.n	80012b8 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001254:	221c      	movs	r2, #28
 8001256:	4013      	ands	r3, r2
 8001258:	2208      	movs	r2, #8
 800125a:	409a      	lsls	r2, r3
 800125c:	0013      	movs	r3, r2
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	4013      	ands	r3, r2
 8001262:	d02a      	beq.n	80012ba <HAL_DMA_IRQHandler+0x154>
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	2208      	movs	r2, #8
 8001268:	4013      	ands	r3, r2
 800126a:	d026      	beq.n	80012ba <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	210e      	movs	r1, #14
 8001278:	438a      	bics	r2, r1
 800127a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001280:	221c      	movs	r2, #28
 8001282:	401a      	ands	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	2101      	movs	r1, #1
 800128a:	4091      	lsls	r1, r2
 800128c:	000a      	movs	r2, r1
 800128e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2225      	movs	r2, #37	; 0x25
 800129a:	2101      	movs	r1, #1
 800129c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2224      	movs	r2, #36	; 0x24
 80012a2:	2100      	movs	r1, #0
 80012a4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	0010      	movs	r0, r2
 80012b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012b8:	46c0      	nop			; (mov r8, r8)
 80012ba:	46c0      	nop			; (mov r8, r8)
}
 80012bc:	46bd      	mov	sp, r7
 80012be:	b004      	add	sp, #16
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b084      	sub	sp, #16
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d4:	221c      	movs	r2, #28
 80012d6:	401a      	ands	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	2101      	movs	r1, #1
 80012de:	4091      	lsls	r1, r2
 80012e0:	000a      	movs	r2, r1
 80012e2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2b10      	cmp	r3, #16
 80012f2:	d108      	bne.n	8001306 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001304:	e007      	b.n	8001316 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	60da      	str	r2, [r3, #12]
}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b004      	add	sp, #16
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001336:	e14f      	b.n	80015d8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2101      	movs	r1, #1
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	4091      	lsls	r1, r2
 8001342:	000a      	movs	r2, r1
 8001344:	4013      	ands	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d100      	bne.n	8001350 <HAL_GPIO_Init+0x30>
 800134e:	e140      	b.n	80015d2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2203      	movs	r2, #3
 8001356:	4013      	ands	r3, r2
 8001358:	2b01      	cmp	r3, #1
 800135a:	d005      	beq.n	8001368 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2203      	movs	r2, #3
 8001362:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001364:	2b02      	cmp	r3, #2
 8001366:	d130      	bne.n	80013ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	2203      	movs	r2, #3
 8001374:	409a      	lsls	r2, r3
 8001376:	0013      	movs	r3, r2
 8001378:	43da      	mvns	r2, r3
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	409a      	lsls	r2, r3
 800138a:	0013      	movs	r3, r2
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800139e:	2201      	movs	r2, #1
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
 80013a4:	0013      	movs	r3, r2
 80013a6:	43da      	mvns	r2, r3
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	091b      	lsrs	r3, r3, #4
 80013b4:	2201      	movs	r2, #1
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
 80013bc:	0013      	movs	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2203      	movs	r2, #3
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	d017      	beq.n	8001406 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2203      	movs	r2, #3
 80013e2:	409a      	lsls	r2, r3
 80013e4:	0013      	movs	r3, r2
 80013e6:	43da      	mvns	r2, r3
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	409a      	lsls	r2, r3
 80013f8:	0013      	movs	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2203      	movs	r2, #3
 800140c:	4013      	ands	r3, r2
 800140e:	2b02      	cmp	r3, #2
 8001410:	d123      	bne.n	800145a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	08da      	lsrs	r2, r3, #3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3208      	adds	r2, #8
 800141a:	0092      	lsls	r2, r2, #2
 800141c:	58d3      	ldr	r3, [r2, r3]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2207      	movs	r2, #7
 8001424:	4013      	ands	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	220f      	movs	r2, #15
 800142a:	409a      	lsls	r2, r3
 800142c:	0013      	movs	r3, r2
 800142e:	43da      	mvns	r2, r3
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	691a      	ldr	r2, [r3, #16]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	2107      	movs	r1, #7
 800143e:	400b      	ands	r3, r1
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	409a      	lsls	r2, r3
 8001444:	0013      	movs	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	08da      	lsrs	r2, r3, #3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3208      	adds	r2, #8
 8001454:	0092      	lsls	r2, r2, #2
 8001456:	6939      	ldr	r1, [r7, #16]
 8001458:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2203      	movs	r2, #3
 8001466:	409a      	lsls	r2, r3
 8001468:	0013      	movs	r3, r2
 800146a:	43da      	mvns	r2, r3
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2203      	movs	r2, #3
 8001478:	401a      	ands	r2, r3
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	409a      	lsls	r2, r3
 8001480:	0013      	movs	r3, r2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	23c0      	movs	r3, #192	; 0xc0
 8001494:	029b      	lsls	r3, r3, #10
 8001496:	4013      	ands	r3, r2
 8001498:	d100      	bne.n	800149c <HAL_GPIO_Init+0x17c>
 800149a:	e09a      	b.n	80015d2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149c:	4b54      	ldr	r3, [pc, #336]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 800149e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014a0:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 80014a2:	2101      	movs	r1, #1
 80014a4:	430a      	orrs	r2, r1
 80014a6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80014a8:	4a52      	ldr	r2, [pc, #328]	; (80015f4 <HAL_GPIO_Init+0x2d4>)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	089b      	lsrs	r3, r3, #2
 80014ae:	3302      	adds	r3, #2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	589b      	ldr	r3, [r3, r2]
 80014b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	2203      	movs	r2, #3
 80014ba:	4013      	ands	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	220f      	movs	r2, #15
 80014c0:	409a      	lsls	r2, r3
 80014c2:	0013      	movs	r3, r2
 80014c4:	43da      	mvns	r2, r3
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	23a0      	movs	r3, #160	; 0xa0
 80014d0:	05db      	lsls	r3, r3, #23
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d019      	beq.n	800150a <HAL_GPIO_Init+0x1ea>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a47      	ldr	r2, [pc, #284]	; (80015f8 <HAL_GPIO_Init+0x2d8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_GPIO_Init+0x1e6>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a46      	ldr	r2, [pc, #280]	; (80015fc <HAL_GPIO_Init+0x2dc>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d00d      	beq.n	8001502 <HAL_GPIO_Init+0x1e2>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a45      	ldr	r2, [pc, #276]	; (8001600 <HAL_GPIO_Init+0x2e0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d007      	beq.n	80014fe <HAL_GPIO_Init+0x1de>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a44      	ldr	r2, [pc, #272]	; (8001604 <HAL_GPIO_Init+0x2e4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_GPIO_Init+0x1da>
 80014f6:	2305      	movs	r3, #5
 80014f8:	e008      	b.n	800150c <HAL_GPIO_Init+0x1ec>
 80014fa:	2306      	movs	r3, #6
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x1ec>
 80014fe:	2303      	movs	r3, #3
 8001500:	e004      	b.n	800150c <HAL_GPIO_Init+0x1ec>
 8001502:	2302      	movs	r3, #2
 8001504:	e002      	b.n	800150c <HAL_GPIO_Init+0x1ec>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_GPIO_Init+0x1ec>
 800150a:	2300      	movs	r3, #0
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	2103      	movs	r1, #3
 8001510:	400a      	ands	r2, r1
 8001512:	0092      	lsls	r2, r2, #2
 8001514:	4093      	lsls	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800151c:	4935      	ldr	r1, [pc, #212]	; (80015f4 <HAL_GPIO_Init+0x2d4>)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	3302      	adds	r3, #2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800152a:	4b37      	ldr	r3, [pc, #220]	; (8001608 <HAL_GPIO_Init+0x2e8>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	43da      	mvns	r2, r3
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	035b      	lsls	r3, r3, #13
 8001542:	4013      	ands	r3, r2
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800154e:	4b2e      	ldr	r3, [pc, #184]	; (8001608 <HAL_GPIO_Init+0x2e8>)
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001554:	4b2c      	ldr	r3, [pc, #176]	; (8001608 <HAL_GPIO_Init+0x2e8>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	43da      	mvns	r2, r3
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	039b      	lsls	r3, r3, #14
 800156c:	4013      	ands	r3, r2
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <HAL_GPIO_Init+0x2e8>)
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_GPIO_Init+0x2e8>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	43da      	mvns	r2, r3
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	029b      	lsls	r3, r3, #10
 8001596:	4013      	ands	r3, r2
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_GPIO_Init+0x2e8>)
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <HAL_GPIO_Init+0x2e8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	43da      	mvns	r2, r3
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	025b      	lsls	r3, r3, #9
 80015c0:	4013      	ands	r3, r2
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015cc:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <HAL_GPIO_Init+0x2e8>)
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	40da      	lsrs	r2, r3
 80015e0:	1e13      	subs	r3, r2, #0
 80015e2:	d000      	beq.n	80015e6 <HAL_GPIO_Init+0x2c6>
 80015e4:	e6a8      	b.n	8001338 <HAL_GPIO_Init+0x18>
  }
}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	46c0      	nop			; (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b006      	add	sp, #24
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010000 	.word	0x40010000
 80015f8:	50000400 	.word	0x50000400
 80015fc:	50000800 	.word	0x50000800
 8001600:	50000c00 	.word	0x50000c00
 8001604:	50001c00 	.word	0x50001c00
 8001608:	40010400 	.word	0x40010400

0800160c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800160c:	b5b0      	push	{r4, r5, r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d102      	bne.n	8001620 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	f000 fbaf 	bl	8001d7e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001620:	4bcf      	ldr	r3, [pc, #828]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	220c      	movs	r2, #12
 8001626:	4013      	ands	r3, r2
 8001628:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800162a:	4bcd      	ldr	r3, [pc, #820]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	025b      	lsls	r3, r3, #9
 8001632:	4013      	ands	r3, r2
 8001634:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2201      	movs	r2, #1
 800163c:	4013      	ands	r3, r2
 800163e:	d100      	bne.n	8001642 <HAL_RCC_OscConfig+0x36>
 8001640:	e07e      	b.n	8001740 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	2b08      	cmp	r3, #8
 8001646:	d007      	beq.n	8001658 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001648:	6a3b      	ldr	r3, [r7, #32]
 800164a:	2b0c      	cmp	r3, #12
 800164c:	d112      	bne.n	8001674 <HAL_RCC_OscConfig+0x68>
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	025b      	lsls	r3, r3, #9
 8001654:	429a      	cmp	r2, r3
 8001656:	d10d      	bne.n	8001674 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	4bc1      	ldr	r3, [pc, #772]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	029b      	lsls	r3, r3, #10
 8001660:	4013      	ands	r3, r2
 8001662:	d100      	bne.n	8001666 <HAL_RCC_OscConfig+0x5a>
 8001664:	e06b      	b.n	800173e <HAL_RCC_OscConfig+0x132>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d167      	bne.n	800173e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	f000 fb85 	bl	8001d7e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	025b      	lsls	r3, r3, #9
 800167c:	429a      	cmp	r2, r3
 800167e:	d107      	bne.n	8001690 <HAL_RCC_OscConfig+0x84>
 8001680:	4bb7      	ldr	r3, [pc, #732]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4bb6      	ldr	r3, [pc, #728]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 8001686:	2180      	movs	r1, #128	; 0x80
 8001688:	0249      	lsls	r1, r1, #9
 800168a:	430a      	orrs	r2, r1
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e027      	b.n	80016e0 <HAL_RCC_OscConfig+0xd4>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	23a0      	movs	r3, #160	; 0xa0
 8001696:	02db      	lsls	r3, r3, #11
 8001698:	429a      	cmp	r2, r3
 800169a:	d10e      	bne.n	80016ba <HAL_RCC_OscConfig+0xae>
 800169c:	4bb0      	ldr	r3, [pc, #704]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4baf      	ldr	r3, [pc, #700]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 80016a2:	2180      	movs	r1, #128	; 0x80
 80016a4:	02c9      	lsls	r1, r1, #11
 80016a6:	430a      	orrs	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	4bad      	ldr	r3, [pc, #692]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4bac      	ldr	r3, [pc, #688]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 80016b0:	2180      	movs	r1, #128	; 0x80
 80016b2:	0249      	lsls	r1, r1, #9
 80016b4:	430a      	orrs	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e012      	b.n	80016e0 <HAL_RCC_OscConfig+0xd4>
 80016ba:	4ba9      	ldr	r3, [pc, #676]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4ba8      	ldr	r3, [pc, #672]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 80016c0:	49a8      	ldr	r1, [pc, #672]	; (8001964 <HAL_RCC_OscConfig+0x358>)
 80016c2:	400a      	ands	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	4ba6      	ldr	r3, [pc, #664]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	025b      	lsls	r3, r3, #9
 80016ce:	4013      	ands	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4ba2      	ldr	r3, [pc, #648]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4ba1      	ldr	r3, [pc, #644]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 80016da:	49a3      	ldr	r1, [pc, #652]	; (8001968 <HAL_RCC_OscConfig+0x35c>)
 80016dc:	400a      	ands	r2, r1
 80016de:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d015      	beq.n	8001714 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff faf0 	bl	8000ccc <HAL_GetTick>
 80016ec:	0003      	movs	r3, r0
 80016ee:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016f0:	e009      	b.n	8001706 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f2:	f7ff faeb 	bl	8000ccc <HAL_GetTick>
 80016f6:	0002      	movs	r2, r0
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b64      	cmp	r3, #100	; 0x64
 80016fe:	d902      	bls.n	8001706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	f000 fb3c 	bl	8001d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001706:	4b96      	ldr	r3, [pc, #600]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	029b      	lsls	r3, r3, #10
 800170e:	4013      	ands	r3, r2
 8001710:	d0ef      	beq.n	80016f2 <HAL_RCC_OscConfig+0xe6>
 8001712:	e015      	b.n	8001740 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fada 	bl	8000ccc <HAL_GetTick>
 8001718:	0003      	movs	r3, r0
 800171a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800171e:	f7ff fad5 	bl	8000ccc <HAL_GetTick>
 8001722:	0002      	movs	r2, r0
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b64      	cmp	r3, #100	; 0x64
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e326      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001730:	4b8b      	ldr	r3, [pc, #556]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	029b      	lsls	r3, r3, #10
 8001738:	4013      	ands	r3, r2
 800173a:	d1f0      	bne.n	800171e <HAL_RCC_OscConfig+0x112>
 800173c:	e000      	b.n	8001740 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2202      	movs	r2, #2
 8001746:	4013      	ands	r3, r2
 8001748:	d100      	bne.n	800174c <HAL_RCC_OscConfig+0x140>
 800174a:	e08b      	b.n	8001864 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	2b04      	cmp	r3, #4
 8001756:	d005      	beq.n	8001764 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	2b0c      	cmp	r3, #12
 800175c:	d13e      	bne.n	80017dc <HAL_RCC_OscConfig+0x1d0>
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d13b      	bne.n	80017dc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001764:	4b7e      	ldr	r3, [pc, #504]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2204      	movs	r2, #4
 800176a:	4013      	ands	r3, r2
 800176c:	d004      	beq.n	8001778 <HAL_RCC_OscConfig+0x16c>
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e302      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001778:	4b79      	ldr	r3, [pc, #484]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4a7b      	ldr	r2, [pc, #492]	; (800196c <HAL_RCC_OscConfig+0x360>)
 800177e:	4013      	ands	r3, r2
 8001780:	0019      	movs	r1, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	021a      	lsls	r2, r3, #8
 8001788:	4b75      	ldr	r3, [pc, #468]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 800178a:	430a      	orrs	r2, r1
 800178c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800178e:	4b74      	ldr	r3, [pc, #464]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2209      	movs	r2, #9
 8001794:	4393      	bics	r3, r2
 8001796:	0019      	movs	r1, r3
 8001798:	4b71      	ldr	r3, [pc, #452]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	430a      	orrs	r2, r1
 800179e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017a0:	f000 fc40 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 80017a4:	0001      	movs	r1, r0
 80017a6:	4b6e      	ldr	r3, [pc, #440]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	220f      	movs	r2, #15
 80017ae:	4013      	ands	r3, r2
 80017b0:	4a6f      	ldr	r2, [pc, #444]	; (8001970 <HAL_RCC_OscConfig+0x364>)
 80017b2:	5cd3      	ldrb	r3, [r2, r3]
 80017b4:	000a      	movs	r2, r1
 80017b6:	40da      	lsrs	r2, r3
 80017b8:	4b6e      	ldr	r3, [pc, #440]	; (8001974 <HAL_RCC_OscConfig+0x368>)
 80017ba:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80017bc:	4b6e      	ldr	r3, [pc, #440]	; (8001978 <HAL_RCC_OscConfig+0x36c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2513      	movs	r5, #19
 80017c2:	197c      	adds	r4, r7, r5
 80017c4:	0018      	movs	r0, r3
 80017c6:	f7ff fa3b 	bl	8000c40 <HAL_InitTick>
 80017ca:	0003      	movs	r3, r0
 80017cc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80017ce:	197b      	adds	r3, r7, r5
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d046      	beq.n	8001864 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80017d6:	197b      	adds	r3, r7, r5
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	e2d0      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d027      	beq.n	8001832 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017e2:	4b5f      	ldr	r3, [pc, #380]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2209      	movs	r2, #9
 80017e8:	4393      	bics	r3, r2
 80017ea:	0019      	movs	r1, r3
 80017ec:	4b5c      	ldr	r3, [pc, #368]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fa6a 	bl	8000ccc <HAL_GetTick>
 80017f8:	0003      	movs	r3, r0
 80017fa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fe:	f7ff fa65 	bl	8000ccc <HAL_GetTick>
 8001802:	0002      	movs	r2, r0
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e2b6      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001810:	4b53      	ldr	r3, [pc, #332]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2204      	movs	r2, #4
 8001816:	4013      	ands	r3, r2
 8001818:	d0f1      	beq.n	80017fe <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181a:	4b51      	ldr	r3, [pc, #324]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4a53      	ldr	r2, [pc, #332]	; (800196c <HAL_RCC_OscConfig+0x360>)
 8001820:	4013      	ands	r3, r2
 8001822:	0019      	movs	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	021a      	lsls	r2, r3, #8
 800182a:	4b4d      	ldr	r3, [pc, #308]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 800182c:	430a      	orrs	r2, r1
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	e018      	b.n	8001864 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001832:	4b4b      	ldr	r3, [pc, #300]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 8001838:	2101      	movs	r1, #1
 800183a:	438a      	bics	r2, r1
 800183c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7ff fa45 	bl	8000ccc <HAL_GetTick>
 8001842:	0003      	movs	r3, r0
 8001844:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001848:	f7ff fa40 	bl	8000ccc <HAL_GetTick>
 800184c:	0002      	movs	r2, r0
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e291      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800185a:	4b41      	ldr	r3, [pc, #260]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2204      	movs	r2, #4
 8001860:	4013      	ands	r3, r2
 8001862:	d1f1      	bne.n	8001848 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2210      	movs	r2, #16
 800186a:	4013      	ands	r3, r2
 800186c:	d100      	bne.n	8001870 <HAL_RCC_OscConfig+0x264>
 800186e:	e0a1      	b.n	80019b4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d140      	bne.n	80018f8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001876:	4b3a      	ldr	r3, [pc, #232]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4013      	ands	r3, r2
 8001880:	d005      	beq.n	800188e <HAL_RCC_OscConfig+0x282>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e277      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800188e:	4b34      	ldr	r3, [pc, #208]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4a3a      	ldr	r2, [pc, #232]	; (800197c <HAL_RCC_OscConfig+0x370>)
 8001894:	4013      	ands	r3, r2
 8001896:	0019      	movs	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800189c:	4b30      	ldr	r3, [pc, #192]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 800189e:	430a      	orrs	r2, r1
 80018a0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018a2:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	0a19      	lsrs	r1, r3, #8
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	061a      	lsls	r2, r3, #24
 80018b0:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 80018b2:	430a      	orrs	r2, r1
 80018b4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	0b5b      	lsrs	r3, r3, #13
 80018bc:	3301      	adds	r3, #1
 80018be:	2280      	movs	r2, #128	; 0x80
 80018c0:	0212      	lsls	r2, r2, #8
 80018c2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80018c4:	4b26      	ldr	r3, [pc, #152]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	210f      	movs	r1, #15
 80018cc:	400b      	ands	r3, r1
 80018ce:	4928      	ldr	r1, [pc, #160]	; (8001970 <HAL_RCC_OscConfig+0x364>)
 80018d0:	5ccb      	ldrb	r3, [r1, r3]
 80018d2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018d4:	4b27      	ldr	r3, [pc, #156]	; (8001974 <HAL_RCC_OscConfig+0x368>)
 80018d6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80018d8:	4b27      	ldr	r3, [pc, #156]	; (8001978 <HAL_RCC_OscConfig+0x36c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2513      	movs	r5, #19
 80018de:	197c      	adds	r4, r7, r5
 80018e0:	0018      	movs	r0, r3
 80018e2:	f7ff f9ad 	bl	8000c40 <HAL_InitTick>
 80018e6:	0003      	movs	r3, r0
 80018e8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80018ea:	197b      	adds	r3, r7, r5
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d060      	beq.n	80019b4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80018f2:	197b      	adds	r3, r7, r5
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	e242      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d03f      	beq.n	8001980 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	0049      	lsls	r1, r1, #1
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff f9dd 	bl	8000ccc <HAL_GetTick>
 8001912:	0003      	movs	r3, r0
 8001914:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001918:	f7ff f9d8 	bl	8000ccc <HAL_GetTick>
 800191c:	0002      	movs	r2, r0
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e229      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4013      	ands	r3, r2
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4a10      	ldr	r2, [pc, #64]	; (800197c <HAL_RCC_OscConfig+0x370>)
 800193c:	4013      	ands	r3, r2
 800193e:	0019      	movs	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 8001946:	430a      	orrs	r2, r1
 8001948:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800194a:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	0a19      	lsrs	r1, r3, #8
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	061a      	lsls	r2, r3, #24
 8001958:	4b01      	ldr	r3, [pc, #4]	; (8001960 <HAL_RCC_OscConfig+0x354>)
 800195a:	430a      	orrs	r2, r1
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	e029      	b.n	80019b4 <HAL_RCC_OscConfig+0x3a8>
 8001960:	40021000 	.word	0x40021000
 8001964:	fffeffff 	.word	0xfffeffff
 8001968:	fffbffff 	.word	0xfffbffff
 800196c:	ffffe0ff 	.word	0xffffe0ff
 8001970:	080052e0 	.word	0x080052e0
 8001974:	20000008 	.word	0x20000008
 8001978:	2000000c 	.word	0x2000000c
 800197c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001980:	4bbd      	ldr	r3, [pc, #756]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4bbc      	ldr	r3, [pc, #752]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001986:	49bd      	ldr	r1, [pc, #756]	; (8001c7c <HAL_RCC_OscConfig+0x670>)
 8001988:	400a      	ands	r2, r1
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff f99e 	bl	8000ccc <HAL_GetTick>
 8001990:	0003      	movs	r3, r0
 8001992:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001996:	f7ff f999 	bl	8000ccc <HAL_GetTick>
 800199a:	0002      	movs	r2, r0
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e1ea      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019a8:	4bb3      	ldr	r3, [pc, #716]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4013      	ands	r3, r2
 80019b2:	d1f0      	bne.n	8001996 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2208      	movs	r2, #8
 80019ba:	4013      	ands	r3, r2
 80019bc:	d036      	beq.n	8001a2c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d019      	beq.n	80019fa <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c6:	4bac      	ldr	r3, [pc, #688]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 80019c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ca:	4bab      	ldr	r3, [pc, #684]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 80019cc:	2101      	movs	r1, #1
 80019ce:	430a      	orrs	r2, r1
 80019d0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d2:	f7ff f97b 	bl	8000ccc <HAL_GetTick>
 80019d6:	0003      	movs	r3, r0
 80019d8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019dc:	f7ff f976 	bl	8000ccc <HAL_GetTick>
 80019e0:	0002      	movs	r2, r0
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e1c7      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019ee:	4ba2      	ldr	r3, [pc, #648]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 80019f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019f2:	2202      	movs	r2, #2
 80019f4:	4013      	ands	r3, r2
 80019f6:	d0f1      	beq.n	80019dc <HAL_RCC_OscConfig+0x3d0>
 80019f8:	e018      	b.n	8001a2c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fa:	4b9f      	ldr	r3, [pc, #636]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 80019fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019fe:	4b9e      	ldr	r3, [pc, #632]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001a00:	2101      	movs	r1, #1
 8001a02:	438a      	bics	r2, r1
 8001a04:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a06:	f7ff f961 	bl	8000ccc <HAL_GetTick>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a10:	f7ff f95c 	bl	8000ccc <HAL_GetTick>
 8001a14:	0002      	movs	r2, r0
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e1ad      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a22:	4b95      	ldr	r3, [pc, #596]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a26:	2202      	movs	r2, #2
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d1f1      	bne.n	8001a10 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2204      	movs	r2, #4
 8001a32:	4013      	ands	r3, r2
 8001a34:	d100      	bne.n	8001a38 <HAL_RCC_OscConfig+0x42c>
 8001a36:	e0ae      	b.n	8001b96 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a38:	2027      	movs	r0, #39	; 0x27
 8001a3a:	183b      	adds	r3, r7, r0
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a40:	4b8d      	ldr	r3, [pc, #564]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	055b      	lsls	r3, r3, #21
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d109      	bne.n	8001a60 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4c:	4b8a      	ldr	r3, [pc, #552]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a50:	4b89      	ldr	r3, [pc, #548]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001a52:	2180      	movs	r1, #128	; 0x80
 8001a54:	0549      	lsls	r1, r1, #21
 8001a56:	430a      	orrs	r2, r1
 8001a58:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001a5a:	183b      	adds	r3, r7, r0
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	4b87      	ldr	r3, [pc, #540]	; (8001c80 <HAL_RCC_OscConfig+0x674>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d11a      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a6c:	4b84      	ldr	r3, [pc, #528]	; (8001c80 <HAL_RCC_OscConfig+0x674>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b83      	ldr	r3, [pc, #524]	; (8001c80 <HAL_RCC_OscConfig+0x674>)
 8001a72:	2180      	movs	r1, #128	; 0x80
 8001a74:	0049      	lsls	r1, r1, #1
 8001a76:	430a      	orrs	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff f927 	bl	8000ccc <HAL_GetTick>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a84:	f7ff f922 	bl	8000ccc <HAL_GetTick>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	; 0x64
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e173      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a96:	4b7a      	ldr	r3, [pc, #488]	; (8001c80 <HAL_RCC_OscConfig+0x674>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_OscConfig+0x4b2>
 8001aae:	4b72      	ldr	r3, [pc, #456]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001ab0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ab2:	4b71      	ldr	r3, [pc, #452]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001ab4:	2180      	movs	r1, #128	; 0x80
 8001ab6:	0049      	lsls	r1, r1, #1
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	651a      	str	r2, [r3, #80]	; 0x50
 8001abc:	e031      	b.n	8001b22 <HAL_RCC_OscConfig+0x516>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x4d4>
 8001ac6:	4b6c      	ldr	r3, [pc, #432]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001ac8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aca:	4b6b      	ldr	r3, [pc, #428]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001acc:	496b      	ldr	r1, [pc, #428]	; (8001c7c <HAL_RCC_OscConfig+0x670>)
 8001ace:	400a      	ands	r2, r1
 8001ad0:	651a      	str	r2, [r3, #80]	; 0x50
 8001ad2:	4b69      	ldr	r3, [pc, #420]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001ad4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ad6:	4b68      	ldr	r3, [pc, #416]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001ad8:	496a      	ldr	r1, [pc, #424]	; (8001c84 <HAL_RCC_OscConfig+0x678>)
 8001ada:	400a      	ands	r2, r1
 8001adc:	651a      	str	r2, [r3, #80]	; 0x50
 8001ade:	e020      	b.n	8001b22 <HAL_RCC_OscConfig+0x516>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	23a0      	movs	r3, #160	; 0xa0
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d10e      	bne.n	8001b0a <HAL_RCC_OscConfig+0x4fe>
 8001aec:	4b62      	ldr	r3, [pc, #392]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001aee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001af0:	4b61      	ldr	r3, [pc, #388]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001af2:	2180      	movs	r1, #128	; 0x80
 8001af4:	00c9      	lsls	r1, r1, #3
 8001af6:	430a      	orrs	r2, r1
 8001af8:	651a      	str	r2, [r3, #80]	; 0x50
 8001afa:	4b5f      	ldr	r3, [pc, #380]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001afc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001afe:	4b5e      	ldr	r3, [pc, #376]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001b00:	2180      	movs	r1, #128	; 0x80
 8001b02:	0049      	lsls	r1, r1, #1
 8001b04:	430a      	orrs	r2, r1
 8001b06:	651a      	str	r2, [r3, #80]	; 0x50
 8001b08:	e00b      	b.n	8001b22 <HAL_RCC_OscConfig+0x516>
 8001b0a:	4b5b      	ldr	r3, [pc, #364]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b0e:	4b5a      	ldr	r3, [pc, #360]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001b10:	495a      	ldr	r1, [pc, #360]	; (8001c7c <HAL_RCC_OscConfig+0x670>)
 8001b12:	400a      	ands	r2, r1
 8001b14:	651a      	str	r2, [r3, #80]	; 0x50
 8001b16:	4b58      	ldr	r3, [pc, #352]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001b18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b1a:	4b57      	ldr	r3, [pc, #348]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001b1c:	4959      	ldr	r1, [pc, #356]	; (8001c84 <HAL_RCC_OscConfig+0x678>)
 8001b1e:	400a      	ands	r2, r1
 8001b20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d015      	beq.n	8001b56 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff f8cf 	bl	8000ccc <HAL_GetTick>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b32:	e009      	b.n	8001b48 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b34:	f7ff f8ca 	bl	8000ccc <HAL_GetTick>
 8001b38:	0002      	movs	r2, r0
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	4a52      	ldr	r2, [pc, #328]	; (8001c88 <HAL_RCC_OscConfig+0x67c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e11a      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b48:	4b4b      	ldr	r3, [pc, #300]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001b4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4013      	ands	r3, r2
 8001b52:	d0ef      	beq.n	8001b34 <HAL_RCC_OscConfig+0x528>
 8001b54:	e014      	b.n	8001b80 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b56:	f7ff f8b9 	bl	8000ccc <HAL_GetTick>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b5e:	e009      	b.n	8001b74 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b60:	f7ff f8b4 	bl	8000ccc <HAL_GetTick>
 8001b64:	0002      	movs	r2, r0
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	4a47      	ldr	r2, [pc, #284]	; (8001c88 <HAL_RCC_OscConfig+0x67c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e104      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b74:	4b40      	ldr	r3, [pc, #256]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001b76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d1ef      	bne.n	8001b60 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b80:	2327      	movs	r3, #39	; 0x27
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d105      	bne.n	8001b96 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b8e:	4b3a      	ldr	r3, [pc, #232]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001b90:	493e      	ldr	r1, [pc, #248]	; (8001c8c <HAL_RCC_OscConfig+0x680>)
 8001b92:	400a      	ands	r2, r1
 8001b94:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d049      	beq.n	8001c34 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d026      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001ba8:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	4b32      	ldr	r3, [pc, #200]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001bae:	2101      	movs	r1, #1
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bb8:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001bba:	2101      	movs	r1, #1
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc0:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <HAL_RCC_OscConfig+0x684>)
 8001bc2:	6a1a      	ldr	r2, [r3, #32]
 8001bc4:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <HAL_RCC_OscConfig+0x684>)
 8001bc6:	2180      	movs	r1, #128	; 0x80
 8001bc8:	0189      	lsls	r1, r1, #6
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7ff f87d 	bl	8000ccc <HAL_GetTick>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bd8:	f7ff f878 	bl	8000ccc <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e0c9      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bea:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d0f1      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x5cc>
 8001bf4:	e01e      	b.n	8001c34 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	438a      	bics	r2, r1
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <HAL_RCC_OscConfig+0x684>)
 8001c04:	6a1a      	ldr	r2, [r3, #32]
 8001c06:	4b22      	ldr	r3, [pc, #136]	; (8001c90 <HAL_RCC_OscConfig+0x684>)
 8001c08:	4922      	ldr	r1, [pc, #136]	; (8001c94 <HAL_RCC_OscConfig+0x688>)
 8001c0a:	400a      	ands	r2, r1
 8001c0c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0e:	f7ff f85d 	bl	8000ccc <HAL_GetTick>
 8001c12:	0003      	movs	r3, r0
 8001c14:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c18:	f7ff f858 	bl	8000ccc <HAL_GetTick>
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e0a9      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	4013      	ands	r3, r2
 8001c32:	d1f1      	bne.n	8001c18 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d100      	bne.n	8001c3e <HAL_RCC_OscConfig+0x632>
 8001c3c:	e09e      	b.n	8001d7c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	2b0c      	cmp	r3, #12
 8001c42:	d100      	bne.n	8001c46 <HAL_RCC_OscConfig+0x63a>
 8001c44:	e077      	b.n	8001d36 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d158      	bne.n	8001d00 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_OscConfig+0x66c>)
 8001c54:	4910      	ldr	r1, [pc, #64]	; (8001c98 <HAL_RCC_OscConfig+0x68c>)
 8001c56:	400a      	ands	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff f837 	bl	8000ccc <HAL_GetTick>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c62:	e01b      	b.n	8001c9c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c64:	f7ff f832 	bl	8000ccc <HAL_GetTick>
 8001c68:	0002      	movs	r2, r0
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d914      	bls.n	8001c9c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e083      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	fffffeff 	.word	0xfffffeff
 8001c80:	40007000 	.word	0x40007000
 8001c84:	fffffbff 	.word	0xfffffbff
 8001c88:	00001388 	.word	0x00001388
 8001c8c:	efffffff 	.word	0xefffffff
 8001c90:	40010000 	.word	0x40010000
 8001c94:	ffffdfff 	.word	0xffffdfff
 8001c98:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c9c:	4b3a      	ldr	r3, [pc, #232]	; (8001d88 <HAL_RCC_OscConfig+0x77c>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	049b      	lsls	r3, r3, #18
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d1dd      	bne.n	8001c64 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca8:	4b37      	ldr	r3, [pc, #220]	; (8001d88 <HAL_RCC_OscConfig+0x77c>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	4a37      	ldr	r2, [pc, #220]	; (8001d8c <HAL_RCC_OscConfig+0x780>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	0019      	movs	r1, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <HAL_RCC_OscConfig+0x77c>)
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc8:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <HAL_RCC_OscConfig+0x77c>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <HAL_RCC_OscConfig+0x77c>)
 8001cce:	2180      	movs	r1, #128	; 0x80
 8001cd0:	0449      	lsls	r1, r1, #17
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7fe fff9 	bl	8000ccc <HAL_GetTick>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7fe fff4 	bl	8000ccc <HAL_GetTick>
 8001ce4:	0002      	movs	r2, r0
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e045      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001cf2:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <HAL_RCC_OscConfig+0x77c>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	049b      	lsls	r3, r3, #18
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x6d4>
 8001cfe:	e03d      	b.n	8001d7c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d00:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <HAL_RCC_OscConfig+0x77c>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_RCC_OscConfig+0x77c>)
 8001d06:	4922      	ldr	r1, [pc, #136]	; (8001d90 <HAL_RCC_OscConfig+0x784>)
 8001d08:	400a      	ands	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7fe ffde 	bl	8000ccc <HAL_GetTick>
 8001d10:	0003      	movs	r3, r0
 8001d12:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d16:	f7fe ffd9 	bl	8000ccc <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e02a      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d28:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <HAL_RCC_OscConfig+0x77c>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	049b      	lsls	r3, r3, #18
 8001d30:	4013      	ands	r3, r2
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x70a>
 8001d34:	e022      	b.n	8001d7c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e01d      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HAL_RCC_OscConfig+0x77c>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	025b      	lsls	r3, r3, #9
 8001d4e:	401a      	ands	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d10f      	bne.n	8001d78 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	23f0      	movs	r3, #240	; 0xf0
 8001d5c:	039b      	lsls	r3, r3, #14
 8001d5e:	401a      	ands	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d107      	bne.n	8001d78 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	23c0      	movs	r3, #192	; 0xc0
 8001d6c:	041b      	lsls	r3, r3, #16
 8001d6e:	401a      	ands	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b00a      	add	sp, #40	; 0x28
 8001d84:	bdb0      	pop	{r4, r5, r7, pc}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	ff02ffff 	.word	0xff02ffff
 8001d90:	feffffff 	.word	0xfeffffff

08001d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d94:	b5b0      	push	{r4, r5, r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e128      	b.n	8001ffa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da8:	4b96      	ldr	r3, [pc, #600]	; (8002004 <HAL_RCC_ClockConfig+0x270>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2201      	movs	r2, #1
 8001dae:	4013      	ands	r3, r2
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d91e      	bls.n	8001df4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b93      	ldr	r3, [pc, #588]	; (8002004 <HAL_RCC_ClockConfig+0x270>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4393      	bics	r3, r2
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	4b90      	ldr	r3, [pc, #576]	; (8002004 <HAL_RCC_ClockConfig+0x270>)
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dc8:	f7fe ff80 	bl	8000ccc <HAL_GetTick>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd0:	e009      	b.n	8001de6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd2:	f7fe ff7b 	bl	8000ccc <HAL_GetTick>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	4a8a      	ldr	r2, [pc, #552]	; (8002008 <HAL_RCC_ClockConfig+0x274>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e109      	b.n	8001ffa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b87      	ldr	r3, [pc, #540]	; (8002004 <HAL_RCC_ClockConfig+0x270>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2201      	movs	r2, #1
 8001dec:	4013      	ands	r3, r2
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d1ee      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfe:	4b83      	ldr	r3, [pc, #524]	; (800200c <HAL_RCC_ClockConfig+0x278>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	22f0      	movs	r2, #240	; 0xf0
 8001e04:	4393      	bics	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	4b7f      	ldr	r3, [pc, #508]	; (800200c <HAL_RCC_ClockConfig+0x278>)
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2201      	movs	r2, #1
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d100      	bne.n	8001e1e <HAL_RCC_ClockConfig+0x8a>
 8001e1c:	e089      	b.n	8001f32 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e26:	4b79      	ldr	r3, [pc, #484]	; (800200c <HAL_RCC_ClockConfig+0x278>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	029b      	lsls	r3, r3, #10
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d120      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0e1      	b.n	8001ffa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e3e:	4b73      	ldr	r3, [pc, #460]	; (800200c <HAL_RCC_ClockConfig+0x278>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	049b      	lsls	r3, r3, #18
 8001e46:	4013      	ands	r3, r2
 8001e48:	d114      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e0d5      	b.n	8001ffa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d106      	bne.n	8001e64 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e56:	4b6d      	ldr	r3, [pc, #436]	; (800200c <HAL_RCC_ClockConfig+0x278>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d109      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0ca      	b.n	8001ffa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e64:	4b69      	ldr	r3, [pc, #420]	; (800200c <HAL_RCC_ClockConfig+0x278>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0c2      	b.n	8001ffa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e74:	4b65      	ldr	r3, [pc, #404]	; (800200c <HAL_RCC_ClockConfig+0x278>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	2203      	movs	r2, #3
 8001e7a:	4393      	bics	r3, r2
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	4b62      	ldr	r3, [pc, #392]	; (800200c <HAL_RCC_ClockConfig+0x278>)
 8001e84:	430a      	orrs	r2, r1
 8001e86:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e88:	f7fe ff20 	bl	8000ccc <HAL_GetTick>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d111      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e98:	e009      	b.n	8001eae <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9a:	f7fe ff17 	bl	8000ccc <HAL_GetTick>
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	4a58      	ldr	r2, [pc, #352]	; (8002008 <HAL_RCC_ClockConfig+0x274>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e0a5      	b.n	8001ffa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eae:	4b57      	ldr	r3, [pc, #348]	; (800200c <HAL_RCC_ClockConfig+0x278>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d1ef      	bne.n	8001e9a <HAL_RCC_ClockConfig+0x106>
 8001eba:	e03a      	b.n	8001f32 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d111      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec4:	e009      	b.n	8001eda <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec6:	f7fe ff01 	bl	8000ccc <HAL_GetTick>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	4a4d      	ldr	r2, [pc, #308]	; (8002008 <HAL_RCC_ClockConfig+0x274>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e08f      	b.n	8001ffa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eda:	4b4c      	ldr	r3, [pc, #304]	; (800200c <HAL_RCC_ClockConfig+0x278>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	220c      	movs	r2, #12
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b0c      	cmp	r3, #12
 8001ee4:	d1ef      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x132>
 8001ee6:	e024      	b.n	8001f32 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d11b      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ef0:	e009      	b.n	8001f06 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef2:	f7fe feeb 	bl	8000ccc <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	4a42      	ldr	r2, [pc, #264]	; (8002008 <HAL_RCC_ClockConfig+0x274>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e079      	b.n	8001ffa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f06:	4b41      	ldr	r3, [pc, #260]	; (800200c <HAL_RCC_ClockConfig+0x278>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d1ef      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x15e>
 8001f12:	e00e      	b.n	8001f32 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f14:	f7fe feda 	bl	8000ccc <HAL_GetTick>
 8001f18:	0002      	movs	r2, r0
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	4a3a      	ldr	r2, [pc, #232]	; (8002008 <HAL_RCC_ClockConfig+0x274>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e068      	b.n	8001ffa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f28:	4b38      	ldr	r3, [pc, #224]	; (800200c <HAL_RCC_ClockConfig+0x278>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	220c      	movs	r2, #12
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f32:	4b34      	ldr	r3, [pc, #208]	; (8002004 <HAL_RCC_ClockConfig+0x270>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2201      	movs	r2, #1
 8001f38:	4013      	ands	r3, r2
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d21e      	bcs.n	8001f7e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f40:	4b30      	ldr	r3, [pc, #192]	; (8002004 <HAL_RCC_ClockConfig+0x270>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2201      	movs	r2, #1
 8001f46:	4393      	bics	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <HAL_RCC_ClockConfig+0x270>)
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f52:	f7fe febb 	bl	8000ccc <HAL_GetTick>
 8001f56:	0003      	movs	r3, r0
 8001f58:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5a:	e009      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5c:	f7fe feb6 	bl	8000ccc <HAL_GetTick>
 8001f60:	0002      	movs	r2, r0
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	4a28      	ldr	r2, [pc, #160]	; (8002008 <HAL_RCC_ClockConfig+0x274>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e044      	b.n	8001ffa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f70:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_RCC_ClockConfig+0x270>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2201      	movs	r2, #1
 8001f76:	4013      	ands	r3, r2
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d1ee      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2204      	movs	r2, #4
 8001f84:	4013      	ands	r3, r2
 8001f86:	d009      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f88:	4b20      	ldr	r3, [pc, #128]	; (800200c <HAL_RCC_ClockConfig+0x278>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4a20      	ldr	r2, [pc, #128]	; (8002010 <HAL_RCC_ClockConfig+0x27c>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	0019      	movs	r1, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	4b1d      	ldr	r3, [pc, #116]	; (800200c <HAL_RCC_ClockConfig+0x278>)
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fa6:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_RCC_ClockConfig+0x278>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	4a1a      	ldr	r2, [pc, #104]	; (8002014 <HAL_RCC_ClockConfig+0x280>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	00da      	lsls	r2, r3, #3
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_RCC_ClockConfig+0x278>)
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fbc:	f000 f832 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8001fc0:	0001      	movs	r1, r0
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_RCC_ClockConfig+0x278>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	091b      	lsrs	r3, r3, #4
 8001fc8:	220f      	movs	r2, #15
 8001fca:	4013      	ands	r3, r2
 8001fcc:	4a12      	ldr	r2, [pc, #72]	; (8002018 <HAL_RCC_ClockConfig+0x284>)
 8001fce:	5cd3      	ldrb	r3, [r2, r3]
 8001fd0:	000a      	movs	r2, r1
 8001fd2:	40da      	lsrs	r2, r3
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_RCC_ClockConfig+0x288>)
 8001fd6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_RCC_ClockConfig+0x28c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	250b      	movs	r5, #11
 8001fde:	197c      	adds	r4, r7, r5
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f7fe fe2d 	bl	8000c40 <HAL_InitTick>
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001fea:	197b      	adds	r3, r7, r5
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001ff2:	197b      	adds	r3, r7, r5
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	e000      	b.n	8001ffa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b004      	add	sp, #16
 8002000:	bdb0      	pop	{r4, r5, r7, pc}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	40022000 	.word	0x40022000
 8002008:	00001388 	.word	0x00001388
 800200c:	40021000 	.word	0x40021000
 8002010:	fffff8ff 	.word	0xfffff8ff
 8002014:	ffffc7ff 	.word	0xffffc7ff
 8002018:	080052e0 	.word	0x080052e0
 800201c:	20000008 	.word	0x20000008
 8002020:	2000000c 	.word	0x2000000c

08002024 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002024:	b5b0      	push	{r4, r5, r7, lr}
 8002026:	b08e      	sub	sp, #56	; 0x38
 8002028:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800202a:	4b4c      	ldr	r3, [pc, #304]	; (800215c <HAL_RCC_GetSysClockFreq+0x138>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002032:	230c      	movs	r3, #12
 8002034:	4013      	ands	r3, r2
 8002036:	2b0c      	cmp	r3, #12
 8002038:	d014      	beq.n	8002064 <HAL_RCC_GetSysClockFreq+0x40>
 800203a:	d900      	bls.n	800203e <HAL_RCC_GetSysClockFreq+0x1a>
 800203c:	e07b      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x112>
 800203e:	2b04      	cmp	r3, #4
 8002040:	d002      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0x24>
 8002042:	2b08      	cmp	r3, #8
 8002044:	d00b      	beq.n	800205e <HAL_RCC_GetSysClockFreq+0x3a>
 8002046:	e076      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002048:	4b44      	ldr	r3, [pc, #272]	; (800215c <HAL_RCC_GetSysClockFreq+0x138>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2210      	movs	r2, #16
 800204e:	4013      	ands	r3, r2
 8002050:	d002      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002052:	4b43      	ldr	r3, [pc, #268]	; (8002160 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002054:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002056:	e07c      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002058:	4b42      	ldr	r3, [pc, #264]	; (8002164 <HAL_RCC_GetSysClockFreq+0x140>)
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800205c:	e079      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800205e:	4b42      	ldr	r3, [pc, #264]	; (8002168 <HAL_RCC_GetSysClockFreq+0x144>)
 8002060:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002062:	e076      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002066:	0c9a      	lsrs	r2, r3, #18
 8002068:	230f      	movs	r3, #15
 800206a:	401a      	ands	r2, r3
 800206c:	4b3f      	ldr	r3, [pc, #252]	; (800216c <HAL_RCC_GetSysClockFreq+0x148>)
 800206e:	5c9b      	ldrb	r3, [r3, r2]
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002074:	0d9a      	lsrs	r2, r3, #22
 8002076:	2303      	movs	r3, #3
 8002078:	4013      	ands	r3, r2
 800207a:	3301      	adds	r3, #1
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800207e:	4b37      	ldr	r3, [pc, #220]	; (800215c <HAL_RCC_GetSysClockFreq+0x138>)
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	025b      	lsls	r3, r3, #9
 8002086:	4013      	ands	r3, r2
 8002088:	d01a      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	4a35      	ldr	r2, [pc, #212]	; (8002168 <HAL_RCC_GetSysClockFreq+0x144>)
 8002094:	2300      	movs	r3, #0
 8002096:	69b8      	ldr	r0, [r7, #24]
 8002098:	69f9      	ldr	r1, [r7, #28]
 800209a:	f7fe f8eb 	bl	8000274 <__aeabi_lmul>
 800209e:	0002      	movs	r2, r0
 80020a0:	000b      	movs	r3, r1
 80020a2:	0010      	movs	r0, r2
 80020a4:	0019      	movs	r1, r3
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f7fe f8bf 	bl	8000234 <__aeabi_uldivmod>
 80020b6:	0002      	movs	r2, r0
 80020b8:	000b      	movs	r3, r1
 80020ba:	0013      	movs	r3, r2
 80020bc:	637b      	str	r3, [r7, #52]	; 0x34
 80020be:	e037      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020c0:	4b26      	ldr	r3, [pc, #152]	; (800215c <HAL_RCC_GetSysClockFreq+0x138>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2210      	movs	r2, #16
 80020c6:	4013      	ands	r3, r2
 80020c8:	d01a      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80020ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4a23      	ldr	r2, [pc, #140]	; (8002160 <HAL_RCC_GetSysClockFreq+0x13c>)
 80020d4:	2300      	movs	r3, #0
 80020d6:	68b8      	ldr	r0, [r7, #8]
 80020d8:	68f9      	ldr	r1, [r7, #12]
 80020da:	f7fe f8cb 	bl	8000274 <__aeabi_lmul>
 80020de:	0002      	movs	r2, r0
 80020e0:	000b      	movs	r3, r1
 80020e2:	0010      	movs	r0, r2
 80020e4:	0019      	movs	r1, r3
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	603b      	str	r3, [r7, #0]
 80020ea:	2300      	movs	r3, #0
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f7fe f89f 	bl	8000234 <__aeabi_uldivmod>
 80020f6:	0002      	movs	r2, r0
 80020f8:	000b      	movs	r3, r1
 80020fa:	0013      	movs	r3, r2
 80020fc:	637b      	str	r3, [r7, #52]	; 0x34
 80020fe:	e017      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002102:	0018      	movs	r0, r3
 8002104:	2300      	movs	r3, #0
 8002106:	0019      	movs	r1, r3
 8002108:	4a16      	ldr	r2, [pc, #88]	; (8002164 <HAL_RCC_GetSysClockFreq+0x140>)
 800210a:	2300      	movs	r3, #0
 800210c:	f7fe f8b2 	bl	8000274 <__aeabi_lmul>
 8002110:	0002      	movs	r2, r0
 8002112:	000b      	movs	r3, r1
 8002114:	0010      	movs	r0, r2
 8002116:	0019      	movs	r1, r3
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	001c      	movs	r4, r3
 800211c:	2300      	movs	r3, #0
 800211e:	001d      	movs	r5, r3
 8002120:	0022      	movs	r2, r4
 8002122:	002b      	movs	r3, r5
 8002124:	f7fe f886 	bl	8000234 <__aeabi_uldivmod>
 8002128:	0002      	movs	r2, r0
 800212a:	000b      	movs	r3, r1
 800212c:	0013      	movs	r3, r2
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002134:	e00d      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_RCC_GetSysClockFreq+0x138>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	0b5b      	lsrs	r3, r3, #13
 800213c:	2207      	movs	r2, #7
 800213e:	4013      	ands	r3, r2
 8002140:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	3301      	adds	r3, #1
 8002146:	2280      	movs	r2, #128	; 0x80
 8002148:	0212      	lsls	r2, r2, #8
 800214a:	409a      	lsls	r2, r3
 800214c:	0013      	movs	r3, r2
 800214e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002150:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002154:	0018      	movs	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	b00e      	add	sp, #56	; 0x38
 800215a:	bdb0      	pop	{r4, r5, r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	003d0900 	.word	0x003d0900
 8002164:	00f42400 	.word	0x00f42400
 8002168:	007a1200 	.word	0x007a1200
 800216c:	080052f8 	.word	0x080052f8

08002170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002174:	4b02      	ldr	r3, [pc, #8]	; (8002180 <HAL_RCC_GetHCLKFreq+0x10>)
 8002176:	681b      	ldr	r3, [r3, #0]
}
 8002178:	0018      	movs	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	20000008 	.word	0x20000008

08002184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002188:	f7ff fff2 	bl	8002170 <HAL_RCC_GetHCLKFreq>
 800218c:	0001      	movs	r1, r0
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	2207      	movs	r2, #7
 8002196:	4013      	ands	r3, r2
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	40d9      	lsrs	r1, r3
 800219e:	000b      	movs	r3, r1
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	40021000 	.word	0x40021000
 80021ac:	080052f0 	.word	0x080052f0

080021b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021b4:	f7ff ffdc 	bl	8002170 <HAL_RCC_GetHCLKFreq>
 80021b8:	0001      	movs	r1, r0
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	0adb      	lsrs	r3, r3, #11
 80021c0:	2207      	movs	r2, #7
 80021c2:	4013      	ands	r3, r2
 80021c4:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021c6:	5cd3      	ldrb	r3, [r2, r3]
 80021c8:	40d9      	lsrs	r1, r3
 80021ca:	000b      	movs	r3, r1
}
 80021cc:	0018      	movs	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	40021000 	.word	0x40021000
 80021d8:	080052f0 	.word	0x080052f0

080021dc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80021e4:	2317      	movs	r3, #23
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2220      	movs	r2, #32
 80021f2:	4013      	ands	r3, r2
 80021f4:	d106      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	4013      	ands	r3, r2
 8002200:	d100      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002202:	e104      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002204:	4bb1      	ldr	r3, [pc, #708]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	055b      	lsls	r3, r3, #21
 800220c:	4013      	ands	r3, r2
 800220e:	d10a      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002210:	4bae      	ldr	r3, [pc, #696]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002214:	4bad      	ldr	r3, [pc, #692]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002216:	2180      	movs	r1, #128	; 0x80
 8002218:	0549      	lsls	r1, r1, #21
 800221a:	430a      	orrs	r2, r1
 800221c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800221e:	2317      	movs	r3, #23
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002226:	4baa      	ldr	r3, [pc, #680]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4013      	ands	r3, r2
 8002230:	d11a      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002232:	4ba7      	ldr	r3, [pc, #668]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4ba6      	ldr	r3, [pc, #664]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002238:	2180      	movs	r1, #128	; 0x80
 800223a:	0049      	lsls	r1, r1, #1
 800223c:	430a      	orrs	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002240:	f7fe fd44 	bl	8000ccc <HAL_GetTick>
 8002244:	0003      	movs	r3, r0
 8002246:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	e008      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224a:	f7fe fd3f 	bl	8000ccc <HAL_GetTick>
 800224e:	0002      	movs	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b64      	cmp	r3, #100	; 0x64
 8002256:	d901      	bls.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e133      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	4b9c      	ldr	r3, [pc, #624]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4013      	ands	r3, r2
 8002266:	d0f0      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002268:	4b98      	ldr	r3, [pc, #608]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	23c0      	movs	r3, #192	; 0xc0
 800226e:	039b      	lsls	r3, r3, #14
 8002270:	4013      	ands	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	23c0      	movs	r3, #192	; 0xc0
 800227a:	039b      	lsls	r3, r3, #14
 800227c:	4013      	ands	r3, r2
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	429a      	cmp	r2, r3
 8002282:	d107      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	23c0      	movs	r3, #192	; 0xc0
 800228a:	039b      	lsls	r3, r3, #14
 800228c:	4013      	ands	r3, r2
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	429a      	cmp	r2, r3
 8002292:	d013      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	23c0      	movs	r3, #192	; 0xc0
 800229a:	029b      	lsls	r3, r3, #10
 800229c:	401a      	ands	r2, r3
 800229e:	23c0      	movs	r3, #192	; 0xc0
 80022a0:	029b      	lsls	r3, r3, #10
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d10a      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80022a6:	4b89      	ldr	r3, [pc, #548]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	029b      	lsls	r3, r3, #10
 80022ae:	401a      	ands	r2, r3
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	029b      	lsls	r3, r3, #10
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d101      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e103      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80022bc:	4b83      	ldr	r3, [pc, #524]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022c0:	23c0      	movs	r3, #192	; 0xc0
 80022c2:	029b      	lsls	r3, r3, #10
 80022c4:	4013      	ands	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d049      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	23c0      	movs	r3, #192	; 0xc0
 80022d4:	029b      	lsls	r3, r3, #10
 80022d6:	4013      	ands	r3, r2
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d004      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2220      	movs	r2, #32
 80022e4:	4013      	ands	r3, r2
 80022e6:	d10d      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	23c0      	movs	r3, #192	; 0xc0
 80022ee:	029b      	lsls	r3, r3, #10
 80022f0:	4013      	ands	r3, r2
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d034      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	4013      	ands	r3, r2
 8002302:	d02e      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002304:	4b71      	ldr	r3, [pc, #452]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002308:	4a72      	ldr	r2, [pc, #456]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800230a:	4013      	ands	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800230e:	4b6f      	ldr	r3, [pc, #444]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002310:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002312:	4b6e      	ldr	r3, [pc, #440]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002314:	2180      	movs	r1, #128	; 0x80
 8002316:	0309      	lsls	r1, r1, #12
 8002318:	430a      	orrs	r2, r1
 800231a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800231c:	4b6b      	ldr	r3, [pc, #428]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800231e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002320:	4b6a      	ldr	r3, [pc, #424]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002322:	496d      	ldr	r1, [pc, #436]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002324:	400a      	ands	r2, r1
 8002326:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002328:	4b68      	ldr	r3, [pc, #416]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4013      	ands	r3, r2
 8002336:	d014      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7fe fcc8 	bl	8000ccc <HAL_GetTick>
 800233c:	0003      	movs	r3, r0
 800233e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002340:	e009      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002342:	f7fe fcc3 	bl	8000ccc <HAL_GetTick>
 8002346:	0002      	movs	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	4a63      	ldr	r2, [pc, #396]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e0b6      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002356:	4b5d      	ldr	r3, [pc, #372]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002358:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4013      	ands	r3, r2
 8002360:	d0ef      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	4013      	ands	r3, r2
 800236c:	d01f      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	23c0      	movs	r3, #192	; 0xc0
 8002374:	029b      	lsls	r3, r3, #10
 8002376:	401a      	ands	r2, r3
 8002378:	23c0      	movs	r3, #192	; 0xc0
 800237a:	029b      	lsls	r3, r3, #10
 800237c:	429a      	cmp	r2, r3
 800237e:	d10c      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002380:	4b52      	ldr	r3, [pc, #328]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a56      	ldr	r2, [pc, #344]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002386:	4013      	ands	r3, r2
 8002388:	0019      	movs	r1, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	23c0      	movs	r3, #192	; 0xc0
 8002390:	039b      	lsls	r3, r3, #14
 8002392:	401a      	ands	r2, r3
 8002394:	4b4d      	ldr	r3, [pc, #308]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002396:	430a      	orrs	r2, r1
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	4b4c      	ldr	r3, [pc, #304]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800239c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	23c0      	movs	r3, #192	; 0xc0
 80023a4:	029b      	lsls	r3, r3, #10
 80023a6:	401a      	ands	r2, r3
 80023a8:	4b48      	ldr	r3, [pc, #288]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023aa:	430a      	orrs	r2, r1
 80023ac:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2220      	movs	r2, #32
 80023b4:	4013      	ands	r3, r2
 80023b6:	d01f      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	23c0      	movs	r3, #192	; 0xc0
 80023be:	029b      	lsls	r3, r3, #10
 80023c0:	401a      	ands	r2, r3
 80023c2:	23c0      	movs	r3, #192	; 0xc0
 80023c4:	029b      	lsls	r3, r3, #10
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80023ca:	4b40      	ldr	r3, [pc, #256]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a44      	ldr	r2, [pc, #272]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	23c0      	movs	r3, #192	; 0xc0
 80023da:	039b      	lsls	r3, r3, #14
 80023dc:	401a      	ands	r2, r3
 80023de:	4b3b      	ldr	r3, [pc, #236]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023e0:	430a      	orrs	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	4b39      	ldr	r3, [pc, #228]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023e6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	23c0      	movs	r3, #192	; 0xc0
 80023ee:	029b      	lsls	r3, r3, #10
 80023f0:	401a      	ands	r2, r3
 80023f2:	4b36      	ldr	r3, [pc, #216]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023f4:	430a      	orrs	r2, r1
 80023f6:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023f8:	2317      	movs	r3, #23
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d105      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002402:	4b32      	ldr	r3, [pc, #200]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002406:	4b31      	ldr	r3, [pc, #196]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002408:	4936      	ldr	r1, [pc, #216]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800240a:	400a      	ands	r2, r1
 800240c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2201      	movs	r2, #1
 8002414:	4013      	ands	r3, r2
 8002416:	d009      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002418:	4b2c      	ldr	r3, [pc, #176]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800241a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241c:	2203      	movs	r2, #3
 800241e:	4393      	bics	r3, r2
 8002420:	0019      	movs	r1, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002428:	430a      	orrs	r2, r1
 800242a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2202      	movs	r2, #2
 8002432:	4013      	ands	r3, r2
 8002434:	d009      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002436:	4b25      	ldr	r3, [pc, #148]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243a:	220c      	movs	r2, #12
 800243c:	4393      	bics	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	4b21      	ldr	r3, [pc, #132]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002446:	430a      	orrs	r2, r1
 8002448:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2204      	movs	r2, #4
 8002450:	4013      	ands	r3, r2
 8002452:	d009      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002454:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002458:	4a23      	ldr	r2, [pc, #140]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800245a:	4013      	ands	r3, r2
 800245c:	0019      	movs	r1, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002464:	430a      	orrs	r2, r1
 8002466:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2208      	movs	r2, #8
 800246e:	4013      	ands	r3, r2
 8002470:	d009      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002472:	4b16      	ldr	r3, [pc, #88]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002476:	4a1d      	ldr	r2, [pc, #116]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002478:	4013      	ands	r3, r2
 800247a:	0019      	movs	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699a      	ldr	r2, [r3, #24]
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002482:	430a      	orrs	r2, r1
 8002484:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2240      	movs	r2, #64	; 0x40
 800248c:	4013      	ands	r3, r2
 800248e:	d009      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002490:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002494:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002496:	4013      	ands	r3, r2
 8002498:	0019      	movs	r1, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1a      	ldr	r2, [r3, #32]
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024a0:	430a      	orrs	r2, r1
 80024a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2280      	movs	r2, #128	; 0x80
 80024aa:	4013      	ands	r3, r2
 80024ac:	d009      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b2:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	0019      	movs	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69da      	ldr	r2, [r3, #28]
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024be:	430a      	orrs	r2, r1
 80024c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b006      	add	sp, #24
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40007000 	.word	0x40007000
 80024d4:	fffcffff 	.word	0xfffcffff
 80024d8:	fff7ffff 	.word	0xfff7ffff
 80024dc:	00001388 	.word	0x00001388
 80024e0:	ffcfffff 	.word	0xffcfffff
 80024e4:	efffffff 	.word	0xefffffff
 80024e8:	fffff3ff 	.word	0xfffff3ff
 80024ec:	ffffcfff 	.word	0xffffcfff
 80024f0:	fbffffff 	.word	0xfbffffff
 80024f4:	fff3ffff 	.word	0xfff3ffff

080024f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e083      	b.n	8002612 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	2382      	movs	r3, #130	; 0x82
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	429a      	cmp	r2, r3
 800251c:	d009      	beq.n	8002532 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	61da      	str	r2, [r3, #28]
 8002524:	e005      	b.n	8002532 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2251      	movs	r2, #81	; 0x51
 800253c:	5c9b      	ldrb	r3, [r3, r2]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d107      	bne.n	8002554 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2250      	movs	r2, #80	; 0x50
 8002548:	2100      	movs	r1, #0
 800254a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	0018      	movs	r0, r3
 8002550:	f7fe f944 	bl	80007dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2251      	movs	r2, #81	; 0x51
 8002558:	2102      	movs	r1, #2
 800255a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2140      	movs	r1, #64	; 0x40
 8002568:	438a      	bics	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	2382      	movs	r3, #130	; 0x82
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	401a      	ands	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6899      	ldr	r1, [r3, #8]
 800257a:	2384      	movs	r3, #132	; 0x84
 800257c:	021b      	lsls	r3, r3, #8
 800257e:	400b      	ands	r3, r1
 8002580:	431a      	orrs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68d9      	ldr	r1, [r3, #12]
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	400b      	ands	r3, r1
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	2102      	movs	r1, #2
 8002594:	400b      	ands	r3, r1
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	2101      	movs	r1, #1
 800259e:	400b      	ands	r3, r1
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6999      	ldr	r1, [r3, #24]
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	400b      	ands	r3, r1
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	2138      	movs	r1, #56	; 0x38
 80025b4:	400b      	ands	r3, r1
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	2180      	movs	r1, #128	; 0x80
 80025be:	400b      	ands	r3, r1
 80025c0:	431a      	orrs	r2, r3
 80025c2:	0011      	movs	r1, r2
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	019b      	lsls	r3, r3, #6
 80025cc:	401a      	ands	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	0c1b      	lsrs	r3, r3, #16
 80025dc:	2204      	movs	r2, #4
 80025de:	4013      	ands	r3, r2
 80025e0:	0019      	movs	r1, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	2210      	movs	r2, #16
 80025e8:	401a      	ands	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69da      	ldr	r2, [r3, #28]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4907      	ldr	r1, [pc, #28]	; (800261c <HAL_SPI_Init+0x124>)
 80025fe:	400a      	ands	r2, r1
 8002600:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2251      	movs	r2, #81	; 0x51
 800260c:	2101      	movs	r1, #1
 800260e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	0018      	movs	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	b002      	add	sp, #8
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	fffff7ff 	.word	0xfffff7ff

08002620 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	1dbb      	adds	r3, r7, #6
 800262c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800262e:	2317      	movs	r3, #23
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2250      	movs	r2, #80	; 0x50
 800263a:	5c9b      	ldrb	r3, [r3, r2]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_SPI_Transmit_DMA+0x24>
 8002640:	2302      	movs	r3, #2
 8002642:	e0a3      	b.n	800278c <HAL_SPI_Transmit_DMA+0x16c>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2250      	movs	r2, #80	; 0x50
 8002648:	2101      	movs	r1, #1
 800264a:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2251      	movs	r2, #81	; 0x51
 8002650:	5c9b      	ldrb	r3, [r3, r2]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b01      	cmp	r3, #1
 8002656:	d004      	beq.n	8002662 <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8002658:	2317      	movs	r3, #23
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	2202      	movs	r2, #2
 800265e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002660:	e08d      	b.n	800277e <HAL_SPI_Transmit_DMA+0x15e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_SPI_Transmit_DMA+0x50>
 8002668:	1dbb      	adds	r3, r7, #6
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d104      	bne.n	800267a <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8002670:	2317      	movs	r3, #23
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]
    goto error;
 8002678:	e081      	b.n	800277e <HAL_SPI_Transmit_DMA+0x15e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2251      	movs	r2, #81	; 0x51
 800267e:	2103      	movs	r1, #3
 8002680:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1dba      	adds	r2, r7, #6
 8002692:	8812      	ldrh	r2, [r2, #0]
 8002694:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1dba      	adds	r2, r7, #6
 800269a:	8812      	ldrh	r2, [r2, #0]
 800269c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d110      	bne.n	80026ea <HAL_SPI_Transmit_DMA+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2140      	movs	r1, #64	; 0x40
 80026d4:	438a      	bics	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2180      	movs	r1, #128	; 0x80
 80026e4:	01c9      	lsls	r1, r1, #7
 80026e6:	430a      	orrs	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ee:	4a29      	ldr	r2, [pc, #164]	; (8002794 <HAL_SPI_Transmit_DMA+0x174>)
 80026f0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f6:	4a28      	ldr	r2, [pc, #160]	; (8002798 <HAL_SPI_Transmit_DMA+0x178>)
 80026f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026fe:	4a27      	ldr	r2, [pc, #156]	; (800279c <HAL_SPI_Transmit_DMA+0x17c>)
 8002700:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002706:	2200      	movs	r2, #0
 8002708:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	0019      	movs	r1, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	330c      	adds	r3, #12
 800271a:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002720:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002722:	f7fe fc33 	bl	8000f8c <HAL_DMA_Start_IT>
 8002726:	1e03      	subs	r3, r0, #0
 8002728:	d00a      	beq.n	8002740 <HAL_SPI_Transmit_DMA+0x120>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	2210      	movs	r2, #16
 8002730:	431a      	orrs	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002736:	2317      	movs	r3, #23
 8002738:	18fb      	adds	r3, r7, r3
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]

    goto error;
 800273e:	e01e      	b.n	800277e <HAL_SPI_Transmit_DMA+0x15e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2240      	movs	r2, #64	; 0x40
 8002748:	4013      	ands	r3, r2
 800274a:	2b40      	cmp	r3, #64	; 0x40
 800274c:	d007      	beq.n	800275e <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2140      	movs	r1, #64	; 0x40
 800275a:	430a      	orrs	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2120      	movs	r1, #32
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2102      	movs	r1, #2
 800277a:	430a      	orrs	r2, r1
 800277c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2250      	movs	r2, #80	; 0x50
 8002782:	2100      	movs	r1, #0
 8002784:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002786:	2317      	movs	r3, #23
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	781b      	ldrb	r3, [r3, #0]
}
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b006      	add	sp, #24
 8002792:	bd80      	pop	{r7, pc}
 8002794:	08002de7 	.word	0x08002de7
 8002798:	08002bf9 	.word	0x08002bf9
 800279c:	08002e41 	.word	0x08002e41

080027a0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	001a      	movs	r2, r3
 80027ae:	1cbb      	adds	r3, r7, #2
 80027b0:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027b2:	2317      	movs	r3, #23
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2250      	movs	r2, #80	; 0x50
 80027be:	5c9b      	ldrb	r3, [r3, r2]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_SPI_TransmitReceive_DMA+0x28>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e0ee      	b.n	80029a6 <HAL_SPI_TransmitReceive_DMA+0x206>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2250      	movs	r2, #80	; 0x50
 80027cc:	2101      	movs	r1, #1
 80027ce:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027d0:	2016      	movs	r0, #22
 80027d2:	183b      	adds	r3, r7, r0
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	2151      	movs	r1, #81	; 0x51
 80027d8:	5c52      	ldrb	r2, [r2, r1]
 80027da:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80027e2:	0001      	movs	r1, r0
 80027e4:	187b      	adds	r3, r7, r1
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d011      	beq.n	8002810 <HAL_SPI_TransmitReceive_DMA+0x70>
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	2382      	movs	r3, #130	; 0x82
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d107      	bne.n	8002806 <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d103      	bne.n	8002806 <HAL_SPI_TransmitReceive_DMA+0x66>
 80027fe:	187b      	adds	r3, r7, r1
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b04      	cmp	r3, #4
 8002804:	d004      	beq.n	8002810 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8002806:	2317      	movs	r3, #23
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	2202      	movs	r2, #2
 800280c:	701a      	strb	r2, [r3, #0]
    goto error;
 800280e:	e0c3      	b.n	8002998 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d006      	beq.n	8002824 <HAL_SPI_TransmitReceive_DMA+0x84>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_SPI_TransmitReceive_DMA+0x84>
 800281c:	1cbb      	adds	r3, r7, #2
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d104      	bne.n	800282e <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8002824:	2317      	movs	r3, #23
 8002826:	18fb      	adds	r3, r7, r3
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
    goto error;
 800282c:	e0b4      	b.n	8002998 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2251      	movs	r2, #81	; 0x51
 8002832:	5c9b      	ldrb	r3, [r3, r2]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b04      	cmp	r3, #4
 8002838:	d003      	beq.n	8002842 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2251      	movs	r2, #81	; 0x51
 800283e:	2105      	movs	r1, #5
 8002840:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1cba      	adds	r2, r7, #2
 8002852:	8812      	ldrh	r2, [r2, #0]
 8002854:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1cba      	adds	r2, r7, #2
 800285a:	8812      	ldrh	r2, [r2, #0]
 800285c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1cba      	adds	r2, r7, #2
 8002868:	8812      	ldrh	r2, [r2, #0]
 800286a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1cba      	adds	r2, r7, #2
 8002870:	8812      	ldrh	r2, [r2, #0]
 8002872:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2251      	movs	r2, #81	; 0x51
 8002884:	5c9b      	ldrb	r3, [r3, r2]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b04      	cmp	r3, #4
 800288a:	d108      	bne.n	800289e <HAL_SPI_TransmitReceive_DMA+0xfe>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002890:	4a47      	ldr	r2, [pc, #284]	; (80029b0 <HAL_SPI_TransmitReceive_DMA+0x210>)
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002898:	4a46      	ldr	r2, [pc, #280]	; (80029b4 <HAL_SPI_TransmitReceive_DMA+0x214>)
 800289a:	62da      	str	r2, [r3, #44]	; 0x2c
 800289c:	e007      	b.n	80028ae <HAL_SPI_TransmitReceive_DMA+0x10e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a2:	4a45      	ldr	r2, [pc, #276]	; (80029b8 <HAL_SPI_TransmitReceive_DMA+0x218>)
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028aa:	4a44      	ldr	r2, [pc, #272]	; (80029bc <HAL_SPI_TransmitReceive_DMA+0x21c>)
 80028ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b2:	4a43      	ldr	r2, [pc, #268]	; (80029c0 <HAL_SPI_TransmitReceive_DMA+0x220>)
 80028b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ba:	2200      	movs	r2, #0
 80028bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	330c      	adds	r3, #12
 80028c8:	0019      	movs	r1, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028d4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80028d6:	f7fe fb59 	bl	8000f8c <HAL_DMA_Start_IT>
 80028da:	1e03      	subs	r3, r0, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_SPI_TransmitReceive_DMA+0x154>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	2210      	movs	r2, #16
 80028e4:	431a      	orrs	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80028ea:	2317      	movs	r3, #23
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]

    goto error;
 80028f2:	e051      	b.n	8002998 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2101      	movs	r1, #1
 8002900:	430a      	orrs	r2, r1
 8002902:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002908:	2200      	movs	r2, #0
 800290a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002910:	2200      	movs	r2, #0
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002918:	2200      	movs	r2, #0
 800291a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002920:	2200      	movs	r2, #0
 8002922:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	0019      	movs	r1, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	330c      	adds	r3, #12
 8002934:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800293a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800293c:	f7fe fb26 	bl	8000f8c <HAL_DMA_Start_IT>
 8002940:	1e03      	subs	r3, r0, #0
 8002942:	d00a      	beq.n	800295a <HAL_SPI_TransmitReceive_DMA+0x1ba>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002948:	2210      	movs	r2, #16
 800294a:	431a      	orrs	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002950:	2317      	movs	r3, #23
 8002952:	18fb      	adds	r3, r7, r3
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]

    goto error;
 8002958:	e01e      	b.n	8002998 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2240      	movs	r2, #64	; 0x40
 8002962:	4013      	ands	r3, r2
 8002964:	2b40      	cmp	r3, #64	; 0x40
 8002966:	d007      	beq.n	8002978 <HAL_SPI_TransmitReceive_DMA+0x1d8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2140      	movs	r1, #64	; 0x40
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2120      	movs	r1, #32
 8002984:	430a      	orrs	r2, r1
 8002986:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2102      	movs	r1, #2
 8002994:	430a      	orrs	r2, r1
 8002996:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2250      	movs	r2, #80	; 0x50
 800299c:	2100      	movs	r1, #0
 800299e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80029a0:	2317      	movs	r3, #23
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	781b      	ldrb	r3, [r3, #0]
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b006      	add	sp, #24
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	08002e05 	.word	0x08002e05
 80029b4:	08002ca5 	.word	0x08002ca5
 80029b8:	08002e23 	.word	0x08002e23
 80029bc:	08002d53 	.word	0x08002d53
 80029c0:	08002e41 	.word	0x08002e41

080029c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2240      	movs	r2, #64	; 0x40
 80029e0:	4013      	ands	r3, r2
 80029e2:	d10d      	bne.n	8002a00 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2201      	movs	r2, #1
 80029e8:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80029ea:	d009      	beq.n	8002a00 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	2240      	movs	r2, #64	; 0x40
 80029f0:	4013      	ands	r3, r2
 80029f2:	d005      	beq.n	8002a00 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	0010      	movs	r0, r2
 80029fc:	4798      	blx	r3
    return;
 80029fe:	e0c5      	b.n	8002b8c <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2202      	movs	r2, #2
 8002a04:	4013      	ands	r3, r2
 8002a06:	d009      	beq.n	8002a1c <HAL_SPI_IRQHandler+0x58>
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	2280      	movs	r2, #128	; 0x80
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d005      	beq.n	8002a1c <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	0010      	movs	r0, r2
 8002a18:	4798      	blx	r3
    return;
 8002a1a:	e0b7      	b.n	8002b8c <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	4013      	ands	r3, r2
 8002a22:	d109      	bne.n	8002a38 <HAL_SPI_IRQHandler+0x74>
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2240      	movs	r2, #64	; 0x40
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d105      	bne.n	8002a38 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	2380      	movs	r3, #128	; 0x80
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4013      	ands	r3, r2
 8002a34:	d100      	bne.n	8002a38 <HAL_SPI_IRQHandler+0x74>
 8002a36:	e0a9      	b.n	8002b8c <HAL_SPI_IRQHandler+0x1c8>
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d100      	bne.n	8002a42 <HAL_SPI_IRQHandler+0x7e>
 8002a40:	e0a4      	b.n	8002b8c <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	2240      	movs	r2, #64	; 0x40
 8002a46:	4013      	ands	r3, r2
 8002a48:	d023      	beq.n	8002a92 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2251      	movs	r2, #81	; 0x51
 8002a4e:	5c9b      	ldrb	r3, [r3, r2]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d011      	beq.n	8002a7a <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	e00b      	b.n	8002a92 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	693b      	ldr	r3, [r7, #16]
        return;
 8002a90:	e07c      	b.n	8002b8c <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2220      	movs	r2, #32
 8002a96:	4013      	ands	r3, r2
 8002a98:	d014      	beq.n	8002ac4 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2140      	movs	r1, #64	; 0x40
 8002abe:	438a      	bics	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4013      	ands	r3, r2
 8002acc:	d00c      	beq.n	8002ae8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad2:	2208      	movs	r2, #8
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d04c      	beq.n	8002b8a <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	21e0      	movs	r1, #224	; 0xe0
 8002afc:	438a      	bics	r2, r1
 8002afe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2251      	movs	r2, #81	; 0x51
 8002b04:	2101      	movs	r1, #1
 8002b06:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d103      	bne.n	8002b18 <HAL_SPI_IRQHandler+0x154>
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2201      	movs	r2, #1
 8002b14:	4013      	ands	r3, r2
 8002b16:	d032      	beq.n	8002b7e <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2103      	movs	r1, #3
 8002b24:	438a      	bics	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d010      	beq.n	8002b52 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b34:	4a17      	ldr	r2, [pc, #92]	; (8002b94 <HAL_SPI_IRQHandler+0x1d0>)
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f7fe facb 	bl	80010d8 <HAL_DMA_Abort_IT>
 8002b42:	1e03      	subs	r3, r0, #0
 8002b44:	d005      	beq.n	8002b52 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	2240      	movs	r2, #64	; 0x40
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d016      	beq.n	8002b88 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5e:	4a0d      	ldr	r2, [pc, #52]	; (8002b94 <HAL_SPI_IRQHandler+0x1d0>)
 8002b60:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b66:	0018      	movs	r0, r3
 8002b68:	f7fe fab6 	bl	80010d8 <HAL_DMA_Abort_IT>
 8002b6c:	1e03      	subs	r3, r0, #0
 8002b6e:	d00b      	beq.n	8002b88 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b74:	2240      	movs	r2, #64	; 0x40
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002b7c:	e004      	b.n	8002b88 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 f831 	bl	8002be8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002b86:	e000      	b.n	8002b8a <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8002b88:	46c0      	nop			; (mov r8, r8)
    return;
 8002b8a:	46c0      	nop			; (mov r8, r8)
  }
}
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b008      	add	sp, #32
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	08002e83 	.word	0x08002e83

08002b98 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b002      	add	sp, #8
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b002      	add	sp, #8
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002bc0:	46c0      	nop			; (mov r8, r8)
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b002      	add	sp, #8
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002bd0:	46c0      	nop			; (mov r8, r8)
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b002      	add	sp, #8
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002be0:	46c0      	nop			; (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b002      	add	sp, #8
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b002      	add	sp, #8
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c06:	f7fe f861 	bl	8000ccc <HAL_GetTick>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2220      	movs	r2, #32
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d03c      	beq.n	8002c96 <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2120      	movs	r1, #32
 8002c28:	438a      	bics	r2, r1
 8002c2a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2102      	movs	r1, #2
 8002c38:	438a      	bics	r2, r1
 8002c3a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2164      	movs	r1, #100	; 0x64
 8002c42:	0018      	movs	r0, r3
 8002c44:	f000 fa2a 	bl	800309c <SPI_EndRxTxTransaction>
 8002c48:	1e03      	subs	r3, r0, #0
 8002c4a:	d005      	beq.n	8002c58 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c50:	2220      	movs	r2, #32
 8002c52:	431a      	orrs	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2251      	movs	r2, #81	; 0x51
 8002c80:	2101      	movs	r1, #1
 8002c82:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d004      	beq.n	8002c96 <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f7ff ffaa 	bl	8002be8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002c94:	e003      	b.n	8002c9e <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f7ff ff7d 	bl	8002b98 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b006      	add	sp, #24
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cb2:	f7fe f80b 	bl	8000ccc <HAL_GetTick>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d03d      	beq.n	8002d44 <SPI_DMAReceiveCplt+0xa0>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2120      	movs	r1, #32
 8002cd4:	438a      	bics	r2, r1
 8002cd6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10e      	bne.n	8002cfe <SPI_DMAReceiveCplt+0x5a>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	2382      	movs	r3, #130	; 0x82
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d108      	bne.n	8002cfe <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2103      	movs	r1, #3
 8002cf8:	438a      	bics	r2, r1
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	e007      	b.n	8002d0e <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	438a      	bics	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2164      	movs	r1, #100	; 0x64
 8002d14:	0018      	movs	r0, r3
 8002d16:	f000 f957 	bl	8002fc8 <SPI_EndRxTransaction>
 8002d1a:	1e03      	subs	r3, r0, #0
 8002d1c:	d002      	beq.n	8002d24 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2251      	movs	r2, #81	; 0x51
 8002d2e:	2101      	movs	r1, #1
 8002d30:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <SPI_DMAReceiveCplt+0xa0>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7ff ff53 	bl	8002be8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002d42:	e003      	b.n	8002d4c <SPI_DMAReceiveCplt+0xa8>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	0018      	movs	r0, r3
 8002d48:	f7ff ff2e 	bl	8002ba8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b004      	add	sp, #16
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d60:	f7fd ffb4 	bl	8000ccc <HAL_GetTick>
 8002d64:	0003      	movs	r3, r0
 8002d66:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d030      	beq.n	8002dd8 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2120      	movs	r1, #32
 8002d82:	438a      	bics	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2164      	movs	r1, #100	; 0x64
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f000 f985 	bl	800309c <SPI_EndRxTxTransaction>
 8002d92:	1e03      	subs	r3, r0, #0
 8002d94:	d005      	beq.n	8002da2 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2103      	movs	r1, #3
 8002dae:	438a      	bics	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2251      	movs	r2, #81	; 0x51
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d004      	beq.n	8002dd8 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f7ff ff09 	bl	8002be8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002dd6:	e003      	b.n	8002de0 <SPI_DMATransmitReceiveCplt+0x8e>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f7fd fcaa 	bl	8000734 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b004      	add	sp, #16
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	0018      	movs	r0, r3
 8002df8:	f7ff fede 	bl	8002bb8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b004      	add	sp, #16
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	0018      	movs	r0, r3
 8002e16:	f7ff fed7 	bl	8002bc8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b004      	add	sp, #16
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	0018      	movs	r0, r3
 8002e34:	f7ff fed0 	bl	8002bd8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e38:	46c0      	nop			; (mov r8, r8)
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b004      	add	sp, #16
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2103      	movs	r1, #3
 8002e5a:	438a      	bics	r2, r1
 8002e5c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e62:	2210      	movs	r2, #16
 8002e64:	431a      	orrs	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2251      	movs	r2, #81	; 0x51
 8002e6e:	2101      	movs	r1, #1
 8002e70:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	0018      	movs	r0, r3
 8002e76:	f7ff feb7 	bl	8002be8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b004      	add	sp, #16
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f7ff fea2 	bl	8002be8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b004      	add	sp, #16
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	1dfb      	adds	r3, r7, #7
 8002eba:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ebc:	f7fd ff06 	bl	8000ccc <HAL_GetTick>
 8002ec0:	0002      	movs	r2, r0
 8002ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	18d3      	adds	r3, r2, r3
 8002eca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ecc:	f7fd fefe 	bl	8000ccc <HAL_GetTick>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ed4:	4b3a      	ldr	r3, [pc, #232]	; (8002fc0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	015b      	lsls	r3, r3, #5
 8002eda:	0d1b      	lsrs	r3, r3, #20
 8002edc:	69fa      	ldr	r2, [r7, #28]
 8002ede:	4353      	muls	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ee2:	e058      	b.n	8002f96 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	d055      	beq.n	8002f96 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002eea:	f7fd feef 	bl	8000ccc <HAL_GetTick>
 8002eee:	0002      	movs	r2, r0
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	69fa      	ldr	r2, [r7, #28]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d902      	bls.n	8002f00 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d142      	bne.n	8002f86 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	21e0      	movs	r1, #224	; 0xe0
 8002f0c:	438a      	bics	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	2382      	movs	r3, #130	; 0x82
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d113      	bne.n	8002f44 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d005      	beq.n	8002f34 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d107      	bne.n	8002f44 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2140      	movs	r1, #64	; 0x40
 8002f40:	438a      	bics	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	019b      	lsls	r3, r3, #6
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d110      	bne.n	8002f72 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	491a      	ldr	r1, [pc, #104]	; (8002fc4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002f5c:	400a      	ands	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2180      	movs	r1, #128	; 0x80
 8002f6c:	0189      	lsls	r1, r1, #6
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2251      	movs	r2, #81	; 0x51
 8002f76:	2101      	movs	r1, #1
 8002f78:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2250      	movs	r2, #80	; 0x50
 8002f7e:	2100      	movs	r1, #0
 8002f80:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e017      	b.n	8002fb6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	425a      	negs	r2, r3
 8002fa6:	4153      	adcs	r3, r2
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	001a      	movs	r2, r3
 8002fac:	1dfb      	adds	r3, r7, #7
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d197      	bne.n	8002ee4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b008      	add	sp, #32
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	20000008 	.word	0x20000008
 8002fc4:	ffffdfff 	.word	0xffffdfff

08002fc8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	2382      	movs	r3, #130	; 0x82
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d113      	bne.n	8003008 <SPI_EndRxTransaction+0x40>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d005      	beq.n	8002ff8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d107      	bne.n	8003008 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2140      	movs	r1, #64	; 0x40
 8003004:	438a      	bics	r2, r1
 8003006:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	2382      	movs	r3, #130	; 0x82
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	429a      	cmp	r2, r3
 8003012:	d12b      	bne.n	800306c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	429a      	cmp	r2, r3
 800301e:	d012      	beq.n	8003046 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	0013      	movs	r3, r2
 800302a:	2200      	movs	r2, #0
 800302c:	2180      	movs	r1, #128	; 0x80
 800302e:	f7ff ff3d 	bl	8002eac <SPI_WaitFlagStateUntilTimeout>
 8003032:	1e03      	subs	r3, r0, #0
 8003034:	d02d      	beq.n	8003092 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303a:	2220      	movs	r2, #32
 800303c:	431a      	orrs	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e026      	b.n	8003094 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	0013      	movs	r3, r2
 8003050:	2200      	movs	r2, #0
 8003052:	2101      	movs	r1, #1
 8003054:	f7ff ff2a 	bl	8002eac <SPI_WaitFlagStateUntilTimeout>
 8003058:	1e03      	subs	r3, r0, #0
 800305a:	d01a      	beq.n	8003092 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003060:	2220      	movs	r2, #32
 8003062:	431a      	orrs	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e013      	b.n	8003094 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	0013      	movs	r3, r2
 8003076:	2200      	movs	r2, #0
 8003078:	2101      	movs	r1, #1
 800307a:	f7ff ff17 	bl	8002eac <SPI_WaitFlagStateUntilTimeout>
 800307e:	1e03      	subs	r3, r0, #0
 8003080:	d007      	beq.n	8003092 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003086:	2220      	movs	r2, #32
 8003088:	431a      	orrs	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e000      	b.n	8003094 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	0018      	movs	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	b004      	add	sp, #16
 800309a:	bd80      	pop	{r7, pc}

0800309c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af02      	add	r7, sp, #8
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80030a8:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <SPI_EndRxTxTransaction+0x84>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	491d      	ldr	r1, [pc, #116]	; (8003124 <SPI_EndRxTxTransaction+0x88>)
 80030ae:	0018      	movs	r0, r3
 80030b0:	f7fd f834 	bl	800011c <__udivsi3>
 80030b4:	0003      	movs	r3, r0
 80030b6:	001a      	movs	r2, r3
 80030b8:	0013      	movs	r3, r2
 80030ba:	015b      	lsls	r3, r3, #5
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	189b      	adds	r3, r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	2382      	movs	r3, #130	; 0x82
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d112      	bne.n	80030f8 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	0013      	movs	r3, r2
 80030dc:	2200      	movs	r2, #0
 80030de:	2180      	movs	r1, #128	; 0x80
 80030e0:	f7ff fee4 	bl	8002eac <SPI_WaitFlagStateUntilTimeout>
 80030e4:	1e03      	subs	r3, r0, #0
 80030e6:	d016      	beq.n	8003116 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ec:	2220      	movs	r2, #32
 80030ee:	431a      	orrs	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e00f      	b.n	8003118 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	3b01      	subs	r3, #1
 8003102:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2280      	movs	r2, #128	; 0x80
 800310c:	4013      	ands	r3, r2
 800310e:	2b80      	cmp	r3, #128	; 0x80
 8003110:	d0f2      	beq.n	80030f8 <SPI_EndRxTxTransaction+0x5c>
 8003112:	e000      	b.n	8003116 <SPI_EndRxTxTransaction+0x7a>
        break;
 8003114:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	b006      	add	sp, #24
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000008 	.word	0x20000008
 8003124:	016e3600 	.word	0x016e3600

08003128 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e044      	b.n	80031c4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800313e:	2b00      	cmp	r3, #0
 8003140:	d107      	bne.n	8003152 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2278      	movs	r2, #120	; 0x78
 8003146:	2100      	movs	r1, #0
 8003148:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	0018      	movs	r0, r3
 800314e:	f7fd fc03 	bl	8000958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2224      	movs	r2, #36	; 0x24
 8003156:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2101      	movs	r1, #1
 8003164:	438a      	bics	r2, r1
 8003166:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	0018      	movs	r0, r3
 800316c:	f000 fbce 	bl	800390c <UART_SetConfig>
 8003170:	0003      	movs	r3, r0
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e024      	b.n	80031c4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	0018      	movs	r0, r3
 8003186:	f000 fe45 	bl	8003e14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	490d      	ldr	r1, [pc, #52]	; (80031cc <HAL_UART_Init+0xa4>)
 8003196:	400a      	ands	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	212a      	movs	r1, #42	; 0x2a
 80031a6:	438a      	bics	r2, r1
 80031a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2101      	movs	r1, #1
 80031b6:	430a      	orrs	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	0018      	movs	r0, r3
 80031be:	f000 fedd 	bl	8003f7c <UART_CheckIdleState>
 80031c2:	0003      	movs	r3, r0
}
 80031c4:	0018      	movs	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b002      	add	sp, #8
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	ffffb7ff 	.word	0xffffb7ff

080031d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	; 0x28
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	1dbb      	adds	r3, r7, #6
 80031de:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031e4:	2b20      	cmp	r3, #32
 80031e6:	d000      	beq.n	80031ea <HAL_UART_Transmit+0x1a>
 80031e8:	e08c      	b.n	8003304 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_UART_Transmit+0x28>
 80031f0:	1dbb      	adds	r3, r7, #6
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e084      	b.n	8003306 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	015b      	lsls	r3, r3, #5
 8003204:	429a      	cmp	r2, r3
 8003206:	d109      	bne.n	800321c <HAL_UART_Transmit+0x4c>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d105      	bne.n	800321c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2201      	movs	r2, #1
 8003214:	4013      	ands	r3, r2
 8003216:	d001      	beq.n	800321c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e074      	b.n	8003306 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2284      	movs	r2, #132	; 0x84
 8003220:	2100      	movs	r1, #0
 8003222:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2221      	movs	r2, #33	; 0x21
 8003228:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800322a:	f7fd fd4f 	bl	8000ccc <HAL_GetTick>
 800322e:	0003      	movs	r3, r0
 8003230:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1dba      	adds	r2, r7, #6
 8003236:	2150      	movs	r1, #80	; 0x50
 8003238:	8812      	ldrh	r2, [r2, #0]
 800323a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1dba      	adds	r2, r7, #6
 8003240:	2152      	movs	r1, #82	; 0x52
 8003242:	8812      	ldrh	r2, [r2, #0]
 8003244:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	2380      	movs	r3, #128	; 0x80
 800324c:	015b      	lsls	r3, r3, #5
 800324e:	429a      	cmp	r2, r3
 8003250:	d108      	bne.n	8003264 <HAL_UART_Transmit+0x94>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d104      	bne.n	8003264 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800325a:	2300      	movs	r3, #0
 800325c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	61bb      	str	r3, [r7, #24]
 8003262:	e003      	b.n	800326c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003268:	2300      	movs	r3, #0
 800326a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800326c:	e02f      	b.n	80032ce <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	0013      	movs	r3, r2
 8003278:	2200      	movs	r2, #0
 800327a:	2180      	movs	r1, #128	; 0x80
 800327c:	f000 ff26 	bl	80040cc <UART_WaitOnFlagUntilTimeout>
 8003280:	1e03      	subs	r3, r0, #0
 8003282:	d004      	beq.n	800328e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e03b      	b.n	8003306 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10b      	bne.n	80032ac <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	001a      	movs	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	05d2      	lsls	r2, r2, #23
 80032a0:	0dd2      	lsrs	r2, r2, #23
 80032a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	3302      	adds	r3, #2
 80032a8:	61bb      	str	r3, [r7, #24]
 80032aa:	e007      	b.n	80032bc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	781a      	ldrb	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3301      	adds	r3, #1
 80032ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2252      	movs	r2, #82	; 0x52
 80032c0:	5a9b      	ldrh	r3, [r3, r2]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b299      	uxth	r1, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2252      	movs	r2, #82	; 0x52
 80032cc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2252      	movs	r2, #82	; 0x52
 80032d2:	5a9b      	ldrh	r3, [r3, r2]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1c9      	bne.n	800326e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	0013      	movs	r3, r2
 80032e4:	2200      	movs	r2, #0
 80032e6:	2140      	movs	r1, #64	; 0x40
 80032e8:	f000 fef0 	bl	80040cc <UART_WaitOnFlagUntilTimeout>
 80032ec:	1e03      	subs	r3, r0, #0
 80032ee:	d004      	beq.n	80032fa <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e005      	b.n	8003306 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	e000      	b.n	8003306 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003304:	2302      	movs	r3, #2
  }
}
 8003306:	0018      	movs	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	b008      	add	sp, #32
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003310:	b590      	push	{r4, r7, lr}
 8003312:	b0ab      	sub	sp, #172	; 0xac
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	22a4      	movs	r2, #164	; 0xa4
 8003320:	18b9      	adds	r1, r7, r2
 8003322:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	20a0      	movs	r0, #160	; 0xa0
 800332c:	1839      	adds	r1, r7, r0
 800332e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	219c      	movs	r1, #156	; 0x9c
 8003338:	1879      	adds	r1, r7, r1
 800333a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800333c:	0011      	movs	r1, r2
 800333e:	18bb      	adds	r3, r7, r2
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a99      	ldr	r2, [pc, #612]	; (80035a8 <HAL_UART_IRQHandler+0x298>)
 8003344:	4013      	ands	r3, r2
 8003346:	2298      	movs	r2, #152	; 0x98
 8003348:	18bc      	adds	r4, r7, r2
 800334a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800334c:	18bb      	adds	r3, r7, r2
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d114      	bne.n	800337e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003354:	187b      	adds	r3, r7, r1
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2220      	movs	r2, #32
 800335a:	4013      	ands	r3, r2
 800335c:	d00f      	beq.n	800337e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800335e:	183b      	adds	r3, r7, r0
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2220      	movs	r2, #32
 8003364:	4013      	ands	r3, r2
 8003366:	d00a      	beq.n	800337e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800336c:	2b00      	cmp	r3, #0
 800336e:	d100      	bne.n	8003372 <HAL_UART_IRQHandler+0x62>
 8003370:	e2a0      	b.n	80038b4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	0010      	movs	r0, r2
 800337a:	4798      	blx	r3
      }
      return;
 800337c:	e29a      	b.n	80038b4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800337e:	2398      	movs	r3, #152	; 0x98
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d100      	bne.n	800338a <HAL_UART_IRQHandler+0x7a>
 8003388:	e114      	b.n	80035b4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800338a:	239c      	movs	r3, #156	; 0x9c
 800338c:	18fb      	adds	r3, r7, r3
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2201      	movs	r2, #1
 8003392:	4013      	ands	r3, r2
 8003394:	d106      	bne.n	80033a4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003396:	23a0      	movs	r3, #160	; 0xa0
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a83      	ldr	r2, [pc, #524]	; (80035ac <HAL_UART_IRQHandler+0x29c>)
 800339e:	4013      	ands	r3, r2
 80033a0:	d100      	bne.n	80033a4 <HAL_UART_IRQHandler+0x94>
 80033a2:	e107      	b.n	80035b4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033a4:	23a4      	movs	r3, #164	; 0xa4
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2201      	movs	r2, #1
 80033ac:	4013      	ands	r3, r2
 80033ae:	d012      	beq.n	80033d6 <HAL_UART_IRQHandler+0xc6>
 80033b0:	23a0      	movs	r3, #160	; 0xa0
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	2380      	movs	r3, #128	; 0x80
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	4013      	ands	r3, r2
 80033bc:	d00b      	beq.n	80033d6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2201      	movs	r2, #1
 80033c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2284      	movs	r2, #132	; 0x84
 80033ca:	589b      	ldr	r3, [r3, r2]
 80033cc:	2201      	movs	r2, #1
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2184      	movs	r1, #132	; 0x84
 80033d4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033d6:	23a4      	movs	r3, #164	; 0xa4
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2202      	movs	r2, #2
 80033de:	4013      	ands	r3, r2
 80033e0:	d011      	beq.n	8003406 <HAL_UART_IRQHandler+0xf6>
 80033e2:	239c      	movs	r3, #156	; 0x9c
 80033e4:	18fb      	adds	r3, r7, r3
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2201      	movs	r2, #1
 80033ea:	4013      	ands	r3, r2
 80033ec:	d00b      	beq.n	8003406 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2202      	movs	r2, #2
 80033f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2284      	movs	r2, #132	; 0x84
 80033fa:	589b      	ldr	r3, [r3, r2]
 80033fc:	2204      	movs	r2, #4
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2184      	movs	r1, #132	; 0x84
 8003404:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003406:	23a4      	movs	r3, #164	; 0xa4
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2204      	movs	r2, #4
 800340e:	4013      	ands	r3, r2
 8003410:	d011      	beq.n	8003436 <HAL_UART_IRQHandler+0x126>
 8003412:	239c      	movs	r3, #156	; 0x9c
 8003414:	18fb      	adds	r3, r7, r3
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2201      	movs	r2, #1
 800341a:	4013      	ands	r3, r2
 800341c:	d00b      	beq.n	8003436 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2204      	movs	r2, #4
 8003424:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2284      	movs	r2, #132	; 0x84
 800342a:	589b      	ldr	r3, [r3, r2]
 800342c:	2202      	movs	r2, #2
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2184      	movs	r1, #132	; 0x84
 8003434:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003436:	23a4      	movs	r3, #164	; 0xa4
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2208      	movs	r2, #8
 800343e:	4013      	ands	r3, r2
 8003440:	d017      	beq.n	8003472 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003442:	23a0      	movs	r3, #160	; 0xa0
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2220      	movs	r2, #32
 800344a:	4013      	ands	r3, r2
 800344c:	d105      	bne.n	800345a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800344e:	239c      	movs	r3, #156	; 0x9c
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2201      	movs	r2, #1
 8003456:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003458:	d00b      	beq.n	8003472 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2208      	movs	r2, #8
 8003460:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2284      	movs	r2, #132	; 0x84
 8003466:	589b      	ldr	r3, [r3, r2]
 8003468:	2208      	movs	r2, #8
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2184      	movs	r1, #132	; 0x84
 8003470:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003472:	23a4      	movs	r3, #164	; 0xa4
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	2380      	movs	r3, #128	; 0x80
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	4013      	ands	r3, r2
 800347e:	d013      	beq.n	80034a8 <HAL_UART_IRQHandler+0x198>
 8003480:	23a0      	movs	r3, #160	; 0xa0
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	04db      	lsls	r3, r3, #19
 800348a:	4013      	ands	r3, r2
 800348c:	d00c      	beq.n	80034a8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2280      	movs	r2, #128	; 0x80
 8003494:	0112      	lsls	r2, r2, #4
 8003496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2284      	movs	r2, #132	; 0x84
 800349c:	589b      	ldr	r3, [r3, r2]
 800349e:	2220      	movs	r2, #32
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2184      	movs	r1, #132	; 0x84
 80034a6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2284      	movs	r2, #132	; 0x84
 80034ac:	589b      	ldr	r3, [r3, r2]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d100      	bne.n	80034b4 <HAL_UART_IRQHandler+0x1a4>
 80034b2:	e201      	b.n	80038b8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80034b4:	23a4      	movs	r3, #164	; 0xa4
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2220      	movs	r2, #32
 80034bc:	4013      	ands	r3, r2
 80034be:	d00e      	beq.n	80034de <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034c0:	23a0      	movs	r3, #160	; 0xa0
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2220      	movs	r2, #32
 80034c8:	4013      	ands	r3, r2
 80034ca:	d008      	beq.n	80034de <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d004      	beq.n	80034de <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	0010      	movs	r0, r2
 80034dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2284      	movs	r2, #132	; 0x84
 80034e2:	589b      	ldr	r3, [r3, r2]
 80034e4:	2194      	movs	r1, #148	; 0x94
 80034e6:	187a      	adds	r2, r7, r1
 80034e8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2240      	movs	r2, #64	; 0x40
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b40      	cmp	r3, #64	; 0x40
 80034f6:	d004      	beq.n	8003502 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80034f8:	187b      	adds	r3, r7, r1
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2228      	movs	r2, #40	; 0x28
 80034fe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003500:	d047      	beq.n	8003592 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	0018      	movs	r0, r3
 8003506:	f000 fe4b 	bl	80041a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2240      	movs	r2, #64	; 0x40
 8003512:	4013      	ands	r3, r2
 8003514:	2b40      	cmp	r3, #64	; 0x40
 8003516:	d137      	bne.n	8003588 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003518:	f3ef 8310 	mrs	r3, PRIMASK
 800351c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800351e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003520:	2090      	movs	r0, #144	; 0x90
 8003522:	183a      	adds	r2, r7, r0
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	2301      	movs	r3, #1
 8003528:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800352c:	f383 8810 	msr	PRIMASK, r3
}
 8003530:	46c0      	nop			; (mov r8, r8)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2140      	movs	r1, #64	; 0x40
 800353e:	438a      	bics	r2, r1
 8003540:	609a      	str	r2, [r3, #8]
 8003542:	183b      	adds	r3, r7, r0
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003548:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800354a:	f383 8810 	msr	PRIMASK, r3
}
 800354e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003554:	2b00      	cmp	r3, #0
 8003556:	d012      	beq.n	800357e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355c:	4a14      	ldr	r2, [pc, #80]	; (80035b0 <HAL_UART_IRQHandler+0x2a0>)
 800355e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003564:	0018      	movs	r0, r3
 8003566:	f7fd fdb7 	bl	80010d8 <HAL_DMA_Abort_IT>
 800356a:	1e03      	subs	r3, r0, #0
 800356c:	d01a      	beq.n	80035a4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003578:	0018      	movs	r0, r3
 800357a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800357c:	e012      	b.n	80035a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	0018      	movs	r0, r3
 8003582:	f000 f9af 	bl	80038e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003586:	e00d      	b.n	80035a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	0018      	movs	r0, r3
 800358c:	f000 f9aa 	bl	80038e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003590:	e008      	b.n	80035a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	0018      	movs	r0, r3
 8003596:	f000 f9a5 	bl	80038e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2284      	movs	r2, #132	; 0x84
 800359e:	2100      	movs	r1, #0
 80035a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80035a2:	e189      	b.n	80038b8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a4:	46c0      	nop			; (mov r8, r8)
    return;
 80035a6:	e187      	b.n	80038b8 <HAL_UART_IRQHandler+0x5a8>
 80035a8:	0000080f 	.word	0x0000080f
 80035ac:	04000120 	.word	0x04000120
 80035b0:	08004269 	.word	0x08004269

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d000      	beq.n	80035be <HAL_UART_IRQHandler+0x2ae>
 80035bc:	e13b      	b.n	8003836 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80035be:	23a4      	movs	r3, #164	; 0xa4
 80035c0:	18fb      	adds	r3, r7, r3
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2210      	movs	r2, #16
 80035c6:	4013      	ands	r3, r2
 80035c8:	d100      	bne.n	80035cc <HAL_UART_IRQHandler+0x2bc>
 80035ca:	e134      	b.n	8003836 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80035cc:	23a0      	movs	r3, #160	; 0xa0
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2210      	movs	r2, #16
 80035d4:	4013      	ands	r3, r2
 80035d6:	d100      	bne.n	80035da <HAL_UART_IRQHandler+0x2ca>
 80035d8:	e12d      	b.n	8003836 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2210      	movs	r2, #16
 80035e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2240      	movs	r2, #64	; 0x40
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b40      	cmp	r3, #64	; 0x40
 80035ee:	d000      	beq.n	80035f2 <HAL_UART_IRQHandler+0x2e2>
 80035f0:	e0a1      	b.n	8003736 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	217e      	movs	r1, #126	; 0x7e
 80035fc:	187b      	adds	r3, r7, r1
 80035fe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003600:	187b      	adds	r3, r7, r1
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d100      	bne.n	800360a <HAL_UART_IRQHandler+0x2fa>
 8003608:	e158      	b.n	80038bc <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2258      	movs	r2, #88	; 0x58
 800360e:	5a9b      	ldrh	r3, [r3, r2]
 8003610:	187a      	adds	r2, r7, r1
 8003612:	8812      	ldrh	r2, [r2, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d300      	bcc.n	800361a <HAL_UART_IRQHandler+0x30a>
 8003618:	e150      	b.n	80038bc <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	187a      	adds	r2, r7, r1
 800361e:	215a      	movs	r1, #90	; 0x5a
 8003620:	8812      	ldrh	r2, [r2, #0]
 8003622:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2220      	movs	r2, #32
 800362e:	4013      	ands	r3, r2
 8003630:	d16f      	bne.n	8003712 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003632:	f3ef 8310 	mrs	r3, PRIMASK
 8003636:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800363a:	67bb      	str	r3, [r7, #120]	; 0x78
 800363c:	2301      	movs	r3, #1
 800363e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003642:	f383 8810 	msr	PRIMASK, r3
}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	499e      	ldr	r1, [pc, #632]	; (80038cc <HAL_UART_IRQHandler+0x5bc>)
 8003654:	400a      	ands	r2, r1
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800365a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365e:	f383 8810 	msr	PRIMASK, r3
}
 8003662:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003664:	f3ef 8310 	mrs	r3, PRIMASK
 8003668:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800366a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366c:	677b      	str	r3, [r7, #116]	; 0x74
 800366e:	2301      	movs	r3, #1
 8003670:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003674:	f383 8810 	msr	PRIMASK, r3
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2101      	movs	r1, #1
 8003686:	438a      	bics	r2, r1
 8003688:	609a      	str	r2, [r3, #8]
 800368a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003690:	f383 8810 	msr	PRIMASK, r3
}
 8003694:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003696:	f3ef 8310 	mrs	r3, PRIMASK
 800369a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800369c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800369e:	673b      	str	r3, [r7, #112]	; 0x70
 80036a0:	2301      	movs	r3, #1
 80036a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a6:	f383 8810 	msr	PRIMASK, r3
}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2140      	movs	r1, #64	; 0x40
 80036b8:	438a      	bics	r2, r1
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036be:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c2:	f383 8810 	msr	PRIMASK, r3
}
 80036c6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2280      	movs	r2, #128	; 0x80
 80036cc:	2120      	movs	r1, #32
 80036ce:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d6:	f3ef 8310 	mrs	r3, PRIMASK
 80036da:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80036dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036e0:	2301      	movs	r3, #1
 80036e2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036e6:	f383 8810 	msr	PRIMASK, r3
}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2110      	movs	r1, #16
 80036f8:	438a      	bics	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003702:	f383 8810 	msr	PRIMASK, r3
}
 8003706:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370c:	0018      	movs	r0, r3
 800370e:	f7fd fca3 	bl	8001058 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2202      	movs	r2, #2
 8003716:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2258      	movs	r2, #88	; 0x58
 800371c:	5a9a      	ldrh	r2, [r3, r2]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	215a      	movs	r1, #90	; 0x5a
 8003722:	5a5b      	ldrh	r3, [r3, r1]
 8003724:	b29b      	uxth	r3, r3
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	b29a      	uxth	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	0011      	movs	r1, r2
 800372e:	0018      	movs	r0, r3
 8003730:	f000 f8e0 	bl	80038f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003734:	e0c2      	b.n	80038bc <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2258      	movs	r2, #88	; 0x58
 800373a:	5a99      	ldrh	r1, [r3, r2]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	225a      	movs	r2, #90	; 0x5a
 8003740:	5a9b      	ldrh	r3, [r3, r2]
 8003742:	b29a      	uxth	r2, r3
 8003744:	208e      	movs	r0, #142	; 0x8e
 8003746:	183b      	adds	r3, r7, r0
 8003748:	1a8a      	subs	r2, r1, r2
 800374a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	225a      	movs	r2, #90	; 0x5a
 8003750:	5a9b      	ldrh	r3, [r3, r2]
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d100      	bne.n	800375a <HAL_UART_IRQHandler+0x44a>
 8003758:	e0b2      	b.n	80038c0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800375a:	183b      	adds	r3, r7, r0
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d100      	bne.n	8003764 <HAL_UART_IRQHandler+0x454>
 8003762:	e0ad      	b.n	80038c0 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003764:	f3ef 8310 	mrs	r3, PRIMASK
 8003768:	60fb      	str	r3, [r7, #12]
  return(result);
 800376a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800376c:	2488      	movs	r4, #136	; 0x88
 800376e:	193a      	adds	r2, r7, r4
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	2301      	movs	r3, #1
 8003774:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f383 8810 	msr	PRIMASK, r3
}
 800377c:	46c0      	nop			; (mov r8, r8)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4951      	ldr	r1, [pc, #324]	; (80038d0 <HAL_UART_IRQHandler+0x5c0>)
 800378a:	400a      	ands	r2, r1
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	193b      	adds	r3, r7, r4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f383 8810 	msr	PRIMASK, r3
}
 800379a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800379c:	f3ef 8310 	mrs	r3, PRIMASK
 80037a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80037a2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a4:	2484      	movs	r4, #132	; 0x84
 80037a6:	193a      	adds	r2, r7, r4
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	2301      	movs	r3, #1
 80037ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f383 8810 	msr	PRIMASK, r3
}
 80037b4:	46c0      	nop			; (mov r8, r8)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2101      	movs	r1, #1
 80037c2:	438a      	bics	r2, r1
 80037c4:	609a      	str	r2, [r3, #8]
 80037c6:	193b      	adds	r3, r7, r4
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	f383 8810 	msr	PRIMASK, r3
}
 80037d2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2280      	movs	r2, #128	; 0x80
 80037d8:	2120      	movs	r1, #32
 80037da:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e8:	f3ef 8310 	mrs	r3, PRIMASK
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f0:	2480      	movs	r4, #128	; 0x80
 80037f2:	193a      	adds	r2, r7, r4
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	2301      	movs	r3, #1
 80037f8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	f383 8810 	msr	PRIMASK, r3
}
 8003800:	46c0      	nop			; (mov r8, r8)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2110      	movs	r1, #16
 800380e:	438a      	bics	r2, r1
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	193b      	adds	r3, r7, r4
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381a:	f383 8810 	msr	PRIMASK, r3
}
 800381e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003826:	183b      	adds	r3, r7, r0
 8003828:	881a      	ldrh	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	0011      	movs	r1, r2
 800382e:	0018      	movs	r0, r3
 8003830:	f000 f860 	bl	80038f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003834:	e044      	b.n	80038c0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003836:	23a4      	movs	r3, #164	; 0xa4
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	2380      	movs	r3, #128	; 0x80
 800383e:	035b      	lsls	r3, r3, #13
 8003840:	4013      	ands	r3, r2
 8003842:	d010      	beq.n	8003866 <HAL_UART_IRQHandler+0x556>
 8003844:	239c      	movs	r3, #156	; 0x9c
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	03db      	lsls	r3, r3, #15
 800384e:	4013      	ands	r3, r2
 8003850:	d009      	beq.n	8003866 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2280      	movs	r2, #128	; 0x80
 8003858:	0352      	lsls	r2, r2, #13
 800385a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	0018      	movs	r0, r3
 8003860:	f000 fd44 	bl	80042ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003864:	e02f      	b.n	80038c6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003866:	23a4      	movs	r3, #164	; 0xa4
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2280      	movs	r2, #128	; 0x80
 800386e:	4013      	ands	r3, r2
 8003870:	d00f      	beq.n	8003892 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003872:	23a0      	movs	r3, #160	; 0xa0
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2280      	movs	r2, #128	; 0x80
 800387a:	4013      	ands	r3, r2
 800387c:	d009      	beq.n	8003892 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d01e      	beq.n	80038c4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	0010      	movs	r0, r2
 800388e:	4798      	blx	r3
    }
    return;
 8003890:	e018      	b.n	80038c4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003892:	23a4      	movs	r3, #164	; 0xa4
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2240      	movs	r2, #64	; 0x40
 800389a:	4013      	ands	r3, r2
 800389c:	d013      	beq.n	80038c6 <HAL_UART_IRQHandler+0x5b6>
 800389e:	23a0      	movs	r3, #160	; 0xa0
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2240      	movs	r2, #64	; 0x40
 80038a6:	4013      	ands	r3, r2
 80038a8:	d00d      	beq.n	80038c6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	0018      	movs	r0, r3
 80038ae:	f000 fcf2 	bl	8004296 <UART_EndTransmit_IT>
    return;
 80038b2:	e008      	b.n	80038c6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	e006      	b.n	80038c6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80038b8:	46c0      	nop			; (mov r8, r8)
 80038ba:	e004      	b.n	80038c6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	e002      	b.n	80038c6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80038c0:	46c0      	nop			; (mov r8, r8)
 80038c2:	e000      	b.n	80038c6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80038c4:	46c0      	nop			; (mov r8, r8)
  }

}
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b02b      	add	sp, #172	; 0xac
 80038ca:	bd90      	pop	{r4, r7, pc}
 80038cc:	fffffeff 	.word	0xfffffeff
 80038d0:	fffffedf 	.word	0xfffffedf

080038d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80038dc:	46c0      	nop			; (mov r8, r8)
 80038de:	46bd      	mov	sp, r7
 80038e0:	b002      	add	sp, #8
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b002      	add	sp, #8
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	000a      	movs	r2, r1
 80038fe:	1cbb      	adds	r3, r7, #2
 8003900:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	46bd      	mov	sp, r7
 8003906:	b002      	add	sp, #8
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800390c:	b5b0      	push	{r4, r5, r7, lr}
 800390e:	b08e      	sub	sp, #56	; 0x38
 8003910:	af00      	add	r7, sp, #0
 8003912:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003914:	231a      	movs	r3, #26
 8003916:	2218      	movs	r2, #24
 8003918:	189b      	adds	r3, r3, r2
 800391a:	19db      	adds	r3, r3, r7
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	431a      	orrs	r2, r3
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	431a      	orrs	r2, r3
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	4313      	orrs	r3, r2
 8003936:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4ac6      	ldr	r2, [pc, #792]	; (8003c58 <UART_SetConfig+0x34c>)
 8003940:	4013      	ands	r3, r2
 8003942:	0019      	movs	r1, r3
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800394a:	430a      	orrs	r2, r1
 800394c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	4ac1      	ldr	r2, [pc, #772]	; (8003c5c <UART_SetConfig+0x350>)
 8003956:	4013      	ands	r3, r2
 8003958:	0019      	movs	r1, r3
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4abb      	ldr	r2, [pc, #748]	; (8003c60 <UART_SetConfig+0x354>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d004      	beq.n	8003980 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800397c:	4313      	orrs	r3, r2
 800397e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	4ab7      	ldr	r2, [pc, #732]	; (8003c64 <UART_SetConfig+0x358>)
 8003988:	4013      	ands	r3, r2
 800398a:	0019      	movs	r1, r3
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003992:	430a      	orrs	r2, r1
 8003994:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4ab3      	ldr	r2, [pc, #716]	; (8003c68 <UART_SetConfig+0x35c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d131      	bne.n	8003a04 <UART_SetConfig+0xf8>
 80039a0:	4bb2      	ldr	r3, [pc, #712]	; (8003c6c <UART_SetConfig+0x360>)
 80039a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a4:	2203      	movs	r2, #3
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d01d      	beq.n	80039e8 <UART_SetConfig+0xdc>
 80039ac:	d823      	bhi.n	80039f6 <UART_SetConfig+0xea>
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d00c      	beq.n	80039cc <UART_SetConfig+0xc0>
 80039b2:	d820      	bhi.n	80039f6 <UART_SetConfig+0xea>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <UART_SetConfig+0xb2>
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d00e      	beq.n	80039da <UART_SetConfig+0xce>
 80039bc:	e01b      	b.n	80039f6 <UART_SetConfig+0xea>
 80039be:	231b      	movs	r3, #27
 80039c0:	2218      	movs	r2, #24
 80039c2:	189b      	adds	r3, r3, r2
 80039c4:	19db      	adds	r3, r3, r7
 80039c6:	2201      	movs	r2, #1
 80039c8:	701a      	strb	r2, [r3, #0]
 80039ca:	e09c      	b.n	8003b06 <UART_SetConfig+0x1fa>
 80039cc:	231b      	movs	r3, #27
 80039ce:	2218      	movs	r2, #24
 80039d0:	189b      	adds	r3, r3, r2
 80039d2:	19db      	adds	r3, r3, r7
 80039d4:	2202      	movs	r2, #2
 80039d6:	701a      	strb	r2, [r3, #0]
 80039d8:	e095      	b.n	8003b06 <UART_SetConfig+0x1fa>
 80039da:	231b      	movs	r3, #27
 80039dc:	2218      	movs	r2, #24
 80039de:	189b      	adds	r3, r3, r2
 80039e0:	19db      	adds	r3, r3, r7
 80039e2:	2204      	movs	r2, #4
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	e08e      	b.n	8003b06 <UART_SetConfig+0x1fa>
 80039e8:	231b      	movs	r3, #27
 80039ea:	2218      	movs	r2, #24
 80039ec:	189b      	adds	r3, r3, r2
 80039ee:	19db      	adds	r3, r3, r7
 80039f0:	2208      	movs	r2, #8
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	e087      	b.n	8003b06 <UART_SetConfig+0x1fa>
 80039f6:	231b      	movs	r3, #27
 80039f8:	2218      	movs	r2, #24
 80039fa:	189b      	adds	r3, r3, r2
 80039fc:	19db      	adds	r3, r3, r7
 80039fe:	2210      	movs	r2, #16
 8003a00:	701a      	strb	r2, [r3, #0]
 8003a02:	e080      	b.n	8003b06 <UART_SetConfig+0x1fa>
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a99      	ldr	r2, [pc, #612]	; (8003c70 <UART_SetConfig+0x364>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d131      	bne.n	8003a72 <UART_SetConfig+0x166>
 8003a0e:	4b97      	ldr	r3, [pc, #604]	; (8003c6c <UART_SetConfig+0x360>)
 8003a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a12:	220c      	movs	r2, #12
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b0c      	cmp	r3, #12
 8003a18:	d01d      	beq.n	8003a56 <UART_SetConfig+0x14a>
 8003a1a:	d823      	bhi.n	8003a64 <UART_SetConfig+0x158>
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d00c      	beq.n	8003a3a <UART_SetConfig+0x12e>
 8003a20:	d820      	bhi.n	8003a64 <UART_SetConfig+0x158>
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <UART_SetConfig+0x120>
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d00e      	beq.n	8003a48 <UART_SetConfig+0x13c>
 8003a2a:	e01b      	b.n	8003a64 <UART_SetConfig+0x158>
 8003a2c:	231b      	movs	r3, #27
 8003a2e:	2218      	movs	r2, #24
 8003a30:	189b      	adds	r3, r3, r2
 8003a32:	19db      	adds	r3, r3, r7
 8003a34:	2200      	movs	r2, #0
 8003a36:	701a      	strb	r2, [r3, #0]
 8003a38:	e065      	b.n	8003b06 <UART_SetConfig+0x1fa>
 8003a3a:	231b      	movs	r3, #27
 8003a3c:	2218      	movs	r2, #24
 8003a3e:	189b      	adds	r3, r3, r2
 8003a40:	19db      	adds	r3, r3, r7
 8003a42:	2202      	movs	r2, #2
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	e05e      	b.n	8003b06 <UART_SetConfig+0x1fa>
 8003a48:	231b      	movs	r3, #27
 8003a4a:	2218      	movs	r2, #24
 8003a4c:	189b      	adds	r3, r3, r2
 8003a4e:	19db      	adds	r3, r3, r7
 8003a50:	2204      	movs	r2, #4
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	e057      	b.n	8003b06 <UART_SetConfig+0x1fa>
 8003a56:	231b      	movs	r3, #27
 8003a58:	2218      	movs	r2, #24
 8003a5a:	189b      	adds	r3, r3, r2
 8003a5c:	19db      	adds	r3, r3, r7
 8003a5e:	2208      	movs	r2, #8
 8003a60:	701a      	strb	r2, [r3, #0]
 8003a62:	e050      	b.n	8003b06 <UART_SetConfig+0x1fa>
 8003a64:	231b      	movs	r3, #27
 8003a66:	2218      	movs	r2, #24
 8003a68:	189b      	adds	r3, r3, r2
 8003a6a:	19db      	adds	r3, r3, r7
 8003a6c:	2210      	movs	r2, #16
 8003a6e:	701a      	strb	r2, [r3, #0]
 8003a70:	e049      	b.n	8003b06 <UART_SetConfig+0x1fa>
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a7a      	ldr	r2, [pc, #488]	; (8003c60 <UART_SetConfig+0x354>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d13e      	bne.n	8003afa <UART_SetConfig+0x1ee>
 8003a7c:	4b7b      	ldr	r3, [pc, #492]	; (8003c6c <UART_SetConfig+0x360>)
 8003a7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a80:	23c0      	movs	r3, #192	; 0xc0
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	4013      	ands	r3, r2
 8003a86:	22c0      	movs	r2, #192	; 0xc0
 8003a88:	0112      	lsls	r2, r2, #4
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d027      	beq.n	8003ade <UART_SetConfig+0x1d2>
 8003a8e:	22c0      	movs	r2, #192	; 0xc0
 8003a90:	0112      	lsls	r2, r2, #4
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d82a      	bhi.n	8003aec <UART_SetConfig+0x1e0>
 8003a96:	2280      	movs	r2, #128	; 0x80
 8003a98:	0112      	lsls	r2, r2, #4
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d011      	beq.n	8003ac2 <UART_SetConfig+0x1b6>
 8003a9e:	2280      	movs	r2, #128	; 0x80
 8003aa0:	0112      	lsls	r2, r2, #4
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d822      	bhi.n	8003aec <UART_SetConfig+0x1e0>
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d004      	beq.n	8003ab4 <UART_SetConfig+0x1a8>
 8003aaa:	2280      	movs	r2, #128	; 0x80
 8003aac:	00d2      	lsls	r2, r2, #3
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00e      	beq.n	8003ad0 <UART_SetConfig+0x1c4>
 8003ab2:	e01b      	b.n	8003aec <UART_SetConfig+0x1e0>
 8003ab4:	231b      	movs	r3, #27
 8003ab6:	2218      	movs	r2, #24
 8003ab8:	189b      	adds	r3, r3, r2
 8003aba:	19db      	adds	r3, r3, r7
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
 8003ac0:	e021      	b.n	8003b06 <UART_SetConfig+0x1fa>
 8003ac2:	231b      	movs	r3, #27
 8003ac4:	2218      	movs	r2, #24
 8003ac6:	189b      	adds	r3, r3, r2
 8003ac8:	19db      	adds	r3, r3, r7
 8003aca:	2202      	movs	r2, #2
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e01a      	b.n	8003b06 <UART_SetConfig+0x1fa>
 8003ad0:	231b      	movs	r3, #27
 8003ad2:	2218      	movs	r2, #24
 8003ad4:	189b      	adds	r3, r3, r2
 8003ad6:	19db      	adds	r3, r3, r7
 8003ad8:	2204      	movs	r2, #4
 8003ada:	701a      	strb	r2, [r3, #0]
 8003adc:	e013      	b.n	8003b06 <UART_SetConfig+0x1fa>
 8003ade:	231b      	movs	r3, #27
 8003ae0:	2218      	movs	r2, #24
 8003ae2:	189b      	adds	r3, r3, r2
 8003ae4:	19db      	adds	r3, r3, r7
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	701a      	strb	r2, [r3, #0]
 8003aea:	e00c      	b.n	8003b06 <UART_SetConfig+0x1fa>
 8003aec:	231b      	movs	r3, #27
 8003aee:	2218      	movs	r2, #24
 8003af0:	189b      	adds	r3, r3, r2
 8003af2:	19db      	adds	r3, r3, r7
 8003af4:	2210      	movs	r2, #16
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	e005      	b.n	8003b06 <UART_SetConfig+0x1fa>
 8003afa:	231b      	movs	r3, #27
 8003afc:	2218      	movs	r2, #24
 8003afe:	189b      	adds	r3, r3, r2
 8003b00:	19db      	adds	r3, r3, r7
 8003b02:	2210      	movs	r2, #16
 8003b04:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a55      	ldr	r2, [pc, #340]	; (8003c60 <UART_SetConfig+0x354>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d000      	beq.n	8003b12 <UART_SetConfig+0x206>
 8003b10:	e084      	b.n	8003c1c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b12:	231b      	movs	r3, #27
 8003b14:	2218      	movs	r2, #24
 8003b16:	189b      	adds	r3, r3, r2
 8003b18:	19db      	adds	r3, r3, r7
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d01d      	beq.n	8003b5c <UART_SetConfig+0x250>
 8003b20:	dc20      	bgt.n	8003b64 <UART_SetConfig+0x258>
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d015      	beq.n	8003b52 <UART_SetConfig+0x246>
 8003b26:	dc1d      	bgt.n	8003b64 <UART_SetConfig+0x258>
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <UART_SetConfig+0x226>
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d005      	beq.n	8003b3c <UART_SetConfig+0x230>
 8003b30:	e018      	b.n	8003b64 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b32:	f7fe fb27 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8003b36:	0003      	movs	r3, r0
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b3a:	e01c      	b.n	8003b76 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b3c:	4b4b      	ldr	r3, [pc, #300]	; (8003c6c <UART_SetConfig+0x360>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2210      	movs	r2, #16
 8003b42:	4013      	ands	r3, r2
 8003b44:	d002      	beq.n	8003b4c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003b46:	4b4b      	ldr	r3, [pc, #300]	; (8003c74 <UART_SetConfig+0x368>)
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003b4a:	e014      	b.n	8003b76 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003b4c:	4b4a      	ldr	r3, [pc, #296]	; (8003c78 <UART_SetConfig+0x36c>)
 8003b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b50:	e011      	b.n	8003b76 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b52:	f7fe fa67 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8003b56:	0003      	movs	r3, r0
 8003b58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b5a:	e00c      	b.n	8003b76 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b62:	e008      	b.n	8003b76 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003b68:	231a      	movs	r3, #26
 8003b6a:	2218      	movs	r2, #24
 8003b6c:	189b      	adds	r3, r3, r2
 8003b6e:	19db      	adds	r3, r3, r7
 8003b70:	2201      	movs	r2, #1
 8003b72:	701a      	strb	r2, [r3, #0]
        break;
 8003b74:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d100      	bne.n	8003b7e <UART_SetConfig+0x272>
 8003b7c:	e132      	b.n	8003de4 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	0013      	movs	r3, r2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	189b      	adds	r3, r3, r2
 8003b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d305      	bcc.n	8003b9a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d906      	bls.n	8003ba8 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8003b9a:	231a      	movs	r3, #26
 8003b9c:	2218      	movs	r2, #24
 8003b9e:	189b      	adds	r3, r3, r2
 8003ba0:	19db      	adds	r3, r3, r7
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	e11d      	b.n	8003de4 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	6939      	ldr	r1, [r7, #16]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	000b      	movs	r3, r1
 8003bb6:	0e1b      	lsrs	r3, r3, #24
 8003bb8:	0010      	movs	r0, r2
 8003bba:	0205      	lsls	r5, r0, #8
 8003bbc:	431d      	orrs	r5, r3
 8003bbe:	000b      	movs	r3, r1
 8003bc0:	021c      	lsls	r4, r3, #8
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	68b8      	ldr	r0, [r7, #8]
 8003bd0:	68f9      	ldr	r1, [r7, #12]
 8003bd2:	1900      	adds	r0, r0, r4
 8003bd4:	4169      	adcs	r1, r5
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f7fc fb26 	bl	8000234 <__aeabi_uldivmod>
 8003be8:	0002      	movs	r2, r0
 8003bea:	000b      	movs	r3, r1
 8003bec:	0013      	movs	r3, r2
 8003bee:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf2:	23c0      	movs	r3, #192	; 0xc0
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d309      	bcc.n	8003c0e <UART_SetConfig+0x302>
 8003bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	035b      	lsls	r3, r3, #13
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d204      	bcs.n	8003c0e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c0a:	60da      	str	r2, [r3, #12]
 8003c0c:	e0ea      	b.n	8003de4 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8003c0e:	231a      	movs	r3, #26
 8003c10:	2218      	movs	r2, #24
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	19db      	adds	r3, r3, r7
 8003c16:	2201      	movs	r2, #1
 8003c18:	701a      	strb	r2, [r3, #0]
 8003c1a:	e0e3      	b.n	8003de4 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	2380      	movs	r3, #128	; 0x80
 8003c22:	021b      	lsls	r3, r3, #8
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d000      	beq.n	8003c2a <UART_SetConfig+0x31e>
 8003c28:	e085      	b.n	8003d36 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8003c2a:	231b      	movs	r3, #27
 8003c2c:	2218      	movs	r2, #24
 8003c2e:	189b      	adds	r3, r3, r2
 8003c30:	19db      	adds	r3, r3, r7
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d837      	bhi.n	8003ca8 <UART_SetConfig+0x39c>
 8003c38:	009a      	lsls	r2, r3, #2
 8003c3a:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <UART_SetConfig+0x370>)
 8003c3c:	18d3      	adds	r3, r2, r3
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c42:	f7fe fa9f 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8003c46:	0003      	movs	r3, r0
 8003c48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c4a:	e036      	b.n	8003cba <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c4c:	f7fe fab0 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 8003c50:	0003      	movs	r3, r0
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c54:	e031      	b.n	8003cba <UART_SetConfig+0x3ae>
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	efff69f3 	.word	0xefff69f3
 8003c5c:	ffffcfff 	.word	0xffffcfff
 8003c60:	40004800 	.word	0x40004800
 8003c64:	fffff4ff 	.word	0xfffff4ff
 8003c68:	40013800 	.word	0x40013800
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40004400 	.word	0x40004400
 8003c74:	003d0900 	.word	0x003d0900
 8003c78:	00f42400 	.word	0x00f42400
 8003c7c:	08005304 	.word	0x08005304
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c80:	4b60      	ldr	r3, [pc, #384]	; (8003e04 <UART_SetConfig+0x4f8>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2210      	movs	r2, #16
 8003c86:	4013      	ands	r3, r2
 8003c88:	d002      	beq.n	8003c90 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003c8a:	4b5f      	ldr	r3, [pc, #380]	; (8003e08 <UART_SetConfig+0x4fc>)
 8003c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c8e:	e014      	b.n	8003cba <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8003c90:	4b5e      	ldr	r3, [pc, #376]	; (8003e0c <UART_SetConfig+0x500>)
 8003c92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c94:	e011      	b.n	8003cba <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c96:	f7fe f9c5 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8003c9a:	0003      	movs	r3, r0
 8003c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c9e:	e00c      	b.n	8003cba <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ca6:	e008      	b.n	8003cba <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003cac:	231a      	movs	r3, #26
 8003cae:	2218      	movs	r2, #24
 8003cb0:	189b      	adds	r3, r3, r2
 8003cb2:	19db      	adds	r3, r3, r7
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	701a      	strb	r2, [r3, #0]
        break;
 8003cb8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d100      	bne.n	8003cc2 <UART_SetConfig+0x3b6>
 8003cc0:	e090      	b.n	8003de4 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc4:	005a      	lsls	r2, r3, #1
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	085b      	lsrs	r3, r3, #1
 8003ccc:	18d2      	adds	r2, r2, r3
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	0010      	movs	r0, r2
 8003cd6:	f7fc fa21 	bl	800011c <__udivsi3>
 8003cda:	0003      	movs	r3, r0
 8003cdc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce0:	2b0f      	cmp	r3, #15
 8003ce2:	d921      	bls.n	8003d28 <UART_SetConfig+0x41c>
 8003ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	025b      	lsls	r3, r3, #9
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d21c      	bcs.n	8003d28 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	200e      	movs	r0, #14
 8003cf4:	2418      	movs	r4, #24
 8003cf6:	1903      	adds	r3, r0, r4
 8003cf8:	19db      	adds	r3, r3, r7
 8003cfa:	210f      	movs	r1, #15
 8003cfc:	438a      	bics	r2, r1
 8003cfe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d02:	085b      	lsrs	r3, r3, #1
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2207      	movs	r2, #7
 8003d08:	4013      	ands	r3, r2
 8003d0a:	b299      	uxth	r1, r3
 8003d0c:	1903      	adds	r3, r0, r4
 8003d0e:	19db      	adds	r3, r3, r7
 8003d10:	1902      	adds	r2, r0, r4
 8003d12:	19d2      	adds	r2, r2, r7
 8003d14:	8812      	ldrh	r2, [r2, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	1902      	adds	r2, r0, r4
 8003d20:	19d2      	adds	r2, r2, r7
 8003d22:	8812      	ldrh	r2, [r2, #0]
 8003d24:	60da      	str	r2, [r3, #12]
 8003d26:	e05d      	b.n	8003de4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d28:	231a      	movs	r3, #26
 8003d2a:	2218      	movs	r2, #24
 8003d2c:	189b      	adds	r3, r3, r2
 8003d2e:	19db      	adds	r3, r3, r7
 8003d30:	2201      	movs	r2, #1
 8003d32:	701a      	strb	r2, [r3, #0]
 8003d34:	e056      	b.n	8003de4 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d36:	231b      	movs	r3, #27
 8003d38:	2218      	movs	r2, #24
 8003d3a:	189b      	adds	r3, r3, r2
 8003d3c:	19db      	adds	r3, r3, r7
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d822      	bhi.n	8003d8a <UART_SetConfig+0x47e>
 8003d44:	009a      	lsls	r2, r3, #2
 8003d46:	4b32      	ldr	r3, [pc, #200]	; (8003e10 <UART_SetConfig+0x504>)
 8003d48:	18d3      	adds	r3, r2, r3
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d4e:	f7fe fa19 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8003d52:	0003      	movs	r3, r0
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d56:	e021      	b.n	8003d9c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d58:	f7fe fa2a 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d60:	e01c      	b.n	8003d9c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d62:	4b28      	ldr	r3, [pc, #160]	; (8003e04 <UART_SetConfig+0x4f8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2210      	movs	r2, #16
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d002      	beq.n	8003d72 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003d6c:	4b26      	ldr	r3, [pc, #152]	; (8003e08 <UART_SetConfig+0x4fc>)
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003d70:	e014      	b.n	8003d9c <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8003d72:	4b26      	ldr	r3, [pc, #152]	; (8003e0c <UART_SetConfig+0x500>)
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d76:	e011      	b.n	8003d9c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d78:	f7fe f954 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8003d7c:	0003      	movs	r3, r0
 8003d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d80:	e00c      	b.n	8003d9c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d82:	2380      	movs	r3, #128	; 0x80
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d88:	e008      	b.n	8003d9c <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003d8e:	231a      	movs	r3, #26
 8003d90:	2218      	movs	r2, #24
 8003d92:	189b      	adds	r3, r3, r2
 8003d94:	19db      	adds	r3, r3, r7
 8003d96:	2201      	movs	r2, #1
 8003d98:	701a      	strb	r2, [r3, #0]
        break;
 8003d9a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d020      	beq.n	8003de4 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	085a      	lsrs	r2, r3, #1
 8003da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003daa:	18d2      	adds	r2, r2, r3
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	0019      	movs	r1, r3
 8003db2:	0010      	movs	r0, r2
 8003db4:	f7fc f9b2 	bl	800011c <__udivsi3>
 8003db8:	0003      	movs	r3, r0
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbe:	2b0f      	cmp	r3, #15
 8003dc0:	d90a      	bls.n	8003dd8 <UART_SetConfig+0x4cc>
 8003dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dc4:	2380      	movs	r3, #128	; 0x80
 8003dc6:	025b      	lsls	r3, r3, #9
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d205      	bcs.n	8003dd8 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60da      	str	r2, [r3, #12]
 8003dd6:	e005      	b.n	8003de4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003dd8:	231a      	movs	r3, #26
 8003dda:	2218      	movs	r2, #24
 8003ddc:	189b      	adds	r3, r3, r2
 8003dde:	19db      	adds	r3, r3, r7
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	2200      	movs	r2, #0
 8003de8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	2200      	movs	r2, #0
 8003dee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003df0:	231a      	movs	r3, #26
 8003df2:	2218      	movs	r2, #24
 8003df4:	189b      	adds	r3, r3, r2
 8003df6:	19db      	adds	r3, r3, r7
 8003df8:	781b      	ldrb	r3, [r3, #0]
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b00e      	add	sp, #56	; 0x38
 8003e00:	bdb0      	pop	{r4, r5, r7, pc}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	40021000 	.word	0x40021000
 8003e08:	003d0900 	.word	0x003d0900
 8003e0c:	00f42400 	.word	0x00f42400
 8003e10:	08005328 	.word	0x08005328

08003e14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	2201      	movs	r2, #1
 8003e22:	4013      	ands	r3, r2
 8003e24:	d00b      	beq.n	8003e3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	4a4a      	ldr	r2, [pc, #296]	; (8003f58 <UART_AdvFeatureConfig+0x144>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	0019      	movs	r1, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	2202      	movs	r2, #2
 8003e44:	4013      	ands	r3, r2
 8003e46:	d00b      	beq.n	8003e60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	4a43      	ldr	r2, [pc, #268]	; (8003f5c <UART_AdvFeatureConfig+0x148>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	0019      	movs	r1, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	2204      	movs	r2, #4
 8003e66:	4013      	ands	r3, r2
 8003e68:	d00b      	beq.n	8003e82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	4a3b      	ldr	r2, [pc, #236]	; (8003f60 <UART_AdvFeatureConfig+0x14c>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	0019      	movs	r1, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	2208      	movs	r2, #8
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d00b      	beq.n	8003ea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	4a34      	ldr	r2, [pc, #208]	; (8003f64 <UART_AdvFeatureConfig+0x150>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	0019      	movs	r1, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	2210      	movs	r2, #16
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d00b      	beq.n	8003ec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	4a2c      	ldr	r2, [pc, #176]	; (8003f68 <UART_AdvFeatureConfig+0x154>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	0019      	movs	r1, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	2220      	movs	r2, #32
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d00b      	beq.n	8003ee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	4a25      	ldr	r2, [pc, #148]	; (8003f6c <UART_AdvFeatureConfig+0x158>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	0019      	movs	r1, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	2240      	movs	r2, #64	; 0x40
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d01d      	beq.n	8003f2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	4a1d      	ldr	r2, [pc, #116]	; (8003f70 <UART_AdvFeatureConfig+0x15c>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	0019      	movs	r1, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f0e:	2380      	movs	r3, #128	; 0x80
 8003f10:	035b      	lsls	r3, r3, #13
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d10b      	bne.n	8003f2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	4a15      	ldr	r2, [pc, #84]	; (8003f74 <UART_AdvFeatureConfig+0x160>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	0019      	movs	r1, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	2280      	movs	r2, #128	; 0x80
 8003f34:	4013      	ands	r3, r2
 8003f36:	d00b      	beq.n	8003f50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	4a0e      	ldr	r2, [pc, #56]	; (8003f78 <UART_AdvFeatureConfig+0x164>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	0019      	movs	r1, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	605a      	str	r2, [r3, #4]
  }
}
 8003f50:	46c0      	nop			; (mov r8, r8)
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b002      	add	sp, #8
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	fffdffff 	.word	0xfffdffff
 8003f5c:	fffeffff 	.word	0xfffeffff
 8003f60:	fffbffff 	.word	0xfffbffff
 8003f64:	ffff7fff 	.word	0xffff7fff
 8003f68:	ffffefff 	.word	0xffffefff
 8003f6c:	ffffdfff 	.word	0xffffdfff
 8003f70:	ffefffff 	.word	0xffefffff
 8003f74:	ff9fffff 	.word	0xff9fffff
 8003f78:	fff7ffff 	.word	0xfff7ffff

08003f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b092      	sub	sp, #72	; 0x48
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2284      	movs	r2, #132	; 0x84
 8003f88:	2100      	movs	r1, #0
 8003f8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f8c:	f7fc fe9e 	bl	8000ccc <HAL_GetTick>
 8003f90:	0003      	movs	r3, r0
 8003f92:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2208      	movs	r2, #8
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d12c      	bne.n	8003ffc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa4:	2280      	movs	r2, #128	; 0x80
 8003fa6:	0391      	lsls	r1, r2, #14
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4a46      	ldr	r2, [pc, #280]	; (80040c4 <UART_CheckIdleState+0x148>)
 8003fac:	9200      	str	r2, [sp, #0]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f000 f88c 	bl	80040cc <UART_WaitOnFlagUntilTimeout>
 8003fb4:	1e03      	subs	r3, r0, #0
 8003fb6:	d021      	beq.n	8003ffc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	f383 8810 	msr	PRIMASK, r3
}
 8003fcc:	46c0      	nop			; (mov r8, r8)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2180      	movs	r1, #128	; 0x80
 8003fda:	438a      	bics	r2, r1
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	f383 8810 	msr	PRIMASK, r3
}
 8003fe8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2220      	movs	r2, #32
 8003fee:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2278      	movs	r2, #120	; 0x78
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e05f      	b.n	80040bc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2204      	movs	r2, #4
 8004004:	4013      	ands	r3, r2
 8004006:	2b04      	cmp	r3, #4
 8004008:	d146      	bne.n	8004098 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800400a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400c:	2280      	movs	r2, #128	; 0x80
 800400e:	03d1      	lsls	r1, r2, #15
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	4a2c      	ldr	r2, [pc, #176]	; (80040c4 <UART_CheckIdleState+0x148>)
 8004014:	9200      	str	r2, [sp, #0]
 8004016:	2200      	movs	r2, #0
 8004018:	f000 f858 	bl	80040cc <UART_WaitOnFlagUntilTimeout>
 800401c:	1e03      	subs	r3, r0, #0
 800401e:	d03b      	beq.n	8004098 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004020:	f3ef 8310 	mrs	r3, PRIMASK
 8004024:	60fb      	str	r3, [r7, #12]
  return(result);
 8004026:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004028:	637b      	str	r3, [r7, #52]	; 0x34
 800402a:	2301      	movs	r3, #1
 800402c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f383 8810 	msr	PRIMASK, r3
}
 8004034:	46c0      	nop			; (mov r8, r8)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4921      	ldr	r1, [pc, #132]	; (80040c8 <UART_CheckIdleState+0x14c>)
 8004042:	400a      	ands	r2, r1
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004048:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f383 8810 	msr	PRIMASK, r3
}
 8004050:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004052:	f3ef 8310 	mrs	r3, PRIMASK
 8004056:	61bb      	str	r3, [r7, #24]
  return(result);
 8004058:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405a:	633b      	str	r3, [r7, #48]	; 0x30
 800405c:	2301      	movs	r3, #1
 800405e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f383 8810 	msr	PRIMASK, r3
}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2101      	movs	r1, #1
 8004074:	438a      	bics	r2, r1
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	f383 8810 	msr	PRIMASK, r3
}
 8004082:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2280      	movs	r2, #128	; 0x80
 8004088:	2120      	movs	r1, #32
 800408a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2278      	movs	r2, #120	; 0x78
 8004090:	2100      	movs	r1, #0
 8004092:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e011      	b.n	80040bc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2280      	movs	r2, #128	; 0x80
 80040a2:	2120      	movs	r1, #32
 80040a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2278      	movs	r2, #120	; 0x78
 80040b6:	2100      	movs	r1, #0
 80040b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	0018      	movs	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	b010      	add	sp, #64	; 0x40
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	01ffffff 	.word	0x01ffffff
 80040c8:	fffffedf 	.word	0xfffffedf

080040cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	1dfb      	adds	r3, r7, #7
 80040da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040dc:	e04b      	b.n	8004176 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	3301      	adds	r3, #1
 80040e2:	d048      	beq.n	8004176 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e4:	f7fc fdf2 	bl	8000ccc <HAL_GetTick>
 80040e8:	0002      	movs	r2, r0
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d302      	bcc.n	80040fa <UART_WaitOnFlagUntilTimeout+0x2e>
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e04b      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2204      	movs	r2, #4
 8004106:	4013      	ands	r3, r2
 8004108:	d035      	beq.n	8004176 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	2208      	movs	r2, #8
 8004112:	4013      	ands	r3, r2
 8004114:	2b08      	cmp	r3, #8
 8004116:	d111      	bne.n	800413c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2208      	movs	r2, #8
 800411e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	0018      	movs	r0, r3
 8004124:	f000 f83c 	bl	80041a0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2284      	movs	r2, #132	; 0x84
 800412c:	2108      	movs	r1, #8
 800412e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2278      	movs	r2, #120	; 0x78
 8004134:	2100      	movs	r1, #0
 8004136:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e02c      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69da      	ldr	r2, [r3, #28]
 8004142:	2380      	movs	r3, #128	; 0x80
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	401a      	ands	r2, r3
 8004148:	2380      	movs	r3, #128	; 0x80
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	429a      	cmp	r2, r3
 800414e:	d112      	bne.n	8004176 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2280      	movs	r2, #128	; 0x80
 8004156:	0112      	lsls	r2, r2, #4
 8004158:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	0018      	movs	r0, r3
 800415e:	f000 f81f 	bl	80041a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2284      	movs	r2, #132	; 0x84
 8004166:	2120      	movs	r1, #32
 8004168:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2278      	movs	r2, #120	; 0x78
 800416e:	2100      	movs	r1, #0
 8004170:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e00f      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	4013      	ands	r3, r2
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	425a      	negs	r2, r3
 8004186:	4153      	adcs	r3, r2
 8004188:	b2db      	uxtb	r3, r3
 800418a:	001a      	movs	r2, r3
 800418c:	1dfb      	adds	r3, r7, #7
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d0a4      	beq.n	80040de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	0018      	movs	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	b004      	add	sp, #16
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08e      	sub	sp, #56	; 0x38
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a8:	f3ef 8310 	mrs	r3, PRIMASK
 80041ac:	617b      	str	r3, [r7, #20]
  return(result);
 80041ae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
 80041b2:	2301      	movs	r3, #1
 80041b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	f383 8810 	msr	PRIMASK, r3
}
 80041bc:	46c0      	nop			; (mov r8, r8)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4926      	ldr	r1, [pc, #152]	; (8004264 <UART_EndRxTransfer+0xc4>)
 80041ca:	400a      	ands	r2, r1
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f383 8810 	msr	PRIMASK, r3
}
 80041d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041da:	f3ef 8310 	mrs	r3, PRIMASK
 80041de:	623b      	str	r3, [r7, #32]
  return(result);
 80041e0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e2:	633b      	str	r3, [r7, #48]	; 0x30
 80041e4:	2301      	movs	r3, #1
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	f383 8810 	msr	PRIMASK, r3
}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2101      	movs	r1, #1
 80041fc:	438a      	bics	r2, r1
 80041fe:	609a      	str	r2, [r3, #8]
 8004200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	f383 8810 	msr	PRIMASK, r3
}
 800420a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004210:	2b01      	cmp	r3, #1
 8004212:	d118      	bne.n	8004246 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004214:	f3ef 8310 	mrs	r3, PRIMASK
 8004218:	60bb      	str	r3, [r7, #8]
  return(result);
 800421a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800421e:	2301      	movs	r3, #1
 8004220:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f383 8810 	msr	PRIMASK, r3
}
 8004228:	46c0      	nop			; (mov r8, r8)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2110      	movs	r1, #16
 8004236:	438a      	bics	r2, r1
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f383 8810 	msr	PRIMASK, r3
}
 8004244:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2280      	movs	r2, #128	; 0x80
 800424a:	2120      	movs	r1, #32
 800424c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	669a      	str	r2, [r3, #104]	; 0x68
}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	46bd      	mov	sp, r7
 800425e:	b00e      	add	sp, #56	; 0x38
 8004260:	bd80      	pop	{r7, pc}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	fffffedf 	.word	0xfffffedf

08004268 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004274:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	225a      	movs	r2, #90	; 0x5a
 800427a:	2100      	movs	r1, #0
 800427c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2252      	movs	r2, #82	; 0x52
 8004282:	2100      	movs	r1, #0
 8004284:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	0018      	movs	r0, r3
 800428a:	f7ff fb2b 	bl	80038e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	46bd      	mov	sp, r7
 8004292:	b004      	add	sp, #16
 8004294:	bd80      	pop	{r7, pc}

08004296 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b086      	sub	sp, #24
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800429e:	f3ef 8310 	mrs	r3, PRIMASK
 80042a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80042a4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	2301      	movs	r3, #1
 80042aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f383 8810 	msr	PRIMASK, r3
}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2140      	movs	r1, #64	; 0x40
 80042c0:	438a      	bics	r2, r1
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f383 8810 	msr	PRIMASK, r3
}
 80042ce:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	0018      	movs	r0, r3
 80042e0:	f7ff faf8 	bl	80038d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b006      	add	sp, #24
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042f4:	46c0      	nop			; (mov r8, r8)
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b002      	add	sp, #8
 80042fa:	bd80      	pop	{r7, pc}

080042fc <std>:
 80042fc:	2300      	movs	r3, #0
 80042fe:	b510      	push	{r4, lr}
 8004300:	0004      	movs	r4, r0
 8004302:	6003      	str	r3, [r0, #0]
 8004304:	6043      	str	r3, [r0, #4]
 8004306:	6083      	str	r3, [r0, #8]
 8004308:	8181      	strh	r1, [r0, #12]
 800430a:	6643      	str	r3, [r0, #100]	; 0x64
 800430c:	81c2      	strh	r2, [r0, #14]
 800430e:	6103      	str	r3, [r0, #16]
 8004310:	6143      	str	r3, [r0, #20]
 8004312:	6183      	str	r3, [r0, #24]
 8004314:	0019      	movs	r1, r3
 8004316:	2208      	movs	r2, #8
 8004318:	305c      	adds	r0, #92	; 0x5c
 800431a:	f000 fa15 	bl	8004748 <memset>
 800431e:	4b0b      	ldr	r3, [pc, #44]	; (800434c <std+0x50>)
 8004320:	6224      	str	r4, [r4, #32]
 8004322:	6263      	str	r3, [r4, #36]	; 0x24
 8004324:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <std+0x54>)
 8004326:	62a3      	str	r3, [r4, #40]	; 0x28
 8004328:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <std+0x58>)
 800432a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800432c:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <std+0x5c>)
 800432e:	6323      	str	r3, [r4, #48]	; 0x30
 8004330:	4b0a      	ldr	r3, [pc, #40]	; (800435c <std+0x60>)
 8004332:	429c      	cmp	r4, r3
 8004334:	d005      	beq.n	8004342 <std+0x46>
 8004336:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <std+0x64>)
 8004338:	429c      	cmp	r4, r3
 800433a:	d002      	beq.n	8004342 <std+0x46>
 800433c:	4b09      	ldr	r3, [pc, #36]	; (8004364 <std+0x68>)
 800433e:	429c      	cmp	r4, r3
 8004340:	d103      	bne.n	800434a <std+0x4e>
 8004342:	0020      	movs	r0, r4
 8004344:	3058      	adds	r0, #88	; 0x58
 8004346:	f000 fa7f 	bl	8004848 <__retarget_lock_init_recursive>
 800434a:	bd10      	pop	{r4, pc}
 800434c:	08004565 	.word	0x08004565
 8004350:	0800458d 	.word	0x0800458d
 8004354:	080045c5 	.word	0x080045c5
 8004358:	080045f1 	.word	0x080045f1
 800435c:	2000020c 	.word	0x2000020c
 8004360:	20000274 	.word	0x20000274
 8004364:	200002dc 	.word	0x200002dc

08004368 <stdio_exit_handler>:
 8004368:	b510      	push	{r4, lr}
 800436a:	4a03      	ldr	r2, [pc, #12]	; (8004378 <stdio_exit_handler+0x10>)
 800436c:	4903      	ldr	r1, [pc, #12]	; (800437c <stdio_exit_handler+0x14>)
 800436e:	4804      	ldr	r0, [pc, #16]	; (8004380 <stdio_exit_handler+0x18>)
 8004370:	f000 f86c 	bl	800444c <_fwalk_sglue>
 8004374:	bd10      	pop	{r4, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	20000014 	.word	0x20000014
 800437c:	080050e9 	.word	0x080050e9
 8004380:	20000020 	.word	0x20000020

08004384 <cleanup_stdio>:
 8004384:	6841      	ldr	r1, [r0, #4]
 8004386:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <cleanup_stdio+0x30>)
 8004388:	b510      	push	{r4, lr}
 800438a:	0004      	movs	r4, r0
 800438c:	4299      	cmp	r1, r3
 800438e:	d001      	beq.n	8004394 <cleanup_stdio+0x10>
 8004390:	f000 feaa 	bl	80050e8 <_fflush_r>
 8004394:	68a1      	ldr	r1, [r4, #8]
 8004396:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <cleanup_stdio+0x34>)
 8004398:	4299      	cmp	r1, r3
 800439a:	d002      	beq.n	80043a2 <cleanup_stdio+0x1e>
 800439c:	0020      	movs	r0, r4
 800439e:	f000 fea3 	bl	80050e8 <_fflush_r>
 80043a2:	68e1      	ldr	r1, [r4, #12]
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <cleanup_stdio+0x38>)
 80043a6:	4299      	cmp	r1, r3
 80043a8:	d002      	beq.n	80043b0 <cleanup_stdio+0x2c>
 80043aa:	0020      	movs	r0, r4
 80043ac:	f000 fe9c 	bl	80050e8 <_fflush_r>
 80043b0:	bd10      	pop	{r4, pc}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	2000020c 	.word	0x2000020c
 80043b8:	20000274 	.word	0x20000274
 80043bc:	200002dc 	.word	0x200002dc

080043c0 <global_stdio_init.part.0>:
 80043c0:	b510      	push	{r4, lr}
 80043c2:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <global_stdio_init.part.0+0x28>)
 80043c4:	4a09      	ldr	r2, [pc, #36]	; (80043ec <global_stdio_init.part.0+0x2c>)
 80043c6:	2104      	movs	r1, #4
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	4809      	ldr	r0, [pc, #36]	; (80043f0 <global_stdio_init.part.0+0x30>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	f7ff ff95 	bl	80042fc <std>
 80043d2:	2201      	movs	r2, #1
 80043d4:	2109      	movs	r1, #9
 80043d6:	4807      	ldr	r0, [pc, #28]	; (80043f4 <global_stdio_init.part.0+0x34>)
 80043d8:	f7ff ff90 	bl	80042fc <std>
 80043dc:	2202      	movs	r2, #2
 80043de:	2112      	movs	r1, #18
 80043e0:	4805      	ldr	r0, [pc, #20]	; (80043f8 <global_stdio_init.part.0+0x38>)
 80043e2:	f7ff ff8b 	bl	80042fc <std>
 80043e6:	bd10      	pop	{r4, pc}
 80043e8:	20000344 	.word	0x20000344
 80043ec:	08004369 	.word	0x08004369
 80043f0:	2000020c 	.word	0x2000020c
 80043f4:	20000274 	.word	0x20000274
 80043f8:	200002dc 	.word	0x200002dc

080043fc <__sfp_lock_acquire>:
 80043fc:	b510      	push	{r4, lr}
 80043fe:	4802      	ldr	r0, [pc, #8]	; (8004408 <__sfp_lock_acquire+0xc>)
 8004400:	f000 fa23 	bl	800484a <__retarget_lock_acquire_recursive>
 8004404:	bd10      	pop	{r4, pc}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	2000034d 	.word	0x2000034d

0800440c <__sfp_lock_release>:
 800440c:	b510      	push	{r4, lr}
 800440e:	4802      	ldr	r0, [pc, #8]	; (8004418 <__sfp_lock_release+0xc>)
 8004410:	f000 fa1c 	bl	800484c <__retarget_lock_release_recursive>
 8004414:	bd10      	pop	{r4, pc}
 8004416:	46c0      	nop			; (mov r8, r8)
 8004418:	2000034d 	.word	0x2000034d

0800441c <__sinit>:
 800441c:	b510      	push	{r4, lr}
 800441e:	0004      	movs	r4, r0
 8004420:	f7ff ffec 	bl	80043fc <__sfp_lock_acquire>
 8004424:	6a23      	ldr	r3, [r4, #32]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <__sinit+0x14>
 800442a:	f7ff ffef 	bl	800440c <__sfp_lock_release>
 800442e:	bd10      	pop	{r4, pc}
 8004430:	4b04      	ldr	r3, [pc, #16]	; (8004444 <__sinit+0x28>)
 8004432:	6223      	str	r3, [r4, #32]
 8004434:	4b04      	ldr	r3, [pc, #16]	; (8004448 <__sinit+0x2c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1f6      	bne.n	800442a <__sinit+0xe>
 800443c:	f7ff ffc0 	bl	80043c0 <global_stdio_init.part.0>
 8004440:	e7f3      	b.n	800442a <__sinit+0xe>
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	08004385 	.word	0x08004385
 8004448:	20000344 	.word	0x20000344

0800444c <_fwalk_sglue>:
 800444c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800444e:	0014      	movs	r4, r2
 8004450:	2600      	movs	r6, #0
 8004452:	9000      	str	r0, [sp, #0]
 8004454:	9101      	str	r1, [sp, #4]
 8004456:	68a5      	ldr	r5, [r4, #8]
 8004458:	6867      	ldr	r7, [r4, #4]
 800445a:	3f01      	subs	r7, #1
 800445c:	d504      	bpl.n	8004468 <_fwalk_sglue+0x1c>
 800445e:	6824      	ldr	r4, [r4, #0]
 8004460:	2c00      	cmp	r4, #0
 8004462:	d1f8      	bne.n	8004456 <_fwalk_sglue+0xa>
 8004464:	0030      	movs	r0, r6
 8004466:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004468:	89ab      	ldrh	r3, [r5, #12]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d908      	bls.n	8004480 <_fwalk_sglue+0x34>
 800446e:	220e      	movs	r2, #14
 8004470:	5eab      	ldrsh	r3, [r5, r2]
 8004472:	3301      	adds	r3, #1
 8004474:	d004      	beq.n	8004480 <_fwalk_sglue+0x34>
 8004476:	0029      	movs	r1, r5
 8004478:	9800      	ldr	r0, [sp, #0]
 800447a:	9b01      	ldr	r3, [sp, #4]
 800447c:	4798      	blx	r3
 800447e:	4306      	orrs	r6, r0
 8004480:	3568      	adds	r5, #104	; 0x68
 8004482:	e7ea      	b.n	800445a <_fwalk_sglue+0xe>

08004484 <iprintf>:
 8004484:	b40f      	push	{r0, r1, r2, r3}
 8004486:	b507      	push	{r0, r1, r2, lr}
 8004488:	4905      	ldr	r1, [pc, #20]	; (80044a0 <iprintf+0x1c>)
 800448a:	ab04      	add	r3, sp, #16
 800448c:	6808      	ldr	r0, [r1, #0]
 800448e:	cb04      	ldmia	r3!, {r2}
 8004490:	6881      	ldr	r1, [r0, #8]
 8004492:	9301      	str	r3, [sp, #4]
 8004494:	f000 fb02 	bl	8004a9c <_vfiprintf_r>
 8004498:	b003      	add	sp, #12
 800449a:	bc08      	pop	{r3}
 800449c:	b004      	add	sp, #16
 800449e:	4718      	bx	r3
 80044a0:	2000006c 	.word	0x2000006c

080044a4 <_puts_r>:
 80044a4:	6a03      	ldr	r3, [r0, #32]
 80044a6:	b570      	push	{r4, r5, r6, lr}
 80044a8:	0005      	movs	r5, r0
 80044aa:	000e      	movs	r6, r1
 80044ac:	6884      	ldr	r4, [r0, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <_puts_r+0x12>
 80044b2:	f7ff ffb3 	bl	800441c <__sinit>
 80044b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044b8:	07db      	lsls	r3, r3, #31
 80044ba:	d405      	bmi.n	80044c8 <_puts_r+0x24>
 80044bc:	89a3      	ldrh	r3, [r4, #12]
 80044be:	059b      	lsls	r3, r3, #22
 80044c0:	d402      	bmi.n	80044c8 <_puts_r+0x24>
 80044c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044c4:	f000 f9c1 	bl	800484a <__retarget_lock_acquire_recursive>
 80044c8:	89a3      	ldrh	r3, [r4, #12]
 80044ca:	071b      	lsls	r3, r3, #28
 80044cc:	d502      	bpl.n	80044d4 <_puts_r+0x30>
 80044ce:	6923      	ldr	r3, [r4, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d11f      	bne.n	8004514 <_puts_r+0x70>
 80044d4:	0021      	movs	r1, r4
 80044d6:	0028      	movs	r0, r5
 80044d8:	f000 f8d2 	bl	8004680 <__swsetup_r>
 80044dc:	2800      	cmp	r0, #0
 80044de:	d019      	beq.n	8004514 <_puts_r+0x70>
 80044e0:	2501      	movs	r5, #1
 80044e2:	426d      	negs	r5, r5
 80044e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044e6:	07db      	lsls	r3, r3, #31
 80044e8:	d405      	bmi.n	80044f6 <_puts_r+0x52>
 80044ea:	89a3      	ldrh	r3, [r4, #12]
 80044ec:	059b      	lsls	r3, r3, #22
 80044ee:	d402      	bmi.n	80044f6 <_puts_r+0x52>
 80044f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044f2:	f000 f9ab 	bl	800484c <__retarget_lock_release_recursive>
 80044f6:	0028      	movs	r0, r5
 80044f8:	bd70      	pop	{r4, r5, r6, pc}
 80044fa:	3601      	adds	r6, #1
 80044fc:	60a3      	str	r3, [r4, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	da04      	bge.n	800450c <_puts_r+0x68>
 8004502:	69a2      	ldr	r2, [r4, #24]
 8004504:	429a      	cmp	r2, r3
 8004506:	dc16      	bgt.n	8004536 <_puts_r+0x92>
 8004508:	290a      	cmp	r1, #10
 800450a:	d014      	beq.n	8004536 <_puts_r+0x92>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	6022      	str	r2, [r4, #0]
 8004512:	7019      	strb	r1, [r3, #0]
 8004514:	68a3      	ldr	r3, [r4, #8]
 8004516:	7831      	ldrb	r1, [r6, #0]
 8004518:	3b01      	subs	r3, #1
 800451a:	2900      	cmp	r1, #0
 800451c:	d1ed      	bne.n	80044fa <_puts_r+0x56>
 800451e:	60a3      	str	r3, [r4, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	da0f      	bge.n	8004544 <_puts_r+0xa0>
 8004524:	0028      	movs	r0, r5
 8004526:	0022      	movs	r2, r4
 8004528:	310a      	adds	r1, #10
 800452a:	f000 f867 	bl	80045fc <__swbuf_r>
 800452e:	250a      	movs	r5, #10
 8004530:	3001      	adds	r0, #1
 8004532:	d1d7      	bne.n	80044e4 <_puts_r+0x40>
 8004534:	e7d4      	b.n	80044e0 <_puts_r+0x3c>
 8004536:	0022      	movs	r2, r4
 8004538:	0028      	movs	r0, r5
 800453a:	f000 f85f 	bl	80045fc <__swbuf_r>
 800453e:	3001      	adds	r0, #1
 8004540:	d1e8      	bne.n	8004514 <_puts_r+0x70>
 8004542:	e7cd      	b.n	80044e0 <_puts_r+0x3c>
 8004544:	250a      	movs	r5, #10
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	6022      	str	r2, [r4, #0]
 800454c:	701d      	strb	r5, [r3, #0]
 800454e:	e7c9      	b.n	80044e4 <_puts_r+0x40>

08004550 <puts>:
 8004550:	b510      	push	{r4, lr}
 8004552:	4b03      	ldr	r3, [pc, #12]	; (8004560 <puts+0x10>)
 8004554:	0001      	movs	r1, r0
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	f7ff ffa4 	bl	80044a4 <_puts_r>
 800455c:	bd10      	pop	{r4, pc}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	2000006c 	.word	0x2000006c

08004564 <__sread>:
 8004564:	b570      	push	{r4, r5, r6, lr}
 8004566:	000c      	movs	r4, r1
 8004568:	250e      	movs	r5, #14
 800456a:	5f49      	ldrsh	r1, [r1, r5]
 800456c:	f000 f91a 	bl	80047a4 <_read_r>
 8004570:	2800      	cmp	r0, #0
 8004572:	db03      	blt.n	800457c <__sread+0x18>
 8004574:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004576:	181b      	adds	r3, r3, r0
 8004578:	6563      	str	r3, [r4, #84]	; 0x54
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	4a02      	ldr	r2, [pc, #8]	; (8004588 <__sread+0x24>)
 8004580:	4013      	ands	r3, r2
 8004582:	81a3      	strh	r3, [r4, #12]
 8004584:	e7f9      	b.n	800457a <__sread+0x16>
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	ffffefff 	.word	0xffffefff

0800458c <__swrite>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	001f      	movs	r7, r3
 8004590:	898b      	ldrh	r3, [r1, #12]
 8004592:	0005      	movs	r5, r0
 8004594:	000c      	movs	r4, r1
 8004596:	0016      	movs	r6, r2
 8004598:	05db      	lsls	r3, r3, #23
 800459a:	d505      	bpl.n	80045a8 <__swrite+0x1c>
 800459c:	230e      	movs	r3, #14
 800459e:	5ec9      	ldrsh	r1, [r1, r3]
 80045a0:	2200      	movs	r2, #0
 80045a2:	2302      	movs	r3, #2
 80045a4:	f000 f8ea 	bl	800477c <_lseek_r>
 80045a8:	89a3      	ldrh	r3, [r4, #12]
 80045aa:	4a05      	ldr	r2, [pc, #20]	; (80045c0 <__swrite+0x34>)
 80045ac:	0028      	movs	r0, r5
 80045ae:	4013      	ands	r3, r2
 80045b0:	81a3      	strh	r3, [r4, #12]
 80045b2:	0032      	movs	r2, r6
 80045b4:	230e      	movs	r3, #14
 80045b6:	5ee1      	ldrsh	r1, [r4, r3]
 80045b8:	003b      	movs	r3, r7
 80045ba:	f000 f907 	bl	80047cc <_write_r>
 80045be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045c0:	ffffefff 	.word	0xffffefff

080045c4 <__sseek>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	000c      	movs	r4, r1
 80045c8:	250e      	movs	r5, #14
 80045ca:	5f49      	ldrsh	r1, [r1, r5]
 80045cc:	f000 f8d6 	bl	800477c <_lseek_r>
 80045d0:	89a3      	ldrh	r3, [r4, #12]
 80045d2:	1c42      	adds	r2, r0, #1
 80045d4:	d103      	bne.n	80045de <__sseek+0x1a>
 80045d6:	4a05      	ldr	r2, [pc, #20]	; (80045ec <__sseek+0x28>)
 80045d8:	4013      	ands	r3, r2
 80045da:	81a3      	strh	r3, [r4, #12]
 80045dc:	bd70      	pop	{r4, r5, r6, pc}
 80045de:	2280      	movs	r2, #128	; 0x80
 80045e0:	0152      	lsls	r2, r2, #5
 80045e2:	4313      	orrs	r3, r2
 80045e4:	81a3      	strh	r3, [r4, #12]
 80045e6:	6560      	str	r0, [r4, #84]	; 0x54
 80045e8:	e7f8      	b.n	80045dc <__sseek+0x18>
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	ffffefff 	.word	0xffffefff

080045f0 <__sclose>:
 80045f0:	b510      	push	{r4, lr}
 80045f2:	230e      	movs	r3, #14
 80045f4:	5ec9      	ldrsh	r1, [r1, r3]
 80045f6:	f000 f8af 	bl	8004758 <_close_r>
 80045fa:	bd10      	pop	{r4, pc}

080045fc <__swbuf_r>:
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fe:	0006      	movs	r6, r0
 8004600:	000d      	movs	r5, r1
 8004602:	0014      	movs	r4, r2
 8004604:	2800      	cmp	r0, #0
 8004606:	d004      	beq.n	8004612 <__swbuf_r+0x16>
 8004608:	6a03      	ldr	r3, [r0, #32]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <__swbuf_r+0x16>
 800460e:	f7ff ff05 	bl	800441c <__sinit>
 8004612:	69a3      	ldr	r3, [r4, #24]
 8004614:	60a3      	str	r3, [r4, #8]
 8004616:	89a3      	ldrh	r3, [r4, #12]
 8004618:	071b      	lsls	r3, r3, #28
 800461a:	d528      	bpl.n	800466e <__swbuf_r+0x72>
 800461c:	6923      	ldr	r3, [r4, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d025      	beq.n	800466e <__swbuf_r+0x72>
 8004622:	6923      	ldr	r3, [r4, #16]
 8004624:	6820      	ldr	r0, [r4, #0]
 8004626:	b2ef      	uxtb	r7, r5
 8004628:	1ac0      	subs	r0, r0, r3
 800462a:	6963      	ldr	r3, [r4, #20]
 800462c:	b2ed      	uxtb	r5, r5
 800462e:	4283      	cmp	r3, r0
 8004630:	dc05      	bgt.n	800463e <__swbuf_r+0x42>
 8004632:	0021      	movs	r1, r4
 8004634:	0030      	movs	r0, r6
 8004636:	f000 fd57 	bl	80050e8 <_fflush_r>
 800463a:	2800      	cmp	r0, #0
 800463c:	d11d      	bne.n	800467a <__swbuf_r+0x7e>
 800463e:	68a3      	ldr	r3, [r4, #8]
 8004640:	3001      	adds	r0, #1
 8004642:	3b01      	subs	r3, #1
 8004644:	60a3      	str	r3, [r4, #8]
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	6022      	str	r2, [r4, #0]
 800464c:	701f      	strb	r7, [r3, #0]
 800464e:	6963      	ldr	r3, [r4, #20]
 8004650:	4283      	cmp	r3, r0
 8004652:	d004      	beq.n	800465e <__swbuf_r+0x62>
 8004654:	89a3      	ldrh	r3, [r4, #12]
 8004656:	07db      	lsls	r3, r3, #31
 8004658:	d507      	bpl.n	800466a <__swbuf_r+0x6e>
 800465a:	2d0a      	cmp	r5, #10
 800465c:	d105      	bne.n	800466a <__swbuf_r+0x6e>
 800465e:	0021      	movs	r1, r4
 8004660:	0030      	movs	r0, r6
 8004662:	f000 fd41 	bl	80050e8 <_fflush_r>
 8004666:	2800      	cmp	r0, #0
 8004668:	d107      	bne.n	800467a <__swbuf_r+0x7e>
 800466a:	0028      	movs	r0, r5
 800466c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800466e:	0021      	movs	r1, r4
 8004670:	0030      	movs	r0, r6
 8004672:	f000 f805 	bl	8004680 <__swsetup_r>
 8004676:	2800      	cmp	r0, #0
 8004678:	d0d3      	beq.n	8004622 <__swbuf_r+0x26>
 800467a:	2501      	movs	r5, #1
 800467c:	426d      	negs	r5, r5
 800467e:	e7f4      	b.n	800466a <__swbuf_r+0x6e>

08004680 <__swsetup_r>:
 8004680:	4b30      	ldr	r3, [pc, #192]	; (8004744 <__swsetup_r+0xc4>)
 8004682:	b570      	push	{r4, r5, r6, lr}
 8004684:	0005      	movs	r5, r0
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	000c      	movs	r4, r1
 800468a:	2800      	cmp	r0, #0
 800468c:	d004      	beq.n	8004698 <__swsetup_r+0x18>
 800468e:	6a03      	ldr	r3, [r0, #32]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <__swsetup_r+0x18>
 8004694:	f7ff fec2 	bl	800441c <__sinit>
 8004698:	230c      	movs	r3, #12
 800469a:	5ee2      	ldrsh	r2, [r4, r3]
 800469c:	b293      	uxth	r3, r2
 800469e:	0711      	lsls	r1, r2, #28
 80046a0:	d423      	bmi.n	80046ea <__swsetup_r+0x6a>
 80046a2:	06d9      	lsls	r1, r3, #27
 80046a4:	d407      	bmi.n	80046b6 <__swsetup_r+0x36>
 80046a6:	2309      	movs	r3, #9
 80046a8:	2001      	movs	r0, #1
 80046aa:	602b      	str	r3, [r5, #0]
 80046ac:	3337      	adds	r3, #55	; 0x37
 80046ae:	4313      	orrs	r3, r2
 80046b0:	81a3      	strh	r3, [r4, #12]
 80046b2:	4240      	negs	r0, r0
 80046b4:	bd70      	pop	{r4, r5, r6, pc}
 80046b6:	075b      	lsls	r3, r3, #29
 80046b8:	d513      	bpl.n	80046e2 <__swsetup_r+0x62>
 80046ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046bc:	2900      	cmp	r1, #0
 80046be:	d008      	beq.n	80046d2 <__swsetup_r+0x52>
 80046c0:	0023      	movs	r3, r4
 80046c2:	3344      	adds	r3, #68	; 0x44
 80046c4:	4299      	cmp	r1, r3
 80046c6:	d002      	beq.n	80046ce <__swsetup_r+0x4e>
 80046c8:	0028      	movs	r0, r5
 80046ca:	f000 f8c1 	bl	8004850 <_free_r>
 80046ce:	2300      	movs	r3, #0
 80046d0:	6363      	str	r3, [r4, #52]	; 0x34
 80046d2:	2224      	movs	r2, #36	; 0x24
 80046d4:	89a3      	ldrh	r3, [r4, #12]
 80046d6:	4393      	bics	r3, r2
 80046d8:	81a3      	strh	r3, [r4, #12]
 80046da:	2300      	movs	r3, #0
 80046dc:	6063      	str	r3, [r4, #4]
 80046de:	6923      	ldr	r3, [r4, #16]
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	2308      	movs	r3, #8
 80046e4:	89a2      	ldrh	r2, [r4, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	81a3      	strh	r3, [r4, #12]
 80046ea:	6923      	ldr	r3, [r4, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10b      	bne.n	8004708 <__swsetup_r+0x88>
 80046f0:	21a0      	movs	r1, #160	; 0xa0
 80046f2:	2280      	movs	r2, #128	; 0x80
 80046f4:	89a3      	ldrh	r3, [r4, #12]
 80046f6:	0089      	lsls	r1, r1, #2
 80046f8:	0092      	lsls	r2, r2, #2
 80046fa:	400b      	ands	r3, r1
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d003      	beq.n	8004708 <__swsetup_r+0x88>
 8004700:	0021      	movs	r1, r4
 8004702:	0028      	movs	r0, r5
 8004704:	f000 fd44 	bl	8005190 <__smakebuf_r>
 8004708:	220c      	movs	r2, #12
 800470a:	5ea3      	ldrsh	r3, [r4, r2]
 800470c:	2001      	movs	r0, #1
 800470e:	001a      	movs	r2, r3
 8004710:	b299      	uxth	r1, r3
 8004712:	4002      	ands	r2, r0
 8004714:	4203      	tst	r3, r0
 8004716:	d00f      	beq.n	8004738 <__swsetup_r+0xb8>
 8004718:	2200      	movs	r2, #0
 800471a:	60a2      	str	r2, [r4, #8]
 800471c:	6962      	ldr	r2, [r4, #20]
 800471e:	4252      	negs	r2, r2
 8004720:	61a2      	str	r2, [r4, #24]
 8004722:	2000      	movs	r0, #0
 8004724:	6922      	ldr	r2, [r4, #16]
 8004726:	4282      	cmp	r2, r0
 8004728:	d1c4      	bne.n	80046b4 <__swsetup_r+0x34>
 800472a:	0609      	lsls	r1, r1, #24
 800472c:	d5c2      	bpl.n	80046b4 <__swsetup_r+0x34>
 800472e:	2240      	movs	r2, #64	; 0x40
 8004730:	4313      	orrs	r3, r2
 8004732:	81a3      	strh	r3, [r4, #12]
 8004734:	3801      	subs	r0, #1
 8004736:	e7bd      	b.n	80046b4 <__swsetup_r+0x34>
 8004738:	0788      	lsls	r0, r1, #30
 800473a:	d400      	bmi.n	800473e <__swsetup_r+0xbe>
 800473c:	6962      	ldr	r2, [r4, #20]
 800473e:	60a2      	str	r2, [r4, #8]
 8004740:	e7ef      	b.n	8004722 <__swsetup_r+0xa2>
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	2000006c 	.word	0x2000006c

08004748 <memset>:
 8004748:	0003      	movs	r3, r0
 800474a:	1882      	adds	r2, r0, r2
 800474c:	4293      	cmp	r3, r2
 800474e:	d100      	bne.n	8004752 <memset+0xa>
 8004750:	4770      	bx	lr
 8004752:	7019      	strb	r1, [r3, #0]
 8004754:	3301      	adds	r3, #1
 8004756:	e7f9      	b.n	800474c <memset+0x4>

08004758 <_close_r>:
 8004758:	2300      	movs	r3, #0
 800475a:	b570      	push	{r4, r5, r6, lr}
 800475c:	4d06      	ldr	r5, [pc, #24]	; (8004778 <_close_r+0x20>)
 800475e:	0004      	movs	r4, r0
 8004760:	0008      	movs	r0, r1
 8004762:	602b      	str	r3, [r5, #0]
 8004764:	f7fc f9ba 	bl	8000adc <_close>
 8004768:	1c43      	adds	r3, r0, #1
 800476a:	d103      	bne.n	8004774 <_close_r+0x1c>
 800476c:	682b      	ldr	r3, [r5, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d000      	beq.n	8004774 <_close_r+0x1c>
 8004772:	6023      	str	r3, [r4, #0]
 8004774:	bd70      	pop	{r4, r5, r6, pc}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	20000348 	.word	0x20000348

0800477c <_lseek_r>:
 800477c:	b570      	push	{r4, r5, r6, lr}
 800477e:	0004      	movs	r4, r0
 8004780:	0008      	movs	r0, r1
 8004782:	0011      	movs	r1, r2
 8004784:	001a      	movs	r2, r3
 8004786:	2300      	movs	r3, #0
 8004788:	4d05      	ldr	r5, [pc, #20]	; (80047a0 <_lseek_r+0x24>)
 800478a:	602b      	str	r3, [r5, #0]
 800478c:	f7fc f9c7 	bl	8000b1e <_lseek>
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	d103      	bne.n	800479c <_lseek_r+0x20>
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d000      	beq.n	800479c <_lseek_r+0x20>
 800479a:	6023      	str	r3, [r4, #0]
 800479c:	bd70      	pop	{r4, r5, r6, pc}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	20000348 	.word	0x20000348

080047a4 <_read_r>:
 80047a4:	b570      	push	{r4, r5, r6, lr}
 80047a6:	0004      	movs	r4, r0
 80047a8:	0008      	movs	r0, r1
 80047aa:	0011      	movs	r1, r2
 80047ac:	001a      	movs	r2, r3
 80047ae:	2300      	movs	r3, #0
 80047b0:	4d05      	ldr	r5, [pc, #20]	; (80047c8 <_read_r+0x24>)
 80047b2:	602b      	str	r3, [r5, #0]
 80047b4:	f7fc f95e 	bl	8000a74 <_read>
 80047b8:	1c43      	adds	r3, r0, #1
 80047ba:	d103      	bne.n	80047c4 <_read_r+0x20>
 80047bc:	682b      	ldr	r3, [r5, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d000      	beq.n	80047c4 <_read_r+0x20>
 80047c2:	6023      	str	r3, [r4, #0]
 80047c4:	bd70      	pop	{r4, r5, r6, pc}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	20000348 	.word	0x20000348

080047cc <_write_r>:
 80047cc:	b570      	push	{r4, r5, r6, lr}
 80047ce:	0004      	movs	r4, r0
 80047d0:	0008      	movs	r0, r1
 80047d2:	0011      	movs	r1, r2
 80047d4:	001a      	movs	r2, r3
 80047d6:	2300      	movs	r3, #0
 80047d8:	4d05      	ldr	r5, [pc, #20]	; (80047f0 <_write_r+0x24>)
 80047da:	602b      	str	r3, [r5, #0]
 80047dc:	f7fc f968 	bl	8000ab0 <_write>
 80047e0:	1c43      	adds	r3, r0, #1
 80047e2:	d103      	bne.n	80047ec <_write_r+0x20>
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d000      	beq.n	80047ec <_write_r+0x20>
 80047ea:	6023      	str	r3, [r4, #0]
 80047ec:	bd70      	pop	{r4, r5, r6, pc}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	20000348 	.word	0x20000348

080047f4 <__errno>:
 80047f4:	4b01      	ldr	r3, [pc, #4]	; (80047fc <__errno+0x8>)
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	4770      	bx	lr
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	2000006c 	.word	0x2000006c

08004800 <__libc_init_array>:
 8004800:	b570      	push	{r4, r5, r6, lr}
 8004802:	2600      	movs	r6, #0
 8004804:	4c0c      	ldr	r4, [pc, #48]	; (8004838 <__libc_init_array+0x38>)
 8004806:	4d0d      	ldr	r5, [pc, #52]	; (800483c <__libc_init_array+0x3c>)
 8004808:	1b64      	subs	r4, r4, r5
 800480a:	10a4      	asrs	r4, r4, #2
 800480c:	42a6      	cmp	r6, r4
 800480e:	d109      	bne.n	8004824 <__libc_init_array+0x24>
 8004810:	2600      	movs	r6, #0
 8004812:	f000 fd3d 	bl	8005290 <_init>
 8004816:	4c0a      	ldr	r4, [pc, #40]	; (8004840 <__libc_init_array+0x40>)
 8004818:	4d0a      	ldr	r5, [pc, #40]	; (8004844 <__libc_init_array+0x44>)
 800481a:	1b64      	subs	r4, r4, r5
 800481c:	10a4      	asrs	r4, r4, #2
 800481e:	42a6      	cmp	r6, r4
 8004820:	d105      	bne.n	800482e <__libc_init_array+0x2e>
 8004822:	bd70      	pop	{r4, r5, r6, pc}
 8004824:	00b3      	lsls	r3, r6, #2
 8004826:	58eb      	ldr	r3, [r5, r3]
 8004828:	4798      	blx	r3
 800482a:	3601      	adds	r6, #1
 800482c:	e7ee      	b.n	800480c <__libc_init_array+0xc>
 800482e:	00b3      	lsls	r3, r6, #2
 8004830:	58eb      	ldr	r3, [r5, r3]
 8004832:	4798      	blx	r3
 8004834:	3601      	adds	r6, #1
 8004836:	e7f2      	b.n	800481e <__libc_init_array+0x1e>
 8004838:	08005388 	.word	0x08005388
 800483c:	08005388 	.word	0x08005388
 8004840:	0800538c 	.word	0x0800538c
 8004844:	08005388 	.word	0x08005388

08004848 <__retarget_lock_init_recursive>:
 8004848:	4770      	bx	lr

0800484a <__retarget_lock_acquire_recursive>:
 800484a:	4770      	bx	lr

0800484c <__retarget_lock_release_recursive>:
 800484c:	4770      	bx	lr
	...

08004850 <_free_r>:
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	0005      	movs	r5, r0
 8004854:	2900      	cmp	r1, #0
 8004856:	d010      	beq.n	800487a <_free_r+0x2a>
 8004858:	1f0c      	subs	r4, r1, #4
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	da00      	bge.n	8004862 <_free_r+0x12>
 8004860:	18e4      	adds	r4, r4, r3
 8004862:	0028      	movs	r0, r5
 8004864:	f000 f8e2 	bl	8004a2c <__malloc_lock>
 8004868:	4a1d      	ldr	r2, [pc, #116]	; (80048e0 <_free_r+0x90>)
 800486a:	6813      	ldr	r3, [r2, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d105      	bne.n	800487c <_free_r+0x2c>
 8004870:	6063      	str	r3, [r4, #4]
 8004872:	6014      	str	r4, [r2, #0]
 8004874:	0028      	movs	r0, r5
 8004876:	f000 f8e1 	bl	8004a3c <__malloc_unlock>
 800487a:	bd70      	pop	{r4, r5, r6, pc}
 800487c:	42a3      	cmp	r3, r4
 800487e:	d908      	bls.n	8004892 <_free_r+0x42>
 8004880:	6820      	ldr	r0, [r4, #0]
 8004882:	1821      	adds	r1, r4, r0
 8004884:	428b      	cmp	r3, r1
 8004886:	d1f3      	bne.n	8004870 <_free_r+0x20>
 8004888:	6819      	ldr	r1, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	1809      	adds	r1, r1, r0
 800488e:	6021      	str	r1, [r4, #0]
 8004890:	e7ee      	b.n	8004870 <_free_r+0x20>
 8004892:	001a      	movs	r2, r3
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <_free_r+0x4e>
 800489a:	42a3      	cmp	r3, r4
 800489c:	d9f9      	bls.n	8004892 <_free_r+0x42>
 800489e:	6811      	ldr	r1, [r2, #0]
 80048a0:	1850      	adds	r0, r2, r1
 80048a2:	42a0      	cmp	r0, r4
 80048a4:	d10b      	bne.n	80048be <_free_r+0x6e>
 80048a6:	6820      	ldr	r0, [r4, #0]
 80048a8:	1809      	adds	r1, r1, r0
 80048aa:	1850      	adds	r0, r2, r1
 80048ac:	6011      	str	r1, [r2, #0]
 80048ae:	4283      	cmp	r3, r0
 80048b0:	d1e0      	bne.n	8004874 <_free_r+0x24>
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	1841      	adds	r1, r0, r1
 80048b8:	6011      	str	r1, [r2, #0]
 80048ba:	6053      	str	r3, [r2, #4]
 80048bc:	e7da      	b.n	8004874 <_free_r+0x24>
 80048be:	42a0      	cmp	r0, r4
 80048c0:	d902      	bls.n	80048c8 <_free_r+0x78>
 80048c2:	230c      	movs	r3, #12
 80048c4:	602b      	str	r3, [r5, #0]
 80048c6:	e7d5      	b.n	8004874 <_free_r+0x24>
 80048c8:	6820      	ldr	r0, [r4, #0]
 80048ca:	1821      	adds	r1, r4, r0
 80048cc:	428b      	cmp	r3, r1
 80048ce:	d103      	bne.n	80048d8 <_free_r+0x88>
 80048d0:	6819      	ldr	r1, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	1809      	adds	r1, r1, r0
 80048d6:	6021      	str	r1, [r4, #0]
 80048d8:	6063      	str	r3, [r4, #4]
 80048da:	6054      	str	r4, [r2, #4]
 80048dc:	e7ca      	b.n	8004874 <_free_r+0x24>
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	20000350 	.word	0x20000350

080048e4 <sbrk_aligned>:
 80048e4:	b570      	push	{r4, r5, r6, lr}
 80048e6:	4e0f      	ldr	r6, [pc, #60]	; (8004924 <sbrk_aligned+0x40>)
 80048e8:	000d      	movs	r5, r1
 80048ea:	6831      	ldr	r1, [r6, #0]
 80048ec:	0004      	movs	r4, r0
 80048ee:	2900      	cmp	r1, #0
 80048f0:	d102      	bne.n	80048f8 <sbrk_aligned+0x14>
 80048f2:	f000 fcaf 	bl	8005254 <_sbrk_r>
 80048f6:	6030      	str	r0, [r6, #0]
 80048f8:	0029      	movs	r1, r5
 80048fa:	0020      	movs	r0, r4
 80048fc:	f000 fcaa 	bl	8005254 <_sbrk_r>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d00a      	beq.n	800491a <sbrk_aligned+0x36>
 8004904:	2303      	movs	r3, #3
 8004906:	1cc5      	adds	r5, r0, #3
 8004908:	439d      	bics	r5, r3
 800490a:	42a8      	cmp	r0, r5
 800490c:	d007      	beq.n	800491e <sbrk_aligned+0x3a>
 800490e:	1a29      	subs	r1, r5, r0
 8004910:	0020      	movs	r0, r4
 8004912:	f000 fc9f 	bl	8005254 <_sbrk_r>
 8004916:	3001      	adds	r0, #1
 8004918:	d101      	bne.n	800491e <sbrk_aligned+0x3a>
 800491a:	2501      	movs	r5, #1
 800491c:	426d      	negs	r5, r5
 800491e:	0028      	movs	r0, r5
 8004920:	bd70      	pop	{r4, r5, r6, pc}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	20000354 	.word	0x20000354

08004928 <_malloc_r>:
 8004928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800492a:	2203      	movs	r2, #3
 800492c:	1ccb      	adds	r3, r1, #3
 800492e:	4393      	bics	r3, r2
 8004930:	3308      	adds	r3, #8
 8004932:	0006      	movs	r6, r0
 8004934:	001f      	movs	r7, r3
 8004936:	2b0c      	cmp	r3, #12
 8004938:	d238      	bcs.n	80049ac <_malloc_r+0x84>
 800493a:	270c      	movs	r7, #12
 800493c:	42b9      	cmp	r1, r7
 800493e:	d837      	bhi.n	80049b0 <_malloc_r+0x88>
 8004940:	0030      	movs	r0, r6
 8004942:	f000 f873 	bl	8004a2c <__malloc_lock>
 8004946:	4b38      	ldr	r3, [pc, #224]	; (8004a28 <_malloc_r+0x100>)
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	001c      	movs	r4, r3
 800494e:	2c00      	cmp	r4, #0
 8004950:	d133      	bne.n	80049ba <_malloc_r+0x92>
 8004952:	0039      	movs	r1, r7
 8004954:	0030      	movs	r0, r6
 8004956:	f7ff ffc5 	bl	80048e4 <sbrk_aligned>
 800495a:	0004      	movs	r4, r0
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d15e      	bne.n	8004a1e <_malloc_r+0xf6>
 8004960:	9b00      	ldr	r3, [sp, #0]
 8004962:	681c      	ldr	r4, [r3, #0]
 8004964:	0025      	movs	r5, r4
 8004966:	2d00      	cmp	r5, #0
 8004968:	d14e      	bne.n	8004a08 <_malloc_r+0xe0>
 800496a:	2c00      	cmp	r4, #0
 800496c:	d051      	beq.n	8004a12 <_malloc_r+0xea>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	0029      	movs	r1, r5
 8004972:	18e3      	adds	r3, r4, r3
 8004974:	0030      	movs	r0, r6
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	f000 fc6c 	bl	8005254 <_sbrk_r>
 800497c:	9b01      	ldr	r3, [sp, #4]
 800497e:	4283      	cmp	r3, r0
 8004980:	d147      	bne.n	8004a12 <_malloc_r+0xea>
 8004982:	6823      	ldr	r3, [r4, #0]
 8004984:	0030      	movs	r0, r6
 8004986:	1aff      	subs	r7, r7, r3
 8004988:	0039      	movs	r1, r7
 800498a:	f7ff ffab 	bl	80048e4 <sbrk_aligned>
 800498e:	3001      	adds	r0, #1
 8004990:	d03f      	beq.n	8004a12 <_malloc_r+0xea>
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	19db      	adds	r3, r3, r7
 8004996:	6023      	str	r3, [r4, #0]
 8004998:	9b00      	ldr	r3, [sp, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d040      	beq.n	8004a22 <_malloc_r+0xfa>
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	42a2      	cmp	r2, r4
 80049a4:	d133      	bne.n	8004a0e <_malloc_r+0xe6>
 80049a6:	2200      	movs	r2, #0
 80049a8:	605a      	str	r2, [r3, #4]
 80049aa:	e014      	b.n	80049d6 <_malloc_r+0xae>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	dac5      	bge.n	800493c <_malloc_r+0x14>
 80049b0:	230c      	movs	r3, #12
 80049b2:	2500      	movs	r5, #0
 80049b4:	6033      	str	r3, [r6, #0]
 80049b6:	0028      	movs	r0, r5
 80049b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049ba:	6821      	ldr	r1, [r4, #0]
 80049bc:	1bc9      	subs	r1, r1, r7
 80049be:	d420      	bmi.n	8004a02 <_malloc_r+0xda>
 80049c0:	290b      	cmp	r1, #11
 80049c2:	d918      	bls.n	80049f6 <_malloc_r+0xce>
 80049c4:	19e2      	adds	r2, r4, r7
 80049c6:	6027      	str	r7, [r4, #0]
 80049c8:	42a3      	cmp	r3, r4
 80049ca:	d112      	bne.n	80049f2 <_malloc_r+0xca>
 80049cc:	9b00      	ldr	r3, [sp, #0]
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	6863      	ldr	r3, [r4, #4]
 80049d2:	6011      	str	r1, [r2, #0]
 80049d4:	6053      	str	r3, [r2, #4]
 80049d6:	0030      	movs	r0, r6
 80049d8:	0025      	movs	r5, r4
 80049da:	f000 f82f 	bl	8004a3c <__malloc_unlock>
 80049de:	2207      	movs	r2, #7
 80049e0:	350b      	adds	r5, #11
 80049e2:	1d23      	adds	r3, r4, #4
 80049e4:	4395      	bics	r5, r2
 80049e6:	1aea      	subs	r2, r5, r3
 80049e8:	429d      	cmp	r5, r3
 80049ea:	d0e4      	beq.n	80049b6 <_malloc_r+0x8e>
 80049ec:	1b5b      	subs	r3, r3, r5
 80049ee:	50a3      	str	r3, [r4, r2]
 80049f0:	e7e1      	b.n	80049b6 <_malloc_r+0x8e>
 80049f2:	605a      	str	r2, [r3, #4]
 80049f4:	e7ec      	b.n	80049d0 <_malloc_r+0xa8>
 80049f6:	6862      	ldr	r2, [r4, #4]
 80049f8:	42a3      	cmp	r3, r4
 80049fa:	d1d5      	bne.n	80049a8 <_malloc_r+0x80>
 80049fc:	9b00      	ldr	r3, [sp, #0]
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	e7e9      	b.n	80049d6 <_malloc_r+0xae>
 8004a02:	0023      	movs	r3, r4
 8004a04:	6864      	ldr	r4, [r4, #4]
 8004a06:	e7a2      	b.n	800494e <_malloc_r+0x26>
 8004a08:	002c      	movs	r4, r5
 8004a0a:	686d      	ldr	r5, [r5, #4]
 8004a0c:	e7ab      	b.n	8004966 <_malloc_r+0x3e>
 8004a0e:	0013      	movs	r3, r2
 8004a10:	e7c4      	b.n	800499c <_malloc_r+0x74>
 8004a12:	230c      	movs	r3, #12
 8004a14:	0030      	movs	r0, r6
 8004a16:	6033      	str	r3, [r6, #0]
 8004a18:	f000 f810 	bl	8004a3c <__malloc_unlock>
 8004a1c:	e7cb      	b.n	80049b6 <_malloc_r+0x8e>
 8004a1e:	6027      	str	r7, [r4, #0]
 8004a20:	e7d9      	b.n	80049d6 <_malloc_r+0xae>
 8004a22:	605b      	str	r3, [r3, #4]
 8004a24:	deff      	udf	#255	; 0xff
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	20000350 	.word	0x20000350

08004a2c <__malloc_lock>:
 8004a2c:	b510      	push	{r4, lr}
 8004a2e:	4802      	ldr	r0, [pc, #8]	; (8004a38 <__malloc_lock+0xc>)
 8004a30:	f7ff ff0b 	bl	800484a <__retarget_lock_acquire_recursive>
 8004a34:	bd10      	pop	{r4, pc}
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	2000034c 	.word	0x2000034c

08004a3c <__malloc_unlock>:
 8004a3c:	b510      	push	{r4, lr}
 8004a3e:	4802      	ldr	r0, [pc, #8]	; (8004a48 <__malloc_unlock+0xc>)
 8004a40:	f7ff ff04 	bl	800484c <__retarget_lock_release_recursive>
 8004a44:	bd10      	pop	{r4, pc}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	2000034c 	.word	0x2000034c

08004a4c <__sfputc_r>:
 8004a4c:	6893      	ldr	r3, [r2, #8]
 8004a4e:	b510      	push	{r4, lr}
 8004a50:	3b01      	subs	r3, #1
 8004a52:	6093      	str	r3, [r2, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	da04      	bge.n	8004a62 <__sfputc_r+0x16>
 8004a58:	6994      	ldr	r4, [r2, #24]
 8004a5a:	42a3      	cmp	r3, r4
 8004a5c:	db07      	blt.n	8004a6e <__sfputc_r+0x22>
 8004a5e:	290a      	cmp	r1, #10
 8004a60:	d005      	beq.n	8004a6e <__sfputc_r+0x22>
 8004a62:	6813      	ldr	r3, [r2, #0]
 8004a64:	1c58      	adds	r0, r3, #1
 8004a66:	6010      	str	r0, [r2, #0]
 8004a68:	7019      	strb	r1, [r3, #0]
 8004a6a:	0008      	movs	r0, r1
 8004a6c:	bd10      	pop	{r4, pc}
 8004a6e:	f7ff fdc5 	bl	80045fc <__swbuf_r>
 8004a72:	0001      	movs	r1, r0
 8004a74:	e7f9      	b.n	8004a6a <__sfputc_r+0x1e>

08004a76 <__sfputs_r>:
 8004a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a78:	0006      	movs	r6, r0
 8004a7a:	000f      	movs	r7, r1
 8004a7c:	0014      	movs	r4, r2
 8004a7e:	18d5      	adds	r5, r2, r3
 8004a80:	42ac      	cmp	r4, r5
 8004a82:	d101      	bne.n	8004a88 <__sfputs_r+0x12>
 8004a84:	2000      	movs	r0, #0
 8004a86:	e007      	b.n	8004a98 <__sfputs_r+0x22>
 8004a88:	7821      	ldrb	r1, [r4, #0]
 8004a8a:	003a      	movs	r2, r7
 8004a8c:	0030      	movs	r0, r6
 8004a8e:	f7ff ffdd 	bl	8004a4c <__sfputc_r>
 8004a92:	3401      	adds	r4, #1
 8004a94:	1c43      	adds	r3, r0, #1
 8004a96:	d1f3      	bne.n	8004a80 <__sfputs_r+0xa>
 8004a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a9c <_vfiprintf_r>:
 8004a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a9e:	b0a1      	sub	sp, #132	; 0x84
 8004aa0:	000f      	movs	r7, r1
 8004aa2:	0015      	movs	r5, r2
 8004aa4:	001e      	movs	r6, r3
 8004aa6:	9003      	str	r0, [sp, #12]
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	d004      	beq.n	8004ab6 <_vfiprintf_r+0x1a>
 8004aac:	6a03      	ldr	r3, [r0, #32]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <_vfiprintf_r+0x1a>
 8004ab2:	f7ff fcb3 	bl	800441c <__sinit>
 8004ab6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ab8:	07db      	lsls	r3, r3, #31
 8004aba:	d405      	bmi.n	8004ac8 <_vfiprintf_r+0x2c>
 8004abc:	89bb      	ldrh	r3, [r7, #12]
 8004abe:	059b      	lsls	r3, r3, #22
 8004ac0:	d402      	bmi.n	8004ac8 <_vfiprintf_r+0x2c>
 8004ac2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004ac4:	f7ff fec1 	bl	800484a <__retarget_lock_acquire_recursive>
 8004ac8:	89bb      	ldrh	r3, [r7, #12]
 8004aca:	071b      	lsls	r3, r3, #28
 8004acc:	d502      	bpl.n	8004ad4 <_vfiprintf_r+0x38>
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d113      	bne.n	8004afc <_vfiprintf_r+0x60>
 8004ad4:	0039      	movs	r1, r7
 8004ad6:	9803      	ldr	r0, [sp, #12]
 8004ad8:	f7ff fdd2 	bl	8004680 <__swsetup_r>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d00d      	beq.n	8004afc <_vfiprintf_r+0x60>
 8004ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ae2:	07db      	lsls	r3, r3, #31
 8004ae4:	d503      	bpl.n	8004aee <_vfiprintf_r+0x52>
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	4240      	negs	r0, r0
 8004aea:	b021      	add	sp, #132	; 0x84
 8004aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aee:	89bb      	ldrh	r3, [r7, #12]
 8004af0:	059b      	lsls	r3, r3, #22
 8004af2:	d4f8      	bmi.n	8004ae6 <_vfiprintf_r+0x4a>
 8004af4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004af6:	f7ff fea9 	bl	800484c <__retarget_lock_release_recursive>
 8004afa:	e7f4      	b.n	8004ae6 <_vfiprintf_r+0x4a>
 8004afc:	2300      	movs	r3, #0
 8004afe:	ac08      	add	r4, sp, #32
 8004b00:	6163      	str	r3, [r4, #20]
 8004b02:	3320      	adds	r3, #32
 8004b04:	7663      	strb	r3, [r4, #25]
 8004b06:	3310      	adds	r3, #16
 8004b08:	76a3      	strb	r3, [r4, #26]
 8004b0a:	9607      	str	r6, [sp, #28]
 8004b0c:	002e      	movs	r6, r5
 8004b0e:	7833      	ldrb	r3, [r6, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <_vfiprintf_r+0x7c>
 8004b14:	2b25      	cmp	r3, #37	; 0x25
 8004b16:	d148      	bne.n	8004baa <_vfiprintf_r+0x10e>
 8004b18:	1b73      	subs	r3, r6, r5
 8004b1a:	9305      	str	r3, [sp, #20]
 8004b1c:	42ae      	cmp	r6, r5
 8004b1e:	d00b      	beq.n	8004b38 <_vfiprintf_r+0x9c>
 8004b20:	002a      	movs	r2, r5
 8004b22:	0039      	movs	r1, r7
 8004b24:	9803      	ldr	r0, [sp, #12]
 8004b26:	f7ff ffa6 	bl	8004a76 <__sfputs_r>
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	d100      	bne.n	8004b30 <_vfiprintf_r+0x94>
 8004b2e:	e0af      	b.n	8004c90 <_vfiprintf_r+0x1f4>
 8004b30:	6963      	ldr	r3, [r4, #20]
 8004b32:	9a05      	ldr	r2, [sp, #20]
 8004b34:	189b      	adds	r3, r3, r2
 8004b36:	6163      	str	r3, [r4, #20]
 8004b38:	7833      	ldrb	r3, [r6, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d100      	bne.n	8004b40 <_vfiprintf_r+0xa4>
 8004b3e:	e0a7      	b.n	8004c90 <_vfiprintf_r+0x1f4>
 8004b40:	2201      	movs	r2, #1
 8004b42:	2300      	movs	r3, #0
 8004b44:	4252      	negs	r2, r2
 8004b46:	6062      	str	r2, [r4, #4]
 8004b48:	a904      	add	r1, sp, #16
 8004b4a:	3254      	adds	r2, #84	; 0x54
 8004b4c:	1852      	adds	r2, r2, r1
 8004b4e:	1c75      	adds	r5, r6, #1
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	60e3      	str	r3, [r4, #12]
 8004b54:	60a3      	str	r3, [r4, #8]
 8004b56:	7013      	strb	r3, [r2, #0]
 8004b58:	65a3      	str	r3, [r4, #88]	; 0x58
 8004b5a:	4b59      	ldr	r3, [pc, #356]	; (8004cc0 <_vfiprintf_r+0x224>)
 8004b5c:	2205      	movs	r2, #5
 8004b5e:	0018      	movs	r0, r3
 8004b60:	7829      	ldrb	r1, [r5, #0]
 8004b62:	9305      	str	r3, [sp, #20]
 8004b64:	f000 fb88 	bl	8005278 <memchr>
 8004b68:	1c6e      	adds	r6, r5, #1
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	d11f      	bne.n	8004bae <_vfiprintf_r+0x112>
 8004b6e:	6822      	ldr	r2, [r4, #0]
 8004b70:	06d3      	lsls	r3, r2, #27
 8004b72:	d504      	bpl.n	8004b7e <_vfiprintf_r+0xe2>
 8004b74:	2353      	movs	r3, #83	; 0x53
 8004b76:	a904      	add	r1, sp, #16
 8004b78:	185b      	adds	r3, r3, r1
 8004b7a:	2120      	movs	r1, #32
 8004b7c:	7019      	strb	r1, [r3, #0]
 8004b7e:	0713      	lsls	r3, r2, #28
 8004b80:	d504      	bpl.n	8004b8c <_vfiprintf_r+0xf0>
 8004b82:	2353      	movs	r3, #83	; 0x53
 8004b84:	a904      	add	r1, sp, #16
 8004b86:	185b      	adds	r3, r3, r1
 8004b88:	212b      	movs	r1, #43	; 0x2b
 8004b8a:	7019      	strb	r1, [r3, #0]
 8004b8c:	782b      	ldrb	r3, [r5, #0]
 8004b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b90:	d016      	beq.n	8004bc0 <_vfiprintf_r+0x124>
 8004b92:	002e      	movs	r6, r5
 8004b94:	2100      	movs	r1, #0
 8004b96:	200a      	movs	r0, #10
 8004b98:	68e3      	ldr	r3, [r4, #12]
 8004b9a:	7832      	ldrb	r2, [r6, #0]
 8004b9c:	1c75      	adds	r5, r6, #1
 8004b9e:	3a30      	subs	r2, #48	; 0x30
 8004ba0:	2a09      	cmp	r2, #9
 8004ba2:	d94e      	bls.n	8004c42 <_vfiprintf_r+0x1a6>
 8004ba4:	2900      	cmp	r1, #0
 8004ba6:	d111      	bne.n	8004bcc <_vfiprintf_r+0x130>
 8004ba8:	e017      	b.n	8004bda <_vfiprintf_r+0x13e>
 8004baa:	3601      	adds	r6, #1
 8004bac:	e7af      	b.n	8004b0e <_vfiprintf_r+0x72>
 8004bae:	9b05      	ldr	r3, [sp, #20]
 8004bb0:	6822      	ldr	r2, [r4, #0]
 8004bb2:	1ac0      	subs	r0, r0, r3
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	4083      	lsls	r3, r0
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	0035      	movs	r5, r6
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	e7cc      	b.n	8004b5a <_vfiprintf_r+0xbe>
 8004bc0:	9b07      	ldr	r3, [sp, #28]
 8004bc2:	1d19      	adds	r1, r3, #4
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	9107      	str	r1, [sp, #28]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	db01      	blt.n	8004bd0 <_vfiprintf_r+0x134>
 8004bcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bce:	e004      	b.n	8004bda <_vfiprintf_r+0x13e>
 8004bd0:	425b      	negs	r3, r3
 8004bd2:	60e3      	str	r3, [r4, #12]
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	7833      	ldrb	r3, [r6, #0]
 8004bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8004bde:	d10a      	bne.n	8004bf6 <_vfiprintf_r+0x15a>
 8004be0:	7873      	ldrb	r3, [r6, #1]
 8004be2:	2b2a      	cmp	r3, #42	; 0x2a
 8004be4:	d135      	bne.n	8004c52 <_vfiprintf_r+0x1b6>
 8004be6:	9b07      	ldr	r3, [sp, #28]
 8004be8:	3602      	adds	r6, #2
 8004bea:	1d1a      	adds	r2, r3, #4
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	9207      	str	r2, [sp, #28]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	db2b      	blt.n	8004c4c <_vfiprintf_r+0x1b0>
 8004bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8004bf6:	4d33      	ldr	r5, [pc, #204]	; (8004cc4 <_vfiprintf_r+0x228>)
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	0028      	movs	r0, r5
 8004bfc:	7831      	ldrb	r1, [r6, #0]
 8004bfe:	f000 fb3b 	bl	8005278 <memchr>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d006      	beq.n	8004c14 <_vfiprintf_r+0x178>
 8004c06:	2340      	movs	r3, #64	; 0x40
 8004c08:	1b40      	subs	r0, r0, r5
 8004c0a:	4083      	lsls	r3, r0
 8004c0c:	6822      	ldr	r2, [r4, #0]
 8004c0e:	3601      	adds	r6, #1
 8004c10:	4313      	orrs	r3, r2
 8004c12:	6023      	str	r3, [r4, #0]
 8004c14:	7831      	ldrb	r1, [r6, #0]
 8004c16:	2206      	movs	r2, #6
 8004c18:	482b      	ldr	r0, [pc, #172]	; (8004cc8 <_vfiprintf_r+0x22c>)
 8004c1a:	1c75      	adds	r5, r6, #1
 8004c1c:	7621      	strb	r1, [r4, #24]
 8004c1e:	f000 fb2b 	bl	8005278 <memchr>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	d043      	beq.n	8004cae <_vfiprintf_r+0x212>
 8004c26:	4b29      	ldr	r3, [pc, #164]	; (8004ccc <_vfiprintf_r+0x230>)
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d125      	bne.n	8004c78 <_vfiprintf_r+0x1dc>
 8004c2c:	2207      	movs	r2, #7
 8004c2e:	9b07      	ldr	r3, [sp, #28]
 8004c30:	3307      	adds	r3, #7
 8004c32:	4393      	bics	r3, r2
 8004c34:	3308      	adds	r3, #8
 8004c36:	9307      	str	r3, [sp, #28]
 8004c38:	6963      	ldr	r3, [r4, #20]
 8004c3a:	9a04      	ldr	r2, [sp, #16]
 8004c3c:	189b      	adds	r3, r3, r2
 8004c3e:	6163      	str	r3, [r4, #20]
 8004c40:	e764      	b.n	8004b0c <_vfiprintf_r+0x70>
 8004c42:	4343      	muls	r3, r0
 8004c44:	002e      	movs	r6, r5
 8004c46:	2101      	movs	r1, #1
 8004c48:	189b      	adds	r3, r3, r2
 8004c4a:	e7a6      	b.n	8004b9a <_vfiprintf_r+0xfe>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	425b      	negs	r3, r3
 8004c50:	e7d0      	b.n	8004bf4 <_vfiprintf_r+0x158>
 8004c52:	2300      	movs	r3, #0
 8004c54:	200a      	movs	r0, #10
 8004c56:	001a      	movs	r2, r3
 8004c58:	3601      	adds	r6, #1
 8004c5a:	6063      	str	r3, [r4, #4]
 8004c5c:	7831      	ldrb	r1, [r6, #0]
 8004c5e:	1c75      	adds	r5, r6, #1
 8004c60:	3930      	subs	r1, #48	; 0x30
 8004c62:	2909      	cmp	r1, #9
 8004c64:	d903      	bls.n	8004c6e <_vfiprintf_r+0x1d2>
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0c5      	beq.n	8004bf6 <_vfiprintf_r+0x15a>
 8004c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8004c6c:	e7c3      	b.n	8004bf6 <_vfiprintf_r+0x15a>
 8004c6e:	4342      	muls	r2, r0
 8004c70:	002e      	movs	r6, r5
 8004c72:	2301      	movs	r3, #1
 8004c74:	1852      	adds	r2, r2, r1
 8004c76:	e7f1      	b.n	8004c5c <_vfiprintf_r+0x1c0>
 8004c78:	aa07      	add	r2, sp, #28
 8004c7a:	9200      	str	r2, [sp, #0]
 8004c7c:	0021      	movs	r1, r4
 8004c7e:	003a      	movs	r2, r7
 8004c80:	4b13      	ldr	r3, [pc, #76]	; (8004cd0 <_vfiprintf_r+0x234>)
 8004c82:	9803      	ldr	r0, [sp, #12]
 8004c84:	e000      	b.n	8004c88 <_vfiprintf_r+0x1ec>
 8004c86:	bf00      	nop
 8004c88:	9004      	str	r0, [sp, #16]
 8004c8a:	9b04      	ldr	r3, [sp, #16]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	d1d3      	bne.n	8004c38 <_vfiprintf_r+0x19c>
 8004c90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c92:	07db      	lsls	r3, r3, #31
 8004c94:	d405      	bmi.n	8004ca2 <_vfiprintf_r+0x206>
 8004c96:	89bb      	ldrh	r3, [r7, #12]
 8004c98:	059b      	lsls	r3, r3, #22
 8004c9a:	d402      	bmi.n	8004ca2 <_vfiprintf_r+0x206>
 8004c9c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004c9e:	f7ff fdd5 	bl	800484c <__retarget_lock_release_recursive>
 8004ca2:	89bb      	ldrh	r3, [r7, #12]
 8004ca4:	065b      	lsls	r3, r3, #25
 8004ca6:	d500      	bpl.n	8004caa <_vfiprintf_r+0x20e>
 8004ca8:	e71d      	b.n	8004ae6 <_vfiprintf_r+0x4a>
 8004caa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004cac:	e71d      	b.n	8004aea <_vfiprintf_r+0x4e>
 8004cae:	aa07      	add	r2, sp, #28
 8004cb0:	9200      	str	r2, [sp, #0]
 8004cb2:	0021      	movs	r1, r4
 8004cb4:	003a      	movs	r2, r7
 8004cb6:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <_vfiprintf_r+0x234>)
 8004cb8:	9803      	ldr	r0, [sp, #12]
 8004cba:	f000 f87b 	bl	8004db4 <_printf_i>
 8004cbe:	e7e3      	b.n	8004c88 <_vfiprintf_r+0x1ec>
 8004cc0:	0800534c 	.word	0x0800534c
 8004cc4:	08005352 	.word	0x08005352
 8004cc8:	08005356 	.word	0x08005356
 8004ccc:	00000000 	.word	0x00000000
 8004cd0:	08004a77 	.word	0x08004a77

08004cd4 <_printf_common>:
 8004cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cd6:	0016      	movs	r6, r2
 8004cd8:	9301      	str	r3, [sp, #4]
 8004cda:	688a      	ldr	r2, [r1, #8]
 8004cdc:	690b      	ldr	r3, [r1, #16]
 8004cde:	000c      	movs	r4, r1
 8004ce0:	9000      	str	r0, [sp, #0]
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	da00      	bge.n	8004ce8 <_printf_common+0x14>
 8004ce6:	0013      	movs	r3, r2
 8004ce8:	0022      	movs	r2, r4
 8004cea:	6033      	str	r3, [r6, #0]
 8004cec:	3243      	adds	r2, #67	; 0x43
 8004cee:	7812      	ldrb	r2, [r2, #0]
 8004cf0:	2a00      	cmp	r2, #0
 8004cf2:	d001      	beq.n	8004cf8 <_printf_common+0x24>
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	6033      	str	r3, [r6, #0]
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	069b      	lsls	r3, r3, #26
 8004cfc:	d502      	bpl.n	8004d04 <_printf_common+0x30>
 8004cfe:	6833      	ldr	r3, [r6, #0]
 8004d00:	3302      	adds	r3, #2
 8004d02:	6033      	str	r3, [r6, #0]
 8004d04:	6822      	ldr	r2, [r4, #0]
 8004d06:	2306      	movs	r3, #6
 8004d08:	0015      	movs	r5, r2
 8004d0a:	401d      	ands	r5, r3
 8004d0c:	421a      	tst	r2, r3
 8004d0e:	d027      	beq.n	8004d60 <_printf_common+0x8c>
 8004d10:	0023      	movs	r3, r4
 8004d12:	3343      	adds	r3, #67	; 0x43
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	1e5a      	subs	r2, r3, #1
 8004d18:	4193      	sbcs	r3, r2
 8004d1a:	6822      	ldr	r2, [r4, #0]
 8004d1c:	0692      	lsls	r2, r2, #26
 8004d1e:	d430      	bmi.n	8004d82 <_printf_common+0xae>
 8004d20:	0022      	movs	r2, r4
 8004d22:	9901      	ldr	r1, [sp, #4]
 8004d24:	9800      	ldr	r0, [sp, #0]
 8004d26:	9d08      	ldr	r5, [sp, #32]
 8004d28:	3243      	adds	r2, #67	; 0x43
 8004d2a:	47a8      	blx	r5
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	d025      	beq.n	8004d7c <_printf_common+0xa8>
 8004d30:	2206      	movs	r2, #6
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	2500      	movs	r5, #0
 8004d36:	4013      	ands	r3, r2
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d105      	bne.n	8004d48 <_printf_common+0x74>
 8004d3c:	6833      	ldr	r3, [r6, #0]
 8004d3e:	68e5      	ldr	r5, [r4, #12]
 8004d40:	1aed      	subs	r5, r5, r3
 8004d42:	43eb      	mvns	r3, r5
 8004d44:	17db      	asrs	r3, r3, #31
 8004d46:	401d      	ands	r5, r3
 8004d48:	68a3      	ldr	r3, [r4, #8]
 8004d4a:	6922      	ldr	r2, [r4, #16]
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	dd01      	ble.n	8004d54 <_printf_common+0x80>
 8004d50:	1a9b      	subs	r3, r3, r2
 8004d52:	18ed      	adds	r5, r5, r3
 8004d54:	2600      	movs	r6, #0
 8004d56:	42b5      	cmp	r5, r6
 8004d58:	d120      	bne.n	8004d9c <_printf_common+0xc8>
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	e010      	b.n	8004d80 <_printf_common+0xac>
 8004d5e:	3501      	adds	r5, #1
 8004d60:	68e3      	ldr	r3, [r4, #12]
 8004d62:	6832      	ldr	r2, [r6, #0]
 8004d64:	1a9b      	subs	r3, r3, r2
 8004d66:	42ab      	cmp	r3, r5
 8004d68:	ddd2      	ble.n	8004d10 <_printf_common+0x3c>
 8004d6a:	0022      	movs	r2, r4
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	9901      	ldr	r1, [sp, #4]
 8004d70:	9800      	ldr	r0, [sp, #0]
 8004d72:	9f08      	ldr	r7, [sp, #32]
 8004d74:	3219      	adds	r2, #25
 8004d76:	47b8      	blx	r7
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d1f0      	bne.n	8004d5e <_printf_common+0x8a>
 8004d7c:	2001      	movs	r0, #1
 8004d7e:	4240      	negs	r0, r0
 8004d80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d82:	2030      	movs	r0, #48	; 0x30
 8004d84:	18e1      	adds	r1, r4, r3
 8004d86:	3143      	adds	r1, #67	; 0x43
 8004d88:	7008      	strb	r0, [r1, #0]
 8004d8a:	0021      	movs	r1, r4
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	3145      	adds	r1, #69	; 0x45
 8004d90:	7809      	ldrb	r1, [r1, #0]
 8004d92:	18a2      	adds	r2, r4, r2
 8004d94:	3243      	adds	r2, #67	; 0x43
 8004d96:	3302      	adds	r3, #2
 8004d98:	7011      	strb	r1, [r2, #0]
 8004d9a:	e7c1      	b.n	8004d20 <_printf_common+0x4c>
 8004d9c:	0022      	movs	r2, r4
 8004d9e:	2301      	movs	r3, #1
 8004da0:	9901      	ldr	r1, [sp, #4]
 8004da2:	9800      	ldr	r0, [sp, #0]
 8004da4:	9f08      	ldr	r7, [sp, #32]
 8004da6:	321a      	adds	r2, #26
 8004da8:	47b8      	blx	r7
 8004daa:	3001      	adds	r0, #1
 8004dac:	d0e6      	beq.n	8004d7c <_printf_common+0xa8>
 8004dae:	3601      	adds	r6, #1
 8004db0:	e7d1      	b.n	8004d56 <_printf_common+0x82>
	...

08004db4 <_printf_i>:
 8004db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004db6:	b08b      	sub	sp, #44	; 0x2c
 8004db8:	9206      	str	r2, [sp, #24]
 8004dba:	000a      	movs	r2, r1
 8004dbc:	3243      	adds	r2, #67	; 0x43
 8004dbe:	9307      	str	r3, [sp, #28]
 8004dc0:	9005      	str	r0, [sp, #20]
 8004dc2:	9204      	str	r2, [sp, #16]
 8004dc4:	7e0a      	ldrb	r2, [r1, #24]
 8004dc6:	000c      	movs	r4, r1
 8004dc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004dca:	2a78      	cmp	r2, #120	; 0x78
 8004dcc:	d809      	bhi.n	8004de2 <_printf_i+0x2e>
 8004dce:	2a62      	cmp	r2, #98	; 0x62
 8004dd0:	d80b      	bhi.n	8004dea <_printf_i+0x36>
 8004dd2:	2a00      	cmp	r2, #0
 8004dd4:	d100      	bne.n	8004dd8 <_printf_i+0x24>
 8004dd6:	e0be      	b.n	8004f56 <_printf_i+0x1a2>
 8004dd8:	497c      	ldr	r1, [pc, #496]	; (8004fcc <_printf_i+0x218>)
 8004dda:	9103      	str	r1, [sp, #12]
 8004ddc:	2a58      	cmp	r2, #88	; 0x58
 8004dde:	d100      	bne.n	8004de2 <_printf_i+0x2e>
 8004de0:	e093      	b.n	8004f0a <_printf_i+0x156>
 8004de2:	0026      	movs	r6, r4
 8004de4:	3642      	adds	r6, #66	; 0x42
 8004de6:	7032      	strb	r2, [r6, #0]
 8004de8:	e022      	b.n	8004e30 <_printf_i+0x7c>
 8004dea:	0010      	movs	r0, r2
 8004dec:	3863      	subs	r0, #99	; 0x63
 8004dee:	2815      	cmp	r0, #21
 8004df0:	d8f7      	bhi.n	8004de2 <_printf_i+0x2e>
 8004df2:	f7fb f989 	bl	8000108 <__gnu_thumb1_case_shi>
 8004df6:	0016      	.short	0x0016
 8004df8:	fff6001f 	.word	0xfff6001f
 8004dfc:	fff6fff6 	.word	0xfff6fff6
 8004e00:	001ffff6 	.word	0x001ffff6
 8004e04:	fff6fff6 	.word	0xfff6fff6
 8004e08:	fff6fff6 	.word	0xfff6fff6
 8004e0c:	003600a3 	.word	0x003600a3
 8004e10:	fff60083 	.word	0xfff60083
 8004e14:	00b4fff6 	.word	0x00b4fff6
 8004e18:	0036fff6 	.word	0x0036fff6
 8004e1c:	fff6fff6 	.word	0xfff6fff6
 8004e20:	0087      	.short	0x0087
 8004e22:	0026      	movs	r6, r4
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	3642      	adds	r6, #66	; 0x42
 8004e28:	1d11      	adds	r1, r2, #4
 8004e2a:	6019      	str	r1, [r3, #0]
 8004e2c:	6813      	ldr	r3, [r2, #0]
 8004e2e:	7033      	strb	r3, [r6, #0]
 8004e30:	2301      	movs	r3, #1
 8004e32:	e0a2      	b.n	8004f7a <_printf_i+0x1c6>
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	6809      	ldr	r1, [r1, #0]
 8004e38:	1d02      	adds	r2, r0, #4
 8004e3a:	060d      	lsls	r5, r1, #24
 8004e3c:	d50b      	bpl.n	8004e56 <_printf_i+0xa2>
 8004e3e:	6805      	ldr	r5, [r0, #0]
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	2d00      	cmp	r5, #0
 8004e44:	da03      	bge.n	8004e4e <_printf_i+0x9a>
 8004e46:	232d      	movs	r3, #45	; 0x2d
 8004e48:	9a04      	ldr	r2, [sp, #16]
 8004e4a:	426d      	negs	r5, r5
 8004e4c:	7013      	strb	r3, [r2, #0]
 8004e4e:	4b5f      	ldr	r3, [pc, #380]	; (8004fcc <_printf_i+0x218>)
 8004e50:	270a      	movs	r7, #10
 8004e52:	9303      	str	r3, [sp, #12]
 8004e54:	e01b      	b.n	8004e8e <_printf_i+0xda>
 8004e56:	6805      	ldr	r5, [r0, #0]
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	0649      	lsls	r1, r1, #25
 8004e5c:	d5f1      	bpl.n	8004e42 <_printf_i+0x8e>
 8004e5e:	b22d      	sxth	r5, r5
 8004e60:	e7ef      	b.n	8004e42 <_printf_i+0x8e>
 8004e62:	680d      	ldr	r5, [r1, #0]
 8004e64:	6819      	ldr	r1, [r3, #0]
 8004e66:	1d08      	adds	r0, r1, #4
 8004e68:	6018      	str	r0, [r3, #0]
 8004e6a:	062e      	lsls	r6, r5, #24
 8004e6c:	d501      	bpl.n	8004e72 <_printf_i+0xbe>
 8004e6e:	680d      	ldr	r5, [r1, #0]
 8004e70:	e003      	b.n	8004e7a <_printf_i+0xc6>
 8004e72:	066d      	lsls	r5, r5, #25
 8004e74:	d5fb      	bpl.n	8004e6e <_printf_i+0xba>
 8004e76:	680d      	ldr	r5, [r1, #0]
 8004e78:	b2ad      	uxth	r5, r5
 8004e7a:	4b54      	ldr	r3, [pc, #336]	; (8004fcc <_printf_i+0x218>)
 8004e7c:	2708      	movs	r7, #8
 8004e7e:	9303      	str	r3, [sp, #12]
 8004e80:	2a6f      	cmp	r2, #111	; 0x6f
 8004e82:	d000      	beq.n	8004e86 <_printf_i+0xd2>
 8004e84:	3702      	adds	r7, #2
 8004e86:	0023      	movs	r3, r4
 8004e88:	2200      	movs	r2, #0
 8004e8a:	3343      	adds	r3, #67	; 0x43
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	6863      	ldr	r3, [r4, #4]
 8004e90:	60a3      	str	r3, [r4, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	db03      	blt.n	8004e9e <_printf_i+0xea>
 8004e96:	2104      	movs	r1, #4
 8004e98:	6822      	ldr	r2, [r4, #0]
 8004e9a:	438a      	bics	r2, r1
 8004e9c:	6022      	str	r2, [r4, #0]
 8004e9e:	2d00      	cmp	r5, #0
 8004ea0:	d102      	bne.n	8004ea8 <_printf_i+0xf4>
 8004ea2:	9e04      	ldr	r6, [sp, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00c      	beq.n	8004ec2 <_printf_i+0x10e>
 8004ea8:	9e04      	ldr	r6, [sp, #16]
 8004eaa:	0028      	movs	r0, r5
 8004eac:	0039      	movs	r1, r7
 8004eae:	f7fb f9bb 	bl	8000228 <__aeabi_uidivmod>
 8004eb2:	9b03      	ldr	r3, [sp, #12]
 8004eb4:	3e01      	subs	r6, #1
 8004eb6:	5c5b      	ldrb	r3, [r3, r1]
 8004eb8:	7033      	strb	r3, [r6, #0]
 8004eba:	002b      	movs	r3, r5
 8004ebc:	0005      	movs	r5, r0
 8004ebe:	429f      	cmp	r7, r3
 8004ec0:	d9f3      	bls.n	8004eaa <_printf_i+0xf6>
 8004ec2:	2f08      	cmp	r7, #8
 8004ec4:	d109      	bne.n	8004eda <_printf_i+0x126>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	07db      	lsls	r3, r3, #31
 8004eca:	d506      	bpl.n	8004eda <_printf_i+0x126>
 8004ecc:	6862      	ldr	r2, [r4, #4]
 8004ece:	6923      	ldr	r3, [r4, #16]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	dc02      	bgt.n	8004eda <_printf_i+0x126>
 8004ed4:	2330      	movs	r3, #48	; 0x30
 8004ed6:	3e01      	subs	r6, #1
 8004ed8:	7033      	strb	r3, [r6, #0]
 8004eda:	9b04      	ldr	r3, [sp, #16]
 8004edc:	1b9b      	subs	r3, r3, r6
 8004ede:	6123      	str	r3, [r4, #16]
 8004ee0:	9b07      	ldr	r3, [sp, #28]
 8004ee2:	0021      	movs	r1, r4
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	9805      	ldr	r0, [sp, #20]
 8004ee8:	9b06      	ldr	r3, [sp, #24]
 8004eea:	aa09      	add	r2, sp, #36	; 0x24
 8004eec:	f7ff fef2 	bl	8004cd4 <_printf_common>
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d147      	bne.n	8004f84 <_printf_i+0x1d0>
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	4240      	negs	r0, r0
 8004ef8:	b00b      	add	sp, #44	; 0x2c
 8004efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004efc:	2220      	movs	r2, #32
 8004efe:	6809      	ldr	r1, [r1, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	6022      	str	r2, [r4, #0]
 8004f04:	2278      	movs	r2, #120	; 0x78
 8004f06:	4932      	ldr	r1, [pc, #200]	; (8004fd0 <_printf_i+0x21c>)
 8004f08:	9103      	str	r1, [sp, #12]
 8004f0a:	0021      	movs	r1, r4
 8004f0c:	3145      	adds	r1, #69	; 0x45
 8004f0e:	700a      	strb	r2, [r1, #0]
 8004f10:	6819      	ldr	r1, [r3, #0]
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	c920      	ldmia	r1!, {r5}
 8004f16:	0610      	lsls	r0, r2, #24
 8004f18:	d402      	bmi.n	8004f20 <_printf_i+0x16c>
 8004f1a:	0650      	lsls	r0, r2, #25
 8004f1c:	d500      	bpl.n	8004f20 <_printf_i+0x16c>
 8004f1e:	b2ad      	uxth	r5, r5
 8004f20:	6019      	str	r1, [r3, #0]
 8004f22:	07d3      	lsls	r3, r2, #31
 8004f24:	d502      	bpl.n	8004f2c <_printf_i+0x178>
 8004f26:	2320      	movs	r3, #32
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	6023      	str	r3, [r4, #0]
 8004f2c:	2710      	movs	r7, #16
 8004f2e:	2d00      	cmp	r5, #0
 8004f30:	d1a9      	bne.n	8004e86 <_printf_i+0xd2>
 8004f32:	2220      	movs	r2, #32
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	4393      	bics	r3, r2
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	e7a4      	b.n	8004e86 <_printf_i+0xd2>
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	680d      	ldr	r5, [r1, #0]
 8004f40:	1d10      	adds	r0, r2, #4
 8004f42:	6949      	ldr	r1, [r1, #20]
 8004f44:	6018      	str	r0, [r3, #0]
 8004f46:	6813      	ldr	r3, [r2, #0]
 8004f48:	062e      	lsls	r6, r5, #24
 8004f4a:	d501      	bpl.n	8004f50 <_printf_i+0x19c>
 8004f4c:	6019      	str	r1, [r3, #0]
 8004f4e:	e002      	b.n	8004f56 <_printf_i+0x1a2>
 8004f50:	066d      	lsls	r5, r5, #25
 8004f52:	d5fb      	bpl.n	8004f4c <_printf_i+0x198>
 8004f54:	8019      	strh	r1, [r3, #0]
 8004f56:	2300      	movs	r3, #0
 8004f58:	9e04      	ldr	r6, [sp, #16]
 8004f5a:	6123      	str	r3, [r4, #16]
 8004f5c:	e7c0      	b.n	8004ee0 <_printf_i+0x12c>
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	1d11      	adds	r1, r2, #4
 8004f62:	6019      	str	r1, [r3, #0]
 8004f64:	6816      	ldr	r6, [r2, #0]
 8004f66:	2100      	movs	r1, #0
 8004f68:	0030      	movs	r0, r6
 8004f6a:	6862      	ldr	r2, [r4, #4]
 8004f6c:	f000 f984 	bl	8005278 <memchr>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d001      	beq.n	8004f78 <_printf_i+0x1c4>
 8004f74:	1b80      	subs	r0, r0, r6
 8004f76:	6060      	str	r0, [r4, #4]
 8004f78:	6863      	ldr	r3, [r4, #4]
 8004f7a:	6123      	str	r3, [r4, #16]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	9a04      	ldr	r2, [sp, #16]
 8004f80:	7013      	strb	r3, [r2, #0]
 8004f82:	e7ad      	b.n	8004ee0 <_printf_i+0x12c>
 8004f84:	0032      	movs	r2, r6
 8004f86:	6923      	ldr	r3, [r4, #16]
 8004f88:	9906      	ldr	r1, [sp, #24]
 8004f8a:	9805      	ldr	r0, [sp, #20]
 8004f8c:	9d07      	ldr	r5, [sp, #28]
 8004f8e:	47a8      	blx	r5
 8004f90:	3001      	adds	r0, #1
 8004f92:	d0af      	beq.n	8004ef4 <_printf_i+0x140>
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	079b      	lsls	r3, r3, #30
 8004f98:	d415      	bmi.n	8004fc6 <_printf_i+0x212>
 8004f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f9c:	68e0      	ldr	r0, [r4, #12]
 8004f9e:	4298      	cmp	r0, r3
 8004fa0:	daaa      	bge.n	8004ef8 <_printf_i+0x144>
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	e7a8      	b.n	8004ef8 <_printf_i+0x144>
 8004fa6:	0022      	movs	r2, r4
 8004fa8:	2301      	movs	r3, #1
 8004faa:	9906      	ldr	r1, [sp, #24]
 8004fac:	9805      	ldr	r0, [sp, #20]
 8004fae:	9e07      	ldr	r6, [sp, #28]
 8004fb0:	3219      	adds	r2, #25
 8004fb2:	47b0      	blx	r6
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d09d      	beq.n	8004ef4 <_printf_i+0x140>
 8004fb8:	3501      	adds	r5, #1
 8004fba:	68e3      	ldr	r3, [r4, #12]
 8004fbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fbe:	1a9b      	subs	r3, r3, r2
 8004fc0:	42ab      	cmp	r3, r5
 8004fc2:	dcf0      	bgt.n	8004fa6 <_printf_i+0x1f2>
 8004fc4:	e7e9      	b.n	8004f9a <_printf_i+0x1e6>
 8004fc6:	2500      	movs	r5, #0
 8004fc8:	e7f7      	b.n	8004fba <_printf_i+0x206>
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	0800535d 	.word	0x0800535d
 8004fd0:	0800536e 	.word	0x0800536e

08004fd4 <__sflush_r>:
 8004fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fd6:	898b      	ldrh	r3, [r1, #12]
 8004fd8:	0005      	movs	r5, r0
 8004fda:	000c      	movs	r4, r1
 8004fdc:	071a      	lsls	r2, r3, #28
 8004fde:	d45c      	bmi.n	800509a <__sflush_r+0xc6>
 8004fe0:	684a      	ldr	r2, [r1, #4]
 8004fe2:	2a00      	cmp	r2, #0
 8004fe4:	dc04      	bgt.n	8004ff0 <__sflush_r+0x1c>
 8004fe6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004fe8:	2a00      	cmp	r2, #0
 8004fea:	dc01      	bgt.n	8004ff0 <__sflush_r+0x1c>
 8004fec:	2000      	movs	r0, #0
 8004fee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ff0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004ff2:	2f00      	cmp	r7, #0
 8004ff4:	d0fa      	beq.n	8004fec <__sflush_r+0x18>
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2080      	movs	r0, #128	; 0x80
 8004ffa:	682e      	ldr	r6, [r5, #0]
 8004ffc:	602a      	str	r2, [r5, #0]
 8004ffe:	001a      	movs	r2, r3
 8005000:	0140      	lsls	r0, r0, #5
 8005002:	6a21      	ldr	r1, [r4, #32]
 8005004:	4002      	ands	r2, r0
 8005006:	4203      	tst	r3, r0
 8005008:	d034      	beq.n	8005074 <__sflush_r+0xa0>
 800500a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800500c:	89a3      	ldrh	r3, [r4, #12]
 800500e:	075b      	lsls	r3, r3, #29
 8005010:	d506      	bpl.n	8005020 <__sflush_r+0x4c>
 8005012:	6863      	ldr	r3, [r4, #4]
 8005014:	1ac0      	subs	r0, r0, r3
 8005016:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <__sflush_r+0x4c>
 800501c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800501e:	1ac0      	subs	r0, r0, r3
 8005020:	0002      	movs	r2, r0
 8005022:	2300      	movs	r3, #0
 8005024:	0028      	movs	r0, r5
 8005026:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005028:	6a21      	ldr	r1, [r4, #32]
 800502a:	47b8      	blx	r7
 800502c:	89a2      	ldrh	r2, [r4, #12]
 800502e:	1c43      	adds	r3, r0, #1
 8005030:	d106      	bne.n	8005040 <__sflush_r+0x6c>
 8005032:	6829      	ldr	r1, [r5, #0]
 8005034:	291d      	cmp	r1, #29
 8005036:	d82c      	bhi.n	8005092 <__sflush_r+0xbe>
 8005038:	4b2a      	ldr	r3, [pc, #168]	; (80050e4 <__sflush_r+0x110>)
 800503a:	410b      	asrs	r3, r1
 800503c:	07db      	lsls	r3, r3, #31
 800503e:	d428      	bmi.n	8005092 <__sflush_r+0xbe>
 8005040:	2300      	movs	r3, #0
 8005042:	6063      	str	r3, [r4, #4]
 8005044:	6923      	ldr	r3, [r4, #16]
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	04d2      	lsls	r2, r2, #19
 800504a:	d505      	bpl.n	8005058 <__sflush_r+0x84>
 800504c:	1c43      	adds	r3, r0, #1
 800504e:	d102      	bne.n	8005056 <__sflush_r+0x82>
 8005050:	682b      	ldr	r3, [r5, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d100      	bne.n	8005058 <__sflush_r+0x84>
 8005056:	6560      	str	r0, [r4, #84]	; 0x54
 8005058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800505a:	602e      	str	r6, [r5, #0]
 800505c:	2900      	cmp	r1, #0
 800505e:	d0c5      	beq.n	8004fec <__sflush_r+0x18>
 8005060:	0023      	movs	r3, r4
 8005062:	3344      	adds	r3, #68	; 0x44
 8005064:	4299      	cmp	r1, r3
 8005066:	d002      	beq.n	800506e <__sflush_r+0x9a>
 8005068:	0028      	movs	r0, r5
 800506a:	f7ff fbf1 	bl	8004850 <_free_r>
 800506e:	2000      	movs	r0, #0
 8005070:	6360      	str	r0, [r4, #52]	; 0x34
 8005072:	e7bc      	b.n	8004fee <__sflush_r+0x1a>
 8005074:	2301      	movs	r3, #1
 8005076:	0028      	movs	r0, r5
 8005078:	47b8      	blx	r7
 800507a:	1c43      	adds	r3, r0, #1
 800507c:	d1c6      	bne.n	800500c <__sflush_r+0x38>
 800507e:	682b      	ldr	r3, [r5, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0c3      	beq.n	800500c <__sflush_r+0x38>
 8005084:	2b1d      	cmp	r3, #29
 8005086:	d001      	beq.n	800508c <__sflush_r+0xb8>
 8005088:	2b16      	cmp	r3, #22
 800508a:	d101      	bne.n	8005090 <__sflush_r+0xbc>
 800508c:	602e      	str	r6, [r5, #0]
 800508e:	e7ad      	b.n	8004fec <__sflush_r+0x18>
 8005090:	89a2      	ldrh	r2, [r4, #12]
 8005092:	2340      	movs	r3, #64	; 0x40
 8005094:	4313      	orrs	r3, r2
 8005096:	81a3      	strh	r3, [r4, #12]
 8005098:	e7a9      	b.n	8004fee <__sflush_r+0x1a>
 800509a:	690e      	ldr	r6, [r1, #16]
 800509c:	2e00      	cmp	r6, #0
 800509e:	d0a5      	beq.n	8004fec <__sflush_r+0x18>
 80050a0:	680f      	ldr	r7, [r1, #0]
 80050a2:	600e      	str	r6, [r1, #0]
 80050a4:	1bba      	subs	r2, r7, r6
 80050a6:	9201      	str	r2, [sp, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	079b      	lsls	r3, r3, #30
 80050ac:	d100      	bne.n	80050b0 <__sflush_r+0xdc>
 80050ae:	694a      	ldr	r2, [r1, #20]
 80050b0:	60a2      	str	r2, [r4, #8]
 80050b2:	9b01      	ldr	r3, [sp, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	dd99      	ble.n	8004fec <__sflush_r+0x18>
 80050b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80050ba:	0032      	movs	r2, r6
 80050bc:	001f      	movs	r7, r3
 80050be:	0028      	movs	r0, r5
 80050c0:	9b01      	ldr	r3, [sp, #4]
 80050c2:	6a21      	ldr	r1, [r4, #32]
 80050c4:	47b8      	blx	r7
 80050c6:	2800      	cmp	r0, #0
 80050c8:	dc06      	bgt.n	80050d8 <__sflush_r+0x104>
 80050ca:	2340      	movs	r3, #64	; 0x40
 80050cc:	2001      	movs	r0, #1
 80050ce:	89a2      	ldrh	r2, [r4, #12]
 80050d0:	4240      	negs	r0, r0
 80050d2:	4313      	orrs	r3, r2
 80050d4:	81a3      	strh	r3, [r4, #12]
 80050d6:	e78a      	b.n	8004fee <__sflush_r+0x1a>
 80050d8:	9b01      	ldr	r3, [sp, #4]
 80050da:	1836      	adds	r6, r6, r0
 80050dc:	1a1b      	subs	r3, r3, r0
 80050de:	9301      	str	r3, [sp, #4]
 80050e0:	e7e7      	b.n	80050b2 <__sflush_r+0xde>
 80050e2:	46c0      	nop			; (mov r8, r8)
 80050e4:	dfbffffe 	.word	0xdfbffffe

080050e8 <_fflush_r>:
 80050e8:	690b      	ldr	r3, [r1, #16]
 80050ea:	b570      	push	{r4, r5, r6, lr}
 80050ec:	0005      	movs	r5, r0
 80050ee:	000c      	movs	r4, r1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d102      	bne.n	80050fa <_fflush_r+0x12>
 80050f4:	2500      	movs	r5, #0
 80050f6:	0028      	movs	r0, r5
 80050f8:	bd70      	pop	{r4, r5, r6, pc}
 80050fa:	2800      	cmp	r0, #0
 80050fc:	d004      	beq.n	8005108 <_fflush_r+0x20>
 80050fe:	6a03      	ldr	r3, [r0, #32]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <_fflush_r+0x20>
 8005104:	f7ff f98a 	bl	800441c <__sinit>
 8005108:	220c      	movs	r2, #12
 800510a:	5ea3      	ldrsh	r3, [r4, r2]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0f1      	beq.n	80050f4 <_fflush_r+0xc>
 8005110:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005112:	07d2      	lsls	r2, r2, #31
 8005114:	d404      	bmi.n	8005120 <_fflush_r+0x38>
 8005116:	059b      	lsls	r3, r3, #22
 8005118:	d402      	bmi.n	8005120 <_fflush_r+0x38>
 800511a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800511c:	f7ff fb95 	bl	800484a <__retarget_lock_acquire_recursive>
 8005120:	0028      	movs	r0, r5
 8005122:	0021      	movs	r1, r4
 8005124:	f7ff ff56 	bl	8004fd4 <__sflush_r>
 8005128:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800512a:	0005      	movs	r5, r0
 800512c:	07db      	lsls	r3, r3, #31
 800512e:	d4e2      	bmi.n	80050f6 <_fflush_r+0xe>
 8005130:	89a3      	ldrh	r3, [r4, #12]
 8005132:	059b      	lsls	r3, r3, #22
 8005134:	d4df      	bmi.n	80050f6 <_fflush_r+0xe>
 8005136:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005138:	f7ff fb88 	bl	800484c <__retarget_lock_release_recursive>
 800513c:	e7db      	b.n	80050f6 <_fflush_r+0xe>
	...

08005140 <__swhatbuf_r>:
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	000e      	movs	r6, r1
 8005144:	001d      	movs	r5, r3
 8005146:	230e      	movs	r3, #14
 8005148:	5ec9      	ldrsh	r1, [r1, r3]
 800514a:	0014      	movs	r4, r2
 800514c:	b096      	sub	sp, #88	; 0x58
 800514e:	2900      	cmp	r1, #0
 8005150:	da0c      	bge.n	800516c <__swhatbuf_r+0x2c>
 8005152:	89b2      	ldrh	r2, [r6, #12]
 8005154:	2380      	movs	r3, #128	; 0x80
 8005156:	0011      	movs	r1, r2
 8005158:	4019      	ands	r1, r3
 800515a:	421a      	tst	r2, r3
 800515c:	d013      	beq.n	8005186 <__swhatbuf_r+0x46>
 800515e:	2100      	movs	r1, #0
 8005160:	3b40      	subs	r3, #64	; 0x40
 8005162:	2000      	movs	r0, #0
 8005164:	6029      	str	r1, [r5, #0]
 8005166:	6023      	str	r3, [r4, #0]
 8005168:	b016      	add	sp, #88	; 0x58
 800516a:	bd70      	pop	{r4, r5, r6, pc}
 800516c:	466a      	mov	r2, sp
 800516e:	f000 f84d 	bl	800520c <_fstat_r>
 8005172:	2800      	cmp	r0, #0
 8005174:	dbed      	blt.n	8005152 <__swhatbuf_r+0x12>
 8005176:	23f0      	movs	r3, #240	; 0xf0
 8005178:	9901      	ldr	r1, [sp, #4]
 800517a:	021b      	lsls	r3, r3, #8
 800517c:	4019      	ands	r1, r3
 800517e:	4b03      	ldr	r3, [pc, #12]	; (800518c <__swhatbuf_r+0x4c>)
 8005180:	18c9      	adds	r1, r1, r3
 8005182:	424b      	negs	r3, r1
 8005184:	4159      	adcs	r1, r3
 8005186:	2380      	movs	r3, #128	; 0x80
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	e7ea      	b.n	8005162 <__swhatbuf_r+0x22>
 800518c:	ffffe000 	.word	0xffffe000

08005190 <__smakebuf_r>:
 8005190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005192:	2602      	movs	r6, #2
 8005194:	898b      	ldrh	r3, [r1, #12]
 8005196:	0005      	movs	r5, r0
 8005198:	000c      	movs	r4, r1
 800519a:	4233      	tst	r3, r6
 800519c:	d006      	beq.n	80051ac <__smakebuf_r+0x1c>
 800519e:	0023      	movs	r3, r4
 80051a0:	3347      	adds	r3, #71	; 0x47
 80051a2:	6023      	str	r3, [r4, #0]
 80051a4:	6123      	str	r3, [r4, #16]
 80051a6:	2301      	movs	r3, #1
 80051a8:	6163      	str	r3, [r4, #20]
 80051aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80051ac:	466a      	mov	r2, sp
 80051ae:	ab01      	add	r3, sp, #4
 80051b0:	f7ff ffc6 	bl	8005140 <__swhatbuf_r>
 80051b4:	9900      	ldr	r1, [sp, #0]
 80051b6:	0007      	movs	r7, r0
 80051b8:	0028      	movs	r0, r5
 80051ba:	f7ff fbb5 	bl	8004928 <_malloc_r>
 80051be:	2800      	cmp	r0, #0
 80051c0:	d108      	bne.n	80051d4 <__smakebuf_r+0x44>
 80051c2:	220c      	movs	r2, #12
 80051c4:	5ea3      	ldrsh	r3, [r4, r2]
 80051c6:	059a      	lsls	r2, r3, #22
 80051c8:	d4ef      	bmi.n	80051aa <__smakebuf_r+0x1a>
 80051ca:	2203      	movs	r2, #3
 80051cc:	4393      	bics	r3, r2
 80051ce:	431e      	orrs	r6, r3
 80051d0:	81a6      	strh	r6, [r4, #12]
 80051d2:	e7e4      	b.n	800519e <__smakebuf_r+0xe>
 80051d4:	2380      	movs	r3, #128	; 0x80
 80051d6:	89a2      	ldrh	r2, [r4, #12]
 80051d8:	6020      	str	r0, [r4, #0]
 80051da:	4313      	orrs	r3, r2
 80051dc:	81a3      	strh	r3, [r4, #12]
 80051de:	9b00      	ldr	r3, [sp, #0]
 80051e0:	6120      	str	r0, [r4, #16]
 80051e2:	6163      	str	r3, [r4, #20]
 80051e4:	9b01      	ldr	r3, [sp, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00c      	beq.n	8005204 <__smakebuf_r+0x74>
 80051ea:	0028      	movs	r0, r5
 80051ec:	230e      	movs	r3, #14
 80051ee:	5ee1      	ldrsh	r1, [r4, r3]
 80051f0:	f000 f81e 	bl	8005230 <_isatty_r>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d005      	beq.n	8005204 <__smakebuf_r+0x74>
 80051f8:	2303      	movs	r3, #3
 80051fa:	89a2      	ldrh	r2, [r4, #12]
 80051fc:	439a      	bics	r2, r3
 80051fe:	3b02      	subs	r3, #2
 8005200:	4313      	orrs	r3, r2
 8005202:	81a3      	strh	r3, [r4, #12]
 8005204:	89a3      	ldrh	r3, [r4, #12]
 8005206:	433b      	orrs	r3, r7
 8005208:	81a3      	strh	r3, [r4, #12]
 800520a:	e7ce      	b.n	80051aa <__smakebuf_r+0x1a>

0800520c <_fstat_r>:
 800520c:	2300      	movs	r3, #0
 800520e:	b570      	push	{r4, r5, r6, lr}
 8005210:	4d06      	ldr	r5, [pc, #24]	; (800522c <_fstat_r+0x20>)
 8005212:	0004      	movs	r4, r0
 8005214:	0008      	movs	r0, r1
 8005216:	0011      	movs	r1, r2
 8005218:	602b      	str	r3, [r5, #0]
 800521a:	f7fb fc69 	bl	8000af0 <_fstat>
 800521e:	1c43      	adds	r3, r0, #1
 8005220:	d103      	bne.n	800522a <_fstat_r+0x1e>
 8005222:	682b      	ldr	r3, [r5, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d000      	beq.n	800522a <_fstat_r+0x1e>
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	bd70      	pop	{r4, r5, r6, pc}
 800522c:	20000348 	.word	0x20000348

08005230 <_isatty_r>:
 8005230:	2300      	movs	r3, #0
 8005232:	b570      	push	{r4, r5, r6, lr}
 8005234:	4d06      	ldr	r5, [pc, #24]	; (8005250 <_isatty_r+0x20>)
 8005236:	0004      	movs	r4, r0
 8005238:	0008      	movs	r0, r1
 800523a:	602b      	str	r3, [r5, #0]
 800523c:	f7fb fc66 	bl	8000b0c <_isatty>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d103      	bne.n	800524c <_isatty_r+0x1c>
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d000      	beq.n	800524c <_isatty_r+0x1c>
 800524a:	6023      	str	r3, [r4, #0]
 800524c:	bd70      	pop	{r4, r5, r6, pc}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	20000348 	.word	0x20000348

08005254 <_sbrk_r>:
 8005254:	2300      	movs	r3, #0
 8005256:	b570      	push	{r4, r5, r6, lr}
 8005258:	4d06      	ldr	r5, [pc, #24]	; (8005274 <_sbrk_r+0x20>)
 800525a:	0004      	movs	r4, r0
 800525c:	0008      	movs	r0, r1
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	f7fb fc68 	bl	8000b34 <_sbrk>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d103      	bne.n	8005270 <_sbrk_r+0x1c>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d000      	beq.n	8005270 <_sbrk_r+0x1c>
 800526e:	6023      	str	r3, [r4, #0]
 8005270:	bd70      	pop	{r4, r5, r6, pc}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	20000348 	.word	0x20000348

08005278 <memchr>:
 8005278:	b2c9      	uxtb	r1, r1
 800527a:	1882      	adds	r2, r0, r2
 800527c:	4290      	cmp	r0, r2
 800527e:	d101      	bne.n	8005284 <memchr+0xc>
 8005280:	2000      	movs	r0, #0
 8005282:	4770      	bx	lr
 8005284:	7803      	ldrb	r3, [r0, #0]
 8005286:	428b      	cmp	r3, r1
 8005288:	d0fb      	beq.n	8005282 <memchr+0xa>
 800528a:	3001      	adds	r0, #1
 800528c:	e7f6      	b.n	800527c <memchr+0x4>
	...

08005290 <_init>:
 8005290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005296:	bc08      	pop	{r3}
 8005298:	469e      	mov	lr, r3
 800529a:	4770      	bx	lr

0800529c <_fini>:
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a2:	bc08      	pop	{r3}
 80052a4:	469e      	mov	lr, r3
 80052a6:	4770      	bx	lr
