
10_RTC_ALARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004830  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080048f0  080048f0  000148f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049cc  080049cc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049d4  080049d4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049d4  080049d4  000149d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049d8  080049d8  000149d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080049dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000068  08004a44  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08004a44  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b0a4  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cde  00000000  00000000  0002b177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000990  00000000  00000000  0002ce58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000756  00000000  00000000  0002d7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001534c  00000000  00000000  0002df3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c8de  00000000  00000000  0004328a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f750  00000000  00000000  0004fb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002990  00000000  00000000  000cf2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000d1c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080048d8 	.word	0x080048d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080048d8 	.word	0x080048d8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b083      	sub	sp, #12
 80004c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c2:	f000 fb79 	bl	8000bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c6:	f000 f853 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ca:	f000 f9a3 	bl	8000814 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004ce:	f000 f971 	bl	80007b4 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80004d2:	f000 f8c7 	bl	8000664 <MX_RTC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	      HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80004d6:	491e      	ldr	r1, [pc, #120]	; (8000550 <main+0x94>)
 80004d8:	4b1e      	ldr	r3, [pc, #120]	; (8000554 <main+0x98>)
 80004da:	2200      	movs	r2, #0
 80004dc:	0018      	movs	r0, r3
 80004de:	f002 f81f 	bl	8002520 <HAL_RTC_GetDate>
	  	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80004e2:	491d      	ldr	r1, [pc, #116]	; (8000558 <main+0x9c>)
 80004e4:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <main+0x98>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	0018      	movs	r0, r3
 80004ea:	f001 ff27 	bl	800233c <HAL_RTC_GetTime>

	  	  sprintf(date, "Date : %02d.%02d.%02d\t", sDate.Date,sDate.Month,sDate.Year);
 80004ee:	4b18      	ldr	r3, [pc, #96]	; (8000550 <main+0x94>)
 80004f0:	789b      	ldrb	r3, [r3, #2]
 80004f2:	001a      	movs	r2, r3
 80004f4:	4b16      	ldr	r3, [pc, #88]	; (8000550 <main+0x94>)
 80004f6:	785b      	ldrb	r3, [r3, #1]
 80004f8:	001c      	movs	r4, r3
 80004fa:	4b15      	ldr	r3, [pc, #84]	; (8000550 <main+0x94>)
 80004fc:	78db      	ldrb	r3, [r3, #3]
 80004fe:	4917      	ldr	r1, [pc, #92]	; (800055c <main+0xa0>)
 8000500:	4817      	ldr	r0, [pc, #92]	; (8000560 <main+0xa4>)
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	0023      	movs	r3, r4
 8000506:	f003 fabf 	bl	8003a88 <siprintf>
	  	  sprintf(time, "Time : %02d.%02d.%02d\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <main+0x9c>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	001a      	movs	r2, r3
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <main+0x9c>)
 8000512:	785b      	ldrb	r3, [r3, #1]
 8000514:	001c      	movs	r4, r3
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <main+0x9c>)
 8000518:	789b      	ldrb	r3, [r3, #2]
 800051a:	4912      	ldr	r1, [pc, #72]	; (8000564 <main+0xa8>)
 800051c:	4812      	ldr	r0, [pc, #72]	; (8000568 <main+0xac>)
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	0023      	movs	r3, r4
 8000522:	f003 fab1 	bl	8003a88 <siprintf>

	  	  HAL_UART_Transmit(&huart1, (uint8_t *)date, sizeof(date),300);
 8000526:	2396      	movs	r3, #150	; 0x96
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	490d      	ldr	r1, [pc, #52]	; (8000560 <main+0xa4>)
 800052c:	480f      	ldr	r0, [pc, #60]	; (800056c <main+0xb0>)
 800052e:	2214      	movs	r2, #20
 8000530:	f002 fc38 	bl	8002da4 <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart1, (uint8_t *)time, sizeof(time),300);
 8000534:	2396      	movs	r3, #150	; 0x96
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	490b      	ldr	r1, [pc, #44]	; (8000568 <main+0xac>)
 800053a:	480c      	ldr	r0, [pc, #48]	; (800056c <main+0xb0>)
 800053c:	2214      	movs	r2, #20
 800053e:	f002 fc31 	bl	8002da4 <HAL_UART_Transmit>
	  	  HAL_Delay(1000);
 8000542:	23fa      	movs	r3, #250	; 0xfa
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	0018      	movs	r0, r3
 8000548:	f000 fba6 	bl	8000c98 <HAL_Delay>
	      HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800054c:	e7c3      	b.n	80004d6 <main+0x1a>
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	200000c0 	.word	0x200000c0
 8000554:	200000c4 	.word	0x200000c4
 8000558:	200000ac 	.word	0x200000ac
 800055c:	080048f0 	.word	0x080048f0
 8000560:	20000098 	.word	0x20000098
 8000564:	08004908 	.word	0x08004908
 8000568:	20000084 	.word	0x20000084
 800056c:	200000e8 	.word	0x200000e8

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b09d      	sub	sp, #116	; 0x74
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	2438      	movs	r4, #56	; 0x38
 8000578:	193b      	adds	r3, r7, r4
 800057a:	0018      	movs	r0, r3
 800057c:	2338      	movs	r3, #56	; 0x38
 800057e:	001a      	movs	r2, r3
 8000580:	2100      	movs	r1, #0
 8000582:	f003 fb93 	bl	8003cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000586:	2324      	movs	r3, #36	; 0x24
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	0018      	movs	r0, r3
 800058c:	2314      	movs	r3, #20
 800058e:	001a      	movs	r2, r3
 8000590:	2100      	movs	r1, #0
 8000592:	f003 fb8b 	bl	8003cac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000596:	003b      	movs	r3, r7
 8000598:	0018      	movs	r0, r3
 800059a:	2324      	movs	r3, #36	; 0x24
 800059c:	001a      	movs	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	f003 fb84 	bl	8003cac <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	4b2d      	ldr	r3, [pc, #180]	; (800065c <SystemClock_Config+0xec>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a2d      	ldr	r2, [pc, #180]	; (8000660 <SystemClock_Config+0xf0>)
 80005aa:	401a      	ands	r2, r3
 80005ac:	4b2b      	ldr	r3, [pc, #172]	; (800065c <SystemClock_Config+0xec>)
 80005ae:	2180      	movs	r1, #128	; 0x80
 80005b0:	0109      	lsls	r1, r1, #4
 80005b2:	430a      	orrs	r2, r1
 80005b4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005b6:	0021      	movs	r1, r4
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	220a      	movs	r2, #10
 80005bc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2201      	movs	r2, #1
 80005c2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2210      	movs	r2, #16
 80005c8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2202      	movs	r2, #2
 80005d4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2280      	movs	r2, #128	; 0x80
 80005e6:	0412      	lsls	r2, r2, #16
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 fde9 	bl	80011c4 <HAL_RCC_OscConfig>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005f6:	f000 f973 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	2124      	movs	r1, #36	; 0x24
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	220f      	movs	r2, #15
 8000600:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2203      	movs	r2, #3
 8000606:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2280      	movs	r2, #128	; 0x80
 8000612:	00d2      	lsls	r2, r2, #3
 8000614:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2100      	movs	r1, #0
 8000620:	0018      	movs	r0, r3
 8000622:	f001 f993 	bl	800194c <HAL_RCC_ClockConfig>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800062a:	f000 f959 	bl	80008e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 800062e:	003b      	movs	r3, r7
 8000630:	2221      	movs	r2, #33	; 0x21
 8000632:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000634:	003b      	movs	r3, r7
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800063a:	003b      	movs	r3, r7
 800063c:	2280      	movs	r2, #128	; 0x80
 800063e:	0292      	lsls	r2, r2, #10
 8000640:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000642:	003b      	movs	r3, r7
 8000644:	0018      	movs	r0, r3
 8000646:	f001 fba5 	bl	8001d94 <HAL_RCCEx_PeriphCLKConfig>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800064e:	f000 f947 	bl	80008e0 <Error_Handler>
  }
}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b01d      	add	sp, #116	; 0x74
 8000658:	bd90      	pop	{r4, r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	40007000 	.word	0x40007000
 8000660:	ffffe7ff 	.word	0xffffe7ff

08000664 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b090      	sub	sp, #64	; 0x40
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800066a:	232c      	movs	r3, #44	; 0x2c
 800066c:	18fb      	adds	r3, r7, r3
 800066e:	0018      	movs	r0, r3
 8000670:	2314      	movs	r3, #20
 8000672:	001a      	movs	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	f003 fb19 	bl	8003cac <memset>
  RTC_DateTypeDef sDate = {0};
 800067a:	2328      	movs	r3, #40	; 0x28
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000682:	003b      	movs	r3, r7
 8000684:	0018      	movs	r0, r3
 8000686:	2328      	movs	r3, #40	; 0x28
 8000688:	001a      	movs	r2, r3
 800068a:	2100      	movs	r1, #0
 800068c:	f003 fb0e 	bl	8003cac <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000690:	4b45      	ldr	r3, [pc, #276]	; (80007a8 <MX_RTC_Init+0x144>)
 8000692:	4a46      	ldr	r2, [pc, #280]	; (80007ac <MX_RTC_Init+0x148>)
 8000694:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000696:	4b44      	ldr	r3, [pc, #272]	; (80007a8 <MX_RTC_Init+0x144>)
 8000698:	2200      	movs	r2, #0
 800069a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800069c:	4b42      	ldr	r3, [pc, #264]	; (80007a8 <MX_RTC_Init+0x144>)
 800069e:	227f      	movs	r2, #127	; 0x7f
 80006a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006a2:	4b41      	ldr	r3, [pc, #260]	; (80007a8 <MX_RTC_Init+0x144>)
 80006a4:	22ff      	movs	r2, #255	; 0xff
 80006a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006a8:	4b3f      	ldr	r3, [pc, #252]	; (80007a8 <MX_RTC_Init+0x144>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006ae:	4b3e      	ldr	r3, [pc, #248]	; (80007a8 <MX_RTC_Init+0x144>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006b4:	4b3c      	ldr	r3, [pc, #240]	; (80007a8 <MX_RTC_Init+0x144>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006ba:	4b3b      	ldr	r3, [pc, #236]	; (80007a8 <MX_RTC_Init+0x144>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006c0:	4b39      	ldr	r3, [pc, #228]	; (80007a8 <MX_RTC_Init+0x144>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 fcf4 	bl	80020b0 <HAL_RTC_Init>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80006cc:	f000 f908 	bl	80008e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x4;
 80006d0:	212c      	movs	r1, #44	; 0x2c
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2204      	movs	r2, #4
 80006d6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x1;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2201      	movs	r2, #1
 80006dc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006f0:	1879      	adds	r1, r7, r1
 80006f2:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <MX_RTC_Init+0x144>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 fd76 	bl	80021e8 <HAL_RTC_SetTime>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000700:	f000 f8ee 	bl	80008e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000704:	2128      	movs	r1, #40	; 0x28
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2203      	movs	r2, #3
 800070a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_MARCH;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2203      	movs	r2, #3
 8000710:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x27;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2227      	movs	r2, #39	; 0x27
 8000716:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x24;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2224      	movs	r2, #36	; 0x24
 800071c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800071e:	1879      	adds	r1, r7, r1
 8000720:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_RTC_Init+0x144>)
 8000722:	2201      	movs	r2, #1
 8000724:	0018      	movs	r0, r3
 8000726:	f001 fe67 	bl	80023f8 <HAL_RTC_SetDate>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800072e:	f000 f8d7 	bl	80008e0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x4;
 8000732:	003b      	movs	r3, r7
 8000734:	2204      	movs	r2, #4
 8000736:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000738:	003b      	movs	r3, r7
 800073a:	2201      	movs	r2, #1
 800073c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 800073e:	003b      	movs	r3, r7
 8000740:	2210      	movs	r2, #16
 8000742:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000744:	003b      	movs	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800074a:	003b      	movs	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000750:	003b      	movs	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_HOURS|RTC_ALARMMASK_MINUTES;
 8000756:	003b      	movs	r3, r7
 8000758:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <MX_RTC_Init+0x14c>)
 800075a:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800075c:	003b      	movs	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000762:	003b      	movs	r3, r7
 8000764:	2200      	movs	r2, #0
 8000766:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x27;
 8000768:	003b      	movs	r3, r7
 800076a:	2220      	movs	r2, #32
 800076c:	2127      	movs	r1, #39	; 0x27
 800076e:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000770:	003b      	movs	r3, r7
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	0052      	lsls	r2, r2, #1
 8000776:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000778:	0039      	movs	r1, r7
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_RTC_Init+0x144>)
 800077c:	2201      	movs	r2, #1
 800077e:	0018      	movs	r0, r3
 8000780:	f001 ff1e 	bl	80025c0 <HAL_RTC_SetAlarm_IT>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8000788:	f000 f8aa 	bl	80008e0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_RTC_Init+0x144>)
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	0018      	movs	r0, r3
 8000794:	f002 f99a 	bl	8002acc <HAL_RTCEx_SetWakeUpTimer_IT>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_RTC_Init+0x13c>
  {
    Error_Handler();
 800079c:	f000 f8a0 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b010      	add	sp, #64	; 0x40
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000c4 	.word	0x200000c4
 80007ac:	40002800 	.word	0x40002800
 80007b0:	00808000 	.word	0x00808000

080007b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007ba:	4a15      	ldr	r2, [pc, #84]	; (8000810 <MX_USART1_UART_Init+0x5c>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007c0:	22e1      	movs	r2, #225	; 0xe1
 80007c2:	0252      	lsls	r2, r2, #9
 80007c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007f8:	0018      	movs	r0, r3
 80007fa:	f002 fa7f 	bl	8002cfc <HAL_UART_Init>
 80007fe:	1e03      	subs	r3, r0, #0
 8000800:	d001      	beq.n	8000806 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000802:	f000 f86d 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000e8 	.word	0x200000e8
 8000810:	40013800 	.word	0x40013800

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	240c      	movs	r4, #12
 800081c:	193b      	adds	r3, r7, r4
 800081e:	0018      	movs	r0, r3
 8000820:	2314      	movs	r3, #20
 8000822:	001a      	movs	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f003 fa41 	bl	8003cac <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_GPIO_Init+0x9c>)
 800082c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <MX_GPIO_Init+0x9c>)
 8000830:	2104      	movs	r1, #4
 8000832:	430a      	orrs	r2, r1
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_GPIO_Init+0x9c>)
 8000838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083a:	2204      	movs	r2, #4
 800083c:	4013      	ands	r3, r2
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_GPIO_Init+0x9c>)
 8000844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_GPIO_Init+0x9c>)
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	430a      	orrs	r2, r1
 800084c:	62da      	str	r2, [r3, #44]	; 0x2c
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_GPIO_Init+0x9c>)
 8000850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	4013      	ands	r3, r2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_GPIO_Init+0x9c>)
 800085c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_GPIO_Init+0x9c>)
 8000860:	2101      	movs	r1, #1
 8000862:	430a      	orrs	r2, r1
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_GPIO_Init+0x9c>)
 8000868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086a:	2201      	movs	r2, #1
 800086c:	4013      	ands	r3, r2
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 8000872:	23a0      	movs	r3, #160	; 0xa0
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	2200      	movs	r2, #0
 8000878:	2120      	movs	r1, #32
 800087a:	0018      	movs	r0, r3
 800087c:	f000 fc84 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 8000880:	0021      	movs	r1, r4
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2220      	movs	r2, #32
 8000886:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2201      	movs	r2, #1
 800088c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 800089a:	187a      	adds	r2, r7, r1
 800089c:	23a0      	movs	r3, #160	; 0xa0
 800089e:	05db      	lsls	r3, r3, #23
 80008a0:	0011      	movs	r1, r2
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 fafa 	bl	8000e9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b009      	add	sp, #36	; 0x24
 80008ae:	bd90      	pop	{r4, r7, pc}
 80008b0:	40021000 	.word	0x40021000

080008b4 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
//  UNUSED(hrtc);
	HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_SET);
 80008bc:	23a0      	movs	r3, #160	; 0xa0
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	2201      	movs	r2, #1
 80008c2:	2120      	movs	r1, #32
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 fc5f 	bl	8001188 <HAL_GPIO_WritePin>
	printf("Alarm ON\r\n");
 80008ca:	4b04      	ldr	r3, [pc, #16]	; (80008dc <HAL_RTC_AlarmAEventCallback+0x28>)
 80008cc:	0018      	movs	r0, r3
 80008ce:	f003 f8d1 	bl	8003a74 <puts>
//	HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
//	HAL_Delay(5000);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b002      	add	sp, #8
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	08004920 	.word	0x08004920

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <HAL_MspInit+0x24>)
 80008f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_MspInit+0x24>)
 80008f6:	2101      	movs	r1, #1
 80008f8:	430a      	orrs	r2, r1
 80008fa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <HAL_MspInit+0x24>)
 80008fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <HAL_MspInit+0x24>)
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	0549      	lsls	r1, r1, #21
 8000906:	430a      	orrs	r2, r1
 8000908:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40021000 	.word	0x40021000

08000914 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a0a      	ldr	r2, [pc, #40]	; (800094c <HAL_RTC_MspInit+0x38>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d10e      	bne.n	8000944 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <HAL_RTC_MspInit+0x3c>)
 8000928:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <HAL_RTC_MspInit+0x3c>)
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	02c9      	lsls	r1, r1, #11
 8000930:	430a      	orrs	r2, r1
 8000932:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	2002      	movs	r0, #2
 800093a:	f000 fa7d 	bl	8000e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800093e:	2002      	movs	r0, #2
 8000940:	f000 fa8f 	bl	8000e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b002      	add	sp, #8
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40002800 	.word	0x40002800
 8000950:	40021000 	.word	0x40021000

08000954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b089      	sub	sp, #36	; 0x24
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	240c      	movs	r4, #12
 800095e:	193b      	adds	r3, r7, r4
 8000960:	0018      	movs	r0, r3
 8000962:	2314      	movs	r3, #20
 8000964:	001a      	movs	r2, r3
 8000966:	2100      	movs	r1, #0
 8000968:	f003 f9a0 	bl	8003cac <memset>
  if(huart->Instance==USART1)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <HAL_UART_MspInit+0x80>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d12a      	bne.n	80009cc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <HAL_UART_MspInit+0x84>)
 8000978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <HAL_UART_MspInit+0x84>)
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	01c9      	lsls	r1, r1, #7
 8000980:	430a      	orrs	r2, r1
 8000982:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <HAL_UART_MspInit+0x84>)
 8000986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <HAL_UART_MspInit+0x84>)
 800098a:	2101      	movs	r1, #1
 800098c:	430a      	orrs	r2, r1
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <HAL_UART_MspInit+0x84>)
 8000992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000994:	2201      	movs	r2, #1
 8000996:	4013      	ands	r3, r2
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_USART1_TX_Pin|BSP_USART1_RX_Pin;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	22c0      	movs	r2, #192	; 0xc0
 80009a0:	00d2      	lsls	r2, r2, #3
 80009a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	0021      	movs	r1, r4
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2202      	movs	r2, #2
 80009aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2203      	movs	r2, #3
 80009b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2204      	movs	r2, #4
 80009bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	187a      	adds	r2, r7, r1
 80009c0:	23a0      	movs	r3, #160	; 0xa0
 80009c2:	05db      	lsls	r3, r3, #23
 80009c4:	0011      	movs	r1, r2
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 fa68 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b009      	add	sp, #36	; 0x24
 80009d2:	bd90      	pop	{r4, r7, pc}
 80009d4:	40013800 	.word	0x40013800
 80009d8:	40021000 	.word	0x40021000

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e0:	e7fe      	b.n	80009e0 <NMI_Handler+0x4>

080009e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <HardFault_Handler+0x4>

080009e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a00:	f000 f92e 	bl	8000c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <RTC_IRQHandler+0x1c>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f001 ff36 	bl	8002884 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <RTC_IRQHandler+0x1c>)
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f002 f92e 	bl	8002c7c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	200000c4 	.word	0x200000c4

08000a2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	e00a      	b.n	8000a54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a3e:	e000      	b.n	8000a42 <_read+0x16>
 8000a40:	bf00      	nop
 8000a42:	0001      	movs	r1, r0
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	60ba      	str	r2, [r7, #8]
 8000a4a:	b2ca      	uxtb	r2, r1
 8000a4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	3301      	adds	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	dbf0      	blt.n	8000a3e <_read+0x12>
  }

  return len;
 8000a5c:	687b      	ldr	r3, [r7, #4]
}
 8000a5e:	0018      	movs	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b006      	add	sp, #24
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 1000);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	23fa      	movs	r3, #250	; 0xfa
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	68b9      	ldr	r1, [r7, #8]
 8000a7e:	4804      	ldr	r0, [pc, #16]	; (8000a90 <_write+0x28>)
 8000a80:	f002 f990 	bl	8002da4 <HAL_UART_Transmit>
  return len;
 8000a84:	687b      	ldr	r3, [r7, #4]
}
 8000a86:	0018      	movs	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b004      	add	sp, #16
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	200000e8 	.word	0x200000e8

08000a94 <_close>:

int _close(int file)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	425b      	negs	r3, r3
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	0192      	lsls	r2, r2, #6
 8000ab8:	605a      	str	r2, [r3, #4]
  return 0;
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	0018      	movs	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b002      	add	sp, #8
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <_isatty>:

int _isatty(int file)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000acc:	2301      	movs	r3, #1
}
 8000ace:	0018      	movs	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b084      	sub	sp, #16
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	60f8      	str	r0, [r7, #12]
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b004      	add	sp, #16
 8000aea:	bd80      	pop	{r7, pc}

08000aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <_sbrk+0x5c>)
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <_sbrk+0x60>)
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <_sbrk+0x64>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <_sbrk+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	18d3      	adds	r3, r2, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d207      	bcs.n	8000b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b1c:	f003 f91c 	bl	8003d58 <__errno>
 8000b20:	0003      	movs	r3, r0
 8000b22:	220c      	movs	r2, #12
 8000b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	425b      	negs	r3, r3
 8000b2a:	e009      	b.n	8000b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	18d2      	adds	r2, r2, r3
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <_sbrk+0x64>)
 8000b3c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b006      	add	sp, #24
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20002000 	.word	0x20002000
 8000b4c:	00000400 	.word	0x00000400
 8000b50:	20000170 	.word	0x20000170
 8000b54:	200002c8 	.word	0x200002c8

08000b58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b66:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b68:	f7ff fff6 	bl	8000b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b6c:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6e:	490d      	ldr	r1, [pc, #52]	; (8000ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <LoopForever+0xe>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b84:	4c0a      	ldr	r4, [pc, #40]	; (8000bb0 <LoopForever+0x16>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b92:	f003 f8e7 	bl	8003d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b96:	f7ff fc91 	bl	80004bc <main>

08000b9a <LoopForever>:

LoopForever:
    b LoopForever
 8000b9a:	e7fe      	b.n	8000b9a <LoopForever>
  ldr   r0, =_estack
 8000b9c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ba8:	080049dc 	.word	0x080049dc
  ldr r2, =_sbss
 8000bac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bb0:	200002c4 	.word	0x200002c4

08000bb4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC1_COMP_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_Init+0x3c>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <HAL_Init+0x3c>)
 8000bca:	2140      	movs	r1, #64	; 0x40
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f000 f811 	bl	8000bf8 <HAL_InitTick>
 8000bd6:	1e03      	subs	r3, r0, #0
 8000bd8:	d003      	beq.n	8000be2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
 8000be0:	e001      	b.n	8000be6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be2:	f7ff fe83 	bl	80008ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
}
 8000bea:	0018      	movs	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b002      	add	sp, #8
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	40022000 	.word	0x40022000

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <HAL_InitTick+0x5c>)
 8000c02:	681c      	ldr	r4, [r3, #0]
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <HAL_InitTick+0x60>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	0019      	movs	r1, r3
 8000c0a:	23fa      	movs	r3, #250	; 0xfa
 8000c0c:	0098      	lsls	r0, r3, #2
 8000c0e:	f7ff fa85 	bl	800011c <__udivsi3>
 8000c12:	0003      	movs	r3, r0
 8000c14:	0019      	movs	r1, r3
 8000c16:	0020      	movs	r0, r4
 8000c18:	f7ff fa80 	bl	800011c <__udivsi3>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f000 f92f 	bl	8000e82 <HAL_SYSTICK_Config>
 8000c24:	1e03      	subs	r3, r0, #0
 8000c26:	d001      	beq.n	8000c2c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e00f      	b.n	8000c4c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b03      	cmp	r3, #3
 8000c30:	d80b      	bhi.n	8000c4a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	2301      	movs	r3, #1
 8000c36:	425b      	negs	r3, r3
 8000c38:	2200      	movs	r2, #0
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f000 f8fc 	bl	8000e38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_InitTick+0x64>)
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e000      	b.n	8000c4c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b003      	add	sp, #12
 8000c52:	bd90      	pop	{r4, r7, pc}
 8000c54:	20000000 	.word	0x20000000
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	20000004 	.word	0x20000004

08000c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_IncTick+0x1c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	001a      	movs	r2, r3
 8000c6a:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <HAL_IncTick+0x20>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	18d2      	adds	r2, r2, r3
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_IncTick+0x20>)
 8000c72:	601a      	str	r2, [r3, #0]
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000174 	.word	0x20000174

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b02      	ldr	r3, [pc, #8]	; (8000c94 <HAL_GetTick+0x10>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	20000174 	.word	0x20000174

08000c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca0:	f7ff fff0 	bl	8000c84 <HAL_GetTick>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	d005      	beq.n	8000cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_Delay+0x44>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	001a      	movs	r2, r3
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	189b      	adds	r3, r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	f7ff ffe0 	bl	8000c84 <HAL_GetTick>
 8000cc4:	0002      	movs	r2, r0
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d8f7      	bhi.n	8000cc0 <HAL_Delay+0x28>
  {
  }
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b004      	add	sp, #16
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	20000008 	.word	0x20000008

08000ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	0002      	movs	r2, r0
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b7f      	cmp	r3, #127	; 0x7f
 8000cf2:	d809      	bhi.n	8000d08 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf4:	1dfb      	adds	r3, r7, #7
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	231f      	movs	r3, #31
 8000cfc:	401a      	ands	r2, r3
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <__NVIC_EnableIRQ+0x30>)
 8000d00:	2101      	movs	r1, #1
 8000d02:	4091      	lsls	r1, r2
 8000d04:	000a      	movs	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]
  }
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b7f      	cmp	r3, #127	; 0x7f
 8000d28:	d828      	bhi.n	8000d7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d2a:	4a2f      	ldr	r2, [pc, #188]	; (8000de8 <__NVIC_SetPriority+0xd4>)
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	089b      	lsrs	r3, r3, #2
 8000d34:	33c0      	adds	r3, #192	; 0xc0
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	589b      	ldr	r3, [r3, r2]
 8000d3a:	1dfa      	adds	r2, r7, #7
 8000d3c:	7812      	ldrb	r2, [r2, #0]
 8000d3e:	0011      	movs	r1, r2
 8000d40:	2203      	movs	r2, #3
 8000d42:	400a      	ands	r2, r1
 8000d44:	00d2      	lsls	r2, r2, #3
 8000d46:	21ff      	movs	r1, #255	; 0xff
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	000a      	movs	r2, r1
 8000d4c:	43d2      	mvns	r2, r2
 8000d4e:	401a      	ands	r2, r3
 8000d50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	019b      	lsls	r3, r3, #6
 8000d56:	22ff      	movs	r2, #255	; 0xff
 8000d58:	401a      	ands	r2, r3
 8000d5a:	1dfb      	adds	r3, r7, #7
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	0018      	movs	r0, r3
 8000d60:	2303      	movs	r3, #3
 8000d62:	4003      	ands	r3, r0
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d68:	481f      	ldr	r0, [pc, #124]	; (8000de8 <__NVIC_SetPriority+0xd4>)
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	430a      	orrs	r2, r1
 8000d74:	33c0      	adds	r3, #192	; 0xc0
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d7a:	e031      	b.n	8000de0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <__NVIC_SetPriority+0xd8>)
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	0019      	movs	r1, r3
 8000d84:	230f      	movs	r3, #15
 8000d86:	400b      	ands	r3, r1
 8000d88:	3b08      	subs	r3, #8
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	3306      	adds	r3, #6
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	18d3      	adds	r3, r2, r3
 8000d92:	3304      	adds	r3, #4
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	1dfa      	adds	r2, r7, #7
 8000d98:	7812      	ldrb	r2, [r2, #0]
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	400a      	ands	r2, r1
 8000da0:	00d2      	lsls	r2, r2, #3
 8000da2:	21ff      	movs	r1, #255	; 0xff
 8000da4:	4091      	lsls	r1, r2
 8000da6:	000a      	movs	r2, r1
 8000da8:	43d2      	mvns	r2, r2
 8000daa:	401a      	ands	r2, r3
 8000dac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	019b      	lsls	r3, r3, #6
 8000db2:	22ff      	movs	r2, #255	; 0xff
 8000db4:	401a      	ands	r2, r3
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	0018      	movs	r0, r3
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	4003      	ands	r3, r0
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <__NVIC_SetPriority+0xd8>)
 8000dc6:	1dfb      	adds	r3, r7, #7
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	001c      	movs	r4, r3
 8000dcc:	230f      	movs	r3, #15
 8000dce:	4023      	ands	r3, r4
 8000dd0:	3b08      	subs	r3, #8
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	3306      	adds	r3, #6
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	18c3      	adds	r3, r0, r3
 8000ddc:	3304      	adds	r3, #4
 8000dde:	601a      	str	r2, [r3, #0]
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b003      	add	sp, #12
 8000de6:	bd90      	pop	{r4, r7, pc}
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	1e5a      	subs	r2, r3, #1
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	045b      	lsls	r3, r3, #17
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d301      	bcc.n	8000e08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e04:	2301      	movs	r3, #1
 8000e06:	e010      	b.n	8000e2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <SysTick_Config+0x44>)
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e10:	2301      	movs	r3, #1
 8000e12:	425b      	negs	r3, r3
 8000e14:	2103      	movs	r1, #3
 8000e16:	0018      	movs	r0, r3
 8000e18:	f7ff ff7c 	bl	8000d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <SysTick_Config+0x44>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SysTick_Config+0x44>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b002      	add	sp, #8
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	210f      	movs	r1, #15
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	1c02      	adds	r2, r0, #0
 8000e48:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b25b      	sxtb	r3, r3
 8000e52:	0011      	movs	r1, r2
 8000e54:	0018      	movs	r0, r3
 8000e56:	f7ff ff5d 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b004      	add	sp, #16
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	0002      	movs	r2, r0
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b25b      	sxtb	r3, r3
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff ff33 	bl	8000ce0 <__NVIC_EnableIRQ>
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b002      	add	sp, #8
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f7ff ffaf 	bl	8000df0 <SysTick_Config>
 8000e92:	0003      	movs	r3, r0
}
 8000e94:	0018      	movs	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000eb2:	e14f      	b.n	8001154 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2101      	movs	r1, #1
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	4091      	lsls	r1, r2
 8000ebe:	000a      	movs	r2, r1
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d100      	bne.n	8000ecc <HAL_GPIO_Init+0x30>
 8000eca:	e140      	b.n	800114e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d005      	beq.n	8000ee4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2203      	movs	r2, #3
 8000ede:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d130      	bne.n	8000f46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	409a      	lsls	r2, r3
 8000ef2:	0013      	movs	r3, r2
 8000ef4:	43da      	mvns	r2, r3
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	409a      	lsls	r2, r3
 8000f06:	0013      	movs	r3, r2
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	43da      	mvns	r2, r3
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	091b      	lsrs	r3, r3, #4
 8000f30:	2201      	movs	r2, #1
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d017      	beq.n	8000f82 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	0013      	movs	r3, r2
 8000f62:	43da      	mvns	r2, r3
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	409a      	lsls	r2, r3
 8000f74:	0013      	movs	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2203      	movs	r2, #3
 8000f88:	4013      	ands	r3, r2
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d123      	bne.n	8000fd6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	08da      	lsrs	r2, r3, #3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3208      	adds	r2, #8
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	58d3      	ldr	r3, [r2, r3]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	0013      	movs	r3, r2
 8000faa:	43da      	mvns	r2, r3
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	691a      	ldr	r2, [r3, #16]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	2107      	movs	r1, #7
 8000fba:	400b      	ands	r3, r1
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	0092      	lsls	r2, r2, #2
 8000fd2:	6939      	ldr	r1, [r7, #16]
 8000fd4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	0013      	movs	r3, r2
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	23c0      	movs	r3, #192	; 0xc0
 8001010:	029b      	lsls	r3, r3, #10
 8001012:	4013      	ands	r3, r2
 8001014:	d100      	bne.n	8001018 <HAL_GPIO_Init+0x17c>
 8001016:	e09a      	b.n	800114e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001018:	4b54      	ldr	r3, [pc, #336]	; (800116c <HAL_GPIO_Init+0x2d0>)
 800101a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800101c:	4b53      	ldr	r3, [pc, #332]	; (800116c <HAL_GPIO_Init+0x2d0>)
 800101e:	2101      	movs	r1, #1
 8001020:	430a      	orrs	r2, r1
 8001022:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001024:	4a52      	ldr	r2, [pc, #328]	; (8001170 <HAL_GPIO_Init+0x2d4>)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	089b      	lsrs	r3, r3, #2
 800102a:	3302      	adds	r3, #2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	589b      	ldr	r3, [r3, r2]
 8001030:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2203      	movs	r2, #3
 8001036:	4013      	ands	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	220f      	movs	r2, #15
 800103c:	409a      	lsls	r2, r3
 800103e:	0013      	movs	r3, r2
 8001040:	43da      	mvns	r2, r3
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	23a0      	movs	r3, #160	; 0xa0
 800104c:	05db      	lsls	r3, r3, #23
 800104e:	429a      	cmp	r2, r3
 8001050:	d019      	beq.n	8001086 <HAL_GPIO_Init+0x1ea>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a47      	ldr	r2, [pc, #284]	; (8001174 <HAL_GPIO_Init+0x2d8>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d013      	beq.n	8001082 <HAL_GPIO_Init+0x1e6>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a46      	ldr	r2, [pc, #280]	; (8001178 <HAL_GPIO_Init+0x2dc>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00d      	beq.n	800107e <HAL_GPIO_Init+0x1e2>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a45      	ldr	r2, [pc, #276]	; (800117c <HAL_GPIO_Init+0x2e0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d007      	beq.n	800107a <HAL_GPIO_Init+0x1de>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a44      	ldr	r2, [pc, #272]	; (8001180 <HAL_GPIO_Init+0x2e4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_GPIO_Init+0x1da>
 8001072:	2305      	movs	r3, #5
 8001074:	e008      	b.n	8001088 <HAL_GPIO_Init+0x1ec>
 8001076:	2306      	movs	r3, #6
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x1ec>
 800107a:	2303      	movs	r3, #3
 800107c:	e004      	b.n	8001088 <HAL_GPIO_Init+0x1ec>
 800107e:	2302      	movs	r3, #2
 8001080:	e002      	b.n	8001088 <HAL_GPIO_Init+0x1ec>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_GPIO_Init+0x1ec>
 8001086:	2300      	movs	r3, #0
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	2103      	movs	r1, #3
 800108c:	400a      	ands	r2, r1
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	4093      	lsls	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001098:	4935      	ldr	r1, [pc, #212]	; (8001170 <HAL_GPIO_Init+0x2d4>)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3302      	adds	r3, #2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a6:	4b37      	ldr	r3, [pc, #220]	; (8001184 <HAL_GPIO_Init+0x2e8>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43da      	mvns	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	035b      	lsls	r3, r3, #13
 80010be:	4013      	ands	r3, r2
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010ca:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <HAL_GPIO_Init+0x2e8>)
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010d0:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <HAL_GPIO_Init+0x2e8>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43da      	mvns	r2, r3
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	039b      	lsls	r3, r3, #14
 80010e8:	4013      	ands	r3, r2
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010f4:	4b23      	ldr	r3, [pc, #140]	; (8001184 <HAL_GPIO_Init+0x2e8>)
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80010fa:	4b22      	ldr	r3, [pc, #136]	; (8001184 <HAL_GPIO_Init+0x2e8>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	029b      	lsls	r3, r3, #10
 8001112:	4013      	ands	r3, r2
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_GPIO_Init+0x2e8>)
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <HAL_GPIO_Init+0x2e8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	43da      	mvns	r2, r3
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	025b      	lsls	r3, r3, #9
 800113c:	4013      	ands	r3, r2
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_GPIO_Init+0x2e8>)
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	40da      	lsrs	r2, r3
 800115c:	1e13      	subs	r3, r2, #0
 800115e:	d000      	beq.n	8001162 <HAL_GPIO_Init+0x2c6>
 8001160:	e6a8      	b.n	8000eb4 <HAL_GPIO_Init+0x18>
  }
}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46c0      	nop			; (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	b006      	add	sp, #24
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000
 8001170:	40010000 	.word	0x40010000
 8001174:	50000400 	.word	0x50000400
 8001178:	50000800 	.word	0x50000800
 800117c:	50000c00 	.word	0x50000c00
 8001180:	50001c00 	.word	0x50001c00
 8001184:	40010400 	.word	0x40010400

08001188 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	0008      	movs	r0, r1
 8001192:	0011      	movs	r1, r2
 8001194:	1cbb      	adds	r3, r7, #2
 8001196:	1c02      	adds	r2, r0, #0
 8001198:	801a      	strh	r2, [r3, #0]
 800119a:	1c7b      	adds	r3, r7, #1
 800119c:	1c0a      	adds	r2, r1, #0
 800119e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011a0:	1c7b      	adds	r3, r7, #1
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011a8:	1cbb      	adds	r3, r7, #2
 80011aa:	881a      	ldrh	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80011b0:	e003      	b.n	80011ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80011b2:	1cbb      	adds	r3, r7, #2
 80011b4:	881a      	ldrh	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	b002      	add	sp, #8
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c4:	b5b0      	push	{r4, r5, r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d102      	bne.n	80011d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f000 fbaf 	bl	8001936 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011d8:	4bcf      	ldr	r3, [pc, #828]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	220c      	movs	r2, #12
 80011de:	4013      	ands	r3, r2
 80011e0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011e2:	4bcd      	ldr	r3, [pc, #820]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 80011e4:	68da      	ldr	r2, [r3, #12]
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	025b      	lsls	r3, r3, #9
 80011ea:	4013      	ands	r3, r2
 80011ec:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2201      	movs	r2, #1
 80011f4:	4013      	ands	r3, r2
 80011f6:	d100      	bne.n	80011fa <HAL_RCC_OscConfig+0x36>
 80011f8:	e07e      	b.n	80012f8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011fa:	6a3b      	ldr	r3, [r7, #32]
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d007      	beq.n	8001210 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	2b0c      	cmp	r3, #12
 8001204:	d112      	bne.n	800122c <HAL_RCC_OscConfig+0x68>
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	025b      	lsls	r3, r3, #9
 800120c:	429a      	cmp	r2, r3
 800120e:	d10d      	bne.n	800122c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001210:	4bc1      	ldr	r3, [pc, #772]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	029b      	lsls	r3, r3, #10
 8001218:	4013      	ands	r3, r2
 800121a:	d100      	bne.n	800121e <HAL_RCC_OscConfig+0x5a>
 800121c:	e06b      	b.n	80012f6 <HAL_RCC_OscConfig+0x132>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d167      	bne.n	80012f6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	f000 fb85 	bl	8001936 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	025b      	lsls	r3, r3, #9
 8001234:	429a      	cmp	r2, r3
 8001236:	d107      	bne.n	8001248 <HAL_RCC_OscConfig+0x84>
 8001238:	4bb7      	ldr	r3, [pc, #732]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4bb6      	ldr	r3, [pc, #728]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 800123e:	2180      	movs	r1, #128	; 0x80
 8001240:	0249      	lsls	r1, r1, #9
 8001242:	430a      	orrs	r2, r1
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	e027      	b.n	8001298 <HAL_RCC_OscConfig+0xd4>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	23a0      	movs	r3, #160	; 0xa0
 800124e:	02db      	lsls	r3, r3, #11
 8001250:	429a      	cmp	r2, r3
 8001252:	d10e      	bne.n	8001272 <HAL_RCC_OscConfig+0xae>
 8001254:	4bb0      	ldr	r3, [pc, #704]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4baf      	ldr	r3, [pc, #700]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 800125a:	2180      	movs	r1, #128	; 0x80
 800125c:	02c9      	lsls	r1, r1, #11
 800125e:	430a      	orrs	r2, r1
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	4bad      	ldr	r3, [pc, #692]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4bac      	ldr	r3, [pc, #688]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 8001268:	2180      	movs	r1, #128	; 0x80
 800126a:	0249      	lsls	r1, r1, #9
 800126c:	430a      	orrs	r2, r1
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	e012      	b.n	8001298 <HAL_RCC_OscConfig+0xd4>
 8001272:	4ba9      	ldr	r3, [pc, #676]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4ba8      	ldr	r3, [pc, #672]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 8001278:	49a8      	ldr	r1, [pc, #672]	; (800151c <HAL_RCC_OscConfig+0x358>)
 800127a:	400a      	ands	r2, r1
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	4ba6      	ldr	r3, [pc, #664]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	025b      	lsls	r3, r3, #9
 8001286:	4013      	ands	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4ba2      	ldr	r3, [pc, #648]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4ba1      	ldr	r3, [pc, #644]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 8001292:	49a3      	ldr	r1, [pc, #652]	; (8001520 <HAL_RCC_OscConfig+0x35c>)
 8001294:	400a      	ands	r2, r1
 8001296:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d015      	beq.n	80012cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a0:	f7ff fcf0 	bl	8000c84 <HAL_GetTick>
 80012a4:	0003      	movs	r3, r0
 80012a6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012a8:	e009      	b.n	80012be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012aa:	f7ff fceb 	bl	8000c84 <HAL_GetTick>
 80012ae:	0002      	movs	r2, r0
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b64      	cmp	r3, #100	; 0x64
 80012b6:	d902      	bls.n	80012be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	f000 fb3c 	bl	8001936 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012be:	4b96      	ldr	r3, [pc, #600]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	029b      	lsls	r3, r3, #10
 80012c6:	4013      	ands	r3, r2
 80012c8:	d0ef      	beq.n	80012aa <HAL_RCC_OscConfig+0xe6>
 80012ca:	e015      	b.n	80012f8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fcda 	bl	8000c84 <HAL_GetTick>
 80012d0:	0003      	movs	r3, r0
 80012d2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d6:	f7ff fcd5 	bl	8000c84 <HAL_GetTick>
 80012da:	0002      	movs	r2, r0
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b64      	cmp	r3, #100	; 0x64
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e326      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012e8:	4b8b      	ldr	r3, [pc, #556]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	029b      	lsls	r3, r3, #10
 80012f0:	4013      	ands	r3, r2
 80012f2:	d1f0      	bne.n	80012d6 <HAL_RCC_OscConfig+0x112>
 80012f4:	e000      	b.n	80012f8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2202      	movs	r2, #2
 80012fe:	4013      	ands	r3, r2
 8001300:	d100      	bne.n	8001304 <HAL_RCC_OscConfig+0x140>
 8001302:	e08b      	b.n	800141c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	2b04      	cmp	r3, #4
 800130e:	d005      	beq.n	800131c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	2b0c      	cmp	r3, #12
 8001314:	d13e      	bne.n	8001394 <HAL_RCC_OscConfig+0x1d0>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d13b      	bne.n	8001394 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800131c:	4b7e      	ldr	r3, [pc, #504]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2204      	movs	r2, #4
 8001322:	4013      	ands	r3, r2
 8001324:	d004      	beq.n	8001330 <HAL_RCC_OscConfig+0x16c>
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e302      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001330:	4b79      	ldr	r3, [pc, #484]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a7b      	ldr	r2, [pc, #492]	; (8001524 <HAL_RCC_OscConfig+0x360>)
 8001336:	4013      	ands	r3, r2
 8001338:	0019      	movs	r1, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	021a      	lsls	r2, r3, #8
 8001340:	4b75      	ldr	r3, [pc, #468]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 8001342:	430a      	orrs	r2, r1
 8001344:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001346:	4b74      	ldr	r3, [pc, #464]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2209      	movs	r2, #9
 800134c:	4393      	bics	r3, r2
 800134e:	0019      	movs	r1, r3
 8001350:	4b71      	ldr	r3, [pc, #452]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	430a      	orrs	r2, r1
 8001356:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001358:	f000 fc40 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 800135c:	0001      	movs	r1, r0
 800135e:	4b6e      	ldr	r3, [pc, #440]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	091b      	lsrs	r3, r3, #4
 8001364:	220f      	movs	r2, #15
 8001366:	4013      	ands	r3, r2
 8001368:	4a6f      	ldr	r2, [pc, #444]	; (8001528 <HAL_RCC_OscConfig+0x364>)
 800136a:	5cd3      	ldrb	r3, [r2, r3]
 800136c:	000a      	movs	r2, r1
 800136e:	40da      	lsrs	r2, r3
 8001370:	4b6e      	ldr	r3, [pc, #440]	; (800152c <HAL_RCC_OscConfig+0x368>)
 8001372:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001374:	4b6e      	ldr	r3, [pc, #440]	; (8001530 <HAL_RCC_OscConfig+0x36c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2513      	movs	r5, #19
 800137a:	197c      	adds	r4, r7, r5
 800137c:	0018      	movs	r0, r3
 800137e:	f7ff fc3b 	bl	8000bf8 <HAL_InitTick>
 8001382:	0003      	movs	r3, r0
 8001384:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001386:	197b      	adds	r3, r7, r5
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d046      	beq.n	800141c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800138e:	197b      	adds	r3, r7, r5
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	e2d0      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d027      	beq.n	80013ea <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800139a:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2209      	movs	r2, #9
 80013a0:	4393      	bics	r3, r2
 80013a2:	0019      	movs	r1, r3
 80013a4:	4b5c      	ldr	r3, [pc, #368]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fc6a 	bl	8000c84 <HAL_GetTick>
 80013b0:	0003      	movs	r3, r0
 80013b2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fc65 	bl	8000c84 <HAL_GetTick>
 80013ba:	0002      	movs	r2, r0
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e2b6      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013c8:	4b53      	ldr	r3, [pc, #332]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2204      	movs	r2, #4
 80013ce:	4013      	ands	r3, r2
 80013d0:	d0f1      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d2:	4b51      	ldr	r3, [pc, #324]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4a53      	ldr	r2, [pc, #332]	; (8001524 <HAL_RCC_OscConfig+0x360>)
 80013d8:	4013      	ands	r3, r2
 80013da:	0019      	movs	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	021a      	lsls	r2, r3, #8
 80013e2:	4b4d      	ldr	r3, [pc, #308]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 80013e4:	430a      	orrs	r2, r1
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	e018      	b.n	800141c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	4b4b      	ldr	r3, [pc, #300]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4b4a      	ldr	r3, [pc, #296]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 80013f0:	2101      	movs	r1, #1
 80013f2:	438a      	bics	r2, r1
 80013f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f6:	f7ff fc45 	bl	8000c84 <HAL_GetTick>
 80013fa:	0003      	movs	r3, r0
 80013fc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001400:	f7ff fc40 	bl	8000c84 <HAL_GetTick>
 8001404:	0002      	movs	r2, r0
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e291      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001412:	4b41      	ldr	r3, [pc, #260]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2204      	movs	r2, #4
 8001418:	4013      	ands	r3, r2
 800141a:	d1f1      	bne.n	8001400 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2210      	movs	r2, #16
 8001422:	4013      	ands	r3, r2
 8001424:	d100      	bne.n	8001428 <HAL_RCC_OscConfig+0x264>
 8001426:	e0a1      	b.n	800156c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d140      	bne.n	80014b0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800142e:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4013      	ands	r3, r2
 8001438:	d005      	beq.n	8001446 <HAL_RCC_OscConfig+0x282>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e277      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001446:	4b34      	ldr	r3, [pc, #208]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	4a3a      	ldr	r2, [pc, #232]	; (8001534 <HAL_RCC_OscConfig+0x370>)
 800144c:	4013      	ands	r3, r2
 800144e:	0019      	movs	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001454:	4b30      	ldr	r3, [pc, #192]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 8001456:	430a      	orrs	r2, r1
 8001458:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800145a:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	0a19      	lsrs	r1, r3, #8
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	061a      	lsls	r2, r3, #24
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 800146a:	430a      	orrs	r2, r1
 800146c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	0b5b      	lsrs	r3, r3, #13
 8001474:	3301      	adds	r3, #1
 8001476:	2280      	movs	r2, #128	; 0x80
 8001478:	0212      	lsls	r2, r2, #8
 800147a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	091b      	lsrs	r3, r3, #4
 8001482:	210f      	movs	r1, #15
 8001484:	400b      	ands	r3, r1
 8001486:	4928      	ldr	r1, [pc, #160]	; (8001528 <HAL_RCC_OscConfig+0x364>)
 8001488:	5ccb      	ldrb	r3, [r1, r3]
 800148a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800148c:	4b27      	ldr	r3, [pc, #156]	; (800152c <HAL_RCC_OscConfig+0x368>)
 800148e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001490:	4b27      	ldr	r3, [pc, #156]	; (8001530 <HAL_RCC_OscConfig+0x36c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2513      	movs	r5, #19
 8001496:	197c      	adds	r4, r7, r5
 8001498:	0018      	movs	r0, r3
 800149a:	f7ff fbad 	bl	8000bf8 <HAL_InitTick>
 800149e:	0003      	movs	r3, r0
 80014a0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80014a2:	197b      	adds	r3, r7, r5
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d060      	beq.n	800156c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80014aa:	197b      	adds	r3, r7, r5
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	e242      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d03f      	beq.n	8001538 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014b8:	4b17      	ldr	r3, [pc, #92]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b16      	ldr	r3, [pc, #88]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 80014be:	2180      	movs	r1, #128	; 0x80
 80014c0:	0049      	lsls	r1, r1, #1
 80014c2:	430a      	orrs	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c6:	f7ff fbdd 	bl	8000c84 <HAL_GetTick>
 80014ca:	0003      	movs	r3, r0
 80014cc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014d0:	f7ff fbd8 	bl	8000c84 <HAL_GetTick>
 80014d4:	0002      	movs	r2, r0
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e229      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4013      	ands	r3, r2
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4a10      	ldr	r2, [pc, #64]	; (8001534 <HAL_RCC_OscConfig+0x370>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	0019      	movs	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 80014fe:	430a      	orrs	r2, r1
 8001500:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	0a19      	lsrs	r1, r3, #8
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	061a      	lsls	r2, r3, #24
 8001510:	4b01      	ldr	r3, [pc, #4]	; (8001518 <HAL_RCC_OscConfig+0x354>)
 8001512:	430a      	orrs	r2, r1
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	e029      	b.n	800156c <HAL_RCC_OscConfig+0x3a8>
 8001518:	40021000 	.word	0x40021000
 800151c:	fffeffff 	.word	0xfffeffff
 8001520:	fffbffff 	.word	0xfffbffff
 8001524:	ffffe0ff 	.word	0xffffe0ff
 8001528:	0800492c 	.word	0x0800492c
 800152c:	20000000 	.word	0x20000000
 8001530:	20000004 	.word	0x20000004
 8001534:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001538:	4bbd      	ldr	r3, [pc, #756]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4bbc      	ldr	r3, [pc, #752]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 800153e:	49bd      	ldr	r1, [pc, #756]	; (8001834 <HAL_RCC_OscConfig+0x670>)
 8001540:	400a      	ands	r2, r1
 8001542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fb9e 	bl	8000c84 <HAL_GetTick>
 8001548:	0003      	movs	r3, r0
 800154a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800154e:	f7ff fb99 	bl	8000c84 <HAL_GetTick>
 8001552:	0002      	movs	r2, r0
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e1ea      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001560:	4bb3      	ldr	r3, [pc, #716]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4013      	ands	r3, r2
 800156a:	d1f0      	bne.n	800154e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2208      	movs	r2, #8
 8001572:	4013      	ands	r3, r2
 8001574:	d036      	beq.n	80015e4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d019      	beq.n	80015b2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157e:	4bac      	ldr	r3, [pc, #688]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 8001580:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001582:	4bab      	ldr	r3, [pc, #684]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 8001584:	2101      	movs	r1, #1
 8001586:	430a      	orrs	r2, r1
 8001588:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158a:	f7ff fb7b 	bl	8000c84 <HAL_GetTick>
 800158e:	0003      	movs	r3, r0
 8001590:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001594:	f7ff fb76 	bl	8000c84 <HAL_GetTick>
 8001598:	0002      	movs	r2, r0
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e1c7      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015a6:	4ba2      	ldr	r3, [pc, #648]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 80015a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015aa:	2202      	movs	r2, #2
 80015ac:	4013      	ands	r3, r2
 80015ae:	d0f1      	beq.n	8001594 <HAL_RCC_OscConfig+0x3d0>
 80015b0:	e018      	b.n	80015e4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b2:	4b9f      	ldr	r3, [pc, #636]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 80015b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015b6:	4b9e      	ldr	r3, [pc, #632]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 80015b8:	2101      	movs	r1, #1
 80015ba:	438a      	bics	r2, r1
 80015bc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015be:	f7ff fb61 	bl	8000c84 <HAL_GetTick>
 80015c2:	0003      	movs	r3, r0
 80015c4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c8:	f7ff fb5c 	bl	8000c84 <HAL_GetTick>
 80015cc:	0002      	movs	r2, r0
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e1ad      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015da:	4b95      	ldr	r3, [pc, #596]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 80015dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015de:	2202      	movs	r2, #2
 80015e0:	4013      	ands	r3, r2
 80015e2:	d1f1      	bne.n	80015c8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2204      	movs	r2, #4
 80015ea:	4013      	ands	r3, r2
 80015ec:	d100      	bne.n	80015f0 <HAL_RCC_OscConfig+0x42c>
 80015ee:	e0ae      	b.n	800174e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f0:	2027      	movs	r0, #39	; 0x27
 80015f2:	183b      	adds	r3, r7, r0
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f8:	4b8d      	ldr	r3, [pc, #564]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 80015fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	055b      	lsls	r3, r3, #21
 8001600:	4013      	ands	r3, r2
 8001602:	d109      	bne.n	8001618 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001604:	4b8a      	ldr	r3, [pc, #552]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 8001606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001608:	4b89      	ldr	r3, [pc, #548]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	0549      	lsls	r1, r1, #21
 800160e:	430a      	orrs	r2, r1
 8001610:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001612:	183b      	adds	r3, r7, r0
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001618:	4b87      	ldr	r3, [pc, #540]	; (8001838 <HAL_RCC_OscConfig+0x674>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4013      	ands	r3, r2
 8001622:	d11a      	bne.n	800165a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001624:	4b84      	ldr	r3, [pc, #528]	; (8001838 <HAL_RCC_OscConfig+0x674>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b83      	ldr	r3, [pc, #524]	; (8001838 <HAL_RCC_OscConfig+0x674>)
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	0049      	lsls	r1, r1, #1
 800162e:	430a      	orrs	r2, r1
 8001630:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001632:	f7ff fb27 	bl	8000c84 <HAL_GetTick>
 8001636:	0003      	movs	r3, r0
 8001638:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163c:	f7ff fb22 	bl	8000c84 <HAL_GetTick>
 8001640:	0002      	movs	r2, r0
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e173      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164e:	4b7a      	ldr	r3, [pc, #488]	; (8001838 <HAL_RCC_OscConfig+0x674>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4013      	ands	r3, r2
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	429a      	cmp	r2, r3
 8001664:	d107      	bne.n	8001676 <HAL_RCC_OscConfig+0x4b2>
 8001666:	4b72      	ldr	r3, [pc, #456]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 8001668:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800166a:	4b71      	ldr	r3, [pc, #452]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 800166c:	2180      	movs	r1, #128	; 0x80
 800166e:	0049      	lsls	r1, r1, #1
 8001670:	430a      	orrs	r2, r1
 8001672:	651a      	str	r2, [r3, #80]	; 0x50
 8001674:	e031      	b.n	80016da <HAL_RCC_OscConfig+0x516>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x4d4>
 800167e:	4b6c      	ldr	r3, [pc, #432]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 8001680:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001682:	4b6b      	ldr	r3, [pc, #428]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 8001684:	496b      	ldr	r1, [pc, #428]	; (8001834 <HAL_RCC_OscConfig+0x670>)
 8001686:	400a      	ands	r2, r1
 8001688:	651a      	str	r2, [r3, #80]	; 0x50
 800168a:	4b69      	ldr	r3, [pc, #420]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 800168c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800168e:	4b68      	ldr	r3, [pc, #416]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 8001690:	496a      	ldr	r1, [pc, #424]	; (800183c <HAL_RCC_OscConfig+0x678>)
 8001692:	400a      	ands	r2, r1
 8001694:	651a      	str	r2, [r3, #80]	; 0x50
 8001696:	e020      	b.n	80016da <HAL_RCC_OscConfig+0x516>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	23a0      	movs	r3, #160	; 0xa0
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d10e      	bne.n	80016c2 <HAL_RCC_OscConfig+0x4fe>
 80016a4:	4b62      	ldr	r3, [pc, #392]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 80016a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016a8:	4b61      	ldr	r3, [pc, #388]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 80016aa:	2180      	movs	r1, #128	; 0x80
 80016ac:	00c9      	lsls	r1, r1, #3
 80016ae:	430a      	orrs	r2, r1
 80016b0:	651a      	str	r2, [r3, #80]	; 0x50
 80016b2:	4b5f      	ldr	r3, [pc, #380]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 80016b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016b6:	4b5e      	ldr	r3, [pc, #376]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	0049      	lsls	r1, r1, #1
 80016bc:	430a      	orrs	r2, r1
 80016be:	651a      	str	r2, [r3, #80]	; 0x50
 80016c0:	e00b      	b.n	80016da <HAL_RCC_OscConfig+0x516>
 80016c2:	4b5b      	ldr	r3, [pc, #364]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 80016c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016c6:	4b5a      	ldr	r3, [pc, #360]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 80016c8:	495a      	ldr	r1, [pc, #360]	; (8001834 <HAL_RCC_OscConfig+0x670>)
 80016ca:	400a      	ands	r2, r1
 80016cc:	651a      	str	r2, [r3, #80]	; 0x50
 80016ce:	4b58      	ldr	r3, [pc, #352]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 80016d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016d2:	4b57      	ldr	r3, [pc, #348]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 80016d4:	4959      	ldr	r1, [pc, #356]	; (800183c <HAL_RCC_OscConfig+0x678>)
 80016d6:	400a      	ands	r2, r1
 80016d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d015      	beq.n	800170e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e2:	f7ff facf 	bl	8000c84 <HAL_GetTick>
 80016e6:	0003      	movs	r3, r0
 80016e8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016ea:	e009      	b.n	8001700 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ec:	f7ff faca 	bl	8000c84 <HAL_GetTick>
 80016f0:	0002      	movs	r2, r0
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	4a52      	ldr	r2, [pc, #328]	; (8001840 <HAL_RCC_OscConfig+0x67c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e11a      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001700:	4b4b      	ldr	r3, [pc, #300]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 8001702:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4013      	ands	r3, r2
 800170a:	d0ef      	beq.n	80016ec <HAL_RCC_OscConfig+0x528>
 800170c:	e014      	b.n	8001738 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170e:	f7ff fab9 	bl	8000c84 <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001716:	e009      	b.n	800172c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001718:	f7ff fab4 	bl	8000c84 <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	4a47      	ldr	r2, [pc, #284]	; (8001840 <HAL_RCC_OscConfig+0x67c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e104      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800172c:	4b40      	ldr	r3, [pc, #256]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 800172e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4013      	ands	r3, r2
 8001736:	d1ef      	bne.n	8001718 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001738:	2327      	movs	r3, #39	; 0x27
 800173a:	18fb      	adds	r3, r7, r3
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d105      	bne.n	800174e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001742:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 8001744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001746:	4b3a      	ldr	r3, [pc, #232]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 8001748:	493e      	ldr	r1, [pc, #248]	; (8001844 <HAL_RCC_OscConfig+0x680>)
 800174a:	400a      	ands	r2, r1
 800174c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2220      	movs	r2, #32
 8001754:	4013      	ands	r3, r2
 8001756:	d049      	beq.n	80017ec <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d026      	beq.n	80017ae <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001760:	4b33      	ldr	r3, [pc, #204]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	4b32      	ldr	r3, [pc, #200]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 8001766:	2101      	movs	r1, #1
 8001768:	430a      	orrs	r2, r1
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	4b30      	ldr	r3, [pc, #192]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 800176e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001770:	4b2f      	ldr	r3, [pc, #188]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 8001772:	2101      	movs	r1, #1
 8001774:	430a      	orrs	r2, r1
 8001776:	635a      	str	r2, [r3, #52]	; 0x34
 8001778:	4b33      	ldr	r3, [pc, #204]	; (8001848 <HAL_RCC_OscConfig+0x684>)
 800177a:	6a1a      	ldr	r2, [r3, #32]
 800177c:	4b32      	ldr	r3, [pc, #200]	; (8001848 <HAL_RCC_OscConfig+0x684>)
 800177e:	2180      	movs	r1, #128	; 0x80
 8001780:	0189      	lsls	r1, r1, #6
 8001782:	430a      	orrs	r2, r1
 8001784:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001786:	f7ff fa7d 	bl	8000c84 <HAL_GetTick>
 800178a:	0003      	movs	r3, r0
 800178c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001790:	f7ff fa78 	bl	8000c84 <HAL_GetTick>
 8001794:	0002      	movs	r2, r0
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e0c9      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017a2:	4b23      	ldr	r3, [pc, #140]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2202      	movs	r2, #2
 80017a8:	4013      	ands	r3, r2
 80017aa:	d0f1      	beq.n	8001790 <HAL_RCC_OscConfig+0x5cc>
 80017ac:	e01e      	b.n	80017ec <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 80017b4:	2101      	movs	r1, #1
 80017b6:	438a      	bics	r2, r1
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <HAL_RCC_OscConfig+0x684>)
 80017bc:	6a1a      	ldr	r2, [r3, #32]
 80017be:	4b22      	ldr	r3, [pc, #136]	; (8001848 <HAL_RCC_OscConfig+0x684>)
 80017c0:	4922      	ldr	r1, [pc, #136]	; (800184c <HAL_RCC_OscConfig+0x688>)
 80017c2:	400a      	ands	r2, r1
 80017c4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fa5d 	bl	8000c84 <HAL_GetTick>
 80017ca:	0003      	movs	r3, r0
 80017cc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017d0:	f7ff fa58 	bl	8000c84 <HAL_GetTick>
 80017d4:	0002      	movs	r2, r0
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e0a9      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2202      	movs	r2, #2
 80017e8:	4013      	ands	r3, r2
 80017ea:	d1f1      	bne.n	80017d0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d100      	bne.n	80017f6 <HAL_RCC_OscConfig+0x632>
 80017f4:	e09e      	b.n	8001934 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	2b0c      	cmp	r3, #12
 80017fa:	d100      	bne.n	80017fe <HAL_RCC_OscConfig+0x63a>
 80017fc:	e077      	b.n	80018ee <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	2b02      	cmp	r3, #2
 8001804:	d158      	bne.n	80018b8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_RCC_OscConfig+0x66c>)
 800180c:	4910      	ldr	r1, [pc, #64]	; (8001850 <HAL_RCC_OscConfig+0x68c>)
 800180e:	400a      	ands	r2, r1
 8001810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001812:	f7ff fa37 	bl	8000c84 <HAL_GetTick>
 8001816:	0003      	movs	r3, r0
 8001818:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800181a:	e01b      	b.n	8001854 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800181c:	f7ff fa32 	bl	8000c84 <HAL_GetTick>
 8001820:	0002      	movs	r2, r0
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d914      	bls.n	8001854 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e083      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	40021000 	.word	0x40021000
 8001834:	fffffeff 	.word	0xfffffeff
 8001838:	40007000 	.word	0x40007000
 800183c:	fffffbff 	.word	0xfffffbff
 8001840:	00001388 	.word	0x00001388
 8001844:	efffffff 	.word	0xefffffff
 8001848:	40010000 	.word	0x40010000
 800184c:	ffffdfff 	.word	0xffffdfff
 8001850:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001854:	4b3a      	ldr	r3, [pc, #232]	; (8001940 <HAL_RCC_OscConfig+0x77c>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	049b      	lsls	r3, r3, #18
 800185c:	4013      	ands	r3, r2
 800185e:	d1dd      	bne.n	800181c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001860:	4b37      	ldr	r3, [pc, #220]	; (8001940 <HAL_RCC_OscConfig+0x77c>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	4a37      	ldr	r2, [pc, #220]	; (8001944 <HAL_RCC_OscConfig+0x780>)
 8001866:	4013      	ands	r3, r2
 8001868:	0019      	movs	r1, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001878:	431a      	orrs	r2, r3
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <HAL_RCC_OscConfig+0x77c>)
 800187c:	430a      	orrs	r2, r1
 800187e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001880:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <HAL_RCC_OscConfig+0x77c>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <HAL_RCC_OscConfig+0x77c>)
 8001886:	2180      	movs	r1, #128	; 0x80
 8001888:	0449      	lsls	r1, r1, #17
 800188a:	430a      	orrs	r2, r1
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188e:	f7ff f9f9 	bl	8000c84 <HAL_GetTick>
 8001892:	0003      	movs	r3, r0
 8001894:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff f9f4 	bl	8000c84 <HAL_GetTick>
 800189c:	0002      	movs	r2, r0
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e045      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018aa:	4b25      	ldr	r3, [pc, #148]	; (8001940 <HAL_RCC_OscConfig+0x77c>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	049b      	lsls	r3, r3, #18
 80018b2:	4013      	ands	r3, r2
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x6d4>
 80018b6:	e03d      	b.n	8001934 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b8:	4b21      	ldr	r3, [pc, #132]	; (8001940 <HAL_RCC_OscConfig+0x77c>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b20      	ldr	r3, [pc, #128]	; (8001940 <HAL_RCC_OscConfig+0x77c>)
 80018be:	4922      	ldr	r1, [pc, #136]	; (8001948 <HAL_RCC_OscConfig+0x784>)
 80018c0:	400a      	ands	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff f9de 	bl	8000c84 <HAL_GetTick>
 80018c8:	0003      	movs	r3, r0
 80018ca:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ce:	f7ff f9d9 	bl	8000c84 <HAL_GetTick>
 80018d2:	0002      	movs	r2, r0
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e02a      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <HAL_RCC_OscConfig+0x77c>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	049b      	lsls	r3, r3, #18
 80018e8:	4013      	ands	r3, r2
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0x70a>
 80018ec:	e022      	b.n	8001934 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e01d      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <HAL_RCC_OscConfig+0x77c>)
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	025b      	lsls	r3, r3, #9
 8001906:	401a      	ands	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	429a      	cmp	r2, r3
 800190e:	d10f      	bne.n	8001930 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	23f0      	movs	r3, #240	; 0xf0
 8001914:	039b      	lsls	r3, r3, #14
 8001916:	401a      	ands	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d107      	bne.n	8001930 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	23c0      	movs	r3, #192	; 0xc0
 8001924:	041b      	lsls	r3, r3, #16
 8001926:	401a      	ands	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b00a      	add	sp, #40	; 0x28
 800193c:	bdb0      	pop	{r4, r5, r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	40021000 	.word	0x40021000
 8001944:	ff02ffff 	.word	0xff02ffff
 8001948:	feffffff 	.word	0xfeffffff

0800194c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800194c:	b5b0      	push	{r4, r5, r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e128      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001960:	4b96      	ldr	r3, [pc, #600]	; (8001bbc <HAL_RCC_ClockConfig+0x270>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	4013      	ands	r3, r2
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d91e      	bls.n	80019ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b93      	ldr	r3, [pc, #588]	; (8001bbc <HAL_RCC_ClockConfig+0x270>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2201      	movs	r2, #1
 8001974:	4393      	bics	r3, r2
 8001976:	0019      	movs	r1, r3
 8001978:	4b90      	ldr	r3, [pc, #576]	; (8001bbc <HAL_RCC_ClockConfig+0x270>)
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001980:	f7ff f980 	bl	8000c84 <HAL_GetTick>
 8001984:	0003      	movs	r3, r0
 8001986:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001988:	e009      	b.n	800199e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198a:	f7ff f97b 	bl	8000c84 <HAL_GetTick>
 800198e:	0002      	movs	r2, r0
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	4a8a      	ldr	r2, [pc, #552]	; (8001bc0 <HAL_RCC_ClockConfig+0x274>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e109      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b87      	ldr	r3, [pc, #540]	; (8001bbc <HAL_RCC_ClockConfig+0x270>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2201      	movs	r2, #1
 80019a4:	4013      	ands	r3, r2
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d1ee      	bne.n	800198a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2202      	movs	r2, #2
 80019b2:	4013      	ands	r3, r2
 80019b4:	d009      	beq.n	80019ca <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b6:	4b83      	ldr	r3, [pc, #524]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	22f0      	movs	r2, #240	; 0xf0
 80019bc:	4393      	bics	r3, r2
 80019be:	0019      	movs	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	4b7f      	ldr	r3, [pc, #508]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 80019c6:	430a      	orrs	r2, r1
 80019c8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2201      	movs	r2, #1
 80019d0:	4013      	ands	r3, r2
 80019d2:	d100      	bne.n	80019d6 <HAL_RCC_ClockConfig+0x8a>
 80019d4:	e089      	b.n	8001aea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019de:	4b79      	ldr	r3, [pc, #484]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	029b      	lsls	r3, r3, #10
 80019e6:	4013      	ands	r3, r2
 80019e8:	d120      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e0e1      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d107      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019f6:	4b73      	ldr	r3, [pc, #460]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	049b      	lsls	r3, r3, #18
 80019fe:	4013      	ands	r3, r2
 8001a00:	d114      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e0d5      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d106      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a0e:	4b6d      	ldr	r3, [pc, #436]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2204      	movs	r2, #4
 8001a14:	4013      	ands	r3, r2
 8001a16:	d109      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0ca      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a1c:	4b69      	ldr	r3, [pc, #420]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4013      	ands	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0c2      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2c:	4b65      	ldr	r3, [pc, #404]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2203      	movs	r2, #3
 8001a32:	4393      	bics	r3, r2
 8001a34:	0019      	movs	r1, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	4b62      	ldr	r3, [pc, #392]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a40:	f7ff f920 	bl	8000c84 <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d111      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a50:	e009      	b.n	8001a66 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a52:	f7ff f917 	bl	8000c84 <HAL_GetTick>
 8001a56:	0002      	movs	r2, r0
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	4a58      	ldr	r2, [pc, #352]	; (8001bc0 <HAL_RCC_ClockConfig+0x274>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e0a5      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a66:	4b57      	ldr	r3, [pc, #348]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d1ef      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x106>
 8001a72:	e03a      	b.n	8001aea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d111      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a7c:	e009      	b.n	8001a92 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7e:	f7ff f901 	bl	8000c84 <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	4a4d      	ldr	r2, [pc, #308]	; (8001bc0 <HAL_RCC_ClockConfig+0x274>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e08f      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a92:	4b4c      	ldr	r3, [pc, #304]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	220c      	movs	r2, #12
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b0c      	cmp	r3, #12
 8001a9c:	d1ef      	bne.n	8001a7e <HAL_RCC_ClockConfig+0x132>
 8001a9e:	e024      	b.n	8001aea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d11b      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aa8:	e009      	b.n	8001abe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aaa:	f7ff f8eb 	bl	8000c84 <HAL_GetTick>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	4a42      	ldr	r2, [pc, #264]	; (8001bc0 <HAL_RCC_ClockConfig+0x274>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e079      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001abe:	4b41      	ldr	r3, [pc, #260]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d1ef      	bne.n	8001aaa <HAL_RCC_ClockConfig+0x15e>
 8001aca:	e00e      	b.n	8001aea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001acc:	f7ff f8da 	bl	8000c84 <HAL_GetTick>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	4a3a      	ldr	r2, [pc, #232]	; (8001bc0 <HAL_RCC_ClockConfig+0x274>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e068      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ae0:	4b38      	ldr	r3, [pc, #224]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	220c      	movs	r2, #12
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aea:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <HAL_RCC_ClockConfig+0x270>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2201      	movs	r2, #1
 8001af0:	4013      	ands	r3, r2
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d21e      	bcs.n	8001b36 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af8:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <HAL_RCC_ClockConfig+0x270>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2201      	movs	r2, #1
 8001afe:	4393      	bics	r3, r2
 8001b00:	0019      	movs	r1, r3
 8001b02:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <HAL_RCC_ClockConfig+0x270>)
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b0a:	f7ff f8bb 	bl	8000c84 <HAL_GetTick>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	e009      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b14:	f7ff f8b6 	bl	8000c84 <HAL_GetTick>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	4a28      	ldr	r2, [pc, #160]	; (8001bc0 <HAL_RCC_ClockConfig+0x274>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e044      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_RCC_ClockConfig+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4013      	ands	r3, r2
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d1ee      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2204      	movs	r2, #4
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d009      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b40:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4a20      	ldr	r2, [pc, #128]	; (8001bc8 <HAL_RCC_ClockConfig+0x27c>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	0019      	movs	r1, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001b50:	430a      	orrs	r2, r1
 8001b52:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2208      	movs	r2, #8
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d00a      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	4a1a      	ldr	r2, [pc, #104]	; (8001bcc <HAL_RCC_ClockConfig+0x280>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	0019      	movs	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	00da      	lsls	r2, r3, #3
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001b70:	430a      	orrs	r2, r1
 8001b72:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b74:	f000 f832 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 8001b78:	0001      	movs	r1, r0
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	220f      	movs	r2, #15
 8001b82:	4013      	ands	r3, r2
 8001b84:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <HAL_RCC_ClockConfig+0x284>)
 8001b86:	5cd3      	ldrb	r3, [r2, r3]
 8001b88:	000a      	movs	r2, r1
 8001b8a:	40da      	lsrs	r2, r3
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_RCC_ClockConfig+0x288>)
 8001b8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_RCC_ClockConfig+0x28c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	250b      	movs	r5, #11
 8001b96:	197c      	adds	r4, r7, r5
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7ff f82d 	bl	8000bf8 <HAL_InitTick>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001ba2:	197b      	adds	r3, r7, r5
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d002      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001baa:	197b      	adds	r3, r7, r5
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	e000      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b004      	add	sp, #16
 8001bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	40022000 	.word	0x40022000
 8001bc0:	00001388 	.word	0x00001388
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	fffff8ff 	.word	0xfffff8ff
 8001bcc:	ffffc7ff 	.word	0xffffc7ff
 8001bd0:	0800492c 	.word	0x0800492c
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	20000004 	.word	0x20000004

08001bdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bdc:	b5b0      	push	{r4, r5, r7, lr}
 8001bde:	b08e      	sub	sp, #56	; 0x38
 8001be0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001be2:	4b4c      	ldr	r3, [pc, #304]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x138>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bea:	230c      	movs	r3, #12
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b0c      	cmp	r3, #12
 8001bf0:	d014      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x40>
 8001bf2:	d900      	bls.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x1a>
 8001bf4:	e07b      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x112>
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d002      	beq.n	8001c00 <HAL_RCC_GetSysClockFreq+0x24>
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d00b      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bfe:	e076      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c00:	4b44      	ldr	r3, [pc, #272]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2210      	movs	r2, #16
 8001c06:	4013      	ands	r3, r2
 8001c08:	d002      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c0a:	4b43      	ldr	r3, [pc, #268]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c0e:	e07c      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001c10:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x140>)
 8001c12:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c14:	e079      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c16:	4b42      	ldr	r3, [pc, #264]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x144>)
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c1a:	e076      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1e:	0c9a      	lsrs	r2, r3, #18
 8001c20:	230f      	movs	r3, #15
 8001c22:	401a      	ands	r2, r3
 8001c24:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x148>)
 8001c26:	5c9b      	ldrb	r3, [r3, r2]
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2c:	0d9a      	lsrs	r2, r3, #22
 8001c2e:	2303      	movs	r3, #3
 8001c30:	4013      	ands	r3, r2
 8001c32:	3301      	adds	r3, #1
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c36:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	025b      	lsls	r3, r3, #9
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d01a      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c44:	61bb      	str	r3, [r7, #24]
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	4a35      	ldr	r2, [pc, #212]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x144>)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	69b8      	ldr	r0, [r7, #24]
 8001c50:	69f9      	ldr	r1, [r7, #28]
 8001c52:	f7fe fb0f 	bl	8000274 <__aeabi_lmul>
 8001c56:	0002      	movs	r2, r0
 8001c58:	000b      	movs	r3, r1
 8001c5a:	0010      	movs	r0, r2
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f7fe fae3 	bl	8000234 <__aeabi_uldivmod>
 8001c6e:	0002      	movs	r2, r0
 8001c70:	000b      	movs	r3, r1
 8001c72:	0013      	movs	r3, r2
 8001c74:	637b      	str	r3, [r7, #52]	; 0x34
 8001c76:	e037      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c78:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2210      	movs	r2, #16
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d01a      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	4a23      	ldr	r2, [pc, #140]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	68b8      	ldr	r0, [r7, #8]
 8001c90:	68f9      	ldr	r1, [r7, #12]
 8001c92:	f7fe faef 	bl	8000274 <__aeabi_lmul>
 8001c96:	0002      	movs	r2, r0
 8001c98:	000b      	movs	r3, r1
 8001c9a:	0010      	movs	r0, r2
 8001c9c:	0019      	movs	r1, r3
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f7fe fac3 	bl	8000234 <__aeabi_uldivmod>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	000b      	movs	r3, r1
 8001cb2:	0013      	movs	r3, r2
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8001cb6:	e017      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cba:	0018      	movs	r0, r3
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	4a16      	ldr	r2, [pc, #88]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x140>)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f7fe fad6 	bl	8000274 <__aeabi_lmul>
 8001cc8:	0002      	movs	r2, r0
 8001cca:	000b      	movs	r3, r1
 8001ccc:	0010      	movs	r0, r2
 8001cce:	0019      	movs	r1, r3
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	001c      	movs	r4, r3
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	001d      	movs	r5, r3
 8001cd8:	0022      	movs	r2, r4
 8001cda:	002b      	movs	r3, r5
 8001cdc:	f7fe faaa 	bl	8000234 <__aeabi_uldivmod>
 8001ce0:	0002      	movs	r2, r0
 8001ce2:	000b      	movs	r3, r1
 8001ce4:	0013      	movs	r3, r2
 8001ce6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cec:	e00d      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	0b5b      	lsrs	r3, r3, #13
 8001cf4:	2207      	movs	r2, #7
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	2280      	movs	r2, #128	; 0x80
 8001d00:	0212      	lsls	r2, r2, #8
 8001d02:	409a      	lsls	r2, r3
 8001d04:	0013      	movs	r3, r2
 8001d06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d08:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b00e      	add	sp, #56	; 0x38
 8001d12:	bdb0      	pop	{r4, r5, r7, pc}
 8001d14:	40021000 	.word	0x40021000
 8001d18:	003d0900 	.word	0x003d0900
 8001d1c:	00f42400 	.word	0x00f42400
 8001d20:	007a1200 	.word	0x007a1200
 8001d24:	08004944 	.word	0x08004944

08001d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d2c:	4b02      	ldr	r3, [pc, #8]	; (8001d38 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	20000000 	.word	0x20000000

08001d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d40:	f7ff fff2 	bl	8001d28 <HAL_RCC_GetHCLKFreq>
 8001d44:	0001      	movs	r1, r0
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	0a1b      	lsrs	r3, r3, #8
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	4013      	ands	r3, r2
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	40d9      	lsrs	r1, r3
 8001d56:	000b      	movs	r3, r1
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	40021000 	.word	0x40021000
 8001d64:	0800493c 	.word	0x0800493c

08001d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d6c:	f7ff ffdc 	bl	8001d28 <HAL_RCC_GetHCLKFreq>
 8001d70:	0001      	movs	r1, r0
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	0adb      	lsrs	r3, r3, #11
 8001d78:	2207      	movs	r2, #7
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d7e:	5cd3      	ldrb	r3, [r2, r3]
 8001d80:	40d9      	lsrs	r1, r3
 8001d82:	000b      	movs	r3, r1
}
 8001d84:	0018      	movs	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	0800493c 	.word	0x0800493c

08001d94 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001d9c:	2317      	movs	r3, #23
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2220      	movs	r2, #32
 8001daa:	4013      	ands	r3, r2
 8001dac:	d106      	bne.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	4013      	ands	r3, r2
 8001db8:	d100      	bne.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001dba:	e104      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dbc:	4bb1      	ldr	r3, [pc, #708]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	055b      	lsls	r3, r3, #21
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d10a      	bne.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc8:	4bae      	ldr	r3, [pc, #696]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dcc:	4bad      	ldr	r3, [pc, #692]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dce:	2180      	movs	r1, #128	; 0x80
 8001dd0:	0549      	lsls	r1, r1, #21
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001dd6:	2317      	movs	r3, #23
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dde:	4baa      	ldr	r3, [pc, #680]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4013      	ands	r3, r2
 8001de8:	d11a      	bne.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dea:	4ba7      	ldr	r3, [pc, #668]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4ba6      	ldr	r3, [pc, #664]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001df0:	2180      	movs	r1, #128	; 0x80
 8001df2:	0049      	lsls	r1, r1, #1
 8001df4:	430a      	orrs	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df8:	f7fe ff44 	bl	8000c84 <HAL_GetTick>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e00:	e008      	b.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e02:	f7fe ff3f 	bl	8000c84 <HAL_GetTick>
 8001e06:	0002      	movs	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b64      	cmp	r3, #100	; 0x64
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e133      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e14:	4b9c      	ldr	r3, [pc, #624]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001e20:	4b98      	ldr	r3, [pc, #608]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	23c0      	movs	r3, #192	; 0xc0
 8001e26:	039b      	lsls	r3, r3, #14
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	23c0      	movs	r3, #192	; 0xc0
 8001e32:	039b      	lsls	r3, r3, #14
 8001e34:	4013      	ands	r3, r2
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d107      	bne.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	23c0      	movs	r3, #192	; 0xc0
 8001e42:	039b      	lsls	r3, r3, #14
 8001e44:	4013      	ands	r3, r2
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d013      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	23c0      	movs	r3, #192	; 0xc0
 8001e52:	029b      	lsls	r3, r3, #10
 8001e54:	401a      	ands	r2, r3
 8001e56:	23c0      	movs	r3, #192	; 0xc0
 8001e58:	029b      	lsls	r3, r3, #10
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d10a      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e5e:	4b89      	ldr	r3, [pc, #548]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	029b      	lsls	r3, r3, #10
 8001e66:	401a      	ands	r2, r3
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	029b      	lsls	r3, r3, #10
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e103      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001e74:	4b83      	ldr	r3, [pc, #524]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e78:	23c0      	movs	r3, #192	; 0xc0
 8001e7a:	029b      	lsls	r3, r3, #10
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d049      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	23c0      	movs	r3, #192	; 0xc0
 8001e8c:	029b      	lsls	r3, r3, #10
 8001e8e:	4013      	ands	r3, r2
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d004      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d10d      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	23c0      	movs	r3, #192	; 0xc0
 8001ea6:	029b      	lsls	r3, r3, #10
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d034      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d02e      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ebc:	4b71      	ldr	r3, [pc, #452]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec0:	4a72      	ldr	r2, [pc, #456]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ec6:	4b6f      	ldr	r3, [pc, #444]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eca:	4b6e      	ldr	r3, [pc, #440]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ecc:	2180      	movs	r1, #128	; 0x80
 8001ece:	0309      	lsls	r1, r1, #12
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ed4:	4b6b      	ldr	r3, [pc, #428]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ed6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ed8:	4b6a      	ldr	r3, [pc, #424]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001eda:	496d      	ldr	r1, [pc, #436]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001edc:	400a      	ands	r2, r1
 8001ede:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001ee0:	4b68      	ldr	r3, [pc, #416]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4013      	ands	r3, r2
 8001eee:	d014      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7fe fec8 	bl	8000c84 <HAL_GetTick>
 8001ef4:	0003      	movs	r3, r0
 8001ef6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ef8:	e009      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efa:	f7fe fec3 	bl	8000c84 <HAL_GetTick>
 8001efe:	0002      	movs	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	4a63      	ldr	r2, [pc, #396]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e0b6      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f0e:	4b5d      	ldr	r3, [pc, #372]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4013      	ands	r3, r2
 8001f18:	d0ef      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	4013      	ands	r3, r2
 8001f24:	d01f      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	23c0      	movs	r3, #192	; 0xc0
 8001f2c:	029b      	lsls	r3, r3, #10
 8001f2e:	401a      	ands	r2, r3
 8001f30:	23c0      	movs	r3, #192	; 0xc0
 8001f32:	029b      	lsls	r3, r3, #10
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d10c      	bne.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001f38:	4b52      	ldr	r3, [pc, #328]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a56      	ldr	r2, [pc, #344]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	0019      	movs	r1, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	23c0      	movs	r3, #192	; 0xc0
 8001f48:	039b      	lsls	r3, r3, #14
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	4b4d      	ldr	r3, [pc, #308]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	4b4c      	ldr	r3, [pc, #304]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f54:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	23c0      	movs	r3, #192	; 0xc0
 8001f5c:	029b      	lsls	r3, r3, #10
 8001f5e:	401a      	ands	r2, r3
 8001f60:	4b48      	ldr	r3, [pc, #288]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f62:	430a      	orrs	r2, r1
 8001f64:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d01f      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	23c0      	movs	r3, #192	; 0xc0
 8001f76:	029b      	lsls	r3, r3, #10
 8001f78:	401a      	ands	r2, r3
 8001f7a:	23c0      	movs	r3, #192	; 0xc0
 8001f7c:	029b      	lsls	r3, r3, #10
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001f82:	4b40      	ldr	r3, [pc, #256]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a44      	ldr	r2, [pc, #272]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	23c0      	movs	r3, #192	; 0xc0
 8001f92:	039b      	lsls	r3, r3, #14
 8001f94:	401a      	ands	r2, r3
 8001f96:	4b3b      	ldr	r3, [pc, #236]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	4b39      	ldr	r3, [pc, #228]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f9e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	23c0      	movs	r3, #192	; 0xc0
 8001fa6:	029b      	lsls	r3, r3, #10
 8001fa8:	401a      	ands	r2, r3
 8001faa:	4b36      	ldr	r3, [pc, #216]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fac:	430a      	orrs	r2, r1
 8001fae:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fb0:	2317      	movs	r3, #23
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d105      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fba:	4b32      	ldr	r3, [pc, #200]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fbe:	4b31      	ldr	r3, [pc, #196]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fc0:	4936      	ldr	r1, [pc, #216]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fc2:	400a      	ands	r2, r1
 8001fc4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d009      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fd0:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	4393      	bics	r3, r2
 8001fd8:	0019      	movs	r1, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	4b29      	ldr	r3, [pc, #164]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	4013      	ands	r3, r2
 8001fec:	d009      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fee:	4b25      	ldr	r3, [pc, #148]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	4393      	bics	r3, r2
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ffe:	430a      	orrs	r2, r1
 8002000:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2204      	movs	r2, #4
 8002008:	4013      	ands	r3, r2
 800200a:	d009      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800200c:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800200e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002010:	4a23      	ldr	r2, [pc, #140]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8002012:	4013      	ands	r3, r2
 8002014:	0019      	movs	r1, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800201c:	430a      	orrs	r2, r1
 800201e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2208      	movs	r2, #8
 8002026:	4013      	ands	r3, r2
 8002028:	d009      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002030:	4013      	ands	r3, r2
 8002032:	0019      	movs	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699a      	ldr	r2, [r3, #24]
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800203a:	430a      	orrs	r2, r1
 800203c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2240      	movs	r2, #64	; 0x40
 8002044:	4013      	ands	r3, r2
 8002046:	d009      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002048:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800204a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204c:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800204e:	4013      	ands	r3, r2
 8002050:	0019      	movs	r1, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1a      	ldr	r2, [r3, #32]
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002058:	430a      	orrs	r2, r1
 800205a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2280      	movs	r2, #128	; 0x80
 8002062:	4013      	ands	r3, r2
 8002064:	d009      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002066:	4b07      	ldr	r3, [pc, #28]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	4a10      	ldr	r2, [pc, #64]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800206c:	4013      	ands	r3, r2
 800206e:	0019      	movs	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69da      	ldr	r2, [r3, #28]
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002076:	430a      	orrs	r2, r1
 8002078:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	0018      	movs	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	b006      	add	sp, #24
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40021000 	.word	0x40021000
 8002088:	40007000 	.word	0x40007000
 800208c:	fffcffff 	.word	0xfffcffff
 8002090:	fff7ffff 	.word	0xfff7ffff
 8002094:	00001388 	.word	0x00001388
 8002098:	ffcfffff 	.word	0xffcfffff
 800209c:	efffffff 	.word	0xefffffff
 80020a0:	fffff3ff 	.word	0xfffff3ff
 80020a4:	ffffcfff 	.word	0xffffcfff
 80020a8:	fbffffff 	.word	0xfbffffff
 80020ac:	fff3ffff 	.word	0xfff3ffff

080020b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80020b0:	b5b0      	push	{r4, r5, r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80020b8:	230f      	movs	r3, #15
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e088      	b.n	80021dc <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2221      	movs	r2, #33	; 0x21
 80020ce:	5c9b      	ldrb	r3, [r3, r2]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d107      	bne.n	80020e6 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2220      	movs	r2, #32
 80020da:	2100      	movs	r1, #0
 80020dc:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f7fe fc17 	bl	8000914 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2221      	movs	r2, #33	; 0x21
 80020ea:	2102      	movs	r1, #2
 80020ec:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2210      	movs	r2, #16
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b10      	cmp	r3, #16
 80020fa:	d05f      	beq.n	80021bc <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	22ca      	movs	r2, #202	; 0xca
 8002102:	625a      	str	r2, [r3, #36]	; 0x24
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2253      	movs	r2, #83	; 0x53
 800210a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800210c:	250f      	movs	r5, #15
 800210e:	197c      	adds	r4, r7, r5
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	0018      	movs	r0, r3
 8002114:	f000 fc2c 	bl	8002970 <RTC_EnterInitMode>
 8002118:	0003      	movs	r3, r0
 800211a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800211c:	0028      	movs	r0, r5
 800211e:	183b      	adds	r3, r7, r0
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d12c      	bne.n	8002180 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	492c      	ldr	r1, [pc, #176]	; (80021e4 <HAL_RTC_Init+0x134>)
 8002132:	400a      	ands	r2, r1
 8002134:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6899      	ldr	r1, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	68d2      	ldr	r2, [r2, #12]
 800215c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6919      	ldr	r1, [r3, #16]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	041a      	lsls	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002172:	183c      	adds	r4, r7, r0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	0018      	movs	r0, r3
 8002178:	f000 fc3e 	bl	80029f8 <RTC_ExitInitMode>
 800217c:	0003      	movs	r3, r0
 800217e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002180:	230f      	movs	r3, #15
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d113      	bne.n	80021b2 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2103      	movs	r1, #3
 8002196:	438a      	bics	r2, r1
 8002198:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69da      	ldr	r2, [r3, #28]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	22ff      	movs	r2, #255	; 0xff
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24
 80021ba:	e003      	b.n	80021c4 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80021bc:	230f      	movs	r3, #15
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80021c4:	230f      	movs	r3, #15
 80021c6:	18fb      	adds	r3, r7, r3
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d103      	bne.n	80021d6 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2221      	movs	r2, #33	; 0x21
 80021d2:	2101      	movs	r1, #1
 80021d4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80021d6:	230f      	movs	r3, #15
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	781b      	ldrb	r3, [r3, #0]
}
 80021dc:	0018      	movs	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	b004      	add	sp, #16
 80021e2:	bdb0      	pop	{r4, r5, r7, pc}
 80021e4:	ff8fffbf 	.word	0xff8fffbf

080021e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80021e8:	b5b0      	push	{r4, r5, r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2220      	movs	r2, #32
 80021fc:	5c9b      	ldrb	r3, [r3, r2]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_RTC_SetTime+0x1e>
 8002202:	2302      	movs	r3, #2
 8002204:	e092      	b.n	800232c <HAL_RTC_SetTime+0x144>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2220      	movs	r2, #32
 800220a:	2101      	movs	r1, #1
 800220c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2221      	movs	r2, #33	; 0x21
 8002212:	2102      	movs	r1, #2
 8002214:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d125      	bne.n	8002268 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2240      	movs	r2, #64	; 0x40
 8002224:	4013      	ands	r3, r2
 8002226:	d102      	bne.n	800222e <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2200      	movs	r2, #0
 800222c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	0018      	movs	r0, r3
 8002234:	f000 fc0a 	bl	8002a4c <RTC_ByteToBcd2>
 8002238:	0003      	movs	r3, r0
 800223a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	785b      	ldrb	r3, [r3, #1]
 8002240:	0018      	movs	r0, r3
 8002242:	f000 fc03 	bl	8002a4c <RTC_ByteToBcd2>
 8002246:	0003      	movs	r3, r0
 8002248:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800224a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	789b      	ldrb	r3, [r3, #2]
 8002250:	0018      	movs	r0, r3
 8002252:	f000 fbfb 	bl	8002a4c <RTC_ByteToBcd2>
 8002256:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002258:	0022      	movs	r2, r4
 800225a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	78db      	ldrb	r3, [r3, #3]
 8002260:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002262:	4313      	orrs	r3, r2
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	e017      	b.n	8002298 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2240      	movs	r2, #64	; 0x40
 8002270:	4013      	ands	r3, r2
 8002272:	d102      	bne.n	800227a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2200      	movs	r2, #0
 8002278:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	785b      	ldrb	r3, [r3, #1]
 8002284:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002286:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800228c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	78db      	ldrb	r3, [r3, #3]
 8002292:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002294:	4313      	orrs	r3, r2
 8002296:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	22ca      	movs	r2, #202	; 0xca
 800229e:	625a      	str	r2, [r3, #36]	; 0x24
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2253      	movs	r2, #83	; 0x53
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80022a8:	2513      	movs	r5, #19
 80022aa:	197c      	adds	r4, r7, r5
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	0018      	movs	r0, r3
 80022b0:	f000 fb5e 	bl	8002970 <RTC_EnterInitMode>
 80022b4:	0003      	movs	r3, r0
 80022b6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80022b8:	0028      	movs	r0, r5
 80022ba:	183b      	adds	r3, r7, r0
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d120      	bne.n	8002304 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	491a      	ldr	r1, [pc, #104]	; (8002334 <HAL_RTC_SetTime+0x14c>)
 80022ca:	400a      	ands	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4917      	ldr	r1, [pc, #92]	; (8002338 <HAL_RTC_SetTime+0x150>)
 80022da:	400a      	ands	r2, r1
 80022dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6899      	ldr	r1, [r3, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	431a      	orrs	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80022f6:	183c      	adds	r4, r7, r0
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	0018      	movs	r0, r3
 80022fc:	f000 fb7c 	bl	80029f8 <RTC_ExitInitMode>
 8002300:	0003      	movs	r3, r0
 8002302:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002304:	2313      	movs	r3, #19
 8002306:	18fb      	adds	r3, r7, r3
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d103      	bne.n	8002316 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2221      	movs	r2, #33	; 0x21
 8002312:	2101      	movs	r1, #1
 8002314:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	22ff      	movs	r2, #255	; 0xff
 800231c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2220      	movs	r2, #32
 8002322:	2100      	movs	r1, #0
 8002324:	5499      	strb	r1, [r3, r2]

  return status;
 8002326:	2313      	movs	r3, #19
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	781b      	ldrb	r3, [r3, #0]
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	b006      	add	sp, #24
 8002332:	bdb0      	pop	{r4, r5, r7, pc}
 8002334:	007f7f7f 	.word	0x007f7f7f
 8002338:	fffbffff 	.word	0xfffbffff

0800233c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	045b      	lsls	r3, r3, #17
 800235e:	0c5a      	lsrs	r2, r3, #17
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <HAL_RTC_GetTime+0xb8>)
 800236c:	4013      	ands	r3, r2
 800236e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	0c1b      	lsrs	r3, r3, #16
 8002374:	b2db      	uxtb	r3, r3
 8002376:	223f      	movs	r2, #63	; 0x3f
 8002378:	4013      	ands	r3, r2
 800237a:	b2da      	uxtb	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	b2db      	uxtb	r3, r3
 8002386:	227f      	movs	r2, #127	; 0x7f
 8002388:	4013      	ands	r3, r2
 800238a:	b2da      	uxtb	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	227f      	movs	r2, #127	; 0x7f
 8002396:	4013      	ands	r3, r2
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	0d9b      	lsrs	r3, r3, #22
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2201      	movs	r2, #1
 80023a6:	4013      	ands	r3, r2
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d11a      	bne.n	80023ea <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	0018      	movs	r0, r3
 80023ba:	f000 fb68 	bl	8002a8e <RTC_Bcd2ToByte>
 80023be:	0003      	movs	r3, r0
 80023c0:	001a      	movs	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	785b      	ldrb	r3, [r3, #1]
 80023ca:	0018      	movs	r0, r3
 80023cc:	f000 fb5f 	bl	8002a8e <RTC_Bcd2ToByte>
 80023d0:	0003      	movs	r3, r0
 80023d2:	001a      	movs	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	789b      	ldrb	r3, [r3, #2]
 80023dc:	0018      	movs	r0, r3
 80023de:	f000 fb56 	bl	8002a8e <RTC_Bcd2ToByte>
 80023e2:	0003      	movs	r3, r0
 80023e4:	001a      	movs	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	0018      	movs	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b006      	add	sp, #24
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	007f7f7f 	.word	0x007f7f7f

080023f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80023f8:	b5b0      	push	{r4, r5, r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	5c9b      	ldrb	r3, [r3, r2]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_RTC_SetDate+0x1e>
 8002412:	2302      	movs	r3, #2
 8002414:	e07e      	b.n	8002514 <HAL_RTC_SetDate+0x11c>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2220      	movs	r2, #32
 800241a:	2101      	movs	r1, #1
 800241c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2221      	movs	r2, #33	; 0x21
 8002422:	2102      	movs	r1, #2
 8002424:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10e      	bne.n	800244a <HAL_RTC_SetDate+0x52>
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	785b      	ldrb	r3, [r3, #1]
 8002430:	001a      	movs	r2, r3
 8002432:	2310      	movs	r3, #16
 8002434:	4013      	ands	r3, r2
 8002436:	d008      	beq.n	800244a <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	785b      	ldrb	r3, [r3, #1]
 800243c:	2210      	movs	r2, #16
 800243e:	4393      	bics	r3, r2
 8002440:	b2db      	uxtb	r3, r3
 8002442:	330a      	adds	r3, #10
 8002444:	b2da      	uxtb	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d11c      	bne.n	800248a <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	78db      	ldrb	r3, [r3, #3]
 8002454:	0018      	movs	r0, r3
 8002456:	f000 faf9 	bl	8002a4c <RTC_ByteToBcd2>
 800245a:	0003      	movs	r3, r0
 800245c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	785b      	ldrb	r3, [r3, #1]
 8002462:	0018      	movs	r0, r3
 8002464:	f000 faf2 	bl	8002a4c <RTC_ByteToBcd2>
 8002468:	0003      	movs	r3, r0
 800246a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800246c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	789b      	ldrb	r3, [r3, #2]
 8002472:	0018      	movs	r0, r3
 8002474:	f000 faea 	bl	8002a4c <RTC_ByteToBcd2>
 8002478:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800247a:	0022      	movs	r2, r4
 800247c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	e00e      	b.n	80024a8 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	78db      	ldrb	r3, [r3, #3]
 800248e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	785b      	ldrb	r3, [r3, #1]
 8002494:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002496:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800249c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80024a4:	4313      	orrs	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	22ca      	movs	r2, #202	; 0xca
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2253      	movs	r2, #83	; 0x53
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80024b8:	2513      	movs	r5, #19
 80024ba:	197c      	adds	r4, r7, r5
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	0018      	movs	r0, r3
 80024c0:	f000 fa56 	bl	8002970 <RTC_EnterInitMode>
 80024c4:	0003      	movs	r3, r0
 80024c6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80024c8:	0028      	movs	r0, r5
 80024ca:	183b      	adds	r3, r7, r0
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10c      	bne.n	80024ec <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4910      	ldr	r1, [pc, #64]	; (800251c <HAL_RTC_SetDate+0x124>)
 80024da:	400a      	ands	r2, r1
 80024dc:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80024de:	183c      	adds	r4, r7, r0
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	0018      	movs	r0, r3
 80024e4:	f000 fa88 	bl	80029f8 <RTC_ExitInitMode>
 80024e8:	0003      	movs	r3, r0
 80024ea:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80024ec:	2313      	movs	r3, #19
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d103      	bne.n	80024fe <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2221      	movs	r2, #33	; 0x21
 80024fa:	2101      	movs	r1, #1
 80024fc:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	22ff      	movs	r2, #255	; 0xff
 8002504:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2220      	movs	r2, #32
 800250a:	2100      	movs	r1, #0
 800250c:	5499      	strb	r1, [r3, r2]

  return status;
 800250e:	2313      	movs	r3, #19
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	781b      	ldrb	r3, [r3, #0]
}
 8002514:	0018      	movs	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	b006      	add	sp, #24
 800251a:	bdb0      	pop	{r4, r5, r7, pc}
 800251c:	00ffff3f 	.word	0x00ffff3f

08002520 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4a21      	ldr	r2, [pc, #132]	; (80025bc <HAL_RTC_GetDate+0x9c>)
 8002538:	4013      	ands	r3, r2
 800253a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	0c1b      	lsrs	r3, r3, #16
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	b2db      	uxtb	r3, r3
 800254c:	221f      	movs	r2, #31
 800254e:	4013      	ands	r3, r2
 8002550:	b2da      	uxtb	r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	223f      	movs	r2, #63	; 0x3f
 800255c:	4013      	ands	r3, r2
 800255e:	b2da      	uxtb	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	0b5b      	lsrs	r3, r3, #13
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2207      	movs	r2, #7
 800256c:	4013      	ands	r3, r2
 800256e:	b2da      	uxtb	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d11a      	bne.n	80025b0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	78db      	ldrb	r3, [r3, #3]
 800257e:	0018      	movs	r0, r3
 8002580:	f000 fa85 	bl	8002a8e <RTC_Bcd2ToByte>
 8002584:	0003      	movs	r3, r0
 8002586:	001a      	movs	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	785b      	ldrb	r3, [r3, #1]
 8002590:	0018      	movs	r0, r3
 8002592:	f000 fa7c 	bl	8002a8e <RTC_Bcd2ToByte>
 8002596:	0003      	movs	r3, r0
 8002598:	001a      	movs	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	789b      	ldrb	r3, [r3, #2]
 80025a2:	0018      	movs	r0, r3
 80025a4:	f000 fa73 	bl	8002a8e <RTC_Bcd2ToByte>
 80025a8:	0003      	movs	r3, r0
 80025aa:	001a      	movs	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	0018      	movs	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b006      	add	sp, #24
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	00ffff3f 	.word	0x00ffff3f

080025c0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b089      	sub	sp, #36	; 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80025cc:	4ba7      	ldr	r3, [pc, #668]	; (800286c <HAL_RTC_SetAlarm_IT+0x2ac>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	22fa      	movs	r2, #250	; 0xfa
 80025d2:	01d1      	lsls	r1, r2, #7
 80025d4:	0018      	movs	r0, r3
 80025d6:	f7fd fda1 	bl	800011c <__udivsi3>
 80025da:	0003      	movs	r3, r0
 80025dc:	001a      	movs	r2, r3
 80025de:	0013      	movs	r3, r2
 80025e0:	015b      	lsls	r3, r3, #5
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	189b      	adds	r3, r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	5c9b      	ldrb	r3, [r3, r2]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_RTC_SetAlarm_IT+0x42>
 80025fe:	2302      	movs	r3, #2
 8002600:	e130      	b.n	8002864 <HAL_RTC_SetAlarm_IT+0x2a4>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2220      	movs	r2, #32
 8002606:	2101      	movs	r1, #1
 8002608:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2221      	movs	r2, #33	; 0x21
 800260e:	2102      	movs	r1, #2
 8002610:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d136      	bne.n	8002686 <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2240      	movs	r2, #64	; 0x40
 8002620:	4013      	ands	r3, r2
 8002622:	d102      	bne.n	800262a <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2200      	movs	r2, #0
 8002628:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	0018      	movs	r0, r3
 8002630:	f000 fa0c 	bl	8002a4c <RTC_ByteToBcd2>
 8002634:	0003      	movs	r3, r0
 8002636:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	785b      	ldrb	r3, [r3, #1]
 800263c:	0018      	movs	r0, r3
 800263e:	f000 fa05 	bl	8002a4c <RTC_ByteToBcd2>
 8002642:	0003      	movs	r3, r0
 8002644:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002646:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	789b      	ldrb	r3, [r3, #2]
 800264c:	0018      	movs	r0, r3
 800264e:	f000 f9fd 	bl	8002a4c <RTC_ByteToBcd2>
 8002652:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002654:	0022      	movs	r2, r4
 8002656:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	78db      	ldrb	r3, [r3, #3]
 800265c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800265e:	431a      	orrs	r2, r3
 8002660:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2220      	movs	r2, #32
 8002666:	5c9b      	ldrb	r3, [r3, r2]
 8002668:	0018      	movs	r0, r3
 800266a:	f000 f9ef 	bl	8002a4c <RTC_ByteToBcd2>
 800266e:	0003      	movs	r3, r0
 8002670:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002672:	0022      	movs	r2, r4
 8002674:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800267a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002680:	4313      	orrs	r3, r2
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	e022      	b.n	80026cc <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2240      	movs	r2, #64	; 0x40
 800268e:	4013      	ands	r3, r2
 8002690:	d102      	bne.n	8002698 <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2200      	movs	r2, #0
 8002696:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	785b      	ldrb	r3, [r3, #1]
 80026a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80026a4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80026aa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	78db      	ldrb	r3, [r3, #3]
 80026b0:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80026b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2120      	movs	r1, #32
 80026b8:	5c5b      	ldrb	r3, [r3, r1]
 80026ba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80026bc:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80026c2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	22ca      	movs	r2, #202	; 0xca
 80026de:	625a      	str	r2, [r3, #36]	; 0x24
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2253      	movs	r2, #83	; 0x53
 80026e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d146      	bne.n	8002782 <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	495c      	ldr	r1, [pc, #368]	; (8002870 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8002700:	400a      	ands	r2, r1
 8002702:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	22ff      	movs	r2, #255	; 0xff
 800270c:	401a      	ands	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4958      	ldr	r1, [pc, #352]	; (8002874 <HAL_RTC_SetAlarm_IT+0x2b4>)
 8002714:	430a      	orrs	r2, r1
 8002716:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	3b01      	subs	r3, #1
 800271c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10d      	bne.n	8002740 <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	22ff      	movs	r2, #255	; 0xff
 800272a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2221      	movs	r2, #33	; 0x21
 8002730:	2103      	movs	r1, #3
 8002732:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	2100      	movs	r1, #0
 800273a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e091      	b.n	8002864 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	4013      	ands	r3, r2
 800274a:	d0e5      	beq.n	8002718 <HAL_RTC_SetAlarm_IT+0x158>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2180      	movs	r1, #128	; 0x80
 8002768:	0049      	lsls	r1, r1, #1
 800276a:	430a      	orrs	r2, r1
 800276c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2180      	movs	r1, #128	; 0x80
 800277a:	0149      	lsls	r1, r1, #5
 800277c:	430a      	orrs	r2, r1
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	e055      	b.n	800282e <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	493a      	ldr	r1, [pc, #232]	; (8002878 <HAL_RTC_SetAlarm_IT+0x2b8>)
 800278e:	400a      	ands	r2, r1
 8002790:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	22ff      	movs	r2, #255	; 0xff
 800279a:	401a      	ands	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4936      	ldr	r1, [pc, #216]	; (800287c <HAL_RTC_SetAlarm_IT+0x2bc>)
 80027a2:	430a      	orrs	r2, r1
 80027a4:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80027a6:	4b31      	ldr	r3, [pc, #196]	; (800286c <HAL_RTC_SetAlarm_IT+0x2ac>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	22fa      	movs	r2, #250	; 0xfa
 80027ac:	01d1      	lsls	r1, r2, #7
 80027ae:	0018      	movs	r0, r3
 80027b0:	f7fd fcb4 	bl	800011c <__udivsi3>
 80027b4:	0003      	movs	r3, r0
 80027b6:	001a      	movs	r2, r3
 80027b8:	0013      	movs	r3, r2
 80027ba:	015b      	lsls	r3, r3, #5
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	189b      	adds	r3, r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10d      	bne.n	80027ee <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	22ff      	movs	r2, #255	; 0xff
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2221      	movs	r2, #33	; 0x21
 80027de:	2103      	movs	r1, #3
 80027e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2220      	movs	r2, #32
 80027e6:	2100      	movs	r1, #0
 80027e8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e03a      	b.n	8002864 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2202      	movs	r2, #2
 80027f6:	4013      	ands	r3, r2
 80027f8:	d0e5      	beq.n	80027c6 <HAL_RTC_SetAlarm_IT+0x206>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2180      	movs	r1, #128	; 0x80
 8002816:	0089      	lsls	r1, r1, #2
 8002818:	430a      	orrs	r2, r1
 800281a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2180      	movs	r1, #128	; 0x80
 8002828:	0189      	lsls	r1, r1, #6
 800282a:	430a      	orrs	r2, r1
 800282c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800282e:	4b14      	ldr	r3, [pc, #80]	; (8002880 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8002834:	2180      	movs	r1, #128	; 0x80
 8002836:	0289      	lsls	r1, r1, #10
 8002838:	430a      	orrs	r2, r1
 800283a:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800283c:	4b10      	ldr	r3, [pc, #64]	; (8002880 <HAL_RTC_SetAlarm_IT+0x2c0>)
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8002842:	2180      	movs	r1, #128	; 0x80
 8002844:	0289      	lsls	r1, r1, #10
 8002846:	430a      	orrs	r2, r1
 8002848:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	22ff      	movs	r2, #255	; 0xff
 8002850:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2221      	movs	r2, #33	; 0x21
 8002856:	2101      	movs	r1, #1
 8002858:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	2100      	movs	r1, #0
 8002860:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	b009      	add	sp, #36	; 0x24
 800286a:	bd90      	pop	{r4, r7, pc}
 800286c:	20000000 	.word	0x20000000
 8002870:	fffffeff 	.word	0xfffffeff
 8002874:	fffffe7f 	.word	0xfffffe7f
 8002878:	fffffdff 	.word	0xfffffdff
 800287c:	fffffd7f 	.word	0xfffffd7f
 8002880:	40010400 	.word	0x40010400

08002884 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <HAL_RTC_AlarmIRQHandler+0x90>)
 800288e:	2280      	movs	r2, #128	; 0x80
 8002890:	0292      	lsls	r2, r2, #10
 8002892:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	015b      	lsls	r3, r3, #5
 800289e:	4013      	ands	r3, r2
 80028a0:	d014      	beq.n	80028cc <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4013      	ands	r3, r2
 80028ae:	d00d      	beq.n	80028cc <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	22ff      	movs	r2, #255	; 0xff
 80028b8:	401a      	ands	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4916      	ldr	r1, [pc, #88]	; (8002918 <HAL_RTC_AlarmIRQHandler+0x94>)
 80028c0:	430a      	orrs	r2, r1
 80028c2:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	0018      	movs	r0, r3
 80028c8:	f7fd fff4 	bl	80008b4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	019b      	lsls	r3, r3, #6
 80028d6:	4013      	ands	r3, r2
 80028d8:	d014      	beq.n	8002904 <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4013      	ands	r3, r2
 80028e6:	d00d      	beq.n	8002904 <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	22ff      	movs	r2, #255	; 0xff
 80028f0:	401a      	ands	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4909      	ldr	r1, [pc, #36]	; (800291c <HAL_RTC_AlarmIRQHandler+0x98>)
 80028f8:	430a      	orrs	r2, r1
 80028fa:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	0018      	movs	r0, r3
 8002900:	f000 f9f4 	bl	8002cec <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2221      	movs	r2, #33	; 0x21
 8002908:	2101      	movs	r1, #1
 800290a:	5499      	strb	r1, [r3, r2]
}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	b002      	add	sp, #8
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40010400 	.word	0x40010400
 8002918:	fffffe7f 	.word	0xfffffe7f
 800291c:	fffffd7f 	.word	0xfffffd7f

08002920 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0e      	ldr	r2, [pc, #56]	; (800296c <HAL_RTC_WaitForSynchro+0x4c>)
 8002932:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002934:	f7fe f9a6 	bl	8000c84 <HAL_GetTick>
 8002938:	0003      	movs	r3, r0
 800293a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800293c:	e00a      	b.n	8002954 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800293e:	f7fe f9a1 	bl	8000c84 <HAL_GetTick>
 8002942:	0002      	movs	r2, r0
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1ad2      	subs	r2, r2, r3
 8002948:	23fa      	movs	r3, #250	; 0xfa
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	429a      	cmp	r2, r3
 800294e:	d901      	bls.n	8002954 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e006      	b.n	8002962 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	4013      	ands	r3, r2
 800295e:	d0ee      	beq.n	800293e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	0018      	movs	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	b004      	add	sp, #16
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	00017f5f 	.word	0x00017f5f

08002970 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800297c:	230f      	movs	r3, #15
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2240      	movs	r2, #64	; 0x40
 800298c:	4013      	ands	r3, r2
 800298e:	d12c      	bne.n	80029ea <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2180      	movs	r1, #128	; 0x80
 800299c:	430a      	orrs	r2, r1
 800299e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029a0:	f7fe f970 	bl	8000c84 <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80029a8:	e014      	b.n	80029d4 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80029aa:	f7fe f96b 	bl	8000c84 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	1ad2      	subs	r2, r2, r3
 80029b4:	200f      	movs	r0, #15
 80029b6:	183b      	adds	r3, r7, r0
 80029b8:	1839      	adds	r1, r7, r0
 80029ba:	7809      	ldrb	r1, [r1, #0]
 80029bc:	7019      	strb	r1, [r3, #0]
 80029be:	23fa      	movs	r3, #250	; 0xfa
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d906      	bls.n	80029d4 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2221      	movs	r2, #33	; 0x21
 80029ca:	2104      	movs	r1, #4
 80029cc:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80029ce:	183b      	adds	r3, r7, r0
 80029d0:	2201      	movs	r2, #1
 80029d2:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2240      	movs	r2, #64	; 0x40
 80029dc:	4013      	ands	r3, r2
 80029de:	d104      	bne.n	80029ea <RTC_EnterInitMode+0x7a>
 80029e0:	230f      	movs	r3, #15
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d1df      	bne.n	80029aa <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80029ea:	230f      	movs	r3, #15
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	781b      	ldrb	r3, [r3, #0]
}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b004      	add	sp, #16
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a00:	240f      	movs	r4, #15
 8002a02:	193b      	adds	r3, r7, r4
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2180      	movs	r1, #128	; 0x80
 8002a14:	438a      	bics	r2, r1
 8002a16:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	4013      	ands	r3, r2
 8002a22:	d10c      	bne.n	8002a3e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	0018      	movs	r0, r3
 8002a28:	f7ff ff7a 	bl	8002920 <HAL_RTC_WaitForSynchro>
 8002a2c:	1e03      	subs	r3, r0, #0
 8002a2e:	d006      	beq.n	8002a3e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2221      	movs	r2, #33	; 0x21
 8002a34:	2104      	movs	r1, #4
 8002a36:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002a38:	193b      	adds	r3, r7, r4
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002a3e:	230f      	movs	r3, #15
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	781b      	ldrb	r3, [r3, #0]
}
 8002a44:	0018      	movs	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b005      	add	sp, #20
 8002a4a:	bd90      	pop	{r4, r7, pc}

08002a4c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	0002      	movs	r2, r0
 8002a54:	1dfb      	adds	r3, r7, #7
 8002a56:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002a5c:	e007      	b.n	8002a6e <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	3301      	adds	r3, #1
 8002a62:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002a64:	1dfb      	adds	r3, r7, #7
 8002a66:	1dfa      	adds	r2, r7, #7
 8002a68:	7812      	ldrb	r2, [r2, #0]
 8002a6a:	3a0a      	subs	r2, #10
 8002a6c:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8002a6e:	1dfb      	adds	r3, r7, #7
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b09      	cmp	r3, #9
 8002a74:	d8f3      	bhi.n	8002a5e <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	1dfb      	adds	r3, r7, #7
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	b2db      	uxtb	r3, r3
}
 8002a86:	0018      	movs	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b004      	add	sp, #16
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b084      	sub	sp, #16
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	0002      	movs	r2, r0
 8002a96:	1dfb      	adds	r3, r7, #7
 8002a98:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002a9e:	1dfb      	adds	r3, r7, #7
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	001a      	movs	r2, r3
 8002aa8:	0013      	movs	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	189b      	adds	r3, r3, r2
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	1dfb      	adds	r3, r7, #7
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	210f      	movs	r1, #15
 8002abc:	400b      	ands	r3, r1
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	18d3      	adds	r3, r2, r3
 8002ac2:	b2db      	uxtb	r3, r3
}
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b004      	add	sp, #16
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002ad8:	4b64      	ldr	r3, [pc, #400]	; (8002c6c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	22fa      	movs	r2, #250	; 0xfa
 8002ade:	01d1      	lsls	r1, r2, #7
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f7fd fb1b 	bl	800011c <__udivsi3>
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	001a      	movs	r2, r3
 8002aea:	0013      	movs	r3, r2
 8002aec:	015b      	lsls	r3, r3, #5
 8002aee:	1a9b      	subs	r3, r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	189b      	adds	r3, r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	5c9b      	ldrb	r3, [r3, r2]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e0ad      	b.n	8002c62 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2221      	movs	r2, #33	; 0x21
 8002b12:	2102      	movs	r1, #2
 8002b14:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	22ca      	movs	r2, #202	; 0xca
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2253      	movs	r2, #83	; 0x53
 8002b24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4013      	ands	r3, r2
 8002b32:	d019      	beq.n	8002b68 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10d      	bne.n	8002b5c <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	22ff      	movs	r2, #255	; 0xff
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2221      	movs	r2, #33	; 0x21
 8002b4c:	2103      	movs	r1, #3
 8002b4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	2100      	movs	r1, #0
 8002b56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e082      	b.n	8002c62 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	2204      	movs	r2, #4
 8002b64:	4013      	ands	r3, r2
 8002b66:	d1e5      	bne.n	8002b34 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	493f      	ldr	r1, [pc, #252]	; (8002c70 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8002b74:	400a      	ands	r2, r1
 8002b76:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	22ff      	movs	r2, #255	; 0xff
 8002b80:	401a      	ands	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	493b      	ldr	r1, [pc, #236]	; (8002c74 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002b8c:	4b37      	ldr	r3, [pc, #220]	; (8002c6c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	22fa      	movs	r2, #250	; 0xfa
 8002b92:	01d1      	lsls	r1, r2, #7
 8002b94:	0018      	movs	r0, r3
 8002b96:	f7fd fac1 	bl	800011c <__udivsi3>
 8002b9a:	0003      	movs	r3, r0
 8002b9c:	001a      	movs	r2, r3
 8002b9e:	0013      	movs	r3, r2
 8002ba0:	015b      	lsls	r3, r3, #5
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	189b      	adds	r3, r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10d      	bne.n	8002bd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	22ff      	movs	r2, #255	; 0xff
 8002bbe:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2221      	movs	r2, #33	; 0x21
 8002bc4:	2103      	movs	r1, #3
 8002bc6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	2100      	movs	r1, #0
 8002bce:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e046      	b.n	8002c62 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2204      	movs	r2, #4
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d0e5      	beq.n	8002bac <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2107      	movs	r1, #7
 8002bec:	438a      	bics	r2, r1
 8002bee:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6899      	ldr	r1, [r3, #8]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002c0e:	2180      	movs	r1, #128	; 0x80
 8002c10:	0349      	lsls	r1, r1, #13
 8002c12:	430a      	orrs	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002c16:	4b18      	ldr	r3, [pc, #96]	; (8002c78 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002c1c:	2180      	movs	r1, #128	; 0x80
 8002c1e:	0349      	lsls	r1, r1, #13
 8002c20:	430a      	orrs	r2, r1
 8002c22:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2180      	movs	r1, #128	; 0x80
 8002c30:	01c9      	lsls	r1, r1, #7
 8002c32:	430a      	orrs	r2, r1
 8002c34:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2180      	movs	r1, #128	; 0x80
 8002c42:	00c9      	lsls	r1, r1, #3
 8002c44:	430a      	orrs	r2, r1
 8002c46:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	22ff      	movs	r2, #255	; 0xff
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2221      	movs	r2, #33	; 0x21
 8002c54:	2101      	movs	r1, #1
 8002c56:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	0018      	movs	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b006      	add	sp, #24
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	fffffbff 	.word	0xfffffbff
 8002c74:	fffffb7f 	.word	0xfffffb7f
 8002c78:	40010400 	.word	0x40010400

08002c7c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002c84:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8002c86:	2280      	movs	r2, #128	; 0x80
 8002c88:	0352      	lsls	r2, r2, #13
 8002c8a:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	01db      	lsls	r3, r3, #7
 8002c96:	4013      	ands	r3, r2
 8002c98:	d014      	beq.n	8002cc4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d00d      	beq.n	8002cc4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	22ff      	movs	r2, #255	; 0xff
 8002cb0:	401a      	ands	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4908      	ldr	r1, [pc, #32]	; (8002cd8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f000 f80c 	bl	8002cdc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2221      	movs	r2, #33	; 0x21
 8002cc8:	2101      	movs	r1, #1
 8002cca:	5499      	strb	r1, [r3, r2]
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b002      	add	sp, #8
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40010400 	.word	0x40010400
 8002cd8:	fffffb7f 	.word	0xfffffb7f

08002cdc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002ce4:	46c0      	nop			; (mov r8, r8)
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b002      	add	sp, #8
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e044      	b.n	8002d98 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d107      	bne.n	8002d26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2278      	movs	r2, #120	; 0x78
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f7fd fe17 	bl	8000954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2224      	movs	r2, #36	; 0x24
 8002d2a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2101      	movs	r1, #1
 8002d38:	438a      	bics	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f000 f8d0 	bl	8002ee4 <UART_SetConfig>
 8002d44:	0003      	movs	r3, r0
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e024      	b.n	8002d98 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f000 fb47 	bl	80033ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	490d      	ldr	r1, [pc, #52]	; (8002da0 <HAL_UART_Init+0xa4>)
 8002d6a:	400a      	ands	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	212a      	movs	r1, #42	; 0x2a
 8002d7a:	438a      	bics	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	0018      	movs	r0, r3
 8002d92:	f000 fbdf 	bl	8003554 <UART_CheckIdleState>
 8002d96:	0003      	movs	r3, r0
}
 8002d98:	0018      	movs	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b002      	add	sp, #8
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	ffffb7ff 	.word	0xffffb7ff

08002da4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	1dbb      	adds	r3, r7, #6
 8002db2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d000      	beq.n	8002dbe <HAL_UART_Transmit+0x1a>
 8002dbc:	e08c      	b.n	8002ed8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_UART_Transmit+0x28>
 8002dc4:	1dbb      	adds	r3, r7, #6
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e084      	b.n	8002eda <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	015b      	lsls	r3, r3, #5
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d109      	bne.n	8002df0 <HAL_UART_Transmit+0x4c>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d105      	bne.n	8002df0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2201      	movs	r2, #1
 8002de8:	4013      	ands	r3, r2
 8002dea:	d001      	beq.n	8002df0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e074      	b.n	8002eda <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2284      	movs	r2, #132	; 0x84
 8002df4:	2100      	movs	r1, #0
 8002df6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2221      	movs	r2, #33	; 0x21
 8002dfc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dfe:	f7fd ff41 	bl	8000c84 <HAL_GetTick>
 8002e02:	0003      	movs	r3, r0
 8002e04:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1dba      	adds	r2, r7, #6
 8002e0a:	2150      	movs	r1, #80	; 0x50
 8002e0c:	8812      	ldrh	r2, [r2, #0]
 8002e0e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1dba      	adds	r2, r7, #6
 8002e14:	2152      	movs	r1, #82	; 0x52
 8002e16:	8812      	ldrh	r2, [r2, #0]
 8002e18:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	015b      	lsls	r3, r3, #5
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d108      	bne.n	8002e38 <HAL_UART_Transmit+0x94>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d104      	bne.n	8002e38 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	61bb      	str	r3, [r7, #24]
 8002e36:	e003      	b.n	8002e40 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e40:	e02f      	b.n	8002ea2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	0013      	movs	r3, r2
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2180      	movs	r1, #128	; 0x80
 8002e50:	f000 fc28 	bl	80036a4 <UART_WaitOnFlagUntilTimeout>
 8002e54:	1e03      	subs	r3, r0, #0
 8002e56:	d004      	beq.n	8002e62 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e03b      	b.n	8002eda <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10b      	bne.n	8002e80 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	001a      	movs	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	05d2      	lsls	r2, r2, #23
 8002e74:	0dd2      	lsrs	r2, r2, #23
 8002e76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	e007      	b.n	8002e90 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	781a      	ldrb	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2252      	movs	r2, #82	; 0x52
 8002e94:	5a9b      	ldrh	r3, [r3, r2]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b299      	uxth	r1, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2252      	movs	r2, #82	; 0x52
 8002ea0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2252      	movs	r2, #82	; 0x52
 8002ea6:	5a9b      	ldrh	r3, [r3, r2]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1c9      	bne.n	8002e42 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	0013      	movs	r3, r2
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2140      	movs	r1, #64	; 0x40
 8002ebc:	f000 fbf2 	bl	80036a4 <UART_WaitOnFlagUntilTimeout>
 8002ec0:	1e03      	subs	r3, r0, #0
 8002ec2:	d004      	beq.n	8002ece <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e005      	b.n	8002eda <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e000      	b.n	8002eda <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002ed8:	2302      	movs	r3, #2
  }
}
 8002eda:	0018      	movs	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b008      	add	sp, #32
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee4:	b5b0      	push	{r4, r5, r7, lr}
 8002ee6:	b08e      	sub	sp, #56	; 0x38
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eec:	231a      	movs	r3, #26
 8002eee:	2218      	movs	r2, #24
 8002ef0:	189b      	adds	r3, r3, r2
 8002ef2:	19db      	adds	r3, r3, r7
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	431a      	orrs	r2, r3
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4ac6      	ldr	r2, [pc, #792]	; (8003230 <UART_SetConfig+0x34c>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f22:	430a      	orrs	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4ac1      	ldr	r2, [pc, #772]	; (8003234 <UART_SetConfig+0x350>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	0019      	movs	r1, r3
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4abb      	ldr	r2, [pc, #748]	; (8003238 <UART_SetConfig+0x354>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d004      	beq.n	8002f58 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f54:	4313      	orrs	r3, r2
 8002f56:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	4ab7      	ldr	r2, [pc, #732]	; (800323c <UART_SetConfig+0x358>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	0019      	movs	r1, r3
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4ab3      	ldr	r2, [pc, #716]	; (8003240 <UART_SetConfig+0x35c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d131      	bne.n	8002fdc <UART_SetConfig+0xf8>
 8002f78:	4bb2      	ldr	r3, [pc, #712]	; (8003244 <UART_SetConfig+0x360>)
 8002f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d01d      	beq.n	8002fc0 <UART_SetConfig+0xdc>
 8002f84:	d823      	bhi.n	8002fce <UART_SetConfig+0xea>
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d00c      	beq.n	8002fa4 <UART_SetConfig+0xc0>
 8002f8a:	d820      	bhi.n	8002fce <UART_SetConfig+0xea>
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <UART_SetConfig+0xb2>
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d00e      	beq.n	8002fb2 <UART_SetConfig+0xce>
 8002f94:	e01b      	b.n	8002fce <UART_SetConfig+0xea>
 8002f96:	231b      	movs	r3, #27
 8002f98:	2218      	movs	r2, #24
 8002f9a:	189b      	adds	r3, r3, r2
 8002f9c:	19db      	adds	r3, r3, r7
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	701a      	strb	r2, [r3, #0]
 8002fa2:	e09c      	b.n	80030de <UART_SetConfig+0x1fa>
 8002fa4:	231b      	movs	r3, #27
 8002fa6:	2218      	movs	r2, #24
 8002fa8:	189b      	adds	r3, r3, r2
 8002faa:	19db      	adds	r3, r3, r7
 8002fac:	2202      	movs	r2, #2
 8002fae:	701a      	strb	r2, [r3, #0]
 8002fb0:	e095      	b.n	80030de <UART_SetConfig+0x1fa>
 8002fb2:	231b      	movs	r3, #27
 8002fb4:	2218      	movs	r2, #24
 8002fb6:	189b      	adds	r3, r3, r2
 8002fb8:	19db      	adds	r3, r3, r7
 8002fba:	2204      	movs	r2, #4
 8002fbc:	701a      	strb	r2, [r3, #0]
 8002fbe:	e08e      	b.n	80030de <UART_SetConfig+0x1fa>
 8002fc0:	231b      	movs	r3, #27
 8002fc2:	2218      	movs	r2, #24
 8002fc4:	189b      	adds	r3, r3, r2
 8002fc6:	19db      	adds	r3, r3, r7
 8002fc8:	2208      	movs	r2, #8
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	e087      	b.n	80030de <UART_SetConfig+0x1fa>
 8002fce:	231b      	movs	r3, #27
 8002fd0:	2218      	movs	r2, #24
 8002fd2:	189b      	adds	r3, r3, r2
 8002fd4:	19db      	adds	r3, r3, r7
 8002fd6:	2210      	movs	r2, #16
 8002fd8:	701a      	strb	r2, [r3, #0]
 8002fda:	e080      	b.n	80030de <UART_SetConfig+0x1fa>
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a99      	ldr	r2, [pc, #612]	; (8003248 <UART_SetConfig+0x364>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d131      	bne.n	800304a <UART_SetConfig+0x166>
 8002fe6:	4b97      	ldr	r3, [pc, #604]	; (8003244 <UART_SetConfig+0x360>)
 8002fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fea:	220c      	movs	r2, #12
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b0c      	cmp	r3, #12
 8002ff0:	d01d      	beq.n	800302e <UART_SetConfig+0x14a>
 8002ff2:	d823      	bhi.n	800303c <UART_SetConfig+0x158>
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d00c      	beq.n	8003012 <UART_SetConfig+0x12e>
 8002ff8:	d820      	bhi.n	800303c <UART_SetConfig+0x158>
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <UART_SetConfig+0x120>
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d00e      	beq.n	8003020 <UART_SetConfig+0x13c>
 8003002:	e01b      	b.n	800303c <UART_SetConfig+0x158>
 8003004:	231b      	movs	r3, #27
 8003006:	2218      	movs	r2, #24
 8003008:	189b      	adds	r3, r3, r2
 800300a:	19db      	adds	r3, r3, r7
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
 8003010:	e065      	b.n	80030de <UART_SetConfig+0x1fa>
 8003012:	231b      	movs	r3, #27
 8003014:	2218      	movs	r2, #24
 8003016:	189b      	adds	r3, r3, r2
 8003018:	19db      	adds	r3, r3, r7
 800301a:	2202      	movs	r2, #2
 800301c:	701a      	strb	r2, [r3, #0]
 800301e:	e05e      	b.n	80030de <UART_SetConfig+0x1fa>
 8003020:	231b      	movs	r3, #27
 8003022:	2218      	movs	r2, #24
 8003024:	189b      	adds	r3, r3, r2
 8003026:	19db      	adds	r3, r3, r7
 8003028:	2204      	movs	r2, #4
 800302a:	701a      	strb	r2, [r3, #0]
 800302c:	e057      	b.n	80030de <UART_SetConfig+0x1fa>
 800302e:	231b      	movs	r3, #27
 8003030:	2218      	movs	r2, #24
 8003032:	189b      	adds	r3, r3, r2
 8003034:	19db      	adds	r3, r3, r7
 8003036:	2208      	movs	r2, #8
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	e050      	b.n	80030de <UART_SetConfig+0x1fa>
 800303c:	231b      	movs	r3, #27
 800303e:	2218      	movs	r2, #24
 8003040:	189b      	adds	r3, r3, r2
 8003042:	19db      	adds	r3, r3, r7
 8003044:	2210      	movs	r2, #16
 8003046:	701a      	strb	r2, [r3, #0]
 8003048:	e049      	b.n	80030de <UART_SetConfig+0x1fa>
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a7a      	ldr	r2, [pc, #488]	; (8003238 <UART_SetConfig+0x354>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d13e      	bne.n	80030d2 <UART_SetConfig+0x1ee>
 8003054:	4b7b      	ldr	r3, [pc, #492]	; (8003244 <UART_SetConfig+0x360>)
 8003056:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003058:	23c0      	movs	r3, #192	; 0xc0
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	4013      	ands	r3, r2
 800305e:	22c0      	movs	r2, #192	; 0xc0
 8003060:	0112      	lsls	r2, r2, #4
 8003062:	4293      	cmp	r3, r2
 8003064:	d027      	beq.n	80030b6 <UART_SetConfig+0x1d2>
 8003066:	22c0      	movs	r2, #192	; 0xc0
 8003068:	0112      	lsls	r2, r2, #4
 800306a:	4293      	cmp	r3, r2
 800306c:	d82a      	bhi.n	80030c4 <UART_SetConfig+0x1e0>
 800306e:	2280      	movs	r2, #128	; 0x80
 8003070:	0112      	lsls	r2, r2, #4
 8003072:	4293      	cmp	r3, r2
 8003074:	d011      	beq.n	800309a <UART_SetConfig+0x1b6>
 8003076:	2280      	movs	r2, #128	; 0x80
 8003078:	0112      	lsls	r2, r2, #4
 800307a:	4293      	cmp	r3, r2
 800307c:	d822      	bhi.n	80030c4 <UART_SetConfig+0x1e0>
 800307e:	2b00      	cmp	r3, #0
 8003080:	d004      	beq.n	800308c <UART_SetConfig+0x1a8>
 8003082:	2280      	movs	r2, #128	; 0x80
 8003084:	00d2      	lsls	r2, r2, #3
 8003086:	4293      	cmp	r3, r2
 8003088:	d00e      	beq.n	80030a8 <UART_SetConfig+0x1c4>
 800308a:	e01b      	b.n	80030c4 <UART_SetConfig+0x1e0>
 800308c:	231b      	movs	r3, #27
 800308e:	2218      	movs	r2, #24
 8003090:	189b      	adds	r3, r3, r2
 8003092:	19db      	adds	r3, r3, r7
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
 8003098:	e021      	b.n	80030de <UART_SetConfig+0x1fa>
 800309a:	231b      	movs	r3, #27
 800309c:	2218      	movs	r2, #24
 800309e:	189b      	adds	r3, r3, r2
 80030a0:	19db      	adds	r3, r3, r7
 80030a2:	2202      	movs	r2, #2
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	e01a      	b.n	80030de <UART_SetConfig+0x1fa>
 80030a8:	231b      	movs	r3, #27
 80030aa:	2218      	movs	r2, #24
 80030ac:	189b      	adds	r3, r3, r2
 80030ae:	19db      	adds	r3, r3, r7
 80030b0:	2204      	movs	r2, #4
 80030b2:	701a      	strb	r2, [r3, #0]
 80030b4:	e013      	b.n	80030de <UART_SetConfig+0x1fa>
 80030b6:	231b      	movs	r3, #27
 80030b8:	2218      	movs	r2, #24
 80030ba:	189b      	adds	r3, r3, r2
 80030bc:	19db      	adds	r3, r3, r7
 80030be:	2208      	movs	r2, #8
 80030c0:	701a      	strb	r2, [r3, #0]
 80030c2:	e00c      	b.n	80030de <UART_SetConfig+0x1fa>
 80030c4:	231b      	movs	r3, #27
 80030c6:	2218      	movs	r2, #24
 80030c8:	189b      	adds	r3, r3, r2
 80030ca:	19db      	adds	r3, r3, r7
 80030cc:	2210      	movs	r2, #16
 80030ce:	701a      	strb	r2, [r3, #0]
 80030d0:	e005      	b.n	80030de <UART_SetConfig+0x1fa>
 80030d2:	231b      	movs	r3, #27
 80030d4:	2218      	movs	r2, #24
 80030d6:	189b      	adds	r3, r3, r2
 80030d8:	19db      	adds	r3, r3, r7
 80030da:	2210      	movs	r2, #16
 80030dc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a55      	ldr	r2, [pc, #340]	; (8003238 <UART_SetConfig+0x354>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d000      	beq.n	80030ea <UART_SetConfig+0x206>
 80030e8:	e084      	b.n	80031f4 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030ea:	231b      	movs	r3, #27
 80030ec:	2218      	movs	r2, #24
 80030ee:	189b      	adds	r3, r3, r2
 80030f0:	19db      	adds	r3, r3, r7
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d01d      	beq.n	8003134 <UART_SetConfig+0x250>
 80030f8:	dc20      	bgt.n	800313c <UART_SetConfig+0x258>
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d015      	beq.n	800312a <UART_SetConfig+0x246>
 80030fe:	dc1d      	bgt.n	800313c <UART_SetConfig+0x258>
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <UART_SetConfig+0x226>
 8003104:	2b02      	cmp	r3, #2
 8003106:	d005      	beq.n	8003114 <UART_SetConfig+0x230>
 8003108:	e018      	b.n	800313c <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800310a:	f7fe fe17 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 800310e:	0003      	movs	r3, r0
 8003110:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003112:	e01c      	b.n	800314e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003114:	4b4b      	ldr	r3, [pc, #300]	; (8003244 <UART_SetConfig+0x360>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2210      	movs	r2, #16
 800311a:	4013      	ands	r3, r2
 800311c:	d002      	beq.n	8003124 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800311e:	4b4b      	ldr	r3, [pc, #300]	; (800324c <UART_SetConfig+0x368>)
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003122:	e014      	b.n	800314e <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003124:	4b4a      	ldr	r3, [pc, #296]	; (8003250 <UART_SetConfig+0x36c>)
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003128:	e011      	b.n	800314e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800312a:	f7fe fd57 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 800312e:	0003      	movs	r3, r0
 8003130:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003132:	e00c      	b.n	800314e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800313a:	e008      	b.n	800314e <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003140:	231a      	movs	r3, #26
 8003142:	2218      	movs	r2, #24
 8003144:	189b      	adds	r3, r3, r2
 8003146:	19db      	adds	r3, r3, r7
 8003148:	2201      	movs	r2, #1
 800314a:	701a      	strb	r2, [r3, #0]
        break;
 800314c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d100      	bne.n	8003156 <UART_SetConfig+0x272>
 8003154:	e132      	b.n	80033bc <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	0013      	movs	r3, r2
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	189b      	adds	r3, r3, r2
 8003160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003162:	429a      	cmp	r2, r3
 8003164:	d305      	bcc.n	8003172 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800316c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800316e:	429a      	cmp	r2, r3
 8003170:	d906      	bls.n	8003180 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8003172:	231a      	movs	r3, #26
 8003174:	2218      	movs	r2, #24
 8003176:	189b      	adds	r3, r3, r2
 8003178:	19db      	adds	r3, r3, r7
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	e11d      	b.n	80033bc <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	6939      	ldr	r1, [r7, #16]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	000b      	movs	r3, r1
 800318e:	0e1b      	lsrs	r3, r3, #24
 8003190:	0010      	movs	r0, r2
 8003192:	0205      	lsls	r5, r0, #8
 8003194:	431d      	orrs	r5, r3
 8003196:	000b      	movs	r3, r1
 8003198:	021c      	lsls	r4, r3, #8
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	085b      	lsrs	r3, r3, #1
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	68b8      	ldr	r0, [r7, #8]
 80031a8:	68f9      	ldr	r1, [r7, #12]
 80031aa:	1900      	adds	r0, r0, r4
 80031ac:	4169      	adcs	r1, r5
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	2300      	movs	r3, #0
 80031b6:	607b      	str	r3, [r7, #4]
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f7fd f83a 	bl	8000234 <__aeabi_uldivmod>
 80031c0:	0002      	movs	r2, r0
 80031c2:	000b      	movs	r3, r1
 80031c4:	0013      	movs	r3, r2
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ca:	23c0      	movs	r3, #192	; 0xc0
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d309      	bcc.n	80031e6 <UART_SetConfig+0x302>
 80031d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	035b      	lsls	r3, r3, #13
 80031d8:	429a      	cmp	r2, r3
 80031da:	d204      	bcs.n	80031e6 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031e2:	60da      	str	r2, [r3, #12]
 80031e4:	e0ea      	b.n	80033bc <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80031e6:	231a      	movs	r3, #26
 80031e8:	2218      	movs	r2, #24
 80031ea:	189b      	adds	r3, r3, r2
 80031ec:	19db      	adds	r3, r3, r7
 80031ee:	2201      	movs	r2, #1
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	e0e3      	b.n	80033bc <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d000      	beq.n	8003202 <UART_SetConfig+0x31e>
 8003200:	e085      	b.n	800330e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8003202:	231b      	movs	r3, #27
 8003204:	2218      	movs	r2, #24
 8003206:	189b      	adds	r3, r3, r2
 8003208:	19db      	adds	r3, r3, r7
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b08      	cmp	r3, #8
 800320e:	d837      	bhi.n	8003280 <UART_SetConfig+0x39c>
 8003210:	009a      	lsls	r2, r3, #2
 8003212:	4b10      	ldr	r3, [pc, #64]	; (8003254 <UART_SetConfig+0x370>)
 8003214:	18d3      	adds	r3, r2, r3
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800321a:	f7fe fd8f 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 800321e:	0003      	movs	r3, r0
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003222:	e036      	b.n	8003292 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003224:	f7fe fda0 	bl	8001d68 <HAL_RCC_GetPCLK2Freq>
 8003228:	0003      	movs	r3, r0
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800322c:	e031      	b.n	8003292 <UART_SetConfig+0x3ae>
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	efff69f3 	.word	0xefff69f3
 8003234:	ffffcfff 	.word	0xffffcfff
 8003238:	40004800 	.word	0x40004800
 800323c:	fffff4ff 	.word	0xfffff4ff
 8003240:	40013800 	.word	0x40013800
 8003244:	40021000 	.word	0x40021000
 8003248:	40004400 	.word	0x40004400
 800324c:	003d0900 	.word	0x003d0900
 8003250:	00f42400 	.word	0x00f42400
 8003254:	08004950 	.word	0x08004950
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003258:	4b60      	ldr	r3, [pc, #384]	; (80033dc <UART_SetConfig+0x4f8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2210      	movs	r2, #16
 800325e:	4013      	ands	r3, r2
 8003260:	d002      	beq.n	8003268 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003262:	4b5f      	ldr	r3, [pc, #380]	; (80033e0 <UART_SetConfig+0x4fc>)
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003266:	e014      	b.n	8003292 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8003268:	4b5e      	ldr	r3, [pc, #376]	; (80033e4 <UART_SetConfig+0x500>)
 800326a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800326c:	e011      	b.n	8003292 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800326e:	f7fe fcb5 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 8003272:	0003      	movs	r3, r0
 8003274:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003276:	e00c      	b.n	8003292 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800327e:	e008      	b.n	8003292 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003284:	231a      	movs	r3, #26
 8003286:	2218      	movs	r2, #24
 8003288:	189b      	adds	r3, r3, r2
 800328a:	19db      	adds	r3, r3, r7
 800328c:	2201      	movs	r2, #1
 800328e:	701a      	strb	r2, [r3, #0]
        break;
 8003290:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003294:	2b00      	cmp	r3, #0
 8003296:	d100      	bne.n	800329a <UART_SetConfig+0x3b6>
 8003298:	e090      	b.n	80033bc <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329c:	005a      	lsls	r2, r3, #1
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	18d2      	adds	r2, r2, r3
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	0019      	movs	r1, r3
 80032ac:	0010      	movs	r0, r2
 80032ae:	f7fc ff35 	bl	800011c <__udivsi3>
 80032b2:	0003      	movs	r3, r0
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b8:	2b0f      	cmp	r3, #15
 80032ba:	d921      	bls.n	8003300 <UART_SetConfig+0x41c>
 80032bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032be:	2380      	movs	r3, #128	; 0x80
 80032c0:	025b      	lsls	r3, r3, #9
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d21c      	bcs.n	8003300 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	200e      	movs	r0, #14
 80032cc:	2418      	movs	r4, #24
 80032ce:	1903      	adds	r3, r0, r4
 80032d0:	19db      	adds	r3, r3, r7
 80032d2:	210f      	movs	r1, #15
 80032d4:	438a      	bics	r2, r1
 80032d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2207      	movs	r2, #7
 80032e0:	4013      	ands	r3, r2
 80032e2:	b299      	uxth	r1, r3
 80032e4:	1903      	adds	r3, r0, r4
 80032e6:	19db      	adds	r3, r3, r7
 80032e8:	1902      	adds	r2, r0, r4
 80032ea:	19d2      	adds	r2, r2, r7
 80032ec:	8812      	ldrh	r2, [r2, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	1902      	adds	r2, r0, r4
 80032f8:	19d2      	adds	r2, r2, r7
 80032fa:	8812      	ldrh	r2, [r2, #0]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	e05d      	b.n	80033bc <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003300:	231a      	movs	r3, #26
 8003302:	2218      	movs	r2, #24
 8003304:	189b      	adds	r3, r3, r2
 8003306:	19db      	adds	r3, r3, r7
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]
 800330c:	e056      	b.n	80033bc <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800330e:	231b      	movs	r3, #27
 8003310:	2218      	movs	r2, #24
 8003312:	189b      	adds	r3, r3, r2
 8003314:	19db      	adds	r3, r3, r7
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d822      	bhi.n	8003362 <UART_SetConfig+0x47e>
 800331c:	009a      	lsls	r2, r3, #2
 800331e:	4b32      	ldr	r3, [pc, #200]	; (80033e8 <UART_SetConfig+0x504>)
 8003320:	18d3      	adds	r3, r2, r3
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003326:	f7fe fd09 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 800332a:	0003      	movs	r3, r0
 800332c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800332e:	e021      	b.n	8003374 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003330:	f7fe fd1a 	bl	8001d68 <HAL_RCC_GetPCLK2Freq>
 8003334:	0003      	movs	r3, r0
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003338:	e01c      	b.n	8003374 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800333a:	4b28      	ldr	r3, [pc, #160]	; (80033dc <UART_SetConfig+0x4f8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2210      	movs	r2, #16
 8003340:	4013      	ands	r3, r2
 8003342:	d002      	beq.n	800334a <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003344:	4b26      	ldr	r3, [pc, #152]	; (80033e0 <UART_SetConfig+0x4fc>)
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003348:	e014      	b.n	8003374 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 800334a:	4b26      	ldr	r3, [pc, #152]	; (80033e4 <UART_SetConfig+0x500>)
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800334e:	e011      	b.n	8003374 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003350:	f7fe fc44 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 8003354:	0003      	movs	r3, r0
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003358:	e00c      	b.n	8003374 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003360:	e008      	b.n	8003374 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003366:	231a      	movs	r3, #26
 8003368:	2218      	movs	r2, #24
 800336a:	189b      	adds	r3, r3, r2
 800336c:	19db      	adds	r3, r3, r7
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]
        break;
 8003372:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003376:	2b00      	cmp	r3, #0
 8003378:	d020      	beq.n	80033bc <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	085a      	lsrs	r2, r3, #1
 8003380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003382:	18d2      	adds	r2, r2, r3
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	0019      	movs	r1, r3
 800338a:	0010      	movs	r0, r2
 800338c:	f7fc fec6 	bl	800011c <__udivsi3>
 8003390:	0003      	movs	r3, r0
 8003392:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003396:	2b0f      	cmp	r3, #15
 8003398:	d90a      	bls.n	80033b0 <UART_SetConfig+0x4cc>
 800339a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	025b      	lsls	r3, r3, #9
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d205      	bcs.n	80033b0 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60da      	str	r2, [r3, #12]
 80033ae:	e005      	b.n	80033bc <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80033b0:	231a      	movs	r3, #26
 80033b2:	2218      	movs	r2, #24
 80033b4:	189b      	adds	r3, r3, r2
 80033b6:	19db      	adds	r3, r3, r7
 80033b8:	2201      	movs	r2, #1
 80033ba:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2200      	movs	r2, #0
 80033c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	2200      	movs	r2, #0
 80033c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80033c8:	231a      	movs	r3, #26
 80033ca:	2218      	movs	r2, #24
 80033cc:	189b      	adds	r3, r3, r2
 80033ce:	19db      	adds	r3, r3, r7
 80033d0:	781b      	ldrb	r3, [r3, #0]
}
 80033d2:	0018      	movs	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b00e      	add	sp, #56	; 0x38
 80033d8:	bdb0      	pop	{r4, r5, r7, pc}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	40021000 	.word	0x40021000
 80033e0:	003d0900 	.word	0x003d0900
 80033e4:	00f42400 	.word	0x00f42400
 80033e8:	08004974 	.word	0x08004974

080033ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	2201      	movs	r2, #1
 80033fa:	4013      	ands	r3, r2
 80033fc:	d00b      	beq.n	8003416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4a4a      	ldr	r2, [pc, #296]	; (8003530 <UART_AdvFeatureConfig+0x144>)
 8003406:	4013      	ands	r3, r2
 8003408:	0019      	movs	r1, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	2202      	movs	r2, #2
 800341c:	4013      	ands	r3, r2
 800341e:	d00b      	beq.n	8003438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4a43      	ldr	r2, [pc, #268]	; (8003534 <UART_AdvFeatureConfig+0x148>)
 8003428:	4013      	ands	r3, r2
 800342a:	0019      	movs	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	2204      	movs	r2, #4
 800343e:	4013      	ands	r3, r2
 8003440:	d00b      	beq.n	800345a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4a3b      	ldr	r2, [pc, #236]	; (8003538 <UART_AdvFeatureConfig+0x14c>)
 800344a:	4013      	ands	r3, r2
 800344c:	0019      	movs	r1, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	2208      	movs	r2, #8
 8003460:	4013      	ands	r3, r2
 8003462:	d00b      	beq.n	800347c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4a34      	ldr	r2, [pc, #208]	; (800353c <UART_AdvFeatureConfig+0x150>)
 800346c:	4013      	ands	r3, r2
 800346e:	0019      	movs	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	2210      	movs	r2, #16
 8003482:	4013      	ands	r3, r2
 8003484:	d00b      	beq.n	800349e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4a2c      	ldr	r2, [pc, #176]	; (8003540 <UART_AdvFeatureConfig+0x154>)
 800348e:	4013      	ands	r3, r2
 8003490:	0019      	movs	r1, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	2220      	movs	r2, #32
 80034a4:	4013      	ands	r3, r2
 80034a6:	d00b      	beq.n	80034c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	4a25      	ldr	r2, [pc, #148]	; (8003544 <UART_AdvFeatureConfig+0x158>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	2240      	movs	r2, #64	; 0x40
 80034c6:	4013      	ands	r3, r2
 80034c8:	d01d      	beq.n	8003506 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4a1d      	ldr	r2, [pc, #116]	; (8003548 <UART_AdvFeatureConfig+0x15c>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	0019      	movs	r1, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e6:	2380      	movs	r3, #128	; 0x80
 80034e8:	035b      	lsls	r3, r3, #13
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d10b      	bne.n	8003506 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4a15      	ldr	r2, [pc, #84]	; (800354c <UART_AdvFeatureConfig+0x160>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	0019      	movs	r1, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	2280      	movs	r2, #128	; 0x80
 800350c:	4013      	ands	r3, r2
 800350e:	d00b      	beq.n	8003528 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	4a0e      	ldr	r2, [pc, #56]	; (8003550 <UART_AdvFeatureConfig+0x164>)
 8003518:	4013      	ands	r3, r2
 800351a:	0019      	movs	r1, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
  }
}
 8003528:	46c0      	nop			; (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	b002      	add	sp, #8
 800352e:	bd80      	pop	{r7, pc}
 8003530:	fffdffff 	.word	0xfffdffff
 8003534:	fffeffff 	.word	0xfffeffff
 8003538:	fffbffff 	.word	0xfffbffff
 800353c:	ffff7fff 	.word	0xffff7fff
 8003540:	ffffefff 	.word	0xffffefff
 8003544:	ffffdfff 	.word	0xffffdfff
 8003548:	ffefffff 	.word	0xffefffff
 800354c:	ff9fffff 	.word	0xff9fffff
 8003550:	fff7ffff 	.word	0xfff7ffff

08003554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b092      	sub	sp, #72	; 0x48
 8003558:	af02      	add	r7, sp, #8
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2284      	movs	r2, #132	; 0x84
 8003560:	2100      	movs	r1, #0
 8003562:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003564:	f7fd fb8e 	bl	8000c84 <HAL_GetTick>
 8003568:	0003      	movs	r3, r0
 800356a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2208      	movs	r2, #8
 8003574:	4013      	ands	r3, r2
 8003576:	2b08      	cmp	r3, #8
 8003578:	d12c      	bne.n	80035d4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800357a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357c:	2280      	movs	r2, #128	; 0x80
 800357e:	0391      	lsls	r1, r2, #14
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4a46      	ldr	r2, [pc, #280]	; (800369c <UART_CheckIdleState+0x148>)
 8003584:	9200      	str	r2, [sp, #0]
 8003586:	2200      	movs	r2, #0
 8003588:	f000 f88c 	bl	80036a4 <UART_WaitOnFlagUntilTimeout>
 800358c:	1e03      	subs	r3, r0, #0
 800358e:	d021      	beq.n	80035d4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003590:	f3ef 8310 	mrs	r3, PRIMASK
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003598:	63bb      	str	r3, [r7, #56]	; 0x38
 800359a:	2301      	movs	r3, #1
 800359c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a0:	f383 8810 	msr	PRIMASK, r3
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2180      	movs	r1, #128	; 0x80
 80035b2:	438a      	bics	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035bc:	f383 8810 	msr	PRIMASK, r3
}
 80035c0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2278      	movs	r2, #120	; 0x78
 80035cc:	2100      	movs	r1, #0
 80035ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e05f      	b.n	8003694 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2204      	movs	r2, #4
 80035dc:	4013      	ands	r3, r2
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d146      	bne.n	8003670 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e4:	2280      	movs	r2, #128	; 0x80
 80035e6:	03d1      	lsls	r1, r2, #15
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	4a2c      	ldr	r2, [pc, #176]	; (800369c <UART_CheckIdleState+0x148>)
 80035ec:	9200      	str	r2, [sp, #0]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f000 f858 	bl	80036a4 <UART_WaitOnFlagUntilTimeout>
 80035f4:	1e03      	subs	r3, r0, #0
 80035f6:	d03b      	beq.n	8003670 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f8:	f3ef 8310 	mrs	r3, PRIMASK
 80035fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80035fe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003600:	637b      	str	r3, [r7, #52]	; 0x34
 8003602:	2301      	movs	r3, #1
 8003604:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f383 8810 	msr	PRIMASK, r3
}
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4921      	ldr	r1, [pc, #132]	; (80036a0 <UART_CheckIdleState+0x14c>)
 800361a:	400a      	ands	r2, r1
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003620:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f383 8810 	msr	PRIMASK, r3
}
 8003628:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800362a:	f3ef 8310 	mrs	r3, PRIMASK
 800362e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003630:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003632:	633b      	str	r3, [r7, #48]	; 0x30
 8003634:	2301      	movs	r3, #1
 8003636:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f383 8810 	msr	PRIMASK, r3
}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2101      	movs	r1, #1
 800364c:	438a      	bics	r2, r1
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	f383 8810 	msr	PRIMASK, r3
}
 800365a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2280      	movs	r2, #128	; 0x80
 8003660:	2120      	movs	r1, #32
 8003662:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2278      	movs	r2, #120	; 0x78
 8003668:	2100      	movs	r1, #0
 800366a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e011      	b.n	8003694 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2280      	movs	r2, #128	; 0x80
 800367a:	2120      	movs	r1, #32
 800367c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2278      	movs	r2, #120	; 0x78
 800368e:	2100      	movs	r1, #0
 8003690:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	b010      	add	sp, #64	; 0x40
 800369a:	bd80      	pop	{r7, pc}
 800369c:	01ffffff 	.word	0x01ffffff
 80036a0:	fffffedf 	.word	0xfffffedf

080036a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	1dfb      	adds	r3, r7, #7
 80036b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b4:	e04b      	b.n	800374e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	3301      	adds	r3, #1
 80036ba:	d048      	beq.n	800374e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036bc:	f7fd fae2 	bl	8000c84 <HAL_GetTick>
 80036c0:	0002      	movs	r2, r0
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d302      	bcc.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e04b      	b.n	800376e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2204      	movs	r2, #4
 80036de:	4013      	ands	r3, r2
 80036e0:	d035      	beq.n	800374e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	2208      	movs	r2, #8
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d111      	bne.n	8003714 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2208      	movs	r2, #8
 80036f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	0018      	movs	r0, r3
 80036fc:	f000 f83c 	bl	8003778 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2284      	movs	r2, #132	; 0x84
 8003704:	2108      	movs	r1, #8
 8003706:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2278      	movs	r2, #120	; 0x78
 800370c:	2100      	movs	r1, #0
 800370e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e02c      	b.n	800376e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69da      	ldr	r2, [r3, #28]
 800371a:	2380      	movs	r3, #128	; 0x80
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	401a      	ands	r2, r3
 8003720:	2380      	movs	r3, #128	; 0x80
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	429a      	cmp	r2, r3
 8003726:	d112      	bne.n	800374e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2280      	movs	r2, #128	; 0x80
 800372e:	0112      	lsls	r2, r2, #4
 8003730:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	0018      	movs	r0, r3
 8003736:	f000 f81f 	bl	8003778 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2284      	movs	r2, #132	; 0x84
 800373e:	2120      	movs	r1, #32
 8003740:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2278      	movs	r2, #120	; 0x78
 8003746:	2100      	movs	r1, #0
 8003748:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e00f      	b.n	800376e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	4013      	ands	r3, r2
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	425a      	negs	r2, r3
 800375e:	4153      	adcs	r3, r2
 8003760:	b2db      	uxtb	r3, r3
 8003762:	001a      	movs	r2, r3
 8003764:	1dfb      	adds	r3, r7, #7
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d0a4      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	0018      	movs	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	b004      	add	sp, #16
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08e      	sub	sp, #56	; 0x38
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003780:	f3ef 8310 	mrs	r3, PRIMASK
 8003784:	617b      	str	r3, [r7, #20]
  return(result);
 8003786:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003788:	637b      	str	r3, [r7, #52]	; 0x34
 800378a:	2301      	movs	r3, #1
 800378c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	f383 8810 	msr	PRIMASK, r3
}
 8003794:	46c0      	nop			; (mov r8, r8)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4926      	ldr	r1, [pc, #152]	; (800383c <UART_EndRxTransfer+0xc4>)
 80037a2:	400a      	ands	r2, r1
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f383 8810 	msr	PRIMASK, r3
}
 80037b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b2:	f3ef 8310 	mrs	r3, PRIMASK
 80037b6:	623b      	str	r3, [r7, #32]
  return(result);
 80037b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ba:	633b      	str	r3, [r7, #48]	; 0x30
 80037bc:	2301      	movs	r3, #1
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	f383 8810 	msr	PRIMASK, r3
}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2101      	movs	r1, #1
 80037d4:	438a      	bics	r2, r1
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	f383 8810 	msr	PRIMASK, r3
}
 80037e2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d118      	bne.n	800381e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ec:	f3ef 8310 	mrs	r3, PRIMASK
 80037f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80037f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f6:	2301      	movs	r3, #1
 80037f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f383 8810 	msr	PRIMASK, r3
}
 8003800:	46c0      	nop			; (mov r8, r8)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2110      	movs	r1, #16
 800380e:	438a      	bics	r2, r1
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f383 8810 	msr	PRIMASK, r3
}
 800381c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2280      	movs	r2, #128	; 0x80
 8003822:	2120      	movs	r1, #32
 8003824:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	46bd      	mov	sp, r7
 8003836:	b00e      	add	sp, #56	; 0x38
 8003838:	bd80      	pop	{r7, pc}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	fffffedf 	.word	0xfffffedf

08003840 <std>:
 8003840:	2300      	movs	r3, #0
 8003842:	b510      	push	{r4, lr}
 8003844:	0004      	movs	r4, r0
 8003846:	6003      	str	r3, [r0, #0]
 8003848:	6043      	str	r3, [r0, #4]
 800384a:	6083      	str	r3, [r0, #8]
 800384c:	8181      	strh	r1, [r0, #12]
 800384e:	6643      	str	r3, [r0, #100]	; 0x64
 8003850:	81c2      	strh	r2, [r0, #14]
 8003852:	6103      	str	r3, [r0, #16]
 8003854:	6143      	str	r3, [r0, #20]
 8003856:	6183      	str	r3, [r0, #24]
 8003858:	0019      	movs	r1, r3
 800385a:	2208      	movs	r2, #8
 800385c:	305c      	adds	r0, #92	; 0x5c
 800385e:	f000 fa25 	bl	8003cac <memset>
 8003862:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <std+0x50>)
 8003864:	6224      	str	r4, [r4, #32]
 8003866:	6263      	str	r3, [r4, #36]	; 0x24
 8003868:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <std+0x54>)
 800386a:	62a3      	str	r3, [r4, #40]	; 0x28
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <std+0x58>)
 800386e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003870:	4b0a      	ldr	r3, [pc, #40]	; (800389c <std+0x5c>)
 8003872:	6323      	str	r3, [r4, #48]	; 0x30
 8003874:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <std+0x60>)
 8003876:	429c      	cmp	r4, r3
 8003878:	d005      	beq.n	8003886 <std+0x46>
 800387a:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <std+0x64>)
 800387c:	429c      	cmp	r4, r3
 800387e:	d002      	beq.n	8003886 <std+0x46>
 8003880:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <std+0x68>)
 8003882:	429c      	cmp	r4, r3
 8003884:	d103      	bne.n	800388e <std+0x4e>
 8003886:	0020      	movs	r0, r4
 8003888:	3058      	adds	r0, #88	; 0x58
 800388a:	f000 fa8f 	bl	8003dac <__retarget_lock_init_recursive>
 800388e:	bd10      	pop	{r4, pc}
 8003890:	08003ac9 	.word	0x08003ac9
 8003894:	08003af1 	.word	0x08003af1
 8003898:	08003b29 	.word	0x08003b29
 800389c:	08003b55 	.word	0x08003b55
 80038a0:	20000178 	.word	0x20000178
 80038a4:	200001e0 	.word	0x200001e0
 80038a8:	20000248 	.word	0x20000248

080038ac <stdio_exit_handler>:
 80038ac:	b510      	push	{r4, lr}
 80038ae:	4a03      	ldr	r2, [pc, #12]	; (80038bc <stdio_exit_handler+0x10>)
 80038b0:	4903      	ldr	r1, [pc, #12]	; (80038c0 <stdio_exit_handler+0x14>)
 80038b2:	4804      	ldr	r0, [pc, #16]	; (80038c4 <stdio_exit_handler+0x18>)
 80038b4:	f000 f86c 	bl	8003990 <_fwalk_sglue>
 80038b8:	bd10      	pop	{r4, pc}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	2000000c 	.word	0x2000000c
 80038c0:	08004689 	.word	0x08004689
 80038c4:	20000018 	.word	0x20000018

080038c8 <cleanup_stdio>:
 80038c8:	6841      	ldr	r1, [r0, #4]
 80038ca:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <cleanup_stdio+0x30>)
 80038cc:	b510      	push	{r4, lr}
 80038ce:	0004      	movs	r4, r0
 80038d0:	4299      	cmp	r1, r3
 80038d2:	d001      	beq.n	80038d8 <cleanup_stdio+0x10>
 80038d4:	f000 fed8 	bl	8004688 <_fflush_r>
 80038d8:	68a1      	ldr	r1, [r4, #8]
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <cleanup_stdio+0x34>)
 80038dc:	4299      	cmp	r1, r3
 80038de:	d002      	beq.n	80038e6 <cleanup_stdio+0x1e>
 80038e0:	0020      	movs	r0, r4
 80038e2:	f000 fed1 	bl	8004688 <_fflush_r>
 80038e6:	68e1      	ldr	r1, [r4, #12]
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <cleanup_stdio+0x38>)
 80038ea:	4299      	cmp	r1, r3
 80038ec:	d002      	beq.n	80038f4 <cleanup_stdio+0x2c>
 80038ee:	0020      	movs	r0, r4
 80038f0:	f000 feca 	bl	8004688 <_fflush_r>
 80038f4:	bd10      	pop	{r4, pc}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	20000178 	.word	0x20000178
 80038fc:	200001e0 	.word	0x200001e0
 8003900:	20000248 	.word	0x20000248

08003904 <global_stdio_init.part.0>:
 8003904:	b510      	push	{r4, lr}
 8003906:	4b09      	ldr	r3, [pc, #36]	; (800392c <global_stdio_init.part.0+0x28>)
 8003908:	4a09      	ldr	r2, [pc, #36]	; (8003930 <global_stdio_init.part.0+0x2c>)
 800390a:	2104      	movs	r1, #4
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	4809      	ldr	r0, [pc, #36]	; (8003934 <global_stdio_init.part.0+0x30>)
 8003910:	2200      	movs	r2, #0
 8003912:	f7ff ff95 	bl	8003840 <std>
 8003916:	2201      	movs	r2, #1
 8003918:	2109      	movs	r1, #9
 800391a:	4807      	ldr	r0, [pc, #28]	; (8003938 <global_stdio_init.part.0+0x34>)
 800391c:	f7ff ff90 	bl	8003840 <std>
 8003920:	2202      	movs	r2, #2
 8003922:	2112      	movs	r1, #18
 8003924:	4805      	ldr	r0, [pc, #20]	; (800393c <global_stdio_init.part.0+0x38>)
 8003926:	f7ff ff8b 	bl	8003840 <std>
 800392a:	bd10      	pop	{r4, pc}
 800392c:	200002b0 	.word	0x200002b0
 8003930:	080038ad 	.word	0x080038ad
 8003934:	20000178 	.word	0x20000178
 8003938:	200001e0 	.word	0x200001e0
 800393c:	20000248 	.word	0x20000248

08003940 <__sfp_lock_acquire>:
 8003940:	b510      	push	{r4, lr}
 8003942:	4802      	ldr	r0, [pc, #8]	; (800394c <__sfp_lock_acquire+0xc>)
 8003944:	f000 fa33 	bl	8003dae <__retarget_lock_acquire_recursive>
 8003948:	bd10      	pop	{r4, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	200002b9 	.word	0x200002b9

08003950 <__sfp_lock_release>:
 8003950:	b510      	push	{r4, lr}
 8003952:	4802      	ldr	r0, [pc, #8]	; (800395c <__sfp_lock_release+0xc>)
 8003954:	f000 fa2c 	bl	8003db0 <__retarget_lock_release_recursive>
 8003958:	bd10      	pop	{r4, pc}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	200002b9 	.word	0x200002b9

08003960 <__sinit>:
 8003960:	b510      	push	{r4, lr}
 8003962:	0004      	movs	r4, r0
 8003964:	f7ff ffec 	bl	8003940 <__sfp_lock_acquire>
 8003968:	6a23      	ldr	r3, [r4, #32]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <__sinit+0x14>
 800396e:	f7ff ffef 	bl	8003950 <__sfp_lock_release>
 8003972:	bd10      	pop	{r4, pc}
 8003974:	4b04      	ldr	r3, [pc, #16]	; (8003988 <__sinit+0x28>)
 8003976:	6223      	str	r3, [r4, #32]
 8003978:	4b04      	ldr	r3, [pc, #16]	; (800398c <__sinit+0x2c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f6      	bne.n	800396e <__sinit+0xe>
 8003980:	f7ff ffc0 	bl	8003904 <global_stdio_init.part.0>
 8003984:	e7f3      	b.n	800396e <__sinit+0xe>
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	080038c9 	.word	0x080038c9
 800398c:	200002b0 	.word	0x200002b0

08003990 <_fwalk_sglue>:
 8003990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003992:	0014      	movs	r4, r2
 8003994:	2600      	movs	r6, #0
 8003996:	9000      	str	r0, [sp, #0]
 8003998:	9101      	str	r1, [sp, #4]
 800399a:	68a5      	ldr	r5, [r4, #8]
 800399c:	6867      	ldr	r7, [r4, #4]
 800399e:	3f01      	subs	r7, #1
 80039a0:	d504      	bpl.n	80039ac <_fwalk_sglue+0x1c>
 80039a2:	6824      	ldr	r4, [r4, #0]
 80039a4:	2c00      	cmp	r4, #0
 80039a6:	d1f8      	bne.n	800399a <_fwalk_sglue+0xa>
 80039a8:	0030      	movs	r0, r6
 80039aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039ac:	89ab      	ldrh	r3, [r5, #12]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d908      	bls.n	80039c4 <_fwalk_sglue+0x34>
 80039b2:	220e      	movs	r2, #14
 80039b4:	5eab      	ldrsh	r3, [r5, r2]
 80039b6:	3301      	adds	r3, #1
 80039b8:	d004      	beq.n	80039c4 <_fwalk_sglue+0x34>
 80039ba:	0029      	movs	r1, r5
 80039bc:	9800      	ldr	r0, [sp, #0]
 80039be:	9b01      	ldr	r3, [sp, #4]
 80039c0:	4798      	blx	r3
 80039c2:	4306      	orrs	r6, r0
 80039c4:	3568      	adds	r5, #104	; 0x68
 80039c6:	e7ea      	b.n	800399e <_fwalk_sglue+0xe>

080039c8 <_puts_r>:
 80039c8:	6a03      	ldr	r3, [r0, #32]
 80039ca:	b570      	push	{r4, r5, r6, lr}
 80039cc:	0005      	movs	r5, r0
 80039ce:	000e      	movs	r6, r1
 80039d0:	6884      	ldr	r4, [r0, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <_puts_r+0x12>
 80039d6:	f7ff ffc3 	bl	8003960 <__sinit>
 80039da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039dc:	07db      	lsls	r3, r3, #31
 80039de:	d405      	bmi.n	80039ec <_puts_r+0x24>
 80039e0:	89a3      	ldrh	r3, [r4, #12]
 80039e2:	059b      	lsls	r3, r3, #22
 80039e4:	d402      	bmi.n	80039ec <_puts_r+0x24>
 80039e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039e8:	f000 f9e1 	bl	8003dae <__retarget_lock_acquire_recursive>
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	071b      	lsls	r3, r3, #28
 80039f0:	d502      	bpl.n	80039f8 <_puts_r+0x30>
 80039f2:	6923      	ldr	r3, [r4, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d11f      	bne.n	8003a38 <_puts_r+0x70>
 80039f8:	0021      	movs	r1, r4
 80039fa:	0028      	movs	r0, r5
 80039fc:	f000 f8f2 	bl	8003be4 <__swsetup_r>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	d019      	beq.n	8003a38 <_puts_r+0x70>
 8003a04:	2501      	movs	r5, #1
 8003a06:	426d      	negs	r5, r5
 8003a08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a0a:	07db      	lsls	r3, r3, #31
 8003a0c:	d405      	bmi.n	8003a1a <_puts_r+0x52>
 8003a0e:	89a3      	ldrh	r3, [r4, #12]
 8003a10:	059b      	lsls	r3, r3, #22
 8003a12:	d402      	bmi.n	8003a1a <_puts_r+0x52>
 8003a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a16:	f000 f9cb 	bl	8003db0 <__retarget_lock_release_recursive>
 8003a1a:	0028      	movs	r0, r5
 8003a1c:	bd70      	pop	{r4, r5, r6, pc}
 8003a1e:	3601      	adds	r6, #1
 8003a20:	60a3      	str	r3, [r4, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	da04      	bge.n	8003a30 <_puts_r+0x68>
 8003a26:	69a2      	ldr	r2, [r4, #24]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	dc16      	bgt.n	8003a5a <_puts_r+0x92>
 8003a2c:	290a      	cmp	r1, #10
 8003a2e:	d014      	beq.n	8003a5a <_puts_r+0x92>
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	6022      	str	r2, [r4, #0]
 8003a36:	7019      	strb	r1, [r3, #0]
 8003a38:	68a3      	ldr	r3, [r4, #8]
 8003a3a:	7831      	ldrb	r1, [r6, #0]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	2900      	cmp	r1, #0
 8003a40:	d1ed      	bne.n	8003a1e <_puts_r+0x56>
 8003a42:	60a3      	str	r3, [r4, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	da0f      	bge.n	8003a68 <_puts_r+0xa0>
 8003a48:	0028      	movs	r0, r5
 8003a4a:	0022      	movs	r2, r4
 8003a4c:	310a      	adds	r1, #10
 8003a4e:	f000 f887 	bl	8003b60 <__swbuf_r>
 8003a52:	250a      	movs	r5, #10
 8003a54:	3001      	adds	r0, #1
 8003a56:	d1d7      	bne.n	8003a08 <_puts_r+0x40>
 8003a58:	e7d4      	b.n	8003a04 <_puts_r+0x3c>
 8003a5a:	0022      	movs	r2, r4
 8003a5c:	0028      	movs	r0, r5
 8003a5e:	f000 f87f 	bl	8003b60 <__swbuf_r>
 8003a62:	3001      	adds	r0, #1
 8003a64:	d1e8      	bne.n	8003a38 <_puts_r+0x70>
 8003a66:	e7cd      	b.n	8003a04 <_puts_r+0x3c>
 8003a68:	250a      	movs	r5, #10
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	6022      	str	r2, [r4, #0]
 8003a70:	701d      	strb	r5, [r3, #0]
 8003a72:	e7c9      	b.n	8003a08 <_puts_r+0x40>

08003a74 <puts>:
 8003a74:	b510      	push	{r4, lr}
 8003a76:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <puts+0x10>)
 8003a78:	0001      	movs	r1, r0
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	f7ff ffa4 	bl	80039c8 <_puts_r>
 8003a80:	bd10      	pop	{r4, pc}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	20000064 	.word	0x20000064

08003a88 <siprintf>:
 8003a88:	b40e      	push	{r1, r2, r3}
 8003a8a:	b500      	push	{lr}
 8003a8c:	490b      	ldr	r1, [pc, #44]	; (8003abc <siprintf+0x34>)
 8003a8e:	b09c      	sub	sp, #112	; 0x70
 8003a90:	ab1d      	add	r3, sp, #116	; 0x74
 8003a92:	9002      	str	r0, [sp, #8]
 8003a94:	9006      	str	r0, [sp, #24]
 8003a96:	9107      	str	r1, [sp, #28]
 8003a98:	9104      	str	r1, [sp, #16]
 8003a9a:	4809      	ldr	r0, [pc, #36]	; (8003ac0 <siprintf+0x38>)
 8003a9c:	4909      	ldr	r1, [pc, #36]	; (8003ac4 <siprintf+0x3c>)
 8003a9e:	cb04      	ldmia	r3!, {r2}
 8003aa0:	9105      	str	r1, [sp, #20]
 8003aa2:	6800      	ldr	r0, [r0, #0]
 8003aa4:	a902      	add	r1, sp, #8
 8003aa6:	9301      	str	r3, [sp, #4]
 8003aa8:	f000 fae4 	bl	8004074 <_svfiprintf_r>
 8003aac:	2200      	movs	r2, #0
 8003aae:	9b02      	ldr	r3, [sp, #8]
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	b01c      	add	sp, #112	; 0x70
 8003ab4:	bc08      	pop	{r3}
 8003ab6:	b003      	add	sp, #12
 8003ab8:	4718      	bx	r3
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	7fffffff 	.word	0x7fffffff
 8003ac0:	20000064 	.word	0x20000064
 8003ac4:	ffff0208 	.word	0xffff0208

08003ac8 <__sread>:
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	000c      	movs	r4, r1
 8003acc:	250e      	movs	r5, #14
 8003ace:	5f49      	ldrsh	r1, [r1, r5]
 8003ad0:	f000 f91a 	bl	8003d08 <_read_r>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	db03      	blt.n	8003ae0 <__sread+0x18>
 8003ad8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ada:	181b      	adds	r3, r3, r0
 8003adc:	6563      	str	r3, [r4, #84]	; 0x54
 8003ade:	bd70      	pop	{r4, r5, r6, pc}
 8003ae0:	89a3      	ldrh	r3, [r4, #12]
 8003ae2:	4a02      	ldr	r2, [pc, #8]	; (8003aec <__sread+0x24>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	81a3      	strh	r3, [r4, #12]
 8003ae8:	e7f9      	b.n	8003ade <__sread+0x16>
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	ffffefff 	.word	0xffffefff

08003af0 <__swrite>:
 8003af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af2:	001f      	movs	r7, r3
 8003af4:	898b      	ldrh	r3, [r1, #12]
 8003af6:	0005      	movs	r5, r0
 8003af8:	000c      	movs	r4, r1
 8003afa:	0016      	movs	r6, r2
 8003afc:	05db      	lsls	r3, r3, #23
 8003afe:	d505      	bpl.n	8003b0c <__swrite+0x1c>
 8003b00:	230e      	movs	r3, #14
 8003b02:	5ec9      	ldrsh	r1, [r1, r3]
 8003b04:	2200      	movs	r2, #0
 8003b06:	2302      	movs	r3, #2
 8003b08:	f000 f8ea 	bl	8003ce0 <_lseek_r>
 8003b0c:	89a3      	ldrh	r3, [r4, #12]
 8003b0e:	4a05      	ldr	r2, [pc, #20]	; (8003b24 <__swrite+0x34>)
 8003b10:	0028      	movs	r0, r5
 8003b12:	4013      	ands	r3, r2
 8003b14:	81a3      	strh	r3, [r4, #12]
 8003b16:	0032      	movs	r2, r6
 8003b18:	230e      	movs	r3, #14
 8003b1a:	5ee1      	ldrsh	r1, [r4, r3]
 8003b1c:	003b      	movs	r3, r7
 8003b1e:	f000 f907 	bl	8003d30 <_write_r>
 8003b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b24:	ffffefff 	.word	0xffffefff

08003b28 <__sseek>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	000c      	movs	r4, r1
 8003b2c:	250e      	movs	r5, #14
 8003b2e:	5f49      	ldrsh	r1, [r1, r5]
 8003b30:	f000 f8d6 	bl	8003ce0 <_lseek_r>
 8003b34:	89a3      	ldrh	r3, [r4, #12]
 8003b36:	1c42      	adds	r2, r0, #1
 8003b38:	d103      	bne.n	8003b42 <__sseek+0x1a>
 8003b3a:	4a05      	ldr	r2, [pc, #20]	; (8003b50 <__sseek+0x28>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	81a3      	strh	r3, [r4, #12]
 8003b40:	bd70      	pop	{r4, r5, r6, pc}
 8003b42:	2280      	movs	r2, #128	; 0x80
 8003b44:	0152      	lsls	r2, r2, #5
 8003b46:	4313      	orrs	r3, r2
 8003b48:	81a3      	strh	r3, [r4, #12]
 8003b4a:	6560      	str	r0, [r4, #84]	; 0x54
 8003b4c:	e7f8      	b.n	8003b40 <__sseek+0x18>
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	ffffefff 	.word	0xffffefff

08003b54 <__sclose>:
 8003b54:	b510      	push	{r4, lr}
 8003b56:	230e      	movs	r3, #14
 8003b58:	5ec9      	ldrsh	r1, [r1, r3]
 8003b5a:	f000 f8af 	bl	8003cbc <_close_r>
 8003b5e:	bd10      	pop	{r4, pc}

08003b60 <__swbuf_r>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	0006      	movs	r6, r0
 8003b64:	000d      	movs	r5, r1
 8003b66:	0014      	movs	r4, r2
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	d004      	beq.n	8003b76 <__swbuf_r+0x16>
 8003b6c:	6a03      	ldr	r3, [r0, #32]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <__swbuf_r+0x16>
 8003b72:	f7ff fef5 	bl	8003960 <__sinit>
 8003b76:	69a3      	ldr	r3, [r4, #24]
 8003b78:	60a3      	str	r3, [r4, #8]
 8003b7a:	89a3      	ldrh	r3, [r4, #12]
 8003b7c:	071b      	lsls	r3, r3, #28
 8003b7e:	d528      	bpl.n	8003bd2 <__swbuf_r+0x72>
 8003b80:	6923      	ldr	r3, [r4, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d025      	beq.n	8003bd2 <__swbuf_r+0x72>
 8003b86:	6923      	ldr	r3, [r4, #16]
 8003b88:	6820      	ldr	r0, [r4, #0]
 8003b8a:	b2ef      	uxtb	r7, r5
 8003b8c:	1ac0      	subs	r0, r0, r3
 8003b8e:	6963      	ldr	r3, [r4, #20]
 8003b90:	b2ed      	uxtb	r5, r5
 8003b92:	4283      	cmp	r3, r0
 8003b94:	dc05      	bgt.n	8003ba2 <__swbuf_r+0x42>
 8003b96:	0021      	movs	r1, r4
 8003b98:	0030      	movs	r0, r6
 8003b9a:	f000 fd75 	bl	8004688 <_fflush_r>
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	d11d      	bne.n	8003bde <__swbuf_r+0x7e>
 8003ba2:	68a3      	ldr	r3, [r4, #8]
 8003ba4:	3001      	adds	r0, #1
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	60a3      	str	r3, [r4, #8]
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	6022      	str	r2, [r4, #0]
 8003bb0:	701f      	strb	r7, [r3, #0]
 8003bb2:	6963      	ldr	r3, [r4, #20]
 8003bb4:	4283      	cmp	r3, r0
 8003bb6:	d004      	beq.n	8003bc2 <__swbuf_r+0x62>
 8003bb8:	89a3      	ldrh	r3, [r4, #12]
 8003bba:	07db      	lsls	r3, r3, #31
 8003bbc:	d507      	bpl.n	8003bce <__swbuf_r+0x6e>
 8003bbe:	2d0a      	cmp	r5, #10
 8003bc0:	d105      	bne.n	8003bce <__swbuf_r+0x6e>
 8003bc2:	0021      	movs	r1, r4
 8003bc4:	0030      	movs	r0, r6
 8003bc6:	f000 fd5f 	bl	8004688 <_fflush_r>
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	d107      	bne.n	8003bde <__swbuf_r+0x7e>
 8003bce:	0028      	movs	r0, r5
 8003bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bd2:	0021      	movs	r1, r4
 8003bd4:	0030      	movs	r0, r6
 8003bd6:	f000 f805 	bl	8003be4 <__swsetup_r>
 8003bda:	2800      	cmp	r0, #0
 8003bdc:	d0d3      	beq.n	8003b86 <__swbuf_r+0x26>
 8003bde:	2501      	movs	r5, #1
 8003be0:	426d      	negs	r5, r5
 8003be2:	e7f4      	b.n	8003bce <__swbuf_r+0x6e>

08003be4 <__swsetup_r>:
 8003be4:	4b30      	ldr	r3, [pc, #192]	; (8003ca8 <__swsetup_r+0xc4>)
 8003be6:	b570      	push	{r4, r5, r6, lr}
 8003be8:	0005      	movs	r5, r0
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	000c      	movs	r4, r1
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	d004      	beq.n	8003bfc <__swsetup_r+0x18>
 8003bf2:	6a03      	ldr	r3, [r0, #32]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <__swsetup_r+0x18>
 8003bf8:	f7ff feb2 	bl	8003960 <__sinit>
 8003bfc:	230c      	movs	r3, #12
 8003bfe:	5ee2      	ldrsh	r2, [r4, r3]
 8003c00:	b293      	uxth	r3, r2
 8003c02:	0711      	lsls	r1, r2, #28
 8003c04:	d423      	bmi.n	8003c4e <__swsetup_r+0x6a>
 8003c06:	06d9      	lsls	r1, r3, #27
 8003c08:	d407      	bmi.n	8003c1a <__swsetup_r+0x36>
 8003c0a:	2309      	movs	r3, #9
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	602b      	str	r3, [r5, #0]
 8003c10:	3337      	adds	r3, #55	; 0x37
 8003c12:	4313      	orrs	r3, r2
 8003c14:	81a3      	strh	r3, [r4, #12]
 8003c16:	4240      	negs	r0, r0
 8003c18:	bd70      	pop	{r4, r5, r6, pc}
 8003c1a:	075b      	lsls	r3, r3, #29
 8003c1c:	d513      	bpl.n	8003c46 <__swsetup_r+0x62>
 8003c1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c20:	2900      	cmp	r1, #0
 8003c22:	d008      	beq.n	8003c36 <__swsetup_r+0x52>
 8003c24:	0023      	movs	r3, r4
 8003c26:	3344      	adds	r3, #68	; 0x44
 8003c28:	4299      	cmp	r1, r3
 8003c2a:	d002      	beq.n	8003c32 <__swsetup_r+0x4e>
 8003c2c:	0028      	movs	r0, r5
 8003c2e:	f000 f8c1 	bl	8003db4 <_free_r>
 8003c32:	2300      	movs	r3, #0
 8003c34:	6363      	str	r3, [r4, #52]	; 0x34
 8003c36:	2224      	movs	r2, #36	; 0x24
 8003c38:	89a3      	ldrh	r3, [r4, #12]
 8003c3a:	4393      	bics	r3, r2
 8003c3c:	81a3      	strh	r3, [r4, #12]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	6063      	str	r3, [r4, #4]
 8003c42:	6923      	ldr	r3, [r4, #16]
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	2308      	movs	r3, #8
 8003c48:	89a2      	ldrh	r2, [r4, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	81a3      	strh	r3, [r4, #12]
 8003c4e:	6923      	ldr	r3, [r4, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10b      	bne.n	8003c6c <__swsetup_r+0x88>
 8003c54:	21a0      	movs	r1, #160	; 0xa0
 8003c56:	2280      	movs	r2, #128	; 0x80
 8003c58:	89a3      	ldrh	r3, [r4, #12]
 8003c5a:	0089      	lsls	r1, r1, #2
 8003c5c:	0092      	lsls	r2, r2, #2
 8003c5e:	400b      	ands	r3, r1
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d003      	beq.n	8003c6c <__swsetup_r+0x88>
 8003c64:	0021      	movs	r1, r4
 8003c66:	0028      	movs	r0, r5
 8003c68:	f000 fd62 	bl	8004730 <__smakebuf_r>
 8003c6c:	220c      	movs	r2, #12
 8003c6e:	5ea3      	ldrsh	r3, [r4, r2]
 8003c70:	2001      	movs	r0, #1
 8003c72:	001a      	movs	r2, r3
 8003c74:	b299      	uxth	r1, r3
 8003c76:	4002      	ands	r2, r0
 8003c78:	4203      	tst	r3, r0
 8003c7a:	d00f      	beq.n	8003c9c <__swsetup_r+0xb8>
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	60a2      	str	r2, [r4, #8]
 8003c80:	6962      	ldr	r2, [r4, #20]
 8003c82:	4252      	negs	r2, r2
 8003c84:	61a2      	str	r2, [r4, #24]
 8003c86:	2000      	movs	r0, #0
 8003c88:	6922      	ldr	r2, [r4, #16]
 8003c8a:	4282      	cmp	r2, r0
 8003c8c:	d1c4      	bne.n	8003c18 <__swsetup_r+0x34>
 8003c8e:	0609      	lsls	r1, r1, #24
 8003c90:	d5c2      	bpl.n	8003c18 <__swsetup_r+0x34>
 8003c92:	2240      	movs	r2, #64	; 0x40
 8003c94:	4313      	orrs	r3, r2
 8003c96:	81a3      	strh	r3, [r4, #12]
 8003c98:	3801      	subs	r0, #1
 8003c9a:	e7bd      	b.n	8003c18 <__swsetup_r+0x34>
 8003c9c:	0788      	lsls	r0, r1, #30
 8003c9e:	d400      	bmi.n	8003ca2 <__swsetup_r+0xbe>
 8003ca0:	6962      	ldr	r2, [r4, #20]
 8003ca2:	60a2      	str	r2, [r4, #8]
 8003ca4:	e7ef      	b.n	8003c86 <__swsetup_r+0xa2>
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	20000064 	.word	0x20000064

08003cac <memset>:
 8003cac:	0003      	movs	r3, r0
 8003cae:	1882      	adds	r2, r0, r2
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d100      	bne.n	8003cb6 <memset+0xa>
 8003cb4:	4770      	bx	lr
 8003cb6:	7019      	strb	r1, [r3, #0]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	e7f9      	b.n	8003cb0 <memset+0x4>

08003cbc <_close_r>:
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	b570      	push	{r4, r5, r6, lr}
 8003cc0:	4d06      	ldr	r5, [pc, #24]	; (8003cdc <_close_r+0x20>)
 8003cc2:	0004      	movs	r4, r0
 8003cc4:	0008      	movs	r0, r1
 8003cc6:	602b      	str	r3, [r5, #0]
 8003cc8:	f7fc fee4 	bl	8000a94 <_close>
 8003ccc:	1c43      	adds	r3, r0, #1
 8003cce:	d103      	bne.n	8003cd8 <_close_r+0x1c>
 8003cd0:	682b      	ldr	r3, [r5, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d000      	beq.n	8003cd8 <_close_r+0x1c>
 8003cd6:	6023      	str	r3, [r4, #0]
 8003cd8:	bd70      	pop	{r4, r5, r6, pc}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	200002b4 	.word	0x200002b4

08003ce0 <_lseek_r>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	0004      	movs	r4, r0
 8003ce4:	0008      	movs	r0, r1
 8003ce6:	0011      	movs	r1, r2
 8003ce8:	001a      	movs	r2, r3
 8003cea:	2300      	movs	r3, #0
 8003cec:	4d05      	ldr	r5, [pc, #20]	; (8003d04 <_lseek_r+0x24>)
 8003cee:	602b      	str	r3, [r5, #0]
 8003cf0:	f7fc fef1 	bl	8000ad6 <_lseek>
 8003cf4:	1c43      	adds	r3, r0, #1
 8003cf6:	d103      	bne.n	8003d00 <_lseek_r+0x20>
 8003cf8:	682b      	ldr	r3, [r5, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d000      	beq.n	8003d00 <_lseek_r+0x20>
 8003cfe:	6023      	str	r3, [r4, #0]
 8003d00:	bd70      	pop	{r4, r5, r6, pc}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	200002b4 	.word	0x200002b4

08003d08 <_read_r>:
 8003d08:	b570      	push	{r4, r5, r6, lr}
 8003d0a:	0004      	movs	r4, r0
 8003d0c:	0008      	movs	r0, r1
 8003d0e:	0011      	movs	r1, r2
 8003d10:	001a      	movs	r2, r3
 8003d12:	2300      	movs	r3, #0
 8003d14:	4d05      	ldr	r5, [pc, #20]	; (8003d2c <_read_r+0x24>)
 8003d16:	602b      	str	r3, [r5, #0]
 8003d18:	f7fc fe88 	bl	8000a2c <_read>
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	d103      	bne.n	8003d28 <_read_r+0x20>
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d000      	beq.n	8003d28 <_read_r+0x20>
 8003d26:	6023      	str	r3, [r4, #0]
 8003d28:	bd70      	pop	{r4, r5, r6, pc}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	200002b4 	.word	0x200002b4

08003d30 <_write_r>:
 8003d30:	b570      	push	{r4, r5, r6, lr}
 8003d32:	0004      	movs	r4, r0
 8003d34:	0008      	movs	r0, r1
 8003d36:	0011      	movs	r1, r2
 8003d38:	001a      	movs	r2, r3
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	4d05      	ldr	r5, [pc, #20]	; (8003d54 <_write_r+0x24>)
 8003d3e:	602b      	str	r3, [r5, #0]
 8003d40:	f7fc fe92 	bl	8000a68 <_write>
 8003d44:	1c43      	adds	r3, r0, #1
 8003d46:	d103      	bne.n	8003d50 <_write_r+0x20>
 8003d48:	682b      	ldr	r3, [r5, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d000      	beq.n	8003d50 <_write_r+0x20>
 8003d4e:	6023      	str	r3, [r4, #0]
 8003d50:	bd70      	pop	{r4, r5, r6, pc}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	200002b4 	.word	0x200002b4

08003d58 <__errno>:
 8003d58:	4b01      	ldr	r3, [pc, #4]	; (8003d60 <__errno+0x8>)
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	4770      	bx	lr
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	20000064 	.word	0x20000064

08003d64 <__libc_init_array>:
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	2600      	movs	r6, #0
 8003d68:	4c0c      	ldr	r4, [pc, #48]	; (8003d9c <__libc_init_array+0x38>)
 8003d6a:	4d0d      	ldr	r5, [pc, #52]	; (8003da0 <__libc_init_array+0x3c>)
 8003d6c:	1b64      	subs	r4, r4, r5
 8003d6e:	10a4      	asrs	r4, r4, #2
 8003d70:	42a6      	cmp	r6, r4
 8003d72:	d109      	bne.n	8003d88 <__libc_init_array+0x24>
 8003d74:	2600      	movs	r6, #0
 8003d76:	f000 fdaf 	bl	80048d8 <_init>
 8003d7a:	4c0a      	ldr	r4, [pc, #40]	; (8003da4 <__libc_init_array+0x40>)
 8003d7c:	4d0a      	ldr	r5, [pc, #40]	; (8003da8 <__libc_init_array+0x44>)
 8003d7e:	1b64      	subs	r4, r4, r5
 8003d80:	10a4      	asrs	r4, r4, #2
 8003d82:	42a6      	cmp	r6, r4
 8003d84:	d105      	bne.n	8003d92 <__libc_init_array+0x2e>
 8003d86:	bd70      	pop	{r4, r5, r6, pc}
 8003d88:	00b3      	lsls	r3, r6, #2
 8003d8a:	58eb      	ldr	r3, [r5, r3]
 8003d8c:	4798      	blx	r3
 8003d8e:	3601      	adds	r6, #1
 8003d90:	e7ee      	b.n	8003d70 <__libc_init_array+0xc>
 8003d92:	00b3      	lsls	r3, r6, #2
 8003d94:	58eb      	ldr	r3, [r5, r3]
 8003d96:	4798      	blx	r3
 8003d98:	3601      	adds	r6, #1
 8003d9a:	e7f2      	b.n	8003d82 <__libc_init_array+0x1e>
 8003d9c:	080049d4 	.word	0x080049d4
 8003da0:	080049d4 	.word	0x080049d4
 8003da4:	080049d8 	.word	0x080049d8
 8003da8:	080049d4 	.word	0x080049d4

08003dac <__retarget_lock_init_recursive>:
 8003dac:	4770      	bx	lr

08003dae <__retarget_lock_acquire_recursive>:
 8003dae:	4770      	bx	lr

08003db0 <__retarget_lock_release_recursive>:
 8003db0:	4770      	bx	lr
	...

08003db4 <_free_r>:
 8003db4:	b570      	push	{r4, r5, r6, lr}
 8003db6:	0005      	movs	r5, r0
 8003db8:	2900      	cmp	r1, #0
 8003dba:	d010      	beq.n	8003dde <_free_r+0x2a>
 8003dbc:	1f0c      	subs	r4, r1, #4
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	da00      	bge.n	8003dc6 <_free_r+0x12>
 8003dc4:	18e4      	adds	r4, r4, r3
 8003dc6:	0028      	movs	r0, r5
 8003dc8:	f000 f8e2 	bl	8003f90 <__malloc_lock>
 8003dcc:	4a1d      	ldr	r2, [pc, #116]	; (8003e44 <_free_r+0x90>)
 8003dce:	6813      	ldr	r3, [r2, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d105      	bne.n	8003de0 <_free_r+0x2c>
 8003dd4:	6063      	str	r3, [r4, #4]
 8003dd6:	6014      	str	r4, [r2, #0]
 8003dd8:	0028      	movs	r0, r5
 8003dda:	f000 f8e1 	bl	8003fa0 <__malloc_unlock>
 8003dde:	bd70      	pop	{r4, r5, r6, pc}
 8003de0:	42a3      	cmp	r3, r4
 8003de2:	d908      	bls.n	8003df6 <_free_r+0x42>
 8003de4:	6820      	ldr	r0, [r4, #0]
 8003de6:	1821      	adds	r1, r4, r0
 8003de8:	428b      	cmp	r3, r1
 8003dea:	d1f3      	bne.n	8003dd4 <_free_r+0x20>
 8003dec:	6819      	ldr	r1, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	1809      	adds	r1, r1, r0
 8003df2:	6021      	str	r1, [r4, #0]
 8003df4:	e7ee      	b.n	8003dd4 <_free_r+0x20>
 8003df6:	001a      	movs	r2, r3
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <_free_r+0x4e>
 8003dfe:	42a3      	cmp	r3, r4
 8003e00:	d9f9      	bls.n	8003df6 <_free_r+0x42>
 8003e02:	6811      	ldr	r1, [r2, #0]
 8003e04:	1850      	adds	r0, r2, r1
 8003e06:	42a0      	cmp	r0, r4
 8003e08:	d10b      	bne.n	8003e22 <_free_r+0x6e>
 8003e0a:	6820      	ldr	r0, [r4, #0]
 8003e0c:	1809      	adds	r1, r1, r0
 8003e0e:	1850      	adds	r0, r2, r1
 8003e10:	6011      	str	r1, [r2, #0]
 8003e12:	4283      	cmp	r3, r0
 8003e14:	d1e0      	bne.n	8003dd8 <_free_r+0x24>
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	1841      	adds	r1, r0, r1
 8003e1c:	6011      	str	r1, [r2, #0]
 8003e1e:	6053      	str	r3, [r2, #4]
 8003e20:	e7da      	b.n	8003dd8 <_free_r+0x24>
 8003e22:	42a0      	cmp	r0, r4
 8003e24:	d902      	bls.n	8003e2c <_free_r+0x78>
 8003e26:	230c      	movs	r3, #12
 8003e28:	602b      	str	r3, [r5, #0]
 8003e2a:	e7d5      	b.n	8003dd8 <_free_r+0x24>
 8003e2c:	6820      	ldr	r0, [r4, #0]
 8003e2e:	1821      	adds	r1, r4, r0
 8003e30:	428b      	cmp	r3, r1
 8003e32:	d103      	bne.n	8003e3c <_free_r+0x88>
 8003e34:	6819      	ldr	r1, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	1809      	adds	r1, r1, r0
 8003e3a:	6021      	str	r1, [r4, #0]
 8003e3c:	6063      	str	r3, [r4, #4]
 8003e3e:	6054      	str	r4, [r2, #4]
 8003e40:	e7ca      	b.n	8003dd8 <_free_r+0x24>
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	200002bc 	.word	0x200002bc

08003e48 <sbrk_aligned>:
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	4e0f      	ldr	r6, [pc, #60]	; (8003e88 <sbrk_aligned+0x40>)
 8003e4c:	000d      	movs	r5, r1
 8003e4e:	6831      	ldr	r1, [r6, #0]
 8003e50:	0004      	movs	r4, r0
 8003e52:	2900      	cmp	r1, #0
 8003e54:	d102      	bne.n	8003e5c <sbrk_aligned+0x14>
 8003e56:	f000 fce1 	bl	800481c <_sbrk_r>
 8003e5a:	6030      	str	r0, [r6, #0]
 8003e5c:	0029      	movs	r1, r5
 8003e5e:	0020      	movs	r0, r4
 8003e60:	f000 fcdc 	bl	800481c <_sbrk_r>
 8003e64:	1c43      	adds	r3, r0, #1
 8003e66:	d00a      	beq.n	8003e7e <sbrk_aligned+0x36>
 8003e68:	2303      	movs	r3, #3
 8003e6a:	1cc5      	adds	r5, r0, #3
 8003e6c:	439d      	bics	r5, r3
 8003e6e:	42a8      	cmp	r0, r5
 8003e70:	d007      	beq.n	8003e82 <sbrk_aligned+0x3a>
 8003e72:	1a29      	subs	r1, r5, r0
 8003e74:	0020      	movs	r0, r4
 8003e76:	f000 fcd1 	bl	800481c <_sbrk_r>
 8003e7a:	3001      	adds	r0, #1
 8003e7c:	d101      	bne.n	8003e82 <sbrk_aligned+0x3a>
 8003e7e:	2501      	movs	r5, #1
 8003e80:	426d      	negs	r5, r5
 8003e82:	0028      	movs	r0, r5
 8003e84:	bd70      	pop	{r4, r5, r6, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	200002c0 	.word	0x200002c0

08003e8c <_malloc_r>:
 8003e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e8e:	2203      	movs	r2, #3
 8003e90:	1ccb      	adds	r3, r1, #3
 8003e92:	4393      	bics	r3, r2
 8003e94:	3308      	adds	r3, #8
 8003e96:	0006      	movs	r6, r0
 8003e98:	001f      	movs	r7, r3
 8003e9a:	2b0c      	cmp	r3, #12
 8003e9c:	d238      	bcs.n	8003f10 <_malloc_r+0x84>
 8003e9e:	270c      	movs	r7, #12
 8003ea0:	42b9      	cmp	r1, r7
 8003ea2:	d837      	bhi.n	8003f14 <_malloc_r+0x88>
 8003ea4:	0030      	movs	r0, r6
 8003ea6:	f000 f873 	bl	8003f90 <__malloc_lock>
 8003eaa:	4b38      	ldr	r3, [pc, #224]	; (8003f8c <_malloc_r+0x100>)
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	001c      	movs	r4, r3
 8003eb2:	2c00      	cmp	r4, #0
 8003eb4:	d133      	bne.n	8003f1e <_malloc_r+0x92>
 8003eb6:	0039      	movs	r1, r7
 8003eb8:	0030      	movs	r0, r6
 8003eba:	f7ff ffc5 	bl	8003e48 <sbrk_aligned>
 8003ebe:	0004      	movs	r4, r0
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	d15e      	bne.n	8003f82 <_malloc_r+0xf6>
 8003ec4:	9b00      	ldr	r3, [sp, #0]
 8003ec6:	681c      	ldr	r4, [r3, #0]
 8003ec8:	0025      	movs	r5, r4
 8003eca:	2d00      	cmp	r5, #0
 8003ecc:	d14e      	bne.n	8003f6c <_malloc_r+0xe0>
 8003ece:	2c00      	cmp	r4, #0
 8003ed0:	d051      	beq.n	8003f76 <_malloc_r+0xea>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	0029      	movs	r1, r5
 8003ed6:	18e3      	adds	r3, r4, r3
 8003ed8:	0030      	movs	r0, r6
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	f000 fc9e 	bl	800481c <_sbrk_r>
 8003ee0:	9b01      	ldr	r3, [sp, #4]
 8003ee2:	4283      	cmp	r3, r0
 8003ee4:	d147      	bne.n	8003f76 <_malloc_r+0xea>
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	0030      	movs	r0, r6
 8003eea:	1aff      	subs	r7, r7, r3
 8003eec:	0039      	movs	r1, r7
 8003eee:	f7ff ffab 	bl	8003e48 <sbrk_aligned>
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	d03f      	beq.n	8003f76 <_malloc_r+0xea>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	19db      	adds	r3, r3, r7
 8003efa:	6023      	str	r3, [r4, #0]
 8003efc:	9b00      	ldr	r3, [sp, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d040      	beq.n	8003f86 <_malloc_r+0xfa>
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	42a2      	cmp	r2, r4
 8003f08:	d133      	bne.n	8003f72 <_malloc_r+0xe6>
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	e014      	b.n	8003f3a <_malloc_r+0xae>
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	dac5      	bge.n	8003ea0 <_malloc_r+0x14>
 8003f14:	230c      	movs	r3, #12
 8003f16:	2500      	movs	r5, #0
 8003f18:	6033      	str	r3, [r6, #0]
 8003f1a:	0028      	movs	r0, r5
 8003f1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f1e:	6821      	ldr	r1, [r4, #0]
 8003f20:	1bc9      	subs	r1, r1, r7
 8003f22:	d420      	bmi.n	8003f66 <_malloc_r+0xda>
 8003f24:	290b      	cmp	r1, #11
 8003f26:	d918      	bls.n	8003f5a <_malloc_r+0xce>
 8003f28:	19e2      	adds	r2, r4, r7
 8003f2a:	6027      	str	r7, [r4, #0]
 8003f2c:	42a3      	cmp	r3, r4
 8003f2e:	d112      	bne.n	8003f56 <_malloc_r+0xca>
 8003f30:	9b00      	ldr	r3, [sp, #0]
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	6863      	ldr	r3, [r4, #4]
 8003f36:	6011      	str	r1, [r2, #0]
 8003f38:	6053      	str	r3, [r2, #4]
 8003f3a:	0030      	movs	r0, r6
 8003f3c:	0025      	movs	r5, r4
 8003f3e:	f000 f82f 	bl	8003fa0 <__malloc_unlock>
 8003f42:	2207      	movs	r2, #7
 8003f44:	350b      	adds	r5, #11
 8003f46:	1d23      	adds	r3, r4, #4
 8003f48:	4395      	bics	r5, r2
 8003f4a:	1aea      	subs	r2, r5, r3
 8003f4c:	429d      	cmp	r5, r3
 8003f4e:	d0e4      	beq.n	8003f1a <_malloc_r+0x8e>
 8003f50:	1b5b      	subs	r3, r3, r5
 8003f52:	50a3      	str	r3, [r4, r2]
 8003f54:	e7e1      	b.n	8003f1a <_malloc_r+0x8e>
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	e7ec      	b.n	8003f34 <_malloc_r+0xa8>
 8003f5a:	6862      	ldr	r2, [r4, #4]
 8003f5c:	42a3      	cmp	r3, r4
 8003f5e:	d1d5      	bne.n	8003f0c <_malloc_r+0x80>
 8003f60:	9b00      	ldr	r3, [sp, #0]
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	e7e9      	b.n	8003f3a <_malloc_r+0xae>
 8003f66:	0023      	movs	r3, r4
 8003f68:	6864      	ldr	r4, [r4, #4]
 8003f6a:	e7a2      	b.n	8003eb2 <_malloc_r+0x26>
 8003f6c:	002c      	movs	r4, r5
 8003f6e:	686d      	ldr	r5, [r5, #4]
 8003f70:	e7ab      	b.n	8003eca <_malloc_r+0x3e>
 8003f72:	0013      	movs	r3, r2
 8003f74:	e7c4      	b.n	8003f00 <_malloc_r+0x74>
 8003f76:	230c      	movs	r3, #12
 8003f78:	0030      	movs	r0, r6
 8003f7a:	6033      	str	r3, [r6, #0]
 8003f7c:	f000 f810 	bl	8003fa0 <__malloc_unlock>
 8003f80:	e7cb      	b.n	8003f1a <_malloc_r+0x8e>
 8003f82:	6027      	str	r7, [r4, #0]
 8003f84:	e7d9      	b.n	8003f3a <_malloc_r+0xae>
 8003f86:	605b      	str	r3, [r3, #4]
 8003f88:	deff      	udf	#255	; 0xff
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	200002bc 	.word	0x200002bc

08003f90 <__malloc_lock>:
 8003f90:	b510      	push	{r4, lr}
 8003f92:	4802      	ldr	r0, [pc, #8]	; (8003f9c <__malloc_lock+0xc>)
 8003f94:	f7ff ff0b 	bl	8003dae <__retarget_lock_acquire_recursive>
 8003f98:	bd10      	pop	{r4, pc}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	200002b8 	.word	0x200002b8

08003fa0 <__malloc_unlock>:
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	4802      	ldr	r0, [pc, #8]	; (8003fac <__malloc_unlock+0xc>)
 8003fa4:	f7ff ff04 	bl	8003db0 <__retarget_lock_release_recursive>
 8003fa8:	bd10      	pop	{r4, pc}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	200002b8 	.word	0x200002b8

08003fb0 <__ssputs_r>:
 8003fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	9301      	str	r3, [sp, #4]
 8003fb6:	9203      	str	r2, [sp, #12]
 8003fb8:	688e      	ldr	r6, [r1, #8]
 8003fba:	9a01      	ldr	r2, [sp, #4]
 8003fbc:	0007      	movs	r7, r0
 8003fbe:	000c      	movs	r4, r1
 8003fc0:	680b      	ldr	r3, [r1, #0]
 8003fc2:	4296      	cmp	r6, r2
 8003fc4:	d831      	bhi.n	800402a <__ssputs_r+0x7a>
 8003fc6:	898a      	ldrh	r2, [r1, #12]
 8003fc8:	2190      	movs	r1, #144	; 0x90
 8003fca:	00c9      	lsls	r1, r1, #3
 8003fcc:	420a      	tst	r2, r1
 8003fce:	d029      	beq.n	8004024 <__ssputs_r+0x74>
 8003fd0:	2003      	movs	r0, #3
 8003fd2:	6921      	ldr	r1, [r4, #16]
 8003fd4:	1a5b      	subs	r3, r3, r1
 8003fd6:	9302      	str	r3, [sp, #8]
 8003fd8:	6963      	ldr	r3, [r4, #20]
 8003fda:	4343      	muls	r3, r0
 8003fdc:	0fdd      	lsrs	r5, r3, #31
 8003fde:	18ed      	adds	r5, r5, r3
 8003fe0:	9b01      	ldr	r3, [sp, #4]
 8003fe2:	9802      	ldr	r0, [sp, #8]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	181b      	adds	r3, r3, r0
 8003fe8:	106d      	asrs	r5, r5, #1
 8003fea:	42ab      	cmp	r3, r5
 8003fec:	d900      	bls.n	8003ff0 <__ssputs_r+0x40>
 8003fee:	001d      	movs	r5, r3
 8003ff0:	0552      	lsls	r2, r2, #21
 8003ff2:	d529      	bpl.n	8004048 <__ssputs_r+0x98>
 8003ff4:	0029      	movs	r1, r5
 8003ff6:	0038      	movs	r0, r7
 8003ff8:	f7ff ff48 	bl	8003e8c <_malloc_r>
 8003ffc:	1e06      	subs	r6, r0, #0
 8003ffe:	d02d      	beq.n	800405c <__ssputs_r+0xac>
 8004000:	9a02      	ldr	r2, [sp, #8]
 8004002:	6921      	ldr	r1, [r4, #16]
 8004004:	f000 fc27 	bl	8004856 <memcpy>
 8004008:	89a2      	ldrh	r2, [r4, #12]
 800400a:	4b19      	ldr	r3, [pc, #100]	; (8004070 <__ssputs_r+0xc0>)
 800400c:	401a      	ands	r2, r3
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	4313      	orrs	r3, r2
 8004012:	81a3      	strh	r3, [r4, #12]
 8004014:	9b02      	ldr	r3, [sp, #8]
 8004016:	6126      	str	r6, [r4, #16]
 8004018:	18f6      	adds	r6, r6, r3
 800401a:	6026      	str	r6, [r4, #0]
 800401c:	6165      	str	r5, [r4, #20]
 800401e:	9e01      	ldr	r6, [sp, #4]
 8004020:	1aed      	subs	r5, r5, r3
 8004022:	60a5      	str	r5, [r4, #8]
 8004024:	9b01      	ldr	r3, [sp, #4]
 8004026:	429e      	cmp	r6, r3
 8004028:	d900      	bls.n	800402c <__ssputs_r+0x7c>
 800402a:	9e01      	ldr	r6, [sp, #4]
 800402c:	0032      	movs	r2, r6
 800402e:	9903      	ldr	r1, [sp, #12]
 8004030:	6820      	ldr	r0, [r4, #0]
 8004032:	f000 fbbb 	bl	80047ac <memmove>
 8004036:	2000      	movs	r0, #0
 8004038:	68a3      	ldr	r3, [r4, #8]
 800403a:	1b9b      	subs	r3, r3, r6
 800403c:	60a3      	str	r3, [r4, #8]
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	199b      	adds	r3, r3, r6
 8004042:	6023      	str	r3, [r4, #0]
 8004044:	b005      	add	sp, #20
 8004046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004048:	002a      	movs	r2, r5
 800404a:	0038      	movs	r0, r7
 800404c:	f000 fc0c 	bl	8004868 <_realloc_r>
 8004050:	1e06      	subs	r6, r0, #0
 8004052:	d1df      	bne.n	8004014 <__ssputs_r+0x64>
 8004054:	0038      	movs	r0, r7
 8004056:	6921      	ldr	r1, [r4, #16]
 8004058:	f7ff feac 	bl	8003db4 <_free_r>
 800405c:	230c      	movs	r3, #12
 800405e:	2001      	movs	r0, #1
 8004060:	603b      	str	r3, [r7, #0]
 8004062:	89a2      	ldrh	r2, [r4, #12]
 8004064:	3334      	adds	r3, #52	; 0x34
 8004066:	4313      	orrs	r3, r2
 8004068:	81a3      	strh	r3, [r4, #12]
 800406a:	4240      	negs	r0, r0
 800406c:	e7ea      	b.n	8004044 <__ssputs_r+0x94>
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	fffffb7f 	.word	0xfffffb7f

08004074 <_svfiprintf_r>:
 8004074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004076:	b0a1      	sub	sp, #132	; 0x84
 8004078:	9003      	str	r0, [sp, #12]
 800407a:	001d      	movs	r5, r3
 800407c:	898b      	ldrh	r3, [r1, #12]
 800407e:	000f      	movs	r7, r1
 8004080:	0016      	movs	r6, r2
 8004082:	061b      	lsls	r3, r3, #24
 8004084:	d511      	bpl.n	80040aa <_svfiprintf_r+0x36>
 8004086:	690b      	ldr	r3, [r1, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10e      	bne.n	80040aa <_svfiprintf_r+0x36>
 800408c:	2140      	movs	r1, #64	; 0x40
 800408e:	f7ff fefd 	bl	8003e8c <_malloc_r>
 8004092:	6038      	str	r0, [r7, #0]
 8004094:	6138      	str	r0, [r7, #16]
 8004096:	2800      	cmp	r0, #0
 8004098:	d105      	bne.n	80040a6 <_svfiprintf_r+0x32>
 800409a:	230c      	movs	r3, #12
 800409c:	9a03      	ldr	r2, [sp, #12]
 800409e:	3801      	subs	r0, #1
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	b021      	add	sp, #132	; 0x84
 80040a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040a6:	2340      	movs	r3, #64	; 0x40
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	2300      	movs	r3, #0
 80040ac:	ac08      	add	r4, sp, #32
 80040ae:	6163      	str	r3, [r4, #20]
 80040b0:	3320      	adds	r3, #32
 80040b2:	7663      	strb	r3, [r4, #25]
 80040b4:	3310      	adds	r3, #16
 80040b6:	76a3      	strb	r3, [r4, #26]
 80040b8:	9507      	str	r5, [sp, #28]
 80040ba:	0035      	movs	r5, r6
 80040bc:	782b      	ldrb	r3, [r5, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <_svfiprintf_r+0x52>
 80040c2:	2b25      	cmp	r3, #37	; 0x25
 80040c4:	d148      	bne.n	8004158 <_svfiprintf_r+0xe4>
 80040c6:	1bab      	subs	r3, r5, r6
 80040c8:	9305      	str	r3, [sp, #20]
 80040ca:	42b5      	cmp	r5, r6
 80040cc:	d00b      	beq.n	80040e6 <_svfiprintf_r+0x72>
 80040ce:	0032      	movs	r2, r6
 80040d0:	0039      	movs	r1, r7
 80040d2:	9803      	ldr	r0, [sp, #12]
 80040d4:	f7ff ff6c 	bl	8003fb0 <__ssputs_r>
 80040d8:	3001      	adds	r0, #1
 80040da:	d100      	bne.n	80040de <_svfiprintf_r+0x6a>
 80040dc:	e0af      	b.n	800423e <_svfiprintf_r+0x1ca>
 80040de:	6963      	ldr	r3, [r4, #20]
 80040e0:	9a05      	ldr	r2, [sp, #20]
 80040e2:	189b      	adds	r3, r3, r2
 80040e4:	6163      	str	r3, [r4, #20]
 80040e6:	782b      	ldrb	r3, [r5, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d100      	bne.n	80040ee <_svfiprintf_r+0x7a>
 80040ec:	e0a7      	b.n	800423e <_svfiprintf_r+0x1ca>
 80040ee:	2201      	movs	r2, #1
 80040f0:	2300      	movs	r3, #0
 80040f2:	4252      	negs	r2, r2
 80040f4:	6062      	str	r2, [r4, #4]
 80040f6:	a904      	add	r1, sp, #16
 80040f8:	3254      	adds	r2, #84	; 0x54
 80040fa:	1852      	adds	r2, r2, r1
 80040fc:	1c6e      	adds	r6, r5, #1
 80040fe:	6023      	str	r3, [r4, #0]
 8004100:	60e3      	str	r3, [r4, #12]
 8004102:	60a3      	str	r3, [r4, #8]
 8004104:	7013      	strb	r3, [r2, #0]
 8004106:	65a3      	str	r3, [r4, #88]	; 0x58
 8004108:	4b55      	ldr	r3, [pc, #340]	; (8004260 <_svfiprintf_r+0x1ec>)
 800410a:	2205      	movs	r2, #5
 800410c:	0018      	movs	r0, r3
 800410e:	7831      	ldrb	r1, [r6, #0]
 8004110:	9305      	str	r3, [sp, #20]
 8004112:	f000 fb95 	bl	8004840 <memchr>
 8004116:	1c75      	adds	r5, r6, #1
 8004118:	2800      	cmp	r0, #0
 800411a:	d11f      	bne.n	800415c <_svfiprintf_r+0xe8>
 800411c:	6822      	ldr	r2, [r4, #0]
 800411e:	06d3      	lsls	r3, r2, #27
 8004120:	d504      	bpl.n	800412c <_svfiprintf_r+0xb8>
 8004122:	2353      	movs	r3, #83	; 0x53
 8004124:	a904      	add	r1, sp, #16
 8004126:	185b      	adds	r3, r3, r1
 8004128:	2120      	movs	r1, #32
 800412a:	7019      	strb	r1, [r3, #0]
 800412c:	0713      	lsls	r3, r2, #28
 800412e:	d504      	bpl.n	800413a <_svfiprintf_r+0xc6>
 8004130:	2353      	movs	r3, #83	; 0x53
 8004132:	a904      	add	r1, sp, #16
 8004134:	185b      	adds	r3, r3, r1
 8004136:	212b      	movs	r1, #43	; 0x2b
 8004138:	7019      	strb	r1, [r3, #0]
 800413a:	7833      	ldrb	r3, [r6, #0]
 800413c:	2b2a      	cmp	r3, #42	; 0x2a
 800413e:	d016      	beq.n	800416e <_svfiprintf_r+0xfa>
 8004140:	0035      	movs	r5, r6
 8004142:	2100      	movs	r1, #0
 8004144:	200a      	movs	r0, #10
 8004146:	68e3      	ldr	r3, [r4, #12]
 8004148:	782a      	ldrb	r2, [r5, #0]
 800414a:	1c6e      	adds	r6, r5, #1
 800414c:	3a30      	subs	r2, #48	; 0x30
 800414e:	2a09      	cmp	r2, #9
 8004150:	d94e      	bls.n	80041f0 <_svfiprintf_r+0x17c>
 8004152:	2900      	cmp	r1, #0
 8004154:	d111      	bne.n	800417a <_svfiprintf_r+0x106>
 8004156:	e017      	b.n	8004188 <_svfiprintf_r+0x114>
 8004158:	3501      	adds	r5, #1
 800415a:	e7af      	b.n	80040bc <_svfiprintf_r+0x48>
 800415c:	9b05      	ldr	r3, [sp, #20]
 800415e:	6822      	ldr	r2, [r4, #0]
 8004160:	1ac0      	subs	r0, r0, r3
 8004162:	2301      	movs	r3, #1
 8004164:	4083      	lsls	r3, r0
 8004166:	4313      	orrs	r3, r2
 8004168:	002e      	movs	r6, r5
 800416a:	6023      	str	r3, [r4, #0]
 800416c:	e7cc      	b.n	8004108 <_svfiprintf_r+0x94>
 800416e:	9b07      	ldr	r3, [sp, #28]
 8004170:	1d19      	adds	r1, r3, #4
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	9107      	str	r1, [sp, #28]
 8004176:	2b00      	cmp	r3, #0
 8004178:	db01      	blt.n	800417e <_svfiprintf_r+0x10a>
 800417a:	930b      	str	r3, [sp, #44]	; 0x2c
 800417c:	e004      	b.n	8004188 <_svfiprintf_r+0x114>
 800417e:	425b      	negs	r3, r3
 8004180:	60e3      	str	r3, [r4, #12]
 8004182:	2302      	movs	r3, #2
 8004184:	4313      	orrs	r3, r2
 8004186:	6023      	str	r3, [r4, #0]
 8004188:	782b      	ldrb	r3, [r5, #0]
 800418a:	2b2e      	cmp	r3, #46	; 0x2e
 800418c:	d10a      	bne.n	80041a4 <_svfiprintf_r+0x130>
 800418e:	786b      	ldrb	r3, [r5, #1]
 8004190:	2b2a      	cmp	r3, #42	; 0x2a
 8004192:	d135      	bne.n	8004200 <_svfiprintf_r+0x18c>
 8004194:	9b07      	ldr	r3, [sp, #28]
 8004196:	3502      	adds	r5, #2
 8004198:	1d1a      	adds	r2, r3, #4
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	9207      	str	r2, [sp, #28]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	db2b      	blt.n	80041fa <_svfiprintf_r+0x186>
 80041a2:	9309      	str	r3, [sp, #36]	; 0x24
 80041a4:	4e2f      	ldr	r6, [pc, #188]	; (8004264 <_svfiprintf_r+0x1f0>)
 80041a6:	2203      	movs	r2, #3
 80041a8:	0030      	movs	r0, r6
 80041aa:	7829      	ldrb	r1, [r5, #0]
 80041ac:	f000 fb48 	bl	8004840 <memchr>
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d006      	beq.n	80041c2 <_svfiprintf_r+0x14e>
 80041b4:	2340      	movs	r3, #64	; 0x40
 80041b6:	1b80      	subs	r0, r0, r6
 80041b8:	4083      	lsls	r3, r0
 80041ba:	6822      	ldr	r2, [r4, #0]
 80041bc:	3501      	adds	r5, #1
 80041be:	4313      	orrs	r3, r2
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	7829      	ldrb	r1, [r5, #0]
 80041c4:	2206      	movs	r2, #6
 80041c6:	4828      	ldr	r0, [pc, #160]	; (8004268 <_svfiprintf_r+0x1f4>)
 80041c8:	1c6e      	adds	r6, r5, #1
 80041ca:	7621      	strb	r1, [r4, #24]
 80041cc:	f000 fb38 	bl	8004840 <memchr>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d03c      	beq.n	800424e <_svfiprintf_r+0x1da>
 80041d4:	4b25      	ldr	r3, [pc, #148]	; (800426c <_svfiprintf_r+0x1f8>)
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d125      	bne.n	8004226 <_svfiprintf_r+0x1b2>
 80041da:	2207      	movs	r2, #7
 80041dc:	9b07      	ldr	r3, [sp, #28]
 80041de:	3307      	adds	r3, #7
 80041e0:	4393      	bics	r3, r2
 80041e2:	3308      	adds	r3, #8
 80041e4:	9307      	str	r3, [sp, #28]
 80041e6:	6963      	ldr	r3, [r4, #20]
 80041e8:	9a04      	ldr	r2, [sp, #16]
 80041ea:	189b      	adds	r3, r3, r2
 80041ec:	6163      	str	r3, [r4, #20]
 80041ee:	e764      	b.n	80040ba <_svfiprintf_r+0x46>
 80041f0:	4343      	muls	r3, r0
 80041f2:	0035      	movs	r5, r6
 80041f4:	2101      	movs	r1, #1
 80041f6:	189b      	adds	r3, r3, r2
 80041f8:	e7a6      	b.n	8004148 <_svfiprintf_r+0xd4>
 80041fa:	2301      	movs	r3, #1
 80041fc:	425b      	negs	r3, r3
 80041fe:	e7d0      	b.n	80041a2 <_svfiprintf_r+0x12e>
 8004200:	2300      	movs	r3, #0
 8004202:	200a      	movs	r0, #10
 8004204:	001a      	movs	r2, r3
 8004206:	3501      	adds	r5, #1
 8004208:	6063      	str	r3, [r4, #4]
 800420a:	7829      	ldrb	r1, [r5, #0]
 800420c:	1c6e      	adds	r6, r5, #1
 800420e:	3930      	subs	r1, #48	; 0x30
 8004210:	2909      	cmp	r1, #9
 8004212:	d903      	bls.n	800421c <_svfiprintf_r+0x1a8>
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0c5      	beq.n	80041a4 <_svfiprintf_r+0x130>
 8004218:	9209      	str	r2, [sp, #36]	; 0x24
 800421a:	e7c3      	b.n	80041a4 <_svfiprintf_r+0x130>
 800421c:	4342      	muls	r2, r0
 800421e:	0035      	movs	r5, r6
 8004220:	2301      	movs	r3, #1
 8004222:	1852      	adds	r2, r2, r1
 8004224:	e7f1      	b.n	800420a <_svfiprintf_r+0x196>
 8004226:	aa07      	add	r2, sp, #28
 8004228:	9200      	str	r2, [sp, #0]
 800422a:	0021      	movs	r1, r4
 800422c:	003a      	movs	r2, r7
 800422e:	4b10      	ldr	r3, [pc, #64]	; (8004270 <_svfiprintf_r+0x1fc>)
 8004230:	9803      	ldr	r0, [sp, #12]
 8004232:	e000      	b.n	8004236 <_svfiprintf_r+0x1c2>
 8004234:	bf00      	nop
 8004236:	9004      	str	r0, [sp, #16]
 8004238:	9b04      	ldr	r3, [sp, #16]
 800423a:	3301      	adds	r3, #1
 800423c:	d1d3      	bne.n	80041e6 <_svfiprintf_r+0x172>
 800423e:	89bb      	ldrh	r3, [r7, #12]
 8004240:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004242:	065b      	lsls	r3, r3, #25
 8004244:	d400      	bmi.n	8004248 <_svfiprintf_r+0x1d4>
 8004246:	e72c      	b.n	80040a2 <_svfiprintf_r+0x2e>
 8004248:	2001      	movs	r0, #1
 800424a:	4240      	negs	r0, r0
 800424c:	e729      	b.n	80040a2 <_svfiprintf_r+0x2e>
 800424e:	aa07      	add	r2, sp, #28
 8004250:	9200      	str	r2, [sp, #0]
 8004252:	0021      	movs	r1, r4
 8004254:	003a      	movs	r2, r7
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <_svfiprintf_r+0x1fc>)
 8004258:	9803      	ldr	r0, [sp, #12]
 800425a:	f000 f87b 	bl	8004354 <_printf_i>
 800425e:	e7ea      	b.n	8004236 <_svfiprintf_r+0x1c2>
 8004260:	08004998 	.word	0x08004998
 8004264:	0800499e 	.word	0x0800499e
 8004268:	080049a2 	.word	0x080049a2
 800426c:	00000000 	.word	0x00000000
 8004270:	08003fb1 	.word	0x08003fb1

08004274 <_printf_common>:
 8004274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004276:	0016      	movs	r6, r2
 8004278:	9301      	str	r3, [sp, #4]
 800427a:	688a      	ldr	r2, [r1, #8]
 800427c:	690b      	ldr	r3, [r1, #16]
 800427e:	000c      	movs	r4, r1
 8004280:	9000      	str	r0, [sp, #0]
 8004282:	4293      	cmp	r3, r2
 8004284:	da00      	bge.n	8004288 <_printf_common+0x14>
 8004286:	0013      	movs	r3, r2
 8004288:	0022      	movs	r2, r4
 800428a:	6033      	str	r3, [r6, #0]
 800428c:	3243      	adds	r2, #67	; 0x43
 800428e:	7812      	ldrb	r2, [r2, #0]
 8004290:	2a00      	cmp	r2, #0
 8004292:	d001      	beq.n	8004298 <_printf_common+0x24>
 8004294:	3301      	adds	r3, #1
 8004296:	6033      	str	r3, [r6, #0]
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	069b      	lsls	r3, r3, #26
 800429c:	d502      	bpl.n	80042a4 <_printf_common+0x30>
 800429e:	6833      	ldr	r3, [r6, #0]
 80042a0:	3302      	adds	r3, #2
 80042a2:	6033      	str	r3, [r6, #0]
 80042a4:	6822      	ldr	r2, [r4, #0]
 80042a6:	2306      	movs	r3, #6
 80042a8:	0015      	movs	r5, r2
 80042aa:	401d      	ands	r5, r3
 80042ac:	421a      	tst	r2, r3
 80042ae:	d027      	beq.n	8004300 <_printf_common+0x8c>
 80042b0:	0023      	movs	r3, r4
 80042b2:	3343      	adds	r3, #67	; 0x43
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	1e5a      	subs	r2, r3, #1
 80042b8:	4193      	sbcs	r3, r2
 80042ba:	6822      	ldr	r2, [r4, #0]
 80042bc:	0692      	lsls	r2, r2, #26
 80042be:	d430      	bmi.n	8004322 <_printf_common+0xae>
 80042c0:	0022      	movs	r2, r4
 80042c2:	9901      	ldr	r1, [sp, #4]
 80042c4:	9800      	ldr	r0, [sp, #0]
 80042c6:	9d08      	ldr	r5, [sp, #32]
 80042c8:	3243      	adds	r2, #67	; 0x43
 80042ca:	47a8      	blx	r5
 80042cc:	3001      	adds	r0, #1
 80042ce:	d025      	beq.n	800431c <_printf_common+0xa8>
 80042d0:	2206      	movs	r2, #6
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	2500      	movs	r5, #0
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d105      	bne.n	80042e8 <_printf_common+0x74>
 80042dc:	6833      	ldr	r3, [r6, #0]
 80042de:	68e5      	ldr	r5, [r4, #12]
 80042e0:	1aed      	subs	r5, r5, r3
 80042e2:	43eb      	mvns	r3, r5
 80042e4:	17db      	asrs	r3, r3, #31
 80042e6:	401d      	ands	r5, r3
 80042e8:	68a3      	ldr	r3, [r4, #8]
 80042ea:	6922      	ldr	r2, [r4, #16]
 80042ec:	4293      	cmp	r3, r2
 80042ee:	dd01      	ble.n	80042f4 <_printf_common+0x80>
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	18ed      	adds	r5, r5, r3
 80042f4:	2600      	movs	r6, #0
 80042f6:	42b5      	cmp	r5, r6
 80042f8:	d120      	bne.n	800433c <_printf_common+0xc8>
 80042fa:	2000      	movs	r0, #0
 80042fc:	e010      	b.n	8004320 <_printf_common+0xac>
 80042fe:	3501      	adds	r5, #1
 8004300:	68e3      	ldr	r3, [r4, #12]
 8004302:	6832      	ldr	r2, [r6, #0]
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	42ab      	cmp	r3, r5
 8004308:	ddd2      	ble.n	80042b0 <_printf_common+0x3c>
 800430a:	0022      	movs	r2, r4
 800430c:	2301      	movs	r3, #1
 800430e:	9901      	ldr	r1, [sp, #4]
 8004310:	9800      	ldr	r0, [sp, #0]
 8004312:	9f08      	ldr	r7, [sp, #32]
 8004314:	3219      	adds	r2, #25
 8004316:	47b8      	blx	r7
 8004318:	3001      	adds	r0, #1
 800431a:	d1f0      	bne.n	80042fe <_printf_common+0x8a>
 800431c:	2001      	movs	r0, #1
 800431e:	4240      	negs	r0, r0
 8004320:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004322:	2030      	movs	r0, #48	; 0x30
 8004324:	18e1      	adds	r1, r4, r3
 8004326:	3143      	adds	r1, #67	; 0x43
 8004328:	7008      	strb	r0, [r1, #0]
 800432a:	0021      	movs	r1, r4
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	3145      	adds	r1, #69	; 0x45
 8004330:	7809      	ldrb	r1, [r1, #0]
 8004332:	18a2      	adds	r2, r4, r2
 8004334:	3243      	adds	r2, #67	; 0x43
 8004336:	3302      	adds	r3, #2
 8004338:	7011      	strb	r1, [r2, #0]
 800433a:	e7c1      	b.n	80042c0 <_printf_common+0x4c>
 800433c:	0022      	movs	r2, r4
 800433e:	2301      	movs	r3, #1
 8004340:	9901      	ldr	r1, [sp, #4]
 8004342:	9800      	ldr	r0, [sp, #0]
 8004344:	9f08      	ldr	r7, [sp, #32]
 8004346:	321a      	adds	r2, #26
 8004348:	47b8      	blx	r7
 800434a:	3001      	adds	r0, #1
 800434c:	d0e6      	beq.n	800431c <_printf_common+0xa8>
 800434e:	3601      	adds	r6, #1
 8004350:	e7d1      	b.n	80042f6 <_printf_common+0x82>
	...

08004354 <_printf_i>:
 8004354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004356:	b08b      	sub	sp, #44	; 0x2c
 8004358:	9206      	str	r2, [sp, #24]
 800435a:	000a      	movs	r2, r1
 800435c:	3243      	adds	r2, #67	; 0x43
 800435e:	9307      	str	r3, [sp, #28]
 8004360:	9005      	str	r0, [sp, #20]
 8004362:	9204      	str	r2, [sp, #16]
 8004364:	7e0a      	ldrb	r2, [r1, #24]
 8004366:	000c      	movs	r4, r1
 8004368:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800436a:	2a78      	cmp	r2, #120	; 0x78
 800436c:	d809      	bhi.n	8004382 <_printf_i+0x2e>
 800436e:	2a62      	cmp	r2, #98	; 0x62
 8004370:	d80b      	bhi.n	800438a <_printf_i+0x36>
 8004372:	2a00      	cmp	r2, #0
 8004374:	d100      	bne.n	8004378 <_printf_i+0x24>
 8004376:	e0be      	b.n	80044f6 <_printf_i+0x1a2>
 8004378:	497c      	ldr	r1, [pc, #496]	; (800456c <_printf_i+0x218>)
 800437a:	9103      	str	r1, [sp, #12]
 800437c:	2a58      	cmp	r2, #88	; 0x58
 800437e:	d100      	bne.n	8004382 <_printf_i+0x2e>
 8004380:	e093      	b.n	80044aa <_printf_i+0x156>
 8004382:	0026      	movs	r6, r4
 8004384:	3642      	adds	r6, #66	; 0x42
 8004386:	7032      	strb	r2, [r6, #0]
 8004388:	e022      	b.n	80043d0 <_printf_i+0x7c>
 800438a:	0010      	movs	r0, r2
 800438c:	3863      	subs	r0, #99	; 0x63
 800438e:	2815      	cmp	r0, #21
 8004390:	d8f7      	bhi.n	8004382 <_printf_i+0x2e>
 8004392:	f7fb feb9 	bl	8000108 <__gnu_thumb1_case_shi>
 8004396:	0016      	.short	0x0016
 8004398:	fff6001f 	.word	0xfff6001f
 800439c:	fff6fff6 	.word	0xfff6fff6
 80043a0:	001ffff6 	.word	0x001ffff6
 80043a4:	fff6fff6 	.word	0xfff6fff6
 80043a8:	fff6fff6 	.word	0xfff6fff6
 80043ac:	003600a3 	.word	0x003600a3
 80043b0:	fff60083 	.word	0xfff60083
 80043b4:	00b4fff6 	.word	0x00b4fff6
 80043b8:	0036fff6 	.word	0x0036fff6
 80043bc:	fff6fff6 	.word	0xfff6fff6
 80043c0:	0087      	.short	0x0087
 80043c2:	0026      	movs	r6, r4
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	3642      	adds	r6, #66	; 0x42
 80043c8:	1d11      	adds	r1, r2, #4
 80043ca:	6019      	str	r1, [r3, #0]
 80043cc:	6813      	ldr	r3, [r2, #0]
 80043ce:	7033      	strb	r3, [r6, #0]
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0a2      	b.n	800451a <_printf_i+0x1c6>
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	6809      	ldr	r1, [r1, #0]
 80043d8:	1d02      	adds	r2, r0, #4
 80043da:	060d      	lsls	r5, r1, #24
 80043dc:	d50b      	bpl.n	80043f6 <_printf_i+0xa2>
 80043de:	6805      	ldr	r5, [r0, #0]
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	2d00      	cmp	r5, #0
 80043e4:	da03      	bge.n	80043ee <_printf_i+0x9a>
 80043e6:	232d      	movs	r3, #45	; 0x2d
 80043e8:	9a04      	ldr	r2, [sp, #16]
 80043ea:	426d      	negs	r5, r5
 80043ec:	7013      	strb	r3, [r2, #0]
 80043ee:	4b5f      	ldr	r3, [pc, #380]	; (800456c <_printf_i+0x218>)
 80043f0:	270a      	movs	r7, #10
 80043f2:	9303      	str	r3, [sp, #12]
 80043f4:	e01b      	b.n	800442e <_printf_i+0xda>
 80043f6:	6805      	ldr	r5, [r0, #0]
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	0649      	lsls	r1, r1, #25
 80043fc:	d5f1      	bpl.n	80043e2 <_printf_i+0x8e>
 80043fe:	b22d      	sxth	r5, r5
 8004400:	e7ef      	b.n	80043e2 <_printf_i+0x8e>
 8004402:	680d      	ldr	r5, [r1, #0]
 8004404:	6819      	ldr	r1, [r3, #0]
 8004406:	1d08      	adds	r0, r1, #4
 8004408:	6018      	str	r0, [r3, #0]
 800440a:	062e      	lsls	r6, r5, #24
 800440c:	d501      	bpl.n	8004412 <_printf_i+0xbe>
 800440e:	680d      	ldr	r5, [r1, #0]
 8004410:	e003      	b.n	800441a <_printf_i+0xc6>
 8004412:	066d      	lsls	r5, r5, #25
 8004414:	d5fb      	bpl.n	800440e <_printf_i+0xba>
 8004416:	680d      	ldr	r5, [r1, #0]
 8004418:	b2ad      	uxth	r5, r5
 800441a:	4b54      	ldr	r3, [pc, #336]	; (800456c <_printf_i+0x218>)
 800441c:	2708      	movs	r7, #8
 800441e:	9303      	str	r3, [sp, #12]
 8004420:	2a6f      	cmp	r2, #111	; 0x6f
 8004422:	d000      	beq.n	8004426 <_printf_i+0xd2>
 8004424:	3702      	adds	r7, #2
 8004426:	0023      	movs	r3, r4
 8004428:	2200      	movs	r2, #0
 800442a:	3343      	adds	r3, #67	; 0x43
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	6863      	ldr	r3, [r4, #4]
 8004430:	60a3      	str	r3, [r4, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	db03      	blt.n	800443e <_printf_i+0xea>
 8004436:	2104      	movs	r1, #4
 8004438:	6822      	ldr	r2, [r4, #0]
 800443a:	438a      	bics	r2, r1
 800443c:	6022      	str	r2, [r4, #0]
 800443e:	2d00      	cmp	r5, #0
 8004440:	d102      	bne.n	8004448 <_printf_i+0xf4>
 8004442:	9e04      	ldr	r6, [sp, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00c      	beq.n	8004462 <_printf_i+0x10e>
 8004448:	9e04      	ldr	r6, [sp, #16]
 800444a:	0028      	movs	r0, r5
 800444c:	0039      	movs	r1, r7
 800444e:	f7fb feeb 	bl	8000228 <__aeabi_uidivmod>
 8004452:	9b03      	ldr	r3, [sp, #12]
 8004454:	3e01      	subs	r6, #1
 8004456:	5c5b      	ldrb	r3, [r3, r1]
 8004458:	7033      	strb	r3, [r6, #0]
 800445a:	002b      	movs	r3, r5
 800445c:	0005      	movs	r5, r0
 800445e:	429f      	cmp	r7, r3
 8004460:	d9f3      	bls.n	800444a <_printf_i+0xf6>
 8004462:	2f08      	cmp	r7, #8
 8004464:	d109      	bne.n	800447a <_printf_i+0x126>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	07db      	lsls	r3, r3, #31
 800446a:	d506      	bpl.n	800447a <_printf_i+0x126>
 800446c:	6862      	ldr	r2, [r4, #4]
 800446e:	6923      	ldr	r3, [r4, #16]
 8004470:	429a      	cmp	r2, r3
 8004472:	dc02      	bgt.n	800447a <_printf_i+0x126>
 8004474:	2330      	movs	r3, #48	; 0x30
 8004476:	3e01      	subs	r6, #1
 8004478:	7033      	strb	r3, [r6, #0]
 800447a:	9b04      	ldr	r3, [sp, #16]
 800447c:	1b9b      	subs	r3, r3, r6
 800447e:	6123      	str	r3, [r4, #16]
 8004480:	9b07      	ldr	r3, [sp, #28]
 8004482:	0021      	movs	r1, r4
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	9805      	ldr	r0, [sp, #20]
 8004488:	9b06      	ldr	r3, [sp, #24]
 800448a:	aa09      	add	r2, sp, #36	; 0x24
 800448c:	f7ff fef2 	bl	8004274 <_printf_common>
 8004490:	3001      	adds	r0, #1
 8004492:	d147      	bne.n	8004524 <_printf_i+0x1d0>
 8004494:	2001      	movs	r0, #1
 8004496:	4240      	negs	r0, r0
 8004498:	b00b      	add	sp, #44	; 0x2c
 800449a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800449c:	2220      	movs	r2, #32
 800449e:	6809      	ldr	r1, [r1, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	6022      	str	r2, [r4, #0]
 80044a4:	2278      	movs	r2, #120	; 0x78
 80044a6:	4932      	ldr	r1, [pc, #200]	; (8004570 <_printf_i+0x21c>)
 80044a8:	9103      	str	r1, [sp, #12]
 80044aa:	0021      	movs	r1, r4
 80044ac:	3145      	adds	r1, #69	; 0x45
 80044ae:	700a      	strb	r2, [r1, #0]
 80044b0:	6819      	ldr	r1, [r3, #0]
 80044b2:	6822      	ldr	r2, [r4, #0]
 80044b4:	c920      	ldmia	r1!, {r5}
 80044b6:	0610      	lsls	r0, r2, #24
 80044b8:	d402      	bmi.n	80044c0 <_printf_i+0x16c>
 80044ba:	0650      	lsls	r0, r2, #25
 80044bc:	d500      	bpl.n	80044c0 <_printf_i+0x16c>
 80044be:	b2ad      	uxth	r5, r5
 80044c0:	6019      	str	r1, [r3, #0]
 80044c2:	07d3      	lsls	r3, r2, #31
 80044c4:	d502      	bpl.n	80044cc <_printf_i+0x178>
 80044c6:	2320      	movs	r3, #32
 80044c8:	4313      	orrs	r3, r2
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	2710      	movs	r7, #16
 80044ce:	2d00      	cmp	r5, #0
 80044d0:	d1a9      	bne.n	8004426 <_printf_i+0xd2>
 80044d2:	2220      	movs	r2, #32
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	4393      	bics	r3, r2
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	e7a4      	b.n	8004426 <_printf_i+0xd2>
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	680d      	ldr	r5, [r1, #0]
 80044e0:	1d10      	adds	r0, r2, #4
 80044e2:	6949      	ldr	r1, [r1, #20]
 80044e4:	6018      	str	r0, [r3, #0]
 80044e6:	6813      	ldr	r3, [r2, #0]
 80044e8:	062e      	lsls	r6, r5, #24
 80044ea:	d501      	bpl.n	80044f0 <_printf_i+0x19c>
 80044ec:	6019      	str	r1, [r3, #0]
 80044ee:	e002      	b.n	80044f6 <_printf_i+0x1a2>
 80044f0:	066d      	lsls	r5, r5, #25
 80044f2:	d5fb      	bpl.n	80044ec <_printf_i+0x198>
 80044f4:	8019      	strh	r1, [r3, #0]
 80044f6:	2300      	movs	r3, #0
 80044f8:	9e04      	ldr	r6, [sp, #16]
 80044fa:	6123      	str	r3, [r4, #16]
 80044fc:	e7c0      	b.n	8004480 <_printf_i+0x12c>
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	1d11      	adds	r1, r2, #4
 8004502:	6019      	str	r1, [r3, #0]
 8004504:	6816      	ldr	r6, [r2, #0]
 8004506:	2100      	movs	r1, #0
 8004508:	0030      	movs	r0, r6
 800450a:	6862      	ldr	r2, [r4, #4]
 800450c:	f000 f998 	bl	8004840 <memchr>
 8004510:	2800      	cmp	r0, #0
 8004512:	d001      	beq.n	8004518 <_printf_i+0x1c4>
 8004514:	1b80      	subs	r0, r0, r6
 8004516:	6060      	str	r0, [r4, #4]
 8004518:	6863      	ldr	r3, [r4, #4]
 800451a:	6123      	str	r3, [r4, #16]
 800451c:	2300      	movs	r3, #0
 800451e:	9a04      	ldr	r2, [sp, #16]
 8004520:	7013      	strb	r3, [r2, #0]
 8004522:	e7ad      	b.n	8004480 <_printf_i+0x12c>
 8004524:	0032      	movs	r2, r6
 8004526:	6923      	ldr	r3, [r4, #16]
 8004528:	9906      	ldr	r1, [sp, #24]
 800452a:	9805      	ldr	r0, [sp, #20]
 800452c:	9d07      	ldr	r5, [sp, #28]
 800452e:	47a8      	blx	r5
 8004530:	3001      	adds	r0, #1
 8004532:	d0af      	beq.n	8004494 <_printf_i+0x140>
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	079b      	lsls	r3, r3, #30
 8004538:	d415      	bmi.n	8004566 <_printf_i+0x212>
 800453a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800453c:	68e0      	ldr	r0, [r4, #12]
 800453e:	4298      	cmp	r0, r3
 8004540:	daaa      	bge.n	8004498 <_printf_i+0x144>
 8004542:	0018      	movs	r0, r3
 8004544:	e7a8      	b.n	8004498 <_printf_i+0x144>
 8004546:	0022      	movs	r2, r4
 8004548:	2301      	movs	r3, #1
 800454a:	9906      	ldr	r1, [sp, #24]
 800454c:	9805      	ldr	r0, [sp, #20]
 800454e:	9e07      	ldr	r6, [sp, #28]
 8004550:	3219      	adds	r2, #25
 8004552:	47b0      	blx	r6
 8004554:	3001      	adds	r0, #1
 8004556:	d09d      	beq.n	8004494 <_printf_i+0x140>
 8004558:	3501      	adds	r5, #1
 800455a:	68e3      	ldr	r3, [r4, #12]
 800455c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	42ab      	cmp	r3, r5
 8004562:	dcf0      	bgt.n	8004546 <_printf_i+0x1f2>
 8004564:	e7e9      	b.n	800453a <_printf_i+0x1e6>
 8004566:	2500      	movs	r5, #0
 8004568:	e7f7      	b.n	800455a <_printf_i+0x206>
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	080049a9 	.word	0x080049a9
 8004570:	080049ba 	.word	0x080049ba

08004574 <__sflush_r>:
 8004574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004576:	898b      	ldrh	r3, [r1, #12]
 8004578:	0005      	movs	r5, r0
 800457a:	000c      	movs	r4, r1
 800457c:	071a      	lsls	r2, r3, #28
 800457e:	d45c      	bmi.n	800463a <__sflush_r+0xc6>
 8004580:	684a      	ldr	r2, [r1, #4]
 8004582:	2a00      	cmp	r2, #0
 8004584:	dc04      	bgt.n	8004590 <__sflush_r+0x1c>
 8004586:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004588:	2a00      	cmp	r2, #0
 800458a:	dc01      	bgt.n	8004590 <__sflush_r+0x1c>
 800458c:	2000      	movs	r0, #0
 800458e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004590:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004592:	2f00      	cmp	r7, #0
 8004594:	d0fa      	beq.n	800458c <__sflush_r+0x18>
 8004596:	2200      	movs	r2, #0
 8004598:	2080      	movs	r0, #128	; 0x80
 800459a:	682e      	ldr	r6, [r5, #0]
 800459c:	602a      	str	r2, [r5, #0]
 800459e:	001a      	movs	r2, r3
 80045a0:	0140      	lsls	r0, r0, #5
 80045a2:	6a21      	ldr	r1, [r4, #32]
 80045a4:	4002      	ands	r2, r0
 80045a6:	4203      	tst	r3, r0
 80045a8:	d034      	beq.n	8004614 <__sflush_r+0xa0>
 80045aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045ac:	89a3      	ldrh	r3, [r4, #12]
 80045ae:	075b      	lsls	r3, r3, #29
 80045b0:	d506      	bpl.n	80045c0 <__sflush_r+0x4c>
 80045b2:	6863      	ldr	r3, [r4, #4]
 80045b4:	1ac0      	subs	r0, r0, r3
 80045b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <__sflush_r+0x4c>
 80045bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045be:	1ac0      	subs	r0, r0, r3
 80045c0:	0002      	movs	r2, r0
 80045c2:	2300      	movs	r3, #0
 80045c4:	0028      	movs	r0, r5
 80045c6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80045c8:	6a21      	ldr	r1, [r4, #32]
 80045ca:	47b8      	blx	r7
 80045cc:	89a2      	ldrh	r2, [r4, #12]
 80045ce:	1c43      	adds	r3, r0, #1
 80045d0:	d106      	bne.n	80045e0 <__sflush_r+0x6c>
 80045d2:	6829      	ldr	r1, [r5, #0]
 80045d4:	291d      	cmp	r1, #29
 80045d6:	d82c      	bhi.n	8004632 <__sflush_r+0xbe>
 80045d8:	4b2a      	ldr	r3, [pc, #168]	; (8004684 <__sflush_r+0x110>)
 80045da:	410b      	asrs	r3, r1
 80045dc:	07db      	lsls	r3, r3, #31
 80045de:	d428      	bmi.n	8004632 <__sflush_r+0xbe>
 80045e0:	2300      	movs	r3, #0
 80045e2:	6063      	str	r3, [r4, #4]
 80045e4:	6923      	ldr	r3, [r4, #16]
 80045e6:	6023      	str	r3, [r4, #0]
 80045e8:	04d2      	lsls	r2, r2, #19
 80045ea:	d505      	bpl.n	80045f8 <__sflush_r+0x84>
 80045ec:	1c43      	adds	r3, r0, #1
 80045ee:	d102      	bne.n	80045f6 <__sflush_r+0x82>
 80045f0:	682b      	ldr	r3, [r5, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d100      	bne.n	80045f8 <__sflush_r+0x84>
 80045f6:	6560      	str	r0, [r4, #84]	; 0x54
 80045f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045fa:	602e      	str	r6, [r5, #0]
 80045fc:	2900      	cmp	r1, #0
 80045fe:	d0c5      	beq.n	800458c <__sflush_r+0x18>
 8004600:	0023      	movs	r3, r4
 8004602:	3344      	adds	r3, #68	; 0x44
 8004604:	4299      	cmp	r1, r3
 8004606:	d002      	beq.n	800460e <__sflush_r+0x9a>
 8004608:	0028      	movs	r0, r5
 800460a:	f7ff fbd3 	bl	8003db4 <_free_r>
 800460e:	2000      	movs	r0, #0
 8004610:	6360      	str	r0, [r4, #52]	; 0x34
 8004612:	e7bc      	b.n	800458e <__sflush_r+0x1a>
 8004614:	2301      	movs	r3, #1
 8004616:	0028      	movs	r0, r5
 8004618:	47b8      	blx	r7
 800461a:	1c43      	adds	r3, r0, #1
 800461c:	d1c6      	bne.n	80045ac <__sflush_r+0x38>
 800461e:	682b      	ldr	r3, [r5, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0c3      	beq.n	80045ac <__sflush_r+0x38>
 8004624:	2b1d      	cmp	r3, #29
 8004626:	d001      	beq.n	800462c <__sflush_r+0xb8>
 8004628:	2b16      	cmp	r3, #22
 800462a:	d101      	bne.n	8004630 <__sflush_r+0xbc>
 800462c:	602e      	str	r6, [r5, #0]
 800462e:	e7ad      	b.n	800458c <__sflush_r+0x18>
 8004630:	89a2      	ldrh	r2, [r4, #12]
 8004632:	2340      	movs	r3, #64	; 0x40
 8004634:	4313      	orrs	r3, r2
 8004636:	81a3      	strh	r3, [r4, #12]
 8004638:	e7a9      	b.n	800458e <__sflush_r+0x1a>
 800463a:	690e      	ldr	r6, [r1, #16]
 800463c:	2e00      	cmp	r6, #0
 800463e:	d0a5      	beq.n	800458c <__sflush_r+0x18>
 8004640:	680f      	ldr	r7, [r1, #0]
 8004642:	600e      	str	r6, [r1, #0]
 8004644:	1bba      	subs	r2, r7, r6
 8004646:	9201      	str	r2, [sp, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	079b      	lsls	r3, r3, #30
 800464c:	d100      	bne.n	8004650 <__sflush_r+0xdc>
 800464e:	694a      	ldr	r2, [r1, #20]
 8004650:	60a2      	str	r2, [r4, #8]
 8004652:	9b01      	ldr	r3, [sp, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	dd99      	ble.n	800458c <__sflush_r+0x18>
 8004658:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800465a:	0032      	movs	r2, r6
 800465c:	001f      	movs	r7, r3
 800465e:	0028      	movs	r0, r5
 8004660:	9b01      	ldr	r3, [sp, #4]
 8004662:	6a21      	ldr	r1, [r4, #32]
 8004664:	47b8      	blx	r7
 8004666:	2800      	cmp	r0, #0
 8004668:	dc06      	bgt.n	8004678 <__sflush_r+0x104>
 800466a:	2340      	movs	r3, #64	; 0x40
 800466c:	2001      	movs	r0, #1
 800466e:	89a2      	ldrh	r2, [r4, #12]
 8004670:	4240      	negs	r0, r0
 8004672:	4313      	orrs	r3, r2
 8004674:	81a3      	strh	r3, [r4, #12]
 8004676:	e78a      	b.n	800458e <__sflush_r+0x1a>
 8004678:	9b01      	ldr	r3, [sp, #4]
 800467a:	1836      	adds	r6, r6, r0
 800467c:	1a1b      	subs	r3, r3, r0
 800467e:	9301      	str	r3, [sp, #4]
 8004680:	e7e7      	b.n	8004652 <__sflush_r+0xde>
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	dfbffffe 	.word	0xdfbffffe

08004688 <_fflush_r>:
 8004688:	690b      	ldr	r3, [r1, #16]
 800468a:	b570      	push	{r4, r5, r6, lr}
 800468c:	0005      	movs	r5, r0
 800468e:	000c      	movs	r4, r1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d102      	bne.n	800469a <_fflush_r+0x12>
 8004694:	2500      	movs	r5, #0
 8004696:	0028      	movs	r0, r5
 8004698:	bd70      	pop	{r4, r5, r6, pc}
 800469a:	2800      	cmp	r0, #0
 800469c:	d004      	beq.n	80046a8 <_fflush_r+0x20>
 800469e:	6a03      	ldr	r3, [r0, #32]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <_fflush_r+0x20>
 80046a4:	f7ff f95c 	bl	8003960 <__sinit>
 80046a8:	220c      	movs	r2, #12
 80046aa:	5ea3      	ldrsh	r3, [r4, r2]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f1      	beq.n	8004694 <_fflush_r+0xc>
 80046b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046b2:	07d2      	lsls	r2, r2, #31
 80046b4:	d404      	bmi.n	80046c0 <_fflush_r+0x38>
 80046b6:	059b      	lsls	r3, r3, #22
 80046b8:	d402      	bmi.n	80046c0 <_fflush_r+0x38>
 80046ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046bc:	f7ff fb77 	bl	8003dae <__retarget_lock_acquire_recursive>
 80046c0:	0028      	movs	r0, r5
 80046c2:	0021      	movs	r1, r4
 80046c4:	f7ff ff56 	bl	8004574 <__sflush_r>
 80046c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046ca:	0005      	movs	r5, r0
 80046cc:	07db      	lsls	r3, r3, #31
 80046ce:	d4e2      	bmi.n	8004696 <_fflush_r+0xe>
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	059b      	lsls	r3, r3, #22
 80046d4:	d4df      	bmi.n	8004696 <_fflush_r+0xe>
 80046d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046d8:	f7ff fb6a 	bl	8003db0 <__retarget_lock_release_recursive>
 80046dc:	e7db      	b.n	8004696 <_fflush_r+0xe>
	...

080046e0 <__swhatbuf_r>:
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	000e      	movs	r6, r1
 80046e4:	001d      	movs	r5, r3
 80046e6:	230e      	movs	r3, #14
 80046e8:	5ec9      	ldrsh	r1, [r1, r3]
 80046ea:	0014      	movs	r4, r2
 80046ec:	b096      	sub	sp, #88	; 0x58
 80046ee:	2900      	cmp	r1, #0
 80046f0:	da0c      	bge.n	800470c <__swhatbuf_r+0x2c>
 80046f2:	89b2      	ldrh	r2, [r6, #12]
 80046f4:	2380      	movs	r3, #128	; 0x80
 80046f6:	0011      	movs	r1, r2
 80046f8:	4019      	ands	r1, r3
 80046fa:	421a      	tst	r2, r3
 80046fc:	d013      	beq.n	8004726 <__swhatbuf_r+0x46>
 80046fe:	2100      	movs	r1, #0
 8004700:	3b40      	subs	r3, #64	; 0x40
 8004702:	2000      	movs	r0, #0
 8004704:	6029      	str	r1, [r5, #0]
 8004706:	6023      	str	r3, [r4, #0]
 8004708:	b016      	add	sp, #88	; 0x58
 800470a:	bd70      	pop	{r4, r5, r6, pc}
 800470c:	466a      	mov	r2, sp
 800470e:	f000 f861 	bl	80047d4 <_fstat_r>
 8004712:	2800      	cmp	r0, #0
 8004714:	dbed      	blt.n	80046f2 <__swhatbuf_r+0x12>
 8004716:	23f0      	movs	r3, #240	; 0xf0
 8004718:	9901      	ldr	r1, [sp, #4]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	4019      	ands	r1, r3
 800471e:	4b03      	ldr	r3, [pc, #12]	; (800472c <__swhatbuf_r+0x4c>)
 8004720:	18c9      	adds	r1, r1, r3
 8004722:	424b      	negs	r3, r1
 8004724:	4159      	adcs	r1, r3
 8004726:	2380      	movs	r3, #128	; 0x80
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	e7ea      	b.n	8004702 <__swhatbuf_r+0x22>
 800472c:	ffffe000 	.word	0xffffe000

08004730 <__smakebuf_r>:
 8004730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004732:	2602      	movs	r6, #2
 8004734:	898b      	ldrh	r3, [r1, #12]
 8004736:	0005      	movs	r5, r0
 8004738:	000c      	movs	r4, r1
 800473a:	4233      	tst	r3, r6
 800473c:	d006      	beq.n	800474c <__smakebuf_r+0x1c>
 800473e:	0023      	movs	r3, r4
 8004740:	3347      	adds	r3, #71	; 0x47
 8004742:	6023      	str	r3, [r4, #0]
 8004744:	6123      	str	r3, [r4, #16]
 8004746:	2301      	movs	r3, #1
 8004748:	6163      	str	r3, [r4, #20]
 800474a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800474c:	466a      	mov	r2, sp
 800474e:	ab01      	add	r3, sp, #4
 8004750:	f7ff ffc6 	bl	80046e0 <__swhatbuf_r>
 8004754:	9900      	ldr	r1, [sp, #0]
 8004756:	0007      	movs	r7, r0
 8004758:	0028      	movs	r0, r5
 800475a:	f7ff fb97 	bl	8003e8c <_malloc_r>
 800475e:	2800      	cmp	r0, #0
 8004760:	d108      	bne.n	8004774 <__smakebuf_r+0x44>
 8004762:	220c      	movs	r2, #12
 8004764:	5ea3      	ldrsh	r3, [r4, r2]
 8004766:	059a      	lsls	r2, r3, #22
 8004768:	d4ef      	bmi.n	800474a <__smakebuf_r+0x1a>
 800476a:	2203      	movs	r2, #3
 800476c:	4393      	bics	r3, r2
 800476e:	431e      	orrs	r6, r3
 8004770:	81a6      	strh	r6, [r4, #12]
 8004772:	e7e4      	b.n	800473e <__smakebuf_r+0xe>
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	89a2      	ldrh	r2, [r4, #12]
 8004778:	6020      	str	r0, [r4, #0]
 800477a:	4313      	orrs	r3, r2
 800477c:	81a3      	strh	r3, [r4, #12]
 800477e:	9b00      	ldr	r3, [sp, #0]
 8004780:	6120      	str	r0, [r4, #16]
 8004782:	6163      	str	r3, [r4, #20]
 8004784:	9b01      	ldr	r3, [sp, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00c      	beq.n	80047a4 <__smakebuf_r+0x74>
 800478a:	0028      	movs	r0, r5
 800478c:	230e      	movs	r3, #14
 800478e:	5ee1      	ldrsh	r1, [r4, r3]
 8004790:	f000 f832 	bl	80047f8 <_isatty_r>
 8004794:	2800      	cmp	r0, #0
 8004796:	d005      	beq.n	80047a4 <__smakebuf_r+0x74>
 8004798:	2303      	movs	r3, #3
 800479a:	89a2      	ldrh	r2, [r4, #12]
 800479c:	439a      	bics	r2, r3
 800479e:	3b02      	subs	r3, #2
 80047a0:	4313      	orrs	r3, r2
 80047a2:	81a3      	strh	r3, [r4, #12]
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	433b      	orrs	r3, r7
 80047a8:	81a3      	strh	r3, [r4, #12]
 80047aa:	e7ce      	b.n	800474a <__smakebuf_r+0x1a>

080047ac <memmove>:
 80047ac:	b510      	push	{r4, lr}
 80047ae:	4288      	cmp	r0, r1
 80047b0:	d902      	bls.n	80047b8 <memmove+0xc>
 80047b2:	188b      	adds	r3, r1, r2
 80047b4:	4298      	cmp	r0, r3
 80047b6:	d303      	bcc.n	80047c0 <memmove+0x14>
 80047b8:	2300      	movs	r3, #0
 80047ba:	e007      	b.n	80047cc <memmove+0x20>
 80047bc:	5c8b      	ldrb	r3, [r1, r2]
 80047be:	5483      	strb	r3, [r0, r2]
 80047c0:	3a01      	subs	r2, #1
 80047c2:	d2fb      	bcs.n	80047bc <memmove+0x10>
 80047c4:	bd10      	pop	{r4, pc}
 80047c6:	5ccc      	ldrb	r4, [r1, r3]
 80047c8:	54c4      	strb	r4, [r0, r3]
 80047ca:	3301      	adds	r3, #1
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d1fa      	bne.n	80047c6 <memmove+0x1a>
 80047d0:	e7f8      	b.n	80047c4 <memmove+0x18>
	...

080047d4 <_fstat_r>:
 80047d4:	2300      	movs	r3, #0
 80047d6:	b570      	push	{r4, r5, r6, lr}
 80047d8:	4d06      	ldr	r5, [pc, #24]	; (80047f4 <_fstat_r+0x20>)
 80047da:	0004      	movs	r4, r0
 80047dc:	0008      	movs	r0, r1
 80047de:	0011      	movs	r1, r2
 80047e0:	602b      	str	r3, [r5, #0]
 80047e2:	f7fc f961 	bl	8000aa8 <_fstat>
 80047e6:	1c43      	adds	r3, r0, #1
 80047e8:	d103      	bne.n	80047f2 <_fstat_r+0x1e>
 80047ea:	682b      	ldr	r3, [r5, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d000      	beq.n	80047f2 <_fstat_r+0x1e>
 80047f0:	6023      	str	r3, [r4, #0]
 80047f2:	bd70      	pop	{r4, r5, r6, pc}
 80047f4:	200002b4 	.word	0x200002b4

080047f8 <_isatty_r>:
 80047f8:	2300      	movs	r3, #0
 80047fa:	b570      	push	{r4, r5, r6, lr}
 80047fc:	4d06      	ldr	r5, [pc, #24]	; (8004818 <_isatty_r+0x20>)
 80047fe:	0004      	movs	r4, r0
 8004800:	0008      	movs	r0, r1
 8004802:	602b      	str	r3, [r5, #0]
 8004804:	f7fc f95e 	bl	8000ac4 <_isatty>
 8004808:	1c43      	adds	r3, r0, #1
 800480a:	d103      	bne.n	8004814 <_isatty_r+0x1c>
 800480c:	682b      	ldr	r3, [r5, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d000      	beq.n	8004814 <_isatty_r+0x1c>
 8004812:	6023      	str	r3, [r4, #0]
 8004814:	bd70      	pop	{r4, r5, r6, pc}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	200002b4 	.word	0x200002b4

0800481c <_sbrk_r>:
 800481c:	2300      	movs	r3, #0
 800481e:	b570      	push	{r4, r5, r6, lr}
 8004820:	4d06      	ldr	r5, [pc, #24]	; (800483c <_sbrk_r+0x20>)
 8004822:	0004      	movs	r4, r0
 8004824:	0008      	movs	r0, r1
 8004826:	602b      	str	r3, [r5, #0]
 8004828:	f7fc f960 	bl	8000aec <_sbrk>
 800482c:	1c43      	adds	r3, r0, #1
 800482e:	d103      	bne.n	8004838 <_sbrk_r+0x1c>
 8004830:	682b      	ldr	r3, [r5, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d000      	beq.n	8004838 <_sbrk_r+0x1c>
 8004836:	6023      	str	r3, [r4, #0]
 8004838:	bd70      	pop	{r4, r5, r6, pc}
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	200002b4 	.word	0x200002b4

08004840 <memchr>:
 8004840:	b2c9      	uxtb	r1, r1
 8004842:	1882      	adds	r2, r0, r2
 8004844:	4290      	cmp	r0, r2
 8004846:	d101      	bne.n	800484c <memchr+0xc>
 8004848:	2000      	movs	r0, #0
 800484a:	4770      	bx	lr
 800484c:	7803      	ldrb	r3, [r0, #0]
 800484e:	428b      	cmp	r3, r1
 8004850:	d0fb      	beq.n	800484a <memchr+0xa>
 8004852:	3001      	adds	r0, #1
 8004854:	e7f6      	b.n	8004844 <memchr+0x4>

08004856 <memcpy>:
 8004856:	2300      	movs	r3, #0
 8004858:	b510      	push	{r4, lr}
 800485a:	429a      	cmp	r2, r3
 800485c:	d100      	bne.n	8004860 <memcpy+0xa>
 800485e:	bd10      	pop	{r4, pc}
 8004860:	5ccc      	ldrb	r4, [r1, r3]
 8004862:	54c4      	strb	r4, [r0, r3]
 8004864:	3301      	adds	r3, #1
 8004866:	e7f8      	b.n	800485a <memcpy+0x4>

08004868 <_realloc_r>:
 8004868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800486a:	0007      	movs	r7, r0
 800486c:	000e      	movs	r6, r1
 800486e:	0014      	movs	r4, r2
 8004870:	2900      	cmp	r1, #0
 8004872:	d105      	bne.n	8004880 <_realloc_r+0x18>
 8004874:	0011      	movs	r1, r2
 8004876:	f7ff fb09 	bl	8003e8c <_malloc_r>
 800487a:	0005      	movs	r5, r0
 800487c:	0028      	movs	r0, r5
 800487e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004880:	2a00      	cmp	r2, #0
 8004882:	d103      	bne.n	800488c <_realloc_r+0x24>
 8004884:	f7ff fa96 	bl	8003db4 <_free_r>
 8004888:	0025      	movs	r5, r4
 800488a:	e7f7      	b.n	800487c <_realloc_r+0x14>
 800488c:	f000 f81b 	bl	80048c6 <_malloc_usable_size_r>
 8004890:	9001      	str	r0, [sp, #4]
 8004892:	4284      	cmp	r4, r0
 8004894:	d803      	bhi.n	800489e <_realloc_r+0x36>
 8004896:	0035      	movs	r5, r6
 8004898:	0843      	lsrs	r3, r0, #1
 800489a:	42a3      	cmp	r3, r4
 800489c:	d3ee      	bcc.n	800487c <_realloc_r+0x14>
 800489e:	0021      	movs	r1, r4
 80048a0:	0038      	movs	r0, r7
 80048a2:	f7ff faf3 	bl	8003e8c <_malloc_r>
 80048a6:	1e05      	subs	r5, r0, #0
 80048a8:	d0e8      	beq.n	800487c <_realloc_r+0x14>
 80048aa:	9b01      	ldr	r3, [sp, #4]
 80048ac:	0022      	movs	r2, r4
 80048ae:	429c      	cmp	r4, r3
 80048b0:	d900      	bls.n	80048b4 <_realloc_r+0x4c>
 80048b2:	001a      	movs	r2, r3
 80048b4:	0031      	movs	r1, r6
 80048b6:	0028      	movs	r0, r5
 80048b8:	f7ff ffcd 	bl	8004856 <memcpy>
 80048bc:	0031      	movs	r1, r6
 80048be:	0038      	movs	r0, r7
 80048c0:	f7ff fa78 	bl	8003db4 <_free_r>
 80048c4:	e7da      	b.n	800487c <_realloc_r+0x14>

080048c6 <_malloc_usable_size_r>:
 80048c6:	1f0b      	subs	r3, r1, #4
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	1f18      	subs	r0, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	da01      	bge.n	80048d4 <_malloc_usable_size_r+0xe>
 80048d0:	580b      	ldr	r3, [r1, r0]
 80048d2:	18c0      	adds	r0, r0, r3
 80048d4:	4770      	bx	lr
	...

080048d8 <_init>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048de:	bc08      	pop	{r3}
 80048e0:	469e      	mov	lr, r3
 80048e2:	4770      	bx	lr

080048e4 <_fini>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ea:	bc08      	pop	{r3}
 80048ec:	469e      	mov	lr, r3
 80048ee:	4770      	bx	lr
