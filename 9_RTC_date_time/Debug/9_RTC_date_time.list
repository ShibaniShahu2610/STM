
9_RTC_date_time.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003928  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080039e8  080039e8  000139e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ab8  08003ab8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ab8  08003ab8  00013ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ac0  08003ac0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ac0  08003ac0  00013ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ac4  08003ac4  00013ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000005c  08003b24  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08003b24  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000091a7  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001725  00000000  00000000  0002926e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b8  00000000  00000000  0002a998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ec  00000000  00000000  0002b150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000142f3  00000000  00000000  0002b73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a76e  00000000  00000000  0003fa2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007d5e3  00000000  00000000  0004a19d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f98  00000000  00000000  000c7780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000c9718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080039d0 	.word	0x080039d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080039d0 	.word	0x080039d0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b083      	sub	sp, #12
 80004c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c2:	f000 fa8d 	bl	80009e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c6:	f000 f853 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ca:	f000 f95f 	bl	800078c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004ce:	f000 f92d 	bl	800072c <MX_USART1_UART_Init>
  MX_RTC_Init();
 80004d2:	f000 f8c7 	bl	8000664 <MX_RTC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80004d6:	491e      	ldr	r1, [pc, #120]	; (8000550 <main+0x94>)
 80004d8:	4b1e      	ldr	r3, [pc, #120]	; (8000554 <main+0x98>)
 80004da:	2200      	movs	r2, #0
 80004dc:	0018      	movs	r0, r3
 80004de:	f001 ff09 	bl	80022f4 <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80004e2:	491d      	ldr	r1, [pc, #116]	; (8000558 <main+0x9c>)
 80004e4:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <main+0x98>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	0018      	movs	r0, r3
 80004ea:	f001 fe11 	bl	8002110 <HAL_RTC_GetTime>

	  sprintf(date, "Date : %02d.%02d.%02d\t", sDate.Date,sDate.Month,sDate.Year);
 80004ee:	4b18      	ldr	r3, [pc, #96]	; (8000550 <main+0x94>)
 80004f0:	789b      	ldrb	r3, [r3, #2]
 80004f2:	001a      	movs	r2, r3
 80004f4:	4b16      	ldr	r3, [pc, #88]	; (8000550 <main+0x94>)
 80004f6:	785b      	ldrb	r3, [r3, #1]
 80004f8:	001c      	movs	r4, r3
 80004fa:	4b15      	ldr	r3, [pc, #84]	; (8000550 <main+0x94>)
 80004fc:	78db      	ldrb	r3, [r3, #3]
 80004fe:	4917      	ldr	r1, [pc, #92]	; (800055c <main+0xa0>)
 8000500:	4817      	ldr	r0, [pc, #92]	; (8000560 <main+0xa4>)
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	0023      	movs	r3, r4
 8000506:	f002 fdbd 	bl	8003084 <siprintf>
	  sprintf(time, "Time : %02d.%02d.%02d\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <main+0x9c>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	001a      	movs	r2, r3
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <main+0x9c>)
 8000512:	785b      	ldrb	r3, [r3, #1]
 8000514:	001c      	movs	r4, r3
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <main+0x9c>)
 8000518:	789b      	ldrb	r3, [r3, #2]
 800051a:	4912      	ldr	r1, [pc, #72]	; (8000564 <main+0xa8>)
 800051c:	4812      	ldr	r0, [pc, #72]	; (8000568 <main+0xac>)
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	0023      	movs	r3, r4
 8000522:	f002 fdaf 	bl	8003084 <siprintf>

	  HAL_UART_Transmit(&huart1, (uint8_t *)date, sizeof(date),1000);
 8000526:	23fa      	movs	r3, #250	; 0xfa
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	490d      	ldr	r1, [pc, #52]	; (8000560 <main+0xa4>)
 800052c:	480f      	ldr	r0, [pc, #60]	; (800056c <main+0xb0>)
 800052e:	2214      	movs	r2, #20
 8000530:	f002 f85a 	bl	80025e8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t *)time, sizeof(time),1000);
 8000534:	23fa      	movs	r3, #250	; 0xfa
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	490b      	ldr	r1, [pc, #44]	; (8000568 <main+0xac>)
 800053a:	480c      	ldr	r0, [pc, #48]	; (800056c <main+0xb0>)
 800053c:	2214      	movs	r2, #20
 800053e:	f002 f853 	bl	80025e8 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000542:	23fa      	movs	r3, #250	; 0xfa
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	0018      	movs	r0, r3
 8000548:	f000 faba 	bl	8000ac0 <HAL_Delay>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800054c:	e7c3      	b.n	80004d6 <main+0x1a>
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	200000b4 	.word	0x200000b4
 8000554:	200000b8 	.word	0x200000b8
 8000558:	200000a0 	.word	0x200000a0
 800055c:	080039e8 	.word	0x080039e8
 8000560:	2000008c 	.word	0x2000008c
 8000564:	08003a00 	.word	0x08003a00
 8000568:	20000078 	.word	0x20000078
 800056c:	200000dc 	.word	0x200000dc

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b09d      	sub	sp, #116	; 0x74
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	2438      	movs	r4, #56	; 0x38
 8000578:	193b      	adds	r3, r7, r4
 800057a:	0018      	movs	r0, r3
 800057c:	2338      	movs	r3, #56	; 0x38
 800057e:	001a      	movs	r2, r3
 8000580:	2100      	movs	r1, #0
 8000582:	f002 fd9f 	bl	80030c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000586:	2324      	movs	r3, #36	; 0x24
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	0018      	movs	r0, r3
 800058c:	2314      	movs	r3, #20
 800058e:	001a      	movs	r2, r3
 8000590:	2100      	movs	r1, #0
 8000592:	f002 fd97 	bl	80030c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000596:	003b      	movs	r3, r7
 8000598:	0018      	movs	r0, r3
 800059a:	2324      	movs	r3, #36	; 0x24
 800059c:	001a      	movs	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	f002 fd90 	bl	80030c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	4b2d      	ldr	r3, [pc, #180]	; (800065c <SystemClock_Config+0xec>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a2d      	ldr	r2, [pc, #180]	; (8000660 <SystemClock_Config+0xf0>)
 80005aa:	401a      	ands	r2, r3
 80005ac:	4b2b      	ldr	r3, [pc, #172]	; (800065c <SystemClock_Config+0xec>)
 80005ae:	2180      	movs	r1, #128	; 0x80
 80005b0:	0109      	lsls	r1, r1, #4
 80005b2:	430a      	orrs	r2, r1
 80005b4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005b6:	0021      	movs	r1, r4
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	220a      	movs	r2, #10
 80005bc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2201      	movs	r2, #1
 80005c2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2210      	movs	r2, #16
 80005c8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2202      	movs	r2, #2
 80005d4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2280      	movs	r2, #128	; 0x80
 80005e6:	0412      	lsls	r2, r2, #16
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 fcd3 	bl	8000f98 <HAL_RCC_OscConfig>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005f6:	f000 f8ff 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	2124      	movs	r1, #36	; 0x24
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	220f      	movs	r2, #15
 8000600:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2203      	movs	r2, #3
 8000606:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2280      	movs	r2, #128	; 0x80
 8000612:	00d2      	lsls	r2, r2, #3
 8000614:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2280      	movs	r2, #128	; 0x80
 800061a:	00d2      	lsls	r2, r2, #3
 800061c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2100      	movs	r1, #0
 8000622:	0018      	movs	r0, r3
 8000624:	f001 f87c 	bl	8001720 <HAL_RCC_ClockConfig>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800062c:	f000 f8e4 	bl	80007f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000630:	003b      	movs	r3, r7
 8000632:	2221      	movs	r2, #33	; 0x21
 8000634:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000636:	003b      	movs	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800063c:	003b      	movs	r3, r7
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	0292      	lsls	r2, r2, #10
 8000642:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000644:	003b      	movs	r3, r7
 8000646:	0018      	movs	r0, r3
 8000648:	f001 fa8e 	bl	8001b68 <HAL_RCCEx_PeriphCLKConfig>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000650:	f000 f8d2 	bl	80007f8 <Error_Handler>
  }
}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b01d      	add	sp, #116	; 0x74
 800065a:	bd90      	pop	{r4, r7, pc}
 800065c:	40007000 	.word	0x40007000
 8000660:	ffffe7ff 	.word	0xffffe7ff

08000664 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	0018      	movs	r0, r3
 800066e:	2314      	movs	r3, #20
 8000670:	001a      	movs	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	f002 fd26 	bl	80030c4 <memset>
  RTC_DateTypeDef sDate = {0};
 8000678:	003b      	movs	r3, r7
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800067e:	4b29      	ldr	r3, [pc, #164]	; (8000724 <MX_RTC_Init+0xc0>)
 8000680:	4a29      	ldr	r2, [pc, #164]	; (8000728 <MX_RTC_Init+0xc4>)
 8000682:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000684:	4b27      	ldr	r3, [pc, #156]	; (8000724 <MX_RTC_Init+0xc0>)
 8000686:	2200      	movs	r2, #0
 8000688:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800068a:	4b26      	ldr	r3, [pc, #152]	; (8000724 <MX_RTC_Init+0xc0>)
 800068c:	227f      	movs	r2, #127	; 0x7f
 800068e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <MX_RTC_Init+0xc0>)
 8000692:	22ff      	movs	r2, #255	; 0xff
 8000694:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000696:	4b23      	ldr	r3, [pc, #140]	; (8000724 <MX_RTC_Init+0xc0>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <MX_RTC_Init+0xc0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006a2:	4b20      	ldr	r3, [pc, #128]	; (8000724 <MX_RTC_Init+0xc0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <MX_RTC_Init+0xc0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006ae:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <MX_RTC_Init+0xc0>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f001 fbe7 	bl	8001e84 <HAL_RTC_Init>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80006ba:	f000 f89d 	bl	80007f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x15;
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2215      	movs	r2, #21
 80006c2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x20;
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2220      	movs	r2, #32
 80006c8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x10;
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2210      	movs	r2, #16
 80006ce:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006dc:	1d39      	adds	r1, r7, #4
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_RTC_Init+0xc0>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	0018      	movs	r0, r3
 80006e4:	f001 fc6a 	bl	8001fbc <HAL_RTC_SetTime>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80006ec:	f000 f884 	bl	80007f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80006f0:	003b      	movs	r3, r7
 80006f2:	2203      	movs	r2, #3
 80006f4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_MARCH;
 80006f6:	003b      	movs	r3, r7
 80006f8:	2203      	movs	r2, #3
 80006fa:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x27;
 80006fc:	003b      	movs	r3, r7
 80006fe:	2227      	movs	r2, #39	; 0x27
 8000700:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x24;
 8000702:	003b      	movs	r3, r7
 8000704:	2224      	movs	r2, #36	; 0x24
 8000706:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000708:	0039      	movs	r1, r7
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_RTC_Init+0xc0>)
 800070c:	2201      	movs	r2, #1
 800070e:	0018      	movs	r0, r3
 8000710:	f001 fd5c 	bl	80021cc <HAL_RTC_SetDate>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000718:	f000 f86e 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b006      	add	sp, #24
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200000b8 	.word	0x200000b8
 8000728:	40002800 	.word	0x40002800

0800072c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_USART1_UART_Init+0x58>)
 8000732:	4a15      	ldr	r2, [pc, #84]	; (8000788 <MX_USART1_UART_Init+0x5c>)
 8000734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_USART1_UART_Init+0x58>)
 8000738:	22e1      	movs	r2, #225	; 0xe1
 800073a:	0252      	lsls	r2, r2, #9
 800073c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART1_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_USART1_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART1_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART1_UART_Init+0x58>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART1_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART1_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART1_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART1_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <MX_USART1_UART_Init+0x58>)
 8000770:	0018      	movs	r0, r3
 8000772:	f001 fee5 	bl	8002540 <HAL_UART_Init>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 f83d 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200000dc 	.word	0x200000dc
 8000788:	40013800 	.word	0x40013800

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	0018      	movs	r0, r3
 8000796:	2314      	movs	r3, #20
 8000798:	001a      	movs	r2, r3
 800079a:	2100      	movs	r1, #0
 800079c:	f002 fc92 	bl	80030c4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_GPIO_Init+0x68>)
 80007a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_GPIO_Init+0x68>)
 80007a6:	2101      	movs	r1, #1
 80007a8:	430a      	orrs	r2, r1
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_GPIO_Init+0x68>)
 80007ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b0:	2201      	movs	r2, #1
 80007b2:	4013      	ands	r3, r2
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 80007b8:	23a0      	movs	r3, #160	; 0xa0
 80007ba:	05db      	lsls	r3, r3, #23
 80007bc:	2200      	movs	r2, #0
 80007be:	2120      	movs	r1, #32
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 fbcb 	bl	8000f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2220      	movs	r2, #32
 80007ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2201      	movs	r2, #1
 80007d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 80007de:	1d3a      	adds	r2, r7, #4
 80007e0:	23a0      	movs	r3, #160	; 0xa0
 80007e2:	05db      	lsls	r3, r3, #23
 80007e4:	0011      	movs	r1, r2
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 fa42 	bl	8000c70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b006      	add	sp, #24
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40021000 	.word	0x40021000

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	e7fe      	b.n	8000800 <Error_Handler+0x8>
	...

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <HAL_MspInit+0x24>)
 800080a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_MspInit+0x24>)
 800080e:	2101      	movs	r1, #1
 8000810:	430a      	orrs	r2, r1
 8000812:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000814:	4b04      	ldr	r3, [pc, #16]	; (8000828 <HAL_MspInit+0x24>)
 8000816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <HAL_MspInit+0x24>)
 800081a:	2180      	movs	r1, #128	; 0x80
 800081c:	0549      	lsls	r1, r1, #21
 800081e:	430a      	orrs	r2, r1
 8000820:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40021000 	.word	0x40021000

0800082c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <HAL_RTC_MspInit+0x28>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d106      	bne.n	800084c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_RTC_MspInit+0x2c>)
 8000840:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_RTC_MspInit+0x2c>)
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	02c9      	lsls	r1, r1, #11
 8000848:	430a      	orrs	r2, r1
 800084a:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b002      	add	sp, #8
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40002800 	.word	0x40002800
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b089      	sub	sp, #36	; 0x24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	240c      	movs	r4, #12
 8000866:	193b      	adds	r3, r7, r4
 8000868:	0018      	movs	r0, r3
 800086a:	2314      	movs	r3, #20
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f002 fc28 	bl	80030c4 <memset>
  if(huart->Instance==USART1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a18      	ldr	r2, [pc, #96]	; (80008dc <HAL_UART_MspInit+0x80>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d12a      	bne.n	80008d4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <HAL_UART_MspInit+0x84>)
 8000880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <HAL_UART_MspInit+0x84>)
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	01c9      	lsls	r1, r1, #7
 8000888:	430a      	orrs	r2, r1
 800088a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <HAL_UART_MspInit+0x84>)
 800088e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <HAL_UART_MspInit+0x84>)
 8000892:	2101      	movs	r1, #1
 8000894:	430a      	orrs	r2, r1
 8000896:	62da      	str	r2, [r3, #44]	; 0x2c
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <HAL_UART_MspInit+0x84>)
 800089a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089c:	2201      	movs	r2, #1
 800089e:	4013      	ands	r3, r2
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_USART1_TX_Pin|BSP_USART1_RX_Pin;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	22c0      	movs	r2, #192	; 0xc0
 80008a8:	00d2      	lsls	r2, r2, #3
 80008aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	0021      	movs	r1, r4
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2202      	movs	r2, #2
 80008b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2203      	movs	r2, #3
 80008be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2204      	movs	r2, #4
 80008c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	187a      	adds	r2, r7, r1
 80008c8:	23a0      	movs	r3, #160	; 0xa0
 80008ca:	05db      	lsls	r3, r3, #23
 80008cc:	0011      	movs	r1, r2
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 f9ce 	bl	8000c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b009      	add	sp, #36	; 0x24
 80008da:	bd90      	pop	{r4, r7, pc}
 80008dc:	40013800 	.word	0x40013800
 80008e0:	40021000 	.word	0x40021000

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e8:	e7fe      	b.n	80008e8 <NMI_Handler+0x4>

080008ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <HardFault_Handler+0x4>

080008f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000908:	f000 f8be 	bl	8000a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800091c:	4a14      	ldr	r2, [pc, #80]	; (8000970 <_sbrk+0x5c>)
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <_sbrk+0x60>)
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <_sbrk+0x64>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <_sbrk+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	18d3      	adds	r3, r2, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	429a      	cmp	r2, r3
 8000942:	d207      	bcs.n	8000954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000944:	f002 fbc6 	bl	80030d4 <__errno>
 8000948:	0003      	movs	r3, r0
 800094a:	220c      	movs	r2, #12
 800094c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800094e:	2301      	movs	r3, #1
 8000950:	425b      	negs	r3, r3
 8000952:	e009      	b.n	8000968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095a:	4b07      	ldr	r3, [pc, #28]	; (8000978 <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	18d2      	adds	r2, r2, r3
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <_sbrk+0x64>)
 8000964:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	0018      	movs	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	b006      	add	sp, #24
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20002000 	.word	0x20002000
 8000974:	00000400 	.word	0x00000400
 8000978:	20000164 	.word	0x20000164
 800097c:	200002b8 	.word	0x200002b8

08000980 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800098e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000990:	f7ff fff6 	bl	8000980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000996:	490d      	ldr	r1, [pc, #52]	; (80009cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000998:	4a0d      	ldr	r2, [pc, #52]	; (80009d0 <LoopForever+0xe>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800099c:	e002      	b.n	80009a4 <LoopCopyDataInit>

0800099e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a2:	3304      	adds	r3, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a8:	d3f9      	bcc.n	800099e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009ac:	4c0a      	ldr	r4, [pc, #40]	; (80009d8 <LoopForever+0x16>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b0:	e001      	b.n	80009b6 <LoopFillZerobss>

080009b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b4:	3204      	adds	r2, #4

080009b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b8:	d3fb      	bcc.n	80009b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ba:	f002 fb91 	bl	80030e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009be:	f7ff fd7d 	bl	80004bc <main>

080009c2 <LoopForever>:

LoopForever:
    b LoopForever
 80009c2:	e7fe      	b.n	80009c2 <LoopForever>
  ldr   r0, =_estack
 80009c4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009cc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009d0:	08003ac8 	.word	0x08003ac8
  ldr r2, =_sbss
 80009d4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009d8:	200002b4 	.word	0x200002b4

080009dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC1_COMP_IRQHandler>
	...

080009e0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_Init+0x3c>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_Init+0x3c>)
 80009f2:	2140      	movs	r1, #64	; 0x40
 80009f4:	430a      	orrs	r2, r1
 80009f6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 f811 	bl	8000a20 <HAL_InitTick>
 80009fe:	1e03      	subs	r3, r0, #0
 8000a00:	d003      	beq.n	8000a0a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
 8000a08:	e001      	b.n	8000a0e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a0a:	f7ff fefb 	bl	8000804 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	781b      	ldrb	r3, [r3, #0]
}
 8000a12:	0018      	movs	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b002      	add	sp, #8
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	40022000 	.word	0x40022000

08000a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <HAL_InitTick+0x5c>)
 8000a2a:	681c      	ldr	r4, [r3, #0]
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <HAL_InitTick+0x60>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	0019      	movs	r1, r3
 8000a32:	23fa      	movs	r3, #250	; 0xfa
 8000a34:	0098      	lsls	r0, r3, #2
 8000a36:	f7ff fb71 	bl	800011c <__udivsi3>
 8000a3a:	0003      	movs	r3, r0
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	0020      	movs	r0, r4
 8000a40:	f7ff fb6c 	bl	800011c <__udivsi3>
 8000a44:	0003      	movs	r3, r0
 8000a46:	0018      	movs	r0, r3
 8000a48:	f000 f905 	bl	8000c56 <HAL_SYSTICK_Config>
 8000a4c:	1e03      	subs	r3, r0, #0
 8000a4e:	d001      	beq.n	8000a54 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	e00f      	b.n	8000a74 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	d80b      	bhi.n	8000a72 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	425b      	negs	r3, r3
 8000a60:	2200      	movs	r2, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 f8e2 	bl	8000c2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_InitTick+0x64>)
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e000      	b.n	8000a74 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	0018      	movs	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b003      	add	sp, #12
 8000a7a:	bd90      	pop	{r4, r7, pc}
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000004 	.word	0x20000004

08000a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HAL_IncTick+0x1c>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	001a      	movs	r2, r3
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <HAL_IncTick+0x20>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	18d2      	adds	r2, r2, r3
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <HAL_IncTick+0x20>)
 8000a9a:	601a      	str	r2, [r3, #0]
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000168 	.word	0x20000168

08000aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab0:	4b02      	ldr	r3, [pc, #8]	; (8000abc <HAL_GetTick+0x10>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	20000168 	.word	0x20000168

08000ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac8:	f7ff fff0 	bl	8000aac <HAL_GetTick>
 8000acc:	0003      	movs	r3, r0
 8000ace:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	d005      	beq.n	8000ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <HAL_Delay+0x44>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	001a      	movs	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	189b      	adds	r3, r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	f7ff ffe0 	bl	8000aac <HAL_GetTick>
 8000aec:	0002      	movs	r2, r0
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d8f7      	bhi.n	8000ae8 <HAL_Delay+0x28>
  {
  }
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b004      	add	sp, #16
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	20000008 	.word	0x20000008

08000b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	0002      	movs	r2, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b1c:	d828      	bhi.n	8000b70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1e:	4a2f      	ldr	r2, [pc, #188]	; (8000bdc <__NVIC_SetPriority+0xd4>)
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	089b      	lsrs	r3, r3, #2
 8000b28:	33c0      	adds	r3, #192	; 0xc0
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	589b      	ldr	r3, [r3, r2]
 8000b2e:	1dfa      	adds	r2, r7, #7
 8000b30:	7812      	ldrb	r2, [r2, #0]
 8000b32:	0011      	movs	r1, r2
 8000b34:	2203      	movs	r2, #3
 8000b36:	400a      	ands	r2, r1
 8000b38:	00d2      	lsls	r2, r2, #3
 8000b3a:	21ff      	movs	r1, #255	; 0xff
 8000b3c:	4091      	lsls	r1, r2
 8000b3e:	000a      	movs	r2, r1
 8000b40:	43d2      	mvns	r2, r2
 8000b42:	401a      	ands	r2, r3
 8000b44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	019b      	lsls	r3, r3, #6
 8000b4a:	22ff      	movs	r2, #255	; 0xff
 8000b4c:	401a      	ands	r2, r3
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	0018      	movs	r0, r3
 8000b54:	2303      	movs	r3, #3
 8000b56:	4003      	ands	r3, r0
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5c:	481f      	ldr	r0, [pc, #124]	; (8000bdc <__NVIC_SetPriority+0xd4>)
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	b25b      	sxtb	r3, r3
 8000b64:	089b      	lsrs	r3, r3, #2
 8000b66:	430a      	orrs	r2, r1
 8000b68:	33c0      	adds	r3, #192	; 0xc0
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b6e:	e031      	b.n	8000bd4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b70:	4a1b      	ldr	r2, [pc, #108]	; (8000be0 <__NVIC_SetPriority+0xd8>)
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	0019      	movs	r1, r3
 8000b78:	230f      	movs	r3, #15
 8000b7a:	400b      	ands	r3, r1
 8000b7c:	3b08      	subs	r3, #8
 8000b7e:	089b      	lsrs	r3, r3, #2
 8000b80:	3306      	adds	r3, #6
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	18d3      	adds	r3, r2, r3
 8000b86:	3304      	adds	r3, #4
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	1dfa      	adds	r2, r7, #7
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	0011      	movs	r1, r2
 8000b90:	2203      	movs	r2, #3
 8000b92:	400a      	ands	r2, r1
 8000b94:	00d2      	lsls	r2, r2, #3
 8000b96:	21ff      	movs	r1, #255	; 0xff
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	000a      	movs	r2, r1
 8000b9c:	43d2      	mvns	r2, r2
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	019b      	lsls	r3, r3, #6
 8000ba6:	22ff      	movs	r2, #255	; 0xff
 8000ba8:	401a      	ands	r2, r3
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	0018      	movs	r0, r3
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	4003      	ands	r3, r0
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb8:	4809      	ldr	r0, [pc, #36]	; (8000be0 <__NVIC_SetPriority+0xd8>)
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	001c      	movs	r4, r3
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	4023      	ands	r3, r4
 8000bc4:	3b08      	subs	r3, #8
 8000bc6:	089b      	lsrs	r3, r3, #2
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	3306      	adds	r3, #6
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	18c3      	adds	r3, r0, r3
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	601a      	str	r2, [r3, #0]
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b003      	add	sp, #12
 8000bda:	bd90      	pop	{r4, r7, pc}
 8000bdc:	e000e100 	.word	0xe000e100
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	1e5a      	subs	r2, r3, #1
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	045b      	lsls	r3, r3, #17
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d301      	bcc.n	8000bfc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e010      	b.n	8000c1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <SysTick_Config+0x44>)
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	3a01      	subs	r2, #1
 8000c02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c04:	2301      	movs	r3, #1
 8000c06:	425b      	negs	r3, r3
 8000c08:	2103      	movs	r1, #3
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f7ff ff7c 	bl	8000b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <SysTick_Config+0x44>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <SysTick_Config+0x44>)
 8000c18:	2207      	movs	r2, #7
 8000c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	0018      	movs	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b002      	add	sp, #8
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	e000e010 	.word	0xe000e010

08000c2c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	210f      	movs	r1, #15
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	1c02      	adds	r2, r0, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b25b      	sxtb	r3, r3
 8000c46:	0011      	movs	r1, r2
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff ff5d 	bl	8000b08 <__NVIC_SetPriority>
}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b004      	add	sp, #16
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff ffbf 	bl	8000be4 <SysTick_Config>
 8000c66:	0003      	movs	r3, r0
}
 8000c68:	0018      	movs	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b002      	add	sp, #8
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c86:	e14f      	b.n	8000f28 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	4091      	lsls	r1, r2
 8000c92:	000a      	movs	r2, r1
 8000c94:	4013      	ands	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d100      	bne.n	8000ca0 <HAL_GPIO_Init+0x30>
 8000c9e:	e140      	b.n	8000f22 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d005      	beq.n	8000cb8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d130      	bne.n	8000d1a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	409a      	lsls	r2, r3
 8000cc6:	0013      	movs	r3, r2
 8000cc8:	43da      	mvns	r2, r3
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	409a      	lsls	r2, r3
 8000cda:	0013      	movs	r3, r2
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cee:	2201      	movs	r2, #1
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
 8000cf4:	0013      	movs	r3, r2
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	091b      	lsrs	r3, r3, #4
 8000d04:	2201      	movs	r2, #1
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2203      	movs	r2, #3
 8000d20:	4013      	ands	r3, r2
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	d017      	beq.n	8000d56 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	2203      	movs	r2, #3
 8000d32:	409a      	lsls	r2, r3
 8000d34:	0013      	movs	r3, r2
 8000d36:	43da      	mvns	r2, r3
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d123      	bne.n	8000daa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	08da      	lsrs	r2, r3, #3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3208      	adds	r2, #8
 8000d6a:	0092      	lsls	r2, r2, #2
 8000d6c:	58d3      	ldr	r3, [r2, r3]
 8000d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	2207      	movs	r2, #7
 8000d74:	4013      	ands	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	220f      	movs	r2, #15
 8000d7a:	409a      	lsls	r2, r3
 8000d7c:	0013      	movs	r3, r2
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	691a      	ldr	r2, [r3, #16]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	2107      	movs	r1, #7
 8000d8e:	400b      	ands	r3, r1
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	409a      	lsls	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	08da      	lsrs	r2, r3, #3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3208      	adds	r2, #8
 8000da4:	0092      	lsls	r2, r2, #2
 8000da6:	6939      	ldr	r1, [r7, #16]
 8000da8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	2203      	movs	r2, #3
 8000db6:	409a      	lsls	r2, r3
 8000db8:	0013      	movs	r3, r2
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	401a      	ands	r2, r3
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	0013      	movs	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	23c0      	movs	r3, #192	; 0xc0
 8000de4:	029b      	lsls	r3, r3, #10
 8000de6:	4013      	ands	r3, r2
 8000de8:	d100      	bne.n	8000dec <HAL_GPIO_Init+0x17c>
 8000dea:	e09a      	b.n	8000f22 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dec:	4b54      	ldr	r3, [pc, #336]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000df0:	4b53      	ldr	r3, [pc, #332]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000df2:	2101      	movs	r1, #1
 8000df4:	430a      	orrs	r2, r1
 8000df6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000df8:	4a52      	ldr	r2, [pc, #328]	; (8000f44 <HAL_GPIO_Init+0x2d4>)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	3302      	adds	r3, #2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	589b      	ldr	r3, [r3, r2]
 8000e04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	2203      	movs	r2, #3
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	220f      	movs	r2, #15
 8000e10:	409a      	lsls	r2, r3
 8000e12:	0013      	movs	r3, r2
 8000e14:	43da      	mvns	r2, r3
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	23a0      	movs	r3, #160	; 0xa0
 8000e20:	05db      	lsls	r3, r3, #23
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d019      	beq.n	8000e5a <HAL_GPIO_Init+0x1ea>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a47      	ldr	r2, [pc, #284]	; (8000f48 <HAL_GPIO_Init+0x2d8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d013      	beq.n	8000e56 <HAL_GPIO_Init+0x1e6>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a46      	ldr	r2, [pc, #280]	; (8000f4c <HAL_GPIO_Init+0x2dc>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00d      	beq.n	8000e52 <HAL_GPIO_Init+0x1e2>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a45      	ldr	r2, [pc, #276]	; (8000f50 <HAL_GPIO_Init+0x2e0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x1de>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a44      	ldr	r2, [pc, #272]	; (8000f54 <HAL_GPIO_Init+0x2e4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_GPIO_Init+0x1da>
 8000e46:	2305      	movs	r3, #5
 8000e48:	e008      	b.n	8000e5c <HAL_GPIO_Init+0x1ec>
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	e006      	b.n	8000e5c <HAL_GPIO_Init+0x1ec>
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e004      	b.n	8000e5c <HAL_GPIO_Init+0x1ec>
 8000e52:	2302      	movs	r3, #2
 8000e54:	e002      	b.n	8000e5c <HAL_GPIO_Init+0x1ec>
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <HAL_GPIO_Init+0x1ec>
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	2103      	movs	r1, #3
 8000e60:	400a      	ands	r2, r1
 8000e62:	0092      	lsls	r2, r2, #2
 8000e64:	4093      	lsls	r3, r2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e6c:	4935      	ldr	r1, [pc, #212]	; (8000f44 <HAL_GPIO_Init+0x2d4>)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	089b      	lsrs	r3, r3, #2
 8000e72:	3302      	adds	r3, #2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e7a:	4b37      	ldr	r3, [pc, #220]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	43da      	mvns	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	035b      	lsls	r3, r3, #13
 8000e92:	4013      	ands	r3, r2
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	43da      	mvns	r2, r3
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	039b      	lsls	r3, r3, #14
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ec8:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000ece:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	029b      	lsls	r3, r3, #10
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	43da      	mvns	r2, r3
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	025b      	lsls	r3, r3, #9
 8000f10:	4013      	ands	r3, r2
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3301      	adds	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	40da      	lsrs	r2, r3
 8000f30:	1e13      	subs	r3, r2, #0
 8000f32:	d000      	beq.n	8000f36 <HAL_GPIO_Init+0x2c6>
 8000f34:	e6a8      	b.n	8000c88 <HAL_GPIO_Init+0x18>
  }
}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b006      	add	sp, #24
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010000 	.word	0x40010000
 8000f48:	50000400 	.word	0x50000400
 8000f4c:	50000800 	.word	0x50000800
 8000f50:	50000c00 	.word	0x50000c00
 8000f54:	50001c00 	.word	0x50001c00
 8000f58:	40010400 	.word	0x40010400

08000f5c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	0008      	movs	r0, r1
 8000f66:	0011      	movs	r1, r2
 8000f68:	1cbb      	adds	r3, r7, #2
 8000f6a:	1c02      	adds	r2, r0, #0
 8000f6c:	801a      	strh	r2, [r3, #0]
 8000f6e:	1c7b      	adds	r3, r7, #1
 8000f70:	1c0a      	adds	r2, r1, #0
 8000f72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f74:	1c7b      	adds	r3, r7, #1
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d004      	beq.n	8000f86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f7c:	1cbb      	adds	r3, r7, #2
 8000f7e:	881a      	ldrh	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000f84:	e003      	b.n	8000f8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000f86:	1cbb      	adds	r3, r7, #2
 8000f88:	881a      	ldrh	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b002      	add	sp, #8
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d102      	bne.n	8000fac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	f000 fbaf 	bl	800170a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fac:	4bcf      	ldr	r3, [pc, #828]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	220c      	movs	r2, #12
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fb6:	4bcd      	ldr	r3, [pc, #820]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	025b      	lsls	r3, r3, #9
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d100      	bne.n	8000fce <HAL_RCC_OscConfig+0x36>
 8000fcc:	e07e      	b.n	80010cc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fce:	6a3b      	ldr	r3, [r7, #32]
 8000fd0:	2b08      	cmp	r3, #8
 8000fd2:	d007      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
 8000fd6:	2b0c      	cmp	r3, #12
 8000fd8:	d112      	bne.n	8001000 <HAL_RCC_OscConfig+0x68>
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	025b      	lsls	r3, r3, #9
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d10d      	bne.n	8001000 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe4:	4bc1      	ldr	r3, [pc, #772]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	029b      	lsls	r3, r3, #10
 8000fec:	4013      	ands	r3, r2
 8000fee:	d100      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x5a>
 8000ff0:	e06b      	b.n	80010ca <HAL_RCC_OscConfig+0x132>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d167      	bne.n	80010ca <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f000 fb85 	bl	800170a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	025b      	lsls	r3, r3, #9
 8001008:	429a      	cmp	r2, r3
 800100a:	d107      	bne.n	800101c <HAL_RCC_OscConfig+0x84>
 800100c:	4bb7      	ldr	r3, [pc, #732]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4bb6      	ldr	r3, [pc, #728]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 8001012:	2180      	movs	r1, #128	; 0x80
 8001014:	0249      	lsls	r1, r1, #9
 8001016:	430a      	orrs	r2, r1
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	e027      	b.n	800106c <HAL_RCC_OscConfig+0xd4>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	23a0      	movs	r3, #160	; 0xa0
 8001022:	02db      	lsls	r3, r3, #11
 8001024:	429a      	cmp	r2, r3
 8001026:	d10e      	bne.n	8001046 <HAL_RCC_OscConfig+0xae>
 8001028:	4bb0      	ldr	r3, [pc, #704]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4baf      	ldr	r3, [pc, #700]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 800102e:	2180      	movs	r1, #128	; 0x80
 8001030:	02c9      	lsls	r1, r1, #11
 8001032:	430a      	orrs	r2, r1
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	4bad      	ldr	r3, [pc, #692]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4bac      	ldr	r3, [pc, #688]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 800103c:	2180      	movs	r1, #128	; 0x80
 800103e:	0249      	lsls	r1, r1, #9
 8001040:	430a      	orrs	r2, r1
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	e012      	b.n	800106c <HAL_RCC_OscConfig+0xd4>
 8001046:	4ba9      	ldr	r3, [pc, #676]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4ba8      	ldr	r3, [pc, #672]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 800104c:	49a8      	ldr	r1, [pc, #672]	; (80012f0 <HAL_RCC_OscConfig+0x358>)
 800104e:	400a      	ands	r2, r1
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	4ba6      	ldr	r3, [pc, #664]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	025b      	lsls	r3, r3, #9
 800105a:	4013      	ands	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4ba2      	ldr	r3, [pc, #648]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4ba1      	ldr	r3, [pc, #644]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 8001066:	49a3      	ldr	r1, [pc, #652]	; (80012f4 <HAL_RCC_OscConfig+0x35c>)
 8001068:	400a      	ands	r2, r1
 800106a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d015      	beq.n	80010a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fd1a 	bl	8000aac <HAL_GetTick>
 8001078:	0003      	movs	r3, r0
 800107a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800107c:	e009      	b.n	8001092 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800107e:	f7ff fd15 	bl	8000aac <HAL_GetTick>
 8001082:	0002      	movs	r2, r0
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b64      	cmp	r3, #100	; 0x64
 800108a:	d902      	bls.n	8001092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	f000 fb3c 	bl	800170a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001092:	4b96      	ldr	r3, [pc, #600]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	2380      	movs	r3, #128	; 0x80
 8001098:	029b      	lsls	r3, r3, #10
 800109a:	4013      	ands	r3, r2
 800109c:	d0ef      	beq.n	800107e <HAL_RCC_OscConfig+0xe6>
 800109e:	e015      	b.n	80010cc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fd04 	bl	8000aac <HAL_GetTick>
 80010a4:	0003      	movs	r3, r0
 80010a6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010aa:	f7ff fcff 	bl	8000aac <HAL_GetTick>
 80010ae:	0002      	movs	r2, r0
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b64      	cmp	r3, #100	; 0x64
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e326      	b.n	800170a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010bc:	4b8b      	ldr	r3, [pc, #556]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	029b      	lsls	r3, r3, #10
 80010c4:	4013      	ands	r3, r2
 80010c6:	d1f0      	bne.n	80010aa <HAL_RCC_OscConfig+0x112>
 80010c8:	e000      	b.n	80010cc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2202      	movs	r2, #2
 80010d2:	4013      	ands	r3, r2
 80010d4:	d100      	bne.n	80010d8 <HAL_RCC_OscConfig+0x140>
 80010d6:	e08b      	b.n	80011f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010de:	6a3b      	ldr	r3, [r7, #32]
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d005      	beq.n	80010f0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	2b0c      	cmp	r3, #12
 80010e8:	d13e      	bne.n	8001168 <HAL_RCC_OscConfig+0x1d0>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d13b      	bne.n	8001168 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80010f0:	4b7e      	ldr	r3, [pc, #504]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2204      	movs	r2, #4
 80010f6:	4013      	ands	r3, r2
 80010f8:	d004      	beq.n	8001104 <HAL_RCC_OscConfig+0x16c>
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e302      	b.n	800170a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001104:	4b79      	ldr	r3, [pc, #484]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	4a7b      	ldr	r2, [pc, #492]	; (80012f8 <HAL_RCC_OscConfig+0x360>)
 800110a:	4013      	ands	r3, r2
 800110c:	0019      	movs	r1, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	021a      	lsls	r2, r3, #8
 8001114:	4b75      	ldr	r3, [pc, #468]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 8001116:	430a      	orrs	r2, r1
 8001118:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800111a:	4b74      	ldr	r3, [pc, #464]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2209      	movs	r2, #9
 8001120:	4393      	bics	r3, r2
 8001122:	0019      	movs	r1, r3
 8001124:	4b71      	ldr	r3, [pc, #452]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	430a      	orrs	r2, r1
 800112a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800112c:	f000 fc40 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 8001130:	0001      	movs	r1, r0
 8001132:	4b6e      	ldr	r3, [pc, #440]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	091b      	lsrs	r3, r3, #4
 8001138:	220f      	movs	r2, #15
 800113a:	4013      	ands	r3, r2
 800113c:	4a6f      	ldr	r2, [pc, #444]	; (80012fc <HAL_RCC_OscConfig+0x364>)
 800113e:	5cd3      	ldrb	r3, [r2, r3]
 8001140:	000a      	movs	r2, r1
 8001142:	40da      	lsrs	r2, r3
 8001144:	4b6e      	ldr	r3, [pc, #440]	; (8001300 <HAL_RCC_OscConfig+0x368>)
 8001146:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001148:	4b6e      	ldr	r3, [pc, #440]	; (8001304 <HAL_RCC_OscConfig+0x36c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2513      	movs	r5, #19
 800114e:	197c      	adds	r4, r7, r5
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff fc65 	bl	8000a20 <HAL_InitTick>
 8001156:	0003      	movs	r3, r0
 8001158:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800115a:	197b      	adds	r3, r7, r5
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d046      	beq.n	80011f0 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001162:	197b      	adds	r3, r7, r5
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	e2d0      	b.n	800170a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d027      	beq.n	80011be <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800116e:	4b5f      	ldr	r3, [pc, #380]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2209      	movs	r2, #9
 8001174:	4393      	bics	r3, r2
 8001176:	0019      	movs	r1, r3
 8001178:	4b5c      	ldr	r3, [pc, #368]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	430a      	orrs	r2, r1
 800117e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001180:	f7ff fc94 	bl	8000aac <HAL_GetTick>
 8001184:	0003      	movs	r3, r0
 8001186:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800118a:	f7ff fc8f 	bl	8000aac <HAL_GetTick>
 800118e:	0002      	movs	r2, r0
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e2b6      	b.n	800170a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800119c:	4b53      	ldr	r3, [pc, #332]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2204      	movs	r2, #4
 80011a2:	4013      	ands	r3, r2
 80011a4:	d0f1      	beq.n	800118a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a6:	4b51      	ldr	r3, [pc, #324]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	4a53      	ldr	r2, [pc, #332]	; (80012f8 <HAL_RCC_OscConfig+0x360>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	0019      	movs	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	021a      	lsls	r2, r3, #8
 80011b6:	4b4d      	ldr	r3, [pc, #308]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 80011b8:	430a      	orrs	r2, r1
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	e018      	b.n	80011f0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011be:	4b4b      	ldr	r3, [pc, #300]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b4a      	ldr	r3, [pc, #296]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 80011c4:	2101      	movs	r1, #1
 80011c6:	438a      	bics	r2, r1
 80011c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ca:	f7ff fc6f 	bl	8000aac <HAL_GetTick>
 80011ce:	0003      	movs	r3, r0
 80011d0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d4:	f7ff fc6a 	bl	8000aac <HAL_GetTick>
 80011d8:	0002      	movs	r2, r0
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e291      	b.n	800170a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011e6:	4b41      	ldr	r3, [pc, #260]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2204      	movs	r2, #4
 80011ec:	4013      	ands	r3, r2
 80011ee:	d1f1      	bne.n	80011d4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2210      	movs	r2, #16
 80011f6:	4013      	ands	r3, r2
 80011f8:	d100      	bne.n	80011fc <HAL_RCC_OscConfig+0x264>
 80011fa:	e0a1      	b.n	8001340 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011fc:	6a3b      	ldr	r3, [r7, #32]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d140      	bne.n	8001284 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001202:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4013      	ands	r3, r2
 800120c:	d005      	beq.n	800121a <HAL_RCC_OscConfig+0x282>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e277      	b.n	800170a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800121a:	4b34      	ldr	r3, [pc, #208]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4a3a      	ldr	r2, [pc, #232]	; (8001308 <HAL_RCC_OscConfig+0x370>)
 8001220:	4013      	ands	r3, r2
 8001222:	0019      	movs	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001228:	4b30      	ldr	r3, [pc, #192]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 800122a:	430a      	orrs	r2, r1
 800122c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800122e:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	0a19      	lsrs	r1, r3, #8
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	061a      	lsls	r2, r3, #24
 800123c:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 800123e:	430a      	orrs	r2, r1
 8001240:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	0b5b      	lsrs	r3, r3, #13
 8001248:	3301      	adds	r3, #1
 800124a:	2280      	movs	r2, #128	; 0x80
 800124c:	0212      	lsls	r2, r2, #8
 800124e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001250:	4b26      	ldr	r3, [pc, #152]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	210f      	movs	r1, #15
 8001258:	400b      	ands	r3, r1
 800125a:	4928      	ldr	r1, [pc, #160]	; (80012fc <HAL_RCC_OscConfig+0x364>)
 800125c:	5ccb      	ldrb	r3, [r1, r3]
 800125e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <HAL_RCC_OscConfig+0x368>)
 8001262:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <HAL_RCC_OscConfig+0x36c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2513      	movs	r5, #19
 800126a:	197c      	adds	r4, r7, r5
 800126c:	0018      	movs	r0, r3
 800126e:	f7ff fbd7 	bl	8000a20 <HAL_InitTick>
 8001272:	0003      	movs	r3, r0
 8001274:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001276:	197b      	adds	r3, r7, r5
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d060      	beq.n	8001340 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800127e:	197b      	adds	r3, r7, r5
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	e242      	b.n	800170a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d03f      	beq.n	800130c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 8001292:	2180      	movs	r1, #128	; 0x80
 8001294:	0049      	lsls	r1, r1, #1
 8001296:	430a      	orrs	r2, r1
 8001298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129a:	f7ff fc07 	bl	8000aac <HAL_GetTick>
 800129e:	0003      	movs	r3, r0
 80012a0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012a4:	f7ff fc02 	bl	8000aac <HAL_GetTick>
 80012a8:	0002      	movs	r2, r0
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e229      	b.n	800170a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4013      	ands	r3, r2
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <HAL_RCC_OscConfig+0x370>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	0019      	movs	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 80012d2:	430a      	orrs	r2, r1
 80012d4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	0a19      	lsrs	r1, r3, #8
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	061a      	lsls	r2, r3, #24
 80012e4:	4b01      	ldr	r3, [pc, #4]	; (80012ec <HAL_RCC_OscConfig+0x354>)
 80012e6:	430a      	orrs	r2, r1
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	e029      	b.n	8001340 <HAL_RCC_OscConfig+0x3a8>
 80012ec:	40021000 	.word	0x40021000
 80012f0:	fffeffff 	.word	0xfffeffff
 80012f4:	fffbffff 	.word	0xfffbffff
 80012f8:	ffffe0ff 	.word	0xffffe0ff
 80012fc:	08003a18 	.word	0x08003a18
 8001300:	20000000 	.word	0x20000000
 8001304:	20000004 	.word	0x20000004
 8001308:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800130c:	4bbd      	ldr	r3, [pc, #756]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4bbc      	ldr	r3, [pc, #752]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001312:	49bd      	ldr	r1, [pc, #756]	; (8001608 <HAL_RCC_OscConfig+0x670>)
 8001314:	400a      	ands	r2, r1
 8001316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fbc8 	bl	8000aac <HAL_GetTick>
 800131c:	0003      	movs	r3, r0
 800131e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001322:	f7ff fbc3 	bl	8000aac <HAL_GetTick>
 8001326:	0002      	movs	r2, r0
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e1ea      	b.n	800170a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001334:	4bb3      	ldr	r3, [pc, #716]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4013      	ands	r3, r2
 800133e:	d1f0      	bne.n	8001322 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2208      	movs	r2, #8
 8001346:	4013      	ands	r3, r2
 8001348:	d036      	beq.n	80013b8 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d019      	beq.n	8001386 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001352:	4bac      	ldr	r3, [pc, #688]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001354:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001356:	4bab      	ldr	r3, [pc, #684]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001358:	2101      	movs	r1, #1
 800135a:	430a      	orrs	r2, r1
 800135c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135e:	f7ff fba5 	bl	8000aac <HAL_GetTick>
 8001362:	0003      	movs	r3, r0
 8001364:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001368:	f7ff fba0 	bl	8000aac <HAL_GetTick>
 800136c:	0002      	movs	r2, r0
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e1c7      	b.n	800170a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800137a:	4ba2      	ldr	r3, [pc, #648]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 800137c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800137e:	2202      	movs	r2, #2
 8001380:	4013      	ands	r3, r2
 8001382:	d0f1      	beq.n	8001368 <HAL_RCC_OscConfig+0x3d0>
 8001384:	e018      	b.n	80013b8 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001386:	4b9f      	ldr	r3, [pc, #636]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800138a:	4b9e      	ldr	r3, [pc, #632]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 800138c:	2101      	movs	r1, #1
 800138e:	438a      	bics	r2, r1
 8001390:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001392:	f7ff fb8b 	bl	8000aac <HAL_GetTick>
 8001396:	0003      	movs	r3, r0
 8001398:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139c:	f7ff fb86 	bl	8000aac <HAL_GetTick>
 80013a0:	0002      	movs	r2, r0
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e1ad      	b.n	800170a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013ae:	4b95      	ldr	r3, [pc, #596]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 80013b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013b2:	2202      	movs	r2, #2
 80013b4:	4013      	ands	r3, r2
 80013b6:	d1f1      	bne.n	800139c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2204      	movs	r2, #4
 80013be:	4013      	ands	r3, r2
 80013c0:	d100      	bne.n	80013c4 <HAL_RCC_OscConfig+0x42c>
 80013c2:	e0ae      	b.n	8001522 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013c4:	2027      	movs	r0, #39	; 0x27
 80013c6:	183b      	adds	r3, r7, r0
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013cc:	4b8d      	ldr	r3, [pc, #564]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 80013ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	055b      	lsls	r3, r3, #21
 80013d4:	4013      	ands	r3, r2
 80013d6:	d109      	bne.n	80013ec <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013d8:	4b8a      	ldr	r3, [pc, #552]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 80013da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013dc:	4b89      	ldr	r3, [pc, #548]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	0549      	lsls	r1, r1, #21
 80013e2:	430a      	orrs	r2, r1
 80013e4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80013e6:	183b      	adds	r3, r7, r0
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ec:	4b87      	ldr	r3, [pc, #540]	; (800160c <HAL_RCC_OscConfig+0x674>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4013      	ands	r3, r2
 80013f6:	d11a      	bne.n	800142e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f8:	4b84      	ldr	r3, [pc, #528]	; (800160c <HAL_RCC_OscConfig+0x674>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b83      	ldr	r3, [pc, #524]	; (800160c <HAL_RCC_OscConfig+0x674>)
 80013fe:	2180      	movs	r1, #128	; 0x80
 8001400:	0049      	lsls	r1, r1, #1
 8001402:	430a      	orrs	r2, r1
 8001404:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001406:	f7ff fb51 	bl	8000aac <HAL_GetTick>
 800140a:	0003      	movs	r3, r0
 800140c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001410:	f7ff fb4c 	bl	8000aac <HAL_GetTick>
 8001414:	0002      	movs	r2, r0
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	; 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e173      	b.n	800170a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001422:	4b7a      	ldr	r3, [pc, #488]	; (800160c <HAL_RCC_OscConfig+0x674>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4013      	ands	r3, r2
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	429a      	cmp	r2, r3
 8001438:	d107      	bne.n	800144a <HAL_RCC_OscConfig+0x4b2>
 800143a:	4b72      	ldr	r3, [pc, #456]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 800143c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800143e:	4b71      	ldr	r3, [pc, #452]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001440:	2180      	movs	r1, #128	; 0x80
 8001442:	0049      	lsls	r1, r1, #1
 8001444:	430a      	orrs	r2, r1
 8001446:	651a      	str	r2, [r3, #80]	; 0x50
 8001448:	e031      	b.n	80014ae <HAL_RCC_OscConfig+0x516>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10c      	bne.n	800146c <HAL_RCC_OscConfig+0x4d4>
 8001452:	4b6c      	ldr	r3, [pc, #432]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001456:	4b6b      	ldr	r3, [pc, #428]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001458:	496b      	ldr	r1, [pc, #428]	; (8001608 <HAL_RCC_OscConfig+0x670>)
 800145a:	400a      	ands	r2, r1
 800145c:	651a      	str	r2, [r3, #80]	; 0x50
 800145e:	4b69      	ldr	r3, [pc, #420]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001460:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001462:	4b68      	ldr	r3, [pc, #416]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001464:	496a      	ldr	r1, [pc, #424]	; (8001610 <HAL_RCC_OscConfig+0x678>)
 8001466:	400a      	ands	r2, r1
 8001468:	651a      	str	r2, [r3, #80]	; 0x50
 800146a:	e020      	b.n	80014ae <HAL_RCC_OscConfig+0x516>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	23a0      	movs	r3, #160	; 0xa0
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	429a      	cmp	r2, r3
 8001476:	d10e      	bne.n	8001496 <HAL_RCC_OscConfig+0x4fe>
 8001478:	4b62      	ldr	r3, [pc, #392]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 800147a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800147c:	4b61      	ldr	r3, [pc, #388]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 800147e:	2180      	movs	r1, #128	; 0x80
 8001480:	00c9      	lsls	r1, r1, #3
 8001482:	430a      	orrs	r2, r1
 8001484:	651a      	str	r2, [r3, #80]	; 0x50
 8001486:	4b5f      	ldr	r3, [pc, #380]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001488:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800148a:	4b5e      	ldr	r3, [pc, #376]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 800148c:	2180      	movs	r1, #128	; 0x80
 800148e:	0049      	lsls	r1, r1, #1
 8001490:	430a      	orrs	r2, r1
 8001492:	651a      	str	r2, [r3, #80]	; 0x50
 8001494:	e00b      	b.n	80014ae <HAL_RCC_OscConfig+0x516>
 8001496:	4b5b      	ldr	r3, [pc, #364]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800149a:	4b5a      	ldr	r3, [pc, #360]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 800149c:	495a      	ldr	r1, [pc, #360]	; (8001608 <HAL_RCC_OscConfig+0x670>)
 800149e:	400a      	ands	r2, r1
 80014a0:	651a      	str	r2, [r3, #80]	; 0x50
 80014a2:	4b58      	ldr	r3, [pc, #352]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 80014a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014a6:	4b57      	ldr	r3, [pc, #348]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 80014a8:	4959      	ldr	r1, [pc, #356]	; (8001610 <HAL_RCC_OscConfig+0x678>)
 80014aa:	400a      	ands	r2, r1
 80014ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d015      	beq.n	80014e2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b6:	f7ff faf9 	bl	8000aac <HAL_GetTick>
 80014ba:	0003      	movs	r3, r0
 80014bc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014be:	e009      	b.n	80014d4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c0:	f7ff faf4 	bl	8000aac <HAL_GetTick>
 80014c4:	0002      	movs	r2, r0
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	4a52      	ldr	r2, [pc, #328]	; (8001614 <HAL_RCC_OscConfig+0x67c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e11a      	b.n	800170a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014d4:	4b4b      	ldr	r3, [pc, #300]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 80014d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4013      	ands	r3, r2
 80014de:	d0ef      	beq.n	80014c0 <HAL_RCC_OscConfig+0x528>
 80014e0:	e014      	b.n	800150c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fae3 	bl	8000aac <HAL_GetTick>
 80014e6:	0003      	movs	r3, r0
 80014e8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014ea:	e009      	b.n	8001500 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ec:	f7ff fade 	bl	8000aac <HAL_GetTick>
 80014f0:	0002      	movs	r2, r0
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	4a47      	ldr	r2, [pc, #284]	; (8001614 <HAL_RCC_OscConfig+0x67c>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e104      	b.n	800170a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001500:	4b40      	ldr	r3, [pc, #256]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001502:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4013      	ands	r3, r2
 800150a:	d1ef      	bne.n	80014ec <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800150c:	2327      	movs	r3, #39	; 0x27
 800150e:	18fb      	adds	r3, r7, r3
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d105      	bne.n	8001522 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001516:	4b3b      	ldr	r3, [pc, #236]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800151a:	4b3a      	ldr	r3, [pc, #232]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 800151c:	493e      	ldr	r1, [pc, #248]	; (8001618 <HAL_RCC_OscConfig+0x680>)
 800151e:	400a      	ands	r2, r1
 8001520:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2220      	movs	r2, #32
 8001528:	4013      	ands	r3, r2
 800152a:	d049      	beq.n	80015c0 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d026      	beq.n	8001582 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001534:	4b33      	ldr	r3, [pc, #204]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	4b32      	ldr	r3, [pc, #200]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 800153a:	2101      	movs	r1, #1
 800153c:	430a      	orrs	r2, r1
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	4b30      	ldr	r3, [pc, #192]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001544:	4b2f      	ldr	r3, [pc, #188]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001546:	2101      	movs	r1, #1
 8001548:	430a      	orrs	r2, r1
 800154a:	635a      	str	r2, [r3, #52]	; 0x34
 800154c:	4b33      	ldr	r3, [pc, #204]	; (800161c <HAL_RCC_OscConfig+0x684>)
 800154e:	6a1a      	ldr	r2, [r3, #32]
 8001550:	4b32      	ldr	r3, [pc, #200]	; (800161c <HAL_RCC_OscConfig+0x684>)
 8001552:	2180      	movs	r1, #128	; 0x80
 8001554:	0189      	lsls	r1, r1, #6
 8001556:	430a      	orrs	r2, r1
 8001558:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155a:	f7ff faa7 	bl	8000aac <HAL_GetTick>
 800155e:	0003      	movs	r3, r0
 8001560:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001564:	f7ff faa2 	bl	8000aac <HAL_GetTick>
 8001568:	0002      	movs	r2, r0
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e0c9      	b.n	800170a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001576:	4b23      	ldr	r3, [pc, #140]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2202      	movs	r2, #2
 800157c:	4013      	ands	r3, r2
 800157e:	d0f1      	beq.n	8001564 <HAL_RCC_OscConfig+0x5cc>
 8001580:	e01e      	b.n	80015c0 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001582:	4b20      	ldr	r3, [pc, #128]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 8001588:	2101      	movs	r1, #1
 800158a:	438a      	bics	r2, r1
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <HAL_RCC_OscConfig+0x684>)
 8001590:	6a1a      	ldr	r2, [r3, #32]
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <HAL_RCC_OscConfig+0x684>)
 8001594:	4922      	ldr	r1, [pc, #136]	; (8001620 <HAL_RCC_OscConfig+0x688>)
 8001596:	400a      	ands	r2, r1
 8001598:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff fa87 	bl	8000aac <HAL_GetTick>
 800159e:	0003      	movs	r3, r0
 80015a0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015a4:	f7ff fa82 	bl	8000aac <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e0a9      	b.n	800170a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2202      	movs	r2, #2
 80015bc:	4013      	ands	r3, r2
 80015be:	d1f1      	bne.n	80015a4 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d100      	bne.n	80015ca <HAL_RCC_OscConfig+0x632>
 80015c8:	e09e      	b.n	8001708 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	2b0c      	cmp	r3, #12
 80015ce:	d100      	bne.n	80015d2 <HAL_RCC_OscConfig+0x63a>
 80015d0:	e077      	b.n	80016c2 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d158      	bne.n	800168c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_RCC_OscConfig+0x66c>)
 80015e0:	4910      	ldr	r1, [pc, #64]	; (8001624 <HAL_RCC_OscConfig+0x68c>)
 80015e2:	400a      	ands	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fa61 	bl	8000aac <HAL_GetTick>
 80015ea:	0003      	movs	r3, r0
 80015ec:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015ee:	e01b      	b.n	8001628 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f0:	f7ff fa5c 	bl	8000aac <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d914      	bls.n	8001628 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e083      	b.n	800170a <HAL_RCC_OscConfig+0x772>
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	40021000 	.word	0x40021000
 8001608:	fffffeff 	.word	0xfffffeff
 800160c:	40007000 	.word	0x40007000
 8001610:	fffffbff 	.word	0xfffffbff
 8001614:	00001388 	.word	0x00001388
 8001618:	efffffff 	.word	0xefffffff
 800161c:	40010000 	.word	0x40010000
 8001620:	ffffdfff 	.word	0xffffdfff
 8001624:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001628:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <HAL_RCC_OscConfig+0x77c>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	049b      	lsls	r3, r3, #18
 8001630:	4013      	ands	r3, r2
 8001632:	d1dd      	bne.n	80015f0 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001634:	4b37      	ldr	r3, [pc, #220]	; (8001714 <HAL_RCC_OscConfig+0x77c>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	4a37      	ldr	r2, [pc, #220]	; (8001718 <HAL_RCC_OscConfig+0x780>)
 800163a:	4013      	ands	r3, r2
 800163c:	0019      	movs	r1, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164c:	431a      	orrs	r2, r3
 800164e:	4b31      	ldr	r3, [pc, #196]	; (8001714 <HAL_RCC_OscConfig+0x77c>)
 8001650:	430a      	orrs	r2, r1
 8001652:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001654:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <HAL_RCC_OscConfig+0x77c>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <HAL_RCC_OscConfig+0x77c>)
 800165a:	2180      	movs	r1, #128	; 0x80
 800165c:	0449      	lsls	r1, r1, #17
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff fa23 	bl	8000aac <HAL_GetTick>
 8001666:	0003      	movs	r3, r0
 8001668:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166c:	f7ff fa1e 	bl	8000aac <HAL_GetTick>
 8001670:	0002      	movs	r2, r0
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e045      	b.n	800170a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <HAL_RCC_OscConfig+0x77c>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	049b      	lsls	r3, r3, #18
 8001686:	4013      	ands	r3, r2
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0x6d4>
 800168a:	e03d      	b.n	8001708 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168c:	4b21      	ldr	r3, [pc, #132]	; (8001714 <HAL_RCC_OscConfig+0x77c>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b20      	ldr	r3, [pc, #128]	; (8001714 <HAL_RCC_OscConfig+0x77c>)
 8001692:	4922      	ldr	r1, [pc, #136]	; (800171c <HAL_RCC_OscConfig+0x784>)
 8001694:	400a      	ands	r2, r1
 8001696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fa08 	bl	8000aac <HAL_GetTick>
 800169c:	0003      	movs	r3, r0
 800169e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a2:	f7ff fa03 	bl	8000aac <HAL_GetTick>
 80016a6:	0002      	movs	r2, r0
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e02a      	b.n	800170a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <HAL_RCC_OscConfig+0x77c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	049b      	lsls	r3, r3, #18
 80016bc:	4013      	ands	r3, r2
 80016be:	d1f0      	bne.n	80016a2 <HAL_RCC_OscConfig+0x70a>
 80016c0:	e022      	b.n	8001708 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e01d      	b.n	800170a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_RCC_OscConfig+0x77c>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	025b      	lsls	r3, r3, #9
 80016da:	401a      	ands	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d10f      	bne.n	8001704 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	23f0      	movs	r3, #240	; 0xf0
 80016e8:	039b      	lsls	r3, r3, #14
 80016ea:	401a      	ands	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d107      	bne.n	8001704 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	23c0      	movs	r3, #192	; 0xc0
 80016f8:	041b      	lsls	r3, r3, #16
 80016fa:	401a      	ands	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	0018      	movs	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	b00a      	add	sp, #40	; 0x28
 8001710:	bdb0      	pop	{r4, r5, r7, pc}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	40021000 	.word	0x40021000
 8001718:	ff02ffff 	.word	0xff02ffff
 800171c:	feffffff 	.word	0xfeffffff

08001720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001720:	b5b0      	push	{r4, r5, r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e128      	b.n	8001986 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001734:	4b96      	ldr	r3, [pc, #600]	; (8001990 <HAL_RCC_ClockConfig+0x270>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2201      	movs	r2, #1
 800173a:	4013      	ands	r3, r2
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d91e      	bls.n	8001780 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b93      	ldr	r3, [pc, #588]	; (8001990 <HAL_RCC_ClockConfig+0x270>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2201      	movs	r2, #1
 8001748:	4393      	bics	r3, r2
 800174a:	0019      	movs	r1, r3
 800174c:	4b90      	ldr	r3, [pc, #576]	; (8001990 <HAL_RCC_ClockConfig+0x270>)
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001754:	f7ff f9aa 	bl	8000aac <HAL_GetTick>
 8001758:	0003      	movs	r3, r0
 800175a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175c:	e009      	b.n	8001772 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175e:	f7ff f9a5 	bl	8000aac <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	4a8a      	ldr	r2, [pc, #552]	; (8001994 <HAL_RCC_ClockConfig+0x274>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e109      	b.n	8001986 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001772:	4b87      	ldr	r3, [pc, #540]	; (8001990 <HAL_RCC_ClockConfig+0x270>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2201      	movs	r2, #1
 8001778:	4013      	ands	r3, r2
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d1ee      	bne.n	800175e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2202      	movs	r2, #2
 8001786:	4013      	ands	r3, r2
 8001788:	d009      	beq.n	800179e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800178a:	4b83      	ldr	r3, [pc, #524]	; (8001998 <HAL_RCC_ClockConfig+0x278>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	22f0      	movs	r2, #240	; 0xf0
 8001790:	4393      	bics	r3, r2
 8001792:	0019      	movs	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	4b7f      	ldr	r3, [pc, #508]	; (8001998 <HAL_RCC_ClockConfig+0x278>)
 800179a:	430a      	orrs	r2, r1
 800179c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2201      	movs	r2, #1
 80017a4:	4013      	ands	r3, r2
 80017a6:	d100      	bne.n	80017aa <HAL_RCC_ClockConfig+0x8a>
 80017a8:	e089      	b.n	80018be <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017b2:	4b79      	ldr	r3, [pc, #484]	; (8001998 <HAL_RCC_ClockConfig+0x278>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	029b      	lsls	r3, r3, #10
 80017ba:	4013      	ands	r3, r2
 80017bc:	d120      	bne.n	8001800 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e0e1      	b.n	8001986 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017ca:	4b73      	ldr	r3, [pc, #460]	; (8001998 <HAL_RCC_ClockConfig+0x278>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	049b      	lsls	r3, r3, #18
 80017d2:	4013      	ands	r3, r2
 80017d4:	d114      	bne.n	8001800 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e0d5      	b.n	8001986 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d106      	bne.n	80017f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017e2:	4b6d      	ldr	r3, [pc, #436]	; (8001998 <HAL_RCC_ClockConfig+0x278>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2204      	movs	r2, #4
 80017e8:	4013      	ands	r3, r2
 80017ea:	d109      	bne.n	8001800 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0ca      	b.n	8001986 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017f0:	4b69      	ldr	r3, [pc, #420]	; (8001998 <HAL_RCC_ClockConfig+0x278>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4013      	ands	r3, r2
 80017fa:	d101      	bne.n	8001800 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0c2      	b.n	8001986 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001800:	4b65      	ldr	r3, [pc, #404]	; (8001998 <HAL_RCC_ClockConfig+0x278>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2203      	movs	r2, #3
 8001806:	4393      	bics	r3, r2
 8001808:	0019      	movs	r1, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	4b62      	ldr	r3, [pc, #392]	; (8001998 <HAL_RCC_ClockConfig+0x278>)
 8001810:	430a      	orrs	r2, r1
 8001812:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001814:	f7ff f94a 	bl	8000aac <HAL_GetTick>
 8001818:	0003      	movs	r3, r0
 800181a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d111      	bne.n	8001848 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001824:	e009      	b.n	800183a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001826:	f7ff f941 	bl	8000aac <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	4a58      	ldr	r2, [pc, #352]	; (8001994 <HAL_RCC_ClockConfig+0x274>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e0a5      	b.n	8001986 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800183a:	4b57      	ldr	r3, [pc, #348]	; (8001998 <HAL_RCC_ClockConfig+0x278>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	220c      	movs	r2, #12
 8001840:	4013      	ands	r3, r2
 8001842:	2b08      	cmp	r3, #8
 8001844:	d1ef      	bne.n	8001826 <HAL_RCC_ClockConfig+0x106>
 8001846:	e03a      	b.n	80018be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b03      	cmp	r3, #3
 800184e:	d111      	bne.n	8001874 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001850:	e009      	b.n	8001866 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001852:	f7ff f92b 	bl	8000aac <HAL_GetTick>
 8001856:	0002      	movs	r2, r0
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	4a4d      	ldr	r2, [pc, #308]	; (8001994 <HAL_RCC_ClockConfig+0x274>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e08f      	b.n	8001986 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001866:	4b4c      	ldr	r3, [pc, #304]	; (8001998 <HAL_RCC_ClockConfig+0x278>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	220c      	movs	r2, #12
 800186c:	4013      	ands	r3, r2
 800186e:	2b0c      	cmp	r3, #12
 8001870:	d1ef      	bne.n	8001852 <HAL_RCC_ClockConfig+0x132>
 8001872:	e024      	b.n	80018be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d11b      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800187c:	e009      	b.n	8001892 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187e:	f7ff f915 	bl	8000aac <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	4a42      	ldr	r2, [pc, #264]	; (8001994 <HAL_RCC_ClockConfig+0x274>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e079      	b.n	8001986 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001892:	4b41      	ldr	r3, [pc, #260]	; (8001998 <HAL_RCC_ClockConfig+0x278>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	220c      	movs	r2, #12
 8001898:	4013      	ands	r3, r2
 800189a:	2b04      	cmp	r3, #4
 800189c:	d1ef      	bne.n	800187e <HAL_RCC_ClockConfig+0x15e>
 800189e:	e00e      	b.n	80018be <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a0:	f7ff f904 	bl	8000aac <HAL_GetTick>
 80018a4:	0002      	movs	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	4a3a      	ldr	r2, [pc, #232]	; (8001994 <HAL_RCC_ClockConfig+0x274>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e068      	b.n	8001986 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80018b4:	4b38      	ldr	r3, [pc, #224]	; (8001998 <HAL_RCC_ClockConfig+0x278>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	220c      	movs	r2, #12
 80018ba:	4013      	ands	r3, r2
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018be:	4b34      	ldr	r3, [pc, #208]	; (8001990 <HAL_RCC_ClockConfig+0x270>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2201      	movs	r2, #1
 80018c4:	4013      	ands	r3, r2
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d21e      	bcs.n	800190a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018cc:	4b30      	ldr	r3, [pc, #192]	; (8001990 <HAL_RCC_ClockConfig+0x270>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2201      	movs	r2, #1
 80018d2:	4393      	bics	r3, r2
 80018d4:	0019      	movs	r1, r3
 80018d6:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <HAL_RCC_ClockConfig+0x270>)
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018de:	f7ff f8e5 	bl	8000aac <HAL_GetTick>
 80018e2:	0003      	movs	r3, r0
 80018e4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	e009      	b.n	80018fc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e8:	f7ff f8e0 	bl	8000aac <HAL_GetTick>
 80018ec:	0002      	movs	r2, r0
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	4a28      	ldr	r2, [pc, #160]	; (8001994 <HAL_RCC_ClockConfig+0x274>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e044      	b.n	8001986 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fc:	4b24      	ldr	r3, [pc, #144]	; (8001990 <HAL_RCC_ClockConfig+0x270>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2201      	movs	r2, #1
 8001902:	4013      	ands	r3, r2
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d1ee      	bne.n	80018e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2204      	movs	r2, #4
 8001910:	4013      	ands	r3, r2
 8001912:	d009      	beq.n	8001928 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001914:	4b20      	ldr	r3, [pc, #128]	; (8001998 <HAL_RCC_ClockConfig+0x278>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4a20      	ldr	r2, [pc, #128]	; (800199c <HAL_RCC_ClockConfig+0x27c>)
 800191a:	4013      	ands	r3, r2
 800191c:	0019      	movs	r1, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <HAL_RCC_ClockConfig+0x278>)
 8001924:	430a      	orrs	r2, r1
 8001926:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2208      	movs	r2, #8
 800192e:	4013      	ands	r3, r2
 8001930:	d00a      	beq.n	8001948 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_RCC_ClockConfig+0x278>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	4a1a      	ldr	r2, [pc, #104]	; (80019a0 <HAL_RCC_ClockConfig+0x280>)
 8001938:	4013      	ands	r3, r2
 800193a:	0019      	movs	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	00da      	lsls	r2, r3, #3
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_RCC_ClockConfig+0x278>)
 8001944:	430a      	orrs	r2, r1
 8001946:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001948:	f000 f832 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 800194c:	0001      	movs	r1, r0
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_RCC_ClockConfig+0x278>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	091b      	lsrs	r3, r3, #4
 8001954:	220f      	movs	r2, #15
 8001956:	4013      	ands	r3, r2
 8001958:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <HAL_RCC_ClockConfig+0x284>)
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	000a      	movs	r2, r1
 800195e:	40da      	lsrs	r2, r3
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_RCC_ClockConfig+0x288>)
 8001962:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_RCC_ClockConfig+0x28c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	250b      	movs	r5, #11
 800196a:	197c      	adds	r4, r7, r5
 800196c:	0018      	movs	r0, r3
 800196e:	f7ff f857 	bl	8000a20 <HAL_InitTick>
 8001972:	0003      	movs	r3, r0
 8001974:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001976:	197b      	adds	r3, r7, r5
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800197e:	197b      	adds	r3, r7, r5
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	e000      	b.n	8001986 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	0018      	movs	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	b004      	add	sp, #16
 800198c:	bdb0      	pop	{r4, r5, r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	40022000 	.word	0x40022000
 8001994:	00001388 	.word	0x00001388
 8001998:	40021000 	.word	0x40021000
 800199c:	fffff8ff 	.word	0xfffff8ff
 80019a0:	ffffc7ff 	.word	0xffffc7ff
 80019a4:	08003a18 	.word	0x08003a18
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000004 	.word	0x20000004

080019b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b0:	b5b0      	push	{r4, r5, r7, lr}
 80019b2:	b08e      	sub	sp, #56	; 0x38
 80019b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80019b6:	4b4c      	ldr	r3, [pc, #304]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x138>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019be:	230c      	movs	r3, #12
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d014      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0x40>
 80019c6:	d900      	bls.n	80019ca <HAL_RCC_GetSysClockFreq+0x1a>
 80019c8:	e07b      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x112>
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d002      	beq.n	80019d4 <HAL_RCC_GetSysClockFreq+0x24>
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d00b      	beq.n	80019ea <HAL_RCC_GetSysClockFreq+0x3a>
 80019d2:	e076      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80019d4:	4b44      	ldr	r3, [pc, #272]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x138>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2210      	movs	r2, #16
 80019da:	4013      	ands	r3, r2
 80019dc:	d002      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80019de:	4b43      	ldr	r3, [pc, #268]	; (8001aec <HAL_RCC_GetSysClockFreq+0x13c>)
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80019e2:	e07c      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80019e4:	4b42      	ldr	r3, [pc, #264]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x140>)
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019e8:	e079      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019ea:	4b42      	ldr	r3, [pc, #264]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x144>)
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019ee:	e076      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80019f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f2:	0c9a      	lsrs	r2, r3, #18
 80019f4:	230f      	movs	r3, #15
 80019f6:	401a      	ands	r2, r3
 80019f8:	4b3f      	ldr	r3, [pc, #252]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x148>)
 80019fa:	5c9b      	ldrb	r3, [r3, r2]
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80019fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a00:	0d9a      	lsrs	r2, r3, #22
 8001a02:	2303      	movs	r3, #3
 8001a04:	4013      	ands	r3, r2
 8001a06:	3301      	adds	r3, #1
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a0a:	4b37      	ldr	r3, [pc, #220]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	025b      	lsls	r3, r3, #9
 8001a12:	4013      	ands	r3, r2
 8001a14:	d01a      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
 8001a1e:	4a35      	ldr	r2, [pc, #212]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a20:	2300      	movs	r3, #0
 8001a22:	69b8      	ldr	r0, [r7, #24]
 8001a24:	69f9      	ldr	r1, [r7, #28]
 8001a26:	f7fe fc25 	bl	8000274 <__aeabi_lmul>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	000b      	movs	r3, r1
 8001a2e:	0010      	movs	r0, r2
 8001a30:	0019      	movs	r1, r3
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f7fe fbf9 	bl	8000234 <__aeabi_uldivmod>
 8001a42:	0002      	movs	r2, r0
 8001a44:	000b      	movs	r3, r1
 8001a46:	0013      	movs	r3, r2
 8001a48:	637b      	str	r3, [r7, #52]	; 0x34
 8001a4a:	e037      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a4c:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2210      	movs	r2, #16
 8001a52:	4013      	ands	r3, r2
 8001a54:	d01a      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4a23      	ldr	r2, [pc, #140]	; (8001aec <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a60:	2300      	movs	r3, #0
 8001a62:	68b8      	ldr	r0, [r7, #8]
 8001a64:	68f9      	ldr	r1, [r7, #12]
 8001a66:	f7fe fc05 	bl	8000274 <__aeabi_lmul>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	000b      	movs	r3, r1
 8001a6e:	0010      	movs	r0, r2
 8001a70:	0019      	movs	r1, r3
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f7fe fbd9 	bl	8000234 <__aeabi_uldivmod>
 8001a82:	0002      	movs	r2, r0
 8001a84:	000b      	movs	r3, r1
 8001a86:	0013      	movs	r3, r2
 8001a88:	637b      	str	r3, [r7, #52]	; 0x34
 8001a8a:	e017      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8e:	0018      	movs	r0, r3
 8001a90:	2300      	movs	r3, #0
 8001a92:	0019      	movs	r1, r3
 8001a94:	4a16      	ldr	r2, [pc, #88]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001a96:	2300      	movs	r3, #0
 8001a98:	f7fe fbec 	bl	8000274 <__aeabi_lmul>
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	000b      	movs	r3, r1
 8001aa0:	0010      	movs	r0, r2
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	001c      	movs	r4, r3
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	001d      	movs	r5, r3
 8001aac:	0022      	movs	r2, r4
 8001aae:	002b      	movs	r3, r5
 8001ab0:	f7fe fbc0 	bl	8000234 <__aeabi_uldivmod>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	000b      	movs	r3, r1
 8001ab8:	0013      	movs	r3, r2
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001abe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ac0:	e00d      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	0b5b      	lsrs	r3, r3, #13
 8001ac8:	2207      	movs	r2, #7
 8001aca:	4013      	ands	r3, r2
 8001acc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	2280      	movs	r2, #128	; 0x80
 8001ad4:	0212      	lsls	r2, r2, #8
 8001ad6:	409a      	lsls	r2, r3
 8001ad8:	0013      	movs	r3, r2
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001adc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b00e      	add	sp, #56	; 0x38
 8001ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	003d0900 	.word	0x003d0900
 8001af0:	00f42400 	.word	0x00f42400
 8001af4:	007a1200 	.word	0x007a1200
 8001af8:	08003a30 	.word	0x08003a30

08001afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b00:	4b02      	ldr	r3, [pc, #8]	; (8001b0c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	20000000 	.word	0x20000000

08001b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b14:	f7ff fff2 	bl	8001afc <HAL_RCC_GetHCLKFreq>
 8001b18:	0001      	movs	r1, r0
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	2207      	movs	r2, #7
 8001b22:	4013      	ands	r3, r2
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b26:	5cd3      	ldrb	r3, [r2, r3]
 8001b28:	40d9      	lsrs	r1, r3
 8001b2a:	000b      	movs	r3, r1
}
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	40021000 	.word	0x40021000
 8001b38:	08003a28 	.word	0x08003a28

08001b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b40:	f7ff ffdc 	bl	8001afc <HAL_RCC_GetHCLKFreq>
 8001b44:	0001      	movs	r1, r0
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	0adb      	lsrs	r3, r3, #11
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	4013      	ands	r3, r2
 8001b50:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b52:	5cd3      	ldrb	r3, [r2, r3]
 8001b54:	40d9      	lsrs	r1, r3
 8001b56:	000b      	movs	r3, r1
}
 8001b58:	0018      	movs	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	40021000 	.word	0x40021000
 8001b64:	08003a28 	.word	0x08003a28

08001b68 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001b70:	2317      	movs	r3, #23
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d106      	bne.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	011b      	lsls	r3, r3, #4
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d100      	bne.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001b8e:	e104      	b.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b90:	4bb1      	ldr	r3, [pc, #708]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	055b      	lsls	r3, r3, #21
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d10a      	bne.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9c:	4bae      	ldr	r3, [pc, #696]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ba0:	4bad      	ldr	r3, [pc, #692]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ba2:	2180      	movs	r1, #128	; 0x80
 8001ba4:	0549      	lsls	r1, r1, #21
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001baa:	2317      	movs	r3, #23
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb2:	4baa      	ldr	r3, [pc, #680]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d11a      	bne.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bbe:	4ba7      	ldr	r3, [pc, #668]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	4ba6      	ldr	r3, [pc, #664]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001bc4:	2180      	movs	r1, #128	; 0x80
 8001bc6:	0049      	lsls	r1, r1, #1
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bcc:	f7fe ff6e 	bl	8000aac <HAL_GetTick>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd4:	e008      	b.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd6:	f7fe ff69 	bl	8000aac <HAL_GetTick>
 8001bda:	0002      	movs	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b64      	cmp	r3, #100	; 0x64
 8001be2:	d901      	bls.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e133      	b.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be8:	4b9c      	ldr	r3, [pc, #624]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001bf4:	4b98      	ldr	r3, [pc, #608]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	23c0      	movs	r3, #192	; 0xc0
 8001bfa:	039b      	lsls	r3, r3, #14
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	23c0      	movs	r3, #192	; 0xc0
 8001c06:	039b      	lsls	r3, r3, #14
 8001c08:	4013      	ands	r3, r2
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d107      	bne.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	23c0      	movs	r3, #192	; 0xc0
 8001c16:	039b      	lsls	r3, r3, #14
 8001c18:	4013      	ands	r3, r2
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d013      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	23c0      	movs	r3, #192	; 0xc0
 8001c26:	029b      	lsls	r3, r3, #10
 8001c28:	401a      	ands	r2, r3
 8001c2a:	23c0      	movs	r3, #192	; 0xc0
 8001c2c:	029b      	lsls	r3, r3, #10
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d10a      	bne.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001c32:	4b89      	ldr	r3, [pc, #548]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	029b      	lsls	r3, r3, #10
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	029b      	lsls	r3, r3, #10
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d101      	bne.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e103      	b.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001c48:	4b83      	ldr	r3, [pc, #524]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c4c:	23c0      	movs	r3, #192	; 0xc0
 8001c4e:	029b      	lsls	r3, r3, #10
 8001c50:	4013      	ands	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d049      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	23c0      	movs	r3, #192	; 0xc0
 8001c60:	029b      	lsls	r3, r3, #10
 8001c62:	4013      	ands	r3, r2
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d004      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	4013      	ands	r3, r2
 8001c72:	d10d      	bne.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	23c0      	movs	r3, #192	; 0xc0
 8001c7a:	029b      	lsls	r3, r3, #10
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d034      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d02e      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001c90:	4b71      	ldr	r3, [pc, #452]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c94:	4a72      	ldr	r2, [pc, #456]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c9a:	4b6f      	ldr	r3, [pc, #444]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c9e:	4b6e      	ldr	r3, [pc, #440]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ca0:	2180      	movs	r1, #128	; 0x80
 8001ca2:	0309      	lsls	r1, r1, #12
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ca8:	4b6b      	ldr	r3, [pc, #428]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001caa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cac:	4b6a      	ldr	r3, [pc, #424]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cae:	496d      	ldr	r1, [pc, #436]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001cb4:	4b68      	ldr	r3, [pc, #416]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d014      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7fe fef2 	bl	8000aac <HAL_GetTick>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ccc:	e009      	b.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cce:	f7fe feed 	bl	8000aac <HAL_GetTick>
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	4a63      	ldr	r2, [pc, #396]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e0b6      	b.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ce2:	4b5d      	ldr	r3, [pc, #372]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ce4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4013      	ands	r3, r2
 8001cec:	d0ef      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	011b      	lsls	r3, r3, #4
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d01f      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	23c0      	movs	r3, #192	; 0xc0
 8001d00:	029b      	lsls	r3, r3, #10
 8001d02:	401a      	ands	r2, r3
 8001d04:	23c0      	movs	r3, #192	; 0xc0
 8001d06:	029b      	lsls	r3, r3, #10
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d10c      	bne.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001d0c:	4b52      	ldr	r3, [pc, #328]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a56      	ldr	r2, [pc, #344]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	0019      	movs	r1, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	23c0      	movs	r3, #192	; 0xc0
 8001d1c:	039b      	lsls	r3, r3, #14
 8001d1e:	401a      	ands	r2, r3
 8001d20:	4b4d      	ldr	r3, [pc, #308]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d22:	430a      	orrs	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	4b4c      	ldr	r3, [pc, #304]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d28:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	23c0      	movs	r3, #192	; 0xc0
 8001d30:	029b      	lsls	r3, r3, #10
 8001d32:	401a      	ands	r2, r3
 8001d34:	4b48      	ldr	r3, [pc, #288]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d36:	430a      	orrs	r2, r1
 8001d38:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	4013      	ands	r3, r2
 8001d42:	d01f      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	23c0      	movs	r3, #192	; 0xc0
 8001d4a:	029b      	lsls	r3, r3, #10
 8001d4c:	401a      	ands	r2, r3
 8001d4e:	23c0      	movs	r3, #192	; 0xc0
 8001d50:	029b      	lsls	r3, r3, #10
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d10c      	bne.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001d56:	4b40      	ldr	r3, [pc, #256]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a44      	ldr	r2, [pc, #272]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	0019      	movs	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	23c0      	movs	r3, #192	; 0xc0
 8001d66:	039b      	lsls	r3, r3, #14
 8001d68:	401a      	ands	r2, r3
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	4b39      	ldr	r3, [pc, #228]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d72:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	23c0      	movs	r3, #192	; 0xc0
 8001d7a:	029b      	lsls	r3, r3, #10
 8001d7c:	401a      	ands	r2, r3
 8001d7e:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d80:	430a      	orrs	r2, r1
 8001d82:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d84:	2317      	movs	r3, #23
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d105      	bne.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8e:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d92:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d94:	4936      	ldr	r1, [pc, #216]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001d96:	400a      	ands	r2, r1
 8001d98:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4013      	ands	r3, r2
 8001da2:	d009      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001da4:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da8:	2203      	movs	r2, #3
 8001daa:	4393      	bics	r3, r2
 8001dac:	0019      	movs	r1, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001db4:	430a      	orrs	r2, r1
 8001db6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d009      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dc2:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	4393      	bics	r3, r2
 8001dca:	0019      	movs	r1, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2204      	movs	r2, #4
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d009      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de4:	4a23      	ldr	r2, [pc, #140]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	0019      	movs	r1, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001df0:	430a      	orrs	r2, r1
 8001df2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2208      	movs	r2, #8
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699a      	ldr	r2, [r3, #24]
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2240      	movs	r2, #64	; 0x40
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d009      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e20:	4a16      	ldr	r2, [pc, #88]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	0019      	movs	r1, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1a      	ldr	r2, [r3, #32]
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2280      	movs	r2, #128	; 0x80
 8001e36:	4013      	ands	r3, r2
 8001e38:	d009      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001e3a:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3e:	4a10      	ldr	r2, [pc, #64]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	0019      	movs	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69da      	ldr	r2, [r3, #28]
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b006      	add	sp, #24
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	fffcffff 	.word	0xfffcffff
 8001e64:	fff7ffff 	.word	0xfff7ffff
 8001e68:	00001388 	.word	0x00001388
 8001e6c:	ffcfffff 	.word	0xffcfffff
 8001e70:	efffffff 	.word	0xefffffff
 8001e74:	fffff3ff 	.word	0xfffff3ff
 8001e78:	ffffcfff 	.word	0xffffcfff
 8001e7c:	fbffffff 	.word	0xfbffffff
 8001e80:	fff3ffff 	.word	0xfff3ffff

08001e84 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e84:	b5b0      	push	{r4, r5, r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e088      	b.n	8001fb0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2221      	movs	r2, #33	; 0x21
 8001ea2:	5c9b      	ldrb	r3, [r3, r2]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d107      	bne.n	8001eba <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2220      	movs	r2, #32
 8001eae:	2100      	movs	r1, #0
 8001eb0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7fe fcb9 	bl	800082c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2221      	movs	r2, #33	; 0x21
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2210      	movs	r2, #16
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b10      	cmp	r3, #16
 8001ece:	d05f      	beq.n	8001f90 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	22ca      	movs	r2, #202	; 0xca
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2253      	movs	r2, #83	; 0x53
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001ee0:	250f      	movs	r5, #15
 8001ee2:	197c      	adds	r4, r7, r5
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f000 fa7c 	bl	80023e4 <RTC_EnterInitMode>
 8001eec:	0003      	movs	r3, r0
 8001eee:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8001ef0:	0028      	movs	r0, r5
 8001ef2:	183b      	adds	r3, r7, r0
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d12c      	bne.n	8001f54 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	492c      	ldr	r1, [pc, #176]	; (8001fb8 <HAL_RTC_Init+0x134>)
 8001f06:	400a      	ands	r2, r1
 8001f08:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6899      	ldr	r1, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	68d2      	ldr	r2, [r2, #12]
 8001f30:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6919      	ldr	r1, [r3, #16]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	041a      	lsls	r2, r3, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001f46:	183c      	adds	r4, r7, r0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f000 fa8e 	bl	800246c <RTC_ExitInitMode>
 8001f50:	0003      	movs	r3, r0
 8001f52:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8001f54:	230f      	movs	r3, #15
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d113      	bne.n	8001f86 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2103      	movs	r1, #3
 8001f6a:	438a      	bics	r2, r1
 8001f6c:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69da      	ldr	r2, [r3, #28]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	22ff      	movs	r2, #255	; 0xff
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24
 8001f8e:	e003      	b.n	8001f98 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001f90:	230f      	movs	r3, #15
 8001f92:	18fb      	adds	r3, r7, r3
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8001f98:	230f      	movs	r3, #15
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d103      	bne.n	8001faa <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2221      	movs	r2, #33	; 0x21
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001faa:	230f      	movs	r3, #15
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	781b      	ldrb	r3, [r3, #0]
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b004      	add	sp, #16
 8001fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb8:	ff8fffbf 	.word	0xff8fffbf

08001fbc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001fbc:	b5b0      	push	{r4, r5, r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	5c9b      	ldrb	r3, [r3, r2]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_RTC_SetTime+0x1e>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e092      	b.n	8002100 <HAL_RTC_SetTime+0x144>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	2101      	movs	r1, #1
 8001fe0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2221      	movs	r2, #33	; 0x21
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d125      	bne.n	800203c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2240      	movs	r2, #64	; 0x40
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d102      	bne.n	8002002 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2200      	movs	r2, #0
 8002000:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	0018      	movs	r0, r3
 8002008:	f000 fa5a 	bl	80024c0 <RTC_ByteToBcd2>
 800200c:	0003      	movs	r3, r0
 800200e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	785b      	ldrb	r3, [r3, #1]
 8002014:	0018      	movs	r0, r3
 8002016:	f000 fa53 	bl	80024c0 <RTC_ByteToBcd2>
 800201a:	0003      	movs	r3, r0
 800201c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800201e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	789b      	ldrb	r3, [r3, #2]
 8002024:	0018      	movs	r0, r3
 8002026:	f000 fa4b 	bl	80024c0 <RTC_ByteToBcd2>
 800202a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800202c:	0022      	movs	r2, r4
 800202e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	78db      	ldrb	r3, [r3, #3]
 8002034:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002036:	4313      	orrs	r3, r2
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	e017      	b.n	800206c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2240      	movs	r2, #64	; 0x40
 8002044:	4013      	ands	r3, r2
 8002046:	d102      	bne.n	800204e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2200      	movs	r2, #0
 800204c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	785b      	ldrb	r3, [r3, #1]
 8002058:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800205a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002060:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	78db      	ldrb	r3, [r3, #3]
 8002066:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	22ca      	movs	r2, #202	; 0xca
 8002072:	625a      	str	r2, [r3, #36]	; 0x24
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2253      	movs	r2, #83	; 0x53
 800207a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800207c:	2513      	movs	r5, #19
 800207e:	197c      	adds	r4, r7, r5
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	0018      	movs	r0, r3
 8002084:	f000 f9ae 	bl	80023e4 <RTC_EnterInitMode>
 8002088:	0003      	movs	r3, r0
 800208a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800208c:	0028      	movs	r0, r5
 800208e:	183b      	adds	r3, r7, r0
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d120      	bne.n	80020d8 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	491a      	ldr	r1, [pc, #104]	; (8002108 <HAL_RTC_SetTime+0x14c>)
 800209e:	400a      	ands	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4917      	ldr	r1, [pc, #92]	; (800210c <HAL_RTC_SetTime+0x150>)
 80020ae:	400a      	ands	r2, r1
 80020b0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6899      	ldr	r1, [r3, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	431a      	orrs	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80020ca:	183c      	adds	r4, r7, r0
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	0018      	movs	r0, r3
 80020d0:	f000 f9cc 	bl	800246c <RTC_ExitInitMode>
 80020d4:	0003      	movs	r3, r0
 80020d6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80020d8:	2313      	movs	r3, #19
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d103      	bne.n	80020ea <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2221      	movs	r2, #33	; 0x21
 80020e6:	2101      	movs	r1, #1
 80020e8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	22ff      	movs	r2, #255	; 0xff
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2220      	movs	r2, #32
 80020f6:	2100      	movs	r1, #0
 80020f8:	5499      	strb	r1, [r3, r2]

  return status;
 80020fa:	2313      	movs	r3, #19
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	781b      	ldrb	r3, [r3, #0]
}
 8002100:	0018      	movs	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	b006      	add	sp, #24
 8002106:	bdb0      	pop	{r4, r5, r7, pc}
 8002108:	007f7f7f 	.word	0x007f7f7f
 800210c:	fffbffff 	.word	0xfffbffff

08002110 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	045b      	lsls	r3, r3, #17
 8002132:	0c5a      	lsrs	r2, r3, #17
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a22      	ldr	r2, [pc, #136]	; (80021c8 <HAL_RTC_GetTime+0xb8>)
 8002140:	4013      	ands	r3, r2
 8002142:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	0c1b      	lsrs	r3, r3, #16
 8002148:	b2db      	uxtb	r3, r3
 800214a:	223f      	movs	r2, #63	; 0x3f
 800214c:	4013      	ands	r3, r2
 800214e:	b2da      	uxtb	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	b2db      	uxtb	r3, r3
 800215a:	227f      	movs	r2, #127	; 0x7f
 800215c:	4013      	ands	r3, r2
 800215e:	b2da      	uxtb	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	227f      	movs	r2, #127	; 0x7f
 800216a:	4013      	ands	r3, r2
 800216c:	b2da      	uxtb	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	0d9b      	lsrs	r3, r3, #22
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2201      	movs	r2, #1
 800217a:	4013      	ands	r3, r2
 800217c:	b2da      	uxtb	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d11a      	bne.n	80021be <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	0018      	movs	r0, r3
 800218e:	f000 f9b8 	bl	8002502 <RTC_Bcd2ToByte>
 8002192:	0003      	movs	r3, r0
 8002194:	001a      	movs	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	785b      	ldrb	r3, [r3, #1]
 800219e:	0018      	movs	r0, r3
 80021a0:	f000 f9af 	bl	8002502 <RTC_Bcd2ToByte>
 80021a4:	0003      	movs	r3, r0
 80021a6:	001a      	movs	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	789b      	ldrb	r3, [r3, #2]
 80021b0:	0018      	movs	r0, r3
 80021b2:	f000 f9a6 	bl	8002502 <RTC_Bcd2ToByte>
 80021b6:	0003      	movs	r3, r0
 80021b8:	001a      	movs	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	0018      	movs	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b006      	add	sp, #24
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	007f7f7f 	.word	0x007f7f7f

080021cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80021cc:	b5b0      	push	{r4, r5, r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2220      	movs	r2, #32
 80021e0:	5c9b      	ldrb	r3, [r3, r2]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_RTC_SetDate+0x1e>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e07e      	b.n	80022e8 <HAL_RTC_SetDate+0x11c>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2220      	movs	r2, #32
 80021ee:	2101      	movs	r1, #1
 80021f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2221      	movs	r2, #33	; 0x21
 80021f6:	2102      	movs	r1, #2
 80021f8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10e      	bne.n	800221e <HAL_RTC_SetDate+0x52>
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	785b      	ldrb	r3, [r3, #1]
 8002204:	001a      	movs	r2, r3
 8002206:	2310      	movs	r3, #16
 8002208:	4013      	ands	r3, r2
 800220a:	d008      	beq.n	800221e <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	785b      	ldrb	r3, [r3, #1]
 8002210:	2210      	movs	r2, #16
 8002212:	4393      	bics	r3, r2
 8002214:	b2db      	uxtb	r3, r3
 8002216:	330a      	adds	r3, #10
 8002218:	b2da      	uxtb	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d11c      	bne.n	800225e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	78db      	ldrb	r3, [r3, #3]
 8002228:	0018      	movs	r0, r3
 800222a:	f000 f949 	bl	80024c0 <RTC_ByteToBcd2>
 800222e:	0003      	movs	r3, r0
 8002230:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	785b      	ldrb	r3, [r3, #1]
 8002236:	0018      	movs	r0, r3
 8002238:	f000 f942 	bl	80024c0 <RTC_ByteToBcd2>
 800223c:	0003      	movs	r3, r0
 800223e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002240:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	789b      	ldrb	r3, [r3, #2]
 8002246:	0018      	movs	r0, r3
 8002248:	f000 f93a 	bl	80024c0 <RTC_ByteToBcd2>
 800224c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800224e:	0022      	movs	r2, r4
 8002250:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002258:	4313      	orrs	r3, r2
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	e00e      	b.n	800227c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	78db      	ldrb	r3, [r3, #3]
 8002262:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	785b      	ldrb	r3, [r3, #1]
 8002268:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800226a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002270:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	22ca      	movs	r2, #202	; 0xca
 8002282:	625a      	str	r2, [r3, #36]	; 0x24
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2253      	movs	r2, #83	; 0x53
 800228a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800228c:	2513      	movs	r5, #19
 800228e:	197c      	adds	r4, r7, r5
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	0018      	movs	r0, r3
 8002294:	f000 f8a6 	bl	80023e4 <RTC_EnterInitMode>
 8002298:	0003      	movs	r3, r0
 800229a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800229c:	0028      	movs	r0, r5
 800229e:	183b      	adds	r3, r7, r0
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10c      	bne.n	80022c0 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4910      	ldr	r1, [pc, #64]	; (80022f0 <HAL_RTC_SetDate+0x124>)
 80022ae:	400a      	ands	r2, r1
 80022b0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80022b2:	183c      	adds	r4, r7, r0
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	0018      	movs	r0, r3
 80022b8:	f000 f8d8 	bl	800246c <RTC_ExitInitMode>
 80022bc:	0003      	movs	r3, r0
 80022be:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80022c0:	2313      	movs	r3, #19
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d103      	bne.n	80022d2 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2221      	movs	r2, #33	; 0x21
 80022ce:	2101      	movs	r1, #1
 80022d0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	22ff      	movs	r2, #255	; 0xff
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2220      	movs	r2, #32
 80022de:	2100      	movs	r1, #0
 80022e0:	5499      	strb	r1, [r3, r2]

  return status;
 80022e2:	2313      	movs	r3, #19
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	781b      	ldrb	r3, [r3, #0]
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b006      	add	sp, #24
 80022ee:	bdb0      	pop	{r4, r5, r7, pc}
 80022f0:	00ffff3f 	.word	0x00ffff3f

080022f4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	4a21      	ldr	r2, [pc, #132]	; (8002390 <HAL_RTC_GetDate+0x9c>)
 800230c:	4013      	ands	r3, r2
 800230e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	0c1b      	lsrs	r3, r3, #16
 8002314:	b2da      	uxtb	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	b2db      	uxtb	r3, r3
 8002320:	221f      	movs	r2, #31
 8002322:	4013      	ands	r3, r2
 8002324:	b2da      	uxtb	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	223f      	movs	r2, #63	; 0x3f
 8002330:	4013      	ands	r3, r2
 8002332:	b2da      	uxtb	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	0b5b      	lsrs	r3, r3, #13
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2207      	movs	r2, #7
 8002340:	4013      	ands	r3, r2
 8002342:	b2da      	uxtb	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d11a      	bne.n	8002384 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	78db      	ldrb	r3, [r3, #3]
 8002352:	0018      	movs	r0, r3
 8002354:	f000 f8d5 	bl	8002502 <RTC_Bcd2ToByte>
 8002358:	0003      	movs	r3, r0
 800235a:	001a      	movs	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	785b      	ldrb	r3, [r3, #1]
 8002364:	0018      	movs	r0, r3
 8002366:	f000 f8cc 	bl	8002502 <RTC_Bcd2ToByte>
 800236a:	0003      	movs	r3, r0
 800236c:	001a      	movs	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	789b      	ldrb	r3, [r3, #2]
 8002376:	0018      	movs	r0, r3
 8002378:	f000 f8c3 	bl	8002502 <RTC_Bcd2ToByte>
 800237c:	0003      	movs	r3, r0
 800237e:	001a      	movs	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	0018      	movs	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	b006      	add	sp, #24
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	00ffff3f 	.word	0x00ffff3f

08002394 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0e      	ldr	r2, [pc, #56]	; (80023e0 <HAL_RTC_WaitForSynchro+0x4c>)
 80023a6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023a8:	f7fe fb80 	bl	8000aac <HAL_GetTick>
 80023ac:	0003      	movs	r3, r0
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80023b0:	e00a      	b.n	80023c8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023b2:	f7fe fb7b 	bl	8000aac <HAL_GetTick>
 80023b6:	0002      	movs	r2, r0
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	23fa      	movs	r3, #250	; 0xfa
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d901      	bls.n	80023c8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e006      	b.n	80023d6 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	4013      	ands	r3, r2
 80023d2:	d0ee      	beq.n	80023b2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	0018      	movs	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	b004      	add	sp, #16
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	00017f5f 	.word	0x00017f5f

080023e4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80023f0:	230f      	movs	r3, #15
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2240      	movs	r2, #64	; 0x40
 8002400:	4013      	ands	r3, r2
 8002402:	d12c      	bne.n	800245e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2180      	movs	r1, #128	; 0x80
 8002410:	430a      	orrs	r2, r1
 8002412:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002414:	f7fe fb4a 	bl	8000aac <HAL_GetTick>
 8002418:	0003      	movs	r3, r0
 800241a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800241c:	e014      	b.n	8002448 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800241e:	f7fe fb45 	bl	8000aac <HAL_GetTick>
 8002422:	0002      	movs	r2, r0
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	1ad2      	subs	r2, r2, r3
 8002428:	200f      	movs	r0, #15
 800242a:	183b      	adds	r3, r7, r0
 800242c:	1839      	adds	r1, r7, r0
 800242e:	7809      	ldrb	r1, [r1, #0]
 8002430:	7019      	strb	r1, [r3, #0]
 8002432:	23fa      	movs	r3, #250	; 0xfa
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	429a      	cmp	r2, r3
 8002438:	d906      	bls.n	8002448 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2221      	movs	r2, #33	; 0x21
 800243e:	2104      	movs	r1, #4
 8002440:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8002442:	183b      	adds	r3, r7, r0
 8002444:	2201      	movs	r2, #1
 8002446:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	2240      	movs	r2, #64	; 0x40
 8002450:	4013      	ands	r3, r2
 8002452:	d104      	bne.n	800245e <RTC_EnterInitMode+0x7a>
 8002454:	230f      	movs	r3, #15
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d1df      	bne.n	800241e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800245e:	230f      	movs	r3, #15
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	781b      	ldrb	r3, [r3, #0]
}
 8002464:	0018      	movs	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	b004      	add	sp, #16
 800246a:	bd80      	pop	{r7, pc}

0800246c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800246c:	b590      	push	{r4, r7, lr}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002474:	240f      	movs	r4, #15
 8002476:	193b      	adds	r3, r7, r4
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2180      	movs	r1, #128	; 0x80
 8002488:	438a      	bics	r2, r1
 800248a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2220      	movs	r2, #32
 8002494:	4013      	ands	r3, r2
 8002496:	d10c      	bne.n	80024b2 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	0018      	movs	r0, r3
 800249c:	f7ff ff7a 	bl	8002394 <HAL_RTC_WaitForSynchro>
 80024a0:	1e03      	subs	r3, r0, #0
 80024a2:	d006      	beq.n	80024b2 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2221      	movs	r2, #33	; 0x21
 80024a8:	2104      	movs	r1, #4
 80024aa:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80024ac:	193b      	adds	r3, r7, r4
 80024ae:	2201      	movs	r2, #1
 80024b0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80024b2:	230f      	movs	r3, #15
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	781b      	ldrb	r3, [r3, #0]
}
 80024b8:	0018      	movs	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b005      	add	sp, #20
 80024be:	bd90      	pop	{r4, r7, pc}

080024c0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	0002      	movs	r2, r0
 80024c8:	1dfb      	adds	r3, r7, #7
 80024ca:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80024d0:	e007      	b.n	80024e2 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	3301      	adds	r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80024d8:	1dfb      	adds	r3, r7, #7
 80024da:	1dfa      	adds	r2, r7, #7
 80024dc:	7812      	ldrb	r2, [r2, #0]
 80024de:	3a0a      	subs	r2, #10
 80024e0:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80024e2:	1dfb      	adds	r3, r7, #7
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b09      	cmp	r3, #9
 80024e8:	d8f3      	bhi.n	80024d2 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	1dfb      	adds	r3, r7, #7
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	b2db      	uxtb	r3, r3
}
 80024fa:	0018      	movs	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b004      	add	sp, #16
 8002500:	bd80      	pop	{r7, pc}

08002502 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	0002      	movs	r2, r0
 800250a:	1dfb      	adds	r3, r7, #7
 800250c:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002512:	1dfb      	adds	r3, r7, #7
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	b2db      	uxtb	r3, r3
 800251a:	001a      	movs	r2, r3
 800251c:	0013      	movs	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	189b      	adds	r3, r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	b2da      	uxtb	r2, r3
 800252a:	1dfb      	adds	r3, r7, #7
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	210f      	movs	r1, #15
 8002530:	400b      	ands	r3, r1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	18d3      	adds	r3, r2, r3
 8002536:	b2db      	uxtb	r3, r3
}
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	b004      	add	sp, #16
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e044      	b.n	80025dc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002556:	2b00      	cmp	r3, #0
 8002558:	d107      	bne.n	800256a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2278      	movs	r2, #120	; 0x78
 800255e:	2100      	movs	r1, #0
 8002560:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	0018      	movs	r0, r3
 8002566:	f7fe f979 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2224      	movs	r2, #36	; 0x24
 800256e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2101      	movs	r1, #1
 800257c:	438a      	bics	r2, r1
 800257e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	0018      	movs	r0, r3
 8002584:	f000 f8d0 	bl	8002728 <UART_SetConfig>
 8002588:	0003      	movs	r3, r0
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e024      	b.n	80025dc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	0018      	movs	r0, r3
 800259e:	f000 fb47 	bl	8002c30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	490d      	ldr	r1, [pc, #52]	; (80025e4 <HAL_UART_Init+0xa4>)
 80025ae:	400a      	ands	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	212a      	movs	r1, #42	; 0x2a
 80025be:	438a      	bics	r2, r1
 80025c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2101      	movs	r1, #1
 80025ce:	430a      	orrs	r2, r1
 80025d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	0018      	movs	r0, r3
 80025d6:	f000 fbdf 	bl	8002d98 <UART_CheckIdleState>
 80025da:	0003      	movs	r3, r0
}
 80025dc:	0018      	movs	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	b002      	add	sp, #8
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	ffffb7ff 	.word	0xffffb7ff

080025e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	; 0x28
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	1dbb      	adds	r3, r7, #6
 80025f6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d000      	beq.n	8002602 <HAL_UART_Transmit+0x1a>
 8002600:	e08c      	b.n	800271c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_UART_Transmit+0x28>
 8002608:	1dbb      	adds	r3, r7, #6
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e084      	b.n	800271e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	015b      	lsls	r3, r3, #5
 800261c:	429a      	cmp	r2, r3
 800261e:	d109      	bne.n	8002634 <HAL_UART_Transmit+0x4c>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d105      	bne.n	8002634 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2201      	movs	r2, #1
 800262c:	4013      	ands	r3, r2
 800262e:	d001      	beq.n	8002634 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e074      	b.n	800271e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2284      	movs	r2, #132	; 0x84
 8002638:	2100      	movs	r1, #0
 800263a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2221      	movs	r2, #33	; 0x21
 8002640:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002642:	f7fe fa33 	bl	8000aac <HAL_GetTick>
 8002646:	0003      	movs	r3, r0
 8002648:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1dba      	adds	r2, r7, #6
 800264e:	2150      	movs	r1, #80	; 0x50
 8002650:	8812      	ldrh	r2, [r2, #0]
 8002652:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1dba      	adds	r2, r7, #6
 8002658:	2152      	movs	r1, #82	; 0x52
 800265a:	8812      	ldrh	r2, [r2, #0]
 800265c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	015b      	lsls	r3, r3, #5
 8002666:	429a      	cmp	r2, r3
 8002668:	d108      	bne.n	800267c <HAL_UART_Transmit+0x94>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d104      	bne.n	800267c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	e003      	b.n	8002684 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002684:	e02f      	b.n	80026e6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	0013      	movs	r3, r2
 8002690:	2200      	movs	r2, #0
 8002692:	2180      	movs	r1, #128	; 0x80
 8002694:	f000 fc28 	bl	8002ee8 <UART_WaitOnFlagUntilTimeout>
 8002698:	1e03      	subs	r3, r0, #0
 800269a:	d004      	beq.n	80026a6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2220      	movs	r2, #32
 80026a0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e03b      	b.n	800271e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10b      	bne.n	80026c4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	001a      	movs	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	05d2      	lsls	r2, r2, #23
 80026b8:	0dd2      	lsrs	r2, r2, #23
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	3302      	adds	r3, #2
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	e007      	b.n	80026d4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	781a      	ldrb	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3301      	adds	r3, #1
 80026d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2252      	movs	r2, #82	; 0x52
 80026d8:	5a9b      	ldrh	r3, [r3, r2]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b299      	uxth	r1, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2252      	movs	r2, #82	; 0x52
 80026e4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2252      	movs	r2, #82	; 0x52
 80026ea:	5a9b      	ldrh	r3, [r3, r2]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1c9      	bne.n	8002686 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	0013      	movs	r3, r2
 80026fc:	2200      	movs	r2, #0
 80026fe:	2140      	movs	r1, #64	; 0x40
 8002700:	f000 fbf2 	bl	8002ee8 <UART_WaitOnFlagUntilTimeout>
 8002704:	1e03      	subs	r3, r0, #0
 8002706:	d004      	beq.n	8002712 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2220      	movs	r2, #32
 800270c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e005      	b.n	800271e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2220      	movs	r2, #32
 8002716:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	e000      	b.n	800271e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800271c:	2302      	movs	r3, #2
  }
}
 800271e:	0018      	movs	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	b008      	add	sp, #32
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002728:	b5b0      	push	{r4, r5, r7, lr}
 800272a:	b08e      	sub	sp, #56	; 0x38
 800272c:	af00      	add	r7, sp, #0
 800272e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002730:	231a      	movs	r3, #26
 8002732:	2218      	movs	r2, #24
 8002734:	189b      	adds	r3, r3, r2
 8002736:	19db      	adds	r3, r3, r7
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	431a      	orrs	r2, r3
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	431a      	orrs	r2, r3
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	4313      	orrs	r3, r2
 8002752:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4ac6      	ldr	r2, [pc, #792]	; (8002a74 <UART_SetConfig+0x34c>)
 800275c:	4013      	ands	r3, r2
 800275e:	0019      	movs	r1, r3
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002766:	430a      	orrs	r2, r1
 8002768:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4ac1      	ldr	r2, [pc, #772]	; (8002a78 <UART_SetConfig+0x350>)
 8002772:	4013      	ands	r3, r2
 8002774:	0019      	movs	r1, r3
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4abb      	ldr	r2, [pc, #748]	; (8002a7c <UART_SetConfig+0x354>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d004      	beq.n	800279c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002798:	4313      	orrs	r3, r2
 800279a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4ab7      	ldr	r2, [pc, #732]	; (8002a80 <UART_SetConfig+0x358>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	0019      	movs	r1, r3
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4ab3      	ldr	r2, [pc, #716]	; (8002a84 <UART_SetConfig+0x35c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d131      	bne.n	8002820 <UART_SetConfig+0xf8>
 80027bc:	4bb2      	ldr	r3, [pc, #712]	; (8002a88 <UART_SetConfig+0x360>)
 80027be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c0:	2203      	movs	r2, #3
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d01d      	beq.n	8002804 <UART_SetConfig+0xdc>
 80027c8:	d823      	bhi.n	8002812 <UART_SetConfig+0xea>
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d00c      	beq.n	80027e8 <UART_SetConfig+0xc0>
 80027ce:	d820      	bhi.n	8002812 <UART_SetConfig+0xea>
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <UART_SetConfig+0xb2>
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d00e      	beq.n	80027f6 <UART_SetConfig+0xce>
 80027d8:	e01b      	b.n	8002812 <UART_SetConfig+0xea>
 80027da:	231b      	movs	r3, #27
 80027dc:	2218      	movs	r2, #24
 80027de:	189b      	adds	r3, r3, r2
 80027e0:	19db      	adds	r3, r3, r7
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	e09c      	b.n	8002922 <UART_SetConfig+0x1fa>
 80027e8:	231b      	movs	r3, #27
 80027ea:	2218      	movs	r2, #24
 80027ec:	189b      	adds	r3, r3, r2
 80027ee:	19db      	adds	r3, r3, r7
 80027f0:	2202      	movs	r2, #2
 80027f2:	701a      	strb	r2, [r3, #0]
 80027f4:	e095      	b.n	8002922 <UART_SetConfig+0x1fa>
 80027f6:	231b      	movs	r3, #27
 80027f8:	2218      	movs	r2, #24
 80027fa:	189b      	adds	r3, r3, r2
 80027fc:	19db      	adds	r3, r3, r7
 80027fe:	2204      	movs	r2, #4
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	e08e      	b.n	8002922 <UART_SetConfig+0x1fa>
 8002804:	231b      	movs	r3, #27
 8002806:	2218      	movs	r2, #24
 8002808:	189b      	adds	r3, r3, r2
 800280a:	19db      	adds	r3, r3, r7
 800280c:	2208      	movs	r2, #8
 800280e:	701a      	strb	r2, [r3, #0]
 8002810:	e087      	b.n	8002922 <UART_SetConfig+0x1fa>
 8002812:	231b      	movs	r3, #27
 8002814:	2218      	movs	r2, #24
 8002816:	189b      	adds	r3, r3, r2
 8002818:	19db      	adds	r3, r3, r7
 800281a:	2210      	movs	r2, #16
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	e080      	b.n	8002922 <UART_SetConfig+0x1fa>
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a99      	ldr	r2, [pc, #612]	; (8002a8c <UART_SetConfig+0x364>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d131      	bne.n	800288e <UART_SetConfig+0x166>
 800282a:	4b97      	ldr	r3, [pc, #604]	; (8002a88 <UART_SetConfig+0x360>)
 800282c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282e:	220c      	movs	r2, #12
 8002830:	4013      	ands	r3, r2
 8002832:	2b0c      	cmp	r3, #12
 8002834:	d01d      	beq.n	8002872 <UART_SetConfig+0x14a>
 8002836:	d823      	bhi.n	8002880 <UART_SetConfig+0x158>
 8002838:	2b08      	cmp	r3, #8
 800283a:	d00c      	beq.n	8002856 <UART_SetConfig+0x12e>
 800283c:	d820      	bhi.n	8002880 <UART_SetConfig+0x158>
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <UART_SetConfig+0x120>
 8002842:	2b04      	cmp	r3, #4
 8002844:	d00e      	beq.n	8002864 <UART_SetConfig+0x13c>
 8002846:	e01b      	b.n	8002880 <UART_SetConfig+0x158>
 8002848:	231b      	movs	r3, #27
 800284a:	2218      	movs	r2, #24
 800284c:	189b      	adds	r3, r3, r2
 800284e:	19db      	adds	r3, r3, r7
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	e065      	b.n	8002922 <UART_SetConfig+0x1fa>
 8002856:	231b      	movs	r3, #27
 8002858:	2218      	movs	r2, #24
 800285a:	189b      	adds	r3, r3, r2
 800285c:	19db      	adds	r3, r3, r7
 800285e:	2202      	movs	r2, #2
 8002860:	701a      	strb	r2, [r3, #0]
 8002862:	e05e      	b.n	8002922 <UART_SetConfig+0x1fa>
 8002864:	231b      	movs	r3, #27
 8002866:	2218      	movs	r2, #24
 8002868:	189b      	adds	r3, r3, r2
 800286a:	19db      	adds	r3, r3, r7
 800286c:	2204      	movs	r2, #4
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	e057      	b.n	8002922 <UART_SetConfig+0x1fa>
 8002872:	231b      	movs	r3, #27
 8002874:	2218      	movs	r2, #24
 8002876:	189b      	adds	r3, r3, r2
 8002878:	19db      	adds	r3, r3, r7
 800287a:	2208      	movs	r2, #8
 800287c:	701a      	strb	r2, [r3, #0]
 800287e:	e050      	b.n	8002922 <UART_SetConfig+0x1fa>
 8002880:	231b      	movs	r3, #27
 8002882:	2218      	movs	r2, #24
 8002884:	189b      	adds	r3, r3, r2
 8002886:	19db      	adds	r3, r3, r7
 8002888:	2210      	movs	r2, #16
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	e049      	b.n	8002922 <UART_SetConfig+0x1fa>
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a7a      	ldr	r2, [pc, #488]	; (8002a7c <UART_SetConfig+0x354>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d13e      	bne.n	8002916 <UART_SetConfig+0x1ee>
 8002898:	4b7b      	ldr	r3, [pc, #492]	; (8002a88 <UART_SetConfig+0x360>)
 800289a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800289c:	23c0      	movs	r3, #192	; 0xc0
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	4013      	ands	r3, r2
 80028a2:	22c0      	movs	r2, #192	; 0xc0
 80028a4:	0112      	lsls	r2, r2, #4
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d027      	beq.n	80028fa <UART_SetConfig+0x1d2>
 80028aa:	22c0      	movs	r2, #192	; 0xc0
 80028ac:	0112      	lsls	r2, r2, #4
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d82a      	bhi.n	8002908 <UART_SetConfig+0x1e0>
 80028b2:	2280      	movs	r2, #128	; 0x80
 80028b4:	0112      	lsls	r2, r2, #4
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d011      	beq.n	80028de <UART_SetConfig+0x1b6>
 80028ba:	2280      	movs	r2, #128	; 0x80
 80028bc:	0112      	lsls	r2, r2, #4
 80028be:	4293      	cmp	r3, r2
 80028c0:	d822      	bhi.n	8002908 <UART_SetConfig+0x1e0>
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d004      	beq.n	80028d0 <UART_SetConfig+0x1a8>
 80028c6:	2280      	movs	r2, #128	; 0x80
 80028c8:	00d2      	lsls	r2, r2, #3
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00e      	beq.n	80028ec <UART_SetConfig+0x1c4>
 80028ce:	e01b      	b.n	8002908 <UART_SetConfig+0x1e0>
 80028d0:	231b      	movs	r3, #27
 80028d2:	2218      	movs	r2, #24
 80028d4:	189b      	adds	r3, r3, r2
 80028d6:	19db      	adds	r3, r3, r7
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
 80028dc:	e021      	b.n	8002922 <UART_SetConfig+0x1fa>
 80028de:	231b      	movs	r3, #27
 80028e0:	2218      	movs	r2, #24
 80028e2:	189b      	adds	r3, r3, r2
 80028e4:	19db      	adds	r3, r3, r7
 80028e6:	2202      	movs	r2, #2
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	e01a      	b.n	8002922 <UART_SetConfig+0x1fa>
 80028ec:	231b      	movs	r3, #27
 80028ee:	2218      	movs	r2, #24
 80028f0:	189b      	adds	r3, r3, r2
 80028f2:	19db      	adds	r3, r3, r7
 80028f4:	2204      	movs	r2, #4
 80028f6:	701a      	strb	r2, [r3, #0]
 80028f8:	e013      	b.n	8002922 <UART_SetConfig+0x1fa>
 80028fa:	231b      	movs	r3, #27
 80028fc:	2218      	movs	r2, #24
 80028fe:	189b      	adds	r3, r3, r2
 8002900:	19db      	adds	r3, r3, r7
 8002902:	2208      	movs	r2, #8
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	e00c      	b.n	8002922 <UART_SetConfig+0x1fa>
 8002908:	231b      	movs	r3, #27
 800290a:	2218      	movs	r2, #24
 800290c:	189b      	adds	r3, r3, r2
 800290e:	19db      	adds	r3, r3, r7
 8002910:	2210      	movs	r2, #16
 8002912:	701a      	strb	r2, [r3, #0]
 8002914:	e005      	b.n	8002922 <UART_SetConfig+0x1fa>
 8002916:	231b      	movs	r3, #27
 8002918:	2218      	movs	r2, #24
 800291a:	189b      	adds	r3, r3, r2
 800291c:	19db      	adds	r3, r3, r7
 800291e:	2210      	movs	r2, #16
 8002920:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a55      	ldr	r2, [pc, #340]	; (8002a7c <UART_SetConfig+0x354>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d000      	beq.n	800292e <UART_SetConfig+0x206>
 800292c:	e084      	b.n	8002a38 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800292e:	231b      	movs	r3, #27
 8002930:	2218      	movs	r2, #24
 8002932:	189b      	adds	r3, r3, r2
 8002934:	19db      	adds	r3, r3, r7
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b08      	cmp	r3, #8
 800293a:	d01d      	beq.n	8002978 <UART_SetConfig+0x250>
 800293c:	dc20      	bgt.n	8002980 <UART_SetConfig+0x258>
 800293e:	2b04      	cmp	r3, #4
 8002940:	d015      	beq.n	800296e <UART_SetConfig+0x246>
 8002942:	dc1d      	bgt.n	8002980 <UART_SetConfig+0x258>
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <UART_SetConfig+0x226>
 8002948:	2b02      	cmp	r3, #2
 800294a:	d005      	beq.n	8002958 <UART_SetConfig+0x230>
 800294c:	e018      	b.n	8002980 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800294e:	f7ff f8df 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 8002952:	0003      	movs	r3, r0
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002956:	e01c      	b.n	8002992 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002958:	4b4b      	ldr	r3, [pc, #300]	; (8002a88 <UART_SetConfig+0x360>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2210      	movs	r2, #16
 800295e:	4013      	ands	r3, r2
 8002960:	d002      	beq.n	8002968 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002962:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <UART_SetConfig+0x368>)
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002966:	e014      	b.n	8002992 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002968:	4b4a      	ldr	r3, [pc, #296]	; (8002a94 <UART_SetConfig+0x36c>)
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800296c:	e011      	b.n	8002992 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800296e:	f7ff f81f 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 8002972:	0003      	movs	r3, r0
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002976:	e00c      	b.n	8002992 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800297e:	e008      	b.n	8002992 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002984:	231a      	movs	r3, #26
 8002986:	2218      	movs	r2, #24
 8002988:	189b      	adds	r3, r3, r2
 800298a:	19db      	adds	r3, r3, r7
 800298c:	2201      	movs	r2, #1
 800298e:	701a      	strb	r2, [r3, #0]
        break;
 8002990:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d100      	bne.n	800299a <UART_SetConfig+0x272>
 8002998:	e132      	b.n	8002c00 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	0013      	movs	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	189b      	adds	r3, r3, r2
 80029a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d305      	bcc.n	80029b6 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d906      	bls.n	80029c4 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80029b6:	231a      	movs	r3, #26
 80029b8:	2218      	movs	r2, #24
 80029ba:	189b      	adds	r3, r3, r2
 80029bc:	19db      	adds	r3, r3, r7
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	e11d      	b.n	8002c00 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80029c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	6939      	ldr	r1, [r7, #16]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	000b      	movs	r3, r1
 80029d2:	0e1b      	lsrs	r3, r3, #24
 80029d4:	0010      	movs	r0, r2
 80029d6:	0205      	lsls	r5, r0, #8
 80029d8:	431d      	orrs	r5, r3
 80029da:	000b      	movs	r3, r1
 80029dc:	021c      	lsls	r4, r3, #8
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68b8      	ldr	r0, [r7, #8]
 80029ec:	68f9      	ldr	r1, [r7, #12]
 80029ee:	1900      	adds	r0, r0, r4
 80029f0:	4169      	adcs	r1, r5
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	2300      	movs	r3, #0
 80029fa:	607b      	str	r3, [r7, #4]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f7fd fc18 	bl	8000234 <__aeabi_uldivmod>
 8002a04:	0002      	movs	r2, r0
 8002a06:	000b      	movs	r3, r1
 8002a08:	0013      	movs	r3, r2
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a0e:	23c0      	movs	r3, #192	; 0xc0
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d309      	bcc.n	8002a2a <UART_SetConfig+0x302>
 8002a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	035b      	lsls	r3, r3, #13
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d204      	bcs.n	8002a2a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a26:	60da      	str	r2, [r3, #12]
 8002a28:	e0ea      	b.n	8002c00 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002a2a:	231a      	movs	r3, #26
 8002a2c:	2218      	movs	r2, #24
 8002a2e:	189b      	adds	r3, r3, r2
 8002a30:	19db      	adds	r3, r3, r7
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	e0e3      	b.n	8002c00 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	69da      	ldr	r2, [r3, #28]
 8002a3c:	2380      	movs	r3, #128	; 0x80
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d000      	beq.n	8002a46 <UART_SetConfig+0x31e>
 8002a44:	e085      	b.n	8002b52 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002a46:	231b      	movs	r3, #27
 8002a48:	2218      	movs	r2, #24
 8002a4a:	189b      	adds	r3, r3, r2
 8002a4c:	19db      	adds	r3, r3, r7
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d837      	bhi.n	8002ac4 <UART_SetConfig+0x39c>
 8002a54:	009a      	lsls	r2, r3, #2
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <UART_SetConfig+0x370>)
 8002a58:	18d3      	adds	r3, r2, r3
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a5e:	f7ff f857 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 8002a62:	0003      	movs	r3, r0
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a66:	e036      	b.n	8002ad6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a68:	f7ff f868 	bl	8001b3c <HAL_RCC_GetPCLK2Freq>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a70:	e031      	b.n	8002ad6 <UART_SetConfig+0x3ae>
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	efff69f3 	.word	0xefff69f3
 8002a78:	ffffcfff 	.word	0xffffcfff
 8002a7c:	40004800 	.word	0x40004800
 8002a80:	fffff4ff 	.word	0xfffff4ff
 8002a84:	40013800 	.word	0x40013800
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40004400 	.word	0x40004400
 8002a90:	003d0900 	.word	0x003d0900
 8002a94:	00f42400 	.word	0x00f42400
 8002a98:	08003a3c 	.word	0x08003a3c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a9c:	4b60      	ldr	r3, [pc, #384]	; (8002c20 <UART_SetConfig+0x4f8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d002      	beq.n	8002aac <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002aa6:	4b5f      	ldr	r3, [pc, #380]	; (8002c24 <UART_SetConfig+0x4fc>)
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002aaa:	e014      	b.n	8002ad6 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002aac:	4b5e      	ldr	r3, [pc, #376]	; (8002c28 <UART_SetConfig+0x500>)
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ab0:	e011      	b.n	8002ad6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ab2:	f7fe ff7d 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002aba:	e00c      	b.n	8002ad6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ac2:	e008      	b.n	8002ad6 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002ac8:	231a      	movs	r3, #26
 8002aca:	2218      	movs	r2, #24
 8002acc:	189b      	adds	r3, r3, r2
 8002ace:	19db      	adds	r3, r3, r7
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	701a      	strb	r2, [r3, #0]
        break;
 8002ad4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d100      	bne.n	8002ade <UART_SetConfig+0x3b6>
 8002adc:	e090      	b.n	8002c00 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae0:	005a      	lsls	r2, r3, #1
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	18d2      	adds	r2, r2, r3
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	0019      	movs	r1, r3
 8002af0:	0010      	movs	r0, r2
 8002af2:	f7fd fb13 	bl	800011c <__udivsi3>
 8002af6:	0003      	movs	r3, r0
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	2b0f      	cmp	r3, #15
 8002afe:	d921      	bls.n	8002b44 <UART_SetConfig+0x41c>
 8002b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	025b      	lsls	r3, r3, #9
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d21c      	bcs.n	8002b44 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	200e      	movs	r0, #14
 8002b10:	2418      	movs	r4, #24
 8002b12:	1903      	adds	r3, r0, r4
 8002b14:	19db      	adds	r3, r3, r7
 8002b16:	210f      	movs	r1, #15
 8002b18:	438a      	bics	r2, r1
 8002b1a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2207      	movs	r2, #7
 8002b24:	4013      	ands	r3, r2
 8002b26:	b299      	uxth	r1, r3
 8002b28:	1903      	adds	r3, r0, r4
 8002b2a:	19db      	adds	r3, r3, r7
 8002b2c:	1902      	adds	r2, r0, r4
 8002b2e:	19d2      	adds	r2, r2, r7
 8002b30:	8812      	ldrh	r2, [r2, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	1902      	adds	r2, r0, r4
 8002b3c:	19d2      	adds	r2, r2, r7
 8002b3e:	8812      	ldrh	r2, [r2, #0]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	e05d      	b.n	8002c00 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002b44:	231a      	movs	r3, #26
 8002b46:	2218      	movs	r2, #24
 8002b48:	189b      	adds	r3, r3, r2
 8002b4a:	19db      	adds	r3, r3, r7
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e056      	b.n	8002c00 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b52:	231b      	movs	r3, #27
 8002b54:	2218      	movs	r2, #24
 8002b56:	189b      	adds	r3, r3, r2
 8002b58:	19db      	adds	r3, r3, r7
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d822      	bhi.n	8002ba6 <UART_SetConfig+0x47e>
 8002b60:	009a      	lsls	r2, r3, #2
 8002b62:	4b32      	ldr	r3, [pc, #200]	; (8002c2c <UART_SetConfig+0x504>)
 8002b64:	18d3      	adds	r3, r2, r3
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b6a:	f7fe ffd1 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b72:	e021      	b.n	8002bb8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b74:	f7fe ffe2 	bl	8001b3c <HAL_RCC_GetPCLK2Freq>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b7c:	e01c      	b.n	8002bb8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b7e:	4b28      	ldr	r3, [pc, #160]	; (8002c20 <UART_SetConfig+0x4f8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2210      	movs	r2, #16
 8002b84:	4013      	ands	r3, r2
 8002b86:	d002      	beq.n	8002b8e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b88:	4b26      	ldr	r3, [pc, #152]	; (8002c24 <UART_SetConfig+0x4fc>)
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b8c:	e014      	b.n	8002bb8 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002b8e:	4b26      	ldr	r3, [pc, #152]	; (8002c28 <UART_SetConfig+0x500>)
 8002b90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b92:	e011      	b.n	8002bb8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b94:	f7fe ff0c 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b9c:	e00c      	b.n	8002bb8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ba4:	e008      	b.n	8002bb8 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002baa:	231a      	movs	r3, #26
 8002bac:	2218      	movs	r2, #24
 8002bae:	189b      	adds	r3, r3, r2
 8002bb0:	19db      	adds	r3, r3, r7
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
        break;
 8002bb6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d020      	beq.n	8002c00 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	085a      	lsrs	r2, r3, #1
 8002bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc6:	18d2      	adds	r2, r2, r3
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	0019      	movs	r1, r3
 8002bce:	0010      	movs	r0, r2
 8002bd0:	f7fd faa4 	bl	800011c <__udivsi3>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	2b0f      	cmp	r3, #15
 8002bdc:	d90a      	bls.n	8002bf4 <UART_SetConfig+0x4cc>
 8002bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	025b      	lsls	r3, r3, #9
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d205      	bcs.n	8002bf4 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	e005      	b.n	8002c00 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002bf4:	231a      	movs	r3, #26
 8002bf6:	2218      	movs	r2, #24
 8002bf8:	189b      	adds	r3, r3, r2
 8002bfa:	19db      	adds	r3, r3, r7
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	2200      	movs	r2, #0
 8002c04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002c0c:	231a      	movs	r3, #26
 8002c0e:	2218      	movs	r2, #24
 8002c10:	189b      	adds	r3, r3, r2
 8002c12:	19db      	adds	r3, r3, r7
 8002c14:	781b      	ldrb	r3, [r3, #0]
}
 8002c16:	0018      	movs	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b00e      	add	sp, #56	; 0x38
 8002c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	40021000 	.word	0x40021000
 8002c24:	003d0900 	.word	0x003d0900
 8002c28:	00f42400 	.word	0x00f42400
 8002c2c:	08003a60 	.word	0x08003a60

08002c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d00b      	beq.n	8002c5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	4a4a      	ldr	r2, [pc, #296]	; (8002d74 <UART_AdvFeatureConfig+0x144>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	2202      	movs	r2, #2
 8002c60:	4013      	ands	r3, r2
 8002c62:	d00b      	beq.n	8002c7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4a43      	ldr	r2, [pc, #268]	; (8002d78 <UART_AdvFeatureConfig+0x148>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	0019      	movs	r1, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	2204      	movs	r2, #4
 8002c82:	4013      	ands	r3, r2
 8002c84:	d00b      	beq.n	8002c9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	4a3b      	ldr	r2, [pc, #236]	; (8002d7c <UART_AdvFeatureConfig+0x14c>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	0019      	movs	r1, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	2208      	movs	r2, #8
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d00b      	beq.n	8002cc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4a34      	ldr	r2, [pc, #208]	; (8002d80 <UART_AdvFeatureConfig+0x150>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	2210      	movs	r2, #16
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d00b      	beq.n	8002ce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4a2c      	ldr	r2, [pc, #176]	; (8002d84 <UART_AdvFeatureConfig+0x154>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d00b      	beq.n	8002d04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	4a25      	ldr	r2, [pc, #148]	; (8002d88 <UART_AdvFeatureConfig+0x158>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	2240      	movs	r2, #64	; 0x40
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d01d      	beq.n	8002d4a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4a1d      	ldr	r2, [pc, #116]	; (8002d8c <UART_AdvFeatureConfig+0x15c>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	0019      	movs	r1, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	035b      	lsls	r3, r3, #13
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d10b      	bne.n	8002d4a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4a15      	ldr	r2, [pc, #84]	; (8002d90 <UART_AdvFeatureConfig+0x160>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	0019      	movs	r1, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	2280      	movs	r2, #128	; 0x80
 8002d50:	4013      	ands	r3, r2
 8002d52:	d00b      	beq.n	8002d6c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4a0e      	ldr	r2, [pc, #56]	; (8002d94 <UART_AdvFeatureConfig+0x164>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	0019      	movs	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	605a      	str	r2, [r3, #4]
  }
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b002      	add	sp, #8
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	fffdffff 	.word	0xfffdffff
 8002d78:	fffeffff 	.word	0xfffeffff
 8002d7c:	fffbffff 	.word	0xfffbffff
 8002d80:	ffff7fff 	.word	0xffff7fff
 8002d84:	ffffefff 	.word	0xffffefff
 8002d88:	ffffdfff 	.word	0xffffdfff
 8002d8c:	ffefffff 	.word	0xffefffff
 8002d90:	ff9fffff 	.word	0xff9fffff
 8002d94:	fff7ffff 	.word	0xfff7ffff

08002d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b092      	sub	sp, #72	; 0x48
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2284      	movs	r2, #132	; 0x84
 8002da4:	2100      	movs	r1, #0
 8002da6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002da8:	f7fd fe80 	bl	8000aac <HAL_GetTick>
 8002dac:	0003      	movs	r3, r0
 8002dae:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2208      	movs	r2, #8
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d12c      	bne.n	8002e18 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc0:	2280      	movs	r2, #128	; 0x80
 8002dc2:	0391      	lsls	r1, r2, #14
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4a46      	ldr	r2, [pc, #280]	; (8002ee0 <UART_CheckIdleState+0x148>)
 8002dc8:	9200      	str	r2, [sp, #0]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f000 f88c 	bl	8002ee8 <UART_WaitOnFlagUntilTimeout>
 8002dd0:	1e03      	subs	r3, r0, #0
 8002dd2:	d021      	beq.n	8002e18 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002ddc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dde:	2301      	movs	r3, #1
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de4:	f383 8810 	msr	PRIMASK, r3
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2180      	movs	r1, #128	; 0x80
 8002df6:	438a      	bics	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	f383 8810 	msr	PRIMASK, r3
}
 8002e04:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2278      	movs	r2, #120	; 0x78
 8002e10:	2100      	movs	r1, #0
 8002e12:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e05f      	b.n	8002ed8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2204      	movs	r2, #4
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d146      	bne.n	8002eb4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	03d1      	lsls	r1, r2, #15
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	4a2c      	ldr	r2, [pc, #176]	; (8002ee0 <UART_CheckIdleState+0x148>)
 8002e30:	9200      	str	r2, [sp, #0]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f000 f858 	bl	8002ee8 <UART_WaitOnFlagUntilTimeout>
 8002e38:	1e03      	subs	r3, r0, #0
 8002e3a:	d03b      	beq.n	8002eb4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e40:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e42:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e44:	637b      	str	r3, [r7, #52]	; 0x34
 8002e46:	2301      	movs	r3, #1
 8002e48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f383 8810 	msr	PRIMASK, r3
}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4921      	ldr	r1, [pc, #132]	; (8002ee4 <UART_CheckIdleState+0x14c>)
 8002e5e:	400a      	ands	r2, r1
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f383 8810 	msr	PRIMASK, r3
}
 8002e6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e72:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e74:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e76:	633b      	str	r3, [r7, #48]	; 0x30
 8002e78:	2301      	movs	r3, #1
 8002e7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f383 8810 	msr	PRIMASK, r3
}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2101      	movs	r1, #1
 8002e90:	438a      	bics	r2, r1
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	f383 8810 	msr	PRIMASK, r3
}
 8002e9e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2280      	movs	r2, #128	; 0x80
 8002ea4:	2120      	movs	r1, #32
 8002ea6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2278      	movs	r2, #120	; 0x78
 8002eac:	2100      	movs	r1, #0
 8002eae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e011      	b.n	8002ed8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2280      	movs	r2, #128	; 0x80
 8002ebe:	2120      	movs	r1, #32
 8002ec0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2278      	movs	r2, #120	; 0x78
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	0018      	movs	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b010      	add	sp, #64	; 0x40
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	01ffffff 	.word	0x01ffffff
 8002ee4:	fffffedf 	.word	0xfffffedf

08002ee8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	1dfb      	adds	r3, r7, #7
 8002ef6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef8:	e04b      	b.n	8002f92 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	3301      	adds	r3, #1
 8002efe:	d048      	beq.n	8002f92 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f00:	f7fd fdd4 	bl	8000aac <HAL_GetTick>
 8002f04:	0002      	movs	r2, r0
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d302      	bcc.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e04b      	b.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2204      	movs	r2, #4
 8002f22:	4013      	ands	r3, r2
 8002f24:	d035      	beq.n	8002f92 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	2208      	movs	r2, #8
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d111      	bne.n	8002f58 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2208      	movs	r2, #8
 8002f3a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f000 f83c 	bl	8002fbc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2284      	movs	r2, #132	; 0x84
 8002f48:	2108      	movs	r1, #8
 8002f4a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2278      	movs	r2, #120	; 0x78
 8002f50:	2100      	movs	r1, #0
 8002f52:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e02c      	b.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	69da      	ldr	r2, [r3, #28]
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	401a      	ands	r2, r3
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d112      	bne.n	8002f92 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2280      	movs	r2, #128	; 0x80
 8002f72:	0112      	lsls	r2, r2, #4
 8002f74:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f000 f81f 	bl	8002fbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2284      	movs	r2, #132	; 0x84
 8002f82:	2120      	movs	r1, #32
 8002f84:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2278      	movs	r2, #120	; 0x78
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e00f      	b.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	425a      	negs	r2, r3
 8002fa2:	4153      	adcs	r3, r2
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	001a      	movs	r2, r3
 8002fa8:	1dfb      	adds	r3, r7, #7
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d0a4      	beq.n	8002efa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b004      	add	sp, #16
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08e      	sub	sp, #56	; 0x38
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc8:	617b      	str	r3, [r7, #20]
  return(result);
 8002fca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8002fce:	2301      	movs	r3, #1
 8002fd0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	f383 8810 	msr	PRIMASK, r3
}
 8002fd8:	46c0      	nop			; (mov r8, r8)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4926      	ldr	r1, [pc, #152]	; (8003080 <UART_EndRxTransfer+0xc4>)
 8002fe6:	400a      	ands	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f383 8810 	msr	PRIMASK, r3
}
 8002ff4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8002ffa:	623b      	str	r3, [r7, #32]
  return(result);
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ffe:	633b      	str	r3, [r7, #48]	; 0x30
 8003000:	2301      	movs	r3, #1
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	f383 8810 	msr	PRIMASK, r3
}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2101      	movs	r1, #1
 8003018:	438a      	bics	r2, r1
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	f383 8810 	msr	PRIMASK, r3
}
 8003026:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800302c:	2b01      	cmp	r3, #1
 800302e:	d118      	bne.n	8003062 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003030:	f3ef 8310 	mrs	r3, PRIMASK
 8003034:	60bb      	str	r3, [r7, #8]
  return(result);
 8003036:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
 800303a:	2301      	movs	r3, #1
 800303c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f383 8810 	msr	PRIMASK, r3
}
 8003044:	46c0      	nop			; (mov r8, r8)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2110      	movs	r1, #16
 8003052:	438a      	bics	r2, r1
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f383 8810 	msr	PRIMASK, r3
}
 8003060:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2280      	movs	r2, #128	; 0x80
 8003066:	2120      	movs	r1, #32
 8003068:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	46bd      	mov	sp, r7
 800307a:	b00e      	add	sp, #56	; 0x38
 800307c:	bd80      	pop	{r7, pc}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	fffffedf 	.word	0xfffffedf

08003084 <siprintf>:
 8003084:	b40e      	push	{r1, r2, r3}
 8003086:	b500      	push	{lr}
 8003088:	490b      	ldr	r1, [pc, #44]	; (80030b8 <siprintf+0x34>)
 800308a:	b09c      	sub	sp, #112	; 0x70
 800308c:	ab1d      	add	r3, sp, #116	; 0x74
 800308e:	9002      	str	r0, [sp, #8]
 8003090:	9006      	str	r0, [sp, #24]
 8003092:	9107      	str	r1, [sp, #28]
 8003094:	9104      	str	r1, [sp, #16]
 8003096:	4809      	ldr	r0, [pc, #36]	; (80030bc <siprintf+0x38>)
 8003098:	4909      	ldr	r1, [pc, #36]	; (80030c0 <siprintf+0x3c>)
 800309a:	cb04      	ldmia	r3!, {r2}
 800309c:	9105      	str	r1, [sp, #20]
 800309e:	6800      	ldr	r0, [r0, #0]
 80030a0:	a902      	add	r1, sp, #8
 80030a2:	9301      	str	r3, [sp, #4]
 80030a4:	f000 f9a2 	bl	80033ec <_svfiprintf_r>
 80030a8:	2200      	movs	r2, #0
 80030aa:	9b02      	ldr	r3, [sp, #8]
 80030ac:	701a      	strb	r2, [r3, #0]
 80030ae:	b01c      	add	sp, #112	; 0x70
 80030b0:	bc08      	pop	{r3}
 80030b2:	b003      	add	sp, #12
 80030b4:	4718      	bx	r3
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	7fffffff 	.word	0x7fffffff
 80030bc:	20000058 	.word	0x20000058
 80030c0:	ffff0208 	.word	0xffff0208

080030c4 <memset>:
 80030c4:	0003      	movs	r3, r0
 80030c6:	1882      	adds	r2, r0, r2
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d100      	bne.n	80030ce <memset+0xa>
 80030cc:	4770      	bx	lr
 80030ce:	7019      	strb	r1, [r3, #0]
 80030d0:	3301      	adds	r3, #1
 80030d2:	e7f9      	b.n	80030c8 <memset+0x4>

080030d4 <__errno>:
 80030d4:	4b01      	ldr	r3, [pc, #4]	; (80030dc <__errno+0x8>)
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	4770      	bx	lr
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	20000058 	.word	0x20000058

080030e0 <__libc_init_array>:
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	2600      	movs	r6, #0
 80030e4:	4c0c      	ldr	r4, [pc, #48]	; (8003118 <__libc_init_array+0x38>)
 80030e6:	4d0d      	ldr	r5, [pc, #52]	; (800311c <__libc_init_array+0x3c>)
 80030e8:	1b64      	subs	r4, r4, r5
 80030ea:	10a4      	asrs	r4, r4, #2
 80030ec:	42a6      	cmp	r6, r4
 80030ee:	d109      	bne.n	8003104 <__libc_init_array+0x24>
 80030f0:	2600      	movs	r6, #0
 80030f2:	f000 fc6d 	bl	80039d0 <_init>
 80030f6:	4c0a      	ldr	r4, [pc, #40]	; (8003120 <__libc_init_array+0x40>)
 80030f8:	4d0a      	ldr	r5, [pc, #40]	; (8003124 <__libc_init_array+0x44>)
 80030fa:	1b64      	subs	r4, r4, r5
 80030fc:	10a4      	asrs	r4, r4, #2
 80030fe:	42a6      	cmp	r6, r4
 8003100:	d105      	bne.n	800310e <__libc_init_array+0x2e>
 8003102:	bd70      	pop	{r4, r5, r6, pc}
 8003104:	00b3      	lsls	r3, r6, #2
 8003106:	58eb      	ldr	r3, [r5, r3]
 8003108:	4798      	blx	r3
 800310a:	3601      	adds	r6, #1
 800310c:	e7ee      	b.n	80030ec <__libc_init_array+0xc>
 800310e:	00b3      	lsls	r3, r6, #2
 8003110:	58eb      	ldr	r3, [r5, r3]
 8003112:	4798      	blx	r3
 8003114:	3601      	adds	r6, #1
 8003116:	e7f2      	b.n	80030fe <__libc_init_array+0x1e>
 8003118:	08003ac0 	.word	0x08003ac0
 800311c:	08003ac0 	.word	0x08003ac0
 8003120:	08003ac4 	.word	0x08003ac4
 8003124:	08003ac0 	.word	0x08003ac0

08003128 <__retarget_lock_acquire_recursive>:
 8003128:	4770      	bx	lr

0800312a <__retarget_lock_release_recursive>:
 800312a:	4770      	bx	lr

0800312c <_free_r>:
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	0005      	movs	r5, r0
 8003130:	2900      	cmp	r1, #0
 8003132:	d010      	beq.n	8003156 <_free_r+0x2a>
 8003134:	1f0c      	subs	r4, r1, #4
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	da00      	bge.n	800313e <_free_r+0x12>
 800313c:	18e4      	adds	r4, r4, r3
 800313e:	0028      	movs	r0, r5
 8003140:	f000 f8e2 	bl	8003308 <__malloc_lock>
 8003144:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <_free_r+0x90>)
 8003146:	6813      	ldr	r3, [r2, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <_free_r+0x2c>
 800314c:	6063      	str	r3, [r4, #4]
 800314e:	6014      	str	r4, [r2, #0]
 8003150:	0028      	movs	r0, r5
 8003152:	f000 f8e1 	bl	8003318 <__malloc_unlock>
 8003156:	bd70      	pop	{r4, r5, r6, pc}
 8003158:	42a3      	cmp	r3, r4
 800315a:	d908      	bls.n	800316e <_free_r+0x42>
 800315c:	6820      	ldr	r0, [r4, #0]
 800315e:	1821      	adds	r1, r4, r0
 8003160:	428b      	cmp	r3, r1
 8003162:	d1f3      	bne.n	800314c <_free_r+0x20>
 8003164:	6819      	ldr	r1, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	1809      	adds	r1, r1, r0
 800316a:	6021      	str	r1, [r4, #0]
 800316c:	e7ee      	b.n	800314c <_free_r+0x20>
 800316e:	001a      	movs	r2, r3
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <_free_r+0x4e>
 8003176:	42a3      	cmp	r3, r4
 8003178:	d9f9      	bls.n	800316e <_free_r+0x42>
 800317a:	6811      	ldr	r1, [r2, #0]
 800317c:	1850      	adds	r0, r2, r1
 800317e:	42a0      	cmp	r0, r4
 8003180:	d10b      	bne.n	800319a <_free_r+0x6e>
 8003182:	6820      	ldr	r0, [r4, #0]
 8003184:	1809      	adds	r1, r1, r0
 8003186:	1850      	adds	r0, r2, r1
 8003188:	6011      	str	r1, [r2, #0]
 800318a:	4283      	cmp	r3, r0
 800318c:	d1e0      	bne.n	8003150 <_free_r+0x24>
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	1841      	adds	r1, r0, r1
 8003194:	6011      	str	r1, [r2, #0]
 8003196:	6053      	str	r3, [r2, #4]
 8003198:	e7da      	b.n	8003150 <_free_r+0x24>
 800319a:	42a0      	cmp	r0, r4
 800319c:	d902      	bls.n	80031a4 <_free_r+0x78>
 800319e:	230c      	movs	r3, #12
 80031a0:	602b      	str	r3, [r5, #0]
 80031a2:	e7d5      	b.n	8003150 <_free_r+0x24>
 80031a4:	6820      	ldr	r0, [r4, #0]
 80031a6:	1821      	adds	r1, r4, r0
 80031a8:	428b      	cmp	r3, r1
 80031aa:	d103      	bne.n	80031b4 <_free_r+0x88>
 80031ac:	6819      	ldr	r1, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	1809      	adds	r1, r1, r0
 80031b2:	6021      	str	r1, [r4, #0]
 80031b4:	6063      	str	r3, [r4, #4]
 80031b6:	6054      	str	r4, [r2, #4]
 80031b8:	e7ca      	b.n	8003150 <_free_r+0x24>
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	200002ac 	.word	0x200002ac

080031c0 <sbrk_aligned>:
 80031c0:	b570      	push	{r4, r5, r6, lr}
 80031c2:	4e0f      	ldr	r6, [pc, #60]	; (8003200 <sbrk_aligned+0x40>)
 80031c4:	000d      	movs	r5, r1
 80031c6:	6831      	ldr	r1, [r6, #0]
 80031c8:	0004      	movs	r4, r0
 80031ca:	2900      	cmp	r1, #0
 80031cc:	d102      	bne.n	80031d4 <sbrk_aligned+0x14>
 80031ce:	f000 fba1 	bl	8003914 <_sbrk_r>
 80031d2:	6030      	str	r0, [r6, #0]
 80031d4:	0029      	movs	r1, r5
 80031d6:	0020      	movs	r0, r4
 80031d8:	f000 fb9c 	bl	8003914 <_sbrk_r>
 80031dc:	1c43      	adds	r3, r0, #1
 80031de:	d00a      	beq.n	80031f6 <sbrk_aligned+0x36>
 80031e0:	2303      	movs	r3, #3
 80031e2:	1cc5      	adds	r5, r0, #3
 80031e4:	439d      	bics	r5, r3
 80031e6:	42a8      	cmp	r0, r5
 80031e8:	d007      	beq.n	80031fa <sbrk_aligned+0x3a>
 80031ea:	1a29      	subs	r1, r5, r0
 80031ec:	0020      	movs	r0, r4
 80031ee:	f000 fb91 	bl	8003914 <_sbrk_r>
 80031f2:	3001      	adds	r0, #1
 80031f4:	d101      	bne.n	80031fa <sbrk_aligned+0x3a>
 80031f6:	2501      	movs	r5, #1
 80031f8:	426d      	negs	r5, r5
 80031fa:	0028      	movs	r0, r5
 80031fc:	bd70      	pop	{r4, r5, r6, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	200002b0 	.word	0x200002b0

08003204 <_malloc_r>:
 8003204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003206:	2203      	movs	r2, #3
 8003208:	1ccb      	adds	r3, r1, #3
 800320a:	4393      	bics	r3, r2
 800320c:	3308      	adds	r3, #8
 800320e:	0006      	movs	r6, r0
 8003210:	001f      	movs	r7, r3
 8003212:	2b0c      	cmp	r3, #12
 8003214:	d238      	bcs.n	8003288 <_malloc_r+0x84>
 8003216:	270c      	movs	r7, #12
 8003218:	42b9      	cmp	r1, r7
 800321a:	d837      	bhi.n	800328c <_malloc_r+0x88>
 800321c:	0030      	movs	r0, r6
 800321e:	f000 f873 	bl	8003308 <__malloc_lock>
 8003222:	4b38      	ldr	r3, [pc, #224]	; (8003304 <_malloc_r+0x100>)
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	001c      	movs	r4, r3
 800322a:	2c00      	cmp	r4, #0
 800322c:	d133      	bne.n	8003296 <_malloc_r+0x92>
 800322e:	0039      	movs	r1, r7
 8003230:	0030      	movs	r0, r6
 8003232:	f7ff ffc5 	bl	80031c0 <sbrk_aligned>
 8003236:	0004      	movs	r4, r0
 8003238:	1c43      	adds	r3, r0, #1
 800323a:	d15e      	bne.n	80032fa <_malloc_r+0xf6>
 800323c:	9b00      	ldr	r3, [sp, #0]
 800323e:	681c      	ldr	r4, [r3, #0]
 8003240:	0025      	movs	r5, r4
 8003242:	2d00      	cmp	r5, #0
 8003244:	d14e      	bne.n	80032e4 <_malloc_r+0xe0>
 8003246:	2c00      	cmp	r4, #0
 8003248:	d051      	beq.n	80032ee <_malloc_r+0xea>
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	0029      	movs	r1, r5
 800324e:	18e3      	adds	r3, r4, r3
 8003250:	0030      	movs	r0, r6
 8003252:	9301      	str	r3, [sp, #4]
 8003254:	f000 fb5e 	bl	8003914 <_sbrk_r>
 8003258:	9b01      	ldr	r3, [sp, #4]
 800325a:	4283      	cmp	r3, r0
 800325c:	d147      	bne.n	80032ee <_malloc_r+0xea>
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	0030      	movs	r0, r6
 8003262:	1aff      	subs	r7, r7, r3
 8003264:	0039      	movs	r1, r7
 8003266:	f7ff ffab 	bl	80031c0 <sbrk_aligned>
 800326a:	3001      	adds	r0, #1
 800326c:	d03f      	beq.n	80032ee <_malloc_r+0xea>
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	19db      	adds	r3, r3, r7
 8003272:	6023      	str	r3, [r4, #0]
 8003274:	9b00      	ldr	r3, [sp, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d040      	beq.n	80032fe <_malloc_r+0xfa>
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	42a2      	cmp	r2, r4
 8003280:	d133      	bne.n	80032ea <_malloc_r+0xe6>
 8003282:	2200      	movs	r2, #0
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	e014      	b.n	80032b2 <_malloc_r+0xae>
 8003288:	2b00      	cmp	r3, #0
 800328a:	dac5      	bge.n	8003218 <_malloc_r+0x14>
 800328c:	230c      	movs	r3, #12
 800328e:	2500      	movs	r5, #0
 8003290:	6033      	str	r3, [r6, #0]
 8003292:	0028      	movs	r0, r5
 8003294:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003296:	6821      	ldr	r1, [r4, #0]
 8003298:	1bc9      	subs	r1, r1, r7
 800329a:	d420      	bmi.n	80032de <_malloc_r+0xda>
 800329c:	290b      	cmp	r1, #11
 800329e:	d918      	bls.n	80032d2 <_malloc_r+0xce>
 80032a0:	19e2      	adds	r2, r4, r7
 80032a2:	6027      	str	r7, [r4, #0]
 80032a4:	42a3      	cmp	r3, r4
 80032a6:	d112      	bne.n	80032ce <_malloc_r+0xca>
 80032a8:	9b00      	ldr	r3, [sp, #0]
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	6863      	ldr	r3, [r4, #4]
 80032ae:	6011      	str	r1, [r2, #0]
 80032b0:	6053      	str	r3, [r2, #4]
 80032b2:	0030      	movs	r0, r6
 80032b4:	0025      	movs	r5, r4
 80032b6:	f000 f82f 	bl	8003318 <__malloc_unlock>
 80032ba:	2207      	movs	r2, #7
 80032bc:	350b      	adds	r5, #11
 80032be:	1d23      	adds	r3, r4, #4
 80032c0:	4395      	bics	r5, r2
 80032c2:	1aea      	subs	r2, r5, r3
 80032c4:	429d      	cmp	r5, r3
 80032c6:	d0e4      	beq.n	8003292 <_malloc_r+0x8e>
 80032c8:	1b5b      	subs	r3, r3, r5
 80032ca:	50a3      	str	r3, [r4, r2]
 80032cc:	e7e1      	b.n	8003292 <_malloc_r+0x8e>
 80032ce:	605a      	str	r2, [r3, #4]
 80032d0:	e7ec      	b.n	80032ac <_malloc_r+0xa8>
 80032d2:	6862      	ldr	r2, [r4, #4]
 80032d4:	42a3      	cmp	r3, r4
 80032d6:	d1d5      	bne.n	8003284 <_malloc_r+0x80>
 80032d8:	9b00      	ldr	r3, [sp, #0]
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	e7e9      	b.n	80032b2 <_malloc_r+0xae>
 80032de:	0023      	movs	r3, r4
 80032e0:	6864      	ldr	r4, [r4, #4]
 80032e2:	e7a2      	b.n	800322a <_malloc_r+0x26>
 80032e4:	002c      	movs	r4, r5
 80032e6:	686d      	ldr	r5, [r5, #4]
 80032e8:	e7ab      	b.n	8003242 <_malloc_r+0x3e>
 80032ea:	0013      	movs	r3, r2
 80032ec:	e7c4      	b.n	8003278 <_malloc_r+0x74>
 80032ee:	230c      	movs	r3, #12
 80032f0:	0030      	movs	r0, r6
 80032f2:	6033      	str	r3, [r6, #0]
 80032f4:	f000 f810 	bl	8003318 <__malloc_unlock>
 80032f8:	e7cb      	b.n	8003292 <_malloc_r+0x8e>
 80032fa:	6027      	str	r7, [r4, #0]
 80032fc:	e7d9      	b.n	80032b2 <_malloc_r+0xae>
 80032fe:	605b      	str	r3, [r3, #4]
 8003300:	deff      	udf	#255	; 0xff
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	200002ac 	.word	0x200002ac

08003308 <__malloc_lock>:
 8003308:	b510      	push	{r4, lr}
 800330a:	4802      	ldr	r0, [pc, #8]	; (8003314 <__malloc_lock+0xc>)
 800330c:	f7ff ff0c 	bl	8003128 <__retarget_lock_acquire_recursive>
 8003310:	bd10      	pop	{r4, pc}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	200002a8 	.word	0x200002a8

08003318 <__malloc_unlock>:
 8003318:	b510      	push	{r4, lr}
 800331a:	4802      	ldr	r0, [pc, #8]	; (8003324 <__malloc_unlock+0xc>)
 800331c:	f7ff ff05 	bl	800312a <__retarget_lock_release_recursive>
 8003320:	bd10      	pop	{r4, pc}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	200002a8 	.word	0x200002a8

08003328 <__ssputs_r>:
 8003328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800332a:	b085      	sub	sp, #20
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	9203      	str	r2, [sp, #12]
 8003330:	688e      	ldr	r6, [r1, #8]
 8003332:	9a01      	ldr	r2, [sp, #4]
 8003334:	0007      	movs	r7, r0
 8003336:	000c      	movs	r4, r1
 8003338:	680b      	ldr	r3, [r1, #0]
 800333a:	4296      	cmp	r6, r2
 800333c:	d831      	bhi.n	80033a2 <__ssputs_r+0x7a>
 800333e:	898a      	ldrh	r2, [r1, #12]
 8003340:	2190      	movs	r1, #144	; 0x90
 8003342:	00c9      	lsls	r1, r1, #3
 8003344:	420a      	tst	r2, r1
 8003346:	d029      	beq.n	800339c <__ssputs_r+0x74>
 8003348:	2003      	movs	r0, #3
 800334a:	6921      	ldr	r1, [r4, #16]
 800334c:	1a5b      	subs	r3, r3, r1
 800334e:	9302      	str	r3, [sp, #8]
 8003350:	6963      	ldr	r3, [r4, #20]
 8003352:	4343      	muls	r3, r0
 8003354:	0fdd      	lsrs	r5, r3, #31
 8003356:	18ed      	adds	r5, r5, r3
 8003358:	9b01      	ldr	r3, [sp, #4]
 800335a:	9802      	ldr	r0, [sp, #8]
 800335c:	3301      	adds	r3, #1
 800335e:	181b      	adds	r3, r3, r0
 8003360:	106d      	asrs	r5, r5, #1
 8003362:	42ab      	cmp	r3, r5
 8003364:	d900      	bls.n	8003368 <__ssputs_r+0x40>
 8003366:	001d      	movs	r5, r3
 8003368:	0552      	lsls	r2, r2, #21
 800336a:	d529      	bpl.n	80033c0 <__ssputs_r+0x98>
 800336c:	0029      	movs	r1, r5
 800336e:	0038      	movs	r0, r7
 8003370:	f7ff ff48 	bl	8003204 <_malloc_r>
 8003374:	1e06      	subs	r6, r0, #0
 8003376:	d02d      	beq.n	80033d4 <__ssputs_r+0xac>
 8003378:	9a02      	ldr	r2, [sp, #8]
 800337a:	6921      	ldr	r1, [r4, #16]
 800337c:	f000 fae7 	bl	800394e <memcpy>
 8003380:	89a2      	ldrh	r2, [r4, #12]
 8003382:	4b19      	ldr	r3, [pc, #100]	; (80033e8 <__ssputs_r+0xc0>)
 8003384:	401a      	ands	r2, r3
 8003386:	2380      	movs	r3, #128	; 0x80
 8003388:	4313      	orrs	r3, r2
 800338a:	81a3      	strh	r3, [r4, #12]
 800338c:	9b02      	ldr	r3, [sp, #8]
 800338e:	6126      	str	r6, [r4, #16]
 8003390:	18f6      	adds	r6, r6, r3
 8003392:	6026      	str	r6, [r4, #0]
 8003394:	6165      	str	r5, [r4, #20]
 8003396:	9e01      	ldr	r6, [sp, #4]
 8003398:	1aed      	subs	r5, r5, r3
 800339a:	60a5      	str	r5, [r4, #8]
 800339c:	9b01      	ldr	r3, [sp, #4]
 800339e:	429e      	cmp	r6, r3
 80033a0:	d900      	bls.n	80033a4 <__ssputs_r+0x7c>
 80033a2:	9e01      	ldr	r6, [sp, #4]
 80033a4:	0032      	movs	r2, r6
 80033a6:	9903      	ldr	r1, [sp, #12]
 80033a8:	6820      	ldr	r0, [r4, #0]
 80033aa:	f000 fa9f 	bl	80038ec <memmove>
 80033ae:	2000      	movs	r0, #0
 80033b0:	68a3      	ldr	r3, [r4, #8]
 80033b2:	1b9b      	subs	r3, r3, r6
 80033b4:	60a3      	str	r3, [r4, #8]
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	199b      	adds	r3, r3, r6
 80033ba:	6023      	str	r3, [r4, #0]
 80033bc:	b005      	add	sp, #20
 80033be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033c0:	002a      	movs	r2, r5
 80033c2:	0038      	movs	r0, r7
 80033c4:	f000 facc 	bl	8003960 <_realloc_r>
 80033c8:	1e06      	subs	r6, r0, #0
 80033ca:	d1df      	bne.n	800338c <__ssputs_r+0x64>
 80033cc:	0038      	movs	r0, r7
 80033ce:	6921      	ldr	r1, [r4, #16]
 80033d0:	f7ff feac 	bl	800312c <_free_r>
 80033d4:	230c      	movs	r3, #12
 80033d6:	2001      	movs	r0, #1
 80033d8:	603b      	str	r3, [r7, #0]
 80033da:	89a2      	ldrh	r2, [r4, #12]
 80033dc:	3334      	adds	r3, #52	; 0x34
 80033de:	4313      	orrs	r3, r2
 80033e0:	81a3      	strh	r3, [r4, #12]
 80033e2:	4240      	negs	r0, r0
 80033e4:	e7ea      	b.n	80033bc <__ssputs_r+0x94>
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	fffffb7f 	.word	0xfffffb7f

080033ec <_svfiprintf_r>:
 80033ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ee:	b0a1      	sub	sp, #132	; 0x84
 80033f0:	9003      	str	r0, [sp, #12]
 80033f2:	001d      	movs	r5, r3
 80033f4:	898b      	ldrh	r3, [r1, #12]
 80033f6:	000f      	movs	r7, r1
 80033f8:	0016      	movs	r6, r2
 80033fa:	061b      	lsls	r3, r3, #24
 80033fc:	d511      	bpl.n	8003422 <_svfiprintf_r+0x36>
 80033fe:	690b      	ldr	r3, [r1, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10e      	bne.n	8003422 <_svfiprintf_r+0x36>
 8003404:	2140      	movs	r1, #64	; 0x40
 8003406:	f7ff fefd 	bl	8003204 <_malloc_r>
 800340a:	6038      	str	r0, [r7, #0]
 800340c:	6138      	str	r0, [r7, #16]
 800340e:	2800      	cmp	r0, #0
 8003410:	d105      	bne.n	800341e <_svfiprintf_r+0x32>
 8003412:	230c      	movs	r3, #12
 8003414:	9a03      	ldr	r2, [sp, #12]
 8003416:	3801      	subs	r0, #1
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	b021      	add	sp, #132	; 0x84
 800341c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800341e:	2340      	movs	r3, #64	; 0x40
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	2300      	movs	r3, #0
 8003424:	ac08      	add	r4, sp, #32
 8003426:	6163      	str	r3, [r4, #20]
 8003428:	3320      	adds	r3, #32
 800342a:	7663      	strb	r3, [r4, #25]
 800342c:	3310      	adds	r3, #16
 800342e:	76a3      	strb	r3, [r4, #26]
 8003430:	9507      	str	r5, [sp, #28]
 8003432:	0035      	movs	r5, r6
 8003434:	782b      	ldrb	r3, [r5, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <_svfiprintf_r+0x52>
 800343a:	2b25      	cmp	r3, #37	; 0x25
 800343c:	d148      	bne.n	80034d0 <_svfiprintf_r+0xe4>
 800343e:	1bab      	subs	r3, r5, r6
 8003440:	9305      	str	r3, [sp, #20]
 8003442:	42b5      	cmp	r5, r6
 8003444:	d00b      	beq.n	800345e <_svfiprintf_r+0x72>
 8003446:	0032      	movs	r2, r6
 8003448:	0039      	movs	r1, r7
 800344a:	9803      	ldr	r0, [sp, #12]
 800344c:	f7ff ff6c 	bl	8003328 <__ssputs_r>
 8003450:	3001      	adds	r0, #1
 8003452:	d100      	bne.n	8003456 <_svfiprintf_r+0x6a>
 8003454:	e0af      	b.n	80035b6 <_svfiprintf_r+0x1ca>
 8003456:	6963      	ldr	r3, [r4, #20]
 8003458:	9a05      	ldr	r2, [sp, #20]
 800345a:	189b      	adds	r3, r3, r2
 800345c:	6163      	str	r3, [r4, #20]
 800345e:	782b      	ldrb	r3, [r5, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d100      	bne.n	8003466 <_svfiprintf_r+0x7a>
 8003464:	e0a7      	b.n	80035b6 <_svfiprintf_r+0x1ca>
 8003466:	2201      	movs	r2, #1
 8003468:	2300      	movs	r3, #0
 800346a:	4252      	negs	r2, r2
 800346c:	6062      	str	r2, [r4, #4]
 800346e:	a904      	add	r1, sp, #16
 8003470:	3254      	adds	r2, #84	; 0x54
 8003472:	1852      	adds	r2, r2, r1
 8003474:	1c6e      	adds	r6, r5, #1
 8003476:	6023      	str	r3, [r4, #0]
 8003478:	60e3      	str	r3, [r4, #12]
 800347a:	60a3      	str	r3, [r4, #8]
 800347c:	7013      	strb	r3, [r2, #0]
 800347e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003480:	4b55      	ldr	r3, [pc, #340]	; (80035d8 <_svfiprintf_r+0x1ec>)
 8003482:	2205      	movs	r2, #5
 8003484:	0018      	movs	r0, r3
 8003486:	7831      	ldrb	r1, [r6, #0]
 8003488:	9305      	str	r3, [sp, #20]
 800348a:	f000 fa55 	bl	8003938 <memchr>
 800348e:	1c75      	adds	r5, r6, #1
 8003490:	2800      	cmp	r0, #0
 8003492:	d11f      	bne.n	80034d4 <_svfiprintf_r+0xe8>
 8003494:	6822      	ldr	r2, [r4, #0]
 8003496:	06d3      	lsls	r3, r2, #27
 8003498:	d504      	bpl.n	80034a4 <_svfiprintf_r+0xb8>
 800349a:	2353      	movs	r3, #83	; 0x53
 800349c:	a904      	add	r1, sp, #16
 800349e:	185b      	adds	r3, r3, r1
 80034a0:	2120      	movs	r1, #32
 80034a2:	7019      	strb	r1, [r3, #0]
 80034a4:	0713      	lsls	r3, r2, #28
 80034a6:	d504      	bpl.n	80034b2 <_svfiprintf_r+0xc6>
 80034a8:	2353      	movs	r3, #83	; 0x53
 80034aa:	a904      	add	r1, sp, #16
 80034ac:	185b      	adds	r3, r3, r1
 80034ae:	212b      	movs	r1, #43	; 0x2b
 80034b0:	7019      	strb	r1, [r3, #0]
 80034b2:	7833      	ldrb	r3, [r6, #0]
 80034b4:	2b2a      	cmp	r3, #42	; 0x2a
 80034b6:	d016      	beq.n	80034e6 <_svfiprintf_r+0xfa>
 80034b8:	0035      	movs	r5, r6
 80034ba:	2100      	movs	r1, #0
 80034bc:	200a      	movs	r0, #10
 80034be:	68e3      	ldr	r3, [r4, #12]
 80034c0:	782a      	ldrb	r2, [r5, #0]
 80034c2:	1c6e      	adds	r6, r5, #1
 80034c4:	3a30      	subs	r2, #48	; 0x30
 80034c6:	2a09      	cmp	r2, #9
 80034c8:	d94e      	bls.n	8003568 <_svfiprintf_r+0x17c>
 80034ca:	2900      	cmp	r1, #0
 80034cc:	d111      	bne.n	80034f2 <_svfiprintf_r+0x106>
 80034ce:	e017      	b.n	8003500 <_svfiprintf_r+0x114>
 80034d0:	3501      	adds	r5, #1
 80034d2:	e7af      	b.n	8003434 <_svfiprintf_r+0x48>
 80034d4:	9b05      	ldr	r3, [sp, #20]
 80034d6:	6822      	ldr	r2, [r4, #0]
 80034d8:	1ac0      	subs	r0, r0, r3
 80034da:	2301      	movs	r3, #1
 80034dc:	4083      	lsls	r3, r0
 80034de:	4313      	orrs	r3, r2
 80034e0:	002e      	movs	r6, r5
 80034e2:	6023      	str	r3, [r4, #0]
 80034e4:	e7cc      	b.n	8003480 <_svfiprintf_r+0x94>
 80034e6:	9b07      	ldr	r3, [sp, #28]
 80034e8:	1d19      	adds	r1, r3, #4
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	9107      	str	r1, [sp, #28]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	db01      	blt.n	80034f6 <_svfiprintf_r+0x10a>
 80034f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80034f4:	e004      	b.n	8003500 <_svfiprintf_r+0x114>
 80034f6:	425b      	negs	r3, r3
 80034f8:	60e3      	str	r3, [r4, #12]
 80034fa:	2302      	movs	r3, #2
 80034fc:	4313      	orrs	r3, r2
 80034fe:	6023      	str	r3, [r4, #0]
 8003500:	782b      	ldrb	r3, [r5, #0]
 8003502:	2b2e      	cmp	r3, #46	; 0x2e
 8003504:	d10a      	bne.n	800351c <_svfiprintf_r+0x130>
 8003506:	786b      	ldrb	r3, [r5, #1]
 8003508:	2b2a      	cmp	r3, #42	; 0x2a
 800350a:	d135      	bne.n	8003578 <_svfiprintf_r+0x18c>
 800350c:	9b07      	ldr	r3, [sp, #28]
 800350e:	3502      	adds	r5, #2
 8003510:	1d1a      	adds	r2, r3, #4
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	9207      	str	r2, [sp, #28]
 8003516:	2b00      	cmp	r3, #0
 8003518:	db2b      	blt.n	8003572 <_svfiprintf_r+0x186>
 800351a:	9309      	str	r3, [sp, #36]	; 0x24
 800351c:	4e2f      	ldr	r6, [pc, #188]	; (80035dc <_svfiprintf_r+0x1f0>)
 800351e:	2203      	movs	r2, #3
 8003520:	0030      	movs	r0, r6
 8003522:	7829      	ldrb	r1, [r5, #0]
 8003524:	f000 fa08 	bl	8003938 <memchr>
 8003528:	2800      	cmp	r0, #0
 800352a:	d006      	beq.n	800353a <_svfiprintf_r+0x14e>
 800352c:	2340      	movs	r3, #64	; 0x40
 800352e:	1b80      	subs	r0, r0, r6
 8003530:	4083      	lsls	r3, r0
 8003532:	6822      	ldr	r2, [r4, #0]
 8003534:	3501      	adds	r5, #1
 8003536:	4313      	orrs	r3, r2
 8003538:	6023      	str	r3, [r4, #0]
 800353a:	7829      	ldrb	r1, [r5, #0]
 800353c:	2206      	movs	r2, #6
 800353e:	4828      	ldr	r0, [pc, #160]	; (80035e0 <_svfiprintf_r+0x1f4>)
 8003540:	1c6e      	adds	r6, r5, #1
 8003542:	7621      	strb	r1, [r4, #24]
 8003544:	f000 f9f8 	bl	8003938 <memchr>
 8003548:	2800      	cmp	r0, #0
 800354a:	d03c      	beq.n	80035c6 <_svfiprintf_r+0x1da>
 800354c:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <_svfiprintf_r+0x1f8>)
 800354e:	2b00      	cmp	r3, #0
 8003550:	d125      	bne.n	800359e <_svfiprintf_r+0x1b2>
 8003552:	2207      	movs	r2, #7
 8003554:	9b07      	ldr	r3, [sp, #28]
 8003556:	3307      	adds	r3, #7
 8003558:	4393      	bics	r3, r2
 800355a:	3308      	adds	r3, #8
 800355c:	9307      	str	r3, [sp, #28]
 800355e:	6963      	ldr	r3, [r4, #20]
 8003560:	9a04      	ldr	r2, [sp, #16]
 8003562:	189b      	adds	r3, r3, r2
 8003564:	6163      	str	r3, [r4, #20]
 8003566:	e764      	b.n	8003432 <_svfiprintf_r+0x46>
 8003568:	4343      	muls	r3, r0
 800356a:	0035      	movs	r5, r6
 800356c:	2101      	movs	r1, #1
 800356e:	189b      	adds	r3, r3, r2
 8003570:	e7a6      	b.n	80034c0 <_svfiprintf_r+0xd4>
 8003572:	2301      	movs	r3, #1
 8003574:	425b      	negs	r3, r3
 8003576:	e7d0      	b.n	800351a <_svfiprintf_r+0x12e>
 8003578:	2300      	movs	r3, #0
 800357a:	200a      	movs	r0, #10
 800357c:	001a      	movs	r2, r3
 800357e:	3501      	adds	r5, #1
 8003580:	6063      	str	r3, [r4, #4]
 8003582:	7829      	ldrb	r1, [r5, #0]
 8003584:	1c6e      	adds	r6, r5, #1
 8003586:	3930      	subs	r1, #48	; 0x30
 8003588:	2909      	cmp	r1, #9
 800358a:	d903      	bls.n	8003594 <_svfiprintf_r+0x1a8>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0c5      	beq.n	800351c <_svfiprintf_r+0x130>
 8003590:	9209      	str	r2, [sp, #36]	; 0x24
 8003592:	e7c3      	b.n	800351c <_svfiprintf_r+0x130>
 8003594:	4342      	muls	r2, r0
 8003596:	0035      	movs	r5, r6
 8003598:	2301      	movs	r3, #1
 800359a:	1852      	adds	r2, r2, r1
 800359c:	e7f1      	b.n	8003582 <_svfiprintf_r+0x196>
 800359e:	aa07      	add	r2, sp, #28
 80035a0:	9200      	str	r2, [sp, #0]
 80035a2:	0021      	movs	r1, r4
 80035a4:	003a      	movs	r2, r7
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <_svfiprintf_r+0x1fc>)
 80035a8:	9803      	ldr	r0, [sp, #12]
 80035aa:	e000      	b.n	80035ae <_svfiprintf_r+0x1c2>
 80035ac:	bf00      	nop
 80035ae:	9004      	str	r0, [sp, #16]
 80035b0:	9b04      	ldr	r3, [sp, #16]
 80035b2:	3301      	adds	r3, #1
 80035b4:	d1d3      	bne.n	800355e <_svfiprintf_r+0x172>
 80035b6:	89bb      	ldrh	r3, [r7, #12]
 80035b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80035ba:	065b      	lsls	r3, r3, #25
 80035bc:	d400      	bmi.n	80035c0 <_svfiprintf_r+0x1d4>
 80035be:	e72c      	b.n	800341a <_svfiprintf_r+0x2e>
 80035c0:	2001      	movs	r0, #1
 80035c2:	4240      	negs	r0, r0
 80035c4:	e729      	b.n	800341a <_svfiprintf_r+0x2e>
 80035c6:	aa07      	add	r2, sp, #28
 80035c8:	9200      	str	r2, [sp, #0]
 80035ca:	0021      	movs	r1, r4
 80035cc:	003a      	movs	r2, r7
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <_svfiprintf_r+0x1fc>)
 80035d0:	9803      	ldr	r0, [sp, #12]
 80035d2:	f000 f87b 	bl	80036cc <_printf_i>
 80035d6:	e7ea      	b.n	80035ae <_svfiprintf_r+0x1c2>
 80035d8:	08003a84 	.word	0x08003a84
 80035dc:	08003a8a 	.word	0x08003a8a
 80035e0:	08003a8e 	.word	0x08003a8e
 80035e4:	00000000 	.word	0x00000000
 80035e8:	08003329 	.word	0x08003329

080035ec <_printf_common>:
 80035ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035ee:	0016      	movs	r6, r2
 80035f0:	9301      	str	r3, [sp, #4]
 80035f2:	688a      	ldr	r2, [r1, #8]
 80035f4:	690b      	ldr	r3, [r1, #16]
 80035f6:	000c      	movs	r4, r1
 80035f8:	9000      	str	r0, [sp, #0]
 80035fa:	4293      	cmp	r3, r2
 80035fc:	da00      	bge.n	8003600 <_printf_common+0x14>
 80035fe:	0013      	movs	r3, r2
 8003600:	0022      	movs	r2, r4
 8003602:	6033      	str	r3, [r6, #0]
 8003604:	3243      	adds	r2, #67	; 0x43
 8003606:	7812      	ldrb	r2, [r2, #0]
 8003608:	2a00      	cmp	r2, #0
 800360a:	d001      	beq.n	8003610 <_printf_common+0x24>
 800360c:	3301      	adds	r3, #1
 800360e:	6033      	str	r3, [r6, #0]
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	069b      	lsls	r3, r3, #26
 8003614:	d502      	bpl.n	800361c <_printf_common+0x30>
 8003616:	6833      	ldr	r3, [r6, #0]
 8003618:	3302      	adds	r3, #2
 800361a:	6033      	str	r3, [r6, #0]
 800361c:	6822      	ldr	r2, [r4, #0]
 800361e:	2306      	movs	r3, #6
 8003620:	0015      	movs	r5, r2
 8003622:	401d      	ands	r5, r3
 8003624:	421a      	tst	r2, r3
 8003626:	d027      	beq.n	8003678 <_printf_common+0x8c>
 8003628:	0023      	movs	r3, r4
 800362a:	3343      	adds	r3, #67	; 0x43
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	1e5a      	subs	r2, r3, #1
 8003630:	4193      	sbcs	r3, r2
 8003632:	6822      	ldr	r2, [r4, #0]
 8003634:	0692      	lsls	r2, r2, #26
 8003636:	d430      	bmi.n	800369a <_printf_common+0xae>
 8003638:	0022      	movs	r2, r4
 800363a:	9901      	ldr	r1, [sp, #4]
 800363c:	9800      	ldr	r0, [sp, #0]
 800363e:	9d08      	ldr	r5, [sp, #32]
 8003640:	3243      	adds	r2, #67	; 0x43
 8003642:	47a8      	blx	r5
 8003644:	3001      	adds	r0, #1
 8003646:	d025      	beq.n	8003694 <_printf_common+0xa8>
 8003648:	2206      	movs	r2, #6
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	2500      	movs	r5, #0
 800364e:	4013      	ands	r3, r2
 8003650:	2b04      	cmp	r3, #4
 8003652:	d105      	bne.n	8003660 <_printf_common+0x74>
 8003654:	6833      	ldr	r3, [r6, #0]
 8003656:	68e5      	ldr	r5, [r4, #12]
 8003658:	1aed      	subs	r5, r5, r3
 800365a:	43eb      	mvns	r3, r5
 800365c:	17db      	asrs	r3, r3, #31
 800365e:	401d      	ands	r5, r3
 8003660:	68a3      	ldr	r3, [r4, #8]
 8003662:	6922      	ldr	r2, [r4, #16]
 8003664:	4293      	cmp	r3, r2
 8003666:	dd01      	ble.n	800366c <_printf_common+0x80>
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	18ed      	adds	r5, r5, r3
 800366c:	2600      	movs	r6, #0
 800366e:	42b5      	cmp	r5, r6
 8003670:	d120      	bne.n	80036b4 <_printf_common+0xc8>
 8003672:	2000      	movs	r0, #0
 8003674:	e010      	b.n	8003698 <_printf_common+0xac>
 8003676:	3501      	adds	r5, #1
 8003678:	68e3      	ldr	r3, [r4, #12]
 800367a:	6832      	ldr	r2, [r6, #0]
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	42ab      	cmp	r3, r5
 8003680:	ddd2      	ble.n	8003628 <_printf_common+0x3c>
 8003682:	0022      	movs	r2, r4
 8003684:	2301      	movs	r3, #1
 8003686:	9901      	ldr	r1, [sp, #4]
 8003688:	9800      	ldr	r0, [sp, #0]
 800368a:	9f08      	ldr	r7, [sp, #32]
 800368c:	3219      	adds	r2, #25
 800368e:	47b8      	blx	r7
 8003690:	3001      	adds	r0, #1
 8003692:	d1f0      	bne.n	8003676 <_printf_common+0x8a>
 8003694:	2001      	movs	r0, #1
 8003696:	4240      	negs	r0, r0
 8003698:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800369a:	2030      	movs	r0, #48	; 0x30
 800369c:	18e1      	adds	r1, r4, r3
 800369e:	3143      	adds	r1, #67	; 0x43
 80036a0:	7008      	strb	r0, [r1, #0]
 80036a2:	0021      	movs	r1, r4
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	3145      	adds	r1, #69	; 0x45
 80036a8:	7809      	ldrb	r1, [r1, #0]
 80036aa:	18a2      	adds	r2, r4, r2
 80036ac:	3243      	adds	r2, #67	; 0x43
 80036ae:	3302      	adds	r3, #2
 80036b0:	7011      	strb	r1, [r2, #0]
 80036b2:	e7c1      	b.n	8003638 <_printf_common+0x4c>
 80036b4:	0022      	movs	r2, r4
 80036b6:	2301      	movs	r3, #1
 80036b8:	9901      	ldr	r1, [sp, #4]
 80036ba:	9800      	ldr	r0, [sp, #0]
 80036bc:	9f08      	ldr	r7, [sp, #32]
 80036be:	321a      	adds	r2, #26
 80036c0:	47b8      	blx	r7
 80036c2:	3001      	adds	r0, #1
 80036c4:	d0e6      	beq.n	8003694 <_printf_common+0xa8>
 80036c6:	3601      	adds	r6, #1
 80036c8:	e7d1      	b.n	800366e <_printf_common+0x82>
	...

080036cc <_printf_i>:
 80036cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ce:	b08b      	sub	sp, #44	; 0x2c
 80036d0:	9206      	str	r2, [sp, #24]
 80036d2:	000a      	movs	r2, r1
 80036d4:	3243      	adds	r2, #67	; 0x43
 80036d6:	9307      	str	r3, [sp, #28]
 80036d8:	9005      	str	r0, [sp, #20]
 80036da:	9204      	str	r2, [sp, #16]
 80036dc:	7e0a      	ldrb	r2, [r1, #24]
 80036de:	000c      	movs	r4, r1
 80036e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80036e2:	2a78      	cmp	r2, #120	; 0x78
 80036e4:	d809      	bhi.n	80036fa <_printf_i+0x2e>
 80036e6:	2a62      	cmp	r2, #98	; 0x62
 80036e8:	d80b      	bhi.n	8003702 <_printf_i+0x36>
 80036ea:	2a00      	cmp	r2, #0
 80036ec:	d100      	bne.n	80036f0 <_printf_i+0x24>
 80036ee:	e0be      	b.n	800386e <_printf_i+0x1a2>
 80036f0:	497c      	ldr	r1, [pc, #496]	; (80038e4 <_printf_i+0x218>)
 80036f2:	9103      	str	r1, [sp, #12]
 80036f4:	2a58      	cmp	r2, #88	; 0x58
 80036f6:	d100      	bne.n	80036fa <_printf_i+0x2e>
 80036f8:	e093      	b.n	8003822 <_printf_i+0x156>
 80036fa:	0026      	movs	r6, r4
 80036fc:	3642      	adds	r6, #66	; 0x42
 80036fe:	7032      	strb	r2, [r6, #0]
 8003700:	e022      	b.n	8003748 <_printf_i+0x7c>
 8003702:	0010      	movs	r0, r2
 8003704:	3863      	subs	r0, #99	; 0x63
 8003706:	2815      	cmp	r0, #21
 8003708:	d8f7      	bhi.n	80036fa <_printf_i+0x2e>
 800370a:	f7fc fcfd 	bl	8000108 <__gnu_thumb1_case_shi>
 800370e:	0016      	.short	0x0016
 8003710:	fff6001f 	.word	0xfff6001f
 8003714:	fff6fff6 	.word	0xfff6fff6
 8003718:	001ffff6 	.word	0x001ffff6
 800371c:	fff6fff6 	.word	0xfff6fff6
 8003720:	fff6fff6 	.word	0xfff6fff6
 8003724:	003600a3 	.word	0x003600a3
 8003728:	fff60083 	.word	0xfff60083
 800372c:	00b4fff6 	.word	0x00b4fff6
 8003730:	0036fff6 	.word	0x0036fff6
 8003734:	fff6fff6 	.word	0xfff6fff6
 8003738:	0087      	.short	0x0087
 800373a:	0026      	movs	r6, r4
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	3642      	adds	r6, #66	; 0x42
 8003740:	1d11      	adds	r1, r2, #4
 8003742:	6019      	str	r1, [r3, #0]
 8003744:	6813      	ldr	r3, [r2, #0]
 8003746:	7033      	strb	r3, [r6, #0]
 8003748:	2301      	movs	r3, #1
 800374a:	e0a2      	b.n	8003892 <_printf_i+0x1c6>
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	6809      	ldr	r1, [r1, #0]
 8003750:	1d02      	adds	r2, r0, #4
 8003752:	060d      	lsls	r5, r1, #24
 8003754:	d50b      	bpl.n	800376e <_printf_i+0xa2>
 8003756:	6805      	ldr	r5, [r0, #0]
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	2d00      	cmp	r5, #0
 800375c:	da03      	bge.n	8003766 <_printf_i+0x9a>
 800375e:	232d      	movs	r3, #45	; 0x2d
 8003760:	9a04      	ldr	r2, [sp, #16]
 8003762:	426d      	negs	r5, r5
 8003764:	7013      	strb	r3, [r2, #0]
 8003766:	4b5f      	ldr	r3, [pc, #380]	; (80038e4 <_printf_i+0x218>)
 8003768:	270a      	movs	r7, #10
 800376a:	9303      	str	r3, [sp, #12]
 800376c:	e01b      	b.n	80037a6 <_printf_i+0xda>
 800376e:	6805      	ldr	r5, [r0, #0]
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	0649      	lsls	r1, r1, #25
 8003774:	d5f1      	bpl.n	800375a <_printf_i+0x8e>
 8003776:	b22d      	sxth	r5, r5
 8003778:	e7ef      	b.n	800375a <_printf_i+0x8e>
 800377a:	680d      	ldr	r5, [r1, #0]
 800377c:	6819      	ldr	r1, [r3, #0]
 800377e:	1d08      	adds	r0, r1, #4
 8003780:	6018      	str	r0, [r3, #0]
 8003782:	062e      	lsls	r6, r5, #24
 8003784:	d501      	bpl.n	800378a <_printf_i+0xbe>
 8003786:	680d      	ldr	r5, [r1, #0]
 8003788:	e003      	b.n	8003792 <_printf_i+0xc6>
 800378a:	066d      	lsls	r5, r5, #25
 800378c:	d5fb      	bpl.n	8003786 <_printf_i+0xba>
 800378e:	680d      	ldr	r5, [r1, #0]
 8003790:	b2ad      	uxth	r5, r5
 8003792:	4b54      	ldr	r3, [pc, #336]	; (80038e4 <_printf_i+0x218>)
 8003794:	2708      	movs	r7, #8
 8003796:	9303      	str	r3, [sp, #12]
 8003798:	2a6f      	cmp	r2, #111	; 0x6f
 800379a:	d000      	beq.n	800379e <_printf_i+0xd2>
 800379c:	3702      	adds	r7, #2
 800379e:	0023      	movs	r3, r4
 80037a0:	2200      	movs	r2, #0
 80037a2:	3343      	adds	r3, #67	; 0x43
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	6863      	ldr	r3, [r4, #4]
 80037a8:	60a3      	str	r3, [r4, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	db03      	blt.n	80037b6 <_printf_i+0xea>
 80037ae:	2104      	movs	r1, #4
 80037b0:	6822      	ldr	r2, [r4, #0]
 80037b2:	438a      	bics	r2, r1
 80037b4:	6022      	str	r2, [r4, #0]
 80037b6:	2d00      	cmp	r5, #0
 80037b8:	d102      	bne.n	80037c0 <_printf_i+0xf4>
 80037ba:	9e04      	ldr	r6, [sp, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00c      	beq.n	80037da <_printf_i+0x10e>
 80037c0:	9e04      	ldr	r6, [sp, #16]
 80037c2:	0028      	movs	r0, r5
 80037c4:	0039      	movs	r1, r7
 80037c6:	f7fc fd2f 	bl	8000228 <__aeabi_uidivmod>
 80037ca:	9b03      	ldr	r3, [sp, #12]
 80037cc:	3e01      	subs	r6, #1
 80037ce:	5c5b      	ldrb	r3, [r3, r1]
 80037d0:	7033      	strb	r3, [r6, #0]
 80037d2:	002b      	movs	r3, r5
 80037d4:	0005      	movs	r5, r0
 80037d6:	429f      	cmp	r7, r3
 80037d8:	d9f3      	bls.n	80037c2 <_printf_i+0xf6>
 80037da:	2f08      	cmp	r7, #8
 80037dc:	d109      	bne.n	80037f2 <_printf_i+0x126>
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	07db      	lsls	r3, r3, #31
 80037e2:	d506      	bpl.n	80037f2 <_printf_i+0x126>
 80037e4:	6862      	ldr	r2, [r4, #4]
 80037e6:	6923      	ldr	r3, [r4, #16]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	dc02      	bgt.n	80037f2 <_printf_i+0x126>
 80037ec:	2330      	movs	r3, #48	; 0x30
 80037ee:	3e01      	subs	r6, #1
 80037f0:	7033      	strb	r3, [r6, #0]
 80037f2:	9b04      	ldr	r3, [sp, #16]
 80037f4:	1b9b      	subs	r3, r3, r6
 80037f6:	6123      	str	r3, [r4, #16]
 80037f8:	9b07      	ldr	r3, [sp, #28]
 80037fa:	0021      	movs	r1, r4
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	9805      	ldr	r0, [sp, #20]
 8003800:	9b06      	ldr	r3, [sp, #24]
 8003802:	aa09      	add	r2, sp, #36	; 0x24
 8003804:	f7ff fef2 	bl	80035ec <_printf_common>
 8003808:	3001      	adds	r0, #1
 800380a:	d147      	bne.n	800389c <_printf_i+0x1d0>
 800380c:	2001      	movs	r0, #1
 800380e:	4240      	negs	r0, r0
 8003810:	b00b      	add	sp, #44	; 0x2c
 8003812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003814:	2220      	movs	r2, #32
 8003816:	6809      	ldr	r1, [r1, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	6022      	str	r2, [r4, #0]
 800381c:	2278      	movs	r2, #120	; 0x78
 800381e:	4932      	ldr	r1, [pc, #200]	; (80038e8 <_printf_i+0x21c>)
 8003820:	9103      	str	r1, [sp, #12]
 8003822:	0021      	movs	r1, r4
 8003824:	3145      	adds	r1, #69	; 0x45
 8003826:	700a      	strb	r2, [r1, #0]
 8003828:	6819      	ldr	r1, [r3, #0]
 800382a:	6822      	ldr	r2, [r4, #0]
 800382c:	c920      	ldmia	r1!, {r5}
 800382e:	0610      	lsls	r0, r2, #24
 8003830:	d402      	bmi.n	8003838 <_printf_i+0x16c>
 8003832:	0650      	lsls	r0, r2, #25
 8003834:	d500      	bpl.n	8003838 <_printf_i+0x16c>
 8003836:	b2ad      	uxth	r5, r5
 8003838:	6019      	str	r1, [r3, #0]
 800383a:	07d3      	lsls	r3, r2, #31
 800383c:	d502      	bpl.n	8003844 <_printf_i+0x178>
 800383e:	2320      	movs	r3, #32
 8003840:	4313      	orrs	r3, r2
 8003842:	6023      	str	r3, [r4, #0]
 8003844:	2710      	movs	r7, #16
 8003846:	2d00      	cmp	r5, #0
 8003848:	d1a9      	bne.n	800379e <_printf_i+0xd2>
 800384a:	2220      	movs	r2, #32
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	4393      	bics	r3, r2
 8003850:	6023      	str	r3, [r4, #0]
 8003852:	e7a4      	b.n	800379e <_printf_i+0xd2>
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	680d      	ldr	r5, [r1, #0]
 8003858:	1d10      	adds	r0, r2, #4
 800385a:	6949      	ldr	r1, [r1, #20]
 800385c:	6018      	str	r0, [r3, #0]
 800385e:	6813      	ldr	r3, [r2, #0]
 8003860:	062e      	lsls	r6, r5, #24
 8003862:	d501      	bpl.n	8003868 <_printf_i+0x19c>
 8003864:	6019      	str	r1, [r3, #0]
 8003866:	e002      	b.n	800386e <_printf_i+0x1a2>
 8003868:	066d      	lsls	r5, r5, #25
 800386a:	d5fb      	bpl.n	8003864 <_printf_i+0x198>
 800386c:	8019      	strh	r1, [r3, #0]
 800386e:	2300      	movs	r3, #0
 8003870:	9e04      	ldr	r6, [sp, #16]
 8003872:	6123      	str	r3, [r4, #16]
 8003874:	e7c0      	b.n	80037f8 <_printf_i+0x12c>
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	1d11      	adds	r1, r2, #4
 800387a:	6019      	str	r1, [r3, #0]
 800387c:	6816      	ldr	r6, [r2, #0]
 800387e:	2100      	movs	r1, #0
 8003880:	0030      	movs	r0, r6
 8003882:	6862      	ldr	r2, [r4, #4]
 8003884:	f000 f858 	bl	8003938 <memchr>
 8003888:	2800      	cmp	r0, #0
 800388a:	d001      	beq.n	8003890 <_printf_i+0x1c4>
 800388c:	1b80      	subs	r0, r0, r6
 800388e:	6060      	str	r0, [r4, #4]
 8003890:	6863      	ldr	r3, [r4, #4]
 8003892:	6123      	str	r3, [r4, #16]
 8003894:	2300      	movs	r3, #0
 8003896:	9a04      	ldr	r2, [sp, #16]
 8003898:	7013      	strb	r3, [r2, #0]
 800389a:	e7ad      	b.n	80037f8 <_printf_i+0x12c>
 800389c:	0032      	movs	r2, r6
 800389e:	6923      	ldr	r3, [r4, #16]
 80038a0:	9906      	ldr	r1, [sp, #24]
 80038a2:	9805      	ldr	r0, [sp, #20]
 80038a4:	9d07      	ldr	r5, [sp, #28]
 80038a6:	47a8      	blx	r5
 80038a8:	3001      	adds	r0, #1
 80038aa:	d0af      	beq.n	800380c <_printf_i+0x140>
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	079b      	lsls	r3, r3, #30
 80038b0:	d415      	bmi.n	80038de <_printf_i+0x212>
 80038b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038b4:	68e0      	ldr	r0, [r4, #12]
 80038b6:	4298      	cmp	r0, r3
 80038b8:	daaa      	bge.n	8003810 <_printf_i+0x144>
 80038ba:	0018      	movs	r0, r3
 80038bc:	e7a8      	b.n	8003810 <_printf_i+0x144>
 80038be:	0022      	movs	r2, r4
 80038c0:	2301      	movs	r3, #1
 80038c2:	9906      	ldr	r1, [sp, #24]
 80038c4:	9805      	ldr	r0, [sp, #20]
 80038c6:	9e07      	ldr	r6, [sp, #28]
 80038c8:	3219      	adds	r2, #25
 80038ca:	47b0      	blx	r6
 80038cc:	3001      	adds	r0, #1
 80038ce:	d09d      	beq.n	800380c <_printf_i+0x140>
 80038d0:	3501      	adds	r5, #1
 80038d2:	68e3      	ldr	r3, [r4, #12]
 80038d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	42ab      	cmp	r3, r5
 80038da:	dcf0      	bgt.n	80038be <_printf_i+0x1f2>
 80038dc:	e7e9      	b.n	80038b2 <_printf_i+0x1e6>
 80038de:	2500      	movs	r5, #0
 80038e0:	e7f7      	b.n	80038d2 <_printf_i+0x206>
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	08003a95 	.word	0x08003a95
 80038e8:	08003aa6 	.word	0x08003aa6

080038ec <memmove>:
 80038ec:	b510      	push	{r4, lr}
 80038ee:	4288      	cmp	r0, r1
 80038f0:	d902      	bls.n	80038f8 <memmove+0xc>
 80038f2:	188b      	adds	r3, r1, r2
 80038f4:	4298      	cmp	r0, r3
 80038f6:	d303      	bcc.n	8003900 <memmove+0x14>
 80038f8:	2300      	movs	r3, #0
 80038fa:	e007      	b.n	800390c <memmove+0x20>
 80038fc:	5c8b      	ldrb	r3, [r1, r2]
 80038fe:	5483      	strb	r3, [r0, r2]
 8003900:	3a01      	subs	r2, #1
 8003902:	d2fb      	bcs.n	80038fc <memmove+0x10>
 8003904:	bd10      	pop	{r4, pc}
 8003906:	5ccc      	ldrb	r4, [r1, r3]
 8003908:	54c4      	strb	r4, [r0, r3]
 800390a:	3301      	adds	r3, #1
 800390c:	429a      	cmp	r2, r3
 800390e:	d1fa      	bne.n	8003906 <memmove+0x1a>
 8003910:	e7f8      	b.n	8003904 <memmove+0x18>
	...

08003914 <_sbrk_r>:
 8003914:	2300      	movs	r3, #0
 8003916:	b570      	push	{r4, r5, r6, lr}
 8003918:	4d06      	ldr	r5, [pc, #24]	; (8003934 <_sbrk_r+0x20>)
 800391a:	0004      	movs	r4, r0
 800391c:	0008      	movs	r0, r1
 800391e:	602b      	str	r3, [r5, #0]
 8003920:	f7fc fff8 	bl	8000914 <_sbrk>
 8003924:	1c43      	adds	r3, r0, #1
 8003926:	d103      	bne.n	8003930 <_sbrk_r+0x1c>
 8003928:	682b      	ldr	r3, [r5, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d000      	beq.n	8003930 <_sbrk_r+0x1c>
 800392e:	6023      	str	r3, [r4, #0]
 8003930:	bd70      	pop	{r4, r5, r6, pc}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	200002a4 	.word	0x200002a4

08003938 <memchr>:
 8003938:	b2c9      	uxtb	r1, r1
 800393a:	1882      	adds	r2, r0, r2
 800393c:	4290      	cmp	r0, r2
 800393e:	d101      	bne.n	8003944 <memchr+0xc>
 8003940:	2000      	movs	r0, #0
 8003942:	4770      	bx	lr
 8003944:	7803      	ldrb	r3, [r0, #0]
 8003946:	428b      	cmp	r3, r1
 8003948:	d0fb      	beq.n	8003942 <memchr+0xa>
 800394a:	3001      	adds	r0, #1
 800394c:	e7f6      	b.n	800393c <memchr+0x4>

0800394e <memcpy>:
 800394e:	2300      	movs	r3, #0
 8003950:	b510      	push	{r4, lr}
 8003952:	429a      	cmp	r2, r3
 8003954:	d100      	bne.n	8003958 <memcpy+0xa>
 8003956:	bd10      	pop	{r4, pc}
 8003958:	5ccc      	ldrb	r4, [r1, r3]
 800395a:	54c4      	strb	r4, [r0, r3]
 800395c:	3301      	adds	r3, #1
 800395e:	e7f8      	b.n	8003952 <memcpy+0x4>

08003960 <_realloc_r>:
 8003960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003962:	0007      	movs	r7, r0
 8003964:	000e      	movs	r6, r1
 8003966:	0014      	movs	r4, r2
 8003968:	2900      	cmp	r1, #0
 800396a:	d105      	bne.n	8003978 <_realloc_r+0x18>
 800396c:	0011      	movs	r1, r2
 800396e:	f7ff fc49 	bl	8003204 <_malloc_r>
 8003972:	0005      	movs	r5, r0
 8003974:	0028      	movs	r0, r5
 8003976:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003978:	2a00      	cmp	r2, #0
 800397a:	d103      	bne.n	8003984 <_realloc_r+0x24>
 800397c:	f7ff fbd6 	bl	800312c <_free_r>
 8003980:	0025      	movs	r5, r4
 8003982:	e7f7      	b.n	8003974 <_realloc_r+0x14>
 8003984:	f000 f81b 	bl	80039be <_malloc_usable_size_r>
 8003988:	9001      	str	r0, [sp, #4]
 800398a:	4284      	cmp	r4, r0
 800398c:	d803      	bhi.n	8003996 <_realloc_r+0x36>
 800398e:	0035      	movs	r5, r6
 8003990:	0843      	lsrs	r3, r0, #1
 8003992:	42a3      	cmp	r3, r4
 8003994:	d3ee      	bcc.n	8003974 <_realloc_r+0x14>
 8003996:	0021      	movs	r1, r4
 8003998:	0038      	movs	r0, r7
 800399a:	f7ff fc33 	bl	8003204 <_malloc_r>
 800399e:	1e05      	subs	r5, r0, #0
 80039a0:	d0e8      	beq.n	8003974 <_realloc_r+0x14>
 80039a2:	9b01      	ldr	r3, [sp, #4]
 80039a4:	0022      	movs	r2, r4
 80039a6:	429c      	cmp	r4, r3
 80039a8:	d900      	bls.n	80039ac <_realloc_r+0x4c>
 80039aa:	001a      	movs	r2, r3
 80039ac:	0031      	movs	r1, r6
 80039ae:	0028      	movs	r0, r5
 80039b0:	f7ff ffcd 	bl	800394e <memcpy>
 80039b4:	0031      	movs	r1, r6
 80039b6:	0038      	movs	r0, r7
 80039b8:	f7ff fbb8 	bl	800312c <_free_r>
 80039bc:	e7da      	b.n	8003974 <_realloc_r+0x14>

080039be <_malloc_usable_size_r>:
 80039be:	1f0b      	subs	r3, r1, #4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	1f18      	subs	r0, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	da01      	bge.n	80039cc <_malloc_usable_size_r+0xe>
 80039c8:	580b      	ldr	r3, [r1, r0]
 80039ca:	18c0      	adds	r0, r0, r3
 80039cc:	4770      	bx	lr
	...

080039d0 <_init>:
 80039d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d6:	bc08      	pop	{r3}
 80039d8:	469e      	mov	lr, r3
 80039da:	4770      	bx	lr

080039dc <_fini>:
 80039dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039e2:	bc08      	pop	{r3}
 80039e4:	469e      	mov	lr, r3
 80039e6:	4770      	bx	lr
