
19_USB_MSC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a88  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08008c34  08008c34  00018c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cdc  08008cdc  00020134  2**0
                  CONTENTS
  4 .ARM          00000000  08008cdc  08008cdc  00020134  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008cdc  08008cdc  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cdc  08008cdc  00018cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ce0  08008ce0  00018ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  08008ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013884  20000134  08008e18  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200139b8  08008e18  000239b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011080  00000000  00000000  000201a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003456  00000000  00000000  00031227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00034680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b2c  00000000  00000000  000355a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002aea0  00000000  00000000  000360cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140be  00000000  00000000  00060f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4bf3  00000000  00000000  0007502a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003bb8  00000000  00000000  00169c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0016d7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000134 	.word	0x20000134
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008c1c 	.word	0x08008c1c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000138 	.word	0x20000138
 80001e8:	08008c1c 	.word	0x08008c1c

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f0:	f000 f915 	bl	800041e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f4:	f000 f805 	bl	8000202 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f8:	f000 f854 	bl	80002a4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80001fc:	f007 fe90 	bl	8007f20 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000200:	e7fe      	b.n	8000200 <main+0x14>

08000202 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000202:	b580      	push	{r7, lr}
 8000204:	b096      	sub	sp, #88	; 0x58
 8000206:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000208:	f107 0314 	add.w	r3, r7, #20
 800020c:	2244      	movs	r2, #68	; 0x44
 800020e:	2100      	movs	r1, #0
 8000210:	4618      	mov	r0, r3
 8000212:	f008 fcc9 	bl	8008ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000216:	463b      	mov	r3, r7
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	609a      	str	r2, [r3, #8]
 8000220:	60da      	str	r2, [r3, #12]
 8000222:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000224:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000228:	f001 fe18 	bl	8001e5c <HAL_PWREx_ControlVoltageScaling>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000232:	f000 f85b 	bl	80002ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000236:	2301      	movs	r3, #1
 8000238:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000240:	2302      	movs	r3, #2
 8000242:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000244:	2303      	movs	r3, #3
 8000246:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000248:	2301      	movs	r3, #1
 800024a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800024c:	2314      	movs	r3, #20
 800024e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000250:	2302      	movs	r3, #2
 8000252:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000254:	2302      	movs	r3, #2
 8000256:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000258:	2302      	movs	r3, #2
 800025a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025c:	f107 0314 	add.w	r3, r7, #20
 8000260:	4618      	mov	r0, r3
 8000262:	f001 fe61 	bl	8001f28 <HAL_RCC_OscConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800026c:	f000 f83e 	bl	80002ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000270:	230f      	movs	r3, #15
 8000272:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000274:	2303      	movs	r3, #3
 8000276:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000278:	2390      	movs	r3, #144	; 0x90
 800027a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000286:	463b      	mov	r3, r7
 8000288:	2101      	movs	r1, #1
 800028a:	4618      	mov	r0, r3
 800028c:	f002 fa66 	bl	800275c <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000296:	f000 f829 	bl	80002ec <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3758      	adds	r7, #88	; 0x58
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002aa:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <MX_GPIO_Init+0x44>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ae:	4a0e      	ldr	r2, [pc, #56]	; (80002e8 <MX_GPIO_Init+0x44>)
 80002b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002b6:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <MX_GPIO_Init+0x44>)
 80002b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <MX_GPIO_Init+0x44>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	4a08      	ldr	r2, [pc, #32]	; (80002e8 <MX_GPIO_Init+0x44>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ce:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_GPIO_Init+0x44>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	603b      	str	r3, [r7, #0]
 80002d8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40021000 	.word	0x40021000

080002ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f0:	b672      	cpsid	i
}
 80002f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002f4:	e7fe      	b.n	80002f4 <Error_Handler+0x8>
	...

080002f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <HAL_MspInit+0x44>)
 8000300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000302:	4a0e      	ldr	r2, [pc, #56]	; (800033c <HAL_MspInit+0x44>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	6613      	str	r3, [r2, #96]	; 0x60
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <HAL_MspInit+0x44>)
 800030c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000316:	4b09      	ldr	r3, [pc, #36]	; (800033c <HAL_MspInit+0x44>)
 8000318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800031a:	4a08      	ldr	r2, [pc, #32]	; (800033c <HAL_MspInit+0x44>)
 800031c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000320:	6593      	str	r3, [r2, #88]	; 0x58
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <HAL_MspInit+0x44>)
 8000324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800032a:	603b      	str	r3, [r7, #0]
 800032c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000

08000340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000344:	e7fe      	b.n	8000344 <NMI_Handler+0x4>

08000346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000346:	b480      	push	{r7}
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800034a:	e7fe      	b.n	800034a <HardFault_Handler+0x4>

0800034c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000350:	e7fe      	b.n	8000350 <MemManage_Handler+0x4>

08000352 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000356:	e7fe      	b.n	8000356 <BusFault_Handler+0x4>

08000358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800035c:	e7fe      	b.n	800035c <UsageFault_Handler+0x4>

0800035e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000362:	bf00      	nop
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800038c:	f000 f89c 	bl	80004c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}

08000394 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000398:	4802      	ldr	r0, [pc, #8]	; (80003a4 <OTG_FS_IRQHandler+0x10>)
 800039a:	f000 fcd0 	bl	8000d3e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20013234 	.word	0x20013234

080003a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <SystemInit+0x20>)
 80003ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003b2:	4a05      	ldr	r2, [pc, #20]	; (80003c8 <SystemInit+0x20>)
 80003b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	e000ed00 	.word	0xe000ed00

080003cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80003cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000404 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003d0:	f7ff ffea 	bl	80003a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d4:	480c      	ldr	r0, [pc, #48]	; (8000408 <LoopForever+0x6>)
  ldr r1, =_edata
 80003d6:	490d      	ldr	r1, [pc, #52]	; (800040c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d8:	4a0d      	ldr	r2, [pc, #52]	; (8000410 <LoopForever+0xe>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003dc:	e002      	b.n	80003e4 <LoopCopyDataInit>

080003de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e2:	3304      	adds	r3, #4

080003e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e8:	d3f9      	bcc.n	80003de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ea:	4a0a      	ldr	r2, [pc, #40]	; (8000414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003ec:	4c0a      	ldr	r4, [pc, #40]	; (8000418 <LoopForever+0x16>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f0:	e001      	b.n	80003f6 <LoopFillZerobss>

080003f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f4:	3204      	adds	r2, #4

080003f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f8:	d3fb      	bcc.n	80003f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003fa:	f008 fbdd 	bl	8008bb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003fe:	f7ff fef5 	bl	80001ec <main>

08000402 <LoopForever>:

LoopForever:
    b LoopForever
 8000402:	e7fe      	b.n	8000402 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000404:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800040c:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8000410:	08008ce4 	.word	0x08008ce4
  ldr r2, =_sbss
 8000414:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8000418:	200139b8 	.word	0x200139b8

0800041c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800041c:	e7fe      	b.n	800041c <ADC1_2_IRQHandler>

0800041e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	b082      	sub	sp, #8
 8000422:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000424:	2300      	movs	r3, #0
 8000426:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000428:	2003      	movs	r0, #3
 800042a:	f000 f961 	bl	80006f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800042e:	2000      	movs	r0, #0
 8000430:	f000 f80e 	bl	8000450 <HAL_InitTick>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d002      	beq.n	8000440 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800043a:	2301      	movs	r3, #1
 800043c:	71fb      	strb	r3, [r7, #7]
 800043e:	e001      	b.n	8000444 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000440:	f7ff ff5a 	bl	80002f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000444:	79fb      	ldrb	r3, [r7, #7]
}
 8000446:	4618      	mov	r0, r3
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
	...

08000450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000458:	2300      	movs	r3, #0
 800045a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800045c:	4b17      	ldr	r3, [pc, #92]	; (80004bc <HAL_InitTick+0x6c>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d023      	beq.n	80004ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000464:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <HAL_InitTick+0x70>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	4b14      	ldr	r3, [pc, #80]	; (80004bc <HAL_InitTick+0x6c>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	4619      	mov	r1, r3
 800046e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000472:	fbb3 f3f1 	udiv	r3, r3, r1
 8000476:	fbb2 f3f3 	udiv	r3, r2, r3
 800047a:	4618      	mov	r0, r3
 800047c:	f000 f96d 	bl	800075a <HAL_SYSTICK_Config>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d10f      	bne.n	80004a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2b0f      	cmp	r3, #15
 800048a:	d809      	bhi.n	80004a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800048c:	2200      	movs	r2, #0
 800048e:	6879      	ldr	r1, [r7, #4]
 8000490:	f04f 30ff 	mov.w	r0, #4294967295
 8000494:	f000 f937 	bl	8000706 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000498:	4a0a      	ldr	r2, [pc, #40]	; (80004c4 <HAL_InitTick+0x74>)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	6013      	str	r3, [r2, #0]
 800049e:	e007      	b.n	80004b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80004a0:	2301      	movs	r3, #1
 80004a2:	73fb      	strb	r3, [r7, #15]
 80004a4:	e004      	b.n	80004b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80004a6:	2301      	movs	r3, #1
 80004a8:	73fb      	strb	r3, [r7, #15]
 80004aa:	e001      	b.n	80004b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80004ac:	2301      	movs	r3, #1
 80004ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80004b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000008 	.word	0x20000008
 80004c0:	20000000 	.word	0x20000000
 80004c4:	20000004 	.word	0x20000004

080004c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <HAL_IncTick+0x20>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	461a      	mov	r2, r3
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <HAL_IncTick+0x24>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4413      	add	r3, r2
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <HAL_IncTick+0x24>)
 80004da:	6013      	str	r3, [r2, #0]
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000008 	.word	0x20000008
 80004ec:	20000150 	.word	0x20000150

080004f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  return uwTick;
 80004f4:	4b03      	ldr	r3, [pc, #12]	; (8000504 <HAL_GetTick+0x14>)
 80004f6:	681b      	ldr	r3, [r3, #0]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000150 	.word	0x20000150

08000508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000510:	f7ff ffee 	bl	80004f0 <HAL_GetTick>
 8000514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000520:	d005      	beq.n	800052e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_Delay+0x44>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	461a      	mov	r2, r3
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4413      	add	r3, r2
 800052c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800052e:	bf00      	nop
 8000530:	f7ff ffde 	bl	80004f0 <HAL_GetTick>
 8000534:	4602      	mov	r2, r0
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	429a      	cmp	r2, r3
 800053e:	d8f7      	bhi.n	8000530 <HAL_Delay+0x28>
  {
  }
}
 8000540:	bf00      	nop
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000008 	.word	0x20000008

08000550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f003 0307 	and.w	r3, r3, #7
 800055e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <__NVIC_SetPriorityGrouping+0x44>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000566:	68ba      	ldr	r2, [r7, #8]
 8000568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800056c:	4013      	ands	r3, r2
 800056e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800057c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000582:	4a04      	ldr	r2, [pc, #16]	; (8000594 <__NVIC_SetPriorityGrouping+0x44>)
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	60d3      	str	r3, [r2, #12]
}
 8000588:	bf00      	nop
 800058a:	3714      	adds	r7, #20
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <__NVIC_GetPriorityGrouping+0x18>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	0a1b      	lsrs	r3, r3, #8
 80005a2:	f003 0307 	and.w	r3, r3, #7
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	db0b      	blt.n	80005de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f003 021f 	and.w	r2, r3, #31
 80005cc:	4907      	ldr	r1, [pc, #28]	; (80005ec <__NVIC_EnableIRQ+0x38>)
 80005ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d2:	095b      	lsrs	r3, r3, #5
 80005d4:	2001      	movs	r0, #1
 80005d6:	fa00 f202 	lsl.w	r2, r0, r2
 80005da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	e000e100 	.word	0xe000e100

080005f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	db0a      	blt.n	800061a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	b2da      	uxtb	r2, r3
 8000608:	490c      	ldr	r1, [pc, #48]	; (800063c <__NVIC_SetPriority+0x4c>)
 800060a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060e:	0112      	lsls	r2, r2, #4
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	440b      	add	r3, r1
 8000614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000618:	e00a      	b.n	8000630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4908      	ldr	r1, [pc, #32]	; (8000640 <__NVIC_SetPriority+0x50>)
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	f003 030f 	and.w	r3, r3, #15
 8000626:	3b04      	subs	r3, #4
 8000628:	0112      	lsls	r2, r2, #4
 800062a:	b2d2      	uxtb	r2, r2
 800062c:	440b      	add	r3, r1
 800062e:	761a      	strb	r2, [r3, #24]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000e100 	.word	0xe000e100
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000644:	b480      	push	{r7}
 8000646:	b089      	sub	sp, #36	; 0x24
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	f1c3 0307 	rsb	r3, r3, #7
 800065e:	2b04      	cmp	r3, #4
 8000660:	bf28      	it	cs
 8000662:	2304      	movcs	r3, #4
 8000664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	3304      	adds	r3, #4
 800066a:	2b06      	cmp	r3, #6
 800066c:	d902      	bls.n	8000674 <NVIC_EncodePriority+0x30>
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	3b03      	subs	r3, #3
 8000672:	e000      	b.n	8000676 <NVIC_EncodePriority+0x32>
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000678:	f04f 32ff 	mov.w	r2, #4294967295
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	43da      	mvns	r2, r3
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	401a      	ands	r2, r3
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800068c:	f04f 31ff 	mov.w	r1, #4294967295
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	fa01 f303 	lsl.w	r3, r1, r3
 8000696:	43d9      	mvns	r1, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	4313      	orrs	r3, r2
         );
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3724      	adds	r7, #36	; 0x24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
	...

080006ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006bc:	d301      	bcc.n	80006c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006be:	2301      	movs	r3, #1
 80006c0:	e00f      	b.n	80006e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <SysTick_Config+0x40>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ca:	210f      	movs	r1, #15
 80006cc:	f04f 30ff 	mov.w	r0, #4294967295
 80006d0:	f7ff ff8e 	bl	80005f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <SysTick_Config+0x40>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006da:	4b04      	ldr	r3, [pc, #16]	; (80006ec <SysTick_Config+0x40>)
 80006dc:	2207      	movs	r2, #7
 80006de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	e000e010 	.word	0xe000e010

080006f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ff29 	bl	8000550 <__NVIC_SetPriorityGrouping>
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b086      	sub	sp, #24
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	60b9      	str	r1, [r7, #8]
 8000710:	607a      	str	r2, [r7, #4]
 8000712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000718:	f7ff ff3e 	bl	8000598 <__NVIC_GetPriorityGrouping>
 800071c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	68b9      	ldr	r1, [r7, #8]
 8000722:	6978      	ldr	r0, [r7, #20]
 8000724:	f7ff ff8e 	bl	8000644 <NVIC_EncodePriority>
 8000728:	4602      	mov	r2, r0
 800072a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800072e:	4611      	mov	r1, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff5d 	bl	80005f0 <__NVIC_SetPriority>
}
 8000736:	bf00      	nop
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	4603      	mov	r3, r0
 8000746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff31 	bl	80005b4 <__NVIC_EnableIRQ>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b082      	sub	sp, #8
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff ffa2 	bl	80006ac <SysTick_Config>
 8000768:	4603      	mov	r3, r0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000774:	b480      	push	{r7}
 8000776:	b087      	sub	sp, #28
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000782:	e166      	b.n	8000a52 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	2101      	movs	r1, #1
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	fa01 f303 	lsl.w	r3, r1, r3
 8000790:	4013      	ands	r3, r2
 8000792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	2b00      	cmp	r3, #0
 8000798:	f000 8158 	beq.w	8000a4c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	f003 0303 	and.w	r3, r3, #3
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d005      	beq.n	80007b4 <HAL_GPIO_Init+0x40>
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	f003 0303 	and.w	r3, r3, #3
 80007b0:	2b02      	cmp	r3, #2
 80007b2:	d130      	bne.n	8000816 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	2203      	movs	r2, #3
 80007c0:	fa02 f303 	lsl.w	r3, r2, r3
 80007c4:	43db      	mvns	r3, r3
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	4013      	ands	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	68da      	ldr	r2, [r3, #12]
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	693a      	ldr	r2, [r7, #16]
 80007da:	4313      	orrs	r3, r2
 80007dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	693a      	ldr	r2, [r7, #16]
 80007e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007ea:	2201      	movs	r2, #1
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	43db      	mvns	r3, r3
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	4013      	ands	r3, r2
 80007f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	091b      	lsrs	r3, r3, #4
 8000800:	f003 0201 	and.w	r2, r3, #1
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	4313      	orrs	r3, r2
 800080e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	f003 0303 	and.w	r3, r3, #3
 800081e:	2b03      	cmp	r3, #3
 8000820:	d017      	beq.n	8000852 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	2203      	movs	r2, #3
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	4013      	ands	r3, r2
 8000838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	689a      	ldr	r2, [r3, #8]
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	4313      	orrs	r3, r2
 800084a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f003 0303 	and.w	r3, r3, #3
 800085a:	2b02      	cmp	r3, #2
 800085c:	d123      	bne.n	80008a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	08da      	lsrs	r2, r3, #3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3208      	adds	r2, #8
 8000866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800086a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	220f      	movs	r2, #15
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43db      	mvns	r3, r3
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	4013      	ands	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	691a      	ldr	r2, [r3, #16]
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	f003 0307 	and.w	r3, r3, #7
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	4313      	orrs	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	08da      	lsrs	r2, r3, #3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3208      	adds	r2, #8
 80008a0:	6939      	ldr	r1, [r7, #16]
 80008a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	2203      	movs	r2, #3
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	4013      	ands	r3, r2
 80008bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 0203 	and.w	r2, r3, #3
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f000 80b2 	beq.w	8000a4c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e8:	4b61      	ldr	r3, [pc, #388]	; (8000a70 <HAL_GPIO_Init+0x2fc>)
 80008ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ec:	4a60      	ldr	r2, [pc, #384]	; (8000a70 <HAL_GPIO_Init+0x2fc>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	6613      	str	r3, [r2, #96]	; 0x60
 80008f4:	4b5e      	ldr	r3, [pc, #376]	; (8000a70 <HAL_GPIO_Init+0x2fc>)
 80008f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000900:	4a5c      	ldr	r2, [pc, #368]	; (8000a74 <HAL_GPIO_Init+0x300>)
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	089b      	lsrs	r3, r3, #2
 8000906:	3302      	adds	r3, #2
 8000908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800090c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	f003 0303 	and.w	r3, r3, #3
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	220f      	movs	r2, #15
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	4013      	ands	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800092a:	d02b      	beq.n	8000984 <HAL_GPIO_Init+0x210>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a52      	ldr	r2, [pc, #328]	; (8000a78 <HAL_GPIO_Init+0x304>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d025      	beq.n	8000980 <HAL_GPIO_Init+0x20c>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a51      	ldr	r2, [pc, #324]	; (8000a7c <HAL_GPIO_Init+0x308>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d01f      	beq.n	800097c <HAL_GPIO_Init+0x208>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a50      	ldr	r2, [pc, #320]	; (8000a80 <HAL_GPIO_Init+0x30c>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d019      	beq.n	8000978 <HAL_GPIO_Init+0x204>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a4f      	ldr	r2, [pc, #316]	; (8000a84 <HAL_GPIO_Init+0x310>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d013      	beq.n	8000974 <HAL_GPIO_Init+0x200>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a4e      	ldr	r2, [pc, #312]	; (8000a88 <HAL_GPIO_Init+0x314>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d00d      	beq.n	8000970 <HAL_GPIO_Init+0x1fc>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a4d      	ldr	r2, [pc, #308]	; (8000a8c <HAL_GPIO_Init+0x318>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d007      	beq.n	800096c <HAL_GPIO_Init+0x1f8>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a4c      	ldr	r2, [pc, #304]	; (8000a90 <HAL_GPIO_Init+0x31c>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d101      	bne.n	8000968 <HAL_GPIO_Init+0x1f4>
 8000964:	2307      	movs	r3, #7
 8000966:	e00e      	b.n	8000986 <HAL_GPIO_Init+0x212>
 8000968:	2308      	movs	r3, #8
 800096a:	e00c      	b.n	8000986 <HAL_GPIO_Init+0x212>
 800096c:	2306      	movs	r3, #6
 800096e:	e00a      	b.n	8000986 <HAL_GPIO_Init+0x212>
 8000970:	2305      	movs	r3, #5
 8000972:	e008      	b.n	8000986 <HAL_GPIO_Init+0x212>
 8000974:	2304      	movs	r3, #4
 8000976:	e006      	b.n	8000986 <HAL_GPIO_Init+0x212>
 8000978:	2303      	movs	r3, #3
 800097a:	e004      	b.n	8000986 <HAL_GPIO_Init+0x212>
 800097c:	2302      	movs	r3, #2
 800097e:	e002      	b.n	8000986 <HAL_GPIO_Init+0x212>
 8000980:	2301      	movs	r3, #1
 8000982:	e000      	b.n	8000986 <HAL_GPIO_Init+0x212>
 8000984:	2300      	movs	r3, #0
 8000986:	697a      	ldr	r2, [r7, #20]
 8000988:	f002 0203 	and.w	r2, r2, #3
 800098c:	0092      	lsls	r2, r2, #2
 800098e:	4093      	lsls	r3, r2
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	4313      	orrs	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000996:	4937      	ldr	r1, [pc, #220]	; (8000a74 <HAL_GPIO_Init+0x300>)
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	3302      	adds	r3, #2
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009a4:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <HAL_GPIO_Init+0x320>)
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	43db      	mvns	r3, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4013      	ands	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d003      	beq.n	80009c8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009c8:	4a32      	ldr	r2, [pc, #200]	; (8000a94 <HAL_GPIO_Init+0x320>)
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009ce:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <HAL_GPIO_Init+0x320>)
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	43db      	mvns	r3, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4013      	ands	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d003      	beq.n	80009f2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80009f2:	4a28      	ldr	r2, [pc, #160]	; (8000a94 <HAL_GPIO_Init+0x320>)
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <HAL_GPIO_Init+0x320>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	43db      	mvns	r3, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d003      	beq.n	8000a1c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a1c:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <HAL_GPIO_Init+0x320>)
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <HAL_GPIO_Init+0x320>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a46:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <HAL_GPIO_Init+0x320>)
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	fa22 f303 	lsr.w	r3, r2, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	f47f ae91 	bne.w	8000784 <HAL_GPIO_Init+0x10>
  }
}
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop
 8000a66:	371c      	adds	r7, #28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40010000 	.word	0x40010000
 8000a78:	48000400 	.word	0x48000400
 8000a7c:	48000800 	.word	0x48000800
 8000a80:	48000c00 	.word	0x48000c00
 8000a84:	48001000 	.word	0x48001000
 8000a88:	48001400 	.word	0x48001400
 8000a8c:	48001800 	.word	0x48001800
 8000a90:	48001c00 	.word	0x48001c00
 8000a94:	40010400 	.word	0x40010400

08000a98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a9a:	b08f      	sub	sp, #60	; 0x3c
 8000a9c:	af0a      	add	r7, sp, #40	; 0x28
 8000a9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e116      	b.n	8000cd8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d106      	bne.n	8000aca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f007 fbf5 	bl	80082b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2203      	movs	r2, #3
 8000ace:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d102      	bne.n	8000ae4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f002 fdd2 	bl	8003692 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	687e      	ldr	r6, [r7, #4]
 8000af6:	466d      	mov	r5, sp
 8000af8:	f106 0410 	add.w	r4, r6, #16
 8000afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000afe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b08:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b0c:	1d33      	adds	r3, r6, #4
 8000b0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b10:	6838      	ldr	r0, [r7, #0]
 8000b12:	f002 fce5 	bl	80034e0 <USB_CoreInit>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d005      	beq.n	8000b28 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2202      	movs	r2, #2
 8000b20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	e0d7      	b.n	8000cd8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f002 fdc0 	bl	80036b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e04a      	b.n	8000bd0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b3a:	7bfa      	ldrb	r2, [r7, #15]
 8000b3c:	6879      	ldr	r1, [r7, #4]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	4413      	add	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	440b      	add	r3, r1
 8000b48:	333d      	adds	r3, #61	; 0x3d
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b4e:	7bfa      	ldrb	r2, [r7, #15]
 8000b50:	6879      	ldr	r1, [r7, #4]
 8000b52:	4613      	mov	r3, r2
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	4413      	add	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	333c      	adds	r3, #60	; 0x3c
 8000b5e:	7bfa      	ldrb	r2, [r7, #15]
 8000b60:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b62:	7bfa      	ldrb	r2, [r7, #15]
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	b298      	uxth	r0, r3
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	4413      	add	r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	440b      	add	r3, r1
 8000b74:	3356      	adds	r3, #86	; 0x56
 8000b76:	4602      	mov	r2, r0
 8000b78:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b7a:	7bfa      	ldrb	r2, [r7, #15]
 8000b7c:	6879      	ldr	r1, [r7, #4]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	4413      	add	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	440b      	add	r3, r1
 8000b88:	3340      	adds	r3, #64	; 0x40
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b8e:	7bfa      	ldrb	r2, [r7, #15]
 8000b90:	6879      	ldr	r1, [r7, #4]
 8000b92:	4613      	mov	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	4413      	add	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3344      	adds	r3, #68	; 0x44
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ba2:	7bfa      	ldrb	r2, [r7, #15]
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	4413      	add	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	440b      	add	r3, r1
 8000bb0:	3348      	adds	r3, #72	; 0x48
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000bb6:	7bfa      	ldrb	r2, [r7, #15]
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	334c      	adds	r3, #76	; 0x4c
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
 8000bd0:	7bfa      	ldrb	r2, [r7, #15]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d3af      	bcc.n	8000b3a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]
 8000bde:	e044      	b.n	8000c6a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000be0:	7bfa      	ldrb	r2, [r7, #15]
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	4613      	mov	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	4413      	add	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	440b      	add	r3, r1
 8000bee:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000bf6:	7bfa      	ldrb	r2, [r7, #15]
 8000bf8:	6879      	ldr	r1, [r7, #4]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	4413      	add	r3, r2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	440b      	add	r3, r1
 8000c04:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000c08:	7bfa      	ldrb	r2, [r7, #15]
 8000c0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c0c:	7bfa      	ldrb	r2, [r7, #15]
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	4613      	mov	r3, r2
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	4413      	add	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	440b      	add	r3, r1
 8000c1a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c22:	7bfa      	ldrb	r2, [r7, #15]
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	4613      	mov	r3, r2
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	4413      	add	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c38:	7bfa      	ldrb	r2, [r7, #15]
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	4413      	add	r3, r2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	440b      	add	r3, r1
 8000c46:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c4e:	7bfa      	ldrb	r2, [r7, #15]
 8000c50:	6879      	ldr	r1, [r7, #4]
 8000c52:	4613      	mov	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	4413      	add	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	3301      	adds	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	7bfa      	ldrb	r2, [r7, #15]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d3b5      	bcc.n	8000be0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	687e      	ldr	r6, [r7, #4]
 8000c7c:	466d      	mov	r5, sp
 8000c7e:	f106 0410 	add.w	r4, r6, #16
 8000c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c92:	1d33      	adds	r3, r6, #4
 8000c94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c96:	6838      	ldr	r0, [r7, #0]
 8000c98:	f002 fd58 	bl	800374c <USB_DevInit>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d005      	beq.n	8000cae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e014      	b.n	8000cd8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d102      	bne.n	8000ccc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f001 f896 	bl	8001df8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f003 fd06 	bl	80046e2 <USB_DevDisconnect>

  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ce0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d101      	bne.n	8000cfc <HAL_PCD_Start+0x1c>
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	e01c      	b.n	8000d36 <HAL_PCD_Start+0x56>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d105      	bne.n	8000d18 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 fca7 	bl	8003670 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f003 fcba 	bl	80046a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d3e:	b590      	push	{r4, r7, lr}
 8000d40:	b08d      	sub	sp, #52	; 0x34
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000d4c:	6a3b      	ldr	r3, [r7, #32]
 8000d4e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f003 fd78 	bl	800484a <USB_GetMode>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	f040 847e 	bne.w	800165e <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f003 fcdc 	bl	8004724 <USB_ReadInterrupts>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 8474 	beq.w	800165c <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f003 fcc9 	bl	8004724 <USB_ReadInterrupts>
 8000d92:	4603      	mov	r3, r0
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d107      	bne.n	8000dac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	695a      	ldr	r2, [r3, #20]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f002 0202 	and.w	r2, r2, #2
 8000daa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 fcb7 	bl	8004724 <USB_ReadInterrupts>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f003 0310 	and.w	r3, r3, #16
 8000dbc:	2b10      	cmp	r3, #16
 8000dbe:	d161      	bne.n	8000e84 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	699a      	ldr	r2, [r3, #24]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f022 0210 	bic.w	r2, r2, #16
 8000dce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000dd0:	6a3b      	ldr	r3, [r7, #32]
 8000dd2:	6a1b      	ldr	r3, [r3, #32]
 8000dd4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	f003 020f 	and.w	r2, r3, #15
 8000ddc:	4613      	mov	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	4413      	add	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	4413      	add	r3, r2
 8000dec:	3304      	adds	r3, #4
 8000dee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	0c5b      	lsrs	r3, r3, #17
 8000df4:	f003 030f 	and.w	r3, r3, #15
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d124      	bne.n	8000e46 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000e02:	4013      	ands	r3, r2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d035      	beq.n	8000e74 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	091b      	lsrs	r3, r3, #4
 8000e10:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	6a38      	ldr	r0, [r7, #32]
 8000e1c:	f003 faee 	bl	80043fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	091b      	lsrs	r3, r3, #4
 8000e28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e2c:	441a      	add	r2, r3
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	695a      	ldr	r2, [r3, #20]
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	091b      	lsrs	r3, r3, #4
 8000e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e3e:	441a      	add	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	615a      	str	r2, [r3, #20]
 8000e44:	e016      	b.n	8000e74 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	0c5b      	lsrs	r3, r3, #17
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d110      	bne.n	8000e74 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8000e58:	2208      	movs	r2, #8
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	6a38      	ldr	r0, [r7, #32]
 8000e5e:	f003 facd 	bl	80043fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	695a      	ldr	r2, [r3, #20]
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	091b      	lsrs	r3, r3, #4
 8000e6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e6e:	441a      	add	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	699a      	ldr	r2, [r3, #24]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f042 0210 	orr.w	r2, r2, #16
 8000e82:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 fc4b 	bl	8004724 <USB_ReadInterrupts>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000e98:	f040 80a7 	bne.w	8000fea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f003 fc50 	bl	800474a <USB_ReadDevAllOutEpInterrupt>
 8000eaa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000eac:	e099      	b.n	8000fe2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 808e 	beq.w	8000fd6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 fc74 	bl	80047b2 <USB_ReadDevOutEPInterrupt>
 8000eca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00c      	beq.n	8000ef0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	015a      	lsls	r2, r3, #5
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	4413      	add	r3, r2
 8000ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000ee8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 feaa 	bl	8001c44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d00c      	beq.n	8000f14 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	015a      	lsls	r2, r3, #5
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	4413      	add	r3, r2
 8000f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f06:	461a      	mov	r2, r3
 8000f08:	2308      	movs	r3, #8
 8000f0a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f000 fee6 	bl	8001ce0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	f003 0310 	and.w	r3, r3, #16
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d008      	beq.n	8000f30 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	015a      	lsls	r2, r3, #5
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	4413      	add	r3, r2
 8000f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d030      	beq.n	8000f9c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8000f3a:	6a3b      	ldr	r3, [r7, #32]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f42:	2b80      	cmp	r3, #128	; 0x80
 8000f44:	d109      	bne.n	8000f5a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	69fa      	ldr	r2, [r7, #28]
 8000f50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000f54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f58:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8000f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	78db      	ldrb	r3, [r3, #3]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d108      	bne.n	8000f8a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	4619      	mov	r1, r3
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f007 fae9 	bl	800855c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	015a      	lsls	r2, r3, #5
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	4413      	add	r3, r2
 8000f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f96:	461a      	mov	r2, r3
 8000f98:	2302      	movs	r3, #2
 8000f9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	f003 0320 	and.w	r3, r3, #32
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d008      	beq.n	8000fb8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	015a      	lsls	r2, r3, #5
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	4413      	add	r3, r2
 8000fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	2320      	movs	r3, #32
 8000fb6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d009      	beq.n	8000fd6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	015a      	lsls	r2, r3, #5
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	4413      	add	r3, r2
 8000fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fce:	461a      	mov	r2, r3
 8000fd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	3301      	adds	r3, #1
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fde:	085b      	lsrs	r3, r3, #1
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8000fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f47f af62 	bne.w	8000eae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 fb98 	bl	8004724 <USB_ReadInterrupts>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ffa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000ffe:	f040 80a4 	bne.w	800114a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f003 fbb9 	bl	800477e <USB_ReadDevAllInEpInterrupt>
 800100c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001012:	e096      	b.n	8001142 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 808b 	beq.w	8001136 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f003 fbdf 	bl	80047ee <USB_ReadDevInEPInterrupt>
 8001030:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	2b00      	cmp	r3, #0
 800103a:	d020      	beq.n	800107e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	2201      	movs	r2, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43db      	mvns	r3, r3
 8001056:	69f9      	ldr	r1, [r7, #28]
 8001058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800105c:	4013      	ands	r3, r2
 800105e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	015a      	lsls	r2, r3, #5
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	4413      	add	r3, r2
 8001068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800106c:	461a      	mov	r2, r3
 800106e:	2301      	movs	r3, #1
 8001070:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4619      	mov	r1, r3
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f007 f9da 	bl	8008432 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	f003 0308 	and.w	r3, r3, #8
 8001084:	2b00      	cmp	r3, #0
 8001086:	d008      	beq.n	800109a <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	015a      	lsls	r2, r3, #5
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	4413      	add	r3, r2
 8001090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001094:	461a      	mov	r2, r3
 8001096:	2308      	movs	r3, #8
 8001098:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	f003 0310 	and.w	r3, r3, #16
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d008      	beq.n	80010b6 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	015a      	lsls	r2, r3, #5
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	4413      	add	r3, r2
 80010ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010b0:	461a      	mov	r2, r3
 80010b2:	2310      	movs	r3, #16
 80010b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d008      	beq.n	80010d2 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	015a      	lsls	r2, r3, #5
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	4413      	add	r3, r2
 80010c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010cc:	461a      	mov	r2, r3
 80010ce:	2340      	movs	r3, #64	; 0x40
 80010d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d023      	beq.n	8001124 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80010dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010de:	6a38      	ldr	r0, [r7, #32]
 80010e0:	f002 fc76 	bl	80039d0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80010e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e6:	4613      	mov	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	3338      	adds	r3, #56	; 0x38
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	3304      	adds	r3, #4
 80010f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	78db      	ldrb	r3, [r3, #3]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d108      	bne.n	8001112 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	2200      	movs	r2, #0
 8001104:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	b2db      	uxtb	r3, r3
 800110a:	4619      	mov	r1, r3
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f007 fa37 	bl	8008580 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	015a      	lsls	r2, r3, #5
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	4413      	add	r3, r2
 800111a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800111e:	461a      	mov	r2, r3
 8001120:	2302      	movs	r3, #2
 8001122:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800112e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 fcff 	bl	8001b34 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	3301      	adds	r3, #1
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800113c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113e:	085b      	lsrs	r3, r3, #1
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001144:	2b00      	cmp	r3, #0
 8001146:	f47f af65 	bne.w	8001014 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f003 fae8 	bl	8004724 <USB_ReadInterrupts>
 8001154:	4603      	mov	r3, r0
 8001156:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800115a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800115e:	d122      	bne.n	80011a6 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800116e:	f023 0301 	bic.w	r3, r3, #1
 8001172:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800117a:	2b01      	cmp	r3, #1
 800117c:	d108      	bne.n	8001190 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001186:	2100      	movs	r1, #0
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f007 fca1 	bl	8008ad0 <HAL_PCDEx_LPM_Callback>
 800118e:	e002      	b.n	8001196 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f007 f9bb 	bl	800850c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	695a      	ldr	r2, [r3, #20]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80011a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 faba 	bl	8004724 <USB_ReadInterrupts>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011ba:	d112      	bne.n	80011e2 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d102      	bne.n	80011d2 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f007 f977 	bl	80084c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	695a      	ldr	r2, [r3, #20]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80011e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 fa9c 	bl	8004724 <USB_ReadInterrupts>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80011f6:	d121      	bne.n	800123c <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001206:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800120e:	2b00      	cmp	r3, #0
 8001210:	d111      	bne.n	8001236 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	f003 020f 	and.w	r2, r3, #15
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800122c:	2101      	movs	r1, #1
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f007 fc4e 	bl	8008ad0 <HAL_PCDEx_LPM_Callback>
 8001234:	e002      	b.n	800123c <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f007 f942 	bl	80084c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fa6f 	bl	8004724 <USB_ReadInterrupts>
 8001246:	4603      	mov	r3, r0
 8001248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800124c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001250:	f040 80b5 	bne.w	80013be <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001262:	f023 0301 	bic.w	r3, r3, #1
 8001266:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2110      	movs	r1, #16
 800126e:	4618      	mov	r0, r3
 8001270:	f002 fbae 	bl	80039d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001278:	e046      	b.n	8001308 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800127a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800127c:	015a      	lsls	r2, r3, #5
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	4413      	add	r3, r2
 8001282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001286:	461a      	mov	r2, r3
 8001288:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800128c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001290:	015a      	lsls	r2, r3, #5
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	4413      	add	r3, r2
 8001296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800129e:	0151      	lsls	r1, r2, #5
 80012a0:	69fa      	ldr	r2, [r7, #28]
 80012a2:	440a      	add	r2, r1
 80012a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80012a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80012ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b0:	015a      	lsls	r2, r3, #5
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	4413      	add	r3, r2
 80012b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012ba:	461a      	mov	r2, r3
 80012bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	015a      	lsls	r2, r3, #5
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	4413      	add	r3, r2
 80012ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012d2:	0151      	lsls	r1, r2, #5
 80012d4:	69fa      	ldr	r2, [r7, #28]
 80012d6:	440a      	add	r2, r1
 80012d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80012dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80012e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e4:	015a      	lsls	r2, r3, #5
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	4413      	add	r3, r2
 80012ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012f2:	0151      	lsls	r1, r2, #5
 80012f4:	69fa      	ldr	r2, [r7, #28]
 80012f6:	440a      	add	r2, r1
 80012f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80012fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001300:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001304:	3301      	adds	r3, #1
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800130e:	429a      	cmp	r2, r3
 8001310:	d3b3      	bcc.n	800127a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001320:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001324:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	2b00      	cmp	r3, #0
 800132c:	d016      	beq.n	800135c <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001338:	69fa      	ldr	r2, [r7, #28]
 800133a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800133e:	f043 030b 	orr.w	r3, r3, #11
 8001342:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001354:	f043 030b 	orr.w	r3, r3, #11
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	e015      	b.n	8001388 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800136a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800136e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001372:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001382:	f043 030b 	orr.w	r3, r3, #11
 8001386:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001396:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800139a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013a6:	4619      	mov	r1, r3
 80013a8:	4610      	mov	r0, r2
 80013aa:	f003 fa7f 	bl	80048ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	695a      	ldr	r2, [r3, #20]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80013bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 f9ae 	bl	8004724 <USB_ReadInterrupts>
 80013c8:	4603      	mov	r3, r0
 80013ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013d2:	d124      	bne.n	800141e <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f003 fa44 	bl	8004866 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 fb71 	bl	8003aca <USB_GetDevSpeed>
 80013e8:	4603      	mov	r3, r0
 80013ea:	461a      	mov	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681c      	ldr	r4, [r3, #0]
 80013f4:	f001 fb3e 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 80013f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	4620      	mov	r0, r4
 8001404:	f002 f898 	bl	8003538 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f007 f83a 	bl	8008482 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800141c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f003 f97e 	bl	8004724 <USB_ReadInterrupts>
 8001428:	4603      	mov	r3, r0
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b08      	cmp	r3, #8
 8001430:	d10a      	bne.n	8001448 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f007 f817 	bl	8008466 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	695a      	ldr	r2, [r3, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f002 0208 	and.w	r2, r2, #8
 8001446:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f003 f969 	bl	8004724 <USB_ReadInterrupts>
 8001452:	4603      	mov	r3, r0
 8001454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001458:	2b80      	cmp	r3, #128	; 0x80
 800145a:	d122      	bne.n	80014a2 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001468:	2301      	movs	r3, #1
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
 800146c:	e014      	b.n	8001498 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001472:	4613      	mov	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d105      	bne.n	8001492 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	b2db      	uxtb	r3, r3
 800148a:	4619      	mov	r1, r3
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 faf3 	bl	8001a78 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	3301      	adds	r3, #1
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149e:	429a      	cmp	r2, r3
 80014a0:	d3e5      	bcc.n	800146e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 f93c 	bl	8004724 <USB_ReadInterrupts>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014b6:	d13b      	bne.n	8001530 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80014b8:	2301      	movs	r3, #1
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
 80014bc:	e02b      	b.n	8001516 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	015a      	lsls	r2, r3, #5
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	4413      	add	r3, r2
 80014c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d2:	4613      	mov	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	3340      	adds	r3, #64	; 0x40
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d115      	bne.n	8001510 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80014e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	da12      	bge.n	8001510 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ee:	4613      	mov	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	333f      	adds	r3, #63	; 0x3f
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001506:	b2db      	uxtb	r3, r3
 8001508:	4619      	mov	r1, r3
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 fab4 	bl	8001a78 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	3301      	adds	r3, #1
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800151c:	429a      	cmp	r2, r3
 800151e:	d3ce      	bcc.n	80014be <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800152e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f003 f8f5 	bl	8004724 <USB_ReadInterrupts>
 800153a:	4603      	mov	r3, r0
 800153c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001540:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001544:	d155      	bne.n	80015f2 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001546:	2301      	movs	r3, #1
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
 800154a:	e045      	b.n	80015d8 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	015a      	lsls	r2, r3, #5
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	4413      	add	r3, r2
 8001554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001560:	4613      	mov	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d12e      	bne.n	80015d2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001574:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001576:	2b00      	cmp	r3, #0
 8001578:	da2b      	bge.n	80015d2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001586:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800158a:	429a      	cmp	r2, r3
 800158c:	d121      	bne.n	80015d2 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001592:	4613      	mov	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10a      	bne.n	80015d2 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	69fa      	ldr	r2, [r7, #28]
 80015c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ce:	6053      	str	r3, [r2, #4]
            break;
 80015d0:	e007      	b.n	80015e2 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	3301      	adds	r3, #1
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015de:	429a      	cmp	r2, r3
 80015e0:	d3b4      	bcc.n	800154c <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80015f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 f894 	bl	8004724 <USB_ReadInterrupts>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001606:	d10a      	bne.n	800161e <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f006 ffcb 	bl	80085a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	695a      	ldr	r2, [r3, #20]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800161c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f003 f87e 	bl	8004724 <USB_ReadInterrupts>
 8001628:	4603      	mov	r3, r0
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	2b04      	cmp	r3, #4
 8001630:	d115      	bne.n	800165e <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f006 ffbb 	bl	80085c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	430a      	orrs	r2, r1
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	e000      	b.n	800165e <HAL_PCD_IRQHandler+0x920>
      return;
 800165c:	bf00      	nop
    }
  }
}
 800165e:	3734      	adds	r7, #52	; 0x34
 8001660:	46bd      	mov	sp, r7
 8001662:	bd90      	pop	{r4, r7, pc}

08001664 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_PCD_SetAddress+0x1a>
 800167a:	2302      	movs	r3, #2
 800167c:	e013      	b.n	80016a6 <HAL_PCD_SetAddress+0x42>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	78fa      	ldrb	r2, [r7, #3]
 800168a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	78fa      	ldrb	r2, [r7, #3]
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f002 ffdc 	bl	8004654 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	4608      	mov	r0, r1
 80016b8:	4611      	mov	r1, r2
 80016ba:	461a      	mov	r2, r3
 80016bc:	4603      	mov	r3, r0
 80016be:	70fb      	strb	r3, [r7, #3]
 80016c0:	460b      	mov	r3, r1
 80016c2:	803b      	strh	r3, [r7, #0]
 80016c4:	4613      	mov	r3, r2
 80016c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da0f      	bge.n	80016f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	f003 020f 	and.w	r2, r3, #15
 80016da:	4613      	mov	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	4413      	add	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	3338      	adds	r3, #56	; 0x38
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	3304      	adds	r3, #4
 80016ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2201      	movs	r2, #1
 80016f0:	705a      	strb	r2, [r3, #1]
 80016f2:	e00f      	b.n	8001714 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	f003 020f 	and.w	r2, r3, #15
 80016fa:	4613      	mov	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4413      	add	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	3304      	adds	r3, #4
 800170c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	b2da      	uxtb	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001720:	883a      	ldrh	r2, [r7, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	78ba      	ldrb	r2, [r7, #2]
 800172a:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	785b      	ldrb	r3, [r3, #1]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d004      	beq.n	800173e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	b29a      	uxth	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800173e:	78bb      	ldrb	r3, [r7, #2]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d102      	bne.n	800174a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001750:	2b01      	cmp	r3, #1
 8001752:	d101      	bne.n	8001758 <HAL_PCD_EP_Open+0xaa>
 8001754:	2302      	movs	r3, #2
 8001756:	e00e      	b.n	8001776 <HAL_PCD_EP_Open+0xc8>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68f9      	ldr	r1, [r7, #12]
 8001766:	4618      	mov	r0, r3
 8001768:	f002 f9ce 	bl	8003b08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001774:	7afb      	ldrb	r3, [r7, #11]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800178a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800178e:	2b00      	cmp	r3, #0
 8001790:	da0f      	bge.n	80017b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	f003 020f 	and.w	r2, r3, #15
 8001798:	4613      	mov	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	4413      	add	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	3338      	adds	r3, #56	; 0x38
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	3304      	adds	r3, #4
 80017a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2201      	movs	r2, #1
 80017ae:	705a      	strb	r2, [r3, #1]
 80017b0:	e00f      	b.n	80017d2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	f003 020f 	and.w	r2, r3, #15
 80017b8:	4613      	mov	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4413      	add	r3, r2
 80017c8:	3304      	adds	r3, #4
 80017ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_PCD_EP_Close+0x6e>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e00e      	b.n	800180a <HAL_PCD_EP_Close+0x8c>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68f9      	ldr	r1, [r7, #12]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f002 fa0c 	bl	8003c18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	460b      	mov	r3, r1
 8001820:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001822:	7afb      	ldrb	r3, [r7, #11]
 8001824:	f003 020f 	and.w	r2, r3, #15
 8001828:	4613      	mov	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	3304      	adds	r3, #4
 800183a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2200      	movs	r2, #0
 8001852:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001854:	7afb      	ldrb	r3, [r7, #11]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	b2da      	uxtb	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6979      	ldr	r1, [r7, #20]
 8001866:	4618      	mov	r0, r3
 8001868:	f002 fab2 	bl	8003dd0 <USB_EPStartXfer>

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	f003 020f 	and.w	r2, r3, #15
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	4413      	add	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8001898:	681b      	ldr	r3, [r3, #0]
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	460b      	mov	r3, r1
 80018b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018b6:	7afb      	ldrb	r3, [r7, #11]
 80018b8:	f003 020f 	and.w	r2, r3, #15
 80018bc:	4613      	mov	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	3338      	adds	r3, #56	; 0x38
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	4413      	add	r3, r2
 80018ca:	3304      	adds	r3, #4
 80018cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2200      	movs	r2, #0
 80018de:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	2201      	movs	r2, #1
 80018e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018e6:	7afb      	ldrb	r3, [r7, #11]
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6979      	ldr	r1, [r7, #20]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 fa69 	bl	8003dd0 <USB_EPStartXfer>

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	f003 020f 	and.w	r2, r3, #15
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	429a      	cmp	r2, r3
 8001920:	d901      	bls.n	8001926 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e04e      	b.n	80019c4 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001926:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800192a:	2b00      	cmp	r3, #0
 800192c:	da0f      	bge.n	800194e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	f003 020f 	and.w	r2, r3, #15
 8001934:	4613      	mov	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	3338      	adds	r3, #56	; 0x38
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	3304      	adds	r3, #4
 8001944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2201      	movs	r2, #1
 800194a:	705a      	strb	r2, [r3, #1]
 800194c:	e00d      	b.n	800196a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800194e:	78fa      	ldrb	r2, [r7, #3]
 8001950:	4613      	mov	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4413      	add	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	4413      	add	r3, r2
 8001960:	3304      	adds	r3, #4
 8001962:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2201      	movs	r2, #1
 800196e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	b2da      	uxtb	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <HAL_PCD_EP_SetStall+0x82>
 8001986:	2302      	movs	r3, #2
 8001988:	e01c      	b.n	80019c4 <HAL_PCD_EP_SetStall+0xbc>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68f9      	ldr	r1, [r7, #12]
 8001998:	4618      	mov	r0, r3
 800199a:	f002 fd87 	bl	80044ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d108      	bne.n	80019ba <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80019b2:	4619      	mov	r1, r3
 80019b4:	4610      	mov	r0, r2
 80019b6:	f002 ff79 	bl	80048ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	f003 020f 	and.w	r2, r3, #15
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d901      	bls.n	80019ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e042      	b.n	8001a70 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	da0f      	bge.n	8001a12 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	f003 020f 	and.w	r2, r3, #15
 80019f8:	4613      	mov	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	3338      	adds	r3, #56	; 0x38
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	3304      	adds	r3, #4
 8001a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	705a      	strb	r2, [r3, #1]
 8001a10:	e00f      	b.n	8001a32 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	f003 020f 	and.w	r2, r3, #15
 8001a18:	4613      	mov	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	4413      	add	r3, r2
 8001a28:	3304      	adds	r3, #4
 8001a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_PCD_EP_ClrStall+0x86>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e00e      	b.n	8001a70 <HAL_PCD_EP_ClrStall+0xa4>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68f9      	ldr	r1, [r7, #12]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f002 fd91 	bl	8004588 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001a84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	da0c      	bge.n	8001aa6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	f003 020f 	and.w	r2, r3, #15
 8001a92:	4613      	mov	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	3338      	adds	r3, #56	; 0x38
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	e00c      	b.n	8001ac0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	f003 020f 	and.w	r2, r3, #15
 8001aac:	4613      	mov	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	3304      	adds	r3, #4
 8001abe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68f9      	ldr	r1, [r7, #12]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 fbb4 	bl	8004234 <USB_EPStopXfer>
 8001acc:	4603      	mov	r3, r0
 8001ace:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001ad0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <HAL_PCD_EP_Flush+0x1a>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e01b      	b.n	8001b2c <HAL_PCD_EP_Flush+0x52>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8001afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	da09      	bge.n	8001b18 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4610      	mov	r0, r2
 8001b12:	f001 ff5d 	bl	80039d0 <USB_FlushTxFifo>
 8001b16:	e004      	b.n	8001b22 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 ff8b 	bl	8003a38 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	3338      	adds	r3, #56	; 0x38
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	3304      	adds	r3, #4
 8001b5a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d901      	bls.n	8001b6c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e067      	b.n	8001c3c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	69fa      	ldr	r2, [r7, #28]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d902      	bls.n	8001b88 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	3303      	adds	r3, #3
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001b90:	e026      	b.n	8001be0 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d902      	bls.n	8001bae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3303      	adds	r3, #3
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	68d9      	ldr	r1, [r3, #12]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	6978      	ldr	r0, [r7, #20]
 8001bc4:	f002 fbe0 	bl	8004388 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	441a      	add	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	441a      	add	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	015a      	lsls	r2, r3, #5
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4413      	add	r3, r2
 8001be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d809      	bhi.n	8001c0a <PCD_WriteEmptyTxFifo+0xd6>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	695a      	ldr	r2, [r3, #20]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d203      	bcs.n	8001c0a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1c3      	bne.n	8001b92 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	691a      	ldr	r2, [r3, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d811      	bhi.n	8001c3a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	6939      	ldr	r1, [r7, #16]
 8001c32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c36:	4013      	ands	r3, r2
 8001c38:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	333c      	adds	r3, #60	; 0x3c
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	015a      	lsls	r2, r3, #5
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <PCD_EP_OutXfrComplete_int+0x98>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d124      	bne.n	8001cc4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00a      	beq.n	8001c9a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	015a      	lsls	r2, r3, #5
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c90:	461a      	mov	r2, r3
 8001c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c96:	6093      	str	r3, [r2, #8]
 8001c98:	e01a      	b.n	8001cd0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f003 0320 	and.w	r3, r3, #32
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d008      	beq.n	8001cb6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	015a      	lsls	r2, r3, #5
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4413      	add	r3, r2
 8001cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	2320      	movs	r3, #32
 8001cb4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f006 fb9d 	bl	80083fc <HAL_PCD_DataOutStageCallback>
 8001cc2:	e005      	b.n	8001cd0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	4619      	mov	r1, r3
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f006 fb96 	bl	80083fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	4f54310a 	.word	0x4f54310a

08001ce0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	333c      	adds	r3, #60	; 0x3c
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	015a      	lsls	r2, r3, #5
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <PCD_EP_OutSetupPacket_int+0x64>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d90e      	bls.n	8001d34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d009      	beq.n	8001d34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	015a      	lsls	r2, r3, #5
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f006 fb4f 	bl	80083d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	4f54300a 	.word	0x4f54300a

08001d48 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	70fb      	strb	r3, [r7, #3]
 8001d54:	4613      	mov	r3, r2
 8001d56:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d107      	bne.n	8001d76 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001d66:	883b      	ldrh	r3, [r7, #0]
 8001d68:	0419      	lsls	r1, r3, #16
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28
 8001d74:	e028      	b.n	8001dc8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	0c1b      	lsrs	r3, r3, #16
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	4413      	add	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e00d      	b.n	8001da6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	3340      	adds	r3, #64	; 0x40
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	0c1b      	lsrs	r3, r3, #16
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	3301      	adds	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d3ec      	bcc.n	8001d8a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001db0:	883b      	ldrh	r3, [r7, #0]
 8001db2:	0418      	lsls	r0, r3, #16
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6819      	ldr	r1, [r3, #0]
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	4302      	orrs	r2, r0
 8001dc0:	3340      	adds	r3, #64	; 0x40
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	f043 0303 	orr.w	r3, r3, #3
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40007000 	.word	0x40007000

08001e5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e6a:	d130      	bne.n	8001ece <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e6c:	4b23      	ldr	r3, [pc, #140]	; (8001efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e78:	d038      	beq.n	8001eec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e82:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e8a:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2232      	movs	r2, #50	; 0x32
 8001e90:	fb02 f303 	mul.w	r3, r2, r3
 8001e94:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	0c9b      	lsrs	r3, r3, #18
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ea0:	e002      	b.n	8001ea8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb4:	d102      	bne.n	8001ebc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f2      	bne.n	8001ea2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec8:	d110      	bne.n	8001eec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e00f      	b.n	8001eee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eda:	d007      	beq.n	8001eec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ee4:	4a05      	ldr	r2, [pc, #20]	; (8001efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40007000 	.word	0x40007000
 8001f00:	20000000 	.word	0x20000000
 8001f04:	431bde83 	.word	0x431bde83

08001f08 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f16:	6053      	str	r3, [r2, #4]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40007000 	.word	0x40007000

08001f28 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d102      	bne.n	8001f3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	f000 bc08 	b.w	800274c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f3c:	4b96      	ldr	r3, [pc, #600]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 030c 	and.w	r3, r3, #12
 8001f44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f46:	4b94      	ldr	r3, [pc, #592]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80e4 	beq.w	8002126 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <HAL_RCC_OscConfig+0x4c>
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2b0c      	cmp	r3, #12
 8001f68:	f040 808b 	bne.w	8002082 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	f040 8087 	bne.w	8002082 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f74:	4b88      	ldr	r3, [pc, #544]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_OscConfig+0x64>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e3df      	b.n	800274c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1a      	ldr	r2, [r3, #32]
 8001f90:	4b81      	ldr	r3, [pc, #516]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d004      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x7e>
 8001f9c:	4b7e      	ldr	r3, [pc, #504]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fa4:	e005      	b.n	8001fb2 <HAL_RCC_OscConfig+0x8a>
 8001fa6:	4b7c      	ldr	r3, [pc, #496]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8001fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d223      	bcs.n	8001ffe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fd66 	bl	8002a8c <RCC_SetFlashLatencyFromMSIRange>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e3c0      	b.n	800274c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fca:	4b73      	ldr	r3, [pc, #460]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a72      	ldr	r2, [pc, #456]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8001fd0:	f043 0308 	orr.w	r3, r3, #8
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	4b70      	ldr	r3, [pc, #448]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	496d      	ldr	r1, [pc, #436]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe8:	4b6b      	ldr	r3, [pc, #428]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	4968      	ldr	r1, [pc, #416]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
 8001ffc:	e025      	b.n	800204a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ffe:	4b66      	ldr	r3, [pc, #408]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a65      	ldr	r2, [pc, #404]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8002004:	f043 0308 	orr.w	r3, r3, #8
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	4b63      	ldr	r3, [pc, #396]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4960      	ldr	r1, [pc, #384]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8002018:	4313      	orrs	r3, r2
 800201a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800201c:	4b5e      	ldr	r3, [pc, #376]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	495b      	ldr	r1, [pc, #364]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fd26 	bl	8002a8c <RCC_SetFlashLatencyFromMSIRange>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e380      	b.n	800274c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800204a:	f000 fc87 	bl	800295c <HAL_RCC_GetSysClockFreq>
 800204e:	4602      	mov	r2, r0
 8002050:	4b51      	ldr	r3, [pc, #324]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	4950      	ldr	r1, [pc, #320]	; (800219c <HAL_RCC_OscConfig+0x274>)
 800205c:	5ccb      	ldrb	r3, [r1, r3]
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	fa22 f303 	lsr.w	r3, r2, r3
 8002066:	4a4e      	ldr	r2, [pc, #312]	; (80021a0 <HAL_RCC_OscConfig+0x278>)
 8002068:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800206a:	4b4e      	ldr	r3, [pc, #312]	; (80021a4 <HAL_RCC_OscConfig+0x27c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe f9ee 	bl	8000450 <HAL_InitTick>
 8002074:	4603      	mov	r3, r0
 8002076:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d052      	beq.n	8002124 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	e364      	b.n	800274c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d032      	beq.n	80020f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800208a:	4b43      	ldr	r3, [pc, #268]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a42      	ldr	r2, [pc, #264]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002096:	f7fe fa2b 	bl	80004f0 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800209e:	f7fe fa27 	bl	80004f0 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e34d      	b.n	800274c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020b0:	4b39      	ldr	r3, [pc, #228]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020bc:	4b36      	ldr	r3, [pc, #216]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a35      	ldr	r2, [pc, #212]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 80020c2:	f043 0308 	orr.w	r3, r3, #8
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	4b33      	ldr	r3, [pc, #204]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4930      	ldr	r1, [pc, #192]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020da:	4b2f      	ldr	r3, [pc, #188]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	492b      	ldr	r1, [pc, #172]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	604b      	str	r3, [r1, #4]
 80020ee:	e01a      	b.n	8002126 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020f0:	4b29      	ldr	r3, [pc, #164]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a28      	ldr	r2, [pc, #160]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 80020f6:	f023 0301 	bic.w	r3, r3, #1
 80020fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020fc:	f7fe f9f8 	bl	80004f0 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002104:	f7fe f9f4 	bl	80004f0 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e31a      	b.n	800274c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x1dc>
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002124:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d073      	beq.n	800221a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2b08      	cmp	r3, #8
 8002136:	d005      	beq.n	8002144 <HAL_RCC_OscConfig+0x21c>
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2b0c      	cmp	r3, #12
 800213c:	d10e      	bne.n	800215c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b03      	cmp	r3, #3
 8002142:	d10b      	bne.n	800215c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	4b14      	ldr	r3, [pc, #80]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d063      	beq.n	8002218 <HAL_RCC_OscConfig+0x2f0>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d15f      	bne.n	8002218 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e2f7      	b.n	800274c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002164:	d106      	bne.n	8002174 <HAL_RCC_OscConfig+0x24c>
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e025      	b.n	80021c0 <HAL_RCC_OscConfig+0x298>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800217c:	d114      	bne.n	80021a8 <HAL_RCC_OscConfig+0x280>
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b03      	ldr	r3, [pc, #12]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a02      	ldr	r2, [pc, #8]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e013      	b.n	80021c0 <HAL_RCC_OscConfig+0x298>
 8002198:	40021000 	.word	0x40021000
 800219c:	08008c78 	.word	0x08008c78
 80021a0:	20000000 	.word	0x20000000
 80021a4:	20000004 	.word	0x20000004
 80021a8:	4ba0      	ldr	r3, [pc, #640]	; (800242c <HAL_RCC_OscConfig+0x504>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a9f      	ldr	r2, [pc, #636]	; (800242c <HAL_RCC_OscConfig+0x504>)
 80021ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	4b9d      	ldr	r3, [pc, #628]	; (800242c <HAL_RCC_OscConfig+0x504>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a9c      	ldr	r2, [pc, #624]	; (800242c <HAL_RCC_OscConfig+0x504>)
 80021ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d013      	beq.n	80021f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe f992 	bl	80004f0 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d0:	f7fe f98e 	bl	80004f0 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e2b4      	b.n	800274c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e2:	4b92      	ldr	r3, [pc, #584]	; (800242c <HAL_RCC_OscConfig+0x504>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0x2a8>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7fe f97e 	bl	80004f0 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7fe f97a 	bl	80004f0 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e2a0      	b.n	800274c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800220a:	4b88      	ldr	r3, [pc, #544]	; (800242c <HAL_RCC_OscConfig+0x504>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x2d0>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d060      	beq.n	80022e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2b04      	cmp	r3, #4
 800222a:	d005      	beq.n	8002238 <HAL_RCC_OscConfig+0x310>
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d119      	bne.n	8002266 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d116      	bne.n	8002266 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002238:	4b7c      	ldr	r3, [pc, #496]	; (800242c <HAL_RCC_OscConfig+0x504>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_OscConfig+0x328>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e27d      	b.n	800274c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002250:	4b76      	ldr	r3, [pc, #472]	; (800242c <HAL_RCC_OscConfig+0x504>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	061b      	lsls	r3, r3, #24
 800225e:	4973      	ldr	r1, [pc, #460]	; (800242c <HAL_RCC_OscConfig+0x504>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002264:	e040      	b.n	80022e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d023      	beq.n	80022b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800226e:	4b6f      	ldr	r3, [pc, #444]	; (800242c <HAL_RCC_OscConfig+0x504>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6e      	ldr	r2, [pc, #440]	; (800242c <HAL_RCC_OscConfig+0x504>)
 8002274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7fe f939 	bl	80004f0 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002282:	f7fe f935 	bl	80004f0 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e25b      	b.n	800274c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002294:	4b65      	ldr	r3, [pc, #404]	; (800242c <HAL_RCC_OscConfig+0x504>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a0:	4b62      	ldr	r3, [pc, #392]	; (800242c <HAL_RCC_OscConfig+0x504>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	061b      	lsls	r3, r3, #24
 80022ae:	495f      	ldr	r1, [pc, #380]	; (800242c <HAL_RCC_OscConfig+0x504>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
 80022b4:	e018      	b.n	80022e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b6:	4b5d      	ldr	r3, [pc, #372]	; (800242c <HAL_RCC_OscConfig+0x504>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a5c      	ldr	r2, [pc, #368]	; (800242c <HAL_RCC_OscConfig+0x504>)
 80022bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c2:	f7fe f915 	bl	80004f0 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ca:	f7fe f911 	bl	80004f0 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e237      	b.n	800274c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022dc:	4b53      	ldr	r3, [pc, #332]	; (800242c <HAL_RCC_OscConfig+0x504>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f0      	bne.n	80022ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d03c      	beq.n	800236e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d01c      	beq.n	8002336 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fc:	4b4b      	ldr	r3, [pc, #300]	; (800242c <HAL_RCC_OscConfig+0x504>)
 80022fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002302:	4a4a      	ldr	r2, [pc, #296]	; (800242c <HAL_RCC_OscConfig+0x504>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230c:	f7fe f8f0 	bl	80004f0 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002314:	f7fe f8ec 	bl	80004f0 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e212      	b.n	800274c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002326:	4b41      	ldr	r3, [pc, #260]	; (800242c <HAL_RCC_OscConfig+0x504>)
 8002328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0ef      	beq.n	8002314 <HAL_RCC_OscConfig+0x3ec>
 8002334:	e01b      	b.n	800236e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002336:	4b3d      	ldr	r3, [pc, #244]	; (800242c <HAL_RCC_OscConfig+0x504>)
 8002338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800233c:	4a3b      	ldr	r2, [pc, #236]	; (800242c <HAL_RCC_OscConfig+0x504>)
 800233e:	f023 0301 	bic.w	r3, r3, #1
 8002342:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002346:	f7fe f8d3 	bl	80004f0 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234e:	f7fe f8cf 	bl	80004f0 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e1f5      	b.n	800274c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002360:	4b32      	ldr	r3, [pc, #200]	; (800242c <HAL_RCC_OscConfig+0x504>)
 8002362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1ef      	bne.n	800234e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 80a6 	beq.w	80024c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237c:	2300      	movs	r3, #0
 800237e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002380:	4b2a      	ldr	r3, [pc, #168]	; (800242c <HAL_RCC_OscConfig+0x504>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10d      	bne.n	80023a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238c:	4b27      	ldr	r3, [pc, #156]	; (800242c <HAL_RCC_OscConfig+0x504>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	4a26      	ldr	r2, [pc, #152]	; (800242c <HAL_RCC_OscConfig+0x504>)
 8002392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002396:	6593      	str	r3, [r2, #88]	; 0x58
 8002398:	4b24      	ldr	r3, [pc, #144]	; (800242c <HAL_RCC_OscConfig+0x504>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a4:	2301      	movs	r3, #1
 80023a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a8:	4b21      	ldr	r3, [pc, #132]	; (8002430 <HAL_RCC_OscConfig+0x508>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d118      	bne.n	80023e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023b4:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <HAL_RCC_OscConfig+0x508>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a1d      	ldr	r2, [pc, #116]	; (8002430 <HAL_RCC_OscConfig+0x508>)
 80023ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c0:	f7fe f896 	bl	80004f0 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c8:	f7fe f892 	bl	80004f0 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e1b8      	b.n	800274c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_RCC_OscConfig+0x508>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d108      	bne.n	8002400 <HAL_RCC_OscConfig+0x4d8>
 80023ee:	4b0f      	ldr	r3, [pc, #60]	; (800242c <HAL_RCC_OscConfig+0x504>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f4:	4a0d      	ldr	r2, [pc, #52]	; (800242c <HAL_RCC_OscConfig+0x504>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023fe:	e029      	b.n	8002454 <HAL_RCC_OscConfig+0x52c>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b05      	cmp	r3, #5
 8002406:	d115      	bne.n	8002434 <HAL_RCC_OscConfig+0x50c>
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <HAL_RCC_OscConfig+0x504>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	4a07      	ldr	r2, [pc, #28]	; (800242c <HAL_RCC_OscConfig+0x504>)
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002418:	4b04      	ldr	r3, [pc, #16]	; (800242c <HAL_RCC_OscConfig+0x504>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	4a03      	ldr	r2, [pc, #12]	; (800242c <HAL_RCC_OscConfig+0x504>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002428:	e014      	b.n	8002454 <HAL_RCC_OscConfig+0x52c>
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
 8002430:	40007000 	.word	0x40007000
 8002434:	4b9d      	ldr	r3, [pc, #628]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243a:	4a9c      	ldr	r2, [pc, #624]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002444:	4b99      	ldr	r3, [pc, #612]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244a:	4a98      	ldr	r2, [pc, #608]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 800244c:	f023 0304 	bic.w	r3, r3, #4
 8002450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d016      	beq.n	800248a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245c:	f7fe f848 	bl	80004f0 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002462:	e00a      	b.n	800247a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002464:	f7fe f844 	bl	80004f0 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e168      	b.n	800274c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800247a:	4b8c      	ldr	r3, [pc, #560]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0ed      	beq.n	8002464 <HAL_RCC_OscConfig+0x53c>
 8002488:	e015      	b.n	80024b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248a:	f7fe f831 	bl	80004f0 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7fe f82d 	bl	80004f0 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e151      	b.n	800274c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024a8:	4b80      	ldr	r3, [pc, #512]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 80024aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1ed      	bne.n	8002492 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b6:	7ffb      	ldrb	r3, [r7, #31]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d105      	bne.n	80024c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024bc:	4b7b      	ldr	r3, [pc, #492]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 80024be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c0:	4a7a      	ldr	r2, [pc, #488]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 80024c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d03c      	beq.n	800254e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01c      	beq.n	8002516 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024dc:	4b73      	ldr	r3, [pc, #460]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 80024de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024e2:	4a72      	ldr	r2, [pc, #456]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ec:	f7fe f800 	bl	80004f0 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024f4:	f7fd fffc 	bl	80004f0 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e122      	b.n	800274c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002506:	4b69      	ldr	r3, [pc, #420]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 8002508:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0ef      	beq.n	80024f4 <HAL_RCC_OscConfig+0x5cc>
 8002514:	e01b      	b.n	800254e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002516:	4b65      	ldr	r3, [pc, #404]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 8002518:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800251c:	4a63      	ldr	r2, [pc, #396]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 800251e:	f023 0301 	bic.w	r3, r3, #1
 8002522:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002526:	f7fd ffe3 	bl	80004f0 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800252e:	f7fd ffdf 	bl	80004f0 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e105      	b.n	800274c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002540:	4b5a      	ldr	r3, [pc, #360]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 8002542:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1ef      	bne.n	800252e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80f9 	beq.w	800274a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	2b02      	cmp	r3, #2
 800255e:	f040 80cf 	bne.w	8002700 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002562:	4b52      	ldr	r3, [pc, #328]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f003 0203 	and.w	r2, r3, #3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	429a      	cmp	r2, r3
 8002574:	d12c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	3b01      	subs	r3, #1
 8002582:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002584:	429a      	cmp	r2, r3
 8002586:	d123      	bne.n	80025d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002592:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002594:	429a      	cmp	r2, r3
 8002596:	d11b      	bne.n	80025d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d113      	bne.n	80025d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	085b      	lsrs	r3, r3, #1
 80025b4:	3b01      	subs	r3, #1
 80025b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d109      	bne.n	80025d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	085b      	lsrs	r3, r3, #1
 80025c8:	3b01      	subs	r3, #1
 80025ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d071      	beq.n	80026b4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	d068      	beq.n	80026a8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025d6:	4b35      	ldr	r3, [pc, #212]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d105      	bne.n	80025ee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025e2:	4b32      	ldr	r3, [pc, #200]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0ac      	b.n	800274c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025f2:	4b2e      	ldr	r3, [pc, #184]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a2d      	ldr	r2, [pc, #180]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 80025f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025fe:	f7fd ff77 	bl	80004f0 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002606:	f7fd ff73 	bl	80004f0 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e099      	b.n	800274c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002618:	4b24      	ldr	r3, [pc, #144]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f0      	bne.n	8002606 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002624:	4b21      	ldr	r3, [pc, #132]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <HAL_RCC_OscConfig+0x788>)
 800262a:	4013      	ands	r3, r2
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002634:	3a01      	subs	r2, #1
 8002636:	0112      	lsls	r2, r2, #4
 8002638:	4311      	orrs	r1, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800263e:	0212      	lsls	r2, r2, #8
 8002640:	4311      	orrs	r1, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002646:	0852      	lsrs	r2, r2, #1
 8002648:	3a01      	subs	r2, #1
 800264a:	0552      	lsls	r2, r2, #21
 800264c:	4311      	orrs	r1, r2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002652:	0852      	lsrs	r2, r2, #1
 8002654:	3a01      	subs	r2, #1
 8002656:	0652      	lsls	r2, r2, #25
 8002658:	4311      	orrs	r1, r2
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800265e:	06d2      	lsls	r2, r2, #27
 8002660:	430a      	orrs	r2, r1
 8002662:	4912      	ldr	r1, [pc, #72]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 8002664:	4313      	orrs	r3, r2
 8002666:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002668:	4b10      	ldr	r3, [pc, #64]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 800266e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002672:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002674:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4a0c      	ldr	r2, [pc, #48]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 800267a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800267e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002680:	f7fd ff36 	bl	80004f0 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7fd ff32 	bl	80004f0 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e058      	b.n	800274c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269a:	4b04      	ldr	r3, [pc, #16]	; (80026ac <HAL_RCC_OscConfig+0x784>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026a6:	e050      	b.n	800274a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e04f      	b.n	800274c <HAL_RCC_OscConfig+0x824>
 80026ac:	40021000 	.word	0x40021000
 80026b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCC_OscConfig+0x82c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d144      	bne.n	800274a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026c0:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_RCC_OscConfig+0x82c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a23      	ldr	r2, [pc, #140]	; (8002754 <HAL_RCC_OscConfig+0x82c>)
 80026c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026cc:	4b21      	ldr	r3, [pc, #132]	; (8002754 <HAL_RCC_OscConfig+0x82c>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a20      	ldr	r2, [pc, #128]	; (8002754 <HAL_RCC_OscConfig+0x82c>)
 80026d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026d8:	f7fd ff0a 	bl	80004f0 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7fd ff06 	bl	80004f0 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e02c      	b.n	800274c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f2:	4b18      	ldr	r3, [pc, #96]	; (8002754 <HAL_RCC_OscConfig+0x82c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x7b8>
 80026fe:	e024      	b.n	800274a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2b0c      	cmp	r3, #12
 8002704:	d01f      	beq.n	8002746 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <HAL_RCC_OscConfig+0x82c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a12      	ldr	r2, [pc, #72]	; (8002754 <HAL_RCC_OscConfig+0x82c>)
 800270c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7fd feed 	bl	80004f0 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271a:	f7fd fee9 	bl	80004f0 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e00f      	b.n	800274c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCC_OscConfig+0x82c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f0      	bne.n	800271a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_OscConfig+0x82c>)
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	4905      	ldr	r1, [pc, #20]	; (8002754 <HAL_RCC_OscConfig+0x82c>)
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_RCC_OscConfig+0x830>)
 8002740:	4013      	ands	r3, r2
 8002742:	60cb      	str	r3, [r1, #12]
 8002744:	e001      	b.n	800274a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3720      	adds	r7, #32
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40021000 	.word	0x40021000
 8002758:	feeefffc 	.word	0xfeeefffc

0800275c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0e7      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002770:	4b75      	ldr	r3, [pc, #468]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d910      	bls.n	80027a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b72      	ldr	r3, [pc, #456]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 0207 	bic.w	r2, r3, #7
 8002786:	4970      	ldr	r1, [pc, #448]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800278e:	4b6e      	ldr	r3, [pc, #440]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0cf      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d010      	beq.n	80027ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	4b66      	ldr	r3, [pc, #408]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d908      	bls.n	80027ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027bc:	4b63      	ldr	r3, [pc, #396]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4960      	ldr	r1, [pc, #384]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d04c      	beq.n	8002874 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e2:	4b5a      	ldr	r3, [pc, #360]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d121      	bne.n	8002832 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0a6      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d107      	bne.n	800280a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027fa:	4b54      	ldr	r3, [pc, #336]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d115      	bne.n	8002832 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e09a      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d107      	bne.n	8002822 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002812:	4b4e      	ldr	r3, [pc, #312]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e08e      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002822:	4b4a      	ldr	r3, [pc, #296]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e086      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002832:	4b46      	ldr	r3, [pc, #280]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f023 0203 	bic.w	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	4943      	ldr	r1, [pc, #268]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002840:	4313      	orrs	r3, r2
 8002842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002844:	f7fd fe54 	bl	80004f0 <HAL_GetTick>
 8002848:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284a:	e00a      	b.n	8002862 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800284c:	f7fd fe50 	bl	80004f0 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f241 3288 	movw	r2, #5000	; 0x1388
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e06e      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	4b3a      	ldr	r3, [pc, #232]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 020c 	and.w	r2, r3, #12
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	429a      	cmp	r2, r3
 8002872:	d1eb      	bne.n	800284c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d010      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	4b31      	ldr	r3, [pc, #196]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800288c:	429a      	cmp	r2, r3
 800288e:	d208      	bcs.n	80028a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002890:	4b2e      	ldr	r3, [pc, #184]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	492b      	ldr	r1, [pc, #172]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028a2:	4b29      	ldr	r3, [pc, #164]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d210      	bcs.n	80028d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b0:	4b25      	ldr	r3, [pc, #148]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f023 0207 	bic.w	r2, r3, #7
 80028b8:	4923      	ldr	r1, [pc, #140]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	4313      	orrs	r3, r2
 80028be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c0:	4b21      	ldr	r3, [pc, #132]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d001      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e036      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028de:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	4918      	ldr	r1, [pc, #96]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d009      	beq.n	8002910 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028fc:	4b13      	ldr	r3, [pc, #76]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4910      	ldr	r1, [pc, #64]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 800290c:	4313      	orrs	r3, r2
 800290e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002910:	f000 f824 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8002914:	4602      	mov	r2, r0
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	490b      	ldr	r1, [pc, #44]	; (8002950 <HAL_RCC_ClockConfig+0x1f4>)
 8002922:	5ccb      	ldrb	r3, [r1, r3]
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
 800292c:	4a09      	ldr	r2, [pc, #36]	; (8002954 <HAL_RCC_ClockConfig+0x1f8>)
 800292e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002930:	4b09      	ldr	r3, [pc, #36]	; (8002958 <HAL_RCC_ClockConfig+0x1fc>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7fd fd8b 	bl	8000450 <HAL_InitTick>
 800293a:	4603      	mov	r3, r0
 800293c:	72fb      	strb	r3, [r7, #11]

  return status;
 800293e:	7afb      	ldrb	r3, [r7, #11]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40022000 	.word	0x40022000
 800294c:	40021000 	.word	0x40021000
 8002950:	08008c78 	.word	0x08008c78
 8002954:	20000000 	.word	0x20000000
 8002958:	20000004 	.word	0x20000004

0800295c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	; 0x24
 8002960:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800296a:	4b3e      	ldr	r3, [pc, #248]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002974:	4b3b      	ldr	r3, [pc, #236]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0x34>
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d121      	bne.n	80029ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d11e      	bne.n	80029ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002990:	4b34      	ldr	r3, [pc, #208]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d107      	bne.n	80029ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800299c:	4b31      	ldr	r3, [pc, #196]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 800299e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	e005      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029ac:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029b8:	4a2b      	ldr	r2, [pc, #172]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10d      	bne.n	80029e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029cc:	e00a      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d102      	bne.n	80029da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x110>)
 80029d6:	61bb      	str	r3, [r7, #24]
 80029d8:	e004      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029e0:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x114>)
 80029e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2b0c      	cmp	r3, #12
 80029e8:	d134      	bne.n	8002a54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029ea:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d003      	beq.n	8002a02 <HAL_RCC_GetSysClockFreq+0xa6>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d003      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0xac>
 8002a00:	e005      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a02:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x110>)
 8002a04:	617b      	str	r3, [r7, #20]
      break;
 8002a06:	e005      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a0a:	617b      	str	r3, [r7, #20]
      break;
 8002a0c:	e002      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	617b      	str	r3, [r7, #20]
      break;
 8002a12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	3301      	adds	r3, #1
 8002a20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	fb03 f202 	mul.w	r2, r3, r2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	0e5b      	lsrs	r3, r3, #25
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	3301      	adds	r3, #1
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a54:	69bb      	ldr	r3, [r7, #24]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3724      	adds	r7, #36	; 0x24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000
 8002a68:	08008c88 	.word	0x08008c88
 8002a6c:	00f42400 	.word	0x00f42400
 8002a70:	007a1200 	.word	0x007a1200

08002a74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000000 	.word	0x20000000

08002a8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a94:	2300      	movs	r3, #0
 8002a96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a98:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002aa4:	f7ff f9cc 	bl	8001e40 <HAL_PWREx_GetVoltageRange>
 8002aa8:	6178      	str	r0, [r7, #20]
 8002aaa:	e014      	b.n	8002ad6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aac:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	4a24      	ldr	r2, [pc, #144]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab8:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ac4:	f7ff f9bc 	bl	8001e40 <HAL_PWREx_GetVoltageRange>
 8002ac8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002aca:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ace:	4a1d      	ldr	r2, [pc, #116]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002adc:	d10b      	bne.n	8002af6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b80      	cmp	r3, #128	; 0x80
 8002ae2:	d919      	bls.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2ba0      	cmp	r3, #160	; 0xa0
 8002ae8:	d902      	bls.n	8002af0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002aea:	2302      	movs	r3, #2
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	e013      	b.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002af0:	2301      	movs	r3, #1
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	e010      	b.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b80      	cmp	r3, #128	; 0x80
 8002afa:	d902      	bls.n	8002b02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002afc:	2303      	movs	r3, #3
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	e00a      	b.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b80      	cmp	r3, #128	; 0x80
 8002b06:	d102      	bne.n	8002b0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b08:	2302      	movs	r3, #2
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	e004      	b.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b70      	cmp	r3, #112	; 0x70
 8002b12:	d101      	bne.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b14:	2301      	movs	r3, #1
 8002b16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f023 0207 	bic.w	r2, r3, #7
 8002b20:	4909      	ldr	r1, [pc, #36]	; (8002b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b28:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d001      	beq.n	8002b3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40022000 	.word	0x40022000

08002b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b54:	2300      	movs	r3, #0
 8002b56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b58:	2300      	movs	r3, #0
 8002b5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d041      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b70:	d02a      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b72:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b76:	d824      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b7c:	d008      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b82:	d81e      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b8c:	d010      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b8e:	e018      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b90:	4b86      	ldr	r3, [pc, #536]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4a85      	ldr	r2, [pc, #532]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b9c:	e015      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 facd 	bl	8003144 <RCCEx_PLLSAI1_Config>
 8002baa:	4603      	mov	r3, r0
 8002bac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bae:	e00c      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3320      	adds	r3, #32
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fbb6 	bl	8003328 <RCCEx_PLLSAI2_Config>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bc0:	e003      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	74fb      	strb	r3, [r7, #19]
      break;
 8002bc6:	e000      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bca:	7cfb      	ldrb	r3, [r7, #19]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10b      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bd0:	4b76      	ldr	r3, [pc, #472]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bde:	4973      	ldr	r1, [pc, #460]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002be6:	e001      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d041      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bfc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c00:	d02a      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c06:	d824      	bhi.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c0c:	d008      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c12:	d81e      	bhi.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c1c:	d010      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c1e:	e018      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c20:	4b62      	ldr	r3, [pc, #392]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a61      	ldr	r2, [pc, #388]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c2c:	e015      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3304      	adds	r3, #4
 8002c32:	2100      	movs	r1, #0
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 fa85 	bl	8003144 <RCCEx_PLLSAI1_Config>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c3e:	e00c      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3320      	adds	r3, #32
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fb6e 	bl	8003328 <RCCEx_PLLSAI2_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c50:	e003      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	74fb      	strb	r3, [r7, #19]
      break;
 8002c56:	e000      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c5a:	7cfb      	ldrb	r3, [r7, #19]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10b      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c60:	4b52      	ldr	r3, [pc, #328]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c6e:	494f      	ldr	r1, [pc, #316]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c76:	e001      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c78:	7cfb      	ldrb	r3, [r7, #19]
 8002c7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80a0 	beq.w	8002dca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c8e:	4b47      	ldr	r3, [pc, #284]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca4:	4b41      	ldr	r3, [pc, #260]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca8:	4a40      	ldr	r2, [pc, #256]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cae:	6593      	str	r3, [r2, #88]	; 0x58
 8002cb0:	4b3e      	ldr	r3, [pc, #248]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cc0:	4b3b      	ldr	r3, [pc, #236]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a3a      	ldr	r2, [pc, #232]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ccc:	f7fd fc10 	bl	80004f0 <HAL_GetTick>
 8002cd0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cd2:	e009      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd4:	f7fd fc0c 	bl	80004f0 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d902      	bls.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	74fb      	strb	r3, [r7, #19]
        break;
 8002ce6:	e005      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ce8:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0ef      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d15c      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cfa:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01f      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d019      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d18:	4b24      	ldr	r3, [pc, #144]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d24:	4b21      	ldr	r3, [pc, #132]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2a:	4a20      	ldr	r2, [pc, #128]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d34:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3a:	4a1c      	ldr	r2, [pc, #112]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d44:	4a19      	ldr	r2, [pc, #100]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d016      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7fd fbcb 	bl	80004f0 <HAL_GetTick>
 8002d5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d5c:	e00b      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5e:	f7fd fbc7 	bl	80004f0 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d902      	bls.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	74fb      	strb	r3, [r7, #19]
            break;
 8002d74:	e006      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d76:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0ec      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d84:	7cfb      	ldrb	r3, [r7, #19]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9a:	4904      	ldr	r1, [pc, #16]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002da2:	e009      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002da4:	7cfb      	ldrb	r3, [r7, #19]
 8002da6:	74bb      	strb	r3, [r7, #18]
 8002da8:	e006      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db4:	7cfb      	ldrb	r3, [r7, #19]
 8002db6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db8:	7c7b      	ldrb	r3, [r7, #17]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d105      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dbe:	4ba6      	ldr	r3, [pc, #664]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc2:	4aa5      	ldr	r2, [pc, #660]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dd6:	4ba0      	ldr	r3, [pc, #640]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ddc:	f023 0203 	bic.w	r2, r3, #3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de4:	499c      	ldr	r1, [pc, #624]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002df8:	4b97      	ldr	r3, [pc, #604]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	f023 020c 	bic.w	r2, r3, #12
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e06:	4994      	ldr	r1, [pc, #592]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e1a:	4b8f      	ldr	r3, [pc, #572]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	498b      	ldr	r1, [pc, #556]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e3c:	4b86      	ldr	r3, [pc, #536]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	4983      	ldr	r1, [pc, #524]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e5e:	4b7e      	ldr	r3, [pc, #504]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6c:	497a      	ldr	r1, [pc, #488]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e80:	4b75      	ldr	r3, [pc, #468]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8e:	4972      	ldr	r1, [pc, #456]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ea2:	4b6d      	ldr	r3, [pc, #436]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb0:	4969      	ldr	r1, [pc, #420]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ec4:	4b64      	ldr	r3, [pc, #400]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ed2:	4961      	ldr	r1, [pc, #388]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ee6:	4b5c      	ldr	r3, [pc, #368]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef4:	4958      	ldr	r1, [pc, #352]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f08:	4b53      	ldr	r3, [pc, #332]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f16:	4950      	ldr	r1, [pc, #320]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f2a:	4b4b      	ldr	r3, [pc, #300]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	4947      	ldr	r1, [pc, #284]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f4c:	4b42      	ldr	r3, [pc, #264]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f52:	f023 0203 	bic.w	r2, r3, #3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5a:	493f      	ldr	r1, [pc, #252]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d028      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f6e:	4b3a      	ldr	r3, [pc, #232]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	4936      	ldr	r1, [pc, #216]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f8c:	d106      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f8e:	4b32      	ldr	r3, [pc, #200]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	4a31      	ldr	r2, [pc, #196]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f98:	60d3      	str	r3, [r2, #12]
 8002f9a:	e011      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	2101      	movs	r1, #1
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 f8c9 	bl	8003144 <RCCEx_PLLSAI1_Config>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fb6:	7cfb      	ldrb	r3, [r7, #19]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d028      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fcc:	4b22      	ldr	r3, [pc, #136]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fda:	491f      	ldr	r1, [pc, #124]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fea:	d106      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fec:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4a19      	ldr	r2, [pc, #100]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ff2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ff6:	60d3      	str	r3, [r2, #12]
 8002ff8:	e011      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003002:	d10c      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3304      	adds	r3, #4
 8003008:	2101      	movs	r1, #1
 800300a:	4618      	mov	r0, r3
 800300c:	f000 f89a 	bl	8003144 <RCCEx_PLLSAI1_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003014:	7cfb      	ldrb	r3, [r7, #19]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800301a:	7cfb      	ldrb	r3, [r7, #19]
 800301c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d02a      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003038:	4907      	ldr	r1, [pc, #28]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003044:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003048:	d108      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800304a:	4b03      	ldr	r3, [pc, #12]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	4a02      	ldr	r2, [pc, #8]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003050:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003054:	60d3      	str	r3, [r2, #12]
 8003056:	e013      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003058:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003060:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003064:	d10c      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3304      	adds	r3, #4
 800306a:	2101      	movs	r1, #1
 800306c:	4618      	mov	r0, r3
 800306e:	f000 f869 	bl	8003144 <RCCEx_PLLSAI1_Config>
 8003072:	4603      	mov	r3, r0
 8003074:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003076:	7cfb      	ldrb	r3, [r7, #19]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800307c:	7cfb      	ldrb	r3, [r7, #19]
 800307e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d02f      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800308c:	4b2c      	ldr	r3, [pc, #176]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800309a:	4929      	ldr	r1, [pc, #164]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030aa:	d10d      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3304      	adds	r3, #4
 80030b0:	2102      	movs	r1, #2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 f846 	bl	8003144 <RCCEx_PLLSAI1_Config>
 80030b8:	4603      	mov	r3, r0
 80030ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d014      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80030c2:	7cfb      	ldrb	r3, [r7, #19]
 80030c4:	74bb      	strb	r3, [r7, #18]
 80030c6:	e011      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030d0:	d10c      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3320      	adds	r3, #32
 80030d6:	2102      	movs	r1, #2
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 f925 	bl	8003328 <RCCEx_PLLSAI2_Config>
 80030de:	4603      	mov	r3, r0
 80030e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030e2:	7cfb      	ldrb	r3, [r7, #19]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80030e8:	7cfb      	ldrb	r3, [r7, #19]
 80030ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00b      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030f8:	4b11      	ldr	r3, [pc, #68]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003108:	490d      	ldr	r1, [pc, #52]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00b      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800311c:	4b08      	ldr	r3, [pc, #32]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003122:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800312c:	4904      	ldr	r1, [pc, #16]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003134:	7cbb      	ldrb	r3, [r7, #18]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000

08003144 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003152:	4b74      	ldr	r3, [pc, #464]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d018      	beq.n	8003190 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800315e:	4b71      	ldr	r3, [pc, #452]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0203 	and.w	r2, r3, #3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d10d      	bne.n	800318a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
       ||
 8003172:	2b00      	cmp	r3, #0
 8003174:	d009      	beq.n	800318a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003176:	4b6b      	ldr	r3, [pc, #428]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
       ||
 8003186:	429a      	cmp	r2, r3
 8003188:	d047      	beq.n	800321a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
 800318e:	e044      	b.n	800321a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d018      	beq.n	80031ca <RCCEx_PLLSAI1_Config+0x86>
 8003198:	2b03      	cmp	r3, #3
 800319a:	d825      	bhi.n	80031e8 <RCCEx_PLLSAI1_Config+0xa4>
 800319c:	2b01      	cmp	r3, #1
 800319e:	d002      	beq.n	80031a6 <RCCEx_PLLSAI1_Config+0x62>
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d009      	beq.n	80031b8 <RCCEx_PLLSAI1_Config+0x74>
 80031a4:	e020      	b.n	80031e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031a6:	4b5f      	ldr	r3, [pc, #380]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d11d      	bne.n	80031ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b6:	e01a      	b.n	80031ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031b8:	4b5a      	ldr	r3, [pc, #360]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d116      	bne.n	80031f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c8:	e013      	b.n	80031f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031ca:	4b56      	ldr	r3, [pc, #344]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10f      	bne.n	80031f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031d6:	4b53      	ldr	r3, [pc, #332]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031e6:	e006      	b.n	80031f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      break;
 80031ec:	e004      	b.n	80031f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031ee:	bf00      	nop
 80031f0:	e002      	b.n	80031f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031f2:	bf00      	nop
 80031f4:	e000      	b.n	80031f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10d      	bne.n	800321a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031fe:	4b49      	ldr	r3, [pc, #292]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6819      	ldr	r1, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	3b01      	subs	r3, #1
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	430b      	orrs	r3, r1
 8003214:	4943      	ldr	r1, [pc, #268]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003216:	4313      	orrs	r3, r2
 8003218:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d17c      	bne.n	800331a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003220:	4b40      	ldr	r3, [pc, #256]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a3f      	ldr	r2, [pc, #252]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003226:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800322a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800322c:	f7fd f960 	bl	80004f0 <HAL_GetTick>
 8003230:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003232:	e009      	b.n	8003248 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003234:	f7fd f95c 	bl	80004f0 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d902      	bls.n	8003248 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	73fb      	strb	r3, [r7, #15]
        break;
 8003246:	e005      	b.n	8003254 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003248:	4b36      	ldr	r3, [pc, #216]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ef      	bne.n	8003234 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d15f      	bne.n	800331a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d110      	bne.n	8003282 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003260:	4b30      	ldr	r3, [pc, #192]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003268:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6892      	ldr	r2, [r2, #8]
 8003270:	0211      	lsls	r1, r2, #8
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68d2      	ldr	r2, [r2, #12]
 8003276:	06d2      	lsls	r2, r2, #27
 8003278:	430a      	orrs	r2, r1
 800327a:	492a      	ldr	r1, [pc, #168]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 800327c:	4313      	orrs	r3, r2
 800327e:	610b      	str	r3, [r1, #16]
 8003280:	e027      	b.n	80032d2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d112      	bne.n	80032ae <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003288:	4b26      	ldr	r3, [pc, #152]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003290:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6892      	ldr	r2, [r2, #8]
 8003298:	0211      	lsls	r1, r2, #8
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6912      	ldr	r2, [r2, #16]
 800329e:	0852      	lsrs	r2, r2, #1
 80032a0:	3a01      	subs	r2, #1
 80032a2:	0552      	lsls	r2, r2, #21
 80032a4:	430a      	orrs	r2, r1
 80032a6:	491f      	ldr	r1, [pc, #124]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	610b      	str	r3, [r1, #16]
 80032ac:	e011      	b.n	80032d2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032ae:	4b1d      	ldr	r3, [pc, #116]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6892      	ldr	r2, [r2, #8]
 80032be:	0211      	lsls	r1, r2, #8
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6952      	ldr	r2, [r2, #20]
 80032c4:	0852      	lsrs	r2, r2, #1
 80032c6:	3a01      	subs	r2, #1
 80032c8:	0652      	lsls	r2, r2, #25
 80032ca:	430a      	orrs	r2, r1
 80032cc:	4915      	ldr	r1, [pc, #84]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032d2:	4b14      	ldr	r3, [pc, #80]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a13      	ldr	r2, [pc, #76]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032dc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032de:	f7fd f907 	bl	80004f0 <HAL_GetTick>
 80032e2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032e4:	e009      	b.n	80032fa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032e6:	f7fd f903 	bl	80004f0 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d902      	bls.n	80032fa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	73fb      	strb	r3, [r7, #15]
          break;
 80032f8:	e005      	b.n	8003306 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032fa:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0ef      	beq.n	80032e6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d106      	bne.n	800331a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	4903      	ldr	r1, [pc, #12]	; (8003324 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003316:	4313      	orrs	r3, r2
 8003318:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800331a:	7bfb      	ldrb	r3, [r7, #15]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40021000 	.word	0x40021000

08003328 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003336:	4b69      	ldr	r3, [pc, #420]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d018      	beq.n	8003374 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003342:	4b66      	ldr	r3, [pc, #408]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f003 0203 	and.w	r2, r3, #3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d10d      	bne.n	800336e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
       ||
 8003356:	2b00      	cmp	r3, #0
 8003358:	d009      	beq.n	800336e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800335a:	4b60      	ldr	r3, [pc, #384]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
       ||
 800336a:	429a      	cmp	r2, r3
 800336c:	d047      	beq.n	80033fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
 8003372:	e044      	b.n	80033fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b03      	cmp	r3, #3
 800337a:	d018      	beq.n	80033ae <RCCEx_PLLSAI2_Config+0x86>
 800337c:	2b03      	cmp	r3, #3
 800337e:	d825      	bhi.n	80033cc <RCCEx_PLLSAI2_Config+0xa4>
 8003380:	2b01      	cmp	r3, #1
 8003382:	d002      	beq.n	800338a <RCCEx_PLLSAI2_Config+0x62>
 8003384:	2b02      	cmp	r3, #2
 8003386:	d009      	beq.n	800339c <RCCEx_PLLSAI2_Config+0x74>
 8003388:	e020      	b.n	80033cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800338a:	4b54      	ldr	r3, [pc, #336]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d11d      	bne.n	80033d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800339a:	e01a      	b.n	80033d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800339c:	4b4f      	ldr	r3, [pc, #316]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d116      	bne.n	80033d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ac:	e013      	b.n	80033d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033ae:	4b4b      	ldr	r3, [pc, #300]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033ba:	4b48      	ldr	r3, [pc, #288]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033ca:	e006      	b.n	80033da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	73fb      	strb	r3, [r7, #15]
      break;
 80033d0:	e004      	b.n	80033dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033d2:	bf00      	nop
 80033d4:	e002      	b.n	80033dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033d6:	bf00      	nop
 80033d8:	e000      	b.n	80033dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033da:	bf00      	nop
    }

    if(status == HAL_OK)
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10d      	bne.n	80033fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033e2:	4b3e      	ldr	r3, [pc, #248]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6819      	ldr	r1, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	430b      	orrs	r3, r1
 80033f8:	4938      	ldr	r1, [pc, #224]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d166      	bne.n	80034d2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003404:	4b35      	ldr	r3, [pc, #212]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a34      	ldr	r2, [pc, #208]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 800340a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800340e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003410:	f7fd f86e 	bl	80004f0 <HAL_GetTick>
 8003414:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003416:	e009      	b.n	800342c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003418:	f7fd f86a 	bl	80004f0 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d902      	bls.n	800342c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	73fb      	strb	r3, [r7, #15]
        break;
 800342a:	e005      	b.n	8003438 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800342c:	4b2b      	ldr	r3, [pc, #172]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1ef      	bne.n	8003418 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d149      	bne.n	80034d2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d110      	bne.n	8003466 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003444:	4b25      	ldr	r3, [pc, #148]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800344c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6892      	ldr	r2, [r2, #8]
 8003454:	0211      	lsls	r1, r2, #8
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	68d2      	ldr	r2, [r2, #12]
 800345a:	06d2      	lsls	r2, r2, #27
 800345c:	430a      	orrs	r2, r1
 800345e:	491f      	ldr	r1, [pc, #124]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 8003460:	4313      	orrs	r3, r2
 8003462:	614b      	str	r3, [r1, #20]
 8003464:	e011      	b.n	800348a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003466:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800346e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6892      	ldr	r2, [r2, #8]
 8003476:	0211      	lsls	r1, r2, #8
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6912      	ldr	r2, [r2, #16]
 800347c:	0852      	lsrs	r2, r2, #1
 800347e:	3a01      	subs	r2, #1
 8003480:	0652      	lsls	r2, r2, #25
 8003482:	430a      	orrs	r2, r1
 8003484:	4915      	ldr	r1, [pc, #84]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 8003486:	4313      	orrs	r3, r2
 8003488:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800348a:	4b14      	ldr	r3, [pc, #80]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a13      	ldr	r2, [pc, #76]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 8003490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003494:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003496:	f7fd f82b 	bl	80004f0 <HAL_GetTick>
 800349a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800349c:	e009      	b.n	80034b2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800349e:	f7fd f827 	bl	80004f0 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d902      	bls.n	80034b2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	73fb      	strb	r3, [r7, #15]
          break;
 80034b0:	e005      	b.n	80034be <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0ef      	beq.n	800349e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d106      	bne.n	80034d2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80034c4:	4b05      	ldr	r3, [pc, #20]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	4903      	ldr	r1, [pc, #12]	; (80034dc <RCCEx_PLLSAI2_Config+0x1b4>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000

080034e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034e0:	b084      	sub	sp, #16
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	f107 001c 	add.w	r0, r7, #28
 80034ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f001 fa1c 	bl	800493c <USB_CoreReset>
 8003504:	4603      	mov	r3, r0
 8003506:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	639a      	str	r2, [r3, #56]	; 0x38
 800351a:	e005      	b.n	8003528 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003528:	7bfb      	ldrb	r3, [r7, #15]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003534:	b004      	add	sp, #16
 8003536:	4770      	bx	lr

08003538 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	4613      	mov	r3, r2
 8003544:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d165      	bne.n	8003618 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4a3e      	ldr	r2, [pc, #248]	; (8003648 <USB_SetTurnaroundTime+0x110>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d906      	bls.n	8003562 <USB_SetTurnaroundTime+0x2a>
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4a3d      	ldr	r2, [pc, #244]	; (800364c <USB_SetTurnaroundTime+0x114>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d202      	bcs.n	8003562 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800355c:	230f      	movs	r3, #15
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	e05c      	b.n	800361c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4a39      	ldr	r2, [pc, #228]	; (800364c <USB_SetTurnaroundTime+0x114>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d306      	bcc.n	8003578 <USB_SetTurnaroundTime+0x40>
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	4a38      	ldr	r2, [pc, #224]	; (8003650 <USB_SetTurnaroundTime+0x118>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d202      	bcs.n	8003578 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003572:	230e      	movs	r3, #14
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	e051      	b.n	800361c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4a35      	ldr	r2, [pc, #212]	; (8003650 <USB_SetTurnaroundTime+0x118>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d306      	bcc.n	800358e <USB_SetTurnaroundTime+0x56>
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4a34      	ldr	r2, [pc, #208]	; (8003654 <USB_SetTurnaroundTime+0x11c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d202      	bcs.n	800358e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003588:	230d      	movs	r3, #13
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	e046      	b.n	800361c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	4a30      	ldr	r2, [pc, #192]	; (8003654 <USB_SetTurnaroundTime+0x11c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d306      	bcc.n	80035a4 <USB_SetTurnaroundTime+0x6c>
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	4a2f      	ldr	r2, [pc, #188]	; (8003658 <USB_SetTurnaroundTime+0x120>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d802      	bhi.n	80035a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800359e:	230c      	movs	r3, #12
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	e03b      	b.n	800361c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4a2c      	ldr	r2, [pc, #176]	; (8003658 <USB_SetTurnaroundTime+0x120>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d906      	bls.n	80035ba <USB_SetTurnaroundTime+0x82>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4a2b      	ldr	r2, [pc, #172]	; (800365c <USB_SetTurnaroundTime+0x124>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d802      	bhi.n	80035ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80035b4:	230b      	movs	r3, #11
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	e030      	b.n	800361c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4a27      	ldr	r2, [pc, #156]	; (800365c <USB_SetTurnaroundTime+0x124>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d906      	bls.n	80035d0 <USB_SetTurnaroundTime+0x98>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4a26      	ldr	r2, [pc, #152]	; (8003660 <USB_SetTurnaroundTime+0x128>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d802      	bhi.n	80035d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80035ca:	230a      	movs	r3, #10
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	e025      	b.n	800361c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	4a23      	ldr	r2, [pc, #140]	; (8003660 <USB_SetTurnaroundTime+0x128>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d906      	bls.n	80035e6 <USB_SetTurnaroundTime+0xae>
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4a22      	ldr	r2, [pc, #136]	; (8003664 <USB_SetTurnaroundTime+0x12c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d202      	bcs.n	80035e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80035e0:	2309      	movs	r3, #9
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	e01a      	b.n	800361c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4a1e      	ldr	r2, [pc, #120]	; (8003664 <USB_SetTurnaroundTime+0x12c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d306      	bcc.n	80035fc <USB_SetTurnaroundTime+0xc4>
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	4a1d      	ldr	r2, [pc, #116]	; (8003668 <USB_SetTurnaroundTime+0x130>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d802      	bhi.n	80035fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80035f6:	2308      	movs	r3, #8
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	e00f      	b.n	800361c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4a1a      	ldr	r2, [pc, #104]	; (8003668 <USB_SetTurnaroundTime+0x130>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d906      	bls.n	8003612 <USB_SetTurnaroundTime+0xda>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4a19      	ldr	r2, [pc, #100]	; (800366c <USB_SetTurnaroundTime+0x134>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d202      	bcs.n	8003612 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800360c:	2307      	movs	r3, #7
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	e004      	b.n	800361c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003612:	2306      	movs	r3, #6
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	e001      	b.n	800361c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003618:	2309      	movs	r3, #9
 800361a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	029b      	lsls	r3, r3, #10
 8003630:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003634:	431a      	orrs	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	00d8acbf 	.word	0x00d8acbf
 800364c:	00e4e1c0 	.word	0x00e4e1c0
 8003650:	00f42400 	.word	0x00f42400
 8003654:	01067380 	.word	0x01067380
 8003658:	011a499f 	.word	0x011a499f
 800365c:	01312cff 	.word	0x01312cff
 8003660:	014ca43f 	.word	0x014ca43f
 8003664:	016e3600 	.word	0x016e3600
 8003668:	01a6ab1f 	.word	0x01a6ab1f
 800366c:	01e84800 	.word	0x01e84800

08003670 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f043 0201 	orr.w	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f023 0201 	bic.w	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d115      	bne.n	8003702 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80036e2:	2001      	movs	r0, #1
 80036e4:	f7fc ff10 	bl	8000508 <HAL_Delay>
      ms++;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	3301      	adds	r3, #1
 80036ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f001 f8ab 	bl	800484a <USB_GetMode>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d01e      	beq.n	8003738 <USB_SetCurrentMode+0x84>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b31      	cmp	r3, #49	; 0x31
 80036fe:	d9f0      	bls.n	80036e2 <USB_SetCurrentMode+0x2e>
 8003700:	e01a      	b.n	8003738 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d115      	bne.n	8003734 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003714:	2001      	movs	r0, #1
 8003716:	f7fc fef7 	bl	8000508 <HAL_Delay>
      ms++;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	3301      	adds	r3, #1
 800371e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f001 f892 	bl	800484a <USB_GetMode>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <USB_SetCurrentMode+0x84>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b31      	cmp	r3, #49	; 0x31
 8003730:	d9f0      	bls.n	8003714 <USB_SetCurrentMode+0x60>
 8003732:	e001      	b.n	8003738 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e005      	b.n	8003744 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b32      	cmp	r3, #50	; 0x32
 800373c:	d101      	bne.n	8003742 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800374c:	b084      	sub	sp, #16
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800375a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	e009      	b.n	8003780 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	3340      	adds	r3, #64	; 0x40
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	2200      	movs	r2, #0
 8003778:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	3301      	adds	r3, #1
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b0e      	cmp	r3, #14
 8003784:	d9f2      	bls.n	800376c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d11c      	bne.n	80037c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800379a:	f043 0302 	orr.w	r3, r3, #2
 800379e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e005      	b.n	80037d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80037d8:	461a      	mov	r2, r3
 80037da:	2300      	movs	r3, #0
 80037dc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80037de:	2103      	movs	r1, #3
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f959 	bl	8003a98 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80037e6:	2110      	movs	r1, #16
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f8f1 	bl	80039d0 <USB_FlushTxFifo>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f91d 	bl	8003a38 <USB_FlushRxFifo>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380e:	461a      	mov	r2, r3
 8003810:	2300      	movs	r3, #0
 8003812:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800381a:	461a      	mov	r2, r3
 800381c:	2300      	movs	r3, #0
 800381e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003826:	461a      	mov	r2, r3
 8003828:	2300      	movs	r3, #0
 800382a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	e043      	b.n	80038ba <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003848:	d118      	bne.n	800387c <USB_DevInit+0x130>
    {
      if (i == 0U)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385c:	461a      	mov	r2, r3
 800385e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	e013      	b.n	800388e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003872:	461a      	mov	r2, r3
 8003874:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	e008      	b.n	800388e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003888:	461a      	mov	r2, r3
 800388a:	2300      	movs	r3, #0
 800388c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800389a:	461a      	mov	r2, r3
 800389c:	2300      	movs	r3, #0
 800389e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ac:	461a      	mov	r2, r3
 80038ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	3301      	adds	r3, #1
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d3b7      	bcc.n	8003832 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038c2:	2300      	movs	r3, #0
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	e043      	b.n	8003950 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038de:	d118      	bne.n	8003912 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10a      	bne.n	80038fc <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f2:	461a      	mov	r2, r3
 80038f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e013      	b.n	8003924 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003908:	461a      	mov	r2, r3
 800390a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	e008      	b.n	8003924 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391e:	461a      	mov	r2, r3
 8003920:	2300      	movs	r3, #0
 8003922:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003930:	461a      	mov	r2, r3
 8003932:	2300      	movs	r3, #0
 8003934:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003942:	461a      	mov	r2, r3
 8003944:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003948:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	3301      	adds	r3, #1
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	429a      	cmp	r2, r3
 8003956:	d3b7      	bcc.n	80038c8 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003966:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800396a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003978:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	f043 0210 	orr.w	r2, r3, #16
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	4b10      	ldr	r3, [pc, #64]	; (80039cc <USB_DevInit+0x280>)
 800398c:	4313      	orrs	r3, r2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f043 0208 	orr.w	r2, r3, #8
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80039a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d107      	bne.n	80039ba <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039b2:	f043 0304 	orr.w	r3, r3, #4
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039c6:	b004      	add	sp, #16
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	803c3800 	.word	0x803c3800

080039d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3301      	adds	r3, #1
 80039e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a13      	ldr	r2, [pc, #76]	; (8003a34 <USB_FlushTxFifo+0x64>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d901      	bls.n	80039f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e01b      	b.n	8003a28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	daf2      	bge.n	80039de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	019b      	lsls	r3, r3, #6
 8003a00:	f043 0220 	orr.w	r2, r3, #32
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4a08      	ldr	r2, [pc, #32]	; (8003a34 <USB_FlushTxFifo+0x64>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e006      	b.n	8003a28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	d0f0      	beq.n	8003a08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	00030d40 	.word	0x00030d40

08003a38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	3301      	adds	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4a11      	ldr	r2, [pc, #68]	; (8003a94 <USB_FlushRxFifo+0x5c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e018      	b.n	8003a88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	daf2      	bge.n	8003a44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2210      	movs	r2, #16
 8003a66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4a08      	ldr	r2, [pc, #32]	; (8003a94 <USB_FlushRxFifo+0x5c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e006      	b.n	8003a88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b10      	cmp	r3, #16
 8003a84:	d0f0      	beq.n	8003a68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	00030d40 	.word	0x00030d40

08003a98 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	68f9      	ldr	r1, [r7, #12]
 8003ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b087      	sub	sp, #28
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 0306 	and.w	r3, r3, #6
 8003ae2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d002      	beq.n	8003af0 <USB_GetDevSpeed+0x26>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b06      	cmp	r3, #6
 8003aee:	d102      	bne.n	8003af6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003af0:	2302      	movs	r3, #2
 8003af2:	75fb      	strb	r3, [r7, #23]
 8003af4:	e001      	b.n	8003afa <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003af6:	230f      	movs	r3, #15
 8003af8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	371c      	adds	r7, #28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	785b      	ldrb	r3, [r3, #1]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d13a      	bne.n	8003b9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	f003 030f 	and.w	r3, r3, #15
 8003b34:	2101      	movs	r1, #1
 8003b36:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	68f9      	ldr	r1, [r7, #12]
 8003b3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d155      	bne.n	8003c08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	791b      	ldrb	r3, [r3, #4]
 8003b76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	059b      	lsls	r3, r3, #22
 8003b7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b80:	4313      	orrs	r3, r2
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	0151      	lsls	r1, r2, #5
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	440a      	add	r2, r1
 8003b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	e036      	b.n	8003c08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba0:	69da      	ldr	r2, [r3, #28]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	2101      	movs	r1, #1
 8003bac:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb0:	041b      	lsls	r3, r3, #16
 8003bb2:	68f9      	ldr	r1, [r7, #12]
 8003bb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d11a      	bne.n	8003c08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	791b      	ldrb	r3, [r3, #4]
 8003bec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	0151      	lsls	r1, r2, #5
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	440a      	add	r2, r1
 8003bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	785b      	ldrb	r3, [r3, #1]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d161      	bne.n	8003cf8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c4a:	d11f      	bne.n	8003c8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	0151      	lsls	r1, r2, #5
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	440a      	add	r2, r1
 8003c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	0151      	lsls	r1, r2, #5
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	440a      	add	r2, r1
 8003c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	68f9      	ldr	r1, [r7, #12]
 8003ca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cac:	4013      	ands	r3, r2
 8003cae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	68f9      	ldr	r1, [r7, #12]
 8003ccc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	0159      	lsls	r1, r3, #5
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	440b      	add	r3, r1
 8003cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4b35      	ldr	r3, [pc, #212]	; (8003dc8 <USB_DeactivateEndpoint+0x1b0>)
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]
 8003cf6:	e060      	b.n	8003dba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d0e:	d11f      	bne.n	8003d50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	0151      	lsls	r1, r2, #5
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	440a      	add	r2, r1
 8003d26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	0151      	lsls	r1, r2, #5
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	440a      	add	r2, r1
 8003d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	2101      	movs	r1, #1
 8003d62:	fa01 f303 	lsl.w	r3, r1, r3
 8003d66:	041b      	lsls	r3, r3, #16
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	68f9      	ldr	r1, [r7, #12]
 8003d6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d70:	4013      	ands	r3, r2
 8003d72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7a:	69da      	ldr	r2, [r3, #28]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	2101      	movs	r1, #1
 8003d86:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8a:	041b      	lsls	r3, r3, #16
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	68f9      	ldr	r1, [r7, #12]
 8003d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d94:	4013      	ands	r3, r2
 8003d96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	0159      	lsls	r1, r3, #5
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	440b      	add	r3, r1
 8003dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db2:	4619      	mov	r1, r3
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <USB_DeactivateEndpoint+0x1b4>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	ec337800 	.word	0xec337800
 8003dcc:	eff37800 	.word	0xeff37800

08003dd0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	785b      	ldrb	r3, [r3, #1]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	f040 8128 	bne.w	800403e <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d132      	bne.n	8003e5c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	0151      	lsls	r1, r2, #5
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	440a      	add	r2, r1
 8003e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	0151      	lsls	r1, r2, #5
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	440a      	add	r2, r1
 8003e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	0151      	lsls	r1, r2, #5
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	440a      	add	r2, r1
 8003e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e54:	0cdb      	lsrs	r3, r3, #19
 8003e56:	04db      	lsls	r3, r3, #19
 8003e58:	6113      	str	r3, [r2, #16]
 8003e5a:	e092      	b.n	8003f82 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	0151      	lsls	r1, r2, #5
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	440a      	add	r2, r1
 8003e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e76:	0cdb      	lsrs	r3, r3, #19
 8003e78:	04db      	lsls	r3, r3, #19
 8003e7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	0151      	lsls	r1, r2, #5
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	440a      	add	r2, r1
 8003e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e9e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d11a      	bne.n	8003edc <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	691a      	ldr	r2, [r3, #16]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d903      	bls.n	8003eba <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	0151      	lsls	r1, r2, #5
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	440a      	add	r2, r1
 8003ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ed8:	6113      	str	r3, [r2, #16]
 8003eda:	e01b      	b.n	8003f14 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6919      	ldr	r1, [r3, #16]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	440b      	add	r3, r1
 8003ef4:	1e59      	subs	r1, r3, #1
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003efe:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003f00:	4b8d      	ldr	r3, [pc, #564]	; (8004138 <USB_EPStartXfer+0x368>)
 8003f02:	400b      	ands	r3, r1
 8003f04:	6939      	ldr	r1, [r7, #16]
 8003f06:	0148      	lsls	r0, r1, #5
 8003f08:	6979      	ldr	r1, [r7, #20]
 8003f0a:	4401      	add	r1, r0
 8003f0c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f10:	4313      	orrs	r3, r2
 8003f12:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2a:	6939      	ldr	r1, [r7, #16]
 8003f2c:	0148      	lsls	r0, r1, #5
 8003f2e:	6979      	ldr	r1, [r7, #20]
 8003f30:	4401      	add	r1, r0
 8003f32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f36:	4313      	orrs	r3, r2
 8003f38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	791b      	ldrb	r3, [r3, #4]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d11f      	bne.n	8003f82 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	0151      	lsls	r1, r2, #5
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	440a      	add	r2, r1
 8003f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003f60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	0151      	lsls	r1, r2, #5
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	440a      	add	r2, r1
 8003f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f80:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	0151      	lsls	r1, r2, #5
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	440a      	add	r2, r1
 8003f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fa0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	791b      	ldrb	r3, [r3, #4]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d015      	beq.n	8003fd6 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 8139 	beq.w	8004226 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fca:	6979      	ldr	r1, [r7, #20]
 8003fcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	634b      	str	r3, [r1, #52]	; 0x34
 8003fd4:	e127      	b.n	8004226 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d110      	bne.n	8004008 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	0151      	lsls	r1, r2, #5
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	440a      	add	r2, r1
 8003ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004000:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e00f      	b.n	8004028 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	0151      	lsls	r1, r2, #5
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	440a      	add	r2, r1
 800401e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004026:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68d9      	ldr	r1, [r3, #12]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	781a      	ldrb	r2, [r3, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	b29b      	uxth	r3, r3
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f9a6 	bl	8004388 <USB_WritePacket>
 800403c:	e0f3      	b.n	8004226 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	0151      	lsls	r1, r2, #5
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	440a      	add	r2, r1
 8004054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004058:	0cdb      	lsrs	r3, r3, #19
 800405a:	04db      	lsls	r3, r3, #19
 800405c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	0151      	lsls	r1, r2, #5
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	440a      	add	r2, r1
 8004074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004078:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800407c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004080:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d12f      	bne.n	80040e8 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b6:	6939      	ldr	r1, [r7, #16]
 80040b8:	0148      	lsls	r0, r1, #5
 80040ba:	6979      	ldr	r1, [r7, #20]
 80040bc:	4401      	add	r1, r0
 80040be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040c2:	4313      	orrs	r3, r2
 80040c4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	0151      	lsls	r1, r2, #5
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	440a      	add	r2, r1
 80040dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040e4:	6113      	str	r3, [r2, #16]
 80040e6:	e061      	b.n	80041ac <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d125      	bne.n	800413c <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004106:	6939      	ldr	r1, [r7, #16]
 8004108:	0148      	lsls	r0, r1, #5
 800410a:	6979      	ldr	r1, [r7, #20]
 800410c:	4401      	add	r1, r0
 800410e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004112:	4313      	orrs	r3, r2
 8004114:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	0151      	lsls	r1, r2, #5
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	440a      	add	r2, r1
 800412c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004130:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004134:	6113      	str	r3, [r2, #16]
 8004136:	e039      	b.n	80041ac <USB_EPStartXfer+0x3dc>
 8004138:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	4413      	add	r3, r2
 8004146:	1e5a      	subs	r2, r3, #1
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004150:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	89fa      	ldrh	r2, [r7, #14]
 8004158:	fb03 f202 	mul.w	r2, r3, r2
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	89fb      	ldrh	r3, [r7, #14]
 8004170:	04d9      	lsls	r1, r3, #19
 8004172:	4b2f      	ldr	r3, [pc, #188]	; (8004230 <USB_EPStartXfer+0x460>)
 8004174:	400b      	ands	r3, r1
 8004176:	6939      	ldr	r1, [r7, #16]
 8004178:	0148      	lsls	r0, r1, #5
 800417a:	6979      	ldr	r1, [r7, #20]
 800417c:	4401      	add	r1, r0
 800417e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004182:	4313      	orrs	r3, r2
 8004184:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800419c:	6939      	ldr	r1, [r7, #16]
 800419e:	0148      	lsls	r0, r1, #5
 80041a0:	6979      	ldr	r1, [r7, #20]
 80041a2:	4401      	add	r1, r0
 80041a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041a8:	4313      	orrs	r3, r2
 80041aa:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	791b      	ldrb	r3, [r3, #4]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d128      	bne.n	8004206 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d110      	bne.n	80041e6 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	0151      	lsls	r1, r2, #5
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	440a      	add	r2, r1
 80041da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	e00f      	b.n	8004206 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	0151      	lsls	r1, r2, #5
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	440a      	add	r2, r1
 80041fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004204:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	0151      	lsls	r1, r2, #5
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	440a      	add	r2, r1
 800421c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004220:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004224:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	1ff80000 	.word	0x1ff80000

08004234 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	785b      	ldrb	r3, [r3, #1]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d14a      	bne.n	80042e8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004266:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800426a:	f040 8086 	bne.w	800437a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	7812      	ldrb	r2, [r2, #0]
 8004282:	0151      	lsls	r1, r2, #5
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	440a      	add	r2, r1
 8004288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800428c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004290:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	7812      	ldrb	r2, [r2, #0]
 80042a6:	0151      	lsls	r1, r2, #5
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	440a      	add	r2, r1
 80042ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3301      	adds	r3, #1
 80042ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f242 7210 	movw	r2, #10000	; 0x2710
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d902      	bls.n	80042cc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	75fb      	strb	r3, [r7, #23]
          break;
 80042ca:	e056      	b.n	800437a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042e4:	d0e7      	beq.n	80042b6 <USB_EPStopXfer+0x82>
 80042e6:	e048      	b.n	800437a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004300:	d13b      	bne.n	800437a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	7812      	ldrb	r2, [r2, #0]
 8004316:	0151      	lsls	r1, r2, #5
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	440a      	add	r2, r1
 800431c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004320:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004324:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	7812      	ldrb	r2, [r2, #0]
 800433a:	0151      	lsls	r1, r2, #5
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	440a      	add	r2, r1
 8004340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004344:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004348:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3301      	adds	r3, #1
 800434e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f242 7210 	movw	r2, #10000	; 0x2710
 8004356:	4293      	cmp	r3, r2
 8004358:	d902      	bls.n	8004360 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	75fb      	strb	r3, [r7, #23]
          break;
 800435e:	e00c      	b.n	800437a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004374:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004378:	d0e7      	beq.n	800434a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800437a:	7dfb      	ldrb	r3, [r7, #23]
}
 800437c:	4618      	mov	r0, r3
 800437e:	371c      	adds	r7, #28
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004388:	b480      	push	{r7}
 800438a:	b089      	sub	sp, #36	; 0x24
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	4611      	mov	r1, r2
 8004394:	461a      	mov	r2, r3
 8004396:	460b      	mov	r3, r1
 8004398:	71fb      	strb	r3, [r7, #7]
 800439a:	4613      	mov	r3, r2
 800439c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80043a6:	88bb      	ldrh	r3, [r7, #4]
 80043a8:	3303      	adds	r3, #3
 80043aa:	089b      	lsrs	r3, r3, #2
 80043ac:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80043ae:	2300      	movs	r3, #0
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	e018      	b.n	80043e6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	031a      	lsls	r2, r3, #12
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c0:	461a      	mov	r2, r3
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	3301      	adds	r3, #1
 80043cc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	3301      	adds	r3, #1
 80043d2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	3301      	adds	r3, #1
 80043d8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	3301      	adds	r3, #1
 80043de:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	3301      	adds	r3, #1
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d3e2      	bcc.n	80043b4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3724      	adds	r7, #36	; 0x24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b08b      	sub	sp, #44	; 0x2c
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	4613      	mov	r3, r2
 8004408:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	089b      	lsrs	r3, r3, #2
 8004416:	b29b      	uxth	r3, r3
 8004418:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800441a:	88fb      	ldrh	r3, [r7, #6]
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004422:	2300      	movs	r3, #0
 8004424:	623b      	str	r3, [r7, #32]
 8004426:	e014      	b.n	8004452 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	601a      	str	r2, [r3, #0]
    pDest++;
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	3301      	adds	r3, #1
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	3301      	adds	r3, #1
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	3301      	adds	r3, #1
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	3301      	adds	r3, #1
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	3301      	adds	r3, #1
 8004450:	623b      	str	r3, [r7, #32]
 8004452:	6a3a      	ldr	r2, [r7, #32]
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	429a      	cmp	r2, r3
 8004458:	d3e6      	bcc.n	8004428 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800445a:	8bfb      	ldrh	r3, [r7, #30]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01e      	beq.n	800449e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800446a:	461a      	mov	r2, r3
 800446c:	f107 0310 	add.w	r3, r7, #16
 8004470:	6812      	ldr	r2, [r2, #0]
 8004472:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	fa22 f303 	lsr.w	r3, r2, r3
 8004480:	b2da      	uxtb	r2, r3
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	701a      	strb	r2, [r3, #0]
      i++;
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	3301      	adds	r3, #1
 800448a:	623b      	str	r3, [r7, #32]
      pDest++;
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	3301      	adds	r3, #1
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004492:	8bfb      	ldrh	r3, [r7, #30]
 8004494:	3b01      	subs	r3, #1
 8004496:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004498:	8bfb      	ldrh	r3, [r7, #30]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1ea      	bne.n	8004474 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	372c      	adds	r7, #44	; 0x2c
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	785b      	ldrb	r3, [r3, #1]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d12c      	bne.n	8004522 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	db12      	blt.n	8004500 <USB_EPSetStall+0x54>
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00f      	beq.n	8004500 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	0151      	lsls	r1, r2, #5
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	440a      	add	r2, r1
 80044f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	0151      	lsls	r1, r2, #5
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	440a      	add	r2, r1
 8004516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800451a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	e02b      	b.n	800457a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	db12      	blt.n	800455a <USB_EPSetStall+0xae>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00f      	beq.n	800455a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	0151      	lsls	r1, r2, #5
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	440a      	add	r2, r1
 8004550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004554:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004558:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	0151      	lsls	r1, r2, #5
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	440a      	add	r2, r1
 8004570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004574:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004578:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	785b      	ldrb	r3, [r3, #1]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d128      	bne.n	80045f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	0151      	lsls	r1, r2, #5
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	440a      	add	r2, r1
 80045ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	791b      	ldrb	r3, [r3, #4]
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d003      	beq.n	80045d4 <USB_EPClearStall+0x4c>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	791b      	ldrb	r3, [r3, #4]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d138      	bne.n	8004646 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	0151      	lsls	r1, r2, #5
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	440a      	add	r2, r1
 80045ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	e027      	b.n	8004646 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	0151      	lsls	r1, r2, #5
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	440a      	add	r2, r1
 800460c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004610:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004614:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	791b      	ldrb	r3, [r3, #4]
 800461a:	2b03      	cmp	r3, #3
 800461c:	d003      	beq.n	8004626 <USB_EPClearStall+0x9e>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	791b      	ldrb	r3, [r3, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d10f      	bne.n	8004646 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	0151      	lsls	r1, r2, #5
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	440a      	add	r2, r1
 800463c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004644:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004672:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004676:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004688:	68f9      	ldr	r1, [r7, #12]
 800468a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800468e:	4313      	orrs	r3, r2
 8004690:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80046ba:	f023 0303 	bic.w	r3, r3, #3
 80046be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ce:	f023 0302 	bic.w	r3, r3, #2
 80046d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80046fc:	f023 0303 	bic.w	r3, r3, #3
 8004700:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004710:	f043 0302 	orr.w	r3, r3, #2
 8004714:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4013      	ands	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800473c:	68fb      	ldr	r3, [r7, #12]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	4013      	ands	r3, r2
 800476c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	0c1b      	lsrs	r3, r3, #16
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	4013      	ands	r3, r2
 80047a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	b29b      	uxth	r3, r3
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b085      	sub	sp, #20
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	460b      	mov	r3, r1
 80047bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80047c2:	78fb      	ldrb	r3, [r7, #3]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	4013      	ands	r3, r2
 80047de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80047e0:	68bb      	ldr	r3, [r7, #8]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b087      	sub	sp, #28
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	460b      	mov	r3, r1
 80047f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004810:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	fa22 f303 	lsr.w	r3, r2, r3
 800481e:	01db      	lsls	r3, r3, #7
 8004820:	b2db      	uxtb	r3, r3
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4013      	ands	r3, r2
 800483a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800483c:	68bb      	ldr	r3, [r7, #8]
}
 800483e:	4618      	mov	r0, r3
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f003 0301 	and.w	r3, r3, #1
}
 800485a:	4618      	mov	r0, r3
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004866:	b480      	push	{r7}
 8004868:	b085      	sub	sp, #20
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004880:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004884:	f023 0307 	bic.w	r3, r3, #7
 8004888:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800489c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	333c      	adds	r3, #60	; 0x3c
 80048be:	3304      	adds	r3, #4
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4a1c      	ldr	r2, [pc, #112]	; (8004938 <USB_EP0_OutStart+0x8c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d90a      	bls.n	80048e2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048dc:	d101      	bne.n	80048e2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	e024      	b.n	800492c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e8:	461a      	mov	r2, r3
 80048ea:	2300      	movs	r3, #0
 80048ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004900:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004910:	f043 0318 	orr.w	r3, r3, #24
 8004914:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004924:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004928:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	4f54300a 	.word	0x4f54300a

0800493c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3301      	adds	r3, #1
 800494c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a13      	ldr	r2, [pc, #76]	; (80049a0 <USB_CoreReset+0x64>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e01b      	b.n	8004992 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	daf2      	bge.n	8004948 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f043 0201 	orr.w	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3301      	adds	r3, #1
 8004976:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4a09      	ldr	r2, [pc, #36]	; (80049a0 <USB_CoreReset+0x64>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d901      	bls.n	8004984 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e006      	b.n	8004992 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b01      	cmp	r3, #1
 800498e:	d0f0      	beq.n	8004972 <USB_CoreReset+0x36>

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	00030d40 	.word	0x00030d40

080049a4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80049b0:	f44f 701d 	mov.w	r0, #628	; 0x274
 80049b4:	f004 f8da 	bl	8008b6c <USBD_static_malloc>
 80049b8:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d109      	bne.n	80049d4 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	32b0      	adds	r2, #176	; 0xb0
 80049ca:	2100      	movs	r1, #0
 80049cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80049d0:	2302      	movs	r3, #2
 80049d2:	e06e      	b.n	8004ab2 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	32b0      	adds	r2, #176	; 0xb0
 80049de:	68f9      	ldr	r1, [r7, #12]
 80049e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	32b0      	adds	r2, #176	; 0xb0
 80049ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	7c1b      	ldrb	r3, [r3, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d12b      	bne.n	8004a58 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004a00:	4b2e      	ldr	r3, [pc, #184]	; (8004abc <USBD_MSC_Init+0x118>)
 8004a02:	7819      	ldrb	r1, [r3, #0]
 8004a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a08:	2202      	movs	r2, #2
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f003 fe64 	bl	80086d8 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8004a10:	4b2a      	ldr	r3, [pc, #168]	; (8004abc <USBD_MSC_Init+0x118>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	f003 020f 	and.w	r2, r3, #15
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	440b      	add	r3, r1
 8004a24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004a28:	2201      	movs	r2, #1
 8004a2a:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004a2c:	4b24      	ldr	r3, [pc, #144]	; (8004ac0 <USBD_MSC_Init+0x11c>)
 8004a2e:	7819      	ldrb	r1, [r3, #0]
 8004a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a34:	2202      	movs	r2, #2
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f003 fe4e 	bl	80086d8 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8004a3c:	4b20      	ldr	r3, [pc, #128]	; (8004ac0 <USBD_MSC_Init+0x11c>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	f003 020f 	and.w	r2, r3, #15
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	3324      	adds	r3, #36	; 0x24
 8004a52:	2201      	movs	r2, #1
 8004a54:	801a      	strh	r2, [r3, #0]
 8004a56:	e028      	b.n	8004aaa <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004a58:	4b18      	ldr	r3, [pc, #96]	; (8004abc <USBD_MSC_Init+0x118>)
 8004a5a:	7819      	ldrb	r1, [r3, #0]
 8004a5c:	2340      	movs	r3, #64	; 0x40
 8004a5e:	2202      	movs	r2, #2
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f003 fe39 	bl	80086d8 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8004a66:	4b15      	ldr	r3, [pc, #84]	; (8004abc <USBD_MSC_Init+0x118>)
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	f003 020f 	and.w	r2, r3, #15
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004a7e:	2201      	movs	r2, #1
 8004a80:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004a82:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <USBD_MSC_Init+0x11c>)
 8004a84:	7819      	ldrb	r1, [r3, #0]
 8004a86:	2340      	movs	r3, #64	; 0x40
 8004a88:	2202      	movs	r2, #2
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f003 fe24 	bl	80086d8 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8004a90:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <USBD_MSC_Init+0x11c>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	f003 020f 	and.w	r2, r3, #15
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	3324      	adds	r3, #36	; 0x24
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fa2c 	bl	8004f08 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	2000006f 	.word	0x2000006f
 8004ac0:	2000006e 	.word	0x2000006e

08004ac4 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8004ad0:	4b26      	ldr	r3, [pc, #152]	; (8004b6c <USBD_MSC_DeInit+0xa8>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f003 fe3c 	bl	8008754 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8004adc:	4b23      	ldr	r3, [pc, #140]	; (8004b6c <USBD_MSC_DeInit+0xa8>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	f003 020f 	and.w	r2, r3, #15
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	440b      	add	r3, r1
 8004af0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004af4:	2200      	movs	r2, #0
 8004af6:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8004af8:	4b1d      	ldr	r3, [pc, #116]	; (8004b70 <USBD_MSC_DeInit+0xac>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	4619      	mov	r1, r3
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f003 fe28 	bl	8008754 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8004b04:	4b1a      	ldr	r3, [pc, #104]	; (8004b70 <USBD_MSC_DeInit+0xac>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	f003 020f 	and.w	r2, r3, #15
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	3324      	adds	r3, #36	; 0x24
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	32b0      	adds	r2, #176	; 0xb0
 8004b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d018      	beq.n	8004b62 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fa67 	bl	8005004 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	32b0      	adds	r2, #176	; 0xb0
 8004b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f004 f81f 	bl	8008b88 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	32b0      	adds	r2, #176	; 0xb0
 8004b54:	2100      	movs	r1, #0
 8004b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	2000006f 	.word	0x2000006f
 8004b70:	2000006e 	.word	0x2000006e

08004b74 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	32b0      	adds	r2, #176	; 0xb0
 8004b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b8c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e0e1      	b.n	8004d64 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d053      	beq.n	8004c54 <USBD_MSC_Setup+0xe0>
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	f040 80d1 	bne.w	8004d54 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	785b      	ldrb	r3, [r3, #1]
 8004bb6:	2bfe      	cmp	r3, #254	; 0xfe
 8004bb8:	d002      	beq.n	8004bc0 <USBD_MSC_Setup+0x4c>
 8004bba:	2bff      	cmp	r3, #255	; 0xff
 8004bbc:	d02a      	beq.n	8004c14 <USBD_MSC_Setup+0xa0>
 8004bbe:	e041      	b.n	8004c44 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	885b      	ldrh	r3, [r3, #2]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d11e      	bne.n	8004c06 <USBD_MSC_Setup+0x92>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	88db      	ldrh	r3, [r3, #6]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d11a      	bne.n	8004c06 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	da15      	bge.n	8004c06 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	33b0      	adds	r3, #176	; 0xb0
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	4798      	blx	r3
 8004bee:	4603      	mov	r3, r0
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f003 f92b 	bl	8007e58 <USBD_CtlSendData>
 8004c02:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c04:	e025      	b.n	8004c52 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8004c06:	6839      	ldr	r1, [r7, #0]
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f003 f8b4 	bl	8007d76 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	75fb      	strb	r3, [r7, #23]
          break;
 8004c12:	e01e      	b.n	8004c52 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	885b      	ldrh	r3, [r3, #2]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10c      	bne.n	8004c36 <USBD_MSC_Setup+0xc2>
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	88db      	ldrh	r3, [r3, #6]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d108      	bne.n	8004c36 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	db03      	blt.n	8004c36 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f9b4 	bl	8004f9c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c34:	e00d      	b.n	8004c52 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8004c36:	6839      	ldr	r1, [r7, #0]
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f003 f89c 	bl	8007d76 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	75fb      	strb	r3, [r7, #23]
          break;
 8004c42:	e006      	b.n	8004c52 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8004c44:	6839      	ldr	r1, [r7, #0]
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f003 f895 	bl	8007d76 <USBD_CtlError>
          ret = USBD_FAIL;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	75fb      	strb	r3, [r7, #23]
          break;
 8004c50:	bf00      	nop
      }
      break;
 8004c52:	e086      	b.n	8004d62 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	785b      	ldrb	r3, [r3, #1]
 8004c58:	2b0b      	cmp	r3, #11
 8004c5a:	d872      	bhi.n	8004d42 <USBD_MSC_Setup+0x1ce>
 8004c5c:	a201      	add	r2, pc, #4	; (adr r2, 8004c64 <USBD_MSC_Setup+0xf0>)
 8004c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c62:	bf00      	nop
 8004c64:	08004c95 	.word	0x08004c95
 8004c68:	08004d11 	.word	0x08004d11
 8004c6c:	08004d43 	.word	0x08004d43
 8004c70:	08004d43 	.word	0x08004d43
 8004c74:	08004d43 	.word	0x08004d43
 8004c78:	08004d43 	.word	0x08004d43
 8004c7c:	08004d43 	.word	0x08004d43
 8004c80:	08004d43 	.word	0x08004d43
 8004c84:	08004d43 	.word	0x08004d43
 8004c88:	08004d43 	.word	0x08004d43
 8004c8c:	08004cbf 	.word	0x08004cbf
 8004c90:	08004ce9 	.word	0x08004ce9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d107      	bne.n	8004cb0 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004ca0:	f107 030e 	add.w	r3, r7, #14
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f003 f8d5 	bl	8007e58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004cae:	e050      	b.n	8004d52 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8004cb0:	6839      	ldr	r1, [r7, #0]
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f003 f85f 	bl	8007d76 <USBD_CtlError>
            ret = USBD_FAIL;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	75fb      	strb	r3, [r7, #23]
          break;
 8004cbc:	e049      	b.n	8004d52 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d107      	bne.n	8004cda <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	3304      	adds	r3, #4
 8004cce:	2201      	movs	r2, #1
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f003 f8c0 	bl	8007e58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004cd8:	e03b      	b.n	8004d52 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8004cda:	6839      	ldr	r1, [r7, #0]
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f003 f84a 	bl	8007d76 <USBD_CtlError>
            ret = USBD_FAIL;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ce6:	e034      	b.n	8004d52 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d106      	bne.n	8004d02 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	885b      	ldrh	r3, [r3, #2]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d00:	e027      	b.n	8004d52 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8004d02:	6839      	ldr	r1, [r7, #0]
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f003 f836 	bl	8007d76 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	75fb      	strb	r3, [r7, #23]
          break;
 8004d0e:	e020      	b.n	8004d52 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d119      	bne.n	8004d50 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	885b      	ldrh	r3, [r3, #2]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d115      	bne.n	8004d50 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	889b      	ldrh	r3, [r3, #4]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f003 fd47 	bl	80087c0 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	889b      	ldrh	r3, [r3, #4]
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	4619      	mov	r1, r3
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fb2e 	bl	800539c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8004d40:	e006      	b.n	8004d50 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8004d42:	6839      	ldr	r1, [r7, #0]
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f003 f816 	bl	8007d76 <USBD_CtlError>
          ret = USBD_FAIL;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	75fb      	strb	r3, [r7, #23]
          break;
 8004d4e:	e000      	b.n	8004d52 <USBD_MSC_Setup+0x1de>
          break;
 8004d50:	bf00      	nop
      }
      break;
 8004d52:	e006      	b.n	8004d62 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8004d54:	6839      	ldr	r1, [r7, #0]
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f003 f80d 	bl	8007d76 <USBD_CtlError>
      ret = USBD_FAIL;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d60:	bf00      	nop
  }

  return (uint8_t)ret;
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8004d78:	78fb      	ldrb	r3, [r7, #3]
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f959 	bl	8005034 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8004d98:	78fb      	ldrb	r3, [r7, #3]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f983 	bl	80050a8 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8004db4:	2181      	movs	r1, #129	; 0x81
 8004db6:	4812      	ldr	r0, [pc, #72]	; (8004e00 <USBD_MSC_GetHSCfgDesc+0x54>)
 8004db8:	f002 f97a 	bl	80070b0 <USBD_GetEpDesc>
 8004dbc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	480f      	ldr	r0, [pc, #60]	; (8004e00 <USBD_MSC_GetHSCfgDesc+0x54>)
 8004dc2:	f002 f975 	bl	80070b0 <USBD_GetEpDesc>
 8004dc6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d006      	beq.n	8004ddc <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	711a      	strb	r2, [r3, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f042 0202 	orr.w	r2, r2, #2
 8004dda:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d006      	beq.n	8004df0 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2200      	movs	r2, #0
 8004de6:	711a      	strb	r2, [r3, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f042 0202 	orr.w	r2, r2, #2
 8004dee:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2220      	movs	r2, #32
 8004df4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8004df6:	4b02      	ldr	r3, [pc, #8]	; (8004e00 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20000044 	.word	0x20000044

08004e04 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8004e0c:	2181      	movs	r1, #129	; 0x81
 8004e0e:	4812      	ldr	r0, [pc, #72]	; (8004e58 <USBD_MSC_GetFSCfgDesc+0x54>)
 8004e10:	f002 f94e 	bl	80070b0 <USBD_GetEpDesc>
 8004e14:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8004e16:	2101      	movs	r1, #1
 8004e18:	480f      	ldr	r0, [pc, #60]	; (8004e58 <USBD_MSC_GetFSCfgDesc+0x54>)
 8004e1a:	f002 f949 	bl	80070b0 <USBD_GetEpDesc>
 8004e1e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d006      	beq.n	8004e34 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e2e:	711a      	strb	r2, [r3, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d006      	beq.n	8004e48 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e42:	711a      	strb	r2, [r3, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8004e4e:	4b02      	ldr	r3, [pc, #8]	; (8004e58 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20000044 	.word	0x20000044

08004e5c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8004e64:	2181      	movs	r1, #129	; 0x81
 8004e66:	4812      	ldr	r0, [pc, #72]	; (8004eb0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8004e68:	f002 f922 	bl	80070b0 <USBD_GetEpDesc>
 8004e6c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8004e6e:	2101      	movs	r1, #1
 8004e70:	480f      	ldr	r0, [pc, #60]	; (8004eb0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8004e72:	f002 f91d 	bl	80070b0 <USBD_GetEpDesc>
 8004e76:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d006      	beq.n	8004e8c <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e86:	711a      	strb	r2, [r3, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d006      	beq.n	8004ea0 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e9a:	711a      	strb	r2, [r3, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8004ea6:	4b02      	ldr	r3, [pc, #8]	; (8004eb0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20000044 	.word	0x20000044

08004eb4 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	220a      	movs	r2, #10
 8004ec0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8004ec2:	4b03      	ldr	r3, [pc, #12]	; (8004ed0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	20000064 	.word	0x20000064

08004ed4 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e009      	b.n	8004efc <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	33b0      	adds	r3, #176	; 0xb0
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	32b0      	adds	r2, #176	; 0xb0
 8004f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f1e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d032      	beq.n	8004f8c <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	33b0      	adds	r3, #176	; 0xb0
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8004f60:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <MSC_BOT_Init+0x8c>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	4619      	mov	r1, r3
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f003 fc2a 	bl	80087c0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8004f6c:	4b0a      	ldr	r3, [pc, #40]	; (8004f98 <MSC_BOT_Init+0x90>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	4619      	mov	r1, r3
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f003 fc24 	bl	80087c0 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8004f78:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <MSC_BOT_Init+0x8c>)
 8004f7a:	7819      	ldrb	r1, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004f82:	231f      	movs	r3, #31
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f003 fd57 	bl	8008a38 <USBD_LL_PrepareReceive>
 8004f8a:	e000      	b.n	8004f8e <MSC_BOT_Init+0x86>
    return;
 8004f8c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	2000006f 	.word	0x2000006f
 8004f98:	2000006e 	.word	0x2000006e

08004f9c <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	32b0      	adds	r2, #176	; 0xb0
 8004fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d01b      	beq.n	8004ff2 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8004fc6:	4b0d      	ldr	r3, [pc, #52]	; (8004ffc <MSC_BOT_Reset+0x60>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f003 fc63 	bl	8008898 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8004fd2:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <MSC_BOT_Reset+0x64>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f003 fc5d 	bl	8008898 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8004fde:	4b08      	ldr	r3, [pc, #32]	; (8005000 <MSC_BOT_Reset+0x64>)
 8004fe0:	7819      	ldrb	r1, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004fe8:	231f      	movs	r3, #31
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f003 fd24 	bl	8008a38 <USBD_LL_PrepareReceive>
 8004ff0:	e000      	b.n	8004ff4 <MSC_BOT_Reset+0x58>
    return;
 8004ff2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	2000006e 	.word	0x2000006e
 8005000:	2000006f 	.word	0x2000006f

08005004 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	32b0      	adds	r2, #176	; 0xb0
 8005016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800501a:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	721a      	strb	r2, [r3, #8]
  }
}
 8005028:	bf00      	nop
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	460b      	mov	r3, r1
 800503e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	32b0      	adds	r2, #176	; 0xb0
 800504a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800504e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d020      	beq.n	8005098 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	7a1b      	ldrb	r3, [r3, #8]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d005      	beq.n	800506a <MSC_BOT_DataIn+0x36>
 800505e:	2b02      	cmp	r3, #2
 8005060:	db1c      	blt.n	800509c <MSC_BOT_DataIn+0x68>
 8005062:	3b03      	subs	r3, #3
 8005064:	2b01      	cmp	r3, #1
 8005066:	d819      	bhi.n	800509c <MSC_BOT_DataIn+0x68>
 8005068:	e011      	b.n	800508e <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8005076:	461a      	mov	r2, r3
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f9c9 	bl	8005410 <SCSI_ProcessCmd>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	da0d      	bge.n	80050a0 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005084:	2101      	movs	r1, #1
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f90c 	bl	80052a4 <MSC_BOT_SendCSW>
      }
      break;
 800508c:	e008      	b.n	80050a0 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800508e:	2100      	movs	r1, #0
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f907 	bl	80052a4 <MSC_BOT_SendCSW>
      break;
 8005096:	e004      	b.n	80050a2 <MSC_BOT_DataIn+0x6e>
    return;
 8005098:	bf00      	nop
 800509a:	e002      	b.n	80050a2 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800509c:	bf00      	nop
 800509e:	e000      	b.n	80050a2 <MSC_BOT_DataIn+0x6e>
      break;
 80050a0:	bf00      	nop
  }
}
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	32b0      	adds	r2, #176	; 0xb0
 80050be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d01c      	beq.n	8005104 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	7a1b      	ldrb	r3, [r3, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <MSC_BOT_DataOut+0x30>
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d004      	beq.n	80050e0 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80050d6:	e018      	b.n	800510a <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f819 	bl	8005110 <MSC_BOT_CBW_Decode>
      break;
 80050de:	e014      	b.n	800510a <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80050ec:	461a      	mov	r2, r3
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f98e 	bl	8005410 <SCSI_ProcessCmd>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	da06      	bge.n	8005108 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80050fa:	2101      	movs	r1, #1
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f8d1 	bl	80052a4 <MSC_BOT_SendCSW>
      break;
 8005102:	e001      	b.n	8005108 <MSC_BOT_DataOut+0x60>
    return;
 8005104:	bf00      	nop
 8005106:	e000      	b.n	800510a <MSC_BOT_DataOut+0x62>
      break;
 8005108:	bf00      	nop
  }
}
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	32b0      	adds	r2, #176	; 0xb0
 8005122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005126:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d079      	beq.n	8005222 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8005146:	4b3a      	ldr	r3, [pc, #232]	; (8005230 <MSC_BOT_CBW_Decode+0x120>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	4619      	mov	r1, r3
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f003 fcab 	bl	8008aa8 <USBD_LL_GetRxDataSize>
 8005152:	4603      	mov	r3, r0
 8005154:	2b1f      	cmp	r3, #31
 8005156:	d114      	bne.n	8005182 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800515e:	4a35      	ldr	r2, [pc, #212]	; (8005234 <MSC_BOT_CBW_Decode+0x124>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d10e      	bne.n	8005182 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800516a:	2b01      	cmp	r3, #1
 800516c:	d809      	bhi.n	8005182 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8005174:	2b00      	cmp	r3, #0
 8005176:	d004      	beq.n	8005182 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800517e:	2b10      	cmp	r3, #16
 8005180:	d90e      	bls.n	80051a0 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005188:	2320      	movs	r3, #32
 800518a:	2205      	movs	r2, #5
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fe2a 	bl	8005de6 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2202      	movs	r2, #2
 8005196:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f8bd 	bl	8005318 <MSC_BOT_Abort>
 800519e:	e043      	b.n	8005228 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80051ac:	461a      	mov	r2, r3
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f92e 	bl	8005410 <SCSI_ProcessCmd>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	da0c      	bge.n	80051d4 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	7a1b      	ldrb	r3, [r3, #8]
 80051be:	2b05      	cmp	r3, #5
 80051c0:	d104      	bne.n	80051cc <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80051c2:	2101      	movs	r1, #1
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f86d 	bl	80052a4 <MSC_BOT_SendCSW>
 80051ca:	e02d      	b.n	8005228 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f8a3 	bl	8005318 <MSC_BOT_Abort>
 80051d2:	e029      	b.n	8005228 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	7a1b      	ldrb	r3, [r3, #8]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d024      	beq.n	8005226 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d020      	beq.n	8005226 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d01c      	beq.n	8005226 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d009      	beq.n	8005208 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f103 0110 	add.w	r1, r3, #16
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	461a      	mov	r2, r3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f819 	bl	8005238 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8005206:	e00f      	b.n	8005228 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d104      	bne.n	800521a <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005210:	2100      	movs	r1, #0
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f846 	bl	80052a4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8005218:	e006      	b.n	8005228 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f87c 	bl	8005318 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8005220:	e002      	b.n	8005228 <MSC_BOT_CBW_Decode+0x118>
    return;
 8005222:	bf00      	nop
 8005224:	e000      	b.n	8005228 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8005226:	bf00      	nop
    }
  }
}
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	2000006f 	.word	0x2000006f
 8005234:	43425355 	.word	0x43425355

08005238 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	32b0      	adds	r2, #176	; 0xb0
 800524e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005252:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01e      	beq.n	8005298 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	4293      	cmp	r3, r2
 8005264:	bf28      	it	cs
 8005266:	4613      	movcs	r3, r2
 8005268:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	1ad2      	subs	r2, r2, r3
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2204      	movs	r2, #4
 8005286:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <MSC_BOT_SendData+0x68>)
 800528a:	7819      	ldrb	r1, [r3, #0]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f003 fb99 	bl	80089c8 <USBD_LL_Transmit>
 8005296:	e000      	b.n	800529a <MSC_BOT_SendData+0x62>
    return;
 8005298:	bf00      	nop
}
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	2000006e 	.word	0x2000006e

080052a4 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	32b0      	adds	r2, #176	; 0xb0
 80052ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052be:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01d      	beq.n	8005302 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4a10      	ldr	r2, [pc, #64]	; (800530c <MSC_BOT_SendCSW+0x68>)
 80052ca:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	78fa      	ldrb	r2, [r7, #3]
 80052d2:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80052dc:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <MSC_BOT_SendCSW+0x6c>)
 80052de:	7819      	ldrb	r1, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f503 720c 	add.w	r2, r3, #560	; 0x230
 80052e6:	230d      	movs	r3, #13
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f003 fb6d 	bl	80089c8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80052ee:	4b09      	ldr	r3, [pc, #36]	; (8005314 <MSC_BOT_SendCSW+0x70>)
 80052f0:	7819      	ldrb	r1, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80052f8:	231f      	movs	r3, #31
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f003 fb9c 	bl	8008a38 <USBD_LL_PrepareReceive>
 8005300:	e000      	b.n	8005304 <MSC_BOT_SendCSW+0x60>
    return;
 8005302:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	53425355 	.word	0x53425355
 8005310:	2000006e 	.word	0x2000006e
 8005314:	2000006f 	.word	0x2000006f

08005318 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	32b0      	adds	r2, #176	; 0xb0
 800532a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800532e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d02a      	beq.n	800538c <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10e      	bne.n	800535e <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8005346:	2b00      	cmp	r3, #0
 8005348:	d009      	beq.n	800535e <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800534e:	2b00      	cmp	r3, #0
 8005350:	d105      	bne.n	800535e <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8005352:	4b10      	ldr	r3, [pc, #64]	; (8005394 <MSC_BOT_Abort+0x7c>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	4619      	mov	r1, r3
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f003 fa67 	bl	800882c <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800535e:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <MSC_BOT_Abort+0x80>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	4619      	mov	r1, r3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f003 fa61 	bl	800882c <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	7a5b      	ldrb	r3, [r3, #9]
 800536e:	2b02      	cmp	r3, #2
 8005370:	d10d      	bne.n	800538e <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8005372:	4b09      	ldr	r3, [pc, #36]	; (8005398 <MSC_BOT_Abort+0x80>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	4619      	mov	r1, r3
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f003 fa57 	bl	800882c <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800537e:	4b05      	ldr	r3, [pc, #20]	; (8005394 <MSC_BOT_Abort+0x7c>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	4619      	mov	r1, r3
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f003 fa51 	bl	800882c <USBD_LL_StallEP>
 800538a:	e000      	b.n	800538e <MSC_BOT_Abort+0x76>
    return;
 800538c:	bf00      	nop
  }
}
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	2000006f 	.word	0x2000006f
 8005398:	2000006e 	.word	0x2000006e

0800539c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	32b0      	adds	r2, #176	; 0xb0
 80053b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d01d      	beq.n	80053fa <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	7a5b      	ldrb	r3, [r3, #9]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d10c      	bne.n	80053e0 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80053c6:	4b10      	ldr	r3, [pc, #64]	; (8005408 <MSC_BOT_CplClrFeature+0x6c>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	4619      	mov	r1, r3
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f003 fa2d 	bl	800882c <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80053d2:	4b0e      	ldr	r3, [pc, #56]	; (800540c <MSC_BOT_CplClrFeature+0x70>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	4619      	mov	r1, r3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f003 fa27 	bl	800882c <USBD_LL_StallEP>
 80053de:	e00f      	b.n	8005400 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80053e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	da0a      	bge.n	80053fe <MSC_BOT_CplClrFeature+0x62>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	7a5b      	ldrb	r3, [r3, #9]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d006      	beq.n	80053fe <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80053f0:	2101      	movs	r1, #1
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff ff56 	bl	80052a4 <MSC_BOT_SendCSW>
 80053f8:	e002      	b.n	8005400 <MSC_BOT_CplClrFeature+0x64>
    return;
 80053fa:	bf00      	nop
 80053fc:	e000      	b.n	8005400 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 80053fe:	bf00      	nop
  }
}
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	2000006e 	.word	0x2000006e
 800540c:	2000006f 	.word	0x2000006f

08005410 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	460b      	mov	r3, r1
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	32b0      	adds	r2, #176	; 0xb0
 8005428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800542c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d102      	bne.n	800543a <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8005434:	f04f 33ff 	mov.w	r3, #4294967295
 8005438:	e168      	b.n	800570c <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2baa      	cmp	r3, #170	; 0xaa
 8005440:	f000 8144 	beq.w	80056cc <SCSI_ProcessCmd+0x2bc>
 8005444:	2baa      	cmp	r3, #170	; 0xaa
 8005446:	f300 8153 	bgt.w	80056f0 <SCSI_ProcessCmd+0x2e0>
 800544a:	2ba8      	cmp	r3, #168	; 0xa8
 800544c:	f000 812c 	beq.w	80056a8 <SCSI_ProcessCmd+0x298>
 8005450:	2ba8      	cmp	r3, #168	; 0xa8
 8005452:	f300 814d 	bgt.w	80056f0 <SCSI_ProcessCmd+0x2e0>
 8005456:	2b5a      	cmp	r3, #90	; 0x5a
 8005458:	f300 80c0 	bgt.w	80055dc <SCSI_ProcessCmd+0x1cc>
 800545c:	2b00      	cmp	r3, #0
 800545e:	f2c0 8147 	blt.w	80056f0 <SCSI_ProcessCmd+0x2e0>
 8005462:	2b5a      	cmp	r3, #90	; 0x5a
 8005464:	f200 8144 	bhi.w	80056f0 <SCSI_ProcessCmd+0x2e0>
 8005468:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <SCSI_ProcessCmd+0x60>)
 800546a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546e:	bf00      	nop
 8005470:	080055e3 	.word	0x080055e3
 8005474:	080056f1 	.word	0x080056f1
 8005478:	080056f1 	.word	0x080056f1
 800547c:	080055f5 	.word	0x080055f5
 8005480:	080056f1 	.word	0x080056f1
 8005484:	080056f1 	.word	0x080056f1
 8005488:	080056f1 	.word	0x080056f1
 800548c:	080056f1 	.word	0x080056f1
 8005490:	080056f1 	.word	0x080056f1
 8005494:	080056f1 	.word	0x080056f1
 8005498:	080056f1 	.word	0x080056f1
 800549c:	080056f1 	.word	0x080056f1
 80054a0:	080056f1 	.word	0x080056f1
 80054a4:	080056f1 	.word	0x080056f1
 80054a8:	080056f1 	.word	0x080056f1
 80054ac:	080056f1 	.word	0x080056f1
 80054b0:	080056f1 	.word	0x080056f1
 80054b4:	080056f1 	.word	0x080056f1
 80054b8:	08005607 	.word	0x08005607
 80054bc:	080056f1 	.word	0x080056f1
 80054c0:	080056f1 	.word	0x080056f1
 80054c4:	080056f1 	.word	0x080056f1
 80054c8:	080056f1 	.word	0x080056f1
 80054cc:	080056f1 	.word	0x080056f1
 80054d0:	080056f1 	.word	0x080056f1
 80054d4:	080056f1 	.word	0x080056f1
 80054d8:	0800563d 	.word	0x0800563d
 80054dc:	08005619 	.word	0x08005619
 80054e0:	080056f1 	.word	0x080056f1
 80054e4:	080056f1 	.word	0x080056f1
 80054e8:	0800562b 	.word	0x0800562b
 80054ec:	080056f1 	.word	0x080056f1
 80054f0:	080056f1 	.word	0x080056f1
 80054f4:	080056f1 	.word	0x080056f1
 80054f8:	080056f1 	.word	0x080056f1
 80054fc:	08005661 	.word	0x08005661
 8005500:	080056f1 	.word	0x080056f1
 8005504:	08005673 	.word	0x08005673
 8005508:	080056f1 	.word	0x080056f1
 800550c:	080056f1 	.word	0x080056f1
 8005510:	08005697 	.word	0x08005697
 8005514:	080056f1 	.word	0x080056f1
 8005518:	080056bb 	.word	0x080056bb
 800551c:	080056f1 	.word	0x080056f1
 8005520:	080056f1 	.word	0x080056f1
 8005524:	080056f1 	.word	0x080056f1
 8005528:	080056f1 	.word	0x080056f1
 800552c:	080056df 	.word	0x080056df
 8005530:	080056f1 	.word	0x080056f1
 8005534:	080056f1 	.word	0x080056f1
 8005538:	080056f1 	.word	0x080056f1
 800553c:	080056f1 	.word	0x080056f1
 8005540:	080056f1 	.word	0x080056f1
 8005544:	080056f1 	.word	0x080056f1
 8005548:	080056f1 	.word	0x080056f1
 800554c:	080056f1 	.word	0x080056f1
 8005550:	080056f1 	.word	0x080056f1
 8005554:	080056f1 	.word	0x080056f1
 8005558:	080056f1 	.word	0x080056f1
 800555c:	080056f1 	.word	0x080056f1
 8005560:	080056f1 	.word	0x080056f1
 8005564:	080056f1 	.word	0x080056f1
 8005568:	080056f1 	.word	0x080056f1
 800556c:	080056f1 	.word	0x080056f1
 8005570:	080056f1 	.word	0x080056f1
 8005574:	080056f1 	.word	0x080056f1
 8005578:	080056f1 	.word	0x080056f1
 800557c:	080056f1 	.word	0x080056f1
 8005580:	080056f1 	.word	0x080056f1
 8005584:	080056f1 	.word	0x080056f1
 8005588:	080056f1 	.word	0x080056f1
 800558c:	080056f1 	.word	0x080056f1
 8005590:	080056f1 	.word	0x080056f1
 8005594:	080056f1 	.word	0x080056f1
 8005598:	080056f1 	.word	0x080056f1
 800559c:	080056f1 	.word	0x080056f1
 80055a0:	080056f1 	.word	0x080056f1
 80055a4:	080056f1 	.word	0x080056f1
 80055a8:	080056f1 	.word	0x080056f1
 80055ac:	080056f1 	.word	0x080056f1
 80055b0:	080056f1 	.word	0x080056f1
 80055b4:	080056f1 	.word	0x080056f1
 80055b8:	080056f1 	.word	0x080056f1
 80055bc:	080056f1 	.word	0x080056f1
 80055c0:	080056f1 	.word	0x080056f1
 80055c4:	080056f1 	.word	0x080056f1
 80055c8:	080056f1 	.word	0x080056f1
 80055cc:	080056f1 	.word	0x080056f1
 80055d0:	080056f1 	.word	0x080056f1
 80055d4:	080056f1 	.word	0x080056f1
 80055d8:	0800564f 	.word	0x0800564f
 80055dc:	2b9e      	cmp	r3, #158	; 0x9e
 80055de:	d051      	beq.n	8005684 <SCSI_ProcessCmd+0x274>
 80055e0:	e086      	b.n	80056f0 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80055e2:	7afb      	ldrb	r3, [r7, #11]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	4619      	mov	r1, r3
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 f893 	bl	8005714 <SCSI_TestUnitReady>
 80055ee:	4603      	mov	r3, r0
 80055f0:	75fb      	strb	r3, [r7, #23]
      break;
 80055f2:	e089      	b.n	8005708 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80055f4:	7afb      	ldrb	r3, [r7, #11]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	4619      	mov	r1, r3
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 fb70 	bl	8005ce0 <SCSI_RequestSense>
 8005600:	4603      	mov	r3, r0
 8005602:	75fb      	strb	r3, [r7, #23]
      break;
 8005604:	e080      	b.n	8005708 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8005606:	7afb      	ldrb	r3, [r7, #11]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	4619      	mov	r1, r3
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f8db 	bl	80057c8 <SCSI_Inquiry>
 8005612:	4603      	mov	r3, r0
 8005614:	75fb      	strb	r3, [r7, #23]
      break;
 8005616:	e077      	b.n	8005708 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8005618:	7afb      	ldrb	r3, [r7, #11]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	4619      	mov	r1, r3
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 fc2c 	bl	8005e7c <SCSI_StartStopUnit>
 8005624:	4603      	mov	r3, r0
 8005626:	75fb      	strb	r3, [r7, #23]
      break;
 8005628:	e06e      	b.n	8005708 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800562a:	7afb      	ldrb	r3, [r7, #11]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	4619      	mov	r1, r3
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 fc78 	bl	8005f26 <SCSI_AllowPreventRemovable>
 8005636:	4603      	mov	r3, r0
 8005638:	75fb      	strb	r3, [r7, #23]
      break;
 800563a:	e065      	b.n	8005708 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800563c:	7afb      	ldrb	r3, [r7, #11]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	4619      	mov	r1, r3
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 faec 	bl	8005c20 <SCSI_ModeSense6>
 8005648:	4603      	mov	r3, r0
 800564a:	75fb      	strb	r3, [r7, #23]
      break;
 800564c:	e05c      	b.n	8005708 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800564e:	7afb      	ldrb	r3, [r7, #11]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	4619      	mov	r1, r3
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 fb13 	bl	8005c80 <SCSI_ModeSense10>
 800565a:	4603      	mov	r3, r0
 800565c:	75fb      	strb	r3, [r7, #23]
      break;
 800565e:	e053      	b.n	8005708 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8005660:	7afb      	ldrb	r3, [r7, #11]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	4619      	mov	r1, r3
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 fa5e 	bl	8005b28 <SCSI_ReadFormatCapacity>
 800566c:	4603      	mov	r3, r0
 800566e:	75fb      	strb	r3, [r7, #23]
      break;
 8005670:	e04a      	b.n	8005708 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8005672:	7afb      	ldrb	r3, [r7, #11]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	4619      	mov	r1, r3
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f923 	bl	80058c4 <SCSI_ReadCapacity10>
 800567e:	4603      	mov	r3, r0
 8005680:	75fb      	strb	r3, [r7, #23]
      break;
 8005682:	e041      	b.n	8005708 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8005684:	7afb      	ldrb	r3, [r7, #11]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	4619      	mov	r1, r3
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 f998 	bl	80059c0 <SCSI_ReadCapacity16>
 8005690:	4603      	mov	r3, r0
 8005692:	75fb      	strb	r3, [r7, #23]
      break;
 8005694:	e038      	b.n	8005708 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8005696:	7afb      	ldrb	r3, [r7, #11]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	4619      	mov	r1, r3
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 fc6f 	bl	8005f80 <SCSI_Read10>
 80056a2:	4603      	mov	r3, r0
 80056a4:	75fb      	strb	r3, [r7, #23]
      break;
 80056a6:	e02f      	b.n	8005708 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80056a8:	7afb      	ldrb	r3, [r7, #11]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	4619      	mov	r1, r3
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 fd10 	bl	80060d4 <SCSI_Read12>
 80056b4:	4603      	mov	r3, r0
 80056b6:	75fb      	strb	r3, [r7, #23]
      break;
 80056b8:	e026      	b.n	8005708 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80056ba:	7afb      	ldrb	r3, [r7, #11]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	4619      	mov	r1, r3
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 fdbb 	bl	800623c <SCSI_Write10>
 80056c6:	4603      	mov	r3, r0
 80056c8:	75fb      	strb	r3, [r7, #23]
      break;
 80056ca:	e01d      	b.n	8005708 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80056cc:	7afb      	ldrb	r3, [r7, #11]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	4619      	mov	r1, r3
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 fe88 	bl	80063e8 <SCSI_Write12>
 80056d8:	4603      	mov	r3, r0
 80056da:	75fb      	strb	r3, [r7, #23]
      break;
 80056dc:	e014      	b.n	8005708 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80056de:	7afb      	ldrb	r3, [r7, #11]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	4619      	mov	r1, r3
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 ff65 	bl	80065b4 <SCSI_Verify10>
 80056ea:	4603      	mov	r3, r0
 80056ec:	75fb      	strb	r3, [r7, #23]
      break;
 80056ee:	e00b      	b.n	8005708 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80056f0:	7af9      	ldrb	r1, [r7, #11]
 80056f2:	2320      	movs	r3, #32
 80056f4:	2205      	movs	r2, #5
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 fb75 	bl	8005de6 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	2202      	movs	r2, #2
 8005700:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8005702:	23ff      	movs	r3, #255	; 0xff
 8005704:	75fb      	strb	r3, [r7, #23]
      break;
 8005706:	bf00      	nop
  }

  return ret;
 8005708:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	460b      	mov	r3, r1
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	32b0      	adds	r2, #176	; 0xb0
 800572c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005730:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d102      	bne.n	800573e <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8005738:	f04f 33ff 	mov.w	r3, #4294967295
 800573c:	e03f      	b.n	80057be <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800574e:	2320      	movs	r3, #32
 8005750:	2205      	movs	r2, #5
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 fb47 	bl	8005de6 <SCSI_SenseCode>

    return -1;
 8005758:	f04f 33ff 	mov.w	r3, #4294967295
 800575c:	e02f      	b.n	80057be <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005764:	2b02      	cmp	r3, #2
 8005766:	d10b      	bne.n	8005780 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005768:	7af9      	ldrb	r1, [r7, #11]
 800576a:	233a      	movs	r3, #58	; 0x3a
 800576c:	2202      	movs	r2, #2
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 fb39 	bl	8005de6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2205      	movs	r2, #5
 8005778:	721a      	strb	r2, [r3, #8]
    return -1;
 800577a:	f04f 33ff 	mov.w	r3, #4294967295
 800577e:	e01e      	b.n	80057be <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	33b0      	adds	r3, #176	; 0xb0
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	7afa      	ldrb	r2, [r7, #11]
 8005794:	4610      	mov	r0, r2
 8005796:	4798      	blx	r3
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00b      	beq.n	80057b6 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800579e:	7af9      	ldrb	r1, [r7, #11]
 80057a0:	233a      	movs	r3, #58	; 0x3a
 80057a2:	2202      	movs	r2, #2
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 fb1e 	bl	8005de6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2205      	movs	r2, #5
 80057ae:	721a      	strb	r2, [r3, #8]

    return -1;
 80057b0:	f04f 33ff 	mov.w	r3, #4294967295
 80057b4:	e003      	b.n	80057be <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2200      	movs	r2, #0
 80057ba:	60da      	str	r2, [r3, #12]

  return 0;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	460b      	mov	r3, r1
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	32b0      	adds	r2, #176	; 0xb0
 80057e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d102      	bne.n	80057f2 <SCSI_Inquiry+0x2a>
  {
    return -1;
 80057ec:	f04f 33ff 	mov.w	r3, #4294967295
 80057f0:	e05f      	b.n	80058b2 <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005802:	2320      	movs	r3, #32
 8005804:	2205      	movs	r2, #5
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f000 faed 	bl	8005de6 <SCSI_SenseCode>
    return -1;
 800580c:	f04f 33ff 	mov.w	r3, #4294967295
 8005810:	e04f      	b.n	80058b2 <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3301      	adds	r3, #1
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d020      	beq.n	8005862 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3302      	adds	r3, #2
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d105      	bne.n	8005836 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800582a:	2206      	movs	r2, #6
 800582c:	4923      	ldr	r1, [pc, #140]	; (80058bc <SCSI_Inquiry+0xf4>)
 800582e:	69b8      	ldr	r0, [r7, #24]
 8005830:	f001 f846 	bl	80068c0 <SCSI_UpdateBotData>
 8005834:	e03c      	b.n	80058b0 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3302      	adds	r3, #2
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b80      	cmp	r3, #128	; 0x80
 800583e:	d105      	bne.n	800584c <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8005840:	2208      	movs	r2, #8
 8005842:	491f      	ldr	r1, [pc, #124]	; (80058c0 <SCSI_Inquiry+0xf8>)
 8005844:	69b8      	ldr	r0, [r7, #24]
 8005846:	f001 f83b 	bl	80068c0 <SCSI_UpdateBotData>
 800584a:	e031      	b.n	80058b0 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005852:	2324      	movs	r3, #36	; 0x24
 8005854:	2205      	movs	r2, #5
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 fac5 	bl	8005de6 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800585c:	f04f 33ff 	mov.w	r3, #4294967295
 8005860:	e027      	b.n	80058b2 <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	33b0      	adds	r3, #176	; 0xb0
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8005872:	69d9      	ldr	r1, [r3, #28]
 8005874:	7afa      	ldrb	r2, [r7, #11]
 8005876:	4613      	mov	r3, r2
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800587e:	440b      	add	r3, r1
 8005880:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	3304      	adds	r3, #4
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	b29b      	uxth	r3, r3
 800588a:	3305      	adds	r3, #5
 800588c:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3304      	adds	r3, #4
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	b29b      	uxth	r3, r3
 8005896:	8bfa      	ldrh	r2, [r7, #30]
 8005898:	429a      	cmp	r2, r3
 800589a:	d303      	bcc.n	80058a4 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3304      	adds	r3, #4
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80058a4:	8bfb      	ldrh	r3, [r7, #30]
 80058a6:	461a      	mov	r2, r3
 80058a8:	6979      	ldr	r1, [r7, #20]
 80058aa:	69b8      	ldr	r0, [r7, #24]
 80058ac:	f001 f808 	bl	80068c0 <SCSI_UpdateBotData>
  }

  return 0;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3720      	adds	r7, #32
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000070 	.word	0x20000070
 80058c0:	20000078 	.word	0x20000078

080058c4 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	460b      	mov	r3, r1
 80058ce:	607a      	str	r2, [r7, #4]
 80058d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	32b0      	adds	r2, #176	; 0xb0
 80058dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d102      	bne.n	80058ee <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 80058e8:	f04f 33ff 	mov.w	r3, #4294967295
 80058ec:	e064      	b.n	80059b8 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	33b0      	adds	r3, #176	; 0xb0
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800590c:	7af8      	ldrb	r0, [r7, #11]
 800590e:	4798      	blx	r3
 8005910:	4603      	mov	r3, r0
 8005912:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005914:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <SCSI_ReadCapacity10+0x62>
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005922:	2b02      	cmp	r3, #2
 8005924:	d108      	bne.n	8005938 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005926:	7af9      	ldrb	r1, [r7, #11]
 8005928:	233a      	movs	r3, #58	; 0x3a
 800592a:	2202      	movs	r2, #2
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 fa5a 	bl	8005de6 <SCSI_SenseCode>
    return -1;
 8005932:	f04f 33ff 	mov.w	r3, #4294967295
 8005936:	e03f      	b.n	80059b8 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800593e:	3b01      	subs	r3, #1
 8005940:	0e1b      	lsrs	r3, r3, #24
 8005942:	b2da      	uxtb	r2, r3
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800594e:	3b01      	subs	r3, #1
 8005950:	0c1b      	lsrs	r3, r3, #16
 8005952:	b2da      	uxtb	r2, r3
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800595e:	3b01      	subs	r3, #1
 8005960:	0a1b      	lsrs	r3, r3, #8
 8005962:	b2da      	uxtb	r2, r3
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800596e:	b2db      	uxtb	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	b2da      	uxtb	r2, r3
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800597e:	161b      	asrs	r3, r3, #24
 8005980:	b2da      	uxtb	r2, r3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800598c:	141b      	asrs	r3, r3, #16
 800598e:	b2da      	uxtb	r2, r3
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800599a:	0a1b      	lsrs	r3, r3, #8
 800599c:	b29b      	uxth	r3, r3
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	2208      	movs	r2, #8
 80059b4:	60da      	str	r2, [r3, #12]

  return 0;
 80059b6:	2300      	movs	r3, #0

}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b088      	sub	sp, #32
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	460b      	mov	r3, r1
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	32b0      	adds	r2, #176	; 0xb0
 80059d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059dc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d102      	bne.n	80059ea <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 80059e4:	f04f 33ff 	mov.w	r3, #4294967295
 80059e8:	e09a      	b.n	8005b20 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	33b0      	adds	r3, #176	; 0xb0
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8005a08:	7af8      	ldrb	r0, [r7, #11]
 8005a0a:	4798      	blx	r3
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005a10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <SCSI_ReadCapacity16+0x62>
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d108      	bne.n	8005a34 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005a22:	7af9      	ldrb	r1, [r7, #11]
 8005a24:	233a      	movs	r3, #58	; 0x3a
 8005a26:	2202      	movs	r2, #2
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f9dc 	bl	8005de6 <SCSI_SenseCode>
    return -1;
 8005a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a32:	e075      	b.n	8005b20 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	330a      	adds	r3, #10
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	330b      	adds	r3, #11
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005a44:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	330c      	adds	r3, #12
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005a4e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	320d      	adds	r2, #13
 8005a54:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8005a56:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61fb      	str	r3, [r7, #28]
 8005a60:	e008      	b.n	8005a74 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	4413      	add	r3, r2
 8005a68:	3310      	adds	r3, #16
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	3301      	adds	r3, #1
 8005a72:	61fb      	str	r3, [r7, #28]
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	69fa      	ldr	r2, [r7, #28]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d3f1      	bcc.n	8005a62 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005a84:	3b01      	subs	r3, #1
 8005a86:	0e1b      	lsrs	r3, r3, #24
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005a94:	3b01      	subs	r3, #1
 8005a96:	0c1b      	lsrs	r3, r3, #16
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	0a1b      	lsrs	r3, r3, #8
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005ac4:	161b      	asrs	r3, r3, #24
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005ad2:	141b      	asrs	r3, r3, #16
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005ae0:	0a1b      	lsrs	r3, r3, #8
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	330a      	adds	r3, #10
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	330b      	adds	r3, #11
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005b06:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	330c      	adds	r3, #12
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005b10:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	320d      	adds	r2, #13
 8005b16:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8005b18:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	60da      	str	r2, [r3, #12]

  return 0;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3720      	adds	r7, #32
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	460b      	mov	r3, r1
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	32b0      	adds	r2, #176	; 0xb0
 8005b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b44:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d102      	bne.n	8005b52 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8005b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b50:	e061      	b.n	8005c16 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	33b0      	adds	r3, #176	; 0xb0
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f107 0214 	add.w	r2, r7, #20
 8005b68:	f107 0110 	add.w	r1, r7, #16
 8005b6c:	7af8      	ldrb	r0, [r7, #11]
 8005b6e:	4798      	blx	r3
 8005b70:	4603      	mov	r3, r0
 8005b72:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005b74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d104      	bne.n	8005b86 <SCSI_ReadFormatCapacity+0x5e>
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d108      	bne.n	8005b98 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005b86:	7af9      	ldrb	r1, [r7, #11]
 8005b88:	233a      	movs	r3, #58	; 0x3a
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f92a 	bl	8005de6 <SCSI_SenseCode>
    return -1;
 8005b92:	f04f 33ff 	mov.w	r3, #4294967295
 8005b96:	e03e      	b.n	8005c16 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8005b98:	2300      	movs	r3, #0
 8005b9a:	83fb      	strh	r3, [r7, #30]
 8005b9c:	e007      	b.n	8005bae <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8005b9e:	8bfb      	ldrh	r3, [r7, #30]
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8005ba8:	8bfb      	ldrh	r3, [r7, #30]
 8005baa:	3301      	adds	r3, #1
 8005bac:	83fb      	strh	r3, [r7, #30]
 8005bae:	8bfb      	ldrh	r3, [r7, #30]
 8005bb0:	2b0b      	cmp	r3, #11
 8005bb2:	d9f4      	bls.n	8005b9e <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	2208      	movs	r2, #8
 8005bb8:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	0e1b      	lsrs	r3, r3, #24
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	0c1b      	lsrs	r3, r3, #16
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	0a1b      	lsrs	r3, r3, #8
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2202      	movs	r2, #2
 8005bee:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8005bf0:	8abb      	ldrh	r3, [r7, #20]
 8005bf2:	141b      	asrs	r3, r3, #16
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8005bfa:	8abb      	ldrh	r3, [r7, #20]
 8005bfc:	0a1b      	lsrs	r3, r3, #8
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8005c06:	8abb      	ldrh	r3, [r7, #20]
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	220c      	movs	r2, #12
 8005c12:	60da      	str	r2, [r3, #12]

  return 0;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3720      	adds	r7, #32
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	32b0      	adds	r2, #176	; 0xb0
 8005c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c3c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8005c3e:	2317      	movs	r3, #23
 8005c40:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d102      	bne.n	8005c4e <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8005c48:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4c:	e011      	b.n	8005c72 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3304      	adds	r3, #4
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	8afa      	ldrh	r2, [r7, #22]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d303      	bcc.n	8005c64 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8005c64:	8afb      	ldrh	r3, [r7, #22]
 8005c66:	461a      	mov	r2, r3
 8005c68:	4904      	ldr	r1, [pc, #16]	; (8005c7c <SCSI_ModeSense6+0x5c>)
 8005c6a:	6938      	ldr	r0, [r7, #16]
 8005c6c:	f000 fe28 	bl	80068c0 <SCSI_UpdateBotData>

  return 0;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20000080 	.word	0x20000080

08005c80 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	32b0      	adds	r2, #176	; 0xb0
 8005c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8005c9e:	231b      	movs	r3, #27
 8005ca0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d102      	bne.n	8005cae <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8005ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cac:	e011      	b.n	8005cd2 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	8afa      	ldrh	r2, [r7, #22]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d303      	bcc.n	8005cc4 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8005cc4:	8afb      	ldrh	r3, [r7, #22]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	4904      	ldr	r1, [pc, #16]	; (8005cdc <SCSI_ModeSense10+0x5c>)
 8005cca:	6938      	ldr	r0, [r7, #16]
 8005ccc:	f000 fdf8 	bl	80068c0 <SCSI_UpdateBotData>

  return 0;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	20000098 	.word	0x20000098

08005ce0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	32b0      	adds	r2, #176	; 0xb0
 8005cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfc:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <SCSI_RequestSense+0x2a>
  {
    return -1;
 8005d04:	f04f 33ff 	mov.w	r3, #4294967295
 8005d08:	e069      	b.n	8005dde <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005d1a:	2320      	movs	r3, #32
 8005d1c:	2205      	movs	r2, #5
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 f861 	bl	8005de6 <SCSI_SenseCode>
    return -1;
 8005d24:	f04f 33ff 	mov.w	r3, #4294967295
 8005d28:	e059      	b.n	8005dde <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	75fb      	strb	r3, [r7, #23]
 8005d2e:	e007      	b.n	8005d40 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	4413      	add	r3, r2
 8005d36:	2200      	movs	r2, #0
 8005d38:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	75fb      	strb	r3, [r7, #23]
 8005d40:	7dfb      	ldrb	r3, [r7, #23]
 8005d42:	2b11      	cmp	r3, #17
 8005d44:	d9f4      	bls.n	8005d30 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	2270      	movs	r2, #112	; 0x70
 8005d4a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	220c      	movs	r2, #12
 8005d50:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d02e      	beq.n	8005dc0 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005d68:	461a      	mov	r2, r3
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	3248      	adds	r2, #72	; 0x48
 8005d6e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	3348      	adds	r3, #72	; 0x48
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	4413      	add	r3, r2
 8005d84:	791a      	ldrb	r2, [r3, #4]
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	3348      	adds	r3, #72	; 0x48
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	4413      	add	r3, r2
 8005d98:	795a      	ldrb	r2, [r3, #5]
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005da4:	3301      	adds	r3, #1
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d103      	bne.n	8005dc0 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	2212      	movs	r2, #18
 8005dc4:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b12      	cmp	r3, #18
 8005dce:	d805      	bhi.n	8005ddc <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b085      	sub	sp, #20
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	4608      	mov	r0, r1
 8005df0:	4611      	mov	r1, r2
 8005df2:	461a      	mov	r2, r3
 8005df4:	4603      	mov	r3, r0
 8005df6:	70fb      	strb	r3, [r7, #3]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	70bb      	strb	r3, [r7, #2]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	32b0      	adds	r2, #176	; 0xb0
 8005e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d02c      	beq.n	8005e70 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3248      	adds	r2, #72	; 0x48
 8005e22:	78b9      	ldrb	r1, [r7, #2]
 8005e24:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	3348      	adds	r3, #72	; 0x48
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	4413      	add	r3, r2
 8005e36:	787a      	ldrb	r2, [r7, #1]
 8005e38:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	3348      	adds	r3, #72	; 0x48
 8005e44:	00db      	lsls	r3, r3, #3
 8005e46:	4413      	add	r3, r2
 8005e48:	2200      	movs	r2, #0
 8005e4a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005e52:	3301      	adds	r3, #1
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d105      	bne.n	8005e72 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8005e6e:	e000      	b.n	8005e72 <SCSI_SenseCode+0x8c>
    return;
 8005e70:	bf00      	nop
  }
}
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	460b      	mov	r3, r1
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	32b0      	adds	r2, #176	; 0xb0
 8005e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e98:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d102      	bne.n	8005ea6 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8005ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea4:	e03b      	b.n	8005f1e <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d10f      	bne.n	8005ed0 <SCSI_StartStopUnit+0x54>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d108      	bne.n	8005ed0 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8005ebe:	7af9      	ldrb	r1, [r7, #11]
 8005ec0:	2324      	movs	r3, #36	; 0x24
 8005ec2:	2205      	movs	r2, #5
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f7ff ff8e 	bl	8005de6 <SCSI_SenseCode>

    return -1;
 8005eca:	f04f 33ff 	mov.w	r3, #4294967295
 8005ece:	e026      	b.n	8005f1e <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d104      	bne.n	8005ee8 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005ee6:	e016      	b.n	8005f16 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3304      	adds	r3, #4
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d104      	bne.n	8005f00 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2202      	movs	r2, #2
 8005efa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005efe:	e00a      	b.n	8005f16 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3304      	adds	r3, #4
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d103      	bne.n	8005f16 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	60da      	str	r2, [r3, #12]

  return 0;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b087      	sub	sp, #28
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	460b      	mov	r3, r1
 8005f30:	607a      	str	r2, [r7, #4]
 8005f32:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	32b0      	adds	r2, #176	; 0xb0
 8005f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f42:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d102      	bne.n	8005f50 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8005f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f4e:	e011      	b.n	8005f74 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3304      	adds	r3, #4
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d104      	bne.n	8005f64 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005f62:	e003      	b.n	8005f6c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	60da      	str	r2, [r3, #12]

  return 0;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	371c      	adds	r7, #28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	32b0      	adds	r2, #176	; 0xb0
 8005f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d102      	bne.n	8005faa <SCSI_Read10+0x2a>
  {
    return -1;
 8005fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa8:	e090      	b.n	80060cc <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	7a1b      	ldrb	r3, [r3, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f040 8082 	bne.w	80060b8 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005fba:	b25b      	sxtb	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	db0a      	blt.n	8005fd6 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005fc6:	2320      	movs	r3, #32
 8005fc8:	2205      	movs	r2, #5
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f7ff ff0b 	bl	8005de6 <SCSI_SenseCode>
      return -1;
 8005fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd4:	e07a      	b.n	80060cc <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d108      	bne.n	8005ff2 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005fe0:	7af9      	ldrb	r1, [r7, #11]
 8005fe2:	233a      	movs	r3, #58	; 0x3a
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f7ff fefd 	bl	8005de6 <SCSI_SenseCode>

      return -1;
 8005fec:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff0:	e06c      	b.n	80060cc <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	33b0      	adds	r3, #176	; 0xb0
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	7afa      	ldrb	r2, [r7, #11]
 8006006:	4610      	mov	r0, r2
 8006008:	4798      	blx	r3
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d008      	beq.n	8006022 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006010:	7af9      	ldrb	r1, [r7, #11]
 8006012:	233a      	movs	r3, #58	; 0x3a
 8006014:	2202      	movs	r2, #2
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f7ff fee5 	bl	8005de6 <SCSI_SenseCode>
      return -1;
 800601c:	f04f 33ff 	mov.w	r3, #4294967295
 8006020:	e054      	b.n	80060cc <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	3302      	adds	r3, #2
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3303      	adds	r3, #3
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006032:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3304      	adds	r3, #4
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800603c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	3205      	adds	r2, #5
 8006042:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8006044:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3307      	adds	r3, #7
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	021b      	lsls	r3, r3, #8
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	3208      	adds	r2, #8
 8006058:	7812      	ldrb	r2, [r2, #0]
 800605a:	431a      	orrs	r2, r3
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800606e:	7af9      	ldrb	r1, [r7, #11]
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 fadc 	bl	800662e <SCSI_CheckAddressRange>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	da02      	bge.n	8006082 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800607c:	f04f 33ff 	mov.w	r3, #4294967295
 8006080:	e024      	b.n	80060cc <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800608e:	6979      	ldr	r1, [r7, #20]
 8006090:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8006094:	fb01 f303 	mul.w	r3, r1, r3
 8006098:	429a      	cmp	r2, r3
 800609a:	d00a      	beq.n	80060b2 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80060a2:	2320      	movs	r3, #32
 80060a4:	2205      	movs	r2, #5
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f7ff fe9d 	bl	8005de6 <SCSI_SenseCode>
      return -1;
 80060ac:	f04f 33ff 	mov.w	r3, #4294967295
 80060b0:	e00c      	b.n	80060cc <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2202      	movs	r2, #2
 80060b6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060be:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80060c0:	7afb      	ldrb	r3, [r7, #11]
 80060c2:	4619      	mov	r1, r3
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 fadf 	bl	8006688 <SCSI_ProcessRead>
 80060ca:	4603      	mov	r3, r0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	460b      	mov	r3, r1
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	32b0      	adds	r2, #176	; 0xb0
 80060ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d102      	bne.n	80060fe <SCSI_Read12+0x2a>
  {
    return -1;
 80060f8:	f04f 33ff 	mov.w	r3, #4294967295
 80060fc:	e09a      	b.n	8006234 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	7a1b      	ldrb	r3, [r3, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	f040 808c 	bne.w	8006220 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800610e:	b25b      	sxtb	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	db0a      	blt.n	800612a <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800611a:	2320      	movs	r3, #32
 800611c:	2205      	movs	r2, #5
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7ff fe61 	bl	8005de6 <SCSI_SenseCode>
      return -1;
 8006124:	f04f 33ff 	mov.w	r3, #4294967295
 8006128:	e084      	b.n	8006234 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006130:	2b02      	cmp	r3, #2
 8006132:	d108      	bne.n	8006146 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006134:	7af9      	ldrb	r1, [r7, #11]
 8006136:	233a      	movs	r3, #58	; 0x3a
 8006138:	2202      	movs	r2, #2
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f7ff fe53 	bl	8005de6 <SCSI_SenseCode>
      return -1;
 8006140:	f04f 33ff 	mov.w	r3, #4294967295
 8006144:	e076      	b.n	8006234 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	33b0      	adds	r3, #176	; 0xb0
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	7afa      	ldrb	r2, [r7, #11]
 800615a:	4610      	mov	r0, r2
 800615c:	4798      	blx	r3
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d008      	beq.n	8006176 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006164:	7af9      	ldrb	r1, [r7, #11]
 8006166:	233a      	movs	r3, #58	; 0x3a
 8006168:	2202      	movs	r2, #2
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f7ff fe3b 	bl	8005de6 <SCSI_SenseCode>
      return -1;
 8006170:	f04f 33ff 	mov.w	r3, #4294967295
 8006174:	e05e      	b.n	8006234 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	3302      	adds	r3, #2
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3303      	adds	r3, #3
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006186:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3304      	adds	r3, #4
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006190:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	3205      	adds	r2, #5
 8006196:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8006198:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3306      	adds	r3, #6
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3307      	adds	r3, #7
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80061b0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	3308      	adds	r3, #8
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80061ba:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	3209      	adds	r2, #9
 80061c0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80061c2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80061d6:	7af9      	ldrb	r1, [r7, #11]
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 fa28 	bl	800662e <SCSI_CheckAddressRange>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	da02      	bge.n	80061ea <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80061e4:	f04f 33ff 	mov.w	r3, #4294967295
 80061e8:	e024      	b.n	8006234 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80061f6:	6979      	ldr	r1, [r7, #20]
 80061f8:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80061fc:	fb01 f303 	mul.w	r3, r1, r3
 8006200:	429a      	cmp	r2, r3
 8006202:	d00a      	beq.n	800621a <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800620a:	2320      	movs	r3, #32
 800620c:	2205      	movs	r2, #5
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f7ff fde9 	bl	8005de6 <SCSI_SenseCode>
      return -1;
 8006214:	f04f 33ff 	mov.w	r3, #4294967295
 8006218:	e00c      	b.n	8006234 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2202      	movs	r2, #2
 800621e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006226:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8006228:	7afb      	ldrb	r3, [r7, #11]
 800622a:	4619      	mov	r1, r3
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 fa2b 	bl	8006688 <SCSI_ProcessRead>
 8006232:	4603      	mov	r3, r0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	460b      	mov	r3, r1
 8006246:	607a      	str	r2, [r7, #4]
 8006248:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	32b0      	adds	r2, #176	; 0xb0
 8006254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006258:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d102      	bne.n	8006266 <SCSI_Write10+0x2a>
  {
    return -1;
 8006260:	f04f 33ff 	mov.w	r3, #4294967295
 8006264:	e0ba      	b.n	80063dc <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	7a1b      	ldrb	r3, [r3, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	f040 80b0 	bne.w	80063d0 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10a      	bne.n	8006290 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006280:	2320      	movs	r3, #32
 8006282:	2205      	movs	r2, #5
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff fdae 	bl	8005de6 <SCSI_SenseCode>
      return -1;
 800628a:	f04f 33ff 	mov.w	r3, #4294967295
 800628e:	e0a5      	b.n	80063dc <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8006296:	b25b      	sxtb	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	da0a      	bge.n	80062b2 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80062a2:	2320      	movs	r3, #32
 80062a4:	2205      	movs	r2, #5
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f7ff fd9d 	bl	8005de6 <SCSI_SenseCode>
      return -1;
 80062ac:	f04f 33ff 	mov.w	r3, #4294967295
 80062b0:	e094      	b.n	80063dc <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	33b0      	adds	r3, #176	; 0xb0
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4413      	add	r3, r2
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	7afa      	ldrb	r2, [r7, #11]
 80062c6:	4610      	mov	r0, r2
 80062c8:	4798      	blx	r3
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d008      	beq.n	80062e2 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80062d0:	7af9      	ldrb	r1, [r7, #11]
 80062d2:	233a      	movs	r3, #58	; 0x3a
 80062d4:	2202      	movs	r2, #2
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f7ff fd85 	bl	8005de6 <SCSI_SenseCode>
      return -1;
 80062dc:	f04f 33ff 	mov.w	r3, #4294967295
 80062e0:	e07c      	b.n	80063dc <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	33b0      	adds	r3, #176	; 0xb0
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	7afa      	ldrb	r2, [r7, #11]
 80062f6:	4610      	mov	r0, r2
 80062f8:	4798      	blx	r3
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d008      	beq.n	8006312 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8006300:	7af9      	ldrb	r1, [r7, #11]
 8006302:	2327      	movs	r3, #39	; 0x27
 8006304:	2202      	movs	r2, #2
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f7ff fd6d 	bl	8005de6 <SCSI_SenseCode>
      return -1;
 800630c:	f04f 33ff 	mov.w	r3, #4294967295
 8006310:	e064      	b.n	80063dc <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3302      	adds	r3, #2
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3303      	adds	r3, #3
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006322:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3304      	adds	r3, #4
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800632c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	3205      	adds	r2, #5
 8006332:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8006334:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3307      	adds	r3, #7
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	3208      	adds	r2, #8
 8006348:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800634a:	431a      	orrs	r2, r3
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800635e:	7af9      	ldrb	r1, [r7, #11]
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 f964 	bl	800662e <SCSI_CheckAddressRange>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	da02      	bge.n	8006372 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800636c:	f04f 33ff 	mov.w	r3, #4294967295
 8006370:	e034      	b.n	80063dc <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800637e:	fb02 f303 	mul.w	r3, r2, r3
 8006382:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	429a      	cmp	r2, r3
 800638e:	d00a      	beq.n	80063a6 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006396:	2320      	movs	r3, #32
 8006398:	2205      	movs	r2, #5
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f7ff fd23 	bl	8005de6 <SCSI_SenseCode>
      return -1;
 80063a0:	f04f 33ff 	mov.w	r3, #4294967295
 80063a4:	e01a      	b.n	80063dc <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ac:	bf28      	it	cs
 80063ae:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80063b2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2201      	movs	r2, #1
 80063b8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80063ba:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <SCSI_Write10+0x1a8>)
 80063bc:	7819      	ldrb	r1, [r3, #0]
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f103 0210 	add.w	r2, r3, #16
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f002 fb36 	bl	8008a38 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80063cc:	2300      	movs	r3, #0
 80063ce:	e005      	b.n	80063dc <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 80063d0:	7afb      	ldrb	r3, [r7, #11]
 80063d2:	4619      	mov	r1, r3
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 f9dd 	bl	8006794 <SCSI_ProcessWrite>
 80063da:	4603      	mov	r3, r0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	2000006f 	.word	0x2000006f

080063e8 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	460b      	mov	r3, r1
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	32b0      	adds	r2, #176	; 0xb0
 8006400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006404:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d102      	bne.n	8006412 <SCSI_Write12+0x2a>
  {
    return -1;
 800640c:	f04f 33ff 	mov.w	r3, #4294967295
 8006410:	e0ca      	b.n	80065a8 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	7a1b      	ldrb	r3, [r3, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	f040 80c0 	bne.w	800659c <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10a      	bne.n	800643c <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800642c:	2320      	movs	r3, #32
 800642e:	2205      	movs	r2, #5
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f7ff fcd8 	bl	8005de6 <SCSI_SenseCode>
      return -1;
 8006436:	f04f 33ff 	mov.w	r3, #4294967295
 800643a:	e0b5      	b.n	80065a8 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8006442:	b25b      	sxtb	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	da0a      	bge.n	800645e <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800644e:	2320      	movs	r3, #32
 8006450:	2205      	movs	r2, #5
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f7ff fcc7 	bl	8005de6 <SCSI_SenseCode>
      return -1;
 8006458:	f04f 33ff 	mov.w	r3, #4294967295
 800645c:	e0a4      	b.n	80065a8 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	33b0      	adds	r3, #176	; 0xb0
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	7afa      	ldrb	r2, [r7, #11]
 8006472:	4610      	mov	r0, r2
 8006474:	4798      	blx	r3
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00b      	beq.n	8006494 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800647c:	7af9      	ldrb	r1, [r7, #11]
 800647e:	233a      	movs	r3, #58	; 0x3a
 8006480:	2202      	movs	r2, #2
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f7ff fcaf 	bl	8005de6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2205      	movs	r2, #5
 800648c:	721a      	strb	r2, [r3, #8]
      return -1;
 800648e:	f04f 33ff 	mov.w	r3, #4294967295
 8006492:	e089      	b.n	80065a8 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	33b0      	adds	r3, #176	; 0xb0
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	7afa      	ldrb	r2, [r7, #11]
 80064a8:	4610      	mov	r0, r2
 80064aa:	4798      	blx	r3
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00b      	beq.n	80064ca <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80064b2:	7af9      	ldrb	r1, [r7, #11]
 80064b4:	2327      	movs	r3, #39	; 0x27
 80064b6:	2202      	movs	r2, #2
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f7ff fc94 	bl	8005de6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2205      	movs	r2, #5
 80064c2:	721a      	strb	r2, [r3, #8]
      return -1;
 80064c4:	f04f 33ff 	mov.w	r3, #4294967295
 80064c8:	e06e      	b.n	80065a8 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	3302      	adds	r3, #2
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3303      	adds	r3, #3
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80064da:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3304      	adds	r3, #4
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80064e4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	3205      	adds	r2, #5
 80064ea:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80064ec:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3306      	adds	r3, #6
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3307      	adds	r3, #7
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006504:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	3308      	adds	r3, #8
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800650e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	3209      	adds	r2, #9
 8006514:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8006516:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800652a:	7af9      	ldrb	r1, [r7, #11]
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 f87e 	bl	800662e <SCSI_CheckAddressRange>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	da02      	bge.n	800653e <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006538:	f04f 33ff 	mov.w	r3, #4294967295
 800653c:	e034      	b.n	80065a8 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800654a:	fb02 f303 	mul.w	r3, r2, r3
 800654e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	429a      	cmp	r2, r3
 800655a:	d00a      	beq.n	8006572 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006562:	2320      	movs	r3, #32
 8006564:	2205      	movs	r2, #5
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f7ff fc3d 	bl	8005de6 <SCSI_SenseCode>
      return -1;
 800656c:	f04f 33ff 	mov.w	r3, #4294967295
 8006570:	e01a      	b.n	80065a8 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006578:	bf28      	it	cs
 800657a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800657e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	2201      	movs	r2, #1
 8006584:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8006586:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <SCSI_Write12+0x1c8>)
 8006588:	7819      	ldrb	r1, [r3, #0]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f103 0210 	add.w	r2, r3, #16
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f002 fa50 	bl	8008a38 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8006598:	2300      	movs	r3, #0
 800659a:	e005      	b.n	80065a8 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800659c:	7afb      	ldrb	r3, [r7, #11]
 800659e:	4619      	mov	r1, r3
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f8f7 	bl	8006794 <SCSI_ProcessWrite>
 80065a6:	4603      	mov	r3, r0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	2000006f 	.word	0x2000006f

080065b4 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	460b      	mov	r3, r1
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	32b0      	adds	r2, #176	; 0xb0
 80065cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d102      	bne.n	80065de <SCSI_Verify10+0x2a>
  {
    return -1;
 80065d8:	f04f 33ff 	mov.w	r3, #4294967295
 80065dc:	e023      	b.n	8006626 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	3301      	adds	r3, #1
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d008      	beq.n	80065fe <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80065ec:	7af9      	ldrb	r1, [r7, #11]
 80065ee:	2324      	movs	r3, #36	; 0x24
 80065f0:	2205      	movs	r2, #5
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f7ff fbf7 	bl	8005de6 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80065f8:	f04f 33ff 	mov.w	r3, #4294967295
 80065fc:	e013      	b.n	8006626 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800660a:	7af9      	ldrb	r1, [r7, #11]
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 f80e 	bl	800662e <SCSI_CheckAddressRange>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	da02      	bge.n	800661e <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8006618:	f04f 33ff 	mov.w	r3, #4294967295
 800661c:	e003      	b.n	8006626 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2200      	movs	r2, #0
 8006622:	60da      	str	r2, [r3, #12]

  return 0;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b086      	sub	sp, #24
 8006632:	af00      	add	r7, sp, #0
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	603b      	str	r3, [r7, #0]
 800663a:	460b      	mov	r3, r1
 800663c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	32b0      	adds	r2, #176	; 0xb0
 8006648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d102      	bne.n	800665a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8006654:	f04f 33ff 	mov.w	r3, #4294967295
 8006658:	e011      	b.n	800667e <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	441a      	add	r2, r3
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006666:	429a      	cmp	r2, r3
 8006668:	d908      	bls.n	800667c <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800666a:	7af9      	ldrb	r1, [r7, #11]
 800666c:	2321      	movs	r3, #33	; 0x21
 800666e:	2205      	movs	r2, #5
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f7ff fbb8 	bl	8005de6 <SCSI_SenseCode>
    return -1;
 8006676:	f04f 33ff 	mov.w	r3, #4294967295
 800667a:	e000      	b.n	800667e <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8006688:	b590      	push	{r4, r7, lr}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	32b0      	adds	r2, #176	; 0xb0
 800669e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d102      	bne.n	80066b0 <SCSI_ProcessRead+0x28>
  {
    return -1;
 80066aa:	f04f 33ff 	mov.w	r3, #4294967295
 80066ae:	e06a      	b.n	8006786 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80066bc:	fb02 f303 	mul.w	r3, r2, r3
 80066c0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c8:	bf28      	it	cs
 80066ca:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80066ce:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	33b0      	adds	r3, #176	; 0xb0
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	691c      	ldr	r4, [r3, #16]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f103 0110 	add.w	r1, r3, #16
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80066f4:	4618      	mov	r0, r3
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	78f8      	ldrb	r0, [r7, #3]
 8006700:	47a0      	blx	r4
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	da08      	bge.n	800671a <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8006708:	78f9      	ldrb	r1, [r7, #3]
 800670a:	2311      	movs	r3, #17
 800670c:	2204      	movs	r2, #4
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7ff fb69 	bl	8005de6 <SCSI_SenseCode>
    return -1;
 8006714:	f04f 33ff 	mov.w	r3, #4294967295
 8006718:	e035      	b.n	8006786 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800671a:	4b1d      	ldr	r3, [pc, #116]	; (8006790 <SCSI_ProcessRead+0x108>)
 800671c:	7819      	ldrb	r1, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f103 0210 	add.w	r2, r3, #16
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f002 f94e 	bl	80089c8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006738:	4619      	mov	r1, r3
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006740:	441a      	add	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006754:	4619      	mov	r1, r3
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	fbb3 f3f1 	udiv	r3, r3, r1
 800675c:	1ad2      	subs	r2, r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	1ad2      	subs	r2, r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800677a:	2b00      	cmp	r3, #0
 800677c:	d102      	bne.n	8006784 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2203      	movs	r2, #3
 8006782:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	bd90      	pop	{r4, r7, pc}
 800678e:	bf00      	nop
 8006790:	2000006e 	.word	0x2000006e

08006794 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8006794:	b590      	push	{r4, r7, lr}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	32b0      	adds	r2, #176	; 0xb0
 80067aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ae:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d102      	bne.n	80067bc <SCSI_ProcessWrite+0x28>
  {
    return -1;
 80067b6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ba:	e07a      	b.n	80068b2 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80067c8:	fb02 f303 	mul.w	r3, r2, r3
 80067cc:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d4:	bf28      	it	cs
 80067d6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80067da:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	33b0      	adds	r3, #176	; 0xb0
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	695c      	ldr	r4, [r3, #20]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f103 0110 	add.w	r1, r3, #16
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006800:	4618      	mov	r0, r3
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8006808:	b29b      	uxth	r3, r3
 800680a:	78f8      	ldrb	r0, [r7, #3]
 800680c:	47a0      	blx	r4
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	da08      	bge.n	8006826 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8006814:	78f9      	ldrb	r1, [r7, #3]
 8006816:	2303      	movs	r3, #3
 8006818:	2204      	movs	r2, #4
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7ff fae3 	bl	8005de6 <SCSI_SenseCode>
    return -1;
 8006820:	f04f 33ff 	mov.w	r3, #4294967295
 8006824:	e045      	b.n	80068b2 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006832:	4619      	mov	r1, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	fbb3 f3f1 	udiv	r3, r3, r1
 800683a:	441a      	add	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800684e:	4619      	mov	r1, r3
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	fbb3 f3f1 	udiv	r3, r3, r1
 8006856:	1ad2      	subs	r2, r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	1ad2      	subs	r2, r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006874:	2b00      	cmp	r3, #0
 8006876:	d104      	bne.n	8006882 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006878:	2100      	movs	r1, #0
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7fe fd12 	bl	80052a4 <MSC_BOT_SendCSW>
 8006880:	e016      	b.n	80068b0 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800688e:	fb02 f303 	mul.w	r3, r2, r3
 8006892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006896:	bf28      	it	cs
 8006898:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800689c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800689e:	4b07      	ldr	r3, [pc, #28]	; (80068bc <SCSI_ProcessWrite+0x128>)
 80068a0:	7819      	ldrb	r1, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f103 0210 	add.w	r2, r3, #16
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f002 f8c4 	bl	8008a38 <USBD_LL_PrepareReceive>
  }

  return 0;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd90      	pop	{r4, r7, pc}
 80068ba:	bf00      	nop
 80068bc:	2000006f 	.word	0x2000006f

080068c0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	4613      	mov	r3, r2
 80068cc:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80068ce:	88fb      	ldrh	r3, [r7, #6]
 80068d0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d102      	bne.n	80068de <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80068d8:	f04f 33ff 	mov.w	r3, #4294967295
 80068dc:	e013      	b.n	8006906 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80068de:	8afa      	ldrh	r2, [r7, #22]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80068e4:	e00b      	b.n	80068fe <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80068e6:	8afb      	ldrh	r3, [r7, #22]
 80068e8:	3b01      	subs	r3, #1
 80068ea:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80068ec:	8afb      	ldrh	r3, [r7, #22]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	441a      	add	r2, r3
 80068f2:	8afb      	ldrh	r3, [r7, #22]
 80068f4:	7811      	ldrb	r1, [r2, #0]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4413      	add	r3, r2
 80068fa:	460a      	mov	r2, r1
 80068fc:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80068fe:	8afb      	ldrh	r3, [r7, #22]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1f0      	bne.n	80068e6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b086      	sub	sp, #24
 8006916:	af00      	add	r7, sp, #0
 8006918:	60f8      	str	r0, [r7, #12]
 800691a:	60b9      	str	r1, [r7, #8]
 800691c:	4613      	mov	r3, r2
 800691e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006926:	2303      	movs	r3, #3
 8006928:	e01f      	b.n	800696a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d003      	beq.n	8006950 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	79fa      	ldrb	r2, [r7, #7]
 800695c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f001 fe3c 	bl	80085dc <USBD_LL_Init>
 8006964:	4603      	mov	r3, r0
 8006966:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006968:	7dfb      	ldrb	r3, [r7, #23]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006986:	2303      	movs	r3, #3
 8006988:	e025      	b.n	80069d6 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	32ae      	adds	r2, #174	; 0xae
 800699c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00f      	beq.n	80069c6 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	32ae      	adds	r2, #174	; 0xae
 80069b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b6:	f107 020e 	add.w	r2, r7, #14
 80069ba:	4610      	mov	r0, r2
 80069bc:	4798      	blx	r3
 80069be:	4602      	mov	r2, r0
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b082      	sub	sp, #8
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f001 fe44 	bl	8008674 <USBD_LL_Start>
 80069ec:	4603      	mov	r3, r0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069fe:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	460b      	mov	r3, r1
 8006a16:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d009      	beq.n	8006a3a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	78fa      	ldrb	r2, [r7, #3]
 8006a30:	4611      	mov	r1, r2
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	4798      	blx	r3
 8006a36:	4603      	mov	r3, r0
 8006a38:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	78fa      	ldrb	r2, [r7, #3]
 8006a5e:	4611      	mov	r1, r2
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	4798      	blx	r3
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f001 f939 	bl	8007d02 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d01a      	beq.n	8006aea <USBD_LL_SetupStage+0x72>
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d822      	bhi.n	8006afe <USBD_LL_SetupStage+0x86>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <USBD_LL_SetupStage+0x4a>
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d00a      	beq.n	8006ad6 <USBD_LL_SetupStage+0x5e>
 8006ac0:	e01d      	b.n	8006afe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fb66 	bl	800719c <USBD_StdDevReq>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad4:	e020      	b.n	8006b18 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fbce 	bl	8007280 <USBD_StdItfReq>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ae8:	e016      	b.n	8006b18 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fc30 	bl	8007358 <USBD_StdEPReq>
 8006af8:	4603      	mov	r3, r0
 8006afa:	73fb      	strb	r3, [r7, #15]
      break;
 8006afc:	e00c      	b.n	8006b18 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f001 fe8d 	bl	800882c <USBD_LL_StallEP>
 8006b12:	4603      	mov	r3, r0
 8006b14:	73fb      	strb	r3, [r7, #15]
      break;
 8006b16:	bf00      	nop
  }

  return ret;
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b086      	sub	sp, #24
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	607a      	str	r2, [r7, #4]
 8006b2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006b34:	7afb      	ldrb	r3, [r7, #11]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d16e      	bne.n	8006c18 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	f040 8098 	bne.w	8006c7e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	689a      	ldr	r2, [r3, #8]
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d913      	bls.n	8006b82 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	1ad2      	subs	r2, r2, r3
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	68da      	ldr	r2, [r3, #12]
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	4293      	cmp	r3, r2
 8006b72:	bf28      	it	cs
 8006b74:	4613      	movcs	r3, r2
 8006b76:	461a      	mov	r2, r3
 8006b78:	6879      	ldr	r1, [r7, #4]
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f001 f998 	bl	8007eb0 <USBD_CtlContinueRx>
 8006b80:	e07d      	b.n	8006c7e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b88:	f003 031f 	and.w	r3, r3, #31
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d014      	beq.n	8006bba <USBD_LL_DataOutStage+0x98>
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d81d      	bhi.n	8006bd0 <USBD_LL_DataOutStage+0xae>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d002      	beq.n	8006b9e <USBD_LL_DataOutStage+0x7c>
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d003      	beq.n	8006ba4 <USBD_LL_DataOutStage+0x82>
 8006b9c:	e018      	b.n	8006bd0 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	75bb      	strb	r3, [r7, #22]
            break;
 8006ba2:	e018      	b.n	8006bd6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	4619      	mov	r1, r3
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 fa64 	bl	800707c <USBD_CoreFindIF>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	75bb      	strb	r3, [r7, #22]
            break;
 8006bb8:	e00d      	b.n	8006bd6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 fa66 	bl	8007096 <USBD_CoreFindEP>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	75bb      	strb	r3, [r7, #22]
            break;
 8006bce:	e002      	b.n	8006bd6 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	75bb      	strb	r3, [r7, #22]
            break;
 8006bd4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006bd6:	7dbb      	ldrb	r3, [r7, #22]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d119      	bne.n	8006c10 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	d113      	bne.n	8006c10 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006be8:	7dba      	ldrb	r2, [r7, #22]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	32ae      	adds	r2, #174	; 0xae
 8006bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00b      	beq.n	8006c10 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006bf8:	7dba      	ldrb	r2, [r7, #22]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006c00:	7dba      	ldrb	r2, [r7, #22]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	32ae      	adds	r2, #174	; 0xae
 8006c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f001 f95e 	bl	8007ed2 <USBD_CtlSendStatus>
 8006c16:	e032      	b.n	8006c7e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006c18:	7afb      	ldrb	r3, [r7, #11]
 8006c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	4619      	mov	r1, r3
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 fa37 	bl	8007096 <USBD_CoreFindEP>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c2c:	7dbb      	ldrb	r3, [r7, #22]
 8006c2e:	2bff      	cmp	r3, #255	; 0xff
 8006c30:	d025      	beq.n	8006c7e <USBD_LL_DataOutStage+0x15c>
 8006c32:	7dbb      	ldrb	r3, [r7, #22]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d122      	bne.n	8006c7e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d117      	bne.n	8006c74 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006c44:	7dba      	ldrb	r2, [r7, #22]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	32ae      	adds	r2, #174	; 0xae
 8006c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00f      	beq.n	8006c74 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006c54:	7dba      	ldrb	r2, [r7, #22]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006c5c:	7dba      	ldrb	r2, [r7, #22]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	32ae      	adds	r2, #174	; 0xae
 8006c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	7afa      	ldrb	r2, [r7, #11]
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	4798      	blx	r3
 8006c70:	4603      	mov	r3, r0
 8006c72:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006c74:	7dfb      	ldrb	r3, [r7, #23]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006c7a:	7dfb      	ldrb	r3, [r7, #23]
 8006c7c:	e000      	b.n	8006c80 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	460b      	mov	r3, r1
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006c96:	7afb      	ldrb	r3, [r7, #11]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d16f      	bne.n	8006d7c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	3314      	adds	r3, #20
 8006ca0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d15a      	bne.n	8006d62 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	689a      	ldr	r2, [r3, #8]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d914      	bls.n	8006ce2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	1ad2      	subs	r2, r2, r3
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f001 f8dd 	bl	8007e8e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	2100      	movs	r1, #0
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f001 feac 	bl	8008a38 <USBD_LL_PrepareReceive>
 8006ce0:	e03f      	b.n	8006d62 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	68da      	ldr	r2, [r3, #12]
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d11c      	bne.n	8006d28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d316      	bcc.n	8006d28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d20f      	bcs.n	8006d28 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d08:	2200      	movs	r2, #0
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f001 f8be 	bl	8007e8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2100      	movs	r1, #0
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f001 fe89 	bl	8008a38 <USBD_LL_PrepareReceive>
 8006d26:	e01c      	b.n	8006d62 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d10f      	bne.n	8006d54 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d009      	beq.n	8006d54 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d54:	2180      	movs	r1, #128	; 0x80
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f001 fd68 	bl	800882c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f001 f8cb 	bl	8007ef8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d03a      	beq.n	8006de2 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7ff fe42 	bl	80069f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d7a:	e032      	b.n	8006de2 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006d7c:	7afb      	ldrb	r3, [r7, #11]
 8006d7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	4619      	mov	r1, r3
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 f985 	bl	8007096 <USBD_CoreFindEP>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
 8006d92:	2bff      	cmp	r3, #255	; 0xff
 8006d94:	d025      	beq.n	8006de2 <USBD_LL_DataInStage+0x15a>
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d122      	bne.n	8006de2 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d11c      	bne.n	8006de2 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006da8:	7dfa      	ldrb	r2, [r7, #23]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	32ae      	adds	r2, #174	; 0xae
 8006dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d014      	beq.n	8006de2 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006db8:	7dfa      	ldrb	r2, [r7, #23]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006dc0:	7dfa      	ldrb	r2, [r7, #23]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	32ae      	adds	r2, #174	; 0xae
 8006dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	7afa      	ldrb	r2, [r7, #11]
 8006dce:	4611      	mov	r1, r2
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	4798      	blx	r3
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006dd8:	7dbb      	ldrb	r3, [r7, #22]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006dde:	7dbb      	ldrb	r3, [r7, #22]
 8006de0:	e000      	b.n	8006de4 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3718      	adds	r7, #24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d014      	beq.n	8006e52 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00e      	beq.n	8006e52 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6852      	ldr	r2, [r2, #4]
 8006e40:	b2d2      	uxtb	r2, r2
 8006e42:	4611      	mov	r1, r2
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	4798      	blx	r3
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e52:	2340      	movs	r3, #64	; 0x40
 8006e54:	2200      	movs	r2, #0
 8006e56:	2100      	movs	r1, #0
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f001 fc3d 	bl	80086d8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2240      	movs	r2, #64	; 0x40
 8006e6a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e6e:	2340      	movs	r3, #64	; 0x40
 8006e70:	2200      	movs	r2, #0
 8006e72:	2180      	movs	r1, #128	; 0x80
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f001 fc2f 	bl	80086d8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2240      	movs	r2, #64	; 0x40
 8006e84:	621a      	str	r2, [r3, #32]

  return ret;
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	78fa      	ldrb	r2, [r7, #3]
 8006ea0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b04      	cmp	r3, #4
 8006ec2:	d006      	beq.n	8006ed2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2204      	movs	r2, #4
 8006ed6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d106      	bne.n	8006f0a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b03      	cmp	r3, #3
 8006f2a:	d110      	bne.n	8006f4e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00b      	beq.n	8006f4e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d005      	beq.n	8006f4e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	460b      	mov	r3, r1
 8006f62:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	32ae      	adds	r2, #174	; 0xae
 8006f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e01c      	b.n	8006fb4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d115      	bne.n	8006fb2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	32ae      	adds	r2, #174	; 0xae
 8006f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00b      	beq.n	8006fb2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	32ae      	adds	r2, #174	; 0xae
 8006fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	78fa      	ldrb	r2, [r7, #3]
 8006fac:	4611      	mov	r1, r2
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	32ae      	adds	r2, #174	; 0xae
 8006fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e01c      	b.n	8007018 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d115      	bne.n	8007016 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	32ae      	adds	r2, #174	; 0xae
 8006ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00b      	beq.n	8007016 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	32ae      	adds	r2, #174	; 0xae
 8007008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	78fa      	ldrb	r2, [r7, #3]
 8007010:	4611      	mov	r1, r2
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00e      	beq.n	8007072 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	6852      	ldr	r2, [r2, #4]
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	4611      	mov	r1, r2
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	4798      	blx	r3
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800706e:	2303      	movs	r3, #3
 8007070:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007072:	7bfb      	ldrb	r3, [r7, #15]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007088:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800708a:	4618      	mov	r0, r3
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007096:	b480      	push	{r7}
 8007098:	b083      	sub	sp, #12
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	460b      	mov	r3, r1
 80070a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80070a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80070c4:	2300      	movs	r3, #0
 80070c6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	885b      	ldrh	r3, [r3, #2]
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d920      	bls.n	800711a <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80070e0:	e013      	b.n	800710a <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80070e2:	f107 030a 	add.w	r3, r7, #10
 80070e6:	4619      	mov	r1, r3
 80070e8:	6978      	ldr	r0, [r7, #20]
 80070ea:	f000 f81b 	bl	8007124 <USBD_GetNextDesc>
 80070ee:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	785b      	ldrb	r3, [r3, #1]
 80070f4:	2b05      	cmp	r3, #5
 80070f6:	d108      	bne.n	800710a <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	789b      	ldrb	r3, [r3, #2]
 8007100:	78fa      	ldrb	r2, [r7, #3]
 8007102:	429a      	cmp	r2, r3
 8007104:	d008      	beq.n	8007118 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007106:	2300      	movs	r3, #0
 8007108:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	885b      	ldrh	r3, [r3, #2]
 800710e:	b29a      	uxth	r2, r3
 8007110:	897b      	ldrh	r3, [r7, #10]
 8007112:	429a      	cmp	r2, r3
 8007114:	d8e5      	bhi.n	80070e2 <USBD_GetEpDesc+0x32>
 8007116:	e000      	b.n	800711a <USBD_GetEpDesc+0x6a>
          break;
 8007118:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800711a:	693b      	ldr	r3, [r7, #16]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	881a      	ldrh	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	b29b      	uxth	r3, r3
 800713c:	4413      	add	r3, r2
 800713e:	b29a      	uxth	r2, r3
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	461a      	mov	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4413      	add	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007150:	68fb      	ldr	r3, [r7, #12]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800715e:	b480      	push	{r7}
 8007160:	b087      	sub	sp, #28
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	3301      	adds	r3, #1
 8007174:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800717c:	8a3b      	ldrh	r3, [r7, #16]
 800717e:	021b      	lsls	r3, r3, #8
 8007180:	b21a      	sxth	r2, r3
 8007182:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007186:	4313      	orrs	r3, r2
 8007188:	b21b      	sxth	r3, r3
 800718a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800718c:	89fb      	ldrh	r3, [r7, #14]
}
 800718e:	4618      	mov	r0, r3
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
	...

0800719c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071b2:	2b40      	cmp	r3, #64	; 0x40
 80071b4:	d005      	beq.n	80071c2 <USBD_StdDevReq+0x26>
 80071b6:	2b40      	cmp	r3, #64	; 0x40
 80071b8:	d857      	bhi.n	800726a <USBD_StdDevReq+0xce>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00f      	beq.n	80071de <USBD_StdDevReq+0x42>
 80071be:	2b20      	cmp	r3, #32
 80071c0:	d153      	bne.n	800726a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	32ae      	adds	r2, #174	; 0xae
 80071cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	4798      	blx	r3
 80071d8:	4603      	mov	r3, r0
 80071da:	73fb      	strb	r3, [r7, #15]
      break;
 80071dc:	e04a      	b.n	8007274 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	785b      	ldrb	r3, [r3, #1]
 80071e2:	2b09      	cmp	r3, #9
 80071e4:	d83b      	bhi.n	800725e <USBD_StdDevReq+0xc2>
 80071e6:	a201      	add	r2, pc, #4	; (adr r2, 80071ec <USBD_StdDevReq+0x50>)
 80071e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ec:	08007241 	.word	0x08007241
 80071f0:	08007255 	.word	0x08007255
 80071f4:	0800725f 	.word	0x0800725f
 80071f8:	0800724b 	.word	0x0800724b
 80071fc:	0800725f 	.word	0x0800725f
 8007200:	0800721f 	.word	0x0800721f
 8007204:	08007215 	.word	0x08007215
 8007208:	0800725f 	.word	0x0800725f
 800720c:	08007237 	.word	0x08007237
 8007210:	08007229 	.word	0x08007229
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fa3c 	bl	8007694 <USBD_GetDescriptor>
          break;
 800721c:	e024      	b.n	8007268 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fbcb 	bl	80079bc <USBD_SetAddress>
          break;
 8007226:	e01f      	b.n	8007268 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fc0a 	bl	8007a44 <USBD_SetConfig>
 8007230:	4603      	mov	r3, r0
 8007232:	73fb      	strb	r3, [r7, #15]
          break;
 8007234:	e018      	b.n	8007268 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fcad 	bl	8007b98 <USBD_GetConfig>
          break;
 800723e:	e013      	b.n	8007268 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fcde 	bl	8007c04 <USBD_GetStatus>
          break;
 8007248:	e00e      	b.n	8007268 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fd0d 	bl	8007c6c <USBD_SetFeature>
          break;
 8007252:	e009      	b.n	8007268 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fd31 	bl	8007cbe <USBD_ClrFeature>
          break;
 800725c:	e004      	b.n	8007268 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fd88 	bl	8007d76 <USBD_CtlError>
          break;
 8007266:	bf00      	nop
      }
      break;
 8007268:	e004      	b.n	8007274 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fd82 	bl	8007d76 <USBD_CtlError>
      break;
 8007272:	bf00      	nop
  }

  return ret;
 8007274:	7bfb      	ldrb	r3, [r7, #15]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop

08007280 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007296:	2b40      	cmp	r3, #64	; 0x40
 8007298:	d005      	beq.n	80072a6 <USBD_StdItfReq+0x26>
 800729a:	2b40      	cmp	r3, #64	; 0x40
 800729c:	d852      	bhi.n	8007344 <USBD_StdItfReq+0xc4>
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <USBD_StdItfReq+0x26>
 80072a2:	2b20      	cmp	r3, #32
 80072a4:	d14e      	bne.n	8007344 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	3b01      	subs	r3, #1
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d840      	bhi.n	8007336 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	889b      	ldrh	r3, [r3, #4]
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d836      	bhi.n	800732c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	889b      	ldrh	r3, [r3, #4]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff fed8 	bl	800707c <USBD_CoreFindIF>
 80072cc:	4603      	mov	r3, r0
 80072ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072d0:	7bbb      	ldrb	r3, [r7, #14]
 80072d2:	2bff      	cmp	r3, #255	; 0xff
 80072d4:	d01d      	beq.n	8007312 <USBD_StdItfReq+0x92>
 80072d6:	7bbb      	ldrb	r3, [r7, #14]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d11a      	bne.n	8007312 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80072dc:	7bba      	ldrb	r2, [r7, #14]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	32ae      	adds	r2, #174	; 0xae
 80072e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00f      	beq.n	800730c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80072ec:	7bba      	ldrb	r2, [r7, #14]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80072f4:	7bba      	ldrb	r2, [r7, #14]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	32ae      	adds	r2, #174	; 0xae
 80072fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	6839      	ldr	r1, [r7, #0]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	4798      	blx	r3
 8007306:	4603      	mov	r3, r0
 8007308:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800730a:	e004      	b.n	8007316 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800730c:	2303      	movs	r3, #3
 800730e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007310:	e001      	b.n	8007316 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007312:	2303      	movs	r3, #3
 8007314:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	88db      	ldrh	r3, [r3, #6]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d110      	bne.n	8007340 <USBD_StdItfReq+0xc0>
 800731e:	7bfb      	ldrb	r3, [r7, #15]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10d      	bne.n	8007340 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fdd4 	bl	8007ed2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800732a:	e009      	b.n	8007340 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fd21 	bl	8007d76 <USBD_CtlError>
          break;
 8007334:	e004      	b.n	8007340 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fd1c 	bl	8007d76 <USBD_CtlError>
          break;
 800733e:	e000      	b.n	8007342 <USBD_StdItfReq+0xc2>
          break;
 8007340:	bf00      	nop
      }
      break;
 8007342:	e004      	b.n	800734e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fd15 	bl	8007d76 <USBD_CtlError>
      break;
 800734c:	bf00      	nop
  }

  return ret;
 800734e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	889b      	ldrh	r3, [r3, #4]
 800736a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007374:	2b40      	cmp	r3, #64	; 0x40
 8007376:	d007      	beq.n	8007388 <USBD_StdEPReq+0x30>
 8007378:	2b40      	cmp	r3, #64	; 0x40
 800737a:	f200 817f 	bhi.w	800767c <USBD_StdEPReq+0x324>
 800737e:	2b00      	cmp	r3, #0
 8007380:	d02a      	beq.n	80073d8 <USBD_StdEPReq+0x80>
 8007382:	2b20      	cmp	r3, #32
 8007384:	f040 817a 	bne.w	800767c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007388:	7bbb      	ldrb	r3, [r7, #14]
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7ff fe82 	bl	8007096 <USBD_CoreFindEP>
 8007392:	4603      	mov	r3, r0
 8007394:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007396:	7b7b      	ldrb	r3, [r7, #13]
 8007398:	2bff      	cmp	r3, #255	; 0xff
 800739a:	f000 8174 	beq.w	8007686 <USBD_StdEPReq+0x32e>
 800739e:	7b7b      	ldrb	r3, [r7, #13]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f040 8170 	bne.w	8007686 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80073a6:	7b7a      	ldrb	r2, [r7, #13]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80073ae:	7b7a      	ldrb	r2, [r7, #13]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	32ae      	adds	r2, #174	; 0xae
 80073b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 8163 	beq.w	8007686 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80073c0:	7b7a      	ldrb	r2, [r7, #13]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	32ae      	adds	r2, #174	; 0xae
 80073c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	4798      	blx	r3
 80073d2:	4603      	mov	r3, r0
 80073d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073d6:	e156      	b.n	8007686 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	785b      	ldrb	r3, [r3, #1]
 80073dc:	2b03      	cmp	r3, #3
 80073de:	d008      	beq.n	80073f2 <USBD_StdEPReq+0x9a>
 80073e0:	2b03      	cmp	r3, #3
 80073e2:	f300 8145 	bgt.w	8007670 <USBD_StdEPReq+0x318>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 809b 	beq.w	8007522 <USBD_StdEPReq+0x1ca>
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d03c      	beq.n	800746a <USBD_StdEPReq+0x112>
 80073f0:	e13e      	b.n	8007670 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d002      	beq.n	8007404 <USBD_StdEPReq+0xac>
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d016      	beq.n	8007430 <USBD_StdEPReq+0xd8>
 8007402:	e02c      	b.n	800745e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007404:	7bbb      	ldrb	r3, [r7, #14]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00d      	beq.n	8007426 <USBD_StdEPReq+0xce>
 800740a:	7bbb      	ldrb	r3, [r7, #14]
 800740c:	2b80      	cmp	r3, #128	; 0x80
 800740e:	d00a      	beq.n	8007426 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007410:	7bbb      	ldrb	r3, [r7, #14]
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 fa09 	bl	800882c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800741a:	2180      	movs	r1, #128	; 0x80
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 fa05 	bl	800882c <USBD_LL_StallEP>
 8007422:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007424:	e020      	b.n	8007468 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fca4 	bl	8007d76 <USBD_CtlError>
              break;
 800742e:	e01b      	b.n	8007468 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	885b      	ldrh	r3, [r3, #2]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10e      	bne.n	8007456 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00b      	beq.n	8007456 <USBD_StdEPReq+0xfe>
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	2b80      	cmp	r3, #128	; 0x80
 8007442:	d008      	beq.n	8007456 <USBD_StdEPReq+0xfe>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	88db      	ldrh	r3, [r3, #6]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d104      	bne.n	8007456 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f001 f9eb 	bl	800882c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fd3b 	bl	8007ed2 <USBD_CtlSendStatus>

              break;
 800745c:	e004      	b.n	8007468 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fc88 	bl	8007d76 <USBD_CtlError>
              break;
 8007466:	bf00      	nop
          }
          break;
 8007468:	e107      	b.n	800767a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d002      	beq.n	800747c <USBD_StdEPReq+0x124>
 8007476:	2b03      	cmp	r3, #3
 8007478:	d016      	beq.n	80074a8 <USBD_StdEPReq+0x150>
 800747a:	e04b      	b.n	8007514 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800747c:	7bbb      	ldrb	r3, [r7, #14]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00d      	beq.n	800749e <USBD_StdEPReq+0x146>
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	2b80      	cmp	r3, #128	; 0x80
 8007486:	d00a      	beq.n	800749e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f001 f9cd 	bl	800882c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007492:	2180      	movs	r1, #128	; 0x80
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f001 f9c9 	bl	800882c <USBD_LL_StallEP>
 800749a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800749c:	e040      	b.n	8007520 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fc68 	bl	8007d76 <USBD_CtlError>
              break;
 80074a6:	e03b      	b.n	8007520 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	885b      	ldrh	r3, [r3, #2]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d136      	bne.n	800751e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80074b0:	7bbb      	ldrb	r3, [r7, #14]
 80074b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d004      	beq.n	80074c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f001 f9ea 	bl	8008898 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fd04 	bl	8007ed2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80074ca:	7bbb      	ldrb	r3, [r7, #14]
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7ff fde1 	bl	8007096 <USBD_CoreFindEP>
 80074d4:	4603      	mov	r3, r0
 80074d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074d8:	7b7b      	ldrb	r3, [r7, #13]
 80074da:	2bff      	cmp	r3, #255	; 0xff
 80074dc:	d01f      	beq.n	800751e <USBD_StdEPReq+0x1c6>
 80074de:	7b7b      	ldrb	r3, [r7, #13]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d11c      	bne.n	800751e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80074e4:	7b7a      	ldrb	r2, [r7, #13]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80074ec:	7b7a      	ldrb	r2, [r7, #13]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	32ae      	adds	r2, #174	; 0xae
 80074f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d010      	beq.n	800751e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80074fc:	7b7a      	ldrb	r2, [r7, #13]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	32ae      	adds	r2, #174	; 0xae
 8007502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	4798      	blx	r3
 800750e:	4603      	mov	r3, r0
 8007510:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007512:	e004      	b.n	800751e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fc2d 	bl	8007d76 <USBD_CtlError>
              break;
 800751c:	e000      	b.n	8007520 <USBD_StdEPReq+0x1c8>
              break;
 800751e:	bf00      	nop
          }
          break;
 8007520:	e0ab      	b.n	800767a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b02      	cmp	r3, #2
 800752c:	d002      	beq.n	8007534 <USBD_StdEPReq+0x1dc>
 800752e:	2b03      	cmp	r3, #3
 8007530:	d032      	beq.n	8007598 <USBD_StdEPReq+0x240>
 8007532:	e097      	b.n	8007664 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007534:	7bbb      	ldrb	r3, [r7, #14]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d007      	beq.n	800754a <USBD_StdEPReq+0x1f2>
 800753a:	7bbb      	ldrb	r3, [r7, #14]
 800753c:	2b80      	cmp	r3, #128	; 0x80
 800753e:	d004      	beq.n	800754a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fc17 	bl	8007d76 <USBD_CtlError>
                break;
 8007548:	e091      	b.n	800766e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800754a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800754e:	2b00      	cmp	r3, #0
 8007550:	da0b      	bge.n	800756a <USBD_StdEPReq+0x212>
 8007552:	7bbb      	ldrb	r3, [r7, #14]
 8007554:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007558:	4613      	mov	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4413      	add	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	3310      	adds	r3, #16
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	4413      	add	r3, r2
 8007566:	3304      	adds	r3, #4
 8007568:	e00b      	b.n	8007582 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007570:	4613      	mov	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4413      	add	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	4413      	add	r3, r2
 8007580:	3304      	adds	r3, #4
 8007582:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2200      	movs	r2, #0
 8007588:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2202      	movs	r2, #2
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fc61 	bl	8007e58 <USBD_CtlSendData>
              break;
 8007596:	e06a      	b.n	800766e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007598:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800759c:	2b00      	cmp	r3, #0
 800759e:	da11      	bge.n	80075c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	f003 020f 	and.w	r2, r3, #15
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	4613      	mov	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	3324      	adds	r3, #36	; 0x24
 80075b4:	881b      	ldrh	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d117      	bne.n	80075ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fbda 	bl	8007d76 <USBD_CtlError>
                  break;
 80075c2:	e054      	b.n	800766e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	f003 020f 	and.w	r2, r3, #15
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	4613      	mov	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	440b      	add	r3, r1
 80075d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d104      	bne.n	80075ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fbc7 	bl	8007d76 <USBD_CtlError>
                  break;
 80075e8:	e041      	b.n	800766e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	da0b      	bge.n	800760a <USBD_StdEPReq+0x2b2>
 80075f2:	7bbb      	ldrb	r3, [r7, #14]
 80075f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075f8:	4613      	mov	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	3310      	adds	r3, #16
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	4413      	add	r3, r2
 8007606:	3304      	adds	r3, #4
 8007608:	e00b      	b.n	8007622 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800760a:	7bbb      	ldrb	r3, [r7, #14]
 800760c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007610:	4613      	mov	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	4413      	add	r3, r2
 8007620:	3304      	adds	r3, #4
 8007622:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007624:	7bbb      	ldrb	r3, [r7, #14]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d002      	beq.n	8007630 <USBD_StdEPReq+0x2d8>
 800762a:	7bbb      	ldrb	r3, [r7, #14]
 800762c:	2b80      	cmp	r3, #128	; 0x80
 800762e:	d103      	bne.n	8007638 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	e00e      	b.n	8007656 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007638:	7bbb      	ldrb	r3, [r7, #14]
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 f961 	bl	8008904 <USBD_LL_IsStallEP>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	2201      	movs	r2, #1
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	e002      	b.n	8007656 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	2202      	movs	r2, #2
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fbfb 	bl	8007e58 <USBD_CtlSendData>
              break;
 8007662:	e004      	b.n	800766e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fb85 	bl	8007d76 <USBD_CtlError>
              break;
 800766c:	bf00      	nop
          }
          break;
 800766e:	e004      	b.n	800767a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fb7f 	bl	8007d76 <USBD_CtlError>
          break;
 8007678:	bf00      	nop
      }
      break;
 800767a:	e005      	b.n	8007688 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fb79 	bl	8007d76 <USBD_CtlError>
      break;
 8007684:	e000      	b.n	8007688 <USBD_StdEPReq+0x330>
      break;
 8007686:	bf00      	nop
  }

  return ret;
 8007688:	7bfb      	ldrb	r3, [r7, #15]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
	...

08007694 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800769e:	2300      	movs	r3, #0
 80076a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	885b      	ldrh	r3, [r3, #2]
 80076ae:	0a1b      	lsrs	r3, r3, #8
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	3b01      	subs	r3, #1
 80076b4:	2b0e      	cmp	r3, #14
 80076b6:	f200 8152 	bhi.w	800795e <USBD_GetDescriptor+0x2ca>
 80076ba:	a201      	add	r2, pc, #4	; (adr r2, 80076c0 <USBD_GetDescriptor+0x2c>)
 80076bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c0:	08007731 	.word	0x08007731
 80076c4:	08007749 	.word	0x08007749
 80076c8:	08007789 	.word	0x08007789
 80076cc:	0800795f 	.word	0x0800795f
 80076d0:	0800795f 	.word	0x0800795f
 80076d4:	080078ff 	.word	0x080078ff
 80076d8:	0800792b 	.word	0x0800792b
 80076dc:	0800795f 	.word	0x0800795f
 80076e0:	0800795f 	.word	0x0800795f
 80076e4:	0800795f 	.word	0x0800795f
 80076e8:	0800795f 	.word	0x0800795f
 80076ec:	0800795f 	.word	0x0800795f
 80076f0:	0800795f 	.word	0x0800795f
 80076f4:	0800795f 	.word	0x0800795f
 80076f8:	080076fd 	.word	0x080076fd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	7c12      	ldrb	r2, [r2, #16]
 8007714:	f107 0108 	add.w	r1, r7, #8
 8007718:	4610      	mov	r0, r2
 800771a:	4798      	blx	r3
 800771c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800771e:	e126      	b.n	800796e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fb27 	bl	8007d76 <USBD_CtlError>
        err++;
 8007728:	7afb      	ldrb	r3, [r7, #11]
 800772a:	3301      	adds	r3, #1
 800772c:	72fb      	strb	r3, [r7, #11]
      break;
 800772e:	e11e      	b.n	800796e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	7c12      	ldrb	r2, [r2, #16]
 800773c:	f107 0108 	add.w	r1, r7, #8
 8007740:	4610      	mov	r0, r2
 8007742:	4798      	blx	r3
 8007744:	60f8      	str	r0, [r7, #12]
      break;
 8007746:	e112      	b.n	800796e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	7c1b      	ldrb	r3, [r3, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10d      	bne.n	800776c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007758:	f107 0208 	add.w	r2, r7, #8
 800775c:	4610      	mov	r0, r2
 800775e:	4798      	blx	r3
 8007760:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3301      	adds	r3, #1
 8007766:	2202      	movs	r2, #2
 8007768:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800776a:	e100      	b.n	800796e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007774:	f107 0208 	add.w	r2, r7, #8
 8007778:	4610      	mov	r0, r2
 800777a:	4798      	blx	r3
 800777c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3301      	adds	r3, #1
 8007782:	2202      	movs	r2, #2
 8007784:	701a      	strb	r2, [r3, #0]
      break;
 8007786:	e0f2      	b.n	800796e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	885b      	ldrh	r3, [r3, #2]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b05      	cmp	r3, #5
 8007790:	f200 80ac 	bhi.w	80078ec <USBD_GetDescriptor+0x258>
 8007794:	a201      	add	r2, pc, #4	; (adr r2, 800779c <USBD_GetDescriptor+0x108>)
 8007796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779a:	bf00      	nop
 800779c:	080077b5 	.word	0x080077b5
 80077a0:	080077e9 	.word	0x080077e9
 80077a4:	0800781d 	.word	0x0800781d
 80077a8:	08007851 	.word	0x08007851
 80077ac:	08007885 	.word	0x08007885
 80077b0:	080078b9 	.word	0x080078b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00b      	beq.n	80077d8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	7c12      	ldrb	r2, [r2, #16]
 80077cc:	f107 0108 	add.w	r1, r7, #8
 80077d0:	4610      	mov	r0, r2
 80077d2:	4798      	blx	r3
 80077d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077d6:	e091      	b.n	80078fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 facb 	bl	8007d76 <USBD_CtlError>
            err++;
 80077e0:	7afb      	ldrb	r3, [r7, #11]
 80077e2:	3301      	adds	r3, #1
 80077e4:	72fb      	strb	r3, [r7, #11]
          break;
 80077e6:	e089      	b.n	80078fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00b      	beq.n	800780c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	7c12      	ldrb	r2, [r2, #16]
 8007800:	f107 0108 	add.w	r1, r7, #8
 8007804:	4610      	mov	r0, r2
 8007806:	4798      	blx	r3
 8007808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800780a:	e077      	b.n	80078fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fab1 	bl	8007d76 <USBD_CtlError>
            err++;
 8007814:	7afb      	ldrb	r3, [r7, #11]
 8007816:	3301      	adds	r3, #1
 8007818:	72fb      	strb	r3, [r7, #11]
          break;
 800781a:	e06f      	b.n	80078fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00b      	beq.n	8007840 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	7c12      	ldrb	r2, [r2, #16]
 8007834:	f107 0108 	add.w	r1, r7, #8
 8007838:	4610      	mov	r0, r2
 800783a:	4798      	blx	r3
 800783c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800783e:	e05d      	b.n	80078fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fa97 	bl	8007d76 <USBD_CtlError>
            err++;
 8007848:	7afb      	ldrb	r3, [r7, #11]
 800784a:	3301      	adds	r3, #1
 800784c:	72fb      	strb	r3, [r7, #11]
          break;
 800784e:	e055      	b.n	80078fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00b      	beq.n	8007874 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	7c12      	ldrb	r2, [r2, #16]
 8007868:	f107 0108 	add.w	r1, r7, #8
 800786c:	4610      	mov	r0, r2
 800786e:	4798      	blx	r3
 8007870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007872:	e043      	b.n	80078fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fa7d 	bl	8007d76 <USBD_CtlError>
            err++;
 800787c:	7afb      	ldrb	r3, [r7, #11]
 800787e:	3301      	adds	r3, #1
 8007880:	72fb      	strb	r3, [r7, #11]
          break;
 8007882:	e03b      	b.n	80078fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00b      	beq.n	80078a8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	7c12      	ldrb	r2, [r2, #16]
 800789c:	f107 0108 	add.w	r1, r7, #8
 80078a0:	4610      	mov	r0, r2
 80078a2:	4798      	blx	r3
 80078a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078a6:	e029      	b.n	80078fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fa63 	bl	8007d76 <USBD_CtlError>
            err++;
 80078b0:	7afb      	ldrb	r3, [r7, #11]
 80078b2:	3301      	adds	r3, #1
 80078b4:	72fb      	strb	r3, [r7, #11]
          break;
 80078b6:	e021      	b.n	80078fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00b      	beq.n	80078dc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	7c12      	ldrb	r2, [r2, #16]
 80078d0:	f107 0108 	add.w	r1, r7, #8
 80078d4:	4610      	mov	r0, r2
 80078d6:	4798      	blx	r3
 80078d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078da:	e00f      	b.n	80078fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80078dc:	6839      	ldr	r1, [r7, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fa49 	bl	8007d76 <USBD_CtlError>
            err++;
 80078e4:	7afb      	ldrb	r3, [r7, #11]
 80078e6:	3301      	adds	r3, #1
 80078e8:	72fb      	strb	r3, [r7, #11]
          break;
 80078ea:	e007      	b.n	80078fc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fa41 	bl	8007d76 <USBD_CtlError>
          err++;
 80078f4:	7afb      	ldrb	r3, [r7, #11]
 80078f6:	3301      	adds	r3, #1
 80078f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80078fa:	bf00      	nop
      }
      break;
 80078fc:	e037      	b.n	800796e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	7c1b      	ldrb	r3, [r3, #16]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d109      	bne.n	800791a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800790c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800790e:	f107 0208 	add.w	r2, r7, #8
 8007912:	4610      	mov	r0, r2
 8007914:	4798      	blx	r3
 8007916:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007918:	e029      	b.n	800796e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fa2a 	bl	8007d76 <USBD_CtlError>
        err++;
 8007922:	7afb      	ldrb	r3, [r7, #11]
 8007924:	3301      	adds	r3, #1
 8007926:	72fb      	strb	r3, [r7, #11]
      break;
 8007928:	e021      	b.n	800796e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	7c1b      	ldrb	r3, [r3, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10d      	bne.n	800794e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793a:	f107 0208 	add.w	r2, r7, #8
 800793e:	4610      	mov	r0, r2
 8007940:	4798      	blx	r3
 8007942:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	3301      	adds	r3, #1
 8007948:	2207      	movs	r2, #7
 800794a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800794c:	e00f      	b.n	800796e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fa10 	bl	8007d76 <USBD_CtlError>
        err++;
 8007956:	7afb      	ldrb	r3, [r7, #11]
 8007958:	3301      	adds	r3, #1
 800795a:	72fb      	strb	r3, [r7, #11]
      break;
 800795c:	e007      	b.n	800796e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fa08 	bl	8007d76 <USBD_CtlError>
      err++;
 8007966:	7afb      	ldrb	r3, [r7, #11]
 8007968:	3301      	adds	r3, #1
 800796a:	72fb      	strb	r3, [r7, #11]
      break;
 800796c:	bf00      	nop
  }

  if (err != 0U)
 800796e:	7afb      	ldrb	r3, [r7, #11]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d11e      	bne.n	80079b2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	88db      	ldrh	r3, [r3, #6]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d016      	beq.n	80079aa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800797c:	893b      	ldrh	r3, [r7, #8]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00e      	beq.n	80079a0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	88da      	ldrh	r2, [r3, #6]
 8007986:	893b      	ldrh	r3, [r7, #8]
 8007988:	4293      	cmp	r3, r2
 800798a:	bf28      	it	cs
 800798c:	4613      	movcs	r3, r2
 800798e:	b29b      	uxth	r3, r3
 8007990:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007992:	893b      	ldrh	r3, [r7, #8]
 8007994:	461a      	mov	r2, r3
 8007996:	68f9      	ldr	r1, [r7, #12]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fa5d 	bl	8007e58 <USBD_CtlSendData>
 800799e:	e009      	b.n	80079b4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f9e7 	bl	8007d76 <USBD_CtlError>
 80079a8:	e004      	b.n	80079b4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fa91 	bl	8007ed2 <USBD_CtlSendStatus>
 80079b0:	e000      	b.n	80079b4 <USBD_GetDescriptor+0x320>
    return;
 80079b2:	bf00      	nop
  }
}
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop

080079bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	889b      	ldrh	r3, [r3, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d131      	bne.n	8007a32 <USBD_SetAddress+0x76>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	88db      	ldrh	r3, [r3, #6]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d12d      	bne.n	8007a32 <USBD_SetAddress+0x76>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	885b      	ldrh	r3, [r3, #2]
 80079da:	2b7f      	cmp	r3, #127	; 0x7f
 80079dc:	d829      	bhi.n	8007a32 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	885b      	ldrh	r3, [r3, #2]
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d104      	bne.n	8007a00 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f9bc 	bl	8007d76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079fe:	e01d      	b.n	8007a3c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	7bfa      	ldrb	r2, [r7, #15]
 8007a04:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 ffa5 	bl	800895c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fa5d 	bl	8007ed2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d004      	beq.n	8007a28 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2202      	movs	r2, #2
 8007a22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a26:	e009      	b.n	8007a3c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a30:	e004      	b.n	8007a3c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f99e 	bl	8007d76 <USBD_CtlError>
  }
}
 8007a3a:	bf00      	nop
 8007a3c:	bf00      	nop
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	885b      	ldrh	r3, [r3, #2]
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	4b4e      	ldr	r3, [pc, #312]	; (8007b94 <USBD_SetConfig+0x150>)
 8007a5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a5c:	4b4d      	ldr	r3, [pc, #308]	; (8007b94 <USBD_SetConfig+0x150>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d905      	bls.n	8007a70 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f985 	bl	8007d76 <USBD_CtlError>
    return USBD_FAIL;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e08c      	b.n	8007b8a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d002      	beq.n	8007a82 <USBD_SetConfig+0x3e>
 8007a7c:	2b03      	cmp	r3, #3
 8007a7e:	d029      	beq.n	8007ad4 <USBD_SetConfig+0x90>
 8007a80:	e075      	b.n	8007b6e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007a82:	4b44      	ldr	r3, [pc, #272]	; (8007b94 <USBD_SetConfig+0x150>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d020      	beq.n	8007acc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007a8a:	4b42      	ldr	r3, [pc, #264]	; (8007b94 <USBD_SetConfig+0x150>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a94:	4b3f      	ldr	r3, [pc, #252]	; (8007b94 <USBD_SetConfig+0x150>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7fe ffb6 	bl	8006a0c <USBD_SetClassConfig>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d008      	beq.n	8007abc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f962 	bl	8007d76 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007aba:	e065      	b.n	8007b88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fa08 	bl	8007ed2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2203      	movs	r2, #3
 8007ac6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007aca:	e05d      	b.n	8007b88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fa00 	bl	8007ed2 <USBD_CtlSendStatus>
      break;
 8007ad2:	e059      	b.n	8007b88 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ad4:	4b2f      	ldr	r3, [pc, #188]	; (8007b94 <USBD_SetConfig+0x150>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d112      	bne.n	8007b02 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007ae4:	4b2b      	ldr	r3, [pc, #172]	; (8007b94 <USBD_SetConfig+0x150>)
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	461a      	mov	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007aee:	4b29      	ldr	r3, [pc, #164]	; (8007b94 <USBD_SetConfig+0x150>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7fe ffa5 	bl	8006a44 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f9e9 	bl	8007ed2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b00:	e042      	b.n	8007b88 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007b02:	4b24      	ldr	r3, [pc, #144]	; (8007b94 <USBD_SetConfig+0x150>)
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	461a      	mov	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d02a      	beq.n	8007b66 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7fe ff93 	bl	8006a44 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b1e:	4b1d      	ldr	r3, [pc, #116]	; (8007b94 <USBD_SetConfig+0x150>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b28:	4b1a      	ldr	r3, [pc, #104]	; (8007b94 <USBD_SetConfig+0x150>)
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7fe ff6c 	bl	8006a0c <USBD_SetClassConfig>
 8007b34:	4603      	mov	r3, r0
 8007b36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00f      	beq.n	8007b5e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f918 	bl	8007d76 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7fe ff78 	bl	8006a44 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b5c:	e014      	b.n	8007b88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f9b7 	bl	8007ed2 <USBD_CtlSendStatus>
      break;
 8007b64:	e010      	b.n	8007b88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f9b3 	bl	8007ed2 <USBD_CtlSendStatus>
      break;
 8007b6c:	e00c      	b.n	8007b88 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f900 	bl	8007d76 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b76:	4b07      	ldr	r3, [pc, #28]	; (8007b94 <USBD_SetConfig+0x150>)
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7fe ff61 	bl	8006a44 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b82:	2303      	movs	r3, #3
 8007b84:	73fb      	strb	r3, [r7, #15]
      break;
 8007b86:	bf00      	nop
  }

  return ret;
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	20000154 	.word	0x20000154

08007b98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	88db      	ldrh	r3, [r3, #6]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d004      	beq.n	8007bb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f8e2 	bl	8007d76 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bb2:	e023      	b.n	8007bfc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	dc02      	bgt.n	8007bc6 <USBD_GetConfig+0x2e>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	dc03      	bgt.n	8007bcc <USBD_GetConfig+0x34>
 8007bc4:	e015      	b.n	8007bf2 <USBD_GetConfig+0x5a>
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d00b      	beq.n	8007be2 <USBD_GetConfig+0x4a>
 8007bca:	e012      	b.n	8007bf2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f93c 	bl	8007e58 <USBD_CtlSendData>
        break;
 8007be0:	e00c      	b.n	8007bfc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	3304      	adds	r3, #4
 8007be6:	2201      	movs	r2, #1
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f934 	bl	8007e58 <USBD_CtlSendData>
        break;
 8007bf0:	e004      	b.n	8007bfc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f8be 	bl	8007d76 <USBD_CtlError>
        break;
 8007bfa:	bf00      	nop
}
 8007bfc:	bf00      	nop
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	3b01      	subs	r3, #1
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d81e      	bhi.n	8007c5a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	88db      	ldrh	r3, [r3, #6]
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d004      	beq.n	8007c2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f8a5 	bl	8007d76 <USBD_CtlError>
        break;
 8007c2c:	e01a      	b.n	8007c64 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d005      	beq.n	8007c4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	f043 0202 	orr.w	r2, r3, #2
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	330c      	adds	r3, #12
 8007c4e:	2202      	movs	r2, #2
 8007c50:	4619      	mov	r1, r3
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f900 	bl	8007e58 <USBD_CtlSendData>
      break;
 8007c58:	e004      	b.n	8007c64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f88a 	bl	8007d76 <USBD_CtlError>
      break;
 8007c62:	bf00      	nop
  }
}
 8007c64:	bf00      	nop
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	885b      	ldrh	r3, [r3, #2]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d107      	bne.n	8007c8e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f923 	bl	8007ed2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007c8c:	e013      	b.n	8007cb6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	885b      	ldrh	r3, [r3, #2]
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d10b      	bne.n	8007cae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	889b      	ldrh	r3, [r3, #4]
 8007c9a:	0a1b      	lsrs	r3, r3, #8
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f913 	bl	8007ed2 <USBD_CtlSendStatus>
}
 8007cac:	e003      	b.n	8007cb6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f860 	bl	8007d76 <USBD_CtlError>
}
 8007cb6:	bf00      	nop
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b082      	sub	sp, #8
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d80b      	bhi.n	8007cee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	885b      	ldrh	r3, [r3, #2]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d10c      	bne.n	8007cf8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f8f3 	bl	8007ed2 <USBD_CtlSendStatus>
      }
      break;
 8007cec:	e004      	b.n	8007cf8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f840 	bl	8007d76 <USBD_CtlError>
      break;
 8007cf6:	e000      	b.n	8007cfa <USBD_ClrFeature+0x3c>
      break;
 8007cf8:	bf00      	nop
  }
}
 8007cfa:	bf00      	nop
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	781a      	ldrb	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	781a      	ldrb	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f7ff fa16 	bl	800715e <SWAPBYTE>
 8007d32:	4603      	mov	r3, r0
 8007d34:	461a      	mov	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	3301      	adds	r3, #1
 8007d44:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f7ff fa09 	bl	800715e <SWAPBYTE>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	461a      	mov	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	3301      	adds	r3, #1
 8007d58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f7ff f9fc 	bl	800715e <SWAPBYTE>
 8007d66:	4603      	mov	r3, r0
 8007d68:	461a      	mov	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	80da      	strh	r2, [r3, #6]
}
 8007d6e:	bf00      	nop
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b082      	sub	sp, #8
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d80:	2180      	movs	r1, #128	; 0x80
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fd52 	bl	800882c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d88:	2100      	movs	r1, #0
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fd4e 	bl	800882c <USBD_LL_StallEP>
}
 8007d90:	bf00      	nop
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d036      	beq.n	8007e1c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007db2:	6938      	ldr	r0, [r7, #16]
 8007db4:	f000 f836 	bl	8007e24 <USBD_GetLen>
 8007db8:	4603      	mov	r3, r0
 8007dba:	3301      	adds	r3, #1
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	005b      	lsls	r3, r3, #1
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	4413      	add	r3, r2
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	7812      	ldrb	r2, [r2, #0]
 8007dd0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	4413      	add	r3, r2
 8007dde:	2203      	movs	r2, #3
 8007de0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
 8007de4:	3301      	adds	r3, #1
 8007de6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007de8:	e013      	b.n	8007e12 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	4413      	add	r3, r2
 8007df0:	693a      	ldr	r2, [r7, #16]
 8007df2:	7812      	ldrb	r2, [r2, #0]
 8007df4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	613b      	str	r3, [r7, #16]
    idx++;
 8007dfc:	7dfb      	ldrb	r3, [r7, #23]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	4413      	add	r3, r2
 8007e08:	2200      	movs	r2, #0
 8007e0a:	701a      	strb	r2, [r3, #0]
    idx++;
 8007e0c:	7dfb      	ldrb	r3, [r7, #23]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1e7      	bne.n	8007dea <USBD_GetString+0x52>
 8007e1a:	e000      	b.n	8007e1e <USBD_GetString+0x86>
    return;
 8007e1c:	bf00      	nop
  }
}
 8007e1e:	3718      	adds	r7, #24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e34:	e005      	b.n	8007e42 <USBD_GetLen+0x1e>
  {
    len++;
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1f5      	bne.n	8007e36 <USBD_GetLen+0x12>
  }

  return len;
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3714      	adds	r7, #20
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 fda2 	bl	80089c8 <USBD_LL_Transmit>

  return USBD_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	60f8      	str	r0, [r7, #12]
 8007e96:	60b9      	str	r1, [r7, #8]
 8007e98:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 fd91 	bl	80089c8 <USBD_LL_Transmit>

  return USBD_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f000 fdb8 	bl	8008a38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b082      	sub	sp, #8
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2204      	movs	r2, #4
 8007ede:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fd6d 	bl	80089c8 <USBD_LL_Transmit>

  return USBD_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2205      	movs	r2, #5
 8007f04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f08:	2300      	movs	r3, #0
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fd92 	bl	8008a38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f24:	2200      	movs	r2, #0
 8007f26:	4912      	ldr	r1, [pc, #72]	; (8007f70 <MX_USB_DEVICE_Init+0x50>)
 8007f28:	4812      	ldr	r0, [pc, #72]	; (8007f74 <MX_USB_DEVICE_Init+0x54>)
 8007f2a:	f7fe fcf2 	bl	8006912 <USBD_Init>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f34:	f7f8 f9da 	bl	80002ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8007f38:	490f      	ldr	r1, [pc, #60]	; (8007f78 <MX_USB_DEVICE_Init+0x58>)
 8007f3a:	480e      	ldr	r0, [pc, #56]	; (8007f74 <MX_USB_DEVICE_Init+0x54>)
 8007f3c:	f7fe fd19 	bl	8006972 <USBD_RegisterClass>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f46:	f7f8 f9d1 	bl	80002ec <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8007f4a:	490c      	ldr	r1, [pc, #48]	; (8007f7c <MX_USB_DEVICE_Init+0x5c>)
 8007f4c:	4809      	ldr	r0, [pc, #36]	; (8007f74 <MX_USB_DEVICE_Init+0x54>)
 8007f4e:	f7fc ffc1 	bl	8004ed4 <USBD_MSC_RegisterStorage>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f58:	f7f8 f9c8 	bl	80002ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f5c:	4805      	ldr	r0, [pc, #20]	; (8007f74 <MX_USB_DEVICE_Init+0x54>)
 8007f5e:	f7fe fd3e 	bl	80069de <USBD_Start>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f68:	f7f8 f9c0 	bl	80002ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f6c:	bf00      	nop
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	200000b4 	.word	0x200000b4
 8007f74:	20000158 	.word	0x20000158
 8007f78:	2000000c 	.word	0x2000000c
 8007f7c:	20000114 	.word	0x20000114

08007f80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	4603      	mov	r3, r0
 8007f88:	6039      	str	r1, [r7, #0]
 8007f8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2212      	movs	r2, #18
 8007f90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f92:	4b03      	ldr	r3, [pc, #12]	; (8007fa0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	200000d4 	.word	0x200000d4

08007fa4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	4603      	mov	r3, r0
 8007fac:	6039      	str	r1, [r7, #0]
 8007fae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	2204      	movs	r2, #4
 8007fb4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007fb6:	4b03      	ldr	r3, [pc, #12]	; (8007fc4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	200000f4 	.word	0x200000f4

08007fc8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	4603      	mov	r3, r0
 8007fd0:	6039      	str	r1, [r7, #0]
 8007fd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fd4:	79fb      	ldrb	r3, [r7, #7]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d105      	bne.n	8007fe6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	4907      	ldr	r1, [pc, #28]	; (8007ffc <USBD_FS_ProductStrDescriptor+0x34>)
 8007fde:	4808      	ldr	r0, [pc, #32]	; (8008000 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fe0:	f7ff feda 	bl	8007d98 <USBD_GetString>
 8007fe4:	e004      	b.n	8007ff0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	4904      	ldr	r1, [pc, #16]	; (8007ffc <USBD_FS_ProductStrDescriptor+0x34>)
 8007fea:	4805      	ldr	r0, [pc, #20]	; (8008000 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fec:	f7ff fed4 	bl	8007d98 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ff0:	4b02      	ldr	r3, [pc, #8]	; (8007ffc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20000434 	.word	0x20000434
 8008000:	08008c34 	.word	0x08008c34

08008004 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	4603      	mov	r3, r0
 800800c:	6039      	str	r1, [r7, #0]
 800800e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	4904      	ldr	r1, [pc, #16]	; (8008024 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008014:	4804      	ldr	r0, [pc, #16]	; (8008028 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008016:	f7ff febf 	bl	8007d98 <USBD_GetString>
  return USBD_StrDesc;
 800801a:	4b02      	ldr	r3, [pc, #8]	; (8008024 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800801c:	4618      	mov	r0, r3
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	20000434 	.word	0x20000434
 8008028:	08008c48 	.word	0x08008c48

0800802c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	4603      	mov	r3, r0
 8008034:	6039      	str	r1, [r7, #0]
 8008036:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	221a      	movs	r2, #26
 800803c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800803e:	f000 f855 	bl	80080ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008042:	4b02      	ldr	r3, [pc, #8]	; (800804c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008044:	4618      	mov	r0, r3
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	200000f8 	.word	0x200000f8

08008050 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	4603      	mov	r3, r0
 8008058:	6039      	str	r1, [r7, #0]
 800805a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800805c:	79fb      	ldrb	r3, [r7, #7]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d105      	bne.n	800806e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	4907      	ldr	r1, [pc, #28]	; (8008084 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008066:	4808      	ldr	r0, [pc, #32]	; (8008088 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008068:	f7ff fe96 	bl	8007d98 <USBD_GetString>
 800806c:	e004      	b.n	8008078 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	4904      	ldr	r1, [pc, #16]	; (8008084 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008072:	4805      	ldr	r0, [pc, #20]	; (8008088 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008074:	f7ff fe90 	bl	8007d98 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008078:	4b02      	ldr	r3, [pc, #8]	; (8008084 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800807a:	4618      	mov	r0, r3
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20000434 	.word	0x20000434
 8008088:	08008c5c 	.word	0x08008c5c

0800808c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	4603      	mov	r3, r0
 8008094:	6039      	str	r1, [r7, #0]
 8008096:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d105      	bne.n	80080aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800809e:	683a      	ldr	r2, [r7, #0]
 80080a0:	4907      	ldr	r1, [pc, #28]	; (80080c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080a2:	4808      	ldr	r0, [pc, #32]	; (80080c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080a4:	f7ff fe78 	bl	8007d98 <USBD_GetString>
 80080a8:	e004      	b.n	80080b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	4904      	ldr	r1, [pc, #16]	; (80080c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080ae:	4805      	ldr	r0, [pc, #20]	; (80080c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080b0:	f7ff fe72 	bl	8007d98 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080b4:	4b02      	ldr	r3, [pc, #8]	; (80080c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20000434 	.word	0x20000434
 80080c4:	08008c68 	.word	0x08008c68

080080c8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	4603      	mov	r3, r0
 80080d0:	6039      	str	r1, [r7, #0]
 80080d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	220c      	movs	r2, #12
 80080d8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80080da:	4b03      	ldr	r3, [pc, #12]	; (80080e8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80080dc:	4618      	mov	r0, r3
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	200000e8 	.word	0x200000e8

080080ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80080f2:	4b0f      	ldr	r3, [pc, #60]	; (8008130 <Get_SerialNum+0x44>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80080f8:	4b0e      	ldr	r3, [pc, #56]	; (8008134 <Get_SerialNum+0x48>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80080fe:	4b0e      	ldr	r3, [pc, #56]	; (8008138 <Get_SerialNum+0x4c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4413      	add	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d009      	beq.n	8008126 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008112:	2208      	movs	r2, #8
 8008114:	4909      	ldr	r1, [pc, #36]	; (800813c <Get_SerialNum+0x50>)
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 f814 	bl	8008144 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800811c:	2204      	movs	r2, #4
 800811e:	4908      	ldr	r1, [pc, #32]	; (8008140 <Get_SerialNum+0x54>)
 8008120:	68b8      	ldr	r0, [r7, #8]
 8008122:	f000 f80f 	bl	8008144 <IntToUnicode>
  }
}
 8008126:	bf00      	nop
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	1fff7590 	.word	0x1fff7590
 8008134:	1fff7594 	.word	0x1fff7594
 8008138:	1fff7598 	.word	0x1fff7598
 800813c:	200000fa 	.word	0x200000fa
 8008140:	2000010a 	.word	0x2000010a

08008144 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	4613      	mov	r3, r2
 8008150:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008152:	2300      	movs	r3, #0
 8008154:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008156:	2300      	movs	r3, #0
 8008158:	75fb      	strb	r3, [r7, #23]
 800815a:	e027      	b.n	80081ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	0f1b      	lsrs	r3, r3, #28
 8008160:	2b09      	cmp	r3, #9
 8008162:	d80b      	bhi.n	800817c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	0f1b      	lsrs	r3, r3, #28
 8008168:	b2da      	uxtb	r2, r3
 800816a:	7dfb      	ldrb	r3, [r7, #23]
 800816c:	005b      	lsls	r3, r3, #1
 800816e:	4619      	mov	r1, r3
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	440b      	add	r3, r1
 8008174:	3230      	adds	r2, #48	; 0x30
 8008176:	b2d2      	uxtb	r2, r2
 8008178:	701a      	strb	r2, [r3, #0]
 800817a:	e00a      	b.n	8008192 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	0f1b      	lsrs	r3, r3, #28
 8008180:	b2da      	uxtb	r2, r3
 8008182:	7dfb      	ldrb	r3, [r7, #23]
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	4619      	mov	r1, r3
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	440b      	add	r3, r1
 800818c:	3237      	adds	r2, #55	; 0x37
 800818e:	b2d2      	uxtb	r2, r2
 8008190:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	011b      	lsls	r3, r3, #4
 8008196:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008198:	7dfb      	ldrb	r3, [r7, #23]
 800819a:	005b      	lsls	r3, r3, #1
 800819c:	3301      	adds	r3, #1
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	4413      	add	r3, r2
 80081a2:	2200      	movs	r2, #0
 80081a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081a6:	7dfb      	ldrb	r3, [r7, #23]
 80081a8:	3301      	adds	r3, #1
 80081aa:	75fb      	strb	r3, [r7, #23]
 80081ac:	7dfa      	ldrb	r2, [r7, #23]
 80081ae:	79fb      	ldrb	r3, [r7, #7]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d3d3      	bcc.n	800815c <IntToUnicode+0x18>
  }
}
 80081b4:	bf00      	nop
 80081b6:	bf00      	nop
 80081b8:	371c      	adds	r7, #28
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b083      	sub	sp, #12
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	4603      	mov	r3, r0
 80081ca:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80081cc:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80081da:	b480      	push	{r7}
 80081dc:	b085      	sub	sp, #20
 80081de:	af00      	add	r7, sp, #0
 80081e0:	4603      	mov	r3, r0
 80081e2:	60b9      	str	r1, [r7, #8]
 80081e4:	607a      	str	r2, [r7, #4]
 80081e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2296      	movs	r2, #150	; 0x96
 80081ec:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081f4:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80081f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	4603      	mov	r3, r0
 800820c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800820e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008210:	4618      	mov	r0, r3
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008226:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008228:	4618      	mov	r0, r3
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	607a      	str	r2, [r7, #4]
 800823e:	461a      	mov	r2, r3
 8008240:	4603      	mov	r3, r0
 8008242:	73fb      	strb	r3, [r7, #15]
 8008244:	4613      	mov	r3, r2
 8008246:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	memcpy(buf,&buffer[blk_addr*STORAGE_BLK_SIZ],blk_len*STORAGE_BLK_SIZ );
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	025b      	lsls	r3, r3, #9
 800824c:	4a06      	ldr	r2, [pc, #24]	; (8008268 <STORAGE_Read_FS+0x34>)
 800824e:	1899      	adds	r1, r3, r2
 8008250:	89bb      	ldrh	r3, [r7, #12]
 8008252:	025b      	lsls	r3, r3, #9
 8008254:	461a      	mov	r2, r3
 8008256:	68b8      	ldr	r0, [r7, #8]
 8008258:	f000 fcd2 	bl	8008c00 <memcpy>
  return (USBD_OK);
 800825c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20000634 	.word	0x20000634

0800826c <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	60b9      	str	r1, [r7, #8]
 8008274:	607a      	str	r2, [r7, #4]
 8008276:	461a      	mov	r2, r3
 8008278:	4603      	mov	r3, r0
 800827a:	73fb      	strb	r3, [r7, #15]
 800827c:	4613      	mov	r3, r2
 800827e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
//
	memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ],buf,blk_len*STORAGE_BLK_SIZ );
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	025b      	lsls	r3, r3, #9
 8008284:	4a06      	ldr	r2, [pc, #24]	; (80082a0 <STORAGE_Write_FS+0x34>)
 8008286:	1898      	adds	r0, r3, r2
 8008288:	89bb      	ldrh	r3, [r7, #12]
 800828a:	025b      	lsls	r3, r3, #9
 800828c:	461a      	mov	r2, r3
 800828e:	68b9      	ldr	r1, [r7, #8]
 8008290:	f000 fcb6 	bl	8008c00 <memcpy>
  return (USBD_OK);
 8008294:	2300      	movs	r3, #0
//	        // File creation successful
//	        return USBD_OK;
//	    }
//	return write_data_to_flash( buf, blk_addr, blk_len );
  /* USER CODE END 7 */
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	20000634 	.word	0x20000634

080082a4 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80082a4:	b480      	push	{r7}
 80082a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80082a8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b0ae      	sub	sp, #184	; 0xb8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80082c0:	2200      	movs	r2, #0
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	605a      	str	r2, [r3, #4]
 80082c6:	609a      	str	r2, [r3, #8]
 80082c8:	60da      	str	r2, [r3, #12]
 80082ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80082cc:	f107 0318 	add.w	r3, r7, #24
 80082d0:	228c      	movs	r2, #140	; 0x8c
 80082d2:	2100      	movs	r1, #0
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 fc67 	bl	8008ba8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082e2:	d173      	bne.n	80083cc <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80082e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80082ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80082ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80082f2:	2303      	movs	r3, #3
 80082f4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80082f6:	2301      	movs	r3, #1
 80082f8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80082fa:	230c      	movs	r3, #12
 80082fc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80082fe:	2302      	movs	r3, #2
 8008300:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008302:	2302      	movs	r3, #2
 8008304:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008306:	2302      	movs	r3, #2
 8008308:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800830a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800830e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008310:	f107 0318 	add.w	r3, r7, #24
 8008314:	4618      	mov	r0, r3
 8008316:	f7fa fc19 	bl	8002b4c <HAL_RCCEx_PeriphCLKConfig>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8008320:	f7f7 ffe4 	bl	80002ec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008324:	4b2b      	ldr	r3, [pc, #172]	; (80083d4 <HAL_PCD_MspInit+0x120>)
 8008326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008328:	4a2a      	ldr	r2, [pc, #168]	; (80083d4 <HAL_PCD_MspInit+0x120>)
 800832a:	f043 0301 	orr.w	r3, r3, #1
 800832e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008330:	4b28      	ldr	r3, [pc, #160]	; (80083d4 <HAL_PCD_MspInit+0x120>)
 8008332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	617b      	str	r3, [r7, #20]
 800833a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800833c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008340:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008344:	2302      	movs	r3, #2
 8008346:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800834a:	2300      	movs	r3, #0
 800834c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008350:	2303      	movs	r3, #3
 8008352:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008356:	230a      	movs	r3, #10
 8008358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800835c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008360:	4619      	mov	r1, r3
 8008362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008366:	f7f8 fa05 	bl	8000774 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800836a:	4b1a      	ldr	r3, [pc, #104]	; (80083d4 <HAL_PCD_MspInit+0x120>)
 800836c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800836e:	4a19      	ldr	r2, [pc, #100]	; (80083d4 <HAL_PCD_MspInit+0x120>)
 8008370:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008376:	4b17      	ldr	r3, [pc, #92]	; (80083d4 <HAL_PCD_MspInit+0x120>)
 8008378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800837a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800837e:	613b      	str	r3, [r7, #16]
 8008380:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008382:	4b14      	ldr	r3, [pc, #80]	; (80083d4 <HAL_PCD_MspInit+0x120>)
 8008384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d114      	bne.n	80083b8 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800838e:	4b11      	ldr	r3, [pc, #68]	; (80083d4 <HAL_PCD_MspInit+0x120>)
 8008390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008392:	4a10      	ldr	r2, [pc, #64]	; (80083d4 <HAL_PCD_MspInit+0x120>)
 8008394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008398:	6593      	str	r3, [r2, #88]	; 0x58
 800839a:	4b0e      	ldr	r3, [pc, #56]	; (80083d4 <HAL_PCD_MspInit+0x120>)
 800839c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800839e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083a2:	60fb      	str	r3, [r7, #12]
 80083a4:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80083a6:	f7f9 fdaf 	bl	8001f08 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80083aa:	4b0a      	ldr	r3, [pc, #40]	; (80083d4 <HAL_PCD_MspInit+0x120>)
 80083ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ae:	4a09      	ldr	r2, [pc, #36]	; (80083d4 <HAL_PCD_MspInit+0x120>)
 80083b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083b4:	6593      	str	r3, [r2, #88]	; 0x58
 80083b6:	e001      	b.n	80083bc <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80083b8:	f7f9 fda6 	bl	8001f08 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083bc:	2200      	movs	r2, #0
 80083be:	2100      	movs	r1, #0
 80083c0:	2043      	movs	r0, #67	; 0x43
 80083c2:	f7f8 f9a0 	bl	8000706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083c6:	2043      	movs	r0, #67	; 0x43
 80083c8:	f7f8 f9b9 	bl	800073e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083cc:	bf00      	nop
 80083ce:	37b8      	adds	r7, #184	; 0xb8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	40021000 	.word	0x40021000

080083d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80083ec:	4619      	mov	r1, r3
 80083ee:	4610      	mov	r0, r2
 80083f0:	f7fe fb42 	bl	8006a78 <USBD_LL_SetupStage>
}
 80083f4:	bf00      	nop
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	460b      	mov	r3, r1
 8008406:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800840e:	78fa      	ldrb	r2, [r7, #3]
 8008410:	6879      	ldr	r1, [r7, #4]
 8008412:	4613      	mov	r3, r2
 8008414:	00db      	lsls	r3, r3, #3
 8008416:	4413      	add	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	440b      	add	r3, r1
 800841c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	78fb      	ldrb	r3, [r7, #3]
 8008424:	4619      	mov	r1, r3
 8008426:	f7fe fb7c 	bl	8006b22 <USBD_LL_DataOutStage>
}
 800842a:	bf00      	nop
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b082      	sub	sp, #8
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	460b      	mov	r3, r1
 800843c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008444:	78fa      	ldrb	r2, [r7, #3]
 8008446:	6879      	ldr	r1, [r7, #4]
 8008448:	4613      	mov	r3, r2
 800844a:	00db      	lsls	r3, r3, #3
 800844c:	4413      	add	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	440b      	add	r3, r1
 8008452:	3348      	adds	r3, #72	; 0x48
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	78fb      	ldrb	r3, [r7, #3]
 8008458:	4619      	mov	r1, r3
 800845a:	f7fe fc15 	bl	8006c88 <USBD_LL_DataInStage>
}
 800845e:	bf00      	nop
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b082      	sub	sp, #8
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008474:	4618      	mov	r0, r3
 8008476:	f7fe fd4f 	bl	8006f18 <USBD_LL_SOF>
}
 800847a:	bf00      	nop
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800848a:	2301      	movs	r3, #1
 800848c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	2b02      	cmp	r3, #2
 8008494:	d001      	beq.n	800849a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008496:	f7f7 ff29 	bl	80002ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084a0:	7bfa      	ldrb	r2, [r7, #15]
 80084a2:	4611      	mov	r1, r2
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fe fcf3 	bl	8006e90 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fe fc9b 	bl	8006dec <USBD_LL_Reset>
}
 80084b6:	bf00      	nop
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	6812      	ldr	r2, [r2, #0]
 80084d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80084da:	f043 0301 	orr.w	r3, r3, #1
 80084de:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe fce2 	bl	8006eb0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d005      	beq.n	8008500 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084f4:	4b04      	ldr	r3, [pc, #16]	; (8008508 <HAL_PCD_SuspendCallback+0x48>)
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	4a03      	ldr	r2, [pc, #12]	; (8008508 <HAL_PCD_SuspendCallback+0x48>)
 80084fa:	f043 0306 	orr.w	r3, r3, #6
 80084fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	e000ed00 	.word	0xe000ed00

0800850c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	6812      	ldr	r2, [r2, #0]
 8008522:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008526:	f023 0301 	bic.w	r3, r3, #1
 800852a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a1b      	ldr	r3, [r3, #32]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d007      	beq.n	8008544 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008534:	4b08      	ldr	r3, [pc, #32]	; (8008558 <HAL_PCD_ResumeCallback+0x4c>)
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	4a07      	ldr	r2, [pc, #28]	; (8008558 <HAL_PCD_ResumeCallback+0x4c>)
 800853a:	f023 0306 	bic.w	r3, r3, #6
 800853e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008540:	f000 fb2c 	bl	8008b9c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800854a:	4618      	mov	r0, r3
 800854c:	f7fe fccc 	bl	8006ee8 <USBD_LL_Resume>
}
 8008550:	bf00      	nop
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	e000ed00 	.word	0xe000ed00

0800855c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800856e:	78fa      	ldrb	r2, [r7, #3]
 8008570:	4611      	mov	r1, r2
 8008572:	4618      	mov	r0, r3
 8008574:	f7fe fd22 	bl	8006fbc <USBD_LL_IsoOUTIncomplete>
}
 8008578:	bf00      	nop
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008592:	78fa      	ldrb	r2, [r7, #3]
 8008594:	4611      	mov	r1, r2
 8008596:	4618      	mov	r0, r3
 8008598:	f7fe fcde 	bl	8006f58 <USBD_LL_IsoINIncomplete>
}
 800859c:	bf00      	nop
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fe fd34 	bl	8007020 <USBD_LL_DevConnected>
}
 80085b8:	bf00      	nop
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fe fd31 	bl	8007036 <USBD_LL_DevDisconnected>
}
 80085d4:	bf00      	nop
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d13c      	bne.n	8008666 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80085ec:	4a20      	ldr	r2, [pc, #128]	; (8008670 <USBD_LL_Init+0x94>)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a1e      	ldr	r2, [pc, #120]	; (8008670 <USBD_LL_Init+0x94>)
 80085f8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80085fc:	4b1c      	ldr	r3, [pc, #112]	; (8008670 <USBD_LL_Init+0x94>)
 80085fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008602:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008604:	4b1a      	ldr	r3, [pc, #104]	; (8008670 <USBD_LL_Init+0x94>)
 8008606:	2206      	movs	r2, #6
 8008608:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800860a:	4b19      	ldr	r3, [pc, #100]	; (8008670 <USBD_LL_Init+0x94>)
 800860c:	2202      	movs	r2, #2
 800860e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008610:	4b17      	ldr	r3, [pc, #92]	; (8008670 <USBD_LL_Init+0x94>)
 8008612:	2202      	movs	r2, #2
 8008614:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008616:	4b16      	ldr	r3, [pc, #88]	; (8008670 <USBD_LL_Init+0x94>)
 8008618:	2200      	movs	r2, #0
 800861a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800861c:	4b14      	ldr	r3, [pc, #80]	; (8008670 <USBD_LL_Init+0x94>)
 800861e:	2200      	movs	r2, #0
 8008620:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008622:	4b13      	ldr	r3, [pc, #76]	; (8008670 <USBD_LL_Init+0x94>)
 8008624:	2200      	movs	r2, #0
 8008626:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008628:	4b11      	ldr	r3, [pc, #68]	; (8008670 <USBD_LL_Init+0x94>)
 800862a:	2200      	movs	r2, #0
 800862c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800862e:	4b10      	ldr	r3, [pc, #64]	; (8008670 <USBD_LL_Init+0x94>)
 8008630:	2200      	movs	r2, #0
 8008632:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008634:	4b0e      	ldr	r3, [pc, #56]	; (8008670 <USBD_LL_Init+0x94>)
 8008636:	2200      	movs	r2, #0
 8008638:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800863a:	480d      	ldr	r0, [pc, #52]	; (8008670 <USBD_LL_Init+0x94>)
 800863c:	f7f8 fa2c 	bl	8000a98 <HAL_PCD_Init>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008646:	f7f7 fe51 	bl	80002ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800864a:	2180      	movs	r1, #128	; 0x80
 800864c:	4808      	ldr	r0, [pc, #32]	; (8008670 <USBD_LL_Init+0x94>)
 800864e:	f7f9 fbc2 	bl	8001dd6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008652:	2240      	movs	r2, #64	; 0x40
 8008654:	2100      	movs	r1, #0
 8008656:	4806      	ldr	r0, [pc, #24]	; (8008670 <USBD_LL_Init+0x94>)
 8008658:	f7f9 fb76 	bl	8001d48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800865c:	2280      	movs	r2, #128	; 0x80
 800865e:	2101      	movs	r1, #1
 8008660:	4803      	ldr	r0, [pc, #12]	; (8008670 <USBD_LL_Init+0x94>)
 8008662:	f7f9 fb71 	bl	8001d48 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	20013234 	.word	0x20013234

08008674 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800868a:	4618      	mov	r0, r3
 800868c:	f7f8 fb28 	bl	8000ce0 <HAL_PCD_Start>
 8008690:	4603      	mov	r3, r0
 8008692:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	2b03      	cmp	r3, #3
 8008698:	d816      	bhi.n	80086c8 <USBD_LL_Start+0x54>
 800869a:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <USBD_LL_Start+0x2c>)
 800869c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a0:	080086b1 	.word	0x080086b1
 80086a4:	080086b7 	.word	0x080086b7
 80086a8:	080086bd 	.word	0x080086bd
 80086ac:	080086c3 	.word	0x080086c3
    case HAL_OK :
      usb_status = USBD_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73fb      	strb	r3, [r7, #15]
    break;
 80086b4:	e00b      	b.n	80086ce <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086b6:	2303      	movs	r3, #3
 80086b8:	73fb      	strb	r3, [r7, #15]
    break;
 80086ba:	e008      	b.n	80086ce <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086bc:	2301      	movs	r3, #1
 80086be:	73fb      	strb	r3, [r7, #15]
    break;
 80086c0:	e005      	b.n	80086ce <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086c2:	2303      	movs	r3, #3
 80086c4:	73fb      	strb	r3, [r7, #15]
    break;
 80086c6:	e002      	b.n	80086ce <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80086c8:	2303      	movs	r3, #3
 80086ca:	73fb      	strb	r3, [r7, #15]
    break;
 80086cc:	bf00      	nop
  }
  return usb_status;
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	4608      	mov	r0, r1
 80086e2:	4611      	mov	r1, r2
 80086e4:	461a      	mov	r2, r3
 80086e6:	4603      	mov	r3, r0
 80086e8:	70fb      	strb	r3, [r7, #3]
 80086ea:	460b      	mov	r3, r1
 80086ec:	70bb      	strb	r3, [r7, #2]
 80086ee:	4613      	mov	r3, r2
 80086f0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008700:	78bb      	ldrb	r3, [r7, #2]
 8008702:	883a      	ldrh	r2, [r7, #0]
 8008704:	78f9      	ldrb	r1, [r7, #3]
 8008706:	f7f8 ffd2 	bl	80016ae <HAL_PCD_EP_Open>
 800870a:	4603      	mov	r3, r0
 800870c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	2b03      	cmp	r3, #3
 8008712:	d817      	bhi.n	8008744 <USBD_LL_OpenEP+0x6c>
 8008714:	a201      	add	r2, pc, #4	; (adr r2, 800871c <USBD_LL_OpenEP+0x44>)
 8008716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871a:	bf00      	nop
 800871c:	0800872d 	.word	0x0800872d
 8008720:	08008733 	.word	0x08008733
 8008724:	08008739 	.word	0x08008739
 8008728:	0800873f 	.word	0x0800873f
    case HAL_OK :
      usb_status = USBD_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	73fb      	strb	r3, [r7, #15]
    break;
 8008730:	e00b      	b.n	800874a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008732:	2303      	movs	r3, #3
 8008734:	73fb      	strb	r3, [r7, #15]
    break;
 8008736:	e008      	b.n	800874a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008738:	2301      	movs	r3, #1
 800873a:	73fb      	strb	r3, [r7, #15]
    break;
 800873c:	e005      	b.n	800874a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800873e:	2303      	movs	r3, #3
 8008740:	73fb      	strb	r3, [r7, #15]
    break;
 8008742:	e002      	b.n	800874a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008744:	2303      	movs	r3, #3
 8008746:	73fb      	strb	r3, [r7, #15]
    break;
 8008748:	bf00      	nop
  }
  return usb_status;
 800874a:	7bfb      	ldrb	r3, [r7, #15]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800876e:	78fa      	ldrb	r2, [r7, #3]
 8008770:	4611      	mov	r1, r2
 8008772:	4618      	mov	r0, r3
 8008774:	f7f9 f803 	bl	800177e <HAL_PCD_EP_Close>
 8008778:	4603      	mov	r3, r0
 800877a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800877c:	7bbb      	ldrb	r3, [r7, #14]
 800877e:	2b03      	cmp	r3, #3
 8008780:	d816      	bhi.n	80087b0 <USBD_LL_CloseEP+0x5c>
 8008782:	a201      	add	r2, pc, #4	; (adr r2, 8008788 <USBD_LL_CloseEP+0x34>)
 8008784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008788:	08008799 	.word	0x08008799
 800878c:	0800879f 	.word	0x0800879f
 8008790:	080087a5 	.word	0x080087a5
 8008794:	080087ab 	.word	0x080087ab
    case HAL_OK :
      usb_status = USBD_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	73fb      	strb	r3, [r7, #15]
    break;
 800879c:	e00b      	b.n	80087b6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800879e:	2303      	movs	r3, #3
 80087a0:	73fb      	strb	r3, [r7, #15]
    break;
 80087a2:	e008      	b.n	80087b6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80087a4:	2301      	movs	r3, #1
 80087a6:	73fb      	strb	r3, [r7, #15]
    break;
 80087a8:	e005      	b.n	80087b6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087aa:	2303      	movs	r3, #3
 80087ac:	73fb      	strb	r3, [r7, #15]
    break;
 80087ae:	e002      	b.n	80087b6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80087b0:	2303      	movs	r3, #3
 80087b2:	73fb      	strb	r3, [r7, #15]
    break;
 80087b4:	bf00      	nop
  }
  return usb_status;
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087da:	78fa      	ldrb	r2, [r7, #3]
 80087dc:	4611      	mov	r1, r2
 80087de:	4618      	mov	r0, r3
 80087e0:	f7f9 f97b 	bl	8001ada <HAL_PCD_EP_Flush>
 80087e4:	4603      	mov	r3, r0
 80087e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80087e8:	7bbb      	ldrb	r3, [r7, #14]
 80087ea:	2b03      	cmp	r3, #3
 80087ec:	d816      	bhi.n	800881c <USBD_LL_FlushEP+0x5c>
 80087ee:	a201      	add	r2, pc, #4	; (adr r2, 80087f4 <USBD_LL_FlushEP+0x34>)
 80087f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f4:	08008805 	.word	0x08008805
 80087f8:	0800880b 	.word	0x0800880b
 80087fc:	08008811 	.word	0x08008811
 8008800:	08008817 	.word	0x08008817
    case HAL_OK :
      usb_status = USBD_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	73fb      	strb	r3, [r7, #15]
    break;
 8008808:	e00b      	b.n	8008822 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800880a:	2303      	movs	r3, #3
 800880c:	73fb      	strb	r3, [r7, #15]
    break;
 800880e:	e008      	b.n	8008822 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008810:	2301      	movs	r3, #1
 8008812:	73fb      	strb	r3, [r7, #15]
    break;
 8008814:	e005      	b.n	8008822 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008816:	2303      	movs	r3, #3
 8008818:	73fb      	strb	r3, [r7, #15]
    break;
 800881a:	e002      	b.n	8008822 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800881c:	2303      	movs	r3, #3
 800881e:	73fb      	strb	r3, [r7, #15]
    break;
 8008820:	bf00      	nop
  }
  return usb_status;
 8008822:	7bfb      	ldrb	r3, [r7, #15]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008846:	78fa      	ldrb	r2, [r7, #3]
 8008848:	4611      	mov	r1, r2
 800884a:	4618      	mov	r0, r3
 800884c:	f7f9 f85c 	bl	8001908 <HAL_PCD_EP_SetStall>
 8008850:	4603      	mov	r3, r0
 8008852:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008854:	7bbb      	ldrb	r3, [r7, #14]
 8008856:	2b03      	cmp	r3, #3
 8008858:	d816      	bhi.n	8008888 <USBD_LL_StallEP+0x5c>
 800885a:	a201      	add	r2, pc, #4	; (adr r2, 8008860 <USBD_LL_StallEP+0x34>)
 800885c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008860:	08008871 	.word	0x08008871
 8008864:	08008877 	.word	0x08008877
 8008868:	0800887d 	.word	0x0800887d
 800886c:	08008883 	.word	0x08008883
    case HAL_OK :
      usb_status = USBD_OK;
 8008870:	2300      	movs	r3, #0
 8008872:	73fb      	strb	r3, [r7, #15]
    break;
 8008874:	e00b      	b.n	800888e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008876:	2303      	movs	r3, #3
 8008878:	73fb      	strb	r3, [r7, #15]
    break;
 800887a:	e008      	b.n	800888e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800887c:	2301      	movs	r3, #1
 800887e:	73fb      	strb	r3, [r7, #15]
    break;
 8008880:	e005      	b.n	800888e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008882:	2303      	movs	r3, #3
 8008884:	73fb      	strb	r3, [r7, #15]
    break;
 8008886:	e002      	b.n	800888e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008888:	2303      	movs	r3, #3
 800888a:	73fb      	strb	r3, [r7, #15]
    break;
 800888c:	bf00      	nop
  }
  return usb_status;
 800888e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	460b      	mov	r3, r1
 80088a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088b2:	78fa      	ldrb	r2, [r7, #3]
 80088b4:	4611      	mov	r1, r2
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7f9 f888 	bl	80019cc <HAL_PCD_EP_ClrStall>
 80088bc:	4603      	mov	r3, r0
 80088be:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d816      	bhi.n	80088f4 <USBD_LL_ClearStallEP+0x5c>
 80088c6:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <USBD_LL_ClearStallEP+0x34>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	080088dd 	.word	0x080088dd
 80088d0:	080088e3 	.word	0x080088e3
 80088d4:	080088e9 	.word	0x080088e9
 80088d8:	080088ef 	.word	0x080088ef
    case HAL_OK :
      usb_status = USBD_OK;
 80088dc:	2300      	movs	r3, #0
 80088de:	73fb      	strb	r3, [r7, #15]
    break;
 80088e0:	e00b      	b.n	80088fa <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088e2:	2303      	movs	r3, #3
 80088e4:	73fb      	strb	r3, [r7, #15]
    break;
 80088e6:	e008      	b.n	80088fa <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80088e8:	2301      	movs	r3, #1
 80088ea:	73fb      	strb	r3, [r7, #15]
    break;
 80088ec:	e005      	b.n	80088fa <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088ee:	2303      	movs	r3, #3
 80088f0:	73fb      	strb	r3, [r7, #15]
    break;
 80088f2:	e002      	b.n	80088fa <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80088f4:	2303      	movs	r3, #3
 80088f6:	73fb      	strb	r3, [r7, #15]
    break;
 80088f8:	bf00      	nop
  }
  return usb_status;
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	460b      	mov	r3, r1
 800890e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008916:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008918:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800891c:	2b00      	cmp	r3, #0
 800891e:	da0b      	bge.n	8008938 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008920:	78fb      	ldrb	r3, [r7, #3]
 8008922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008926:	68f9      	ldr	r1, [r7, #12]
 8008928:	4613      	mov	r3, r2
 800892a:	00db      	lsls	r3, r3, #3
 800892c:	4413      	add	r3, r2
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	440b      	add	r3, r1
 8008932:	333e      	adds	r3, #62	; 0x3e
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	e00b      	b.n	8008950 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008938:	78fb      	ldrb	r3, [r7, #3]
 800893a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800893e:	68f9      	ldr	r1, [r7, #12]
 8008940:	4613      	mov	r3, r2
 8008942:	00db      	lsls	r3, r3, #3
 8008944:	4413      	add	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	440b      	add	r3, r1
 800894a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800894e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008976:	78fa      	ldrb	r2, [r7, #3]
 8008978:	4611      	mov	r1, r2
 800897a:	4618      	mov	r0, r3
 800897c:	f7f8 fe72 	bl	8001664 <HAL_PCD_SetAddress>
 8008980:	4603      	mov	r3, r0
 8008982:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	2b03      	cmp	r3, #3
 8008988:	d816      	bhi.n	80089b8 <USBD_LL_SetUSBAddress+0x5c>
 800898a:	a201      	add	r2, pc, #4	; (adr r2, 8008990 <USBD_LL_SetUSBAddress+0x34>)
 800898c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008990:	080089a1 	.word	0x080089a1
 8008994:	080089a7 	.word	0x080089a7
 8008998:	080089ad 	.word	0x080089ad
 800899c:	080089b3 	.word	0x080089b3
    case HAL_OK :
      usb_status = USBD_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73fb      	strb	r3, [r7, #15]
    break;
 80089a4:	e00b      	b.n	80089be <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80089a6:	2303      	movs	r3, #3
 80089a8:	73fb      	strb	r3, [r7, #15]
    break;
 80089aa:	e008      	b.n	80089be <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80089ac:	2301      	movs	r3, #1
 80089ae:	73fb      	strb	r3, [r7, #15]
    break;
 80089b0:	e005      	b.n	80089be <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80089b2:	2303      	movs	r3, #3
 80089b4:	73fb      	strb	r3, [r7, #15]
    break;
 80089b6:	e002      	b.n	80089be <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80089b8:	2303      	movs	r3, #3
 80089ba:	73fb      	strb	r3, [r7, #15]
    break;
 80089bc:	bf00      	nop
  }
  return usb_status;
 80089be:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	607a      	str	r2, [r7, #4]
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	460b      	mov	r3, r1
 80089d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089d8:	2300      	movs	r3, #0
 80089da:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80089e6:	7af9      	ldrb	r1, [r7, #11]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	f7f8 ff5b 	bl	80018a6 <HAL_PCD_EP_Transmit>
 80089f0:	4603      	mov	r3, r0
 80089f2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80089f4:	7dbb      	ldrb	r3, [r7, #22]
 80089f6:	2b03      	cmp	r3, #3
 80089f8:	d816      	bhi.n	8008a28 <USBD_LL_Transmit+0x60>
 80089fa:	a201      	add	r2, pc, #4	; (adr r2, 8008a00 <USBD_LL_Transmit+0x38>)
 80089fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a00:	08008a11 	.word	0x08008a11
 8008a04:	08008a17 	.word	0x08008a17
 8008a08:	08008a1d 	.word	0x08008a1d
 8008a0c:	08008a23 	.word	0x08008a23
    case HAL_OK :
      usb_status = USBD_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	75fb      	strb	r3, [r7, #23]
    break;
 8008a14:	e00b      	b.n	8008a2e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a16:	2303      	movs	r3, #3
 8008a18:	75fb      	strb	r3, [r7, #23]
    break;
 8008a1a:	e008      	b.n	8008a2e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	75fb      	strb	r3, [r7, #23]
    break;
 8008a20:	e005      	b.n	8008a2e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a22:	2303      	movs	r3, #3
 8008a24:	75fb      	strb	r3, [r7, #23]
    break;
 8008a26:	e002      	b.n	8008a2e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	75fb      	strb	r3, [r7, #23]
    break;
 8008a2c:	bf00      	nop
  }
  return usb_status;
 8008a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3718      	adds	r7, #24
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	607a      	str	r2, [r7, #4]
 8008a42:	603b      	str	r3, [r7, #0]
 8008a44:	460b      	mov	r3, r1
 8008a46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008a56:	7af9      	ldrb	r1, [r7, #11]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	f7f8 fed9 	bl	8001812 <HAL_PCD_EP_Receive>
 8008a60:	4603      	mov	r3, r0
 8008a62:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008a64:	7dbb      	ldrb	r3, [r7, #22]
 8008a66:	2b03      	cmp	r3, #3
 8008a68:	d816      	bhi.n	8008a98 <USBD_LL_PrepareReceive+0x60>
 8008a6a:	a201      	add	r2, pc, #4	; (adr r2, 8008a70 <USBD_LL_PrepareReceive+0x38>)
 8008a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a70:	08008a81 	.word	0x08008a81
 8008a74:	08008a87 	.word	0x08008a87
 8008a78:	08008a8d 	.word	0x08008a8d
 8008a7c:	08008a93 	.word	0x08008a93
    case HAL_OK :
      usb_status = USBD_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	75fb      	strb	r3, [r7, #23]
    break;
 8008a84:	e00b      	b.n	8008a9e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a86:	2303      	movs	r3, #3
 8008a88:	75fb      	strb	r3, [r7, #23]
    break;
 8008a8a:	e008      	b.n	8008a9e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	75fb      	strb	r3, [r7, #23]
    break;
 8008a90:	e005      	b.n	8008a9e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a92:	2303      	movs	r3, #3
 8008a94:	75fb      	strb	r3, [r7, #23]
    break;
 8008a96:	e002      	b.n	8008a9e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	75fb      	strb	r3, [r7, #23]
    break;
 8008a9c:	bf00      	nop
  }
  return usb_status;
 8008a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3718      	adds	r7, #24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008aba:	78fa      	ldrb	r2, [r7, #3]
 8008abc:	4611      	mov	r1, r2
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7f8 fed9 	bl	8001876 <HAL_PCD_EP_GetRxCount>
 8008ac4:	4603      	mov	r3, r0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
	...

08008ad0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d002      	beq.n	8008ae8 <HAL_PCDEx_LPM_Callback+0x18>
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d01f      	beq.n	8008b26 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008ae6:	e03b      	b.n	8008b60 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d007      	beq.n	8008b00 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008af0:	f000 f854 	bl	8008b9c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008af4:	4b1c      	ldr	r3, [pc, #112]	; (8008b68 <HAL_PCDEx_LPM_Callback+0x98>)
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	4a1b      	ldr	r2, [pc, #108]	; (8008b68 <HAL_PCDEx_LPM_Callback+0x98>)
 8008afa:	f023 0306 	bic.w	r3, r3, #6
 8008afe:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	6812      	ldr	r2, [r2, #0]
 8008b0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b12:	f023 0301 	bic.w	r3, r3, #1
 8008b16:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fe f9e2 	bl	8006ee8 <USBD_LL_Resume>
    break;
 8008b24:	e01c      	b.n	8008b60 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	6812      	ldr	r2, [r2, #0]
 8008b34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b38:	f043 0301 	orr.w	r3, r3, #1
 8008b3c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fe f9b3 	bl	8006eb0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a1b      	ldr	r3, [r3, #32]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d005      	beq.n	8008b5e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b52:	4b05      	ldr	r3, [pc, #20]	; (8008b68 <HAL_PCDEx_LPM_Callback+0x98>)
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	4a04      	ldr	r2, [pc, #16]	; (8008b68 <HAL_PCDEx_LPM_Callback+0x98>)
 8008b58:	f043 0306 	orr.w	r3, r3, #6
 8008b5c:	6113      	str	r3, [r2, #16]
    break;
 8008b5e:	bf00      	nop
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	e000ed00 	.word	0xe000ed00

08008b6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008b74:	4b03      	ldr	r3, [pc, #12]	; (8008b84 <USBD_static_malloc+0x18>)
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	20013740 	.word	0x20013740

08008b88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]

}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008ba0:	f7f7 fb2f 	bl	8000202 <SystemClock_Config>
}
 8008ba4:	bf00      	nop
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <memset>:
 8008ba8:	4402      	add	r2, r0
 8008baa:	4603      	mov	r3, r0
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d100      	bne.n	8008bb2 <memset+0xa>
 8008bb0:	4770      	bx	lr
 8008bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8008bb6:	e7f9      	b.n	8008bac <memset+0x4>

08008bb8 <__libc_init_array>:
 8008bb8:	b570      	push	{r4, r5, r6, lr}
 8008bba:	4d0d      	ldr	r5, [pc, #52]	; (8008bf0 <__libc_init_array+0x38>)
 8008bbc:	4c0d      	ldr	r4, [pc, #52]	; (8008bf4 <__libc_init_array+0x3c>)
 8008bbe:	1b64      	subs	r4, r4, r5
 8008bc0:	10a4      	asrs	r4, r4, #2
 8008bc2:	2600      	movs	r6, #0
 8008bc4:	42a6      	cmp	r6, r4
 8008bc6:	d109      	bne.n	8008bdc <__libc_init_array+0x24>
 8008bc8:	4d0b      	ldr	r5, [pc, #44]	; (8008bf8 <__libc_init_array+0x40>)
 8008bca:	4c0c      	ldr	r4, [pc, #48]	; (8008bfc <__libc_init_array+0x44>)
 8008bcc:	f000 f826 	bl	8008c1c <_init>
 8008bd0:	1b64      	subs	r4, r4, r5
 8008bd2:	10a4      	asrs	r4, r4, #2
 8008bd4:	2600      	movs	r6, #0
 8008bd6:	42a6      	cmp	r6, r4
 8008bd8:	d105      	bne.n	8008be6 <__libc_init_array+0x2e>
 8008bda:	bd70      	pop	{r4, r5, r6, pc}
 8008bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008be0:	4798      	blx	r3
 8008be2:	3601      	adds	r6, #1
 8008be4:	e7ee      	b.n	8008bc4 <__libc_init_array+0xc>
 8008be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bea:	4798      	blx	r3
 8008bec:	3601      	adds	r6, #1
 8008bee:	e7f2      	b.n	8008bd6 <__libc_init_array+0x1e>
 8008bf0:	08008cdc 	.word	0x08008cdc
 8008bf4:	08008cdc 	.word	0x08008cdc
 8008bf8:	08008cdc 	.word	0x08008cdc
 8008bfc:	08008ce0 	.word	0x08008ce0

08008c00 <memcpy>:
 8008c00:	440a      	add	r2, r1
 8008c02:	4291      	cmp	r1, r2
 8008c04:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c08:	d100      	bne.n	8008c0c <memcpy+0xc>
 8008c0a:	4770      	bx	lr
 8008c0c:	b510      	push	{r4, lr}
 8008c0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c16:	4291      	cmp	r1, r2
 8008c18:	d1f9      	bne.n	8008c0e <memcpy+0xe>
 8008c1a:	bd10      	pop	{r4, pc}

08008c1c <_init>:
 8008c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1e:	bf00      	nop
 8008c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c22:	bc08      	pop	{r3}
 8008c24:	469e      	mov	lr, r3
 8008c26:	4770      	bx	lr

08008c28 <_fini>:
 8008c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2a:	bf00      	nop
 8008c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c2e:	bc08      	pop	{r3}
 8008c30:	469e      	mov	lr, r3
 8008c32:	4770      	bx	lr
