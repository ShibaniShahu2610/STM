/*
||
|| @file Keypad.c
|| @version 3.1
|| @authors Mark Stanley, Alexander Brevig
|| @contact mstanley@technologist.com, alexanderbrevig@gmail.com
||
|| @description
|| | This library provides a simple interface for using matrix
|| | keypads. It supports multiple keypresses while maintaining
|| | backwards compatibility with the old single key library.
|| | It also supports user selectable pins and definable keymaps.
|| #
||
|| @license
|| | This library is free software; you can redistribute it and/or
|| | modify it under the terms of the GNU Lesser General Public
|| | License as published by the Free Software Foundation; version
|| | 2.1 of the License.
|| |
|| | This library is distributed in the hope that it will be useful,
|| | but WITHOUT ANY WARRANTY; without even the implied warranty of
|| | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
|| | Lesser General Public License for more details.
|| |
|| | You should have received a copy of the GNU Lesser General Public
|| | License along with this library; if not, write to the Free Software
|| | Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
|| #
||
*/
#include "Keypad.h"

// Constructor: Allows custom keymap, pin configuration, and keypad sizes.
void Keypad_init(Keypad* keypad, char *userKeymap, byte *row, byte *col, byte numRows, byte numCols) {
    keypad->rowPins = row;
    keypad->columnPins = col;
    keypad->sizeKpd.rows = numRows;
    keypad->sizeKpd.columns = numCols;

    Keypad_begin(keypad, userKeymap);

    Keypad_setDebounceTime(keypad, 10);
    Keypad_setHoldTime(keypad, 500);
    keypad->keypadEventListener = 0;

    keypad->startTime = 0;
    keypad->single_key = false;
}

// Let the user define a keymap - assume the same row/column count as defined in constructor
void Keypad_begin(Keypad* keypad, char *userKeymap) {
    keypad->keymap = userKeymap;
}

// Returns a single key only. Retained for backwards compatibility.
char Keypad_getKey(Keypad* keypad) {
    keypad->single_key = true;

    if (Keypad_getKeys(keypad) && keypad->key[0].stateChanged && (keypad->key[0].kstate==PRESSED))
        return keypad->key[0].kchar;

    keypad->single_key = false;

    return NO_KEY;
}

// Populate the key list.
bool Keypad_getKeys(Keypad* keypad) {
    bool keyActivity = false;

    // Limit how often the keypad is scanned. This makes the loop() run 10 times as fast.
    if ((millis() - keypad->startTime) > keypad->debounceTime) {
        Keypad_scanKeys(keypad);
        keyActivity = Keypad_updateList(keypad);
        keypad->startTime = millis();
    }

    return keyActivity;
}

// Private : Hardware scan
void Keypad_scanKeys(Keypad* keypad) {
    // Re-initialize the row pins. Allows sharing these pins with other hardware.
    for (byte r = 0; r < keypad->sizeKpd.rows; r++) {
        pinMode(keypad->rowPins[r], INPUT_PULLUP);
    }

    // bitMap stores ALL the keys that are being pressed.
    for (byte c = 0; c < keypad->sizeKpd.columns; c++) {
        pinMode(keypad->columnPins[c], OUTPUT);
        digitalWrite(keypad->columnPins[c], LOW); // Begin column pulse output.
        for (byte r = 0; r < keypad->sizeKpd.rows; r++) {
            bitWrite(keypad->bitMap[r], c, !digitalRead(keypad->rowPins[r]));  // keypress is active low so invert to high.
        }
        // Set pin to high impedance input. Effectively ends column pulse.
        digitalWrite(keypad->columnPins[c], HIGH);
        pinMode(keypad->columnPins[c], INPUT);
    }
}

// Manage the list without rearranging the keys. Returns true if any keys on the list changed state.
bool Keypad_updateList(Keypad* keypad) {
    bool anyActivity = false;

    // Delete any IDLE keys
    for (byte i = 0; i < LIST_MAX; i++) {
        if (keypad->key[i].kstate == IDLE) {
            keypad->key[i].kchar = NO_KEY;
            keypad->key[i].kcode = -1;
            keypad->key[i].stateChanged = false;
        }
    }

    // Add new keys to empty slots in the key list.
    for (byte r = 0; r < keypad->sizeKpd.rows; r++) {
        for (byte c = 0; c < keypad->sizeKpd.columns; c++) {
            bool button = bitRead(keypad->bitMap[r], c);
            char keyChar = keypad->keymap[r * keypad->sizeKpd.columns + c];
            int keyCode = r * keypad->sizeKpd.columns + c;
            int idx = Keypad_findInList(keypad, keyCode);
            // Key is already on the list so set its next state.
            if (idx > -1)    {
                Keypad_nextKeyState(keypad, idx, button);
            }
            // Key is NOT on the list so add it.
            if ((idx == -1) && button) {
                for (byte i = 0; i < LIST_MAX; i++) {
                    if (keypad->key[i].kchar == NO_KEY) {     // Find an empty slot or don't add key to list.
                        keypad->key[i].kchar = keyChar;
                        keypad->key[i].kcode = keyCode;
                        keypad->key[i].kstate = IDLE;      // Keys NOT on the list have an initial state of IDLE.
                        Keypad_nextKeyState(keypad, i, button);
                        break;    // Don't fill all the empty slots with the same key.
                    }
                }
            }
        }
    }

    // Report if the user changed the state of any key.
    for (byte i = 0; i < LIST_MAX; i++) {
        if (keypad->key[i].stateChanged) anyActivity = true;
    }

    return anyActivity;
}

// Private
// This function is a state machine but is also used for debouncing the keys.
void Keypad_nextKeyState(Keypad* keypad, byte idx, bool button) {
    keypad->key[idx].stateChanged = false;

    switch (keypad->key[idx].kstate) {
        case IDLE:
            if (button == CLOSED) {
                Keypad_transitionTo(keypad, idx, PRESSED);
                keypad->holdTimer = millis(); }    // Get ready for next HOLD state.
            break;
        case PRESSED:
            if ((millis() - keypad->holdTimer) > keypad->holdTime)    // Waiting for a key HOLD...
                Keypad_transitionTo(keypad, idx, HOLD);
            else if (button == OPEN)                // or for a key to be RELEASED.
                Keypad_transitionTo(keypad, idx, RELEASED);
            break;
        case HOLD:
            if (button == OPEN)
                Keypad_transitionTo(keypad, idx, RELEASED);
            break;
        case RELEASED:
            Keypad_transitionTo(keypad, idx, IDLE);
            break;
    }
}

// New in 2.1
bool Keypad_isPressed(Keypad* keypad, char keyChar) {
    for (byte i = 0; i < LIST_MAX; i++) {
        if (keypad->key[i].kchar == keyChar) {
            if ((keypad->key[i].kstate == PRESSED) && keypad->key[i].stateChanged)
                return true;
        }
    }
    return false;    // Not pressed.
}

// Search by character for a key in the list of active keys.
// Returns -1 if not found or the index into the list of active keys.
int Keypad_findInList(Keypad* keypad, char keyChar) {
    for (byte i = 0; i < LIST_MAX; i++) {
        if (keypad->key[i].kchar == keyChar) {
            return i;
        }
    }
    return -1;
}

// Search by code for a key in the list of active keys.
// Returns -1 if not found or the index into the list of active keys.
int Keypad_findInListByCode(Keypad* keypad, int keyCode) {
    for (byte i = 0; i < LIST_MAX; i++) {
        if (keypad->key[i].kcode == keyCode) {
            return i;
        }
    }
    return -1;
}

// New in 2.0
char Keypad_waitForKey(Keypad* keypad) {
    char waitKey = NO_KEY;
    while ((waitKey = Keypad_getKey(keypad)) == NO_KEY);    // Block everything while waiting for a keypress.
    return waitKey;
}

// Backwards compatibility function.
KeyState Keypad_getState(Keypad* keypad) {
    return keypad->key[0].kstate;
}

// The end user can test for any changes in state before deciding
// if any variables, etc. needs to be updated in their code.
bool Keypad_keyStateChanged(Keypad* keypad) {
    return keypad->key[0].stateChanged;
}

// The number of keys on the key list, key[LIST_MAX], equals the number
// of bytes in the key list divided by the number of bytes in a Key object.
byte Keypad_numKeys(Keypad* keypad) {
    return sizeof(keypad->key) / sizeof(Key);
}

// Minimum debounceTime is 1 mS. Any lower *will* slow down the loop().
void Keypad_setDebounceTime(Keypad* keypad, uint debounce) {
    keypad->debounceTime = debounce < 1 ? 1 : debounce;
}

void Keypad_setHoldTime(Keypad* keypad, uint hold) {
    keypad->holdTime = hold;
}

void Keypad_addEventListener(Keypad* keypad, void (*listener)(char)) {
    keypad->keypadEventListener = listener;
}

void Keypad_transitionTo(Keypad* keypad, byte idx, KeyState nextState) {
    keypad->key[idx].kstate = nextState;
    keypad->key[idx].stateChanged = true;

    // Sketch used the getKey() function.
    // Calls keypadEventListener only when the first key in slot 0 changes state.
    if (keypad->single_key)  {
        if ((keypad->keypadEventListener != NULL) && (idx == 0))  {
            keypad->keypadEventListener(keypad->key[0].kchar);
        }
    }
    // Sketch used the getKeys() function.
    // Calls keypadEventListener on any key that changes state.
    else {
        if (keypad->keypadEventListener != NULL)  {
            keypad->keypadEventListener(keypad->key[idx].kchar);
        }
    }
}
