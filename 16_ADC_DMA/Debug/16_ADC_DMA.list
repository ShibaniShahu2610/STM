
16_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003374  08003374  00013374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033e0  080033e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080033e0  080033e0  000133e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033e8  080033e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033e8  080033e8  000133e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033ec  080033ec  000133ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  080033fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  080033fc  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009af0  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019da  00000000  00000000  00029b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000848  00000000  00000000  0002b548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000667  00000000  00000000  0002bd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013e3a  00000000  00000000  0002c3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000af15  00000000  00000000  00040231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b388  00000000  00000000  0004b146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ce0  00000000  00000000  000c64d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000c81b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800335c 	.word	0x0800335c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800335c 	.word	0x0800335c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	//UNUSED(hadc);
	adc_value = buffer;
 80004b0:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <HAL_ADC_ConvCpltCallback+0x18>)
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80004b6:	601a      	str	r2, [r3, #0]
	/* NOTE : This function should not be modified. When the callback is needed,
	 function HAL_ADC_ConvCpltCallback must be implemented in the user file.
	 */
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000154 	.word	0x20000154
 80004c4:	20000158 	.word	0x20000158

080004c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004cc:	f000 fa72 	bl	80009b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004d0:	f000 f814 	bl	80004fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004d4:	f000 f93a 	bl	800074c <MX_GPIO_Init>
	MX_DMA_Init();
 80004d8:	f000 f91a 	bl	8000710 <MX_DMA_Init>
	MX_USART1_UART_Init();
 80004dc:	f000 f8e8 	bl	80006b0 <MX_USART1_UART_Init>
	MX_ADC_Init();
 80004e0:	f000 f880 	bl	80005e4 <MX_ADC_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc, &buffer, 1);
 80004e4:	4903      	ldr	r1, [pc, #12]	; (80004f4 <main+0x2c>)
 80004e6:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <main+0x30>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 fc46 	bl	8000d7c <HAL_ADC_Start_DMA>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80004f0:	e7fe      	b.n	80004f0 <main+0x28>
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	20000154 	.word	0x20000154
 80004f8:	20000028 	.word	0x20000028

080004fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b09d      	sub	sp, #116	; 0x74
 8000500:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000502:	2438      	movs	r4, #56	; 0x38
 8000504:	193b      	adds	r3, r7, r4
 8000506:	0018      	movs	r0, r3
 8000508:	2338      	movs	r3, #56	; 0x38
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f002 fef9 	bl	8003304 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000512:	2324      	movs	r3, #36	; 0x24
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	0018      	movs	r0, r3
 8000518:	2314      	movs	r3, #20
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f002 fef1 	bl	8003304 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000522:	003b      	movs	r3, r7
 8000524:	0018      	movs	r0, r3
 8000526:	2324      	movs	r3, #36	; 0x24
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f002 feea 	bl	8003304 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <SystemClock_Config+0xe0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a2a      	ldr	r2, [pc, #168]	; (80005e0 <SystemClock_Config+0xe4>)
 8000536:	401a      	ands	r2, r3
 8000538:	4b28      	ldr	r3, [pc, #160]	; (80005dc <SystemClock_Config+0xe0>)
 800053a:	2180      	movs	r1, #128	; 0x80
 800053c:	0109      	lsls	r1, r1, #4
 800053e:	430a      	orrs	r2, r1
 8000540:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000542:	0021      	movs	r1, r4
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2202      	movs	r2, #2
 8000548:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2201      	movs	r2, #1
 800054e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2210      	movs	r2, #16
 8000554:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2202      	movs	r2, #2
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2280      	movs	r2, #128	; 0x80
 800056c:	0412      	lsls	r2, r2, #16
 800056e:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000570:	187b      	adds	r3, r7, r1
 8000572:	0018      	movs	r0, r3
 8000574:	f001 fa4e 	bl	8001a14 <HAL_RCC_OscConfig>
 8000578:	1e03      	subs	r3, r0, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x84>
		Error_Handler();
 800057c:	f000 f8fc 	bl	8000778 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000580:	2124      	movs	r1, #36	; 0x24
 8000582:	187b      	adds	r3, r7, r1
 8000584:	220f      	movs	r2, #15
 8000586:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2203      	movs	r2, #3
 800058c:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	00d2      	lsls	r2, r2, #3
 800059a:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	00d2      	lsls	r2, r2, #3
 80005a2:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2100      	movs	r1, #0
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fdf7 	bl	800219c <HAL_RCC_ClockConfig>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xba>
		Error_Handler();
 80005b2:	f000 f8e1 	bl	8000778 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005b6:	003b      	movs	r3, r7
 80005b8:	2201      	movs	r2, #1
 80005ba:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005bc:	003b      	movs	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005c2:	003b      	movs	r3, r7
 80005c4:	0018      	movs	r0, r3
 80005c6:	f002 f80d 	bl	80025e4 <HAL_RCCEx_PeriphCLKConfig>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xd6>
		Error_Handler();
 80005ce:	f000 f8d3 	bl	8000778 <Error_Handler>
	}
}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b01d      	add	sp, #116	; 0x74
 80005d8:	bd90      	pop	{r4, r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	40007000 	.word	0x40007000
 80005e0:	ffffe7ff 	.word	0xffffe7ff

080005e4 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80005ea:	003b      	movs	r3, r7
 80005ec:	0018      	movs	r0, r3
 80005ee:	2308      	movs	r3, #8
 80005f0:	001a      	movs	r2, r3
 80005f2:	2100      	movs	r1, #0
 80005f4:	f002 fe86 	bl	8003304 <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 80005f8:	4b2a      	ldr	r3, [pc, #168]	; (80006a4 <MX_ADC_Init+0xc0>)
 80005fa:	4a2b      	ldr	r2, [pc, #172]	; (80006a8 <MX_ADC_Init+0xc4>)
 80005fc:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = DISABLE;
 80005fe:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <MX_ADC_Init+0xc0>)
 8000600:	2200      	movs	r2, #0
 8000602:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000604:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <MX_ADC_Init+0xc0>)
 8000606:	2280      	movs	r2, #128	; 0x80
 8000608:	05d2      	lsls	r2, r2, #23
 800060a:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <MX_ADC_Init+0xc0>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000612:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <MX_ADC_Init+0xc0>)
 8000614:	2200      	movs	r2, #0
 8000616:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <MX_ADC_Init+0xc0>)
 800061a:	2201      	movs	r2, #1
 800061c:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061e:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <MX_ADC_Init+0xc0>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = DISABLE;
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <MX_ADC_Init+0xc0>)
 8000626:	2220      	movs	r2, #32
 8000628:	2100      	movs	r1, #0
 800062a:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800062c:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_ADC_Init+0xc0>)
 800062e:	2221      	movs	r2, #33	; 0x21
 8000630:	2100      	movs	r1, #0
 8000632:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_ADC_Init+0xc0>)
 8000636:	2200      	movs	r2, #0
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_ADC_Init+0xc0>)
 800063c:	22c2      	movs	r2, #194	; 0xc2
 800063e:	32ff      	adds	r2, #255	; 0xff
 8000640:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_ADC_Init+0xc0>)
 8000644:	222c      	movs	r2, #44	; 0x2c
 8000646:	2100      	movs	r1, #0
 8000648:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064a:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_ADC_Init+0xc0>)
 800064c:	2204      	movs	r2, #4
 800064e:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_ADC_Init+0xc0>)
 8000652:	2200      	movs	r2, #0
 8000654:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_ADC_Init+0xc0>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_ADC_Init+0xc0>)
 800065e:	2200      	movs	r2, #0
 8000660:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_ADC_Init+0xc0>)
 8000664:	2200      	movs	r2, #0
 8000666:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_ADC_Init+0xc0>)
 800066a:	0018      	movs	r0, r3
 800066c:	f000 fa12 	bl	8000a94 <HAL_ADC_Init>
 8000670:	1e03      	subs	r3, r0, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC_Init+0x94>
		Error_Handler();
 8000674:	f000 f880 	bl	8000778 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000678:	003b      	movs	r3, r7
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <MX_ADC_Init+0xc8>)
 800067c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800067e:	003b      	movs	r3, r7
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	0152      	lsls	r2, r2, #5
 8000684:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000686:	003a      	movs	r2, r7
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_ADC_Init+0xc0>)
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fc07 	bl	8000ea0 <HAL_ADC_ConfigChannel>
 8000692:	1e03      	subs	r3, r0, #0
 8000694:	d001      	beq.n	800069a <MX_ADC_Init+0xb6>
		Error_Handler();
 8000696:	f000 f86f 	bl	8000778 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b002      	add	sp, #8
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	20000028 	.word	0x20000028
 80006a8:	40012400 	.word	0x40012400
 80006ac:	0c000008 	.word	0x0c000008

080006b0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006b6:	4a15      	ldr	r2, [pc, #84]	; (800070c <MX_USART1_UART_Init+0x5c>)
 80006b8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006bc:	22e1      	movs	r2, #225	; 0xe1
 80006be:	0252      	lsls	r2, r2, #9
 80006c0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006f4:	0018      	movs	r0, r3
 80006f6:	f002 f903 	bl	8002900 <HAL_UART_Init>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80006fe:	f000 f83b 	bl	8000778 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000cc 	.word	0x200000cc
 800070c:	40013800 	.word	0x40013800

08000710 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_DMA_Init+0x38>)
 8000718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_DMA_Init+0x38>)
 800071c:	2101      	movs	r1, #1
 800071e:	430a      	orrs	r2, r1
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_DMA_Init+0x38>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	2201      	movs	r2, #1
 8000728:	4013      	ands	r3, r2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	2009      	movs	r0, #9
 8000734:	f000 fe0c 	bl	8001350 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000738:	2009      	movs	r0, #9
 800073a:	f000 fe1e 	bl	800137a <HAL_NVIC_EnableIRQ>

}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b002      	add	sp, #8
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	40021000 	.word	0x40021000

0800074c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_GPIO_Init+0x28>)
 8000754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000756:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_GPIO_Init+0x28>)
 8000758:	2101      	movs	r1, #1
 800075a:	430a      	orrs	r2, r1
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <MX_GPIO_Init+0x28>)
 8000760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000762:	2201      	movs	r2, #1
 8000764:	4013      	ands	r3, r2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b002      	add	sp, #8
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	40021000 	.word	0x40021000

08000778 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000780:	e7fe      	b.n	8000780 <Error_Handler+0x8>
	...

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <HAL_MspInit+0x24>)
 800078a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_MspInit+0x24>)
 800078e:	2101      	movs	r1, #1
 8000790:	430a      	orrs	r2, r1
 8000792:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <HAL_MspInit+0x24>)
 8000796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <HAL_MspInit+0x24>)
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	0549      	lsls	r1, r1, #21
 800079e:	430a      	orrs	r2, r1
 80007a0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	240c      	movs	r4, #12
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	0018      	movs	r0, r3
 80007ba:	2314      	movs	r3, #20
 80007bc:	001a      	movs	r2, r3
 80007be:	2100      	movs	r1, #0
 80007c0:	f002 fda0 	bl	8003304 <memset>
  if(hadc->Instance==ADC1)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a2a      	ldr	r2, [pc, #168]	; (8000874 <HAL_ADC_MspInit+0xc8>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d14d      	bne.n	800086a <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007ce:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <HAL_ADC_MspInit+0xcc>)
 80007d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007d2:	4b29      	ldr	r3, [pc, #164]	; (8000878 <HAL_ADC_MspInit+0xcc>)
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	0089      	lsls	r1, r1, #2
 80007d8:	430a      	orrs	r2, r1
 80007da:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b26      	ldr	r3, [pc, #152]	; (8000878 <HAL_ADC_MspInit+0xcc>)
 80007de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <HAL_ADC_MspInit+0xcc>)
 80007e2:	2101      	movs	r1, #1
 80007e4:	430a      	orrs	r2, r1
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <HAL_ADC_MspInit+0xcc>)
 80007ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ec:	2201      	movs	r2, #1
 80007ee:	4013      	ands	r3, r2
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = BSP_ADC_IN3_Pin;
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	2208      	movs	r2, #8
 80007f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2203      	movs	r2, #3
 80007fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BSP_ADC_IN3_GPIO_Port, &GPIO_InitStruct);
 8000806:	193a      	adds	r2, r7, r4
 8000808:	23a0      	movs	r3, #160	; 0xa0
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	0011      	movs	r1, r2
 800080e:	0018      	movs	r0, r3
 8000810:	f000 ff8a 	bl	8001728 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <HAL_ADC_MspInit+0xd0>)
 8000816:	4a1a      	ldr	r2, [pc, #104]	; (8000880 <HAL_ADC_MspInit+0xd4>)
 8000818:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <HAL_ADC_MspInit+0xd0>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <HAL_ADC_MspInit+0xd0>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_ADC_MspInit+0xd0>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <HAL_ADC_MspInit+0xd0>)
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_ADC_MspInit+0xd0>)
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	0092      	lsls	r2, r2, #2
 8000838:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <HAL_ADC_MspInit+0xd0>)
 800083c:	2280      	movs	r2, #128	; 0x80
 800083e:	0112      	lsls	r2, r2, #4
 8000840:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <HAL_ADC_MspInit+0xd0>)
 8000844:	2220      	movs	r2, #32
 8000846:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_ADC_MspInit+0xd0>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <HAL_ADC_MspInit+0xd0>)
 8000850:	0018      	movs	r0, r3
 8000852:	f000 fdaf 	bl	80013b4 <HAL_DMA_Init>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800085a:	f7ff ff8d 	bl	8000778 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a06      	ldr	r2, [pc, #24]	; (800087c <HAL_ADC_MspInit+0xd0>)
 8000862:	64da      	str	r2, [r3, #76]	; 0x4c
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <HAL_ADC_MspInit+0xd0>)
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b009      	add	sp, #36	; 0x24
 8000870:	bd90      	pop	{r4, r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	40012400 	.word	0x40012400
 8000878:	40021000 	.word	0x40021000
 800087c:	20000084 	.word	0x20000084
 8000880:	40020008 	.word	0x40020008

08000884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b089      	sub	sp, #36	; 0x24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	240c      	movs	r4, #12
 800088e:	193b      	adds	r3, r7, r4
 8000890:	0018      	movs	r0, r3
 8000892:	2314      	movs	r3, #20
 8000894:	001a      	movs	r2, r3
 8000896:	2100      	movs	r1, #0
 8000898:	f002 fd34 	bl	8003304 <memset>
  if(huart->Instance==USART1)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a18      	ldr	r2, [pc, #96]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d12a      	bne.n	80008fc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <HAL_UART_MspInit+0x84>)
 80008a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <HAL_UART_MspInit+0x84>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	01c9      	lsls	r1, r1, #7
 80008b0:	430a      	orrs	r2, r1
 80008b2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <HAL_UART_MspInit+0x84>)
 80008b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <HAL_UART_MspInit+0x84>)
 80008ba:	2101      	movs	r1, #1
 80008bc:	430a      	orrs	r2, r1
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <HAL_UART_MspInit+0x84>)
 80008c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c4:	2201      	movs	r2, #1
 80008c6:	4013      	ands	r3, r2
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_USART1_TX_Pin|BSP_USART1_RX_Pin;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	22c0      	movs	r2, #192	; 0xc0
 80008d0:	00d2      	lsls	r2, r2, #3
 80008d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	0021      	movs	r1, r4
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2202      	movs	r2, #2
 80008da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2203      	movs	r2, #3
 80008e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2204      	movs	r2, #4
 80008ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	187a      	adds	r2, r7, r1
 80008f0:	23a0      	movs	r3, #160	; 0xa0
 80008f2:	05db      	lsls	r3, r3, #23
 80008f4:	0011      	movs	r1, r2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f000 ff16 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	b009      	add	sp, #36	; 0x24
 8000902:	bd90      	pop	{r4, r7, pc}
 8000904:	40013800 	.word	0x40013800
 8000908:	40021000 	.word	0x40021000

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000910:	e7fe      	b.n	8000910 <NMI_Handler+0x4>

08000912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler+0x4>

08000918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 f894 	bl	8000a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <DMA1_Channel1_IRQHandler+0x14>)
 8000942:	0018      	movs	r0, r3
 8000944:	f000 fe14 	bl	8001570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	20000084 	.word	0x20000084

08000954 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000962:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000964:	f7ff fff6 	bl	8000954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <LoopForever+0x6>)
  ldr r1, =_edata
 800096a:	490d      	ldr	r1, [pc, #52]	; (80009a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <LoopForever+0xe>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000980:	4c0a      	ldr	r4, [pc, #40]	; (80009ac <LoopForever+0x16>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800098e:	f002 fcc1 	bl	8003314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000992:	f7ff fd99 	bl	80004c8 <main>

08000996 <LoopForever>:

LoopForever:
    b LoopForever
 8000996:	e7fe      	b.n	8000996 <LoopForever>
  ldr   r0, =_estack
 8000998:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009a4:	080033f0 	.word	0x080033f0
  ldr r2, =_sbss
 80009a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009ac:	20000160 	.word	0x20000160

080009b0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC1_COMP_IRQHandler>
	...

080009b4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <HAL_Init+0x3c>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_Init+0x3c>)
 80009c6:	2140      	movs	r1, #64	; 0x40
 80009c8:	430a      	orrs	r2, r1
 80009ca:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009cc:	2000      	movs	r0, #0
 80009ce:	f000 f811 	bl	80009f4 <HAL_InitTick>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d003      	beq.n	80009de <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
 80009dc:	e001      	b.n	80009e2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009de:	f7ff fed1 	bl	8000784 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
}
 80009e6:	0018      	movs	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b002      	add	sp, #8
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	40022000 	.word	0x40022000

080009f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_InitTick+0x5c>)
 80009fe:	681c      	ldr	r4, [r3, #0]
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_InitTick+0x60>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	0019      	movs	r1, r3
 8000a06:	23fa      	movs	r3, #250	; 0xfa
 8000a08:	0098      	lsls	r0, r3, #2
 8000a0a:	f7ff fb7d 	bl	8000108 <__udivsi3>
 8000a0e:	0003      	movs	r3, r0
 8000a10:	0019      	movs	r1, r3
 8000a12:	0020      	movs	r0, r4
 8000a14:	f7ff fb78 	bl	8000108 <__udivsi3>
 8000a18:	0003      	movs	r3, r0
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 fcbd 	bl	800139a <HAL_SYSTICK_Config>
 8000a20:	1e03      	subs	r3, r0, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e00f      	b.n	8000a48 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d80b      	bhi.n	8000a46 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	2301      	movs	r3, #1
 8000a32:	425b      	negs	r3, r3
 8000a34:	2200      	movs	r2, #0
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 fc8a 	bl	8001350 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_InitTick+0x64>)
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	0018      	movs	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b003      	add	sp, #12
 8000a4e:	bd90      	pop	{r4, r7, pc}
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000004 	.word	0x20000004

08000a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_IncTick+0x1c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	001a      	movs	r2, r3
 8000a66:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x20>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	18d2      	adds	r2, r2, r3
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <HAL_IncTick+0x20>)
 8000a6e:	601a      	str	r2, [r3, #0]
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	2000015c 	.word	0x2000015c

08000a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b02      	ldr	r3, [pc, #8]	; (8000a90 <HAL_GetTick+0x10>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	0018      	movs	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	2000015c 	.word	0x2000015c

08000a94 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d101      	bne.n	8000aa6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e159      	b.n	8000d5a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d10a      	bne.n	8000ac4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2250      	movs	r2, #80	; 0x50
 8000ab8:	2100      	movs	r1, #0
 8000aba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f7ff fe74 	bl	80007ac <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ac8:	2210      	movs	r2, #16
 8000aca:	4013      	ands	r3, r2
 8000acc:	2b10      	cmp	r3, #16
 8000ace:	d005      	beq.n	8000adc <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000ada:	d00b      	beq.n	8000af4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ae0:	2210      	movs	r2, #16
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2250      	movs	r2, #80	; 0x50
 8000aec:	2100      	movs	r1, #0
 8000aee:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	e132      	b.n	8000d5a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000af8:	4a9a      	ldr	r2, [pc, #616]	; (8000d64 <HAL_ADC_Init+0x2d0>)
 8000afa:	4013      	ands	r3, r2
 8000afc:	2202      	movs	r2, #2
 8000afe:	431a      	orrs	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d108      	bne.n	8000b24 <HAL_ADC_Init+0x90>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d101      	bne.n	8000b24 <HAL_ADC_Init+0x90>
 8000b20:	2301      	movs	r3, #1
 8000b22:	e000      	b.n	8000b26 <HAL_ADC_Init+0x92>
 8000b24:	2300      	movs	r3, #0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d149      	bne.n	8000bbe <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	685a      	ldr	r2, [r3, #4]
 8000b2e:	23c0      	movs	r3, #192	; 0xc0
 8000b30:	061b      	lsls	r3, r3, #24
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d00b      	beq.n	8000b4e <HAL_ADC_Init+0xba>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	05db      	lsls	r3, r3, #23
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d005      	beq.n	8000b4e <HAL_ADC_Init+0xba>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	685a      	ldr	r2, [r3, #4]
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	061b      	lsls	r3, r3, #24
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d111      	bne.n	8000b72 <HAL_ADC_Init+0xde>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	691a      	ldr	r2, [r3, #16]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	0092      	lsls	r2, r2, #2
 8000b5a:	0892      	lsrs	r2, r2, #2
 8000b5c:	611a      	str	r2, [r3, #16]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	6919      	ldr	r1, [r3, #16]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685a      	ldr	r2, [r3, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	611a      	str	r2, [r3, #16]
 8000b70:	e014      	b.n	8000b9c <HAL_ADC_Init+0x108>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	691a      	ldr	r2, [r3, #16]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	0092      	lsls	r2, r2, #2
 8000b7e:	0892      	lsrs	r2, r2, #2
 8000b80:	611a      	str	r2, [r3, #16]
 8000b82:	4b79      	ldr	r3, [pc, #484]	; (8000d68 <HAL_ADC_Init+0x2d4>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	4b78      	ldr	r3, [pc, #480]	; (8000d68 <HAL_ADC_Init+0x2d4>)
 8000b88:	4978      	ldr	r1, [pc, #480]	; (8000d6c <HAL_ADC_Init+0x2d8>)
 8000b8a:	400a      	ands	r2, r1
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	4b76      	ldr	r3, [pc, #472]	; (8000d68 <HAL_ADC_Init+0x2d4>)
 8000b90:	6819      	ldr	r1, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	4b74      	ldr	r3, [pc, #464]	; (8000d68 <HAL_ADC_Init+0x2d4>)
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	68da      	ldr	r2, [r3, #12]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2118      	movs	r1, #24
 8000ba8:	438a      	bics	r2, r1
 8000baa:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	68d9      	ldr	r1, [r3, #12]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000bbe:	4b6a      	ldr	r3, [pc, #424]	; (8000d68 <HAL_ADC_Init+0x2d4>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	4b69      	ldr	r3, [pc, #420]	; (8000d68 <HAL_ADC_Init+0x2d4>)
 8000bc4:	496a      	ldr	r1, [pc, #424]	; (8000d70 <HAL_ADC_Init+0x2dc>)
 8000bc6:	400a      	ands	r2, r1
 8000bc8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000bca:	4b67      	ldr	r3, [pc, #412]	; (8000d68 <HAL_ADC_Init+0x2d4>)
 8000bcc:	6819      	ldr	r1, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd2:	065a      	lsls	r2, r3, #25
 8000bd4:	4b64      	ldr	r3, [pc, #400]	; (8000d68 <HAL_ADC_Init+0x2d4>)
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	055b      	lsls	r3, r3, #21
 8000be4:	4013      	ands	r3, r2
 8000be6:	d108      	bne.n	8000bfa <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2180      	movs	r1, #128	; 0x80
 8000bf4:	0549      	lsls	r1, r1, #21
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	68da      	ldr	r2, [r3, #12]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	495b      	ldr	r1, [pc, #364]	; (8000d74 <HAL_ADC_Init+0x2e0>)
 8000c06:	400a      	ands	r2, r1
 8000c08:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68d9      	ldr	r1, [r3, #12]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	691b      	ldr	r3, [r3, #16]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d101      	bne.n	8000c20 <HAL_ADC_Init+0x18c>
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	e000      	b.n	8000c22 <HAL_ADC_Init+0x18e>
 8000c20:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000c22:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2020      	movs	r0, #32
 8000c28:	5c1b      	ldrb	r3, [r3, r0]
 8000c2a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000c2c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	202c      	movs	r0, #44	; 0x2c
 8000c32:	5c1b      	ldrb	r3, [r3, r0]
 8000c34:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c36:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000c3c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000c44:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000c4c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	430a      	orrs	r2, r1
 8000c54:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c5a:	23c2      	movs	r3, #194	; 0xc2
 8000c5c:	33ff      	adds	r3, #255	; 0xff
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d00b      	beq.n	8000c7a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	68d9      	ldr	r1, [r3, #12]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000c70:	431a      	orrs	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	430a      	orrs	r2, r1
 8000c78:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2221      	movs	r2, #33	; 0x21
 8000c7e:	5c9b      	ldrb	r3, [r3, r2]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d11a      	bne.n	8000cba <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2220      	movs	r2, #32
 8000c88:	5c9b      	ldrb	r3, [r3, r2]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d109      	bne.n	8000ca2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2180      	movs	r1, #128	; 0x80
 8000c9a:	0249      	lsls	r1, r1, #9
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	e00b      	b.n	8000cba <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca6:	2220      	movs	r2, #32
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d11f      	bne.n	8000d02 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	691a      	ldr	r2, [r3, #16]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	492a      	ldr	r1, [pc, #168]	; (8000d78 <HAL_ADC_Init+0x2e4>)
 8000cce:	400a      	ands	r2, r1
 8000cd0:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	6919      	ldr	r1, [r3, #16]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000ce0:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8000ce6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	430a      	orrs	r2, r1
 8000cee:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	691a      	ldr	r2, [r3, #16]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	611a      	str	r2, [r3, #16]
 8000d00:	e00e      	b.n	8000d20 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	691b      	ldr	r3, [r3, #16]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d107      	bne.n	8000d20 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	691a      	ldr	r2, [r3, #16]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	438a      	bics	r2, r1
 8000d1e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	695a      	ldr	r2, [r3, #20]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2107      	movs	r1, #7
 8000d2c:	438a      	bics	r2, r1
 8000d2e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6959      	ldr	r1, [r3, #20]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	4393      	bics	r3, r2
 8000d50:	2201      	movs	r2, #1
 8000d52:	431a      	orrs	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	fffffefd 	.word	0xfffffefd
 8000d68:	40012708 	.word	0x40012708
 8000d6c:	ffc3ffff 	.word	0xffc3ffff
 8000d70:	fdffffff 	.word	0xfdffffff
 8000d74:	fffe0219 	.word	0xfffe0219
 8000d78:	fffffc03 	.word	0xfffffc03

08000d7c <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d88:	2317      	movs	r3, #23
 8000d8a:	18fb      	adds	r3, r7, r3
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	2204      	movs	r2, #4
 8000d98:	4013      	ands	r3, r2
 8000d9a:	d15e      	bne.n	8000e5a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2250      	movs	r2, #80	; 0x50
 8000da0:	5c9b      	ldrb	r3, [r3, r2]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d101      	bne.n	8000daa <HAL_ADC_Start_DMA+0x2e>
 8000da6:	2302      	movs	r3, #2
 8000da8:	e05e      	b.n	8000e68 <HAL_ADC_Start_DMA+0xec>
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2250      	movs	r2, #80	; 0x50
 8000dae:	2101      	movs	r1, #1
 8000db0:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d007      	beq.n	8000dda <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000dca:	2317      	movs	r3, #23
 8000dcc:	18fc      	adds	r4, r7, r3
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f000 f905 	bl	8000fe0 <ADC_Enable>
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000dda:	2317      	movs	r3, #23
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d13e      	bne.n	8000e62 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000de8:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <HAL_ADC_Start_DMA+0xf4>)
 8000dea:	4013      	ands	r3, r2
 8000dec:	2280      	movs	r2, #128	; 0x80
 8000dee:	0052      	lsls	r2, r2, #1
 8000df0:	431a      	orrs	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2250      	movs	r2, #80	; 0x50
 8000e00:	2100      	movs	r1, #0
 8000e02:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e08:	4a1a      	ldr	r2, [pc, #104]	; (8000e74 <HAL_ADC_Start_DMA+0xf8>)
 8000e0a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e10:	4a19      	ldr	r2, [pc, #100]	; (8000e78 <HAL_ADC_Start_DMA+0xfc>)
 8000e12:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e18:	4a18      	ldr	r2, [pc, #96]	; (8000e7c <HAL_ADC_Start_DMA+0x100>)
 8000e1a:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	221c      	movs	r2, #28
 8000e22:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2110      	movs	r1, #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	3340      	adds	r3, #64	; 0x40
 8000e3e:	0019      	movs	r1, r3
 8000e40:	68ba      	ldr	r2, [r7, #8]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f000 fb2e 	bl	80014a4 <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2104      	movs	r1, #4
 8000e54:	430a      	orrs	r2, r1
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	e003      	b.n	8000e62 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e5a:	2317      	movs	r3, #23
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	2202      	movs	r2, #2
 8000e60:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e62:	2317      	movs	r3, #23
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	781b      	ldrb	r3, [r3, #0]
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b007      	add	sp, #28
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	fffff0fe 	.word	0xfffff0fe
 8000e74:	080010b1 	.word	0x080010b1
 8000e78:	08001165 	.word	0x08001165
 8000e7c:	08001183 	.word	0x08001183

08000e80 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b002      	add	sp, #8
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b002      	add	sp, #8
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2250      	movs	r2, #80	; 0x50
 8000eae:	5c9b      	ldrb	r3, [r3, r2]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d101      	bne.n	8000eb8 <HAL_ADC_ConfigChannel+0x18>
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	e085      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0x124>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2250      	movs	r2, #80	; 0x50
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d00b      	beq.n	8000ee4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed0:	2220      	movs	r2, #32
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2250      	movs	r2, #80	; 0x50
 8000edc:	2100      	movs	r1, #0
 8000ede:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e06f      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	4a38      	ldr	r2, [pc, #224]	; (8000fcc <HAL_ADC_ConfigChannel+0x12c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d035      	beq.n	8000f5a <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	035b      	lsls	r3, r3, #13
 8000efa:	0b5a      	lsrs	r2, r3, #13
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	430a      	orrs	r2, r1
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	02db      	lsls	r3, r3, #11
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d009      	beq.n	8000f24 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8000f10:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <HAL_ADC_ConfigChannel+0x130>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b2e      	ldr	r3, [pc, #184]	; (8000fd0 <HAL_ADC_ConfigChannel+0x130>)
 8000f16:	2180      	movs	r1, #128	; 0x80
 8000f18:	0409      	lsls	r1, r1, #16
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000f1e:	200a      	movs	r0, #10
 8000f20:	f000 f94a 	bl	80011b8 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	029b      	lsls	r3, r3, #10
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d006      	beq.n	8000f3e <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8000f30:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <HAL_ADC_ConfigChannel+0x130>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <HAL_ADC_ConfigChannel+0x130>)
 8000f36:	2180      	movs	r1, #128	; 0x80
 8000f38:	03c9      	lsls	r1, r1, #15
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	025b      	lsls	r3, r3, #9
 8000f46:	4013      	ands	r3, r2
 8000f48:	d037      	beq.n	8000fba <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8000f4a:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <HAL_ADC_ConfigChannel+0x130>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <HAL_ADC_ConfigChannel+0x130>)
 8000f50:	2180      	movs	r1, #128	; 0x80
 8000f52:	0449      	lsls	r1, r1, #17
 8000f54:	430a      	orrs	r2, r1
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	e02f      	b.n	8000fba <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	035b      	lsls	r3, r3, #13
 8000f66:	0b5b      	lsrs	r3, r3, #13
 8000f68:	43d9      	mvns	r1, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	400a      	ands	r2, r1
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	02db      	lsls	r3, r3, #11
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d005      	beq.n	8000f8a <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <HAL_ADC_ConfigChannel+0x130>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <HAL_ADC_ConfigChannel+0x130>)
 8000f84:	4913      	ldr	r1, [pc, #76]	; (8000fd4 <HAL_ADC_ConfigChannel+0x134>)
 8000f86:	400a      	ands	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	029b      	lsls	r3, r3, #10
 8000f92:	4013      	ands	r3, r2
 8000f94:	d005      	beq.n	8000fa2 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_ADC_ConfigChannel+0x130>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <HAL_ADC_ConfigChannel+0x130>)
 8000f9c:	490e      	ldr	r1, [pc, #56]	; (8000fd8 <HAL_ADC_ConfigChannel+0x138>)
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	025b      	lsls	r3, r3, #9
 8000faa:	4013      	ands	r3, r2
 8000fac:	d005      	beq.n	8000fba <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_ADC_ConfigChannel+0x130>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HAL_ADC_ConfigChannel+0x130>)
 8000fb4:	4909      	ldr	r1, [pc, #36]	; (8000fdc <HAL_ADC_ConfigChannel+0x13c>)
 8000fb6:	400a      	ands	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2250      	movs	r2, #80	; 0x50
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b002      	add	sp, #8
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	00001001 	.word	0x00001001
 8000fd0:	40012708 	.word	0x40012708
 8000fd4:	ff7fffff 	.word	0xff7fffff
 8000fd8:	ffbfffff 	.word	0xffbfffff
 8000fdc:	feffffff 	.word	0xfeffffff

08000fe0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d108      	bne.n	800100c <ADC_Enable+0x2c>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2201      	movs	r2, #1
 8001002:	4013      	ands	r3, r2
 8001004:	2b01      	cmp	r3, #1
 8001006:	d101      	bne.n	800100c <ADC_Enable+0x2c>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <ADC_Enable+0x2e>
 800100c:	2300      	movs	r3, #0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d146      	bne.n	80010a0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	4a24      	ldr	r2, [pc, #144]	; (80010ac <ADC_Enable+0xcc>)
 800101a:	4013      	ands	r3, r2
 800101c:	d00d      	beq.n	800103a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001022:	2210      	movs	r2, #16
 8001024:	431a      	orrs	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	2201      	movs	r2, #1
 8001030:	431a      	orrs	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e033      	b.n	80010a2 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2101      	movs	r1, #1
 8001046:	430a      	orrs	r2, r1
 8001048:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800104a:	2001      	movs	r0, #1
 800104c:	f000 f8b4 	bl	80011b8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001050:	f7ff fd16 	bl	8000a80 <HAL_GetTick>
 8001054:	0003      	movs	r3, r0
 8001056:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001058:	e01b      	b.n	8001092 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800105a:	f7ff fd11 	bl	8000a80 <HAL_GetTick>
 800105e:	0002      	movs	r2, r0
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b0a      	cmp	r3, #10
 8001066:	d914      	bls.n	8001092 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2201      	movs	r2, #1
 8001070:	4013      	ands	r3, r2
 8001072:	2b01      	cmp	r3, #1
 8001074:	d00d      	beq.n	8001092 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800107a:	2210      	movs	r2, #16
 800107c:	431a      	orrs	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001086:	2201      	movs	r2, #1
 8001088:	431a      	orrs	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e007      	b.n	80010a2 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2201      	movs	r2, #1
 800109a:	4013      	ands	r3, r2
 800109c:	2b01      	cmp	r3, #1
 800109e:	d1dc      	bne.n	800105a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	0018      	movs	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b004      	add	sp, #16
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	80000017 	.word	0x80000017

080010b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c2:	2250      	movs	r2, #80	; 0x50
 80010c4:	4013      	ands	r3, r2
 80010c6:	d141      	bne.n	800114c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010cc:	2280      	movs	r2, #128	; 0x80
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	431a      	orrs	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	23c0      	movs	r3, #192	; 0xc0
 80010de:	011b      	lsls	r3, r3, #4
 80010e0:	4013      	ands	r3, r2
 80010e2:	d12e      	bne.n	8001142 <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2220      	movs	r2, #32
 80010e8:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d129      	bne.n	8001142 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2208      	movs	r2, #8
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d122      	bne.n	8001142 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	2204      	movs	r2, #4
 8001104:	4013      	ands	r3, r2
 8001106:	d110      	bne.n	800112a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	210c      	movs	r1, #12
 8001114:	438a      	bics	r2, r1
 8001116:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800111c:	4a10      	ldr	r2, [pc, #64]	; (8001160 <ADC_DMAConvCplt+0xb0>)
 800111e:	4013      	ands	r3, r2
 8001120:	2201      	movs	r2, #1
 8001122:	431a      	orrs	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	655a      	str	r2, [r3, #84]	; 0x54
 8001128:	e00b      	b.n	8001142 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112e:	2220      	movs	r2, #32
 8001130:	431a      	orrs	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113a:	2201      	movs	r2, #1
 800113c:	431a      	orrs	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff f9af 	bl	80004a8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800114a:	e005      	b.n	8001158 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	0010      	movs	r0, r2
 8001156:	4798      	blx	r3
}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	b004      	add	sp, #16
 800115e:	bd80      	pop	{r7, pc}
 8001160:	fffffefe 	.word	0xfffffefe

08001164 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001170:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	0018      	movs	r0, r3
 8001176:	f7ff fe83 	bl	8000e80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	b004      	add	sp, #16
 8001180:	bd80      	pop	{r7, pc}

08001182 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001194:	2240      	movs	r2, #64	; 0x40
 8001196:	431a      	orrs	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a0:	2204      	movs	r2, #4
 80011a2:	431a      	orrs	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	0018      	movs	r0, r3
 80011ac:	f7ff fe70 	bl	8000e90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b004      	add	sp, #16
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <ADC_DelayMicroSecond+0x38>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	490b      	ldr	r1, [pc, #44]	; (80011f4 <ADC_DelayMicroSecond+0x3c>)
 80011c6:	0018      	movs	r0, r3
 80011c8:	f7fe ff9e 	bl	8000108 <__udivsi3>
 80011cc:	0003      	movs	r3, r0
 80011ce:	001a      	movs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4353      	muls	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80011d6:	e002      	b.n	80011de <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	3b01      	subs	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f9      	bne.n	80011d8 <ADC_DelayMicroSecond+0x20>
  }
}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b004      	add	sp, #16
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	20000000 	.word	0x20000000
 80011f4:	000f4240 	.word	0x000f4240

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	0002      	movs	r2, r0
 8001200:	1dfb      	adds	r3, r7, #7
 8001202:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b7f      	cmp	r3, #127	; 0x7f
 800120a:	d809      	bhi.n	8001220 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120c:	1dfb      	adds	r3, r7, #7
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	001a      	movs	r2, r3
 8001212:	231f      	movs	r3, #31
 8001214:	401a      	ands	r2, r3
 8001216:	4b04      	ldr	r3, [pc, #16]	; (8001228 <__NVIC_EnableIRQ+0x30>)
 8001218:	2101      	movs	r1, #1
 800121a:	4091      	lsls	r1, r2
 800121c:	000a      	movs	r2, r1
 800121e:	601a      	str	r2, [r3, #0]
  }
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	b002      	add	sp, #8
 8001226:	bd80      	pop	{r7, pc}
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	0002      	movs	r2, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	1dfb      	adds	r3, r7, #7
 8001238:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b7f      	cmp	r3, #127	; 0x7f
 8001240:	d828      	bhi.n	8001294 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001242:	4a2f      	ldr	r2, [pc, #188]	; (8001300 <__NVIC_SetPriority+0xd4>)
 8001244:	1dfb      	adds	r3, r7, #7
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b25b      	sxtb	r3, r3
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	33c0      	adds	r3, #192	; 0xc0
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	589b      	ldr	r3, [r3, r2]
 8001252:	1dfa      	adds	r2, r7, #7
 8001254:	7812      	ldrb	r2, [r2, #0]
 8001256:	0011      	movs	r1, r2
 8001258:	2203      	movs	r2, #3
 800125a:	400a      	ands	r2, r1
 800125c:	00d2      	lsls	r2, r2, #3
 800125e:	21ff      	movs	r1, #255	; 0xff
 8001260:	4091      	lsls	r1, r2
 8001262:	000a      	movs	r2, r1
 8001264:	43d2      	mvns	r2, r2
 8001266:	401a      	ands	r2, r3
 8001268:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	019b      	lsls	r3, r3, #6
 800126e:	22ff      	movs	r2, #255	; 0xff
 8001270:	401a      	ands	r2, r3
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	0018      	movs	r0, r3
 8001278:	2303      	movs	r3, #3
 800127a:	4003      	ands	r3, r0
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001280:	481f      	ldr	r0, [pc, #124]	; (8001300 <__NVIC_SetPriority+0xd4>)
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b25b      	sxtb	r3, r3
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	430a      	orrs	r2, r1
 800128c:	33c0      	adds	r3, #192	; 0xc0
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001292:	e031      	b.n	80012f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001294:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <__NVIC_SetPriority+0xd8>)
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	0019      	movs	r1, r3
 800129c:	230f      	movs	r3, #15
 800129e:	400b      	ands	r3, r1
 80012a0:	3b08      	subs	r3, #8
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3306      	adds	r3, #6
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	18d3      	adds	r3, r2, r3
 80012aa:	3304      	adds	r3, #4
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	1dfa      	adds	r2, r7, #7
 80012b0:	7812      	ldrb	r2, [r2, #0]
 80012b2:	0011      	movs	r1, r2
 80012b4:	2203      	movs	r2, #3
 80012b6:	400a      	ands	r2, r1
 80012b8:	00d2      	lsls	r2, r2, #3
 80012ba:	21ff      	movs	r1, #255	; 0xff
 80012bc:	4091      	lsls	r1, r2
 80012be:	000a      	movs	r2, r1
 80012c0:	43d2      	mvns	r2, r2
 80012c2:	401a      	ands	r2, r3
 80012c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	019b      	lsls	r3, r3, #6
 80012ca:	22ff      	movs	r2, #255	; 0xff
 80012cc:	401a      	ands	r2, r3
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	0018      	movs	r0, r3
 80012d4:	2303      	movs	r3, #3
 80012d6:	4003      	ands	r3, r0
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012dc:	4809      	ldr	r0, [pc, #36]	; (8001304 <__NVIC_SetPriority+0xd8>)
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	001c      	movs	r4, r3
 80012e4:	230f      	movs	r3, #15
 80012e6:	4023      	ands	r3, r4
 80012e8:	3b08      	subs	r3, #8
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	430a      	orrs	r2, r1
 80012ee:	3306      	adds	r3, #6
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	18c3      	adds	r3, r0, r3
 80012f4:	3304      	adds	r3, #4
 80012f6:	601a      	str	r2, [r3, #0]
}
 80012f8:	46c0      	nop			; (mov r8, r8)
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b003      	add	sp, #12
 80012fe:	bd90      	pop	{r4, r7, pc}
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	1e5a      	subs	r2, r3, #1
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	045b      	lsls	r3, r3, #17
 8001318:	429a      	cmp	r2, r3
 800131a:	d301      	bcc.n	8001320 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131c:	2301      	movs	r3, #1
 800131e:	e010      	b.n	8001342 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <SysTick_Config+0x44>)
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	3a01      	subs	r2, #1
 8001326:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001328:	2301      	movs	r3, #1
 800132a:	425b      	negs	r3, r3
 800132c:	2103      	movs	r1, #3
 800132e:	0018      	movs	r0, r3
 8001330:	f7ff ff7c 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SysTick_Config+0x44>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <SysTick_Config+0x44>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	0018      	movs	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	b002      	add	sp, #8
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
 800135a:	210f      	movs	r1, #15
 800135c:	187b      	adds	r3, r7, r1
 800135e:	1c02      	adds	r2, r0, #0
 8001360:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	187b      	adds	r3, r7, r1
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b25b      	sxtb	r3, r3
 800136a:	0011      	movs	r1, r2
 800136c:	0018      	movs	r0, r3
 800136e:	f7ff ff5d 	bl	800122c <__NVIC_SetPriority>
}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	b004      	add	sp, #16
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	0002      	movs	r2, r0
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001386:	1dfb      	adds	r3, r7, #7
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	b25b      	sxtb	r3, r3
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff ff33 	bl	80011f8 <__NVIC_EnableIRQ>
}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	b002      	add	sp, #8
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff ffaf 	bl	8001308 <SysTick_Config>
 80013aa:	0003      	movs	r3, r0
}
 80013ac:	0018      	movs	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b002      	add	sp, #8
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e061      	b.n	800148a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a32      	ldr	r2, [pc, #200]	; (8001494 <HAL_DMA_Init+0xe0>)
 80013cc:	4694      	mov	ip, r2
 80013ce:	4463      	add	r3, ip
 80013d0:	2114      	movs	r1, #20
 80013d2:	0018      	movs	r0, r3
 80013d4:	f7fe fe98 	bl	8000108 <__udivsi3>
 80013d8:	0003      	movs	r3, r0
 80013da:	009a      	lsls	r2, r3, #2
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a2d      	ldr	r2, [pc, #180]	; (8001498 <HAL_DMA_Init+0xe4>)
 80013e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2225      	movs	r2, #37	; 0x25
 80013ea:	2102      	movs	r1, #2
 80013ec:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4a28      	ldr	r2, [pc, #160]	; (800149c <HAL_DMA_Init+0xe8>)
 80013fa:	4013      	ands	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001406:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001412:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	4313      	orrs	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	01db      	lsls	r3, r3, #7
 800143c:	429a      	cmp	r2, r3
 800143e:	d018      	beq.n	8001472 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_DMA_Init+0xec>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001448:	211c      	movs	r1, #28
 800144a:	400b      	ands	r3, r1
 800144c:	210f      	movs	r1, #15
 800144e:	4099      	lsls	r1, r3
 8001450:	000b      	movs	r3, r1
 8001452:	43d9      	mvns	r1, r3
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_DMA_Init+0xec>)
 8001456:	400a      	ands	r2, r1
 8001458:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_DMA_Init+0xec>)
 800145c:	6819      	ldr	r1, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	201c      	movs	r0, #28
 8001468:	4003      	ands	r3, r0
 800146a:	409a      	lsls	r2, r3
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <HAL_DMA_Init+0xec>)
 800146e:	430a      	orrs	r2, r1
 8001470:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2225      	movs	r2, #37	; 0x25
 800147c:	2101      	movs	r1, #1
 800147e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2224      	movs	r2, #36	; 0x24
 8001484:	2100      	movs	r1, #0
 8001486:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	0018      	movs	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	b004      	add	sp, #16
 8001490:	bd80      	pop	{r7, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	bffdfff8 	.word	0xbffdfff8
 8001498:	40020000 	.word	0x40020000
 800149c:	ffff800f 	.word	0xffff800f
 80014a0:	400200a8 	.word	0x400200a8

080014a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014b2:	2317      	movs	r3, #23
 80014b4:	18fb      	adds	r3, r7, r3
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2224      	movs	r2, #36	; 0x24
 80014be:	5c9b      	ldrb	r3, [r3, r2]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_DMA_Start_IT+0x24>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e04f      	b.n	8001568 <HAL_DMA_Start_IT+0xc4>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2224      	movs	r2, #36	; 0x24
 80014cc:	2101      	movs	r1, #1
 80014ce:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2225      	movs	r2, #37	; 0x25
 80014d4:	5c9b      	ldrb	r3, [r3, r2]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d13a      	bne.n	8001552 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2225      	movs	r2, #37	; 0x25
 80014e0:	2102      	movs	r1, #2
 80014e2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2200      	movs	r2, #0
 80014e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2101      	movs	r1, #1
 80014f6:	438a      	bics	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	68b9      	ldr	r1, [r7, #8]
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f000 f8e3 	bl	80016cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	2b00      	cmp	r3, #0
 800150c:	d008      	beq.n	8001520 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	210e      	movs	r1, #14
 800151a:	430a      	orrs	r2, r1
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	e00f      	b.n	8001540 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2104      	movs	r1, #4
 800152c:	438a      	bics	r2, r1
 800152e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	210a      	movs	r1, #10
 800153c:	430a      	orrs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2101      	movs	r1, #1
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	e007      	b.n	8001562 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2224      	movs	r2, #36	; 0x24
 8001556:	2100      	movs	r1, #0
 8001558:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800155a:	2317      	movs	r3, #23
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	2202      	movs	r2, #2
 8001560:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001562:	2317      	movs	r3, #23
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	781b      	ldrb	r3, [r3, #0]
}
 8001568:	0018      	movs	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	b006      	add	sp, #24
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158c:	221c      	movs	r2, #28
 800158e:	4013      	ands	r3, r2
 8001590:	2204      	movs	r2, #4
 8001592:	409a      	lsls	r2, r3
 8001594:	0013      	movs	r3, r2
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	4013      	ands	r3, r2
 800159a:	d026      	beq.n	80015ea <HAL_DMA_IRQHandler+0x7a>
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	2204      	movs	r2, #4
 80015a0:	4013      	ands	r3, r2
 80015a2:	d022      	beq.n	80015ea <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2220      	movs	r2, #32
 80015ac:	4013      	ands	r3, r2
 80015ae:	d107      	bne.n	80015c0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2104      	movs	r1, #4
 80015bc:	438a      	bics	r2, r1
 80015be:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c4:	221c      	movs	r2, #28
 80015c6:	401a      	ands	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	2104      	movs	r1, #4
 80015ce:	4091      	lsls	r1, r2
 80015d0:	000a      	movs	r2, r1
 80015d2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d100      	bne.n	80015de <HAL_DMA_IRQHandler+0x6e>
 80015dc:	e071      	b.n	80016c2 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	0010      	movs	r0, r2
 80015e6:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80015e8:	e06b      	b.n	80016c2 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	221c      	movs	r2, #28
 80015f0:	4013      	ands	r3, r2
 80015f2:	2202      	movs	r2, #2
 80015f4:	409a      	lsls	r2, r3
 80015f6:	0013      	movs	r3, r2
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4013      	ands	r3, r2
 80015fc:	d02d      	beq.n	800165a <HAL_DMA_IRQHandler+0xea>
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2202      	movs	r2, #2
 8001602:	4013      	ands	r3, r2
 8001604:	d029      	beq.n	800165a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2220      	movs	r2, #32
 800160e:	4013      	ands	r3, r2
 8001610:	d10b      	bne.n	800162a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	210a      	movs	r1, #10
 800161e:	438a      	bics	r2, r1
 8001620:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2225      	movs	r2, #37	; 0x25
 8001626:	2101      	movs	r1, #1
 8001628:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	221c      	movs	r2, #28
 8001630:	401a      	ands	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	2102      	movs	r1, #2
 8001638:	4091      	lsls	r1, r2
 800163a:	000a      	movs	r2, r1
 800163c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2224      	movs	r2, #36	; 0x24
 8001642:	2100      	movs	r1, #0
 8001644:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164a:	2b00      	cmp	r3, #0
 800164c:	d039      	beq.n	80016c2 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	0010      	movs	r0, r2
 8001656:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001658:	e033      	b.n	80016c2 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	221c      	movs	r2, #28
 8001660:	4013      	ands	r3, r2
 8001662:	2208      	movs	r2, #8
 8001664:	409a      	lsls	r2, r3
 8001666:	0013      	movs	r3, r2
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4013      	ands	r3, r2
 800166c:	d02a      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x154>
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	2208      	movs	r2, #8
 8001672:	4013      	ands	r3, r2
 8001674:	d026      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	210e      	movs	r1, #14
 8001682:	438a      	bics	r2, r1
 8001684:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	221c      	movs	r2, #28
 800168c:	401a      	ands	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	2101      	movs	r1, #1
 8001694:	4091      	lsls	r1, r2
 8001696:	000a      	movs	r2, r1
 8001698:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2225      	movs	r2, #37	; 0x25
 80016a4:	2101      	movs	r1, #1
 80016a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2224      	movs	r2, #36	; 0x24
 80016ac:	2100      	movs	r1, #0
 80016ae:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	0010      	movs	r0, r2
 80016c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	46c0      	nop			; (mov r8, r8)
}
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b004      	add	sp, #16
 80016ca:	bd80      	pop	{r7, pc}

080016cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	221c      	movs	r2, #28
 80016e0:	401a      	ands	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	2101      	movs	r1, #1
 80016e8:	4091      	lsls	r1, r2
 80016ea:	000a      	movs	r2, r1
 80016ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b10      	cmp	r3, #16
 80016fc:	d108      	bne.n	8001710 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800170e:	e007      	b.n	8001720 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	60da      	str	r2, [r3, #12]
}
 8001720:	46c0      	nop			; (mov r8, r8)
 8001722:	46bd      	mov	sp, r7
 8001724:	b004      	add	sp, #16
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800173e:	e14f      	b.n	80019e0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2101      	movs	r1, #1
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4091      	lsls	r1, r2
 800174a:	000a      	movs	r2, r1
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d100      	bne.n	8001758 <HAL_GPIO_Init+0x30>
 8001756:	e140      	b.n	80019da <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2203      	movs	r2, #3
 800175e:	4013      	ands	r3, r2
 8001760:	2b01      	cmp	r3, #1
 8001762:	d005      	beq.n	8001770 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2203      	movs	r2, #3
 800176a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800176c:	2b02      	cmp	r3, #2
 800176e:	d130      	bne.n	80017d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	409a      	lsls	r2, r3
 800177e:	0013      	movs	r3, r2
 8001780:	43da      	mvns	r2, r3
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	409a      	lsls	r2, r3
 8001792:	0013      	movs	r3, r2
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a6:	2201      	movs	r2, #1
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
 80017ac:	0013      	movs	r3, r2
 80017ae:	43da      	mvns	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	2201      	movs	r2, #1
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
 80017c4:	0013      	movs	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2203      	movs	r2, #3
 80017d8:	4013      	ands	r3, r2
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d017      	beq.n	800180e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	2203      	movs	r2, #3
 80017ea:	409a      	lsls	r2, r3
 80017ec:	0013      	movs	r3, r2
 80017ee:	43da      	mvns	r2, r3
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	409a      	lsls	r2, r3
 8001800:	0013      	movs	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2203      	movs	r2, #3
 8001814:	4013      	ands	r3, r2
 8001816:	2b02      	cmp	r3, #2
 8001818:	d123      	bne.n	8001862 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	08da      	lsrs	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3208      	adds	r2, #8
 8001822:	0092      	lsls	r2, r2, #2
 8001824:	58d3      	ldr	r3, [r2, r3]
 8001826:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2207      	movs	r2, #7
 800182c:	4013      	ands	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	409a      	lsls	r2, r3
 8001834:	0013      	movs	r3, r2
 8001836:	43da      	mvns	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	691a      	ldr	r2, [r3, #16]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2107      	movs	r1, #7
 8001846:	400b      	ands	r3, r1
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	409a      	lsls	r2, r3
 800184c:	0013      	movs	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	08da      	lsrs	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3208      	adds	r2, #8
 800185c:	0092      	lsls	r2, r2, #2
 800185e:	6939      	ldr	r1, [r7, #16]
 8001860:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	409a      	lsls	r2, r3
 8001870:	0013      	movs	r3, r2
 8001872:	43da      	mvns	r2, r3
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2203      	movs	r2, #3
 8001880:	401a      	ands	r2, r3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	409a      	lsls	r2, r3
 8001888:	0013      	movs	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	23c0      	movs	r3, #192	; 0xc0
 800189c:	029b      	lsls	r3, r3, #10
 800189e:	4013      	ands	r3, r2
 80018a0:	d100      	bne.n	80018a4 <HAL_GPIO_Init+0x17c>
 80018a2:	e09a      	b.n	80019da <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a4:	4b54      	ldr	r3, [pc, #336]	; (80019f8 <HAL_GPIO_Init+0x2d0>)
 80018a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018a8:	4b53      	ldr	r3, [pc, #332]	; (80019f8 <HAL_GPIO_Init+0x2d0>)
 80018aa:	2101      	movs	r1, #1
 80018ac:	430a      	orrs	r2, r1
 80018ae:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80018b0:	4a52      	ldr	r2, [pc, #328]	; (80019fc <HAL_GPIO_Init+0x2d4>)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	589b      	ldr	r3, [r3, r2]
 80018bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2203      	movs	r2, #3
 80018c2:	4013      	ands	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	409a      	lsls	r2, r3
 80018ca:	0013      	movs	r3, r2
 80018cc:	43da      	mvns	r2, r3
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	23a0      	movs	r3, #160	; 0xa0
 80018d8:	05db      	lsls	r3, r3, #23
 80018da:	429a      	cmp	r2, r3
 80018dc:	d019      	beq.n	8001912 <HAL_GPIO_Init+0x1ea>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a47      	ldr	r2, [pc, #284]	; (8001a00 <HAL_GPIO_Init+0x2d8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d013      	beq.n	800190e <HAL_GPIO_Init+0x1e6>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a46      	ldr	r2, [pc, #280]	; (8001a04 <HAL_GPIO_Init+0x2dc>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d00d      	beq.n	800190a <HAL_GPIO_Init+0x1e2>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a45      	ldr	r2, [pc, #276]	; (8001a08 <HAL_GPIO_Init+0x2e0>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d007      	beq.n	8001906 <HAL_GPIO_Init+0x1de>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a44      	ldr	r2, [pc, #272]	; (8001a0c <HAL_GPIO_Init+0x2e4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d101      	bne.n	8001902 <HAL_GPIO_Init+0x1da>
 80018fe:	2305      	movs	r3, #5
 8001900:	e008      	b.n	8001914 <HAL_GPIO_Init+0x1ec>
 8001902:	2306      	movs	r3, #6
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x1ec>
 8001906:	2303      	movs	r3, #3
 8001908:	e004      	b.n	8001914 <HAL_GPIO_Init+0x1ec>
 800190a:	2302      	movs	r3, #2
 800190c:	e002      	b.n	8001914 <HAL_GPIO_Init+0x1ec>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_GPIO_Init+0x1ec>
 8001912:	2300      	movs	r3, #0
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	2103      	movs	r1, #3
 8001918:	400a      	ands	r2, r1
 800191a:	0092      	lsls	r2, r2, #2
 800191c:	4093      	lsls	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001924:	4935      	ldr	r1, [pc, #212]	; (80019fc <HAL_GPIO_Init+0x2d4>)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	3302      	adds	r3, #2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001932:	4b37      	ldr	r3, [pc, #220]	; (8001a10 <HAL_GPIO_Init+0x2e8>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	43da      	mvns	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	035b      	lsls	r3, r3, #13
 800194a:	4013      	ands	r3, r2
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001956:	4b2e      	ldr	r3, [pc, #184]	; (8001a10 <HAL_GPIO_Init+0x2e8>)
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800195c:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <HAL_GPIO_Init+0x2e8>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	43da      	mvns	r2, r3
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	039b      	lsls	r3, r3, #14
 8001974:	4013      	ands	r3, r2
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <HAL_GPIO_Init+0x2e8>)
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_GPIO_Init+0x2e8>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43da      	mvns	r2, r3
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	029b      	lsls	r3, r3, #10
 800199e:	4013      	ands	r3, r2
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_GPIO_Init+0x2e8>)
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_GPIO_Init+0x2e8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	43da      	mvns	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	025b      	lsls	r3, r3, #9
 80019c8:	4013      	ands	r3, r2
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_GPIO_Init+0x2e8>)
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3301      	adds	r3, #1
 80019de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	40da      	lsrs	r2, r3
 80019e8:	1e13      	subs	r3, r2, #0
 80019ea:	d000      	beq.n	80019ee <HAL_GPIO_Init+0x2c6>
 80019ec:	e6a8      	b.n	8001740 <HAL_GPIO_Init+0x18>
  }
}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	46c0      	nop			; (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b006      	add	sp, #24
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010000 	.word	0x40010000
 8001a00:	50000400 	.word	0x50000400
 8001a04:	50000800 	.word	0x50000800
 8001a08:	50000c00 	.word	0x50000c00
 8001a0c:	50001c00 	.word	0x50001c00
 8001a10:	40010400 	.word	0x40010400

08001a14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a14:	b5b0      	push	{r4, r5, r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d102      	bne.n	8001a28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	f000 fbaf 	bl	8002186 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a28:	4bcf      	ldr	r3, [pc, #828]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	220c      	movs	r2, #12
 8001a2e:	4013      	ands	r3, r2
 8001a30:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a32:	4bcd      	ldr	r3, [pc, #820]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	025b      	lsls	r3, r3, #9
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2201      	movs	r2, #1
 8001a44:	4013      	ands	r3, r2
 8001a46:	d100      	bne.n	8001a4a <HAL_RCC_OscConfig+0x36>
 8001a48:	e07e      	b.n	8001b48 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d007      	beq.n	8001a60 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	d112      	bne.n	8001a7c <HAL_RCC_OscConfig+0x68>
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	025b      	lsls	r3, r3, #9
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d10d      	bne.n	8001a7c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a60:	4bc1      	ldr	r3, [pc, #772]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	029b      	lsls	r3, r3, #10
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d100      	bne.n	8001a6e <HAL_RCC_OscConfig+0x5a>
 8001a6c:	e06b      	b.n	8001b46 <HAL_RCC_OscConfig+0x132>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d167      	bne.n	8001b46 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	f000 fb85 	bl	8002186 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	025b      	lsls	r3, r3, #9
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d107      	bne.n	8001a98 <HAL_RCC_OscConfig+0x84>
 8001a88:	4bb7      	ldr	r3, [pc, #732]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4bb6      	ldr	r3, [pc, #728]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	0249      	lsls	r1, r1, #9
 8001a92:	430a      	orrs	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	e027      	b.n	8001ae8 <HAL_RCC_OscConfig+0xd4>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	23a0      	movs	r3, #160	; 0xa0
 8001a9e:	02db      	lsls	r3, r3, #11
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d10e      	bne.n	8001ac2 <HAL_RCC_OscConfig+0xae>
 8001aa4:	4bb0      	ldr	r3, [pc, #704]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4baf      	ldr	r3, [pc, #700]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001aaa:	2180      	movs	r1, #128	; 0x80
 8001aac:	02c9      	lsls	r1, r1, #11
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	4bad      	ldr	r3, [pc, #692]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	4bac      	ldr	r3, [pc, #688]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001ab8:	2180      	movs	r1, #128	; 0x80
 8001aba:	0249      	lsls	r1, r1, #9
 8001abc:	430a      	orrs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	e012      	b.n	8001ae8 <HAL_RCC_OscConfig+0xd4>
 8001ac2:	4ba9      	ldr	r3, [pc, #676]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4ba8      	ldr	r3, [pc, #672]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001ac8:	49a8      	ldr	r1, [pc, #672]	; (8001d6c <HAL_RCC_OscConfig+0x358>)
 8001aca:	400a      	ands	r2, r1
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	4ba6      	ldr	r3, [pc, #664]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	025b      	lsls	r3, r3, #9
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4ba2      	ldr	r3, [pc, #648]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4ba1      	ldr	r3, [pc, #644]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001ae2:	49a3      	ldr	r1, [pc, #652]	; (8001d70 <HAL_RCC_OscConfig+0x35c>)
 8001ae4:	400a      	ands	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d015      	beq.n	8001b1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7fe ffc6 	bl	8000a80 <HAL_GetTick>
 8001af4:	0003      	movs	r3, r0
 8001af6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001af8:	e009      	b.n	8001b0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001afa:	f7fe ffc1 	bl	8000a80 <HAL_GetTick>
 8001afe:	0002      	movs	r2, r0
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b64      	cmp	r3, #100	; 0x64
 8001b06:	d902      	bls.n	8001b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	f000 fb3c 	bl	8002186 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b0e:	4b96      	ldr	r3, [pc, #600]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	029b      	lsls	r3, r3, #10
 8001b16:	4013      	ands	r3, r2
 8001b18:	d0ef      	beq.n	8001afa <HAL_RCC_OscConfig+0xe6>
 8001b1a:	e015      	b.n	8001b48 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7fe ffb0 	bl	8000a80 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b26:	f7fe ffab 	bl	8000a80 <HAL_GetTick>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b64      	cmp	r3, #100	; 0x64
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e326      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b38:	4b8b      	ldr	r3, [pc, #556]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	029b      	lsls	r3, r3, #10
 8001b40:	4013      	ands	r3, r2
 8001b42:	d1f0      	bne.n	8001b26 <HAL_RCC_OscConfig+0x112>
 8001b44:	e000      	b.n	8001b48 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b46:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d100      	bne.n	8001b54 <HAL_RCC_OscConfig+0x140>
 8001b52:	e08b      	b.n	8001c6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d005      	beq.n	8001b6c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	2b0c      	cmp	r3, #12
 8001b64:	d13e      	bne.n	8001be4 <HAL_RCC_OscConfig+0x1d0>
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d13b      	bne.n	8001be4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001b6c:	4b7e      	ldr	r3, [pc, #504]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2204      	movs	r2, #4
 8001b72:	4013      	ands	r3, r2
 8001b74:	d004      	beq.n	8001b80 <HAL_RCC_OscConfig+0x16c>
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e302      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b80:	4b79      	ldr	r3, [pc, #484]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4a7b      	ldr	r2, [pc, #492]	; (8001d74 <HAL_RCC_OscConfig+0x360>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	0019      	movs	r1, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	021a      	lsls	r2, r3, #8
 8001b90:	4b75      	ldr	r3, [pc, #468]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001b92:	430a      	orrs	r2, r1
 8001b94:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b96:	4b74      	ldr	r3, [pc, #464]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2209      	movs	r2, #9
 8001b9c:	4393      	bics	r3, r2
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	4b71      	ldr	r3, [pc, #452]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ba8:	f000 fc40 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8001bac:	0001      	movs	r1, r0
 8001bae:	4b6e      	ldr	r3, [pc, #440]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	4a6f      	ldr	r2, [pc, #444]	; (8001d78 <HAL_RCC_OscConfig+0x364>)
 8001bba:	5cd3      	ldrb	r3, [r2, r3]
 8001bbc:	000a      	movs	r2, r1
 8001bbe:	40da      	lsrs	r2, r3
 8001bc0:	4b6e      	ldr	r3, [pc, #440]	; (8001d7c <HAL_RCC_OscConfig+0x368>)
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001bc4:	4b6e      	ldr	r3, [pc, #440]	; (8001d80 <HAL_RCC_OscConfig+0x36c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2513      	movs	r5, #19
 8001bca:	197c      	adds	r4, r7, r5
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7fe ff11 	bl	80009f4 <HAL_InitTick>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001bd6:	197b      	adds	r3, r7, r5
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d046      	beq.n	8001c6c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001bde:	197b      	adds	r3, r7, r5
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	e2d0      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d027      	beq.n	8001c3a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001bea:	4b5f      	ldr	r3, [pc, #380]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2209      	movs	r2, #9
 8001bf0:	4393      	bics	r3, r2
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	4b5c      	ldr	r3, [pc, #368]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7fe ff40 	bl	8000a80 <HAL_GetTick>
 8001c00:	0003      	movs	r3, r0
 8001c02:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c06:	f7fe ff3b 	bl	8000a80 <HAL_GetTick>
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e2b6      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c18:	4b53      	ldr	r3, [pc, #332]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d0f1      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c22:	4b51      	ldr	r3, [pc, #324]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4a53      	ldr	r2, [pc, #332]	; (8001d74 <HAL_RCC_OscConfig+0x360>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	021a      	lsls	r2, r3, #8
 8001c32:	4b4d      	ldr	r3, [pc, #308]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001c34:	430a      	orrs	r2, r1
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	e018      	b.n	8001c6c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3a:	4b4b      	ldr	r3, [pc, #300]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4b4a      	ldr	r3, [pc, #296]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001c40:	2101      	movs	r1, #1
 8001c42:	438a      	bics	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c46:	f7fe ff1b 	bl	8000a80 <HAL_GetTick>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c50:	f7fe ff16 	bl	8000a80 <HAL_GetTick>
 8001c54:	0002      	movs	r2, r0
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e291      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c62:	4b41      	ldr	r3, [pc, #260]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2204      	movs	r2, #4
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d1f1      	bne.n	8001c50 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2210      	movs	r2, #16
 8001c72:	4013      	ands	r3, r2
 8001c74:	d100      	bne.n	8001c78 <HAL_RCC_OscConfig+0x264>
 8001c76:	e0a1      	b.n	8001dbc <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d140      	bne.n	8001d00 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c7e:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4013      	ands	r3, r2
 8001c88:	d005      	beq.n	8001c96 <HAL_RCC_OscConfig+0x282>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e277      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c96:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4a3a      	ldr	r2, [pc, #232]	; (8001d84 <HAL_RCC_OscConfig+0x370>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca4:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001caa:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	0a19      	lsrs	r1, r3, #8
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	061a      	lsls	r2, r3, #24
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	0b5b      	lsrs	r3, r3, #13
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	0212      	lsls	r2, r2, #8
 8001cca:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001ccc:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	400b      	ands	r3, r1
 8001cd6:	4928      	ldr	r1, [pc, #160]	; (8001d78 <HAL_RCC_OscConfig+0x364>)
 8001cd8:	5ccb      	ldrb	r3, [r1, r3]
 8001cda:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001cdc:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <HAL_RCC_OscConfig+0x368>)
 8001cde:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001ce0:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <HAL_RCC_OscConfig+0x36c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2513      	movs	r5, #19
 8001ce6:	197c      	adds	r4, r7, r5
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7fe fe83 	bl	80009f4 <HAL_InitTick>
 8001cee:	0003      	movs	r3, r0
 8001cf0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001cf2:	197b      	adds	r3, r7, r5
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d060      	beq.n	8001dbc <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001cfa:	197b      	adds	r3, r7, r5
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	e242      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d03f      	beq.n	8001d88 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d08:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001d0e:	2180      	movs	r1, #128	; 0x80
 8001d10:	0049      	lsls	r1, r1, #1
 8001d12:	430a      	orrs	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7fe feb3 	bl	8000a80 <HAL_GetTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d20:	f7fe feae 	bl	8000a80 <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e229      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <HAL_RCC_OscConfig+0x370>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	0019      	movs	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	0a19      	lsrs	r1, r3, #8
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	061a      	lsls	r2, r3, #24
 8001d60:	4b01      	ldr	r3, [pc, #4]	; (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001d62:	430a      	orrs	r2, r1
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	e029      	b.n	8001dbc <HAL_RCC_OscConfig+0x3a8>
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	fffeffff 	.word	0xfffeffff
 8001d70:	fffbffff 	.word	0xfffbffff
 8001d74:	ffffe0ff 	.word	0xffffe0ff
 8001d78:	08003374 	.word	0x08003374
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	20000004 	.word	0x20000004
 8001d84:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d88:	4bbd      	ldr	r3, [pc, #756]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4bbc      	ldr	r3, [pc, #752]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001d8e:	49bd      	ldr	r1, [pc, #756]	; (8002084 <HAL_RCC_OscConfig+0x670>)
 8001d90:	400a      	ands	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7fe fe74 	bl	8000a80 <HAL_GetTick>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d9e:	f7fe fe6f 	bl	8000a80 <HAL_GetTick>
 8001da2:	0002      	movs	r2, r0
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e1ea      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001db0:	4bb3      	ldr	r3, [pc, #716]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4013      	ands	r3, r2
 8001dba:	d1f0      	bne.n	8001d9e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d036      	beq.n	8001e34 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d019      	beq.n	8001e02 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dce:	4bac      	ldr	r3, [pc, #688]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001dd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dd2:	4bab      	ldr	r3, [pc, #684]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dda:	f7fe fe51 	bl	8000a80 <HAL_GetTick>
 8001dde:	0003      	movs	r3, r0
 8001de0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de4:	f7fe fe4c 	bl	8000a80 <HAL_GetTick>
 8001de8:	0002      	movs	r2, r0
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e1c7      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001df6:	4ba2      	ldr	r3, [pc, #648]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d0f1      	beq.n	8001de4 <HAL_RCC_OscConfig+0x3d0>
 8001e00:	e018      	b.n	8001e34 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e02:	4b9f      	ldr	r3, [pc, #636]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001e04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e06:	4b9e      	ldr	r3, [pc, #632]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001e08:	2101      	movs	r1, #1
 8001e0a:	438a      	bics	r2, r1
 8001e0c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0e:	f7fe fe37 	bl	8000a80 <HAL_GetTick>
 8001e12:	0003      	movs	r3, r0
 8001e14:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e18:	f7fe fe32 	bl	8000a80 <HAL_GetTick>
 8001e1c:	0002      	movs	r2, r0
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e1ad      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e2a:	4b95      	ldr	r3, [pc, #596]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2e:	2202      	movs	r2, #2
 8001e30:	4013      	ands	r3, r2
 8001e32:	d1f1      	bne.n	8001e18 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2204      	movs	r2, #4
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d100      	bne.n	8001e40 <HAL_RCC_OscConfig+0x42c>
 8001e3e:	e0ae      	b.n	8001f9e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e40:	2027      	movs	r0, #39	; 0x27
 8001e42:	183b      	adds	r3, r7, r0
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e48:	4b8d      	ldr	r3, [pc, #564]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001e4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	055b      	lsls	r3, r3, #21
 8001e50:	4013      	ands	r3, r2
 8001e52:	d109      	bne.n	8001e68 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e54:	4b8a      	ldr	r3, [pc, #552]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e58:	4b89      	ldr	r3, [pc, #548]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001e5a:	2180      	movs	r1, #128	; 0x80
 8001e5c:	0549      	lsls	r1, r1, #21
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e62:	183b      	adds	r3, r7, r0
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e68:	4b87      	ldr	r3, [pc, #540]	; (8002088 <HAL_RCC_OscConfig+0x674>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4013      	ands	r3, r2
 8001e72:	d11a      	bne.n	8001eaa <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e74:	4b84      	ldr	r3, [pc, #528]	; (8002088 <HAL_RCC_OscConfig+0x674>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b83      	ldr	r3, [pc, #524]	; (8002088 <HAL_RCC_OscConfig+0x674>)
 8001e7a:	2180      	movs	r1, #128	; 0x80
 8001e7c:	0049      	lsls	r1, r1, #1
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e82:	f7fe fdfd 	bl	8000a80 <HAL_GetTick>
 8001e86:	0003      	movs	r3, r0
 8001e88:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8c:	f7fe fdf8 	bl	8000a80 <HAL_GetTick>
 8001e90:	0002      	movs	r2, r0
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e173      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	4b7a      	ldr	r3, [pc, #488]	; (8002088 <HAL_RCC_OscConfig+0x674>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x4b2>
 8001eb6:	4b72      	ldr	r3, [pc, #456]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001eb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eba:	4b71      	ldr	r3, [pc, #452]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001ebc:	2180      	movs	r1, #128	; 0x80
 8001ebe:	0049      	lsls	r1, r1, #1
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ec4:	e031      	b.n	8001f2a <HAL_RCC_OscConfig+0x516>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4d4>
 8001ece:	4b6c      	ldr	r3, [pc, #432]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001ed0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ed2:	4b6b      	ldr	r3, [pc, #428]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001ed4:	496b      	ldr	r1, [pc, #428]	; (8002084 <HAL_RCC_OscConfig+0x670>)
 8001ed6:	400a      	ands	r2, r1
 8001ed8:	651a      	str	r2, [r3, #80]	; 0x50
 8001eda:	4b69      	ldr	r3, [pc, #420]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001edc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ede:	4b68      	ldr	r3, [pc, #416]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001ee0:	496a      	ldr	r1, [pc, #424]	; (800208c <HAL_RCC_OscConfig+0x678>)
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	651a      	str	r2, [r3, #80]	; 0x50
 8001ee6:	e020      	b.n	8001f2a <HAL_RCC_OscConfig+0x516>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	23a0      	movs	r3, #160	; 0xa0
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d10e      	bne.n	8001f12 <HAL_RCC_OscConfig+0x4fe>
 8001ef4:	4b62      	ldr	r3, [pc, #392]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001ef6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ef8:	4b61      	ldr	r3, [pc, #388]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001efa:	2180      	movs	r1, #128	; 0x80
 8001efc:	00c9      	lsls	r1, r1, #3
 8001efe:	430a      	orrs	r2, r1
 8001f00:	651a      	str	r2, [r3, #80]	; 0x50
 8001f02:	4b5f      	ldr	r3, [pc, #380]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001f04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f06:	4b5e      	ldr	r3, [pc, #376]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	0049      	lsls	r1, r1, #1
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	651a      	str	r2, [r3, #80]	; 0x50
 8001f10:	e00b      	b.n	8001f2a <HAL_RCC_OscConfig+0x516>
 8001f12:	4b5b      	ldr	r3, [pc, #364]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001f14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f16:	4b5a      	ldr	r3, [pc, #360]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001f18:	495a      	ldr	r1, [pc, #360]	; (8002084 <HAL_RCC_OscConfig+0x670>)
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	651a      	str	r2, [r3, #80]	; 0x50
 8001f1e:	4b58      	ldr	r3, [pc, #352]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001f20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f22:	4b57      	ldr	r3, [pc, #348]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001f24:	4959      	ldr	r1, [pc, #356]	; (800208c <HAL_RCC_OscConfig+0x678>)
 8001f26:	400a      	ands	r2, r1
 8001f28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d015      	beq.n	8001f5e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f32:	f7fe fda5 	bl	8000a80 <HAL_GetTick>
 8001f36:	0003      	movs	r3, r0
 8001f38:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f3a:	e009      	b.n	8001f50 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3c:	f7fe fda0 	bl	8000a80 <HAL_GetTick>
 8001f40:	0002      	movs	r2, r0
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	4a52      	ldr	r2, [pc, #328]	; (8002090 <HAL_RCC_OscConfig+0x67c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e11a      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f50:	4b4b      	ldr	r3, [pc, #300]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001f52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d0ef      	beq.n	8001f3c <HAL_RCC_OscConfig+0x528>
 8001f5c:	e014      	b.n	8001f88 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7fe fd8f 	bl	8000a80 <HAL_GetTick>
 8001f62:	0003      	movs	r3, r0
 8001f64:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f66:	e009      	b.n	8001f7c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f68:	f7fe fd8a 	bl	8000a80 <HAL_GetTick>
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	4a47      	ldr	r2, [pc, #284]	; (8002090 <HAL_RCC_OscConfig+0x67c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e104      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f7c:	4b40      	ldr	r3, [pc, #256]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001f7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4013      	ands	r3, r2
 8001f86:	d1ef      	bne.n	8001f68 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f88:	2327      	movs	r3, #39	; 0x27
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d105      	bne.n	8001f9e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f92:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f96:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001f98:	493e      	ldr	r1, [pc, #248]	; (8002094 <HAL_RCC_OscConfig+0x680>)
 8001f9a:	400a      	ands	r2, r1
 8001f9c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d049      	beq.n	800203c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d026      	beq.n	8001ffe <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001fb0:	4b33      	ldr	r3, [pc, #204]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	4b32      	ldr	r3, [pc, #200]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	4b30      	ldr	r3, [pc, #192]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc0:	4b2f      	ldr	r3, [pc, #188]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	635a      	str	r2, [r3, #52]	; 0x34
 8001fc8:	4b33      	ldr	r3, [pc, #204]	; (8002098 <HAL_RCC_OscConfig+0x684>)
 8001fca:	6a1a      	ldr	r2, [r3, #32]
 8001fcc:	4b32      	ldr	r3, [pc, #200]	; (8002098 <HAL_RCC_OscConfig+0x684>)
 8001fce:	2180      	movs	r1, #128	; 0x80
 8001fd0:	0189      	lsls	r1, r1, #6
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7fe fd53 	bl	8000a80 <HAL_GetTick>
 8001fda:	0003      	movs	r3, r0
 8001fdc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fe0:	f7fe fd4e 	bl	8000a80 <HAL_GetTick>
 8001fe4:	0002      	movs	r2, r0
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e0c9      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ff2:	4b23      	ldr	r3, [pc, #140]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d0f1      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x5cc>
 8001ffc:	e01e      	b.n	800203c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001ffe:	4b20      	ldr	r3, [pc, #128]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8002004:	2101      	movs	r1, #1
 8002006:	438a      	bics	r2, r1
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	4b23      	ldr	r3, [pc, #140]	; (8002098 <HAL_RCC_OscConfig+0x684>)
 800200c:	6a1a      	ldr	r2, [r3, #32]
 800200e:	4b22      	ldr	r3, [pc, #136]	; (8002098 <HAL_RCC_OscConfig+0x684>)
 8002010:	4922      	ldr	r1, [pc, #136]	; (800209c <HAL_RCC_OscConfig+0x688>)
 8002012:	400a      	ands	r2, r1
 8002014:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7fe fd33 	bl	8000a80 <HAL_GetTick>
 800201a:	0003      	movs	r3, r0
 800201c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002020:	f7fe fd2e 	bl	8000a80 <HAL_GetTick>
 8002024:	0002      	movs	r2, r0
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e0a9      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002032:	4b13      	ldr	r3, [pc, #76]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2202      	movs	r2, #2
 8002038:	4013      	ands	r3, r2
 800203a:	d1f1      	bne.n	8002020 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002040:	2b00      	cmp	r3, #0
 8002042:	d100      	bne.n	8002046 <HAL_RCC_OscConfig+0x632>
 8002044:	e09e      	b.n	8002184 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	2b0c      	cmp	r3, #12
 800204a:	d100      	bne.n	800204e <HAL_RCC_OscConfig+0x63a>
 800204c:	e077      	b.n	800213e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	2b02      	cmp	r3, #2
 8002054:	d158      	bne.n	8002108 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_RCC_OscConfig+0x66c>)
 800205c:	4910      	ldr	r1, [pc, #64]	; (80020a0 <HAL_RCC_OscConfig+0x68c>)
 800205e:	400a      	ands	r2, r1
 8002060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002062:	f7fe fd0d 	bl	8000a80 <HAL_GetTick>
 8002066:	0003      	movs	r3, r0
 8002068:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800206a:	e01b      	b.n	80020a4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800206c:	f7fe fd08 	bl	8000a80 <HAL_GetTick>
 8002070:	0002      	movs	r2, r0
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d914      	bls.n	80020a4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e083      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	40021000 	.word	0x40021000
 8002084:	fffffeff 	.word	0xfffffeff
 8002088:	40007000 	.word	0x40007000
 800208c:	fffffbff 	.word	0xfffffbff
 8002090:	00001388 	.word	0x00001388
 8002094:	efffffff 	.word	0xefffffff
 8002098:	40010000 	.word	0x40010000
 800209c:	ffffdfff 	.word	0xffffdfff
 80020a0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020a4:	4b3a      	ldr	r3, [pc, #232]	; (8002190 <HAL_RCC_OscConfig+0x77c>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	2380      	movs	r3, #128	; 0x80
 80020aa:	049b      	lsls	r3, r3, #18
 80020ac:	4013      	ands	r3, r2
 80020ae:	d1dd      	bne.n	800206c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b0:	4b37      	ldr	r3, [pc, #220]	; (8002190 <HAL_RCC_OscConfig+0x77c>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4a37      	ldr	r2, [pc, #220]	; (8002194 <HAL_RCC_OscConfig+0x780>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c8:	431a      	orrs	r2, r3
 80020ca:	4b31      	ldr	r3, [pc, #196]	; (8002190 <HAL_RCC_OscConfig+0x77c>)
 80020cc:	430a      	orrs	r2, r1
 80020ce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d0:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <HAL_RCC_OscConfig+0x77c>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b2e      	ldr	r3, [pc, #184]	; (8002190 <HAL_RCC_OscConfig+0x77c>)
 80020d6:	2180      	movs	r1, #128	; 0x80
 80020d8:	0449      	lsls	r1, r1, #17
 80020da:	430a      	orrs	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020de:	f7fe fccf 	bl	8000a80 <HAL_GetTick>
 80020e2:	0003      	movs	r3, r0
 80020e4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e8:	f7fe fcca 	bl	8000a80 <HAL_GetTick>
 80020ec:	0002      	movs	r2, r0
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e045      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80020fa:	4b25      	ldr	r3, [pc, #148]	; (8002190 <HAL_RCC_OscConfig+0x77c>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	049b      	lsls	r3, r3, #18
 8002102:	4013      	ands	r3, r2
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x6d4>
 8002106:	e03d      	b.n	8002184 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002108:	4b21      	ldr	r3, [pc, #132]	; (8002190 <HAL_RCC_OscConfig+0x77c>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b20      	ldr	r3, [pc, #128]	; (8002190 <HAL_RCC_OscConfig+0x77c>)
 800210e:	4922      	ldr	r1, [pc, #136]	; (8002198 <HAL_RCC_OscConfig+0x784>)
 8002110:	400a      	ands	r2, r1
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7fe fcb4 	bl	8000a80 <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211e:	f7fe fcaf 	bl	8000a80 <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e02a      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002130:	4b17      	ldr	r3, [pc, #92]	; (8002190 <HAL_RCC_OscConfig+0x77c>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	049b      	lsls	r3, r3, #18
 8002138:	4013      	ands	r3, r2
 800213a:	d1f0      	bne.n	800211e <HAL_RCC_OscConfig+0x70a>
 800213c:	e022      	b.n	8002184 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e01d      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800214a:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_RCC_OscConfig+0x77c>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002150:	69fa      	ldr	r2, [r7, #28]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	025b      	lsls	r3, r3, #9
 8002156:	401a      	ands	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	429a      	cmp	r2, r3
 800215e:	d10f      	bne.n	8002180 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002160:	69fa      	ldr	r2, [r7, #28]
 8002162:	23f0      	movs	r3, #240	; 0xf0
 8002164:	039b      	lsls	r3, r3, #14
 8002166:	401a      	ands	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d107      	bne.n	8002180 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	23c0      	movs	r3, #192	; 0xc0
 8002174:	041b      	lsls	r3, r3, #16
 8002176:	401a      	ands	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	0018      	movs	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	b00a      	add	sp, #40	; 0x28
 800218c:	bdb0      	pop	{r4, r5, r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	40021000 	.word	0x40021000
 8002194:	ff02ffff 	.word	0xff02ffff
 8002198:	feffffff 	.word	0xfeffffff

0800219c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800219c:	b5b0      	push	{r4, r5, r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e128      	b.n	8002402 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021b0:	4b96      	ldr	r3, [pc, #600]	; (800240c <HAL_RCC_ClockConfig+0x270>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2201      	movs	r2, #1
 80021b6:	4013      	ands	r3, r2
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d91e      	bls.n	80021fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b93      	ldr	r3, [pc, #588]	; (800240c <HAL_RCC_ClockConfig+0x270>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2201      	movs	r2, #1
 80021c4:	4393      	bics	r3, r2
 80021c6:	0019      	movs	r1, r3
 80021c8:	4b90      	ldr	r3, [pc, #576]	; (800240c <HAL_RCC_ClockConfig+0x270>)
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021d0:	f7fe fc56 	bl	8000a80 <HAL_GetTick>
 80021d4:	0003      	movs	r3, r0
 80021d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d8:	e009      	b.n	80021ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021da:	f7fe fc51 	bl	8000a80 <HAL_GetTick>
 80021de:	0002      	movs	r2, r0
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	4a8a      	ldr	r2, [pc, #552]	; (8002410 <HAL_RCC_ClockConfig+0x274>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e109      	b.n	8002402 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	4b87      	ldr	r3, [pc, #540]	; (800240c <HAL_RCC_ClockConfig+0x270>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2201      	movs	r2, #1
 80021f4:	4013      	ands	r3, r2
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d1ee      	bne.n	80021da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2202      	movs	r2, #2
 8002202:	4013      	ands	r3, r2
 8002204:	d009      	beq.n	800221a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002206:	4b83      	ldr	r3, [pc, #524]	; (8002414 <HAL_RCC_ClockConfig+0x278>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	22f0      	movs	r2, #240	; 0xf0
 800220c:	4393      	bics	r3, r2
 800220e:	0019      	movs	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	4b7f      	ldr	r3, [pc, #508]	; (8002414 <HAL_RCC_ClockConfig+0x278>)
 8002216:	430a      	orrs	r2, r1
 8002218:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2201      	movs	r2, #1
 8002220:	4013      	ands	r3, r2
 8002222:	d100      	bne.n	8002226 <HAL_RCC_ClockConfig+0x8a>
 8002224:	e089      	b.n	800233a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d107      	bne.n	800223e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800222e:	4b79      	ldr	r3, [pc, #484]	; (8002414 <HAL_RCC_ClockConfig+0x278>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	029b      	lsls	r3, r3, #10
 8002236:	4013      	ands	r3, r2
 8002238:	d120      	bne.n	800227c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e0e1      	b.n	8002402 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d107      	bne.n	8002256 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002246:	4b73      	ldr	r3, [pc, #460]	; (8002414 <HAL_RCC_ClockConfig+0x278>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	2380      	movs	r3, #128	; 0x80
 800224c:	049b      	lsls	r3, r3, #18
 800224e:	4013      	ands	r3, r2
 8002250:	d114      	bne.n	800227c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e0d5      	b.n	8002402 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d106      	bne.n	800226c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800225e:	4b6d      	ldr	r3, [pc, #436]	; (8002414 <HAL_RCC_ClockConfig+0x278>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2204      	movs	r2, #4
 8002264:	4013      	ands	r3, r2
 8002266:	d109      	bne.n	800227c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0ca      	b.n	8002402 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800226c:	4b69      	ldr	r3, [pc, #420]	; (8002414 <HAL_RCC_ClockConfig+0x278>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4013      	ands	r3, r2
 8002276:	d101      	bne.n	800227c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0c2      	b.n	8002402 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800227c:	4b65      	ldr	r3, [pc, #404]	; (8002414 <HAL_RCC_ClockConfig+0x278>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2203      	movs	r2, #3
 8002282:	4393      	bics	r3, r2
 8002284:	0019      	movs	r1, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	4b62      	ldr	r3, [pc, #392]	; (8002414 <HAL_RCC_ClockConfig+0x278>)
 800228c:	430a      	orrs	r2, r1
 800228e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002290:	f7fe fbf6 	bl	8000a80 <HAL_GetTick>
 8002294:	0003      	movs	r3, r0
 8002296:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d111      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022a0:	e009      	b.n	80022b6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a2:	f7fe fbed 	bl	8000a80 <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	4a58      	ldr	r2, [pc, #352]	; (8002410 <HAL_RCC_ClockConfig+0x274>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e0a5      	b.n	8002402 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022b6:	4b57      	ldr	r3, [pc, #348]	; (8002414 <HAL_RCC_ClockConfig+0x278>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	220c      	movs	r2, #12
 80022bc:	4013      	ands	r3, r2
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d1ef      	bne.n	80022a2 <HAL_RCC_ClockConfig+0x106>
 80022c2:	e03a      	b.n	800233a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d111      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022cc:	e009      	b.n	80022e2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ce:	f7fe fbd7 	bl	8000a80 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	4a4d      	ldr	r2, [pc, #308]	; (8002410 <HAL_RCC_ClockConfig+0x274>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e08f      	b.n	8002402 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e2:	4b4c      	ldr	r3, [pc, #304]	; (8002414 <HAL_RCC_ClockConfig+0x278>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	220c      	movs	r2, #12
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b0c      	cmp	r3, #12
 80022ec:	d1ef      	bne.n	80022ce <HAL_RCC_ClockConfig+0x132>
 80022ee:	e024      	b.n	800233a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d11b      	bne.n	8002330 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f8:	e009      	b.n	800230e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fa:	f7fe fbc1 	bl	8000a80 <HAL_GetTick>
 80022fe:	0002      	movs	r2, r0
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	4a42      	ldr	r2, [pc, #264]	; (8002410 <HAL_RCC_ClockConfig+0x274>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e079      	b.n	8002402 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800230e:	4b41      	ldr	r3, [pc, #260]	; (8002414 <HAL_RCC_ClockConfig+0x278>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	220c      	movs	r2, #12
 8002314:	4013      	ands	r3, r2
 8002316:	2b04      	cmp	r3, #4
 8002318:	d1ef      	bne.n	80022fa <HAL_RCC_ClockConfig+0x15e>
 800231a:	e00e      	b.n	800233a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231c:	f7fe fbb0 	bl	8000a80 <HAL_GetTick>
 8002320:	0002      	movs	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	4a3a      	ldr	r2, [pc, #232]	; (8002410 <HAL_RCC_ClockConfig+0x274>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e068      	b.n	8002402 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002330:	4b38      	ldr	r3, [pc, #224]	; (8002414 <HAL_RCC_ClockConfig+0x278>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	220c      	movs	r2, #12
 8002336:	4013      	ands	r3, r2
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800233a:	4b34      	ldr	r3, [pc, #208]	; (800240c <HAL_RCC_ClockConfig+0x270>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2201      	movs	r2, #1
 8002340:	4013      	ands	r3, r2
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d21e      	bcs.n	8002386 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002348:	4b30      	ldr	r3, [pc, #192]	; (800240c <HAL_RCC_ClockConfig+0x270>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2201      	movs	r2, #1
 800234e:	4393      	bics	r3, r2
 8002350:	0019      	movs	r1, r3
 8002352:	4b2e      	ldr	r3, [pc, #184]	; (800240c <HAL_RCC_ClockConfig+0x270>)
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800235a:	f7fe fb91 	bl	8000a80 <HAL_GetTick>
 800235e:	0003      	movs	r3, r0
 8002360:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	e009      	b.n	8002378 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002364:	f7fe fb8c 	bl	8000a80 <HAL_GetTick>
 8002368:	0002      	movs	r2, r0
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	4a28      	ldr	r2, [pc, #160]	; (8002410 <HAL_RCC_ClockConfig+0x274>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e044      	b.n	8002402 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <HAL_RCC_ClockConfig+0x270>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2201      	movs	r2, #1
 800237e:	4013      	ands	r3, r2
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d1ee      	bne.n	8002364 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2204      	movs	r2, #4
 800238c:	4013      	ands	r3, r2
 800238e:	d009      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002390:	4b20      	ldr	r3, [pc, #128]	; (8002414 <HAL_RCC_ClockConfig+0x278>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4a20      	ldr	r2, [pc, #128]	; (8002418 <HAL_RCC_ClockConfig+0x27c>)
 8002396:	4013      	ands	r3, r2
 8002398:	0019      	movs	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <HAL_RCC_ClockConfig+0x278>)
 80023a0:	430a      	orrs	r2, r1
 80023a2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2208      	movs	r2, #8
 80023aa:	4013      	ands	r3, r2
 80023ac:	d00a      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ae:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_RCC_ClockConfig+0x278>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	4a1a      	ldr	r2, [pc, #104]	; (800241c <HAL_RCC_ClockConfig+0x280>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	00da      	lsls	r2, r3, #3
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_RCC_ClockConfig+0x278>)
 80023c0:	430a      	orrs	r2, r1
 80023c2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023c4:	f000 f832 	bl	800242c <HAL_RCC_GetSysClockFreq>
 80023c8:	0001      	movs	r1, r0
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_RCC_ClockConfig+0x278>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	220f      	movs	r2, #15
 80023d2:	4013      	ands	r3, r2
 80023d4:	4a12      	ldr	r2, [pc, #72]	; (8002420 <HAL_RCC_ClockConfig+0x284>)
 80023d6:	5cd3      	ldrb	r3, [r2, r3]
 80023d8:	000a      	movs	r2, r1
 80023da:	40da      	lsrs	r2, r3
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <HAL_RCC_ClockConfig+0x288>)
 80023de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_RCC_ClockConfig+0x28c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	250b      	movs	r5, #11
 80023e6:	197c      	adds	r4, r7, r5
 80023e8:	0018      	movs	r0, r3
 80023ea:	f7fe fb03 	bl	80009f4 <HAL_InitTick>
 80023ee:	0003      	movs	r3, r0
 80023f0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80023f2:	197b      	adds	r3, r7, r5
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80023fa:	197b      	adds	r3, r7, r5
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	e000      	b.n	8002402 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	0018      	movs	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	b004      	add	sp, #16
 8002408:	bdb0      	pop	{r4, r5, r7, pc}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	40022000 	.word	0x40022000
 8002410:	00001388 	.word	0x00001388
 8002414:	40021000 	.word	0x40021000
 8002418:	fffff8ff 	.word	0xfffff8ff
 800241c:	ffffc7ff 	.word	0xffffc7ff
 8002420:	08003374 	.word	0x08003374
 8002424:	20000000 	.word	0x20000000
 8002428:	20000004 	.word	0x20000004

0800242c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800242c:	b5b0      	push	{r4, r5, r7, lr}
 800242e:	b08e      	sub	sp, #56	; 0x38
 8002430:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002432:	4b4c      	ldr	r3, [pc, #304]	; (8002564 <HAL_RCC_GetSysClockFreq+0x138>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800243a:	230c      	movs	r3, #12
 800243c:	4013      	ands	r3, r2
 800243e:	2b0c      	cmp	r3, #12
 8002440:	d014      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x40>
 8002442:	d900      	bls.n	8002446 <HAL_RCC_GetSysClockFreq+0x1a>
 8002444:	e07b      	b.n	800253e <HAL_RCC_GetSysClockFreq+0x112>
 8002446:	2b04      	cmp	r3, #4
 8002448:	d002      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x24>
 800244a:	2b08      	cmp	r3, #8
 800244c:	d00b      	beq.n	8002466 <HAL_RCC_GetSysClockFreq+0x3a>
 800244e:	e076      	b.n	800253e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002450:	4b44      	ldr	r3, [pc, #272]	; (8002564 <HAL_RCC_GetSysClockFreq+0x138>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2210      	movs	r2, #16
 8002456:	4013      	ands	r3, r2
 8002458:	d002      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800245a:	4b43      	ldr	r3, [pc, #268]	; (8002568 <HAL_RCC_GetSysClockFreq+0x13c>)
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800245e:	e07c      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002460:	4b42      	ldr	r3, [pc, #264]	; (800256c <HAL_RCC_GetSysClockFreq+0x140>)
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002464:	e079      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002466:	4b42      	ldr	r3, [pc, #264]	; (8002570 <HAL_RCC_GetSysClockFreq+0x144>)
 8002468:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800246a:	e076      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	0c9a      	lsrs	r2, r3, #18
 8002470:	230f      	movs	r3, #15
 8002472:	401a      	ands	r2, r3
 8002474:	4b3f      	ldr	r3, [pc, #252]	; (8002574 <HAL_RCC_GetSysClockFreq+0x148>)
 8002476:	5c9b      	ldrb	r3, [r3, r2]
 8002478:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247c:	0d9a      	lsrs	r2, r3, #22
 800247e:	2303      	movs	r3, #3
 8002480:	4013      	ands	r3, r2
 8002482:	3301      	adds	r3, #1
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002486:	4b37      	ldr	r3, [pc, #220]	; (8002564 <HAL_RCC_GetSysClockFreq+0x138>)
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	025b      	lsls	r3, r3, #9
 800248e:	4013      	ands	r3, r2
 8002490:	d01a      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	4a35      	ldr	r2, [pc, #212]	; (8002570 <HAL_RCC_GetSysClockFreq+0x144>)
 800249c:	2300      	movs	r3, #0
 800249e:	69b8      	ldr	r0, [r7, #24]
 80024a0:	69f9      	ldr	r1, [r7, #28]
 80024a2:	f7fd fedd 	bl	8000260 <__aeabi_lmul>
 80024a6:	0002      	movs	r2, r0
 80024a8:	000b      	movs	r3, r1
 80024aa:	0010      	movs	r0, r2
 80024ac:	0019      	movs	r1, r3
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f7fd feb1 	bl	8000220 <__aeabi_uldivmod>
 80024be:	0002      	movs	r2, r0
 80024c0:	000b      	movs	r3, r1
 80024c2:	0013      	movs	r3, r2
 80024c4:	637b      	str	r3, [r7, #52]	; 0x34
 80024c6:	e037      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80024c8:	4b26      	ldr	r3, [pc, #152]	; (8002564 <HAL_RCC_GetSysClockFreq+0x138>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2210      	movs	r2, #16
 80024ce:	4013      	ands	r3, r2
 80024d0:	d01a      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80024d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4a23      	ldr	r2, [pc, #140]	; (8002568 <HAL_RCC_GetSysClockFreq+0x13c>)
 80024dc:	2300      	movs	r3, #0
 80024de:	68b8      	ldr	r0, [r7, #8]
 80024e0:	68f9      	ldr	r1, [r7, #12]
 80024e2:	f7fd febd 	bl	8000260 <__aeabi_lmul>
 80024e6:	0002      	movs	r2, r0
 80024e8:	000b      	movs	r3, r1
 80024ea:	0010      	movs	r0, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f7fd fe91 	bl	8000220 <__aeabi_uldivmod>
 80024fe:	0002      	movs	r2, r0
 8002500:	000b      	movs	r3, r1
 8002502:	0013      	movs	r3, r2
 8002504:	637b      	str	r3, [r7, #52]	; 0x34
 8002506:	e017      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250a:	0018      	movs	r0, r3
 800250c:	2300      	movs	r3, #0
 800250e:	0019      	movs	r1, r3
 8002510:	4a16      	ldr	r2, [pc, #88]	; (800256c <HAL_RCC_GetSysClockFreq+0x140>)
 8002512:	2300      	movs	r3, #0
 8002514:	f7fd fea4 	bl	8000260 <__aeabi_lmul>
 8002518:	0002      	movs	r2, r0
 800251a:	000b      	movs	r3, r1
 800251c:	0010      	movs	r0, r2
 800251e:	0019      	movs	r1, r3
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	001c      	movs	r4, r3
 8002524:	2300      	movs	r3, #0
 8002526:	001d      	movs	r5, r3
 8002528:	0022      	movs	r2, r4
 800252a:	002b      	movs	r3, r5
 800252c:	f7fd fe78 	bl	8000220 <__aeabi_uldivmod>
 8002530:	0002      	movs	r2, r0
 8002532:	000b      	movs	r3, r1
 8002534:	0013      	movs	r3, r2
 8002536:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800253c:	e00d      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <HAL_RCC_GetSysClockFreq+0x138>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	0b5b      	lsrs	r3, r3, #13
 8002544:	2207      	movs	r2, #7
 8002546:	4013      	ands	r3, r2
 8002548:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	3301      	adds	r3, #1
 800254e:	2280      	movs	r2, #128	; 0x80
 8002550:	0212      	lsls	r2, r2, #8
 8002552:	409a      	lsls	r2, r3
 8002554:	0013      	movs	r3, r2
 8002556:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002558:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b00e      	add	sp, #56	; 0x38
 8002562:	bdb0      	pop	{r4, r5, r7, pc}
 8002564:	40021000 	.word	0x40021000
 8002568:	003d0900 	.word	0x003d0900
 800256c:	00f42400 	.word	0x00f42400
 8002570:	007a1200 	.word	0x007a1200
 8002574:	0800338c 	.word	0x0800338c

08002578 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800257c:	4b02      	ldr	r3, [pc, #8]	; (8002588 <HAL_RCC_GetHCLKFreq+0x10>)
 800257e:	681b      	ldr	r3, [r3, #0]
}
 8002580:	0018      	movs	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	20000000 	.word	0x20000000

0800258c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002590:	f7ff fff2 	bl	8002578 <HAL_RCC_GetHCLKFreq>
 8002594:	0001      	movs	r1, r0
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	0a1b      	lsrs	r3, r3, #8
 800259c:	2207      	movs	r2, #7
 800259e:	4013      	ands	r3, r2
 80025a0:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025a2:	5cd3      	ldrb	r3, [r2, r3]
 80025a4:	40d9      	lsrs	r1, r3
 80025a6:	000b      	movs	r3, r1
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	40021000 	.word	0x40021000
 80025b4:	08003384 	.word	0x08003384

080025b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025bc:	f7ff ffdc 	bl	8002578 <HAL_RCC_GetHCLKFreq>
 80025c0:	0001      	movs	r1, r0
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	0adb      	lsrs	r3, r3, #11
 80025c8:	2207      	movs	r2, #7
 80025ca:	4013      	ands	r3, r2
 80025cc:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025ce:	5cd3      	ldrb	r3, [r2, r3]
 80025d0:	40d9      	lsrs	r1, r3
 80025d2:	000b      	movs	r3, r1
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	40021000 	.word	0x40021000
 80025e0:	08003384 	.word	0x08003384

080025e4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80025ec:	2317      	movs	r3, #23
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2220      	movs	r2, #32
 80025fa:	4013      	ands	r3, r2
 80025fc:	d106      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	4013      	ands	r3, r2
 8002608:	d100      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800260a:	e104      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260c:	4bb1      	ldr	r3, [pc, #708]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800260e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	055b      	lsls	r3, r3, #21
 8002614:	4013      	ands	r3, r2
 8002616:	d10a      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002618:	4bae      	ldr	r3, [pc, #696]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800261a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800261c:	4bad      	ldr	r3, [pc, #692]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	0549      	lsls	r1, r1, #21
 8002622:	430a      	orrs	r2, r1
 8002624:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002626:	2317      	movs	r3, #23
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262e:	4baa      	ldr	r3, [pc, #680]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4013      	ands	r3, r2
 8002638:	d11a      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800263a:	4ba7      	ldr	r3, [pc, #668]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4ba6      	ldr	r3, [pc, #664]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002640:	2180      	movs	r1, #128	; 0x80
 8002642:	0049      	lsls	r1, r1, #1
 8002644:	430a      	orrs	r2, r1
 8002646:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002648:	f7fe fa1a 	bl	8000a80 <HAL_GetTick>
 800264c:	0003      	movs	r3, r0
 800264e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	e008      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002652:	f7fe fa15 	bl	8000a80 <HAL_GetTick>
 8002656:	0002      	movs	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b64      	cmp	r3, #100	; 0x64
 800265e:	d901      	bls.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e133      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002664:	4b9c      	ldr	r3, [pc, #624]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4013      	ands	r3, r2
 800266e:	d0f0      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002670:	4b98      	ldr	r3, [pc, #608]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	23c0      	movs	r3, #192	; 0xc0
 8002676:	039b      	lsls	r3, r3, #14
 8002678:	4013      	ands	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	23c0      	movs	r3, #192	; 0xc0
 8002682:	039b      	lsls	r3, r3, #14
 8002684:	4013      	ands	r3, r2
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	429a      	cmp	r2, r3
 800268a:	d107      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	23c0      	movs	r3, #192	; 0xc0
 8002692:	039b      	lsls	r3, r3, #14
 8002694:	4013      	ands	r3, r2
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	429a      	cmp	r2, r3
 800269a:	d013      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	23c0      	movs	r3, #192	; 0xc0
 80026a2:	029b      	lsls	r3, r3, #10
 80026a4:	401a      	ands	r2, r3
 80026a6:	23c0      	movs	r3, #192	; 0xc0
 80026a8:	029b      	lsls	r3, r3, #10
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d10a      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80026ae:	4b89      	ldr	r3, [pc, #548]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	029b      	lsls	r3, r3, #10
 80026b6:	401a      	ands	r2, r3
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	029b      	lsls	r3, r3, #10
 80026bc:	429a      	cmp	r2, r3
 80026be:	d101      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e103      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80026c4:	4b83      	ldr	r3, [pc, #524]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026c8:	23c0      	movs	r3, #192	; 0xc0
 80026ca:	029b      	lsls	r3, r3, #10
 80026cc:	4013      	ands	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d049      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	23c0      	movs	r3, #192	; 0xc0
 80026dc:	029b      	lsls	r3, r3, #10
 80026de:	4013      	ands	r3, r2
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d004      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2220      	movs	r2, #32
 80026ec:	4013      	ands	r3, r2
 80026ee:	d10d      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	23c0      	movs	r3, #192	; 0xc0
 80026f6:	029b      	lsls	r3, r3, #10
 80026f8:	4013      	ands	r3, r2
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d034      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	4013      	ands	r3, r2
 800270a:	d02e      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800270c:	4b71      	ldr	r3, [pc, #452]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800270e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002710:	4a72      	ldr	r2, [pc, #456]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002712:	4013      	ands	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002716:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002718:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800271a:	4b6e      	ldr	r3, [pc, #440]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800271c:	2180      	movs	r1, #128	; 0x80
 800271e:	0309      	lsls	r1, r1, #12
 8002720:	430a      	orrs	r2, r1
 8002722:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002724:	4b6b      	ldr	r3, [pc, #428]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002726:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002728:	4b6a      	ldr	r3, [pc, #424]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800272a:	496d      	ldr	r1, [pc, #436]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800272c:	400a      	ands	r2, r1
 800272e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002730:	4b68      	ldr	r3, [pc, #416]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4013      	ands	r3, r2
 800273e:	d014      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7fe f99e 	bl	8000a80 <HAL_GetTick>
 8002744:	0003      	movs	r3, r0
 8002746:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002748:	e009      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800274a:	f7fe f999 	bl	8000a80 <HAL_GetTick>
 800274e:	0002      	movs	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	4a63      	ldr	r2, [pc, #396]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e0b6      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800275e:	4b5d      	ldr	r3, [pc, #372]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4013      	ands	r3, r2
 8002768:	d0ef      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	4013      	ands	r3, r2
 8002774:	d01f      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	23c0      	movs	r3, #192	; 0xc0
 800277c:	029b      	lsls	r3, r3, #10
 800277e:	401a      	ands	r2, r3
 8002780:	23c0      	movs	r3, #192	; 0xc0
 8002782:	029b      	lsls	r3, r3, #10
 8002784:	429a      	cmp	r2, r3
 8002786:	d10c      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002788:	4b52      	ldr	r3, [pc, #328]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a56      	ldr	r2, [pc, #344]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800278e:	4013      	ands	r3, r2
 8002790:	0019      	movs	r1, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	23c0      	movs	r3, #192	; 0xc0
 8002798:	039b      	lsls	r3, r3, #14
 800279a:	401a      	ands	r2, r3
 800279c:	4b4d      	ldr	r3, [pc, #308]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800279e:	430a      	orrs	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	4b4c      	ldr	r3, [pc, #304]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	23c0      	movs	r3, #192	; 0xc0
 80027ac:	029b      	lsls	r3, r3, #10
 80027ae:	401a      	ands	r2, r3
 80027b0:	4b48      	ldr	r3, [pc, #288]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027b2:	430a      	orrs	r2, r1
 80027b4:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2220      	movs	r2, #32
 80027bc:	4013      	ands	r3, r2
 80027be:	d01f      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	23c0      	movs	r3, #192	; 0xc0
 80027c6:	029b      	lsls	r3, r3, #10
 80027c8:	401a      	ands	r2, r3
 80027ca:	23c0      	movs	r3, #192	; 0xc0
 80027cc:	029b      	lsls	r3, r3, #10
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d10c      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x208>
 80027d2:	4b40      	ldr	r3, [pc, #256]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a44      	ldr	r2, [pc, #272]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027d8:	4013      	ands	r3, r2
 80027da:	0019      	movs	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	23c0      	movs	r3, #192	; 0xc0
 80027e2:	039b      	lsls	r3, r3, #14
 80027e4:	401a      	ands	r2, r3
 80027e6:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027e8:	430a      	orrs	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	4b39      	ldr	r3, [pc, #228]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027ee:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	23c0      	movs	r3, #192	; 0xc0
 80027f6:	029b      	lsls	r3, r3, #10
 80027f8:	401a      	ands	r2, r3
 80027fa:	4b36      	ldr	r3, [pc, #216]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027fc:	430a      	orrs	r2, r1
 80027fe:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002800:	2317      	movs	r3, #23
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d105      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280a:	4b32      	ldr	r3, [pc, #200]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800280c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800280e:	4b31      	ldr	r3, [pc, #196]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002810:	4936      	ldr	r1, [pc, #216]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002812:	400a      	ands	r2, r1
 8002814:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2201      	movs	r2, #1
 800281c:	4013      	ands	r3, r2
 800281e:	d009      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002820:	4b2c      	ldr	r3, [pc, #176]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002824:	2203      	movs	r2, #3
 8002826:	4393      	bics	r3, r2
 8002828:	0019      	movs	r1, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	4b29      	ldr	r3, [pc, #164]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002830:	430a      	orrs	r2, r1
 8002832:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2202      	movs	r2, #2
 800283a:	4013      	ands	r3, r2
 800283c:	d009      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800283e:	4b25      	ldr	r3, [pc, #148]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002842:	220c      	movs	r2, #12
 8002844:	4393      	bics	r3, r2
 8002846:	0019      	movs	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	4b21      	ldr	r3, [pc, #132]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800284e:	430a      	orrs	r2, r1
 8002850:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2204      	movs	r2, #4
 8002858:	4013      	ands	r3, r2
 800285a:	d009      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800285c:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800285e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002860:	4a23      	ldr	r2, [pc, #140]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8002862:	4013      	ands	r3, r2
 8002864:	0019      	movs	r1, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800286c:	430a      	orrs	r2, r1
 800286e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2208      	movs	r2, #8
 8002876:	4013      	ands	r3, r2
 8002878:	d009      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800287a:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800287c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287e:	4a1d      	ldr	r2, [pc, #116]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002880:	4013      	ands	r3, r2
 8002882:	0019      	movs	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699a      	ldr	r2, [r3, #24]
 8002888:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800288a:	430a      	orrs	r2, r1
 800288c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2240      	movs	r2, #64	; 0x40
 8002894:	4013      	ands	r3, r2
 8002896:	d009      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002898:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800289a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289c:	4a16      	ldr	r2, [pc, #88]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800289e:	4013      	ands	r3, r2
 80028a0:	0019      	movs	r1, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1a      	ldr	r2, [r3, #32]
 80028a6:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028a8:	430a      	orrs	r2, r1
 80028aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2280      	movs	r2, #128	; 0x80
 80028b2:	4013      	ands	r3, r2
 80028b4:	d009      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ba:	4a10      	ldr	r2, [pc, #64]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80028bc:	4013      	ands	r3, r2
 80028be:	0019      	movs	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69da      	ldr	r2, [r3, #28]
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028c6:	430a      	orrs	r2, r1
 80028c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	0018      	movs	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b006      	add	sp, #24
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40007000 	.word	0x40007000
 80028dc:	fffcffff 	.word	0xfffcffff
 80028e0:	fff7ffff 	.word	0xfff7ffff
 80028e4:	00001388 	.word	0x00001388
 80028e8:	ffcfffff 	.word	0xffcfffff
 80028ec:	efffffff 	.word	0xefffffff
 80028f0:	fffff3ff 	.word	0xfffff3ff
 80028f4:	ffffcfff 	.word	0xffffcfff
 80028f8:	fbffffff 	.word	0xfbffffff
 80028fc:	fff3ffff 	.word	0xfff3ffff

08002900 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e044      	b.n	800299c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d107      	bne.n	800292a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2278      	movs	r2, #120	; 0x78
 800291e:	2100      	movs	r1, #0
 8002920:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	0018      	movs	r0, r3
 8002926:	f7fd ffad 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2224      	movs	r2, #36	; 0x24
 800292e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2101      	movs	r1, #1
 800293c:	438a      	bics	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	0018      	movs	r0, r3
 8002944:	f000 f830 	bl	80029a8 <UART_SetConfig>
 8002948:	0003      	movs	r3, r0
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e024      	b.n	800299c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	0018      	movs	r0, r3
 800295e:	f000 faa7 	bl	8002eb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	490d      	ldr	r1, [pc, #52]	; (80029a4 <HAL_UART_Init+0xa4>)
 800296e:	400a      	ands	r2, r1
 8002970:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	212a      	movs	r1, #42	; 0x2a
 800297e:	438a      	bics	r2, r1
 8002980:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2101      	movs	r1, #1
 800298e:	430a      	orrs	r2, r1
 8002990:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	0018      	movs	r0, r3
 8002996:	f000 fb3f 	bl	8003018 <UART_CheckIdleState>
 800299a:	0003      	movs	r3, r0
}
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	b002      	add	sp, #8
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	ffffb7ff 	.word	0xffffb7ff

080029a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029a8:	b5b0      	push	{r4, r5, r7, lr}
 80029aa:	b08e      	sub	sp, #56	; 0x38
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029b0:	231a      	movs	r3, #26
 80029b2:	2218      	movs	r2, #24
 80029b4:	189b      	adds	r3, r3, r2
 80029b6:	19db      	adds	r3, r3, r7
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4ac6      	ldr	r2, [pc, #792]	; (8002cf4 <UART_SetConfig+0x34c>)
 80029dc:	4013      	ands	r3, r2
 80029de:	0019      	movs	r1, r3
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029e6:	430a      	orrs	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4ac1      	ldr	r2, [pc, #772]	; (8002cf8 <UART_SetConfig+0x350>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	0019      	movs	r1, r3
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4abb      	ldr	r2, [pc, #748]	; (8002cfc <UART_SetConfig+0x354>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d004      	beq.n	8002a1c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	4ab7      	ldr	r2, [pc, #732]	; (8002d00 <UART_SetConfig+0x358>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	0019      	movs	r1, r3
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4ab3      	ldr	r2, [pc, #716]	; (8002d04 <UART_SetConfig+0x35c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d131      	bne.n	8002aa0 <UART_SetConfig+0xf8>
 8002a3c:	4bb2      	ldr	r3, [pc, #712]	; (8002d08 <UART_SetConfig+0x360>)
 8002a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a40:	2203      	movs	r2, #3
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d01d      	beq.n	8002a84 <UART_SetConfig+0xdc>
 8002a48:	d823      	bhi.n	8002a92 <UART_SetConfig+0xea>
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d00c      	beq.n	8002a68 <UART_SetConfig+0xc0>
 8002a4e:	d820      	bhi.n	8002a92 <UART_SetConfig+0xea>
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <UART_SetConfig+0xb2>
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d00e      	beq.n	8002a76 <UART_SetConfig+0xce>
 8002a58:	e01b      	b.n	8002a92 <UART_SetConfig+0xea>
 8002a5a:	231b      	movs	r3, #27
 8002a5c:	2218      	movs	r2, #24
 8002a5e:	189b      	adds	r3, r3, r2
 8002a60:	19db      	adds	r3, r3, r7
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
 8002a66:	e09c      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002a68:	231b      	movs	r3, #27
 8002a6a:	2218      	movs	r2, #24
 8002a6c:	189b      	adds	r3, r3, r2
 8002a6e:	19db      	adds	r3, r3, r7
 8002a70:	2202      	movs	r2, #2
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e095      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002a76:	231b      	movs	r3, #27
 8002a78:	2218      	movs	r2, #24
 8002a7a:	189b      	adds	r3, r3, r2
 8002a7c:	19db      	adds	r3, r3, r7
 8002a7e:	2204      	movs	r2, #4
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	e08e      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002a84:	231b      	movs	r3, #27
 8002a86:	2218      	movs	r2, #24
 8002a88:	189b      	adds	r3, r3, r2
 8002a8a:	19db      	adds	r3, r3, r7
 8002a8c:	2208      	movs	r2, #8
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	e087      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002a92:	231b      	movs	r3, #27
 8002a94:	2218      	movs	r2, #24
 8002a96:	189b      	adds	r3, r3, r2
 8002a98:	19db      	adds	r3, r3, r7
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	e080      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a99      	ldr	r2, [pc, #612]	; (8002d0c <UART_SetConfig+0x364>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d131      	bne.n	8002b0e <UART_SetConfig+0x166>
 8002aaa:	4b97      	ldr	r3, [pc, #604]	; (8002d08 <UART_SetConfig+0x360>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	220c      	movs	r2, #12
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b0c      	cmp	r3, #12
 8002ab4:	d01d      	beq.n	8002af2 <UART_SetConfig+0x14a>
 8002ab6:	d823      	bhi.n	8002b00 <UART_SetConfig+0x158>
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d00c      	beq.n	8002ad6 <UART_SetConfig+0x12e>
 8002abc:	d820      	bhi.n	8002b00 <UART_SetConfig+0x158>
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <UART_SetConfig+0x120>
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d00e      	beq.n	8002ae4 <UART_SetConfig+0x13c>
 8002ac6:	e01b      	b.n	8002b00 <UART_SetConfig+0x158>
 8002ac8:	231b      	movs	r3, #27
 8002aca:	2218      	movs	r2, #24
 8002acc:	189b      	adds	r3, r3, r2
 8002ace:	19db      	adds	r3, r3, r7
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	e065      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002ad6:	231b      	movs	r3, #27
 8002ad8:	2218      	movs	r2, #24
 8002ada:	189b      	adds	r3, r3, r2
 8002adc:	19db      	adds	r3, r3, r7
 8002ade:	2202      	movs	r2, #2
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	e05e      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002ae4:	231b      	movs	r3, #27
 8002ae6:	2218      	movs	r2, #24
 8002ae8:	189b      	adds	r3, r3, r2
 8002aea:	19db      	adds	r3, r3, r7
 8002aec:	2204      	movs	r2, #4
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e057      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002af2:	231b      	movs	r3, #27
 8002af4:	2218      	movs	r2, #24
 8002af6:	189b      	adds	r3, r3, r2
 8002af8:	19db      	adds	r3, r3, r7
 8002afa:	2208      	movs	r2, #8
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	e050      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002b00:	231b      	movs	r3, #27
 8002b02:	2218      	movs	r2, #24
 8002b04:	189b      	adds	r3, r3, r2
 8002b06:	19db      	adds	r3, r3, r7
 8002b08:	2210      	movs	r2, #16
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e049      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a7a      	ldr	r2, [pc, #488]	; (8002cfc <UART_SetConfig+0x354>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d13e      	bne.n	8002b96 <UART_SetConfig+0x1ee>
 8002b18:	4b7b      	ldr	r3, [pc, #492]	; (8002d08 <UART_SetConfig+0x360>)
 8002b1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b1c:	23c0      	movs	r3, #192	; 0xc0
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	4013      	ands	r3, r2
 8002b22:	22c0      	movs	r2, #192	; 0xc0
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d027      	beq.n	8002b7a <UART_SetConfig+0x1d2>
 8002b2a:	22c0      	movs	r2, #192	; 0xc0
 8002b2c:	0112      	lsls	r2, r2, #4
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d82a      	bhi.n	8002b88 <UART_SetConfig+0x1e0>
 8002b32:	2280      	movs	r2, #128	; 0x80
 8002b34:	0112      	lsls	r2, r2, #4
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d011      	beq.n	8002b5e <UART_SetConfig+0x1b6>
 8002b3a:	2280      	movs	r2, #128	; 0x80
 8002b3c:	0112      	lsls	r2, r2, #4
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d822      	bhi.n	8002b88 <UART_SetConfig+0x1e0>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d004      	beq.n	8002b50 <UART_SetConfig+0x1a8>
 8002b46:	2280      	movs	r2, #128	; 0x80
 8002b48:	00d2      	lsls	r2, r2, #3
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00e      	beq.n	8002b6c <UART_SetConfig+0x1c4>
 8002b4e:	e01b      	b.n	8002b88 <UART_SetConfig+0x1e0>
 8002b50:	231b      	movs	r3, #27
 8002b52:	2218      	movs	r2, #24
 8002b54:	189b      	adds	r3, r3, r2
 8002b56:	19db      	adds	r3, r3, r7
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
 8002b5c:	e021      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002b5e:	231b      	movs	r3, #27
 8002b60:	2218      	movs	r2, #24
 8002b62:	189b      	adds	r3, r3, r2
 8002b64:	19db      	adds	r3, r3, r7
 8002b66:	2202      	movs	r2, #2
 8002b68:	701a      	strb	r2, [r3, #0]
 8002b6a:	e01a      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002b6c:	231b      	movs	r3, #27
 8002b6e:	2218      	movs	r2, #24
 8002b70:	189b      	adds	r3, r3, r2
 8002b72:	19db      	adds	r3, r3, r7
 8002b74:	2204      	movs	r2, #4
 8002b76:	701a      	strb	r2, [r3, #0]
 8002b78:	e013      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002b7a:	231b      	movs	r3, #27
 8002b7c:	2218      	movs	r2, #24
 8002b7e:	189b      	adds	r3, r3, r2
 8002b80:	19db      	adds	r3, r3, r7
 8002b82:	2208      	movs	r2, #8
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	e00c      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002b88:	231b      	movs	r3, #27
 8002b8a:	2218      	movs	r2, #24
 8002b8c:	189b      	adds	r3, r3, r2
 8002b8e:	19db      	adds	r3, r3, r7
 8002b90:	2210      	movs	r2, #16
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	e005      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002b96:	231b      	movs	r3, #27
 8002b98:	2218      	movs	r2, #24
 8002b9a:	189b      	adds	r3, r3, r2
 8002b9c:	19db      	adds	r3, r3, r7
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a55      	ldr	r2, [pc, #340]	; (8002cfc <UART_SetConfig+0x354>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d000      	beq.n	8002bae <UART_SetConfig+0x206>
 8002bac:	e084      	b.n	8002cb8 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bae:	231b      	movs	r3, #27
 8002bb0:	2218      	movs	r2, #24
 8002bb2:	189b      	adds	r3, r3, r2
 8002bb4:	19db      	adds	r3, r3, r7
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d01d      	beq.n	8002bf8 <UART_SetConfig+0x250>
 8002bbc:	dc20      	bgt.n	8002c00 <UART_SetConfig+0x258>
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d015      	beq.n	8002bee <UART_SetConfig+0x246>
 8002bc2:	dc1d      	bgt.n	8002c00 <UART_SetConfig+0x258>
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <UART_SetConfig+0x226>
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d005      	beq.n	8002bd8 <UART_SetConfig+0x230>
 8002bcc:	e018      	b.n	8002c00 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bce:	f7ff fcdd 	bl	800258c <HAL_RCC_GetPCLK1Freq>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bd6:	e01c      	b.n	8002c12 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bd8:	4b4b      	ldr	r3, [pc, #300]	; (8002d08 <UART_SetConfig+0x360>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2210      	movs	r2, #16
 8002bde:	4013      	ands	r3, r2
 8002be0:	d002      	beq.n	8002be8 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002be2:	4b4b      	ldr	r3, [pc, #300]	; (8002d10 <UART_SetConfig+0x368>)
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002be6:	e014      	b.n	8002c12 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002be8:	4b4a      	ldr	r3, [pc, #296]	; (8002d14 <UART_SetConfig+0x36c>)
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bec:	e011      	b.n	8002c12 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bee:	f7ff fc1d 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bf6:	e00c      	b.n	8002c12 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bfe:	e008      	b.n	8002c12 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c04:	231a      	movs	r3, #26
 8002c06:	2218      	movs	r2, #24
 8002c08:	189b      	adds	r3, r3, r2
 8002c0a:	19db      	adds	r3, r3, r7
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
        break;
 8002c10:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d100      	bne.n	8002c1a <UART_SetConfig+0x272>
 8002c18:	e132      	b.n	8002e80 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	0013      	movs	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	189b      	adds	r3, r3, r2
 8002c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d305      	bcc.n	8002c36 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d906      	bls.n	8002c44 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002c36:	231a      	movs	r3, #26
 8002c38:	2218      	movs	r2, #24
 8002c3a:	189b      	adds	r3, r3, r2
 8002c3c:	19db      	adds	r3, r3, r7
 8002c3e:	2201      	movs	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	e11d      	b.n	8002e80 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	6939      	ldr	r1, [r7, #16]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	000b      	movs	r3, r1
 8002c52:	0e1b      	lsrs	r3, r3, #24
 8002c54:	0010      	movs	r0, r2
 8002c56:	0205      	lsls	r5, r0, #8
 8002c58:	431d      	orrs	r5, r3
 8002c5a:	000b      	movs	r3, r1
 8002c5c:	021c      	lsls	r4, r3, #8
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	085b      	lsrs	r3, r3, #1
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	68b8      	ldr	r0, [r7, #8]
 8002c6c:	68f9      	ldr	r1, [r7, #12]
 8002c6e:	1900      	adds	r0, r0, r4
 8002c70:	4169      	adcs	r1, r5
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f7fd face 	bl	8000220 <__aeabi_uldivmod>
 8002c84:	0002      	movs	r2, r0
 8002c86:	000b      	movs	r3, r1
 8002c88:	0013      	movs	r3, r2
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c8e:	23c0      	movs	r3, #192	; 0xc0
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d309      	bcc.n	8002caa <UART_SetConfig+0x302>
 8002c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	035b      	lsls	r3, r3, #13
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d204      	bcs.n	8002caa <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ca6:	60da      	str	r2, [r3, #12]
 8002ca8:	e0ea      	b.n	8002e80 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002caa:	231a      	movs	r3, #26
 8002cac:	2218      	movs	r2, #24
 8002cae:	189b      	adds	r3, r3, r2
 8002cb0:	19db      	adds	r3, r3, r7
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	e0e3      	b.n	8002e80 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	69da      	ldr	r2, [r3, #28]
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d000      	beq.n	8002cc6 <UART_SetConfig+0x31e>
 8002cc4:	e085      	b.n	8002dd2 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002cc6:	231b      	movs	r3, #27
 8002cc8:	2218      	movs	r2, #24
 8002cca:	189b      	adds	r3, r3, r2
 8002ccc:	19db      	adds	r3, r3, r7
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d837      	bhi.n	8002d44 <UART_SetConfig+0x39c>
 8002cd4:	009a      	lsls	r2, r3, #2
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <UART_SetConfig+0x370>)
 8002cd8:	18d3      	adds	r3, r2, r3
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cde:	f7ff fc55 	bl	800258c <HAL_RCC_GetPCLK1Freq>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ce6:	e036      	b.n	8002d56 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ce8:	f7ff fc66 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 8002cec:	0003      	movs	r3, r0
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cf0:	e031      	b.n	8002d56 <UART_SetConfig+0x3ae>
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	efff69f3 	.word	0xefff69f3
 8002cf8:	ffffcfff 	.word	0xffffcfff
 8002cfc:	40004800 	.word	0x40004800
 8002d00:	fffff4ff 	.word	0xfffff4ff
 8002d04:	40013800 	.word	0x40013800
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40004400 	.word	0x40004400
 8002d10:	003d0900 	.word	0x003d0900
 8002d14:	00f42400 	.word	0x00f42400
 8002d18:	08003398 	.word	0x08003398
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d1c:	4b60      	ldr	r3, [pc, #384]	; (8002ea0 <UART_SetConfig+0x4f8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2210      	movs	r2, #16
 8002d22:	4013      	ands	r3, r2
 8002d24:	d002      	beq.n	8002d2c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d26:	4b5f      	ldr	r3, [pc, #380]	; (8002ea4 <UART_SetConfig+0x4fc>)
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d2a:	e014      	b.n	8002d56 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002d2c:	4b5e      	ldr	r3, [pc, #376]	; (8002ea8 <UART_SetConfig+0x500>)
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d30:	e011      	b.n	8002d56 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d32:	f7ff fb7b 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8002d36:	0003      	movs	r3, r0
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d3a:	e00c      	b.n	8002d56 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d42:	e008      	b.n	8002d56 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d48:	231a      	movs	r3, #26
 8002d4a:	2218      	movs	r2, #24
 8002d4c:	189b      	adds	r3, r3, r2
 8002d4e:	19db      	adds	r3, r3, r7
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
        break;
 8002d54:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d100      	bne.n	8002d5e <UART_SetConfig+0x3b6>
 8002d5c:	e090      	b.n	8002e80 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d60:	005a      	lsls	r2, r3, #1
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	18d2      	adds	r2, r2, r3
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	0019      	movs	r1, r3
 8002d70:	0010      	movs	r0, r2
 8002d72:	f7fd f9c9 	bl	8000108 <__udivsi3>
 8002d76:	0003      	movs	r3, r0
 8002d78:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	2b0f      	cmp	r3, #15
 8002d7e:	d921      	bls.n	8002dc4 <UART_SetConfig+0x41c>
 8002d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	025b      	lsls	r3, r3, #9
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d21c      	bcs.n	8002dc4 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	200e      	movs	r0, #14
 8002d90:	2418      	movs	r4, #24
 8002d92:	1903      	adds	r3, r0, r4
 8002d94:	19db      	adds	r3, r3, r7
 8002d96:	210f      	movs	r1, #15
 8002d98:	438a      	bics	r2, r1
 8002d9a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	085b      	lsrs	r3, r3, #1
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2207      	movs	r2, #7
 8002da4:	4013      	ands	r3, r2
 8002da6:	b299      	uxth	r1, r3
 8002da8:	1903      	adds	r3, r0, r4
 8002daa:	19db      	adds	r3, r3, r7
 8002dac:	1902      	adds	r2, r0, r4
 8002dae:	19d2      	adds	r2, r2, r7
 8002db0:	8812      	ldrh	r2, [r2, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	1902      	adds	r2, r0, r4
 8002dbc:	19d2      	adds	r2, r2, r7
 8002dbe:	8812      	ldrh	r2, [r2, #0]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	e05d      	b.n	8002e80 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002dc4:	231a      	movs	r3, #26
 8002dc6:	2218      	movs	r2, #24
 8002dc8:	189b      	adds	r3, r3, r2
 8002dca:	19db      	adds	r3, r3, r7
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
 8002dd0:	e056      	b.n	8002e80 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dd2:	231b      	movs	r3, #27
 8002dd4:	2218      	movs	r2, #24
 8002dd6:	189b      	adds	r3, r3, r2
 8002dd8:	19db      	adds	r3, r3, r7
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d822      	bhi.n	8002e26 <UART_SetConfig+0x47e>
 8002de0:	009a      	lsls	r2, r3, #2
 8002de2:	4b32      	ldr	r3, [pc, #200]	; (8002eac <UART_SetConfig+0x504>)
 8002de4:	18d3      	adds	r3, r2, r3
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dea:	f7ff fbcf 	bl	800258c <HAL_RCC_GetPCLK1Freq>
 8002dee:	0003      	movs	r3, r0
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002df2:	e021      	b.n	8002e38 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002df4:	f7ff fbe0 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dfc:	e01c      	b.n	8002e38 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dfe:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <UART_SetConfig+0x4f8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2210      	movs	r2, #16
 8002e04:	4013      	ands	r3, r2
 8002e06:	d002      	beq.n	8002e0e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e08:	4b26      	ldr	r3, [pc, #152]	; (8002ea4 <UART_SetConfig+0x4fc>)
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e0c:	e014      	b.n	8002e38 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002e0e:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <UART_SetConfig+0x500>)
 8002e10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e12:	e011      	b.n	8002e38 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e14:	f7ff fb0a 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e1c:	e00c      	b.n	8002e38 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e24:	e008      	b.n	8002e38 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e2a:	231a      	movs	r3, #26
 8002e2c:	2218      	movs	r2, #24
 8002e2e:	189b      	adds	r3, r3, r2
 8002e30:	19db      	adds	r3, r3, r7
 8002e32:	2201      	movs	r2, #1
 8002e34:	701a      	strb	r2, [r3, #0]
        break;
 8002e36:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d020      	beq.n	8002e80 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	085a      	lsrs	r2, r3, #1
 8002e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e46:	18d2      	adds	r2, r2, r3
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	0010      	movs	r0, r2
 8002e50:	f7fd f95a 	bl	8000108 <__udivsi3>
 8002e54:	0003      	movs	r3, r0
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	2b0f      	cmp	r3, #15
 8002e5c:	d90a      	bls.n	8002e74 <UART_SetConfig+0x4cc>
 8002e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	025b      	lsls	r3, r3, #9
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d205      	bcs.n	8002e74 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	e005      	b.n	8002e80 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002e74:	231a      	movs	r3, #26
 8002e76:	2218      	movs	r2, #24
 8002e78:	189b      	adds	r3, r3, r2
 8002e7a:	19db      	adds	r3, r3, r7
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	2200      	movs	r2, #0
 8002e84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e8c:	231a      	movs	r3, #26
 8002e8e:	2218      	movs	r2, #24
 8002e90:	189b      	adds	r3, r3, r2
 8002e92:	19db      	adds	r3, r3, r7
 8002e94:	781b      	ldrb	r3, [r3, #0]
}
 8002e96:	0018      	movs	r0, r3
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	b00e      	add	sp, #56	; 0x38
 8002e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	003d0900 	.word	0x003d0900
 8002ea8:	00f42400 	.word	0x00f42400
 8002eac:	080033bc 	.word	0x080033bc

08002eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d00b      	beq.n	8002eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4a4a      	ldr	r2, [pc, #296]	; (8002ff4 <UART_AdvFeatureConfig+0x144>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	0019      	movs	r1, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	2202      	movs	r2, #2
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d00b      	beq.n	8002efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	4a43      	ldr	r2, [pc, #268]	; (8002ff8 <UART_AdvFeatureConfig+0x148>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	0019      	movs	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	2204      	movs	r2, #4
 8002f02:	4013      	ands	r3, r2
 8002f04:	d00b      	beq.n	8002f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4a3b      	ldr	r2, [pc, #236]	; (8002ffc <UART_AdvFeatureConfig+0x14c>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	0019      	movs	r1, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	2208      	movs	r2, #8
 8002f24:	4013      	ands	r3, r2
 8002f26:	d00b      	beq.n	8002f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4a34      	ldr	r2, [pc, #208]	; (8003000 <UART_AdvFeatureConfig+0x150>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	0019      	movs	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	2210      	movs	r2, #16
 8002f46:	4013      	ands	r3, r2
 8002f48:	d00b      	beq.n	8002f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4a2c      	ldr	r2, [pc, #176]	; (8003004 <UART_AdvFeatureConfig+0x154>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	0019      	movs	r1, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	2220      	movs	r2, #32
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d00b      	beq.n	8002f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	4a25      	ldr	r2, [pc, #148]	; (8003008 <UART_AdvFeatureConfig+0x158>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	0019      	movs	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	2240      	movs	r2, #64	; 0x40
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d01d      	beq.n	8002fca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4a1d      	ldr	r2, [pc, #116]	; (800300c <UART_AdvFeatureConfig+0x15c>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002faa:	2380      	movs	r3, #128	; 0x80
 8002fac:	035b      	lsls	r3, r3, #13
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d10b      	bne.n	8002fca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4a15      	ldr	r2, [pc, #84]	; (8003010 <UART_AdvFeatureConfig+0x160>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	2280      	movs	r2, #128	; 0x80
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d00b      	beq.n	8002fec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4a0e      	ldr	r2, [pc, #56]	; (8003014 <UART_AdvFeatureConfig+0x164>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]
  }
}
 8002fec:	46c0      	nop			; (mov r8, r8)
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b002      	add	sp, #8
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	fffdffff 	.word	0xfffdffff
 8002ff8:	fffeffff 	.word	0xfffeffff
 8002ffc:	fffbffff 	.word	0xfffbffff
 8003000:	ffff7fff 	.word	0xffff7fff
 8003004:	ffffefff 	.word	0xffffefff
 8003008:	ffffdfff 	.word	0xffffdfff
 800300c:	ffefffff 	.word	0xffefffff
 8003010:	ff9fffff 	.word	0xff9fffff
 8003014:	fff7ffff 	.word	0xfff7ffff

08003018 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b092      	sub	sp, #72	; 0x48
 800301c:	af02      	add	r7, sp, #8
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2284      	movs	r2, #132	; 0x84
 8003024:	2100      	movs	r1, #0
 8003026:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003028:	f7fd fd2a 	bl	8000a80 <HAL_GetTick>
 800302c:	0003      	movs	r3, r0
 800302e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2208      	movs	r2, #8
 8003038:	4013      	ands	r3, r2
 800303a:	2b08      	cmp	r3, #8
 800303c:	d12c      	bne.n	8003098 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800303e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003040:	2280      	movs	r2, #128	; 0x80
 8003042:	0391      	lsls	r1, r2, #14
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4a46      	ldr	r2, [pc, #280]	; (8003160 <UART_CheckIdleState+0x148>)
 8003048:	9200      	str	r2, [sp, #0]
 800304a:	2200      	movs	r2, #0
 800304c:	f000 f88c 	bl	8003168 <UART_WaitOnFlagUntilTimeout>
 8003050:	1e03      	subs	r3, r0, #0
 8003052:	d021      	beq.n	8003098 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003054:	f3ef 8310 	mrs	r3, PRIMASK
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800305c:	63bb      	str	r3, [r7, #56]	; 0x38
 800305e:	2301      	movs	r3, #1
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003064:	f383 8810 	msr	PRIMASK, r3
}
 8003068:	46c0      	nop			; (mov r8, r8)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2180      	movs	r1, #128	; 0x80
 8003076:	438a      	bics	r2, r1
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003080:	f383 8810 	msr	PRIMASK, r3
}
 8003084:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2278      	movs	r2, #120	; 0x78
 8003090:	2100      	movs	r1, #0
 8003092:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e05f      	b.n	8003158 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2204      	movs	r2, #4
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d146      	bne.n	8003134 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a8:	2280      	movs	r2, #128	; 0x80
 80030aa:	03d1      	lsls	r1, r2, #15
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	4a2c      	ldr	r2, [pc, #176]	; (8003160 <UART_CheckIdleState+0x148>)
 80030b0:	9200      	str	r2, [sp, #0]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f000 f858 	bl	8003168 <UART_WaitOnFlagUntilTimeout>
 80030b8:	1e03      	subs	r3, r0, #0
 80030ba:	d03b      	beq.n	8003134 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030bc:	f3ef 8310 	mrs	r3, PRIMASK
 80030c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80030c2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030c4:	637b      	str	r3, [r7, #52]	; 0x34
 80030c6:	2301      	movs	r3, #1
 80030c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f383 8810 	msr	PRIMASK, r3
}
 80030d0:	46c0      	nop			; (mov r8, r8)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4921      	ldr	r1, [pc, #132]	; (8003164 <UART_CheckIdleState+0x14c>)
 80030de:	400a      	ands	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f383 8810 	msr	PRIMASK, r3
}
 80030ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ee:	f3ef 8310 	mrs	r3, PRIMASK
 80030f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80030f4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f6:	633b      	str	r3, [r7, #48]	; 0x30
 80030f8:	2301      	movs	r3, #1
 80030fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f383 8810 	msr	PRIMASK, r3
}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2101      	movs	r1, #1
 8003110:	438a      	bics	r2, r1
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	f383 8810 	msr	PRIMASK, r3
}
 800311e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2280      	movs	r2, #128	; 0x80
 8003124:	2120      	movs	r1, #32
 8003126:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2278      	movs	r2, #120	; 0x78
 800312c:	2100      	movs	r1, #0
 800312e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e011      	b.n	8003158 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2280      	movs	r2, #128	; 0x80
 800313e:	2120      	movs	r1, #32
 8003140:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2278      	movs	r2, #120	; 0x78
 8003152:	2100      	movs	r1, #0
 8003154:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	0018      	movs	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	b010      	add	sp, #64	; 0x40
 800315e:	bd80      	pop	{r7, pc}
 8003160:	01ffffff 	.word	0x01ffffff
 8003164:	fffffedf 	.word	0xfffffedf

08003168 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	1dfb      	adds	r3, r7, #7
 8003176:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003178:	e04b      	b.n	8003212 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	3301      	adds	r3, #1
 800317e:	d048      	beq.n	8003212 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003180:	f7fd fc7e 	bl	8000a80 <HAL_GetTick>
 8003184:	0002      	movs	r2, r0
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	429a      	cmp	r2, r3
 800318e:	d302      	bcc.n	8003196 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e04b      	b.n	8003232 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2204      	movs	r2, #4
 80031a2:	4013      	ands	r3, r2
 80031a4:	d035      	beq.n	8003212 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	2208      	movs	r2, #8
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d111      	bne.n	80031d8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2208      	movs	r2, #8
 80031ba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	0018      	movs	r0, r3
 80031c0:	f000 f83c 	bl	800323c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2284      	movs	r2, #132	; 0x84
 80031c8:	2108      	movs	r1, #8
 80031ca:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2278      	movs	r2, #120	; 0x78
 80031d0:	2100      	movs	r1, #0
 80031d2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e02c      	b.n	8003232 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69da      	ldr	r2, [r3, #28]
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	401a      	ands	r2, r3
 80031e4:	2380      	movs	r3, #128	; 0x80
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d112      	bne.n	8003212 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2280      	movs	r2, #128	; 0x80
 80031f2:	0112      	lsls	r2, r2, #4
 80031f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	0018      	movs	r0, r3
 80031fa:	f000 f81f 	bl	800323c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2284      	movs	r2, #132	; 0x84
 8003202:	2120      	movs	r1, #32
 8003204:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2278      	movs	r2, #120	; 0x78
 800320a:	2100      	movs	r1, #0
 800320c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e00f      	b.n	8003232 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	4013      	ands	r3, r2
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	425a      	negs	r2, r3
 8003222:	4153      	adcs	r3, r2
 8003224:	b2db      	uxtb	r3, r3
 8003226:	001a      	movs	r2, r3
 8003228:	1dfb      	adds	r3, r7, #7
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d0a4      	beq.n	800317a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	0018      	movs	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	b004      	add	sp, #16
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08e      	sub	sp, #56	; 0x38
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003244:	f3ef 8310 	mrs	r3, PRIMASK
 8003248:	617b      	str	r3, [r7, #20]
  return(result);
 800324a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800324c:	637b      	str	r3, [r7, #52]	; 0x34
 800324e:	2301      	movs	r3, #1
 8003250:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f383 8810 	msr	PRIMASK, r3
}
 8003258:	46c0      	nop			; (mov r8, r8)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4926      	ldr	r1, [pc, #152]	; (8003300 <UART_EndRxTransfer+0xc4>)
 8003266:	400a      	ands	r2, r1
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f383 8810 	msr	PRIMASK, r3
}
 8003274:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003276:	f3ef 8310 	mrs	r3, PRIMASK
 800327a:	623b      	str	r3, [r7, #32]
  return(result);
 800327c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800327e:	633b      	str	r3, [r7, #48]	; 0x30
 8003280:	2301      	movs	r3, #1
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	f383 8810 	msr	PRIMASK, r3
}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2101      	movs	r1, #1
 8003298:	438a      	bics	r2, r1
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	f383 8810 	msr	PRIMASK, r3
}
 80032a6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d118      	bne.n	80032e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b0:	f3ef 8310 	mrs	r3, PRIMASK
 80032b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80032b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ba:	2301      	movs	r3, #1
 80032bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f383 8810 	msr	PRIMASK, r3
}
 80032c4:	46c0      	nop			; (mov r8, r8)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2110      	movs	r1, #16
 80032d2:	438a      	bics	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f383 8810 	msr	PRIMASK, r3
}
 80032e0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2280      	movs	r2, #128	; 0x80
 80032e6:	2120      	movs	r1, #32
 80032e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b00e      	add	sp, #56	; 0x38
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	fffffedf 	.word	0xfffffedf

08003304 <memset>:
 8003304:	0003      	movs	r3, r0
 8003306:	1882      	adds	r2, r0, r2
 8003308:	4293      	cmp	r3, r2
 800330a:	d100      	bne.n	800330e <memset+0xa>
 800330c:	4770      	bx	lr
 800330e:	7019      	strb	r1, [r3, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	e7f9      	b.n	8003308 <memset+0x4>

08003314 <__libc_init_array>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	2600      	movs	r6, #0
 8003318:	4c0c      	ldr	r4, [pc, #48]	; (800334c <__libc_init_array+0x38>)
 800331a:	4d0d      	ldr	r5, [pc, #52]	; (8003350 <__libc_init_array+0x3c>)
 800331c:	1b64      	subs	r4, r4, r5
 800331e:	10a4      	asrs	r4, r4, #2
 8003320:	42a6      	cmp	r6, r4
 8003322:	d109      	bne.n	8003338 <__libc_init_array+0x24>
 8003324:	2600      	movs	r6, #0
 8003326:	f000 f819 	bl	800335c <_init>
 800332a:	4c0a      	ldr	r4, [pc, #40]	; (8003354 <__libc_init_array+0x40>)
 800332c:	4d0a      	ldr	r5, [pc, #40]	; (8003358 <__libc_init_array+0x44>)
 800332e:	1b64      	subs	r4, r4, r5
 8003330:	10a4      	asrs	r4, r4, #2
 8003332:	42a6      	cmp	r6, r4
 8003334:	d105      	bne.n	8003342 <__libc_init_array+0x2e>
 8003336:	bd70      	pop	{r4, r5, r6, pc}
 8003338:	00b3      	lsls	r3, r6, #2
 800333a:	58eb      	ldr	r3, [r5, r3]
 800333c:	4798      	blx	r3
 800333e:	3601      	adds	r6, #1
 8003340:	e7ee      	b.n	8003320 <__libc_init_array+0xc>
 8003342:	00b3      	lsls	r3, r6, #2
 8003344:	58eb      	ldr	r3, [r5, r3]
 8003346:	4798      	blx	r3
 8003348:	3601      	adds	r6, #1
 800334a:	e7f2      	b.n	8003332 <__libc_init_array+0x1e>
 800334c:	080033e8 	.word	0x080033e8
 8003350:	080033e8 	.word	0x080033e8
 8003354:	080033ec 	.word	0x080033ec
 8003358:	080033e8 	.word	0x080033e8

0800335c <_init>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr

08003368 <_fini>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr
