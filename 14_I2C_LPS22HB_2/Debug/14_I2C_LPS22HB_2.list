
14_I2C_LPS22HB_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fa0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08009060  08009060  00019060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800953c  0800953c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800953c  0800953c  0001953c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009544  08009544  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009544  08009544  00019544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009548  08009548  00019548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800954c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  200001d8  08009724  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000850  08009724  00020850  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dbc4  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e29  00000000  00000000  0002de07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  0002fc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3a  00000000  00000000  00030978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014ddc  00000000  00000000  000313b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f142  00000000  00000000  0004618e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007bebd  00000000  00000000  000552d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041d4  00000000  00000000  000d1190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000d5364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009048 	.word	0x08009048

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	08009048 	.word	0x08009048

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f9af 	bl	80017a0 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f8ff 	bl	8001650 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9a1 	bl	80017a0 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f997 	bl	80017a0 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f927 	bl	80016d4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f91d 	bl	80016d4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f002 f8d4 	bl	8002710 <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f002 f8cf 	bl	8002710 <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	d434      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057a:	469b      	mov	fp, r3
 800057c:	4653      	mov	r3, sl
 800057e:	465a      	mov	r2, fp
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83b      	bhi.n	8000608 <__udivmoddi4+0xc4>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e079      	b.n	800068a <__udivmoddi4+0x146>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e076      	b.n	8000690 <__udivmoddi4+0x14c>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e029      	b.n	8000610 <__udivmoddi4+0xcc>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	469b      	mov	fp, r3
 80005e8:	2320      	movs	r3, #32
 80005ea:	1a9b      	subs	r3, r3, r2
 80005ec:	4652      	mov	r2, sl
 80005ee:	40da      	lsrs	r2, r3
 80005f0:	4641      	mov	r1, r8
 80005f2:	0013      	movs	r3, r2
 80005f4:	464a      	mov	r2, r9
 80005f6:	408a      	lsls	r2, r1
 80005f8:	0017      	movs	r7, r2
 80005fa:	4642      	mov	r2, r8
 80005fc:	431f      	orrs	r7, r3
 80005fe:	4653      	mov	r3, sl
 8000600:	4093      	lsls	r3, r2
 8000602:	001e      	movs	r6, r3
 8000604:	42af      	cmp	r7, r5
 8000606:	d9c3      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000608:	2200      	movs	r2, #0
 800060a:	2300      	movs	r3, #0
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	4643      	mov	r3, r8
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0d8      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000616:	07fb      	lsls	r3, r7, #31
 8000618:	0872      	lsrs	r2, r6, #1
 800061a:	431a      	orrs	r2, r3
 800061c:	4646      	mov	r6, r8
 800061e:	087b      	lsrs	r3, r7, #1
 8000620:	e00e      	b.n	8000640 <__udivmoddi4+0xfc>
 8000622:	42ab      	cmp	r3, r5
 8000624:	d101      	bne.n	800062a <__udivmoddi4+0xe6>
 8000626:	42a2      	cmp	r2, r4
 8000628:	d80c      	bhi.n	8000644 <__udivmoddi4+0x100>
 800062a:	1aa4      	subs	r4, r4, r2
 800062c:	419d      	sbcs	r5, r3
 800062e:	2001      	movs	r0, #1
 8000630:	1924      	adds	r4, r4, r4
 8000632:	416d      	adcs	r5, r5
 8000634:	2100      	movs	r1, #0
 8000636:	3e01      	subs	r6, #1
 8000638:	1824      	adds	r4, r4, r0
 800063a:	414d      	adcs	r5, r1
 800063c:	2e00      	cmp	r6, #0
 800063e:	d006      	beq.n	800064e <__udivmoddi4+0x10a>
 8000640:	42ab      	cmp	r3, r5
 8000642:	d9ee      	bls.n	8000622 <__udivmoddi4+0xde>
 8000644:	3e01      	subs	r6, #1
 8000646:	1924      	adds	r4, r4, r4
 8000648:	416d      	adcs	r5, r5
 800064a:	2e00      	cmp	r6, #0
 800064c:	d1f8      	bne.n	8000640 <__udivmoddi4+0xfc>
 800064e:	9800      	ldr	r0, [sp, #0]
 8000650:	9901      	ldr	r1, [sp, #4]
 8000652:	465b      	mov	r3, fp
 8000654:	1900      	adds	r0, r0, r4
 8000656:	4169      	adcs	r1, r5
 8000658:	2b00      	cmp	r3, #0
 800065a:	db24      	blt.n	80006a6 <__udivmoddi4+0x162>
 800065c:	002b      	movs	r3, r5
 800065e:	465a      	mov	r2, fp
 8000660:	4644      	mov	r4, r8
 8000662:	40d3      	lsrs	r3, r2
 8000664:	002a      	movs	r2, r5
 8000666:	40e2      	lsrs	r2, r4
 8000668:	001c      	movs	r4, r3
 800066a:	465b      	mov	r3, fp
 800066c:	0015      	movs	r5, r2
 800066e:	2b00      	cmp	r3, #0
 8000670:	db2a      	blt.n	80006c8 <__udivmoddi4+0x184>
 8000672:	0026      	movs	r6, r4
 8000674:	409e      	lsls	r6, r3
 8000676:	0033      	movs	r3, r6
 8000678:	0026      	movs	r6, r4
 800067a:	4647      	mov	r7, r8
 800067c:	40be      	lsls	r6, r7
 800067e:	0032      	movs	r2, r6
 8000680:	1a80      	subs	r0, r0, r2
 8000682:	4199      	sbcs	r1, r3
 8000684:	9000      	str	r0, [sp, #0]
 8000686:	9101      	str	r1, [sp, #4]
 8000688:	e79e      	b.n	80005c8 <__udivmoddi4+0x84>
 800068a:	42a3      	cmp	r3, r4
 800068c:	d8bc      	bhi.n	8000608 <__udivmoddi4+0xc4>
 800068e:	e782      	b.n	8000596 <__udivmoddi4+0x52>
 8000690:	4642      	mov	r2, r8
 8000692:	2320      	movs	r3, #32
 8000694:	2100      	movs	r1, #0
 8000696:	1a9b      	subs	r3, r3, r2
 8000698:	2200      	movs	r2, #0
 800069a:	9100      	str	r1, [sp, #0]
 800069c:	9201      	str	r2, [sp, #4]
 800069e:	2201      	movs	r2, #1
 80006a0:	40da      	lsrs	r2, r3
 80006a2:	9201      	str	r2, [sp, #4]
 80006a4:	e785      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a6:	4642      	mov	r2, r8
 80006a8:	2320      	movs	r3, #32
 80006aa:	1a9b      	subs	r3, r3, r2
 80006ac:	002a      	movs	r2, r5
 80006ae:	4646      	mov	r6, r8
 80006b0:	409a      	lsls	r2, r3
 80006b2:	0023      	movs	r3, r4
 80006b4:	40f3      	lsrs	r3, r6
 80006b6:	4644      	mov	r4, r8
 80006b8:	4313      	orrs	r3, r2
 80006ba:	002a      	movs	r2, r5
 80006bc:	40e2      	lsrs	r2, r4
 80006be:	001c      	movs	r4, r3
 80006c0:	465b      	mov	r3, fp
 80006c2:	0015      	movs	r5, r2
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	dad4      	bge.n	8000672 <__udivmoddi4+0x12e>
 80006c8:	4642      	mov	r2, r8
 80006ca:	002f      	movs	r7, r5
 80006cc:	2320      	movs	r3, #32
 80006ce:	0026      	movs	r6, r4
 80006d0:	4097      	lsls	r7, r2
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	40de      	lsrs	r6, r3
 80006d6:	003b      	movs	r3, r7
 80006d8:	4333      	orrs	r3, r6
 80006da:	e7cd      	b.n	8000678 <__udivmoddi4+0x134>

080006dc <__aeabi_fdiv>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	464f      	mov	r7, r9
 80006e0:	4646      	mov	r6, r8
 80006e2:	46d6      	mov	lr, sl
 80006e4:	0245      	lsls	r5, r0, #9
 80006e6:	b5c0      	push	{r6, r7, lr}
 80006e8:	0047      	lsls	r7, r0, #1
 80006ea:	1c0c      	adds	r4, r1, #0
 80006ec:	0a6d      	lsrs	r5, r5, #9
 80006ee:	0e3f      	lsrs	r7, r7, #24
 80006f0:	0fc6      	lsrs	r6, r0, #31
 80006f2:	2f00      	cmp	r7, #0
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fdiv+0x1c>
 80006f6:	e06f      	b.n	80007d8 <__aeabi_fdiv+0xfc>
 80006f8:	2fff      	cmp	r7, #255	; 0xff
 80006fa:	d100      	bne.n	80006fe <__aeabi_fdiv+0x22>
 80006fc:	e074      	b.n	80007e8 <__aeabi_fdiv+0x10c>
 80006fe:	2300      	movs	r3, #0
 8000700:	2280      	movs	r2, #128	; 0x80
 8000702:	4699      	mov	r9, r3
 8000704:	469a      	mov	sl, r3
 8000706:	00ed      	lsls	r5, r5, #3
 8000708:	04d2      	lsls	r2, r2, #19
 800070a:	4315      	orrs	r5, r2
 800070c:	3f7f      	subs	r7, #127	; 0x7f
 800070e:	0263      	lsls	r3, r4, #9
 8000710:	0a5b      	lsrs	r3, r3, #9
 8000712:	4698      	mov	r8, r3
 8000714:	0063      	lsls	r3, r4, #1
 8000716:	0e1b      	lsrs	r3, r3, #24
 8000718:	0fe4      	lsrs	r4, r4, #31
 800071a:	2b00      	cmp	r3, #0
 800071c:	d04d      	beq.n	80007ba <__aeabi_fdiv+0xde>
 800071e:	2bff      	cmp	r3, #255	; 0xff
 8000720:	d045      	beq.n	80007ae <__aeabi_fdiv+0xd2>
 8000722:	4642      	mov	r2, r8
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	00d2      	lsls	r2, r2, #3
 8000728:	04c9      	lsls	r1, r1, #19
 800072a:	4311      	orrs	r1, r2
 800072c:	4688      	mov	r8, r1
 800072e:	2200      	movs	r2, #0
 8000730:	3b7f      	subs	r3, #127	; 0x7f
 8000732:	0031      	movs	r1, r6
 8000734:	1aff      	subs	r7, r7, r3
 8000736:	464b      	mov	r3, r9
 8000738:	4061      	eors	r1, r4
 800073a:	b2c9      	uxtb	r1, r1
 800073c:	2b0f      	cmp	r3, #15
 800073e:	d900      	bls.n	8000742 <__aeabi_fdiv+0x66>
 8000740:	e0b8      	b.n	80008b4 <__aeabi_fdiv+0x1d8>
 8000742:	4870      	ldr	r0, [pc, #448]	; (8000904 <__aeabi_fdiv+0x228>)
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	58c3      	ldr	r3, [r0, r3]
 8000748:	469f      	mov	pc, r3
 800074a:	2300      	movs	r3, #0
 800074c:	4698      	mov	r8, r3
 800074e:	0026      	movs	r6, r4
 8000750:	4645      	mov	r5, r8
 8000752:	4692      	mov	sl, r2
 8000754:	4653      	mov	r3, sl
 8000756:	2b02      	cmp	r3, #2
 8000758:	d100      	bne.n	800075c <__aeabi_fdiv+0x80>
 800075a:	e08d      	b.n	8000878 <__aeabi_fdiv+0x19c>
 800075c:	2b03      	cmp	r3, #3
 800075e:	d100      	bne.n	8000762 <__aeabi_fdiv+0x86>
 8000760:	e0a1      	b.n	80008a6 <__aeabi_fdiv+0x1ca>
 8000762:	2b01      	cmp	r3, #1
 8000764:	d018      	beq.n	8000798 <__aeabi_fdiv+0xbc>
 8000766:	003b      	movs	r3, r7
 8000768:	337f      	adds	r3, #127	; 0x7f
 800076a:	2b00      	cmp	r3, #0
 800076c:	dd6d      	ble.n	800084a <__aeabi_fdiv+0x16e>
 800076e:	076a      	lsls	r2, r5, #29
 8000770:	d004      	beq.n	800077c <__aeabi_fdiv+0xa0>
 8000772:	220f      	movs	r2, #15
 8000774:	402a      	ands	r2, r5
 8000776:	2a04      	cmp	r2, #4
 8000778:	d000      	beq.n	800077c <__aeabi_fdiv+0xa0>
 800077a:	3504      	adds	r5, #4
 800077c:	012a      	lsls	r2, r5, #4
 800077e:	d503      	bpl.n	8000788 <__aeabi_fdiv+0xac>
 8000780:	4b61      	ldr	r3, [pc, #388]	; (8000908 <__aeabi_fdiv+0x22c>)
 8000782:	401d      	ands	r5, r3
 8000784:	003b      	movs	r3, r7
 8000786:	3380      	adds	r3, #128	; 0x80
 8000788:	2bfe      	cmp	r3, #254	; 0xfe
 800078a:	dd00      	ble.n	800078e <__aeabi_fdiv+0xb2>
 800078c:	e074      	b.n	8000878 <__aeabi_fdiv+0x19c>
 800078e:	01aa      	lsls	r2, r5, #6
 8000790:	0a52      	lsrs	r2, r2, #9
 8000792:	b2d8      	uxtb	r0, r3
 8000794:	e002      	b.n	800079c <__aeabi_fdiv+0xc0>
 8000796:	000e      	movs	r6, r1
 8000798:	2000      	movs	r0, #0
 800079a:	2200      	movs	r2, #0
 800079c:	05c0      	lsls	r0, r0, #23
 800079e:	07f6      	lsls	r6, r6, #31
 80007a0:	4310      	orrs	r0, r2
 80007a2:	4330      	orrs	r0, r6
 80007a4:	bce0      	pop	{r5, r6, r7}
 80007a6:	46ba      	mov	sl, r7
 80007a8:	46b1      	mov	r9, r6
 80007aa:	46a8      	mov	r8, r5
 80007ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ae:	4643      	mov	r3, r8
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d13f      	bne.n	8000834 <__aeabi_fdiv+0x158>
 80007b4:	2202      	movs	r2, #2
 80007b6:	3fff      	subs	r7, #255	; 0xff
 80007b8:	e003      	b.n	80007c2 <__aeabi_fdiv+0xe6>
 80007ba:	4643      	mov	r3, r8
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d12d      	bne.n	800081c <__aeabi_fdiv+0x140>
 80007c0:	2201      	movs	r2, #1
 80007c2:	0031      	movs	r1, r6
 80007c4:	464b      	mov	r3, r9
 80007c6:	4061      	eors	r1, r4
 80007c8:	b2c9      	uxtb	r1, r1
 80007ca:	4313      	orrs	r3, r2
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	d838      	bhi.n	8000842 <__aeabi_fdiv+0x166>
 80007d0:	484e      	ldr	r0, [pc, #312]	; (800090c <__aeabi_fdiv+0x230>)
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	58c3      	ldr	r3, [r0, r3]
 80007d6:	469f      	mov	pc, r3
 80007d8:	2d00      	cmp	r5, #0
 80007da:	d113      	bne.n	8000804 <__aeabi_fdiv+0x128>
 80007dc:	2304      	movs	r3, #4
 80007de:	4699      	mov	r9, r3
 80007e0:	3b03      	subs	r3, #3
 80007e2:	2700      	movs	r7, #0
 80007e4:	469a      	mov	sl, r3
 80007e6:	e792      	b.n	800070e <__aeabi_fdiv+0x32>
 80007e8:	2d00      	cmp	r5, #0
 80007ea:	d105      	bne.n	80007f8 <__aeabi_fdiv+0x11c>
 80007ec:	2308      	movs	r3, #8
 80007ee:	4699      	mov	r9, r3
 80007f0:	3b06      	subs	r3, #6
 80007f2:	27ff      	movs	r7, #255	; 0xff
 80007f4:	469a      	mov	sl, r3
 80007f6:	e78a      	b.n	800070e <__aeabi_fdiv+0x32>
 80007f8:	230c      	movs	r3, #12
 80007fa:	4699      	mov	r9, r3
 80007fc:	3b09      	subs	r3, #9
 80007fe:	27ff      	movs	r7, #255	; 0xff
 8000800:	469a      	mov	sl, r3
 8000802:	e784      	b.n	800070e <__aeabi_fdiv+0x32>
 8000804:	0028      	movs	r0, r5
 8000806:	f001 ff65 	bl	80026d4 <__clzsi2>
 800080a:	2776      	movs	r7, #118	; 0x76
 800080c:	1f43      	subs	r3, r0, #5
 800080e:	409d      	lsls	r5, r3
 8000810:	2300      	movs	r3, #0
 8000812:	427f      	negs	r7, r7
 8000814:	4699      	mov	r9, r3
 8000816:	469a      	mov	sl, r3
 8000818:	1a3f      	subs	r7, r7, r0
 800081a:	e778      	b.n	800070e <__aeabi_fdiv+0x32>
 800081c:	4640      	mov	r0, r8
 800081e:	f001 ff59 	bl	80026d4 <__clzsi2>
 8000822:	4642      	mov	r2, r8
 8000824:	1f43      	subs	r3, r0, #5
 8000826:	409a      	lsls	r2, r3
 8000828:	2376      	movs	r3, #118	; 0x76
 800082a:	425b      	negs	r3, r3
 800082c:	4690      	mov	r8, r2
 800082e:	1a1b      	subs	r3, r3, r0
 8000830:	2200      	movs	r2, #0
 8000832:	e77e      	b.n	8000732 <__aeabi_fdiv+0x56>
 8000834:	2303      	movs	r3, #3
 8000836:	464a      	mov	r2, r9
 8000838:	431a      	orrs	r2, r3
 800083a:	4691      	mov	r9, r2
 800083c:	33fc      	adds	r3, #252	; 0xfc
 800083e:	2203      	movs	r2, #3
 8000840:	e777      	b.n	8000732 <__aeabi_fdiv+0x56>
 8000842:	000e      	movs	r6, r1
 8000844:	20ff      	movs	r0, #255	; 0xff
 8000846:	2200      	movs	r2, #0
 8000848:	e7a8      	b.n	800079c <__aeabi_fdiv+0xc0>
 800084a:	2201      	movs	r2, #1
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	2b1b      	cmp	r3, #27
 8000850:	dca2      	bgt.n	8000798 <__aeabi_fdiv+0xbc>
 8000852:	379e      	adds	r7, #158	; 0x9e
 8000854:	002a      	movs	r2, r5
 8000856:	40bd      	lsls	r5, r7
 8000858:	40da      	lsrs	r2, r3
 800085a:	1e6b      	subs	r3, r5, #1
 800085c:	419d      	sbcs	r5, r3
 800085e:	4315      	orrs	r5, r2
 8000860:	076a      	lsls	r2, r5, #29
 8000862:	d004      	beq.n	800086e <__aeabi_fdiv+0x192>
 8000864:	220f      	movs	r2, #15
 8000866:	402a      	ands	r2, r5
 8000868:	2a04      	cmp	r2, #4
 800086a:	d000      	beq.n	800086e <__aeabi_fdiv+0x192>
 800086c:	3504      	adds	r5, #4
 800086e:	016a      	lsls	r2, r5, #5
 8000870:	d544      	bpl.n	80008fc <__aeabi_fdiv+0x220>
 8000872:	2001      	movs	r0, #1
 8000874:	2200      	movs	r2, #0
 8000876:	e791      	b.n	800079c <__aeabi_fdiv+0xc0>
 8000878:	20ff      	movs	r0, #255	; 0xff
 800087a:	2200      	movs	r2, #0
 800087c:	e78e      	b.n	800079c <__aeabi_fdiv+0xc0>
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	2600      	movs	r6, #0
 8000882:	20ff      	movs	r0, #255	; 0xff
 8000884:	03d2      	lsls	r2, r2, #15
 8000886:	e789      	b.n	800079c <__aeabi_fdiv+0xc0>
 8000888:	2300      	movs	r3, #0
 800088a:	4698      	mov	r8, r3
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	03d2      	lsls	r2, r2, #15
 8000890:	4215      	tst	r5, r2
 8000892:	d008      	beq.n	80008a6 <__aeabi_fdiv+0x1ca>
 8000894:	4643      	mov	r3, r8
 8000896:	4213      	tst	r3, r2
 8000898:	d105      	bne.n	80008a6 <__aeabi_fdiv+0x1ca>
 800089a:	431a      	orrs	r2, r3
 800089c:	0252      	lsls	r2, r2, #9
 800089e:	0026      	movs	r6, r4
 80008a0:	20ff      	movs	r0, #255	; 0xff
 80008a2:	0a52      	lsrs	r2, r2, #9
 80008a4:	e77a      	b.n	800079c <__aeabi_fdiv+0xc0>
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	03d2      	lsls	r2, r2, #15
 80008aa:	432a      	orrs	r2, r5
 80008ac:	0252      	lsls	r2, r2, #9
 80008ae:	20ff      	movs	r0, #255	; 0xff
 80008b0:	0a52      	lsrs	r2, r2, #9
 80008b2:	e773      	b.n	800079c <__aeabi_fdiv+0xc0>
 80008b4:	4642      	mov	r2, r8
 80008b6:	016b      	lsls	r3, r5, #5
 80008b8:	0155      	lsls	r5, r2, #5
 80008ba:	42ab      	cmp	r3, r5
 80008bc:	d21a      	bcs.n	80008f4 <__aeabi_fdiv+0x218>
 80008be:	201b      	movs	r0, #27
 80008c0:	2200      	movs	r2, #0
 80008c2:	3f01      	subs	r7, #1
 80008c4:	2601      	movs	r6, #1
 80008c6:	001c      	movs	r4, r3
 80008c8:	0052      	lsls	r2, r2, #1
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	2c00      	cmp	r4, #0
 80008ce:	db01      	blt.n	80008d4 <__aeabi_fdiv+0x1f8>
 80008d0:	429d      	cmp	r5, r3
 80008d2:	d801      	bhi.n	80008d8 <__aeabi_fdiv+0x1fc>
 80008d4:	1b5b      	subs	r3, r3, r5
 80008d6:	4332      	orrs	r2, r6
 80008d8:	3801      	subs	r0, #1
 80008da:	2800      	cmp	r0, #0
 80008dc:	d1f3      	bne.n	80008c6 <__aeabi_fdiv+0x1ea>
 80008de:	1e58      	subs	r0, r3, #1
 80008e0:	4183      	sbcs	r3, r0
 80008e2:	4313      	orrs	r3, r2
 80008e4:	001d      	movs	r5, r3
 80008e6:	003b      	movs	r3, r7
 80008e8:	337f      	adds	r3, #127	; 0x7f
 80008ea:	000e      	movs	r6, r1
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	dd00      	ble.n	80008f2 <__aeabi_fdiv+0x216>
 80008f0:	e73d      	b.n	800076e <__aeabi_fdiv+0x92>
 80008f2:	e7aa      	b.n	800084a <__aeabi_fdiv+0x16e>
 80008f4:	201a      	movs	r0, #26
 80008f6:	2201      	movs	r2, #1
 80008f8:	1b5b      	subs	r3, r3, r5
 80008fa:	e7e3      	b.n	80008c4 <__aeabi_fdiv+0x1e8>
 80008fc:	01aa      	lsls	r2, r5, #6
 80008fe:	2000      	movs	r0, #0
 8000900:	0a52      	lsrs	r2, r2, #9
 8000902:	e74b      	b.n	800079c <__aeabi_fdiv+0xc0>
 8000904:	0800909c 	.word	0x0800909c
 8000908:	f7ffffff 	.word	0xf7ffffff
 800090c:	080090dc 	.word	0x080090dc

08000910 <__aeabi_i2f>:
 8000910:	b570      	push	{r4, r5, r6, lr}
 8000912:	2800      	cmp	r0, #0
 8000914:	d013      	beq.n	800093e <__aeabi_i2f+0x2e>
 8000916:	17c3      	asrs	r3, r0, #31
 8000918:	18c5      	adds	r5, r0, r3
 800091a:	405d      	eors	r5, r3
 800091c:	0fc4      	lsrs	r4, r0, #31
 800091e:	0028      	movs	r0, r5
 8000920:	f001 fed8 	bl	80026d4 <__clzsi2>
 8000924:	239e      	movs	r3, #158	; 0x9e
 8000926:	0001      	movs	r1, r0
 8000928:	1a1b      	subs	r3, r3, r0
 800092a:	2b96      	cmp	r3, #150	; 0x96
 800092c:	dc0f      	bgt.n	800094e <__aeabi_i2f+0x3e>
 800092e:	2808      	cmp	r0, #8
 8000930:	d031      	beq.n	8000996 <__aeabi_i2f+0x86>
 8000932:	3908      	subs	r1, #8
 8000934:	408d      	lsls	r5, r1
 8000936:	026d      	lsls	r5, r5, #9
 8000938:	0a6d      	lsrs	r5, r5, #9
 800093a:	b2d8      	uxtb	r0, r3
 800093c:	e002      	b.n	8000944 <__aeabi_i2f+0x34>
 800093e:	2400      	movs	r4, #0
 8000940:	2000      	movs	r0, #0
 8000942:	2500      	movs	r5, #0
 8000944:	05c0      	lsls	r0, r0, #23
 8000946:	4328      	orrs	r0, r5
 8000948:	07e4      	lsls	r4, r4, #31
 800094a:	4320      	orrs	r0, r4
 800094c:	bd70      	pop	{r4, r5, r6, pc}
 800094e:	2b99      	cmp	r3, #153	; 0x99
 8000950:	dd0c      	ble.n	800096c <__aeabi_i2f+0x5c>
 8000952:	2205      	movs	r2, #5
 8000954:	1a12      	subs	r2, r2, r0
 8000956:	0028      	movs	r0, r5
 8000958:	40d0      	lsrs	r0, r2
 800095a:	0002      	movs	r2, r0
 800095c:	0008      	movs	r0, r1
 800095e:	301b      	adds	r0, #27
 8000960:	4085      	lsls	r5, r0
 8000962:	0028      	movs	r0, r5
 8000964:	1e45      	subs	r5, r0, #1
 8000966:	41a8      	sbcs	r0, r5
 8000968:	4302      	orrs	r2, r0
 800096a:	0015      	movs	r5, r2
 800096c:	2905      	cmp	r1, #5
 800096e:	dc16      	bgt.n	800099e <__aeabi_i2f+0x8e>
 8000970:	002a      	movs	r2, r5
 8000972:	480f      	ldr	r0, [pc, #60]	; (80009b0 <__aeabi_i2f+0xa0>)
 8000974:	4002      	ands	r2, r0
 8000976:	076e      	lsls	r6, r5, #29
 8000978:	d009      	beq.n	800098e <__aeabi_i2f+0x7e>
 800097a:	260f      	movs	r6, #15
 800097c:	4035      	ands	r5, r6
 800097e:	2d04      	cmp	r5, #4
 8000980:	d005      	beq.n	800098e <__aeabi_i2f+0x7e>
 8000982:	3204      	adds	r2, #4
 8000984:	0155      	lsls	r5, r2, #5
 8000986:	d502      	bpl.n	800098e <__aeabi_i2f+0x7e>
 8000988:	239f      	movs	r3, #159	; 0x9f
 800098a:	4002      	ands	r2, r0
 800098c:	1a5b      	subs	r3, r3, r1
 800098e:	0192      	lsls	r2, r2, #6
 8000990:	0a55      	lsrs	r5, r2, #9
 8000992:	b2d8      	uxtb	r0, r3
 8000994:	e7d6      	b.n	8000944 <__aeabi_i2f+0x34>
 8000996:	026d      	lsls	r5, r5, #9
 8000998:	2096      	movs	r0, #150	; 0x96
 800099a:	0a6d      	lsrs	r5, r5, #9
 800099c:	e7d2      	b.n	8000944 <__aeabi_i2f+0x34>
 800099e:	1f4a      	subs	r2, r1, #5
 80009a0:	4095      	lsls	r5, r2
 80009a2:	002a      	movs	r2, r5
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <__aeabi_i2f+0xa0>)
 80009a6:	4002      	ands	r2, r0
 80009a8:	076e      	lsls	r6, r5, #29
 80009aa:	d0f0      	beq.n	800098e <__aeabi_i2f+0x7e>
 80009ac:	e7e5      	b.n	800097a <__aeabi_i2f+0x6a>
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	fbffffff 	.word	0xfbffffff

080009b4 <__aeabi_dadd>:
 80009b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b6:	464f      	mov	r7, r9
 80009b8:	4646      	mov	r6, r8
 80009ba:	46d6      	mov	lr, sl
 80009bc:	0004      	movs	r4, r0
 80009be:	b5c0      	push	{r6, r7, lr}
 80009c0:	001f      	movs	r7, r3
 80009c2:	030b      	lsls	r3, r1, #12
 80009c4:	0010      	movs	r0, r2
 80009c6:	004e      	lsls	r6, r1, #1
 80009c8:	0a5b      	lsrs	r3, r3, #9
 80009ca:	0fcd      	lsrs	r5, r1, #31
 80009cc:	0f61      	lsrs	r1, r4, #29
 80009ce:	007a      	lsls	r2, r7, #1
 80009d0:	4319      	orrs	r1, r3
 80009d2:	00e3      	lsls	r3, r4, #3
 80009d4:	033c      	lsls	r4, r7, #12
 80009d6:	0fff      	lsrs	r7, r7, #31
 80009d8:	46bc      	mov	ip, r7
 80009da:	0a64      	lsrs	r4, r4, #9
 80009dc:	0f47      	lsrs	r7, r0, #29
 80009de:	4327      	orrs	r7, r4
 80009e0:	0d76      	lsrs	r6, r6, #21
 80009e2:	0d52      	lsrs	r2, r2, #21
 80009e4:	00c0      	lsls	r0, r0, #3
 80009e6:	46b9      	mov	r9, r7
 80009e8:	4680      	mov	r8, r0
 80009ea:	1ab7      	subs	r7, r6, r2
 80009ec:	4565      	cmp	r5, ip
 80009ee:	d100      	bne.n	80009f2 <__aeabi_dadd+0x3e>
 80009f0:	e09b      	b.n	8000b2a <__aeabi_dadd+0x176>
 80009f2:	2f00      	cmp	r7, #0
 80009f4:	dc00      	bgt.n	80009f8 <__aeabi_dadd+0x44>
 80009f6:	e084      	b.n	8000b02 <__aeabi_dadd+0x14e>
 80009f8:	2a00      	cmp	r2, #0
 80009fa:	d100      	bne.n	80009fe <__aeabi_dadd+0x4a>
 80009fc:	e0be      	b.n	8000b7c <__aeabi_dadd+0x1c8>
 80009fe:	4ac8      	ldr	r2, [pc, #800]	; (8000d20 <__aeabi_dadd+0x36c>)
 8000a00:	4296      	cmp	r6, r2
 8000a02:	d100      	bne.n	8000a06 <__aeabi_dadd+0x52>
 8000a04:	e124      	b.n	8000c50 <__aeabi_dadd+0x29c>
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	464c      	mov	r4, r9
 8000a0a:	0412      	lsls	r2, r2, #16
 8000a0c:	4314      	orrs	r4, r2
 8000a0e:	46a1      	mov	r9, r4
 8000a10:	2f38      	cmp	r7, #56	; 0x38
 8000a12:	dd00      	ble.n	8000a16 <__aeabi_dadd+0x62>
 8000a14:	e167      	b.n	8000ce6 <__aeabi_dadd+0x332>
 8000a16:	2f1f      	cmp	r7, #31
 8000a18:	dd00      	ble.n	8000a1c <__aeabi_dadd+0x68>
 8000a1a:	e1d6      	b.n	8000dca <__aeabi_dadd+0x416>
 8000a1c:	2220      	movs	r2, #32
 8000a1e:	464c      	mov	r4, r9
 8000a20:	1bd2      	subs	r2, r2, r7
 8000a22:	4094      	lsls	r4, r2
 8000a24:	46a2      	mov	sl, r4
 8000a26:	4644      	mov	r4, r8
 8000a28:	40fc      	lsrs	r4, r7
 8000a2a:	0020      	movs	r0, r4
 8000a2c:	4654      	mov	r4, sl
 8000a2e:	4304      	orrs	r4, r0
 8000a30:	4640      	mov	r0, r8
 8000a32:	4090      	lsls	r0, r2
 8000a34:	1e42      	subs	r2, r0, #1
 8000a36:	4190      	sbcs	r0, r2
 8000a38:	464a      	mov	r2, r9
 8000a3a:	40fa      	lsrs	r2, r7
 8000a3c:	4304      	orrs	r4, r0
 8000a3e:	1a89      	subs	r1, r1, r2
 8000a40:	1b1c      	subs	r4, r3, r4
 8000a42:	42a3      	cmp	r3, r4
 8000a44:	4192      	sbcs	r2, r2
 8000a46:	4252      	negs	r2, r2
 8000a48:	1a8b      	subs	r3, r1, r2
 8000a4a:	469a      	mov	sl, r3
 8000a4c:	4653      	mov	r3, sl
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	d400      	bmi.n	8000a54 <__aeabi_dadd+0xa0>
 8000a52:	e0d4      	b.n	8000bfe <__aeabi_dadd+0x24a>
 8000a54:	4653      	mov	r3, sl
 8000a56:	025a      	lsls	r2, r3, #9
 8000a58:	0a53      	lsrs	r3, r2, #9
 8000a5a:	469a      	mov	sl, r3
 8000a5c:	4653      	mov	r3, sl
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0xb0>
 8000a62:	e104      	b.n	8000c6e <__aeabi_dadd+0x2ba>
 8000a64:	4650      	mov	r0, sl
 8000a66:	f001 fe35 	bl	80026d4 <__clzsi2>
 8000a6a:	0003      	movs	r3, r0
 8000a6c:	3b08      	subs	r3, #8
 8000a6e:	2220      	movs	r2, #32
 8000a70:	0020      	movs	r0, r4
 8000a72:	1ad2      	subs	r2, r2, r3
 8000a74:	4651      	mov	r1, sl
 8000a76:	40d0      	lsrs	r0, r2
 8000a78:	4099      	lsls	r1, r3
 8000a7a:	0002      	movs	r2, r0
 8000a7c:	409c      	lsls	r4, r3
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	42b3      	cmp	r3, r6
 8000a82:	da00      	bge.n	8000a86 <__aeabi_dadd+0xd2>
 8000a84:	e102      	b.n	8000c8c <__aeabi_dadd+0x2d8>
 8000a86:	1b9b      	subs	r3, r3, r6
 8000a88:	1c59      	adds	r1, r3, #1
 8000a8a:	291f      	cmp	r1, #31
 8000a8c:	dd00      	ble.n	8000a90 <__aeabi_dadd+0xdc>
 8000a8e:	e0a7      	b.n	8000be0 <__aeabi_dadd+0x22c>
 8000a90:	2320      	movs	r3, #32
 8000a92:	0010      	movs	r0, r2
 8000a94:	0026      	movs	r6, r4
 8000a96:	1a5b      	subs	r3, r3, r1
 8000a98:	409c      	lsls	r4, r3
 8000a9a:	4098      	lsls	r0, r3
 8000a9c:	40ce      	lsrs	r6, r1
 8000a9e:	40ca      	lsrs	r2, r1
 8000aa0:	1e63      	subs	r3, r4, #1
 8000aa2:	419c      	sbcs	r4, r3
 8000aa4:	4330      	orrs	r0, r6
 8000aa6:	4692      	mov	sl, r2
 8000aa8:	2600      	movs	r6, #0
 8000aaa:	4304      	orrs	r4, r0
 8000aac:	0763      	lsls	r3, r4, #29
 8000aae:	d009      	beq.n	8000ac4 <__aeabi_dadd+0x110>
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	4023      	ands	r3, r4
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	d005      	beq.n	8000ac4 <__aeabi_dadd+0x110>
 8000ab8:	1d23      	adds	r3, r4, #4
 8000aba:	42a3      	cmp	r3, r4
 8000abc:	41a4      	sbcs	r4, r4
 8000abe:	4264      	negs	r4, r4
 8000ac0:	44a2      	add	sl, r4
 8000ac2:	001c      	movs	r4, r3
 8000ac4:	4653      	mov	r3, sl
 8000ac6:	021b      	lsls	r3, r3, #8
 8000ac8:	d400      	bmi.n	8000acc <__aeabi_dadd+0x118>
 8000aca:	e09b      	b.n	8000c04 <__aeabi_dadd+0x250>
 8000acc:	4b94      	ldr	r3, [pc, #592]	; (8000d20 <__aeabi_dadd+0x36c>)
 8000ace:	3601      	adds	r6, #1
 8000ad0:	429e      	cmp	r6, r3
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x122>
 8000ad4:	e0b8      	b.n	8000c48 <__aeabi_dadd+0x294>
 8000ad6:	4653      	mov	r3, sl
 8000ad8:	4992      	ldr	r1, [pc, #584]	; (8000d24 <__aeabi_dadd+0x370>)
 8000ada:	08e4      	lsrs	r4, r4, #3
 8000adc:	400b      	ands	r3, r1
 8000ade:	0019      	movs	r1, r3
 8000ae0:	075b      	lsls	r3, r3, #29
 8000ae2:	4323      	orrs	r3, r4
 8000ae4:	0572      	lsls	r2, r6, #21
 8000ae6:	024c      	lsls	r4, r1, #9
 8000ae8:	0b24      	lsrs	r4, r4, #12
 8000aea:	0d52      	lsrs	r2, r2, #21
 8000aec:	0512      	lsls	r2, r2, #20
 8000aee:	07ed      	lsls	r5, r5, #31
 8000af0:	4322      	orrs	r2, r4
 8000af2:	432a      	orrs	r2, r5
 8000af4:	0018      	movs	r0, r3
 8000af6:	0011      	movs	r1, r2
 8000af8:	bce0      	pop	{r5, r6, r7}
 8000afa:	46ba      	mov	sl, r7
 8000afc:	46b1      	mov	r9, r6
 8000afe:	46a8      	mov	r8, r5
 8000b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b02:	2f00      	cmp	r7, #0
 8000b04:	d048      	beq.n	8000b98 <__aeabi_dadd+0x1e4>
 8000b06:	1b97      	subs	r7, r2, r6
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	d000      	beq.n	8000b0e <__aeabi_dadd+0x15a>
 8000b0c:	e10e      	b.n	8000d2c <__aeabi_dadd+0x378>
 8000b0e:	000c      	movs	r4, r1
 8000b10:	431c      	orrs	r4, r3
 8000b12:	d100      	bne.n	8000b16 <__aeabi_dadd+0x162>
 8000b14:	e1b7      	b.n	8000e86 <__aeabi_dadd+0x4d2>
 8000b16:	1e7c      	subs	r4, r7, #1
 8000b18:	2f01      	cmp	r7, #1
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x16a>
 8000b1c:	e226      	b.n	8000f6c <__aeabi_dadd+0x5b8>
 8000b1e:	4d80      	ldr	r5, [pc, #512]	; (8000d20 <__aeabi_dadd+0x36c>)
 8000b20:	42af      	cmp	r7, r5
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x172>
 8000b24:	e1d5      	b.n	8000ed2 <__aeabi_dadd+0x51e>
 8000b26:	0027      	movs	r7, r4
 8000b28:	e107      	b.n	8000d3a <__aeabi_dadd+0x386>
 8000b2a:	2f00      	cmp	r7, #0
 8000b2c:	dc00      	bgt.n	8000b30 <__aeabi_dadd+0x17c>
 8000b2e:	e0b2      	b.n	8000c96 <__aeabi_dadd+0x2e2>
 8000b30:	2a00      	cmp	r2, #0
 8000b32:	d047      	beq.n	8000bc4 <__aeabi_dadd+0x210>
 8000b34:	4a7a      	ldr	r2, [pc, #488]	; (8000d20 <__aeabi_dadd+0x36c>)
 8000b36:	4296      	cmp	r6, r2
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dadd+0x188>
 8000b3a:	e089      	b.n	8000c50 <__aeabi_dadd+0x29c>
 8000b3c:	2280      	movs	r2, #128	; 0x80
 8000b3e:	464c      	mov	r4, r9
 8000b40:	0412      	lsls	r2, r2, #16
 8000b42:	4314      	orrs	r4, r2
 8000b44:	46a1      	mov	r9, r4
 8000b46:	2f38      	cmp	r7, #56	; 0x38
 8000b48:	dc6b      	bgt.n	8000c22 <__aeabi_dadd+0x26e>
 8000b4a:	2f1f      	cmp	r7, #31
 8000b4c:	dc00      	bgt.n	8000b50 <__aeabi_dadd+0x19c>
 8000b4e:	e16e      	b.n	8000e2e <__aeabi_dadd+0x47a>
 8000b50:	003a      	movs	r2, r7
 8000b52:	4648      	mov	r0, r9
 8000b54:	3a20      	subs	r2, #32
 8000b56:	40d0      	lsrs	r0, r2
 8000b58:	4684      	mov	ip, r0
 8000b5a:	2f20      	cmp	r7, #32
 8000b5c:	d007      	beq.n	8000b6e <__aeabi_dadd+0x1ba>
 8000b5e:	2240      	movs	r2, #64	; 0x40
 8000b60:	4648      	mov	r0, r9
 8000b62:	1bd2      	subs	r2, r2, r7
 8000b64:	4090      	lsls	r0, r2
 8000b66:	0002      	movs	r2, r0
 8000b68:	4640      	mov	r0, r8
 8000b6a:	4310      	orrs	r0, r2
 8000b6c:	4680      	mov	r8, r0
 8000b6e:	4640      	mov	r0, r8
 8000b70:	1e42      	subs	r2, r0, #1
 8000b72:	4190      	sbcs	r0, r2
 8000b74:	4662      	mov	r2, ip
 8000b76:	0004      	movs	r4, r0
 8000b78:	4314      	orrs	r4, r2
 8000b7a:	e057      	b.n	8000c2c <__aeabi_dadd+0x278>
 8000b7c:	464a      	mov	r2, r9
 8000b7e:	4302      	orrs	r2, r0
 8000b80:	d100      	bne.n	8000b84 <__aeabi_dadd+0x1d0>
 8000b82:	e103      	b.n	8000d8c <__aeabi_dadd+0x3d8>
 8000b84:	1e7a      	subs	r2, r7, #1
 8000b86:	2f01      	cmp	r7, #1
 8000b88:	d100      	bne.n	8000b8c <__aeabi_dadd+0x1d8>
 8000b8a:	e193      	b.n	8000eb4 <__aeabi_dadd+0x500>
 8000b8c:	4c64      	ldr	r4, [pc, #400]	; (8000d20 <__aeabi_dadd+0x36c>)
 8000b8e:	42a7      	cmp	r7, r4
 8000b90:	d100      	bne.n	8000b94 <__aeabi_dadd+0x1e0>
 8000b92:	e18a      	b.n	8000eaa <__aeabi_dadd+0x4f6>
 8000b94:	0017      	movs	r7, r2
 8000b96:	e73b      	b.n	8000a10 <__aeabi_dadd+0x5c>
 8000b98:	4c63      	ldr	r4, [pc, #396]	; (8000d28 <__aeabi_dadd+0x374>)
 8000b9a:	1c72      	adds	r2, r6, #1
 8000b9c:	4222      	tst	r2, r4
 8000b9e:	d000      	beq.n	8000ba2 <__aeabi_dadd+0x1ee>
 8000ba0:	e0e0      	b.n	8000d64 <__aeabi_dadd+0x3b0>
 8000ba2:	000a      	movs	r2, r1
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d000      	beq.n	8000bac <__aeabi_dadd+0x1f8>
 8000baa:	e174      	b.n	8000e96 <__aeabi_dadd+0x4e2>
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_dadd+0x1fe>
 8000bb0:	e1d0      	b.n	8000f54 <__aeabi_dadd+0x5a0>
 8000bb2:	464a      	mov	r2, r9
 8000bb4:	4302      	orrs	r2, r0
 8000bb6:	d000      	beq.n	8000bba <__aeabi_dadd+0x206>
 8000bb8:	e1e3      	b.n	8000f82 <__aeabi_dadd+0x5ce>
 8000bba:	074a      	lsls	r2, r1, #29
 8000bbc:	08db      	lsrs	r3, r3, #3
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	08c9      	lsrs	r1, r1, #3
 8000bc2:	e029      	b.n	8000c18 <__aeabi_dadd+0x264>
 8000bc4:	464a      	mov	r2, r9
 8000bc6:	4302      	orrs	r2, r0
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_dadd+0x218>
 8000bca:	e17d      	b.n	8000ec8 <__aeabi_dadd+0x514>
 8000bcc:	1e7a      	subs	r2, r7, #1
 8000bce:	2f01      	cmp	r7, #1
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dadd+0x220>
 8000bd2:	e0e0      	b.n	8000d96 <__aeabi_dadd+0x3e2>
 8000bd4:	4c52      	ldr	r4, [pc, #328]	; (8000d20 <__aeabi_dadd+0x36c>)
 8000bd6:	42a7      	cmp	r7, r4
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_dadd+0x228>
 8000bda:	e166      	b.n	8000eaa <__aeabi_dadd+0x4f6>
 8000bdc:	0017      	movs	r7, r2
 8000bde:	e7b2      	b.n	8000b46 <__aeabi_dadd+0x192>
 8000be0:	0010      	movs	r0, r2
 8000be2:	3b1f      	subs	r3, #31
 8000be4:	40d8      	lsrs	r0, r3
 8000be6:	2920      	cmp	r1, #32
 8000be8:	d003      	beq.n	8000bf2 <__aeabi_dadd+0x23e>
 8000bea:	2340      	movs	r3, #64	; 0x40
 8000bec:	1a5b      	subs	r3, r3, r1
 8000bee:	409a      	lsls	r2, r3
 8000bf0:	4314      	orrs	r4, r2
 8000bf2:	1e63      	subs	r3, r4, #1
 8000bf4:	419c      	sbcs	r4, r3
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2600      	movs	r6, #0
 8000bfa:	469a      	mov	sl, r3
 8000bfc:	4304      	orrs	r4, r0
 8000bfe:	0763      	lsls	r3, r4, #29
 8000c00:	d000      	beq.n	8000c04 <__aeabi_dadd+0x250>
 8000c02:	e755      	b.n	8000ab0 <__aeabi_dadd+0xfc>
 8000c04:	4652      	mov	r2, sl
 8000c06:	08e3      	lsrs	r3, r4, #3
 8000c08:	0752      	lsls	r2, r2, #29
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	4652      	mov	r2, sl
 8000c0e:	0037      	movs	r7, r6
 8000c10:	08d1      	lsrs	r1, r2, #3
 8000c12:	4a43      	ldr	r2, [pc, #268]	; (8000d20 <__aeabi_dadd+0x36c>)
 8000c14:	4297      	cmp	r7, r2
 8000c16:	d01f      	beq.n	8000c58 <__aeabi_dadd+0x2a4>
 8000c18:	0309      	lsls	r1, r1, #12
 8000c1a:	057a      	lsls	r2, r7, #21
 8000c1c:	0b0c      	lsrs	r4, r1, #12
 8000c1e:	0d52      	lsrs	r2, r2, #21
 8000c20:	e764      	b.n	8000aec <__aeabi_dadd+0x138>
 8000c22:	4642      	mov	r2, r8
 8000c24:	464c      	mov	r4, r9
 8000c26:	4314      	orrs	r4, r2
 8000c28:	1e62      	subs	r2, r4, #1
 8000c2a:	4194      	sbcs	r4, r2
 8000c2c:	18e4      	adds	r4, r4, r3
 8000c2e:	429c      	cmp	r4, r3
 8000c30:	4192      	sbcs	r2, r2
 8000c32:	4252      	negs	r2, r2
 8000c34:	4692      	mov	sl, r2
 8000c36:	448a      	add	sl, r1
 8000c38:	4653      	mov	r3, sl
 8000c3a:	021b      	lsls	r3, r3, #8
 8000c3c:	d5df      	bpl.n	8000bfe <__aeabi_dadd+0x24a>
 8000c3e:	4b38      	ldr	r3, [pc, #224]	; (8000d20 <__aeabi_dadd+0x36c>)
 8000c40:	3601      	adds	r6, #1
 8000c42:	429e      	cmp	r6, r3
 8000c44:	d000      	beq.n	8000c48 <__aeabi_dadd+0x294>
 8000c46:	e0b3      	b.n	8000db0 <__aeabi_dadd+0x3fc>
 8000c48:	0032      	movs	r2, r6
 8000c4a:	2400      	movs	r4, #0
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	e74d      	b.n	8000aec <__aeabi_dadd+0x138>
 8000c50:	074a      	lsls	r2, r1, #29
 8000c52:	08db      	lsrs	r3, r3, #3
 8000c54:	4313      	orrs	r3, r2
 8000c56:	08c9      	lsrs	r1, r1, #3
 8000c58:	001a      	movs	r2, r3
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_dadd+0x2ac>
 8000c5e:	e200      	b.n	8001062 <__aeabi_dadd+0x6ae>
 8000c60:	2480      	movs	r4, #128	; 0x80
 8000c62:	0324      	lsls	r4, r4, #12
 8000c64:	430c      	orrs	r4, r1
 8000c66:	0324      	lsls	r4, r4, #12
 8000c68:	4a2d      	ldr	r2, [pc, #180]	; (8000d20 <__aeabi_dadd+0x36c>)
 8000c6a:	0b24      	lsrs	r4, r4, #12
 8000c6c:	e73e      	b.n	8000aec <__aeabi_dadd+0x138>
 8000c6e:	0020      	movs	r0, r4
 8000c70:	f001 fd30 	bl	80026d4 <__clzsi2>
 8000c74:	0003      	movs	r3, r0
 8000c76:	3318      	adds	r3, #24
 8000c78:	2b1f      	cmp	r3, #31
 8000c7a:	dc00      	bgt.n	8000c7e <__aeabi_dadd+0x2ca>
 8000c7c:	e6f7      	b.n	8000a6e <__aeabi_dadd+0xba>
 8000c7e:	0022      	movs	r2, r4
 8000c80:	3808      	subs	r0, #8
 8000c82:	4082      	lsls	r2, r0
 8000c84:	2400      	movs	r4, #0
 8000c86:	42b3      	cmp	r3, r6
 8000c88:	db00      	blt.n	8000c8c <__aeabi_dadd+0x2d8>
 8000c8a:	e6fc      	b.n	8000a86 <__aeabi_dadd+0xd2>
 8000c8c:	1af6      	subs	r6, r6, r3
 8000c8e:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <__aeabi_dadd+0x370>)
 8000c90:	401a      	ands	r2, r3
 8000c92:	4692      	mov	sl, r2
 8000c94:	e70a      	b.n	8000aac <__aeabi_dadd+0xf8>
 8000c96:	2f00      	cmp	r7, #0
 8000c98:	d02b      	beq.n	8000cf2 <__aeabi_dadd+0x33e>
 8000c9a:	1b97      	subs	r7, r2, r6
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dadd+0x2ee>
 8000ca0:	e0b8      	b.n	8000e14 <__aeabi_dadd+0x460>
 8000ca2:	4c1f      	ldr	r4, [pc, #124]	; (8000d20 <__aeabi_dadd+0x36c>)
 8000ca4:	42a2      	cmp	r2, r4
 8000ca6:	d100      	bne.n	8000caa <__aeabi_dadd+0x2f6>
 8000ca8:	e11c      	b.n	8000ee4 <__aeabi_dadd+0x530>
 8000caa:	2480      	movs	r4, #128	; 0x80
 8000cac:	0424      	lsls	r4, r4, #16
 8000cae:	4321      	orrs	r1, r4
 8000cb0:	2f38      	cmp	r7, #56	; 0x38
 8000cb2:	dd00      	ble.n	8000cb6 <__aeabi_dadd+0x302>
 8000cb4:	e11e      	b.n	8000ef4 <__aeabi_dadd+0x540>
 8000cb6:	2f1f      	cmp	r7, #31
 8000cb8:	dd00      	ble.n	8000cbc <__aeabi_dadd+0x308>
 8000cba:	e19e      	b.n	8000ffa <__aeabi_dadd+0x646>
 8000cbc:	2620      	movs	r6, #32
 8000cbe:	000c      	movs	r4, r1
 8000cc0:	1bf6      	subs	r6, r6, r7
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	40b3      	lsls	r3, r6
 8000cc6:	40b4      	lsls	r4, r6
 8000cc8:	40f8      	lsrs	r0, r7
 8000cca:	1e5e      	subs	r6, r3, #1
 8000ccc:	41b3      	sbcs	r3, r6
 8000cce:	40f9      	lsrs	r1, r7
 8000cd0:	4304      	orrs	r4, r0
 8000cd2:	431c      	orrs	r4, r3
 8000cd4:	4489      	add	r9, r1
 8000cd6:	4444      	add	r4, r8
 8000cd8:	4544      	cmp	r4, r8
 8000cda:	419b      	sbcs	r3, r3
 8000cdc:	425b      	negs	r3, r3
 8000cde:	444b      	add	r3, r9
 8000ce0:	469a      	mov	sl, r3
 8000ce2:	0016      	movs	r6, r2
 8000ce4:	e7a8      	b.n	8000c38 <__aeabi_dadd+0x284>
 8000ce6:	4642      	mov	r2, r8
 8000ce8:	464c      	mov	r4, r9
 8000cea:	4314      	orrs	r4, r2
 8000cec:	1e62      	subs	r2, r4, #1
 8000cee:	4194      	sbcs	r4, r2
 8000cf0:	e6a6      	b.n	8000a40 <__aeabi_dadd+0x8c>
 8000cf2:	4c0d      	ldr	r4, [pc, #52]	; (8000d28 <__aeabi_dadd+0x374>)
 8000cf4:	1c72      	adds	r2, r6, #1
 8000cf6:	4222      	tst	r2, r4
 8000cf8:	d000      	beq.n	8000cfc <__aeabi_dadd+0x348>
 8000cfa:	e0a8      	b.n	8000e4e <__aeabi_dadd+0x49a>
 8000cfc:	000a      	movs	r2, r1
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d000      	beq.n	8000d06 <__aeabi_dadd+0x352>
 8000d04:	e10a      	b.n	8000f1c <__aeabi_dadd+0x568>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	d100      	bne.n	8000d0c <__aeabi_dadd+0x358>
 8000d0a:	e15e      	b.n	8000fca <__aeabi_dadd+0x616>
 8000d0c:	464a      	mov	r2, r9
 8000d0e:	4302      	orrs	r2, r0
 8000d10:	d000      	beq.n	8000d14 <__aeabi_dadd+0x360>
 8000d12:	e161      	b.n	8000fd8 <__aeabi_dadd+0x624>
 8000d14:	074a      	lsls	r2, r1, #29
 8000d16:	08db      	lsrs	r3, r3, #3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	08c9      	lsrs	r1, r1, #3
 8000d1c:	e77c      	b.n	8000c18 <__aeabi_dadd+0x264>
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	000007ff 	.word	0x000007ff
 8000d24:	ff7fffff 	.word	0xff7fffff
 8000d28:	000007fe 	.word	0x000007fe
 8000d2c:	4ccf      	ldr	r4, [pc, #828]	; (800106c <__aeabi_dadd+0x6b8>)
 8000d2e:	42a2      	cmp	r2, r4
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dadd+0x380>
 8000d32:	e0ce      	b.n	8000ed2 <__aeabi_dadd+0x51e>
 8000d34:	2480      	movs	r4, #128	; 0x80
 8000d36:	0424      	lsls	r4, r4, #16
 8000d38:	4321      	orrs	r1, r4
 8000d3a:	2f38      	cmp	r7, #56	; 0x38
 8000d3c:	dc5b      	bgt.n	8000df6 <__aeabi_dadd+0x442>
 8000d3e:	2f1f      	cmp	r7, #31
 8000d40:	dd00      	ble.n	8000d44 <__aeabi_dadd+0x390>
 8000d42:	e0dc      	b.n	8000efe <__aeabi_dadd+0x54a>
 8000d44:	2520      	movs	r5, #32
 8000d46:	000c      	movs	r4, r1
 8000d48:	1bed      	subs	r5, r5, r7
 8000d4a:	001e      	movs	r6, r3
 8000d4c:	40ab      	lsls	r3, r5
 8000d4e:	40ac      	lsls	r4, r5
 8000d50:	40fe      	lsrs	r6, r7
 8000d52:	1e5d      	subs	r5, r3, #1
 8000d54:	41ab      	sbcs	r3, r5
 8000d56:	4334      	orrs	r4, r6
 8000d58:	40f9      	lsrs	r1, r7
 8000d5a:	431c      	orrs	r4, r3
 8000d5c:	464b      	mov	r3, r9
 8000d5e:	1a5b      	subs	r3, r3, r1
 8000d60:	4699      	mov	r9, r3
 8000d62:	e04c      	b.n	8000dfe <__aeabi_dadd+0x44a>
 8000d64:	464a      	mov	r2, r9
 8000d66:	1a1c      	subs	r4, r3, r0
 8000d68:	1a88      	subs	r0, r1, r2
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	4192      	sbcs	r2, r2
 8000d6e:	4252      	negs	r2, r2
 8000d70:	4692      	mov	sl, r2
 8000d72:	0002      	movs	r2, r0
 8000d74:	4650      	mov	r0, sl
 8000d76:	1a12      	subs	r2, r2, r0
 8000d78:	4692      	mov	sl, r2
 8000d7a:	0212      	lsls	r2, r2, #8
 8000d7c:	d478      	bmi.n	8000e70 <__aeabi_dadd+0x4bc>
 8000d7e:	4653      	mov	r3, sl
 8000d80:	4323      	orrs	r3, r4
 8000d82:	d000      	beq.n	8000d86 <__aeabi_dadd+0x3d2>
 8000d84:	e66a      	b.n	8000a5c <__aeabi_dadd+0xa8>
 8000d86:	2100      	movs	r1, #0
 8000d88:	2500      	movs	r5, #0
 8000d8a:	e745      	b.n	8000c18 <__aeabi_dadd+0x264>
 8000d8c:	074a      	lsls	r2, r1, #29
 8000d8e:	08db      	lsrs	r3, r3, #3
 8000d90:	4313      	orrs	r3, r2
 8000d92:	08c9      	lsrs	r1, r1, #3
 8000d94:	e73d      	b.n	8000c12 <__aeabi_dadd+0x25e>
 8000d96:	181c      	adds	r4, r3, r0
 8000d98:	429c      	cmp	r4, r3
 8000d9a:	419b      	sbcs	r3, r3
 8000d9c:	4449      	add	r1, r9
 8000d9e:	468a      	mov	sl, r1
 8000da0:	425b      	negs	r3, r3
 8000da2:	449a      	add	sl, r3
 8000da4:	4653      	mov	r3, sl
 8000da6:	2601      	movs	r6, #1
 8000da8:	021b      	lsls	r3, r3, #8
 8000daa:	d400      	bmi.n	8000dae <__aeabi_dadd+0x3fa>
 8000dac:	e727      	b.n	8000bfe <__aeabi_dadd+0x24a>
 8000dae:	2602      	movs	r6, #2
 8000db0:	4652      	mov	r2, sl
 8000db2:	4baf      	ldr	r3, [pc, #700]	; (8001070 <__aeabi_dadd+0x6bc>)
 8000db4:	2101      	movs	r1, #1
 8000db6:	401a      	ands	r2, r3
 8000db8:	0013      	movs	r3, r2
 8000dba:	4021      	ands	r1, r4
 8000dbc:	0862      	lsrs	r2, r4, #1
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	07dc      	lsls	r4, r3, #31
 8000dc2:	085b      	lsrs	r3, r3, #1
 8000dc4:	469a      	mov	sl, r3
 8000dc6:	4314      	orrs	r4, r2
 8000dc8:	e670      	b.n	8000aac <__aeabi_dadd+0xf8>
 8000dca:	003a      	movs	r2, r7
 8000dcc:	464c      	mov	r4, r9
 8000dce:	3a20      	subs	r2, #32
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	46a4      	mov	ip, r4
 8000dd4:	2f20      	cmp	r7, #32
 8000dd6:	d007      	beq.n	8000de8 <__aeabi_dadd+0x434>
 8000dd8:	2240      	movs	r2, #64	; 0x40
 8000dda:	4648      	mov	r0, r9
 8000ddc:	1bd2      	subs	r2, r2, r7
 8000dde:	4090      	lsls	r0, r2
 8000de0:	0002      	movs	r2, r0
 8000de2:	4640      	mov	r0, r8
 8000de4:	4310      	orrs	r0, r2
 8000de6:	4680      	mov	r8, r0
 8000de8:	4640      	mov	r0, r8
 8000dea:	1e42      	subs	r2, r0, #1
 8000dec:	4190      	sbcs	r0, r2
 8000dee:	4662      	mov	r2, ip
 8000df0:	0004      	movs	r4, r0
 8000df2:	4314      	orrs	r4, r2
 8000df4:	e624      	b.n	8000a40 <__aeabi_dadd+0x8c>
 8000df6:	4319      	orrs	r1, r3
 8000df8:	000c      	movs	r4, r1
 8000dfa:	1e63      	subs	r3, r4, #1
 8000dfc:	419c      	sbcs	r4, r3
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1b1c      	subs	r4, r3, r4
 8000e02:	45a0      	cmp	r8, r4
 8000e04:	419b      	sbcs	r3, r3
 8000e06:	4649      	mov	r1, r9
 8000e08:	425b      	negs	r3, r3
 8000e0a:	1acb      	subs	r3, r1, r3
 8000e0c:	469a      	mov	sl, r3
 8000e0e:	4665      	mov	r5, ip
 8000e10:	0016      	movs	r6, r2
 8000e12:	e61b      	b.n	8000a4c <__aeabi_dadd+0x98>
 8000e14:	000c      	movs	r4, r1
 8000e16:	431c      	orrs	r4, r3
 8000e18:	d100      	bne.n	8000e1c <__aeabi_dadd+0x468>
 8000e1a:	e0c7      	b.n	8000fac <__aeabi_dadd+0x5f8>
 8000e1c:	1e7c      	subs	r4, r7, #1
 8000e1e:	2f01      	cmp	r7, #1
 8000e20:	d100      	bne.n	8000e24 <__aeabi_dadd+0x470>
 8000e22:	e0f9      	b.n	8001018 <__aeabi_dadd+0x664>
 8000e24:	4e91      	ldr	r6, [pc, #580]	; (800106c <__aeabi_dadd+0x6b8>)
 8000e26:	42b7      	cmp	r7, r6
 8000e28:	d05c      	beq.n	8000ee4 <__aeabi_dadd+0x530>
 8000e2a:	0027      	movs	r7, r4
 8000e2c:	e740      	b.n	8000cb0 <__aeabi_dadd+0x2fc>
 8000e2e:	2220      	movs	r2, #32
 8000e30:	464c      	mov	r4, r9
 8000e32:	4640      	mov	r0, r8
 8000e34:	1bd2      	subs	r2, r2, r7
 8000e36:	4094      	lsls	r4, r2
 8000e38:	40f8      	lsrs	r0, r7
 8000e3a:	4304      	orrs	r4, r0
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	4090      	lsls	r0, r2
 8000e40:	1e42      	subs	r2, r0, #1
 8000e42:	4190      	sbcs	r0, r2
 8000e44:	464a      	mov	r2, r9
 8000e46:	40fa      	lsrs	r2, r7
 8000e48:	4304      	orrs	r4, r0
 8000e4a:	1889      	adds	r1, r1, r2
 8000e4c:	e6ee      	b.n	8000c2c <__aeabi_dadd+0x278>
 8000e4e:	4c87      	ldr	r4, [pc, #540]	; (800106c <__aeabi_dadd+0x6b8>)
 8000e50:	42a2      	cmp	r2, r4
 8000e52:	d100      	bne.n	8000e56 <__aeabi_dadd+0x4a2>
 8000e54:	e6f9      	b.n	8000c4a <__aeabi_dadd+0x296>
 8000e56:	1818      	adds	r0, r3, r0
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	419b      	sbcs	r3, r3
 8000e5c:	4449      	add	r1, r9
 8000e5e:	425b      	negs	r3, r3
 8000e60:	18cb      	adds	r3, r1, r3
 8000e62:	07dc      	lsls	r4, r3, #31
 8000e64:	0840      	lsrs	r0, r0, #1
 8000e66:	085b      	lsrs	r3, r3, #1
 8000e68:	469a      	mov	sl, r3
 8000e6a:	0016      	movs	r6, r2
 8000e6c:	4304      	orrs	r4, r0
 8000e6e:	e6c6      	b.n	8000bfe <__aeabi_dadd+0x24a>
 8000e70:	4642      	mov	r2, r8
 8000e72:	1ad4      	subs	r4, r2, r3
 8000e74:	45a0      	cmp	r8, r4
 8000e76:	4180      	sbcs	r0, r0
 8000e78:	464b      	mov	r3, r9
 8000e7a:	4240      	negs	r0, r0
 8000e7c:	1a59      	subs	r1, r3, r1
 8000e7e:	1a0b      	subs	r3, r1, r0
 8000e80:	469a      	mov	sl, r3
 8000e82:	4665      	mov	r5, ip
 8000e84:	e5ea      	b.n	8000a5c <__aeabi_dadd+0xa8>
 8000e86:	464b      	mov	r3, r9
 8000e88:	464a      	mov	r2, r9
 8000e8a:	08c0      	lsrs	r0, r0, #3
 8000e8c:	075b      	lsls	r3, r3, #29
 8000e8e:	4665      	mov	r5, ip
 8000e90:	4303      	orrs	r3, r0
 8000e92:	08d1      	lsrs	r1, r2, #3
 8000e94:	e6bd      	b.n	8000c12 <__aeabi_dadd+0x25e>
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	d000      	beq.n	8000e9c <__aeabi_dadd+0x4e8>
 8000e9a:	e08e      	b.n	8000fba <__aeabi_dadd+0x606>
 8000e9c:	464b      	mov	r3, r9
 8000e9e:	4303      	orrs	r3, r0
 8000ea0:	d117      	bne.n	8000ed2 <__aeabi_dadd+0x51e>
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	2500      	movs	r5, #0
 8000ea6:	0309      	lsls	r1, r1, #12
 8000ea8:	e6da      	b.n	8000c60 <__aeabi_dadd+0x2ac>
 8000eaa:	074a      	lsls	r2, r1, #29
 8000eac:	08db      	lsrs	r3, r3, #3
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	08c9      	lsrs	r1, r1, #3
 8000eb2:	e6d1      	b.n	8000c58 <__aeabi_dadd+0x2a4>
 8000eb4:	1a1c      	subs	r4, r3, r0
 8000eb6:	464a      	mov	r2, r9
 8000eb8:	42a3      	cmp	r3, r4
 8000eba:	419b      	sbcs	r3, r3
 8000ebc:	1a89      	subs	r1, r1, r2
 8000ebe:	425b      	negs	r3, r3
 8000ec0:	1acb      	subs	r3, r1, r3
 8000ec2:	469a      	mov	sl, r3
 8000ec4:	2601      	movs	r6, #1
 8000ec6:	e5c1      	b.n	8000a4c <__aeabi_dadd+0x98>
 8000ec8:	074a      	lsls	r2, r1, #29
 8000eca:	08db      	lsrs	r3, r3, #3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	08c9      	lsrs	r1, r1, #3
 8000ed0:	e69f      	b.n	8000c12 <__aeabi_dadd+0x25e>
 8000ed2:	4643      	mov	r3, r8
 8000ed4:	08d8      	lsrs	r0, r3, #3
 8000ed6:	464b      	mov	r3, r9
 8000ed8:	464a      	mov	r2, r9
 8000eda:	075b      	lsls	r3, r3, #29
 8000edc:	4665      	mov	r5, ip
 8000ede:	4303      	orrs	r3, r0
 8000ee0:	08d1      	lsrs	r1, r2, #3
 8000ee2:	e6b9      	b.n	8000c58 <__aeabi_dadd+0x2a4>
 8000ee4:	4643      	mov	r3, r8
 8000ee6:	08d8      	lsrs	r0, r3, #3
 8000ee8:	464b      	mov	r3, r9
 8000eea:	464a      	mov	r2, r9
 8000eec:	075b      	lsls	r3, r3, #29
 8000eee:	4303      	orrs	r3, r0
 8000ef0:	08d1      	lsrs	r1, r2, #3
 8000ef2:	e6b1      	b.n	8000c58 <__aeabi_dadd+0x2a4>
 8000ef4:	4319      	orrs	r1, r3
 8000ef6:	000c      	movs	r4, r1
 8000ef8:	1e63      	subs	r3, r4, #1
 8000efa:	419c      	sbcs	r4, r3
 8000efc:	e6eb      	b.n	8000cd6 <__aeabi_dadd+0x322>
 8000efe:	003c      	movs	r4, r7
 8000f00:	000d      	movs	r5, r1
 8000f02:	3c20      	subs	r4, #32
 8000f04:	40e5      	lsrs	r5, r4
 8000f06:	2f20      	cmp	r7, #32
 8000f08:	d003      	beq.n	8000f12 <__aeabi_dadd+0x55e>
 8000f0a:	2440      	movs	r4, #64	; 0x40
 8000f0c:	1be4      	subs	r4, r4, r7
 8000f0e:	40a1      	lsls	r1, r4
 8000f10:	430b      	orrs	r3, r1
 8000f12:	001c      	movs	r4, r3
 8000f14:	1e63      	subs	r3, r4, #1
 8000f16:	419c      	sbcs	r4, r3
 8000f18:	432c      	orrs	r4, r5
 8000f1a:	e770      	b.n	8000dfe <__aeabi_dadd+0x44a>
 8000f1c:	2a00      	cmp	r2, #0
 8000f1e:	d0e1      	beq.n	8000ee4 <__aeabi_dadd+0x530>
 8000f20:	464a      	mov	r2, r9
 8000f22:	4302      	orrs	r2, r0
 8000f24:	d0c1      	beq.n	8000eaa <__aeabi_dadd+0x4f6>
 8000f26:	074a      	lsls	r2, r1, #29
 8000f28:	08db      	lsrs	r3, r3, #3
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	2280      	movs	r2, #128	; 0x80
 8000f2e:	08c9      	lsrs	r1, r1, #3
 8000f30:	0312      	lsls	r2, r2, #12
 8000f32:	4211      	tst	r1, r2
 8000f34:	d008      	beq.n	8000f48 <__aeabi_dadd+0x594>
 8000f36:	4648      	mov	r0, r9
 8000f38:	08c4      	lsrs	r4, r0, #3
 8000f3a:	4214      	tst	r4, r2
 8000f3c:	d104      	bne.n	8000f48 <__aeabi_dadd+0x594>
 8000f3e:	4643      	mov	r3, r8
 8000f40:	0021      	movs	r1, r4
 8000f42:	08db      	lsrs	r3, r3, #3
 8000f44:	0742      	lsls	r2, r0, #29
 8000f46:	4313      	orrs	r3, r2
 8000f48:	0f5a      	lsrs	r2, r3, #29
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	0752      	lsls	r2, r2, #29
 8000f4e:	08db      	lsrs	r3, r3, #3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	e681      	b.n	8000c58 <__aeabi_dadd+0x2a4>
 8000f54:	464b      	mov	r3, r9
 8000f56:	4303      	orrs	r3, r0
 8000f58:	d100      	bne.n	8000f5c <__aeabi_dadd+0x5a8>
 8000f5a:	e714      	b.n	8000d86 <__aeabi_dadd+0x3d2>
 8000f5c:	464b      	mov	r3, r9
 8000f5e:	464a      	mov	r2, r9
 8000f60:	08c0      	lsrs	r0, r0, #3
 8000f62:	075b      	lsls	r3, r3, #29
 8000f64:	4665      	mov	r5, ip
 8000f66:	4303      	orrs	r3, r0
 8000f68:	08d1      	lsrs	r1, r2, #3
 8000f6a:	e655      	b.n	8000c18 <__aeabi_dadd+0x264>
 8000f6c:	1ac4      	subs	r4, r0, r3
 8000f6e:	45a0      	cmp	r8, r4
 8000f70:	4180      	sbcs	r0, r0
 8000f72:	464b      	mov	r3, r9
 8000f74:	4240      	negs	r0, r0
 8000f76:	1a59      	subs	r1, r3, r1
 8000f78:	1a0b      	subs	r3, r1, r0
 8000f7a:	469a      	mov	sl, r3
 8000f7c:	4665      	mov	r5, ip
 8000f7e:	2601      	movs	r6, #1
 8000f80:	e564      	b.n	8000a4c <__aeabi_dadd+0x98>
 8000f82:	1a1c      	subs	r4, r3, r0
 8000f84:	464a      	mov	r2, r9
 8000f86:	42a3      	cmp	r3, r4
 8000f88:	4180      	sbcs	r0, r0
 8000f8a:	1a8a      	subs	r2, r1, r2
 8000f8c:	4240      	negs	r0, r0
 8000f8e:	1a12      	subs	r2, r2, r0
 8000f90:	4692      	mov	sl, r2
 8000f92:	0212      	lsls	r2, r2, #8
 8000f94:	d549      	bpl.n	800102a <__aeabi_dadd+0x676>
 8000f96:	4642      	mov	r2, r8
 8000f98:	1ad4      	subs	r4, r2, r3
 8000f9a:	45a0      	cmp	r8, r4
 8000f9c:	4180      	sbcs	r0, r0
 8000f9e:	464b      	mov	r3, r9
 8000fa0:	4240      	negs	r0, r0
 8000fa2:	1a59      	subs	r1, r3, r1
 8000fa4:	1a0b      	subs	r3, r1, r0
 8000fa6:	469a      	mov	sl, r3
 8000fa8:	4665      	mov	r5, ip
 8000faa:	e57f      	b.n	8000aac <__aeabi_dadd+0xf8>
 8000fac:	464b      	mov	r3, r9
 8000fae:	464a      	mov	r2, r9
 8000fb0:	08c0      	lsrs	r0, r0, #3
 8000fb2:	075b      	lsls	r3, r3, #29
 8000fb4:	4303      	orrs	r3, r0
 8000fb6:	08d1      	lsrs	r1, r2, #3
 8000fb8:	e62b      	b.n	8000c12 <__aeabi_dadd+0x25e>
 8000fba:	464a      	mov	r2, r9
 8000fbc:	08db      	lsrs	r3, r3, #3
 8000fbe:	4302      	orrs	r2, r0
 8000fc0:	d138      	bne.n	8001034 <__aeabi_dadd+0x680>
 8000fc2:	074a      	lsls	r2, r1, #29
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	08c9      	lsrs	r1, r1, #3
 8000fc8:	e646      	b.n	8000c58 <__aeabi_dadd+0x2a4>
 8000fca:	464b      	mov	r3, r9
 8000fcc:	464a      	mov	r2, r9
 8000fce:	08c0      	lsrs	r0, r0, #3
 8000fd0:	075b      	lsls	r3, r3, #29
 8000fd2:	4303      	orrs	r3, r0
 8000fd4:	08d1      	lsrs	r1, r2, #3
 8000fd6:	e61f      	b.n	8000c18 <__aeabi_dadd+0x264>
 8000fd8:	181c      	adds	r4, r3, r0
 8000fda:	429c      	cmp	r4, r3
 8000fdc:	419b      	sbcs	r3, r3
 8000fde:	4449      	add	r1, r9
 8000fe0:	468a      	mov	sl, r1
 8000fe2:	425b      	negs	r3, r3
 8000fe4:	449a      	add	sl, r3
 8000fe6:	4653      	mov	r3, sl
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	d400      	bmi.n	8000fee <__aeabi_dadd+0x63a>
 8000fec:	e607      	b.n	8000bfe <__aeabi_dadd+0x24a>
 8000fee:	4652      	mov	r2, sl
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <__aeabi_dadd+0x6bc>)
 8000ff2:	2601      	movs	r6, #1
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	4692      	mov	sl, r2
 8000ff8:	e601      	b.n	8000bfe <__aeabi_dadd+0x24a>
 8000ffa:	003c      	movs	r4, r7
 8000ffc:	000e      	movs	r6, r1
 8000ffe:	3c20      	subs	r4, #32
 8001000:	40e6      	lsrs	r6, r4
 8001002:	2f20      	cmp	r7, #32
 8001004:	d003      	beq.n	800100e <__aeabi_dadd+0x65a>
 8001006:	2440      	movs	r4, #64	; 0x40
 8001008:	1be4      	subs	r4, r4, r7
 800100a:	40a1      	lsls	r1, r4
 800100c:	430b      	orrs	r3, r1
 800100e:	001c      	movs	r4, r3
 8001010:	1e63      	subs	r3, r4, #1
 8001012:	419c      	sbcs	r4, r3
 8001014:	4334      	orrs	r4, r6
 8001016:	e65e      	b.n	8000cd6 <__aeabi_dadd+0x322>
 8001018:	4443      	add	r3, r8
 800101a:	4283      	cmp	r3, r0
 800101c:	4180      	sbcs	r0, r0
 800101e:	4449      	add	r1, r9
 8001020:	468a      	mov	sl, r1
 8001022:	4240      	negs	r0, r0
 8001024:	001c      	movs	r4, r3
 8001026:	4482      	add	sl, r0
 8001028:	e6bc      	b.n	8000da4 <__aeabi_dadd+0x3f0>
 800102a:	4653      	mov	r3, sl
 800102c:	4323      	orrs	r3, r4
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x67e>
 8001030:	e6a9      	b.n	8000d86 <__aeabi_dadd+0x3d2>
 8001032:	e5e4      	b.n	8000bfe <__aeabi_dadd+0x24a>
 8001034:	074a      	lsls	r2, r1, #29
 8001036:	4313      	orrs	r3, r2
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	08c9      	lsrs	r1, r1, #3
 800103c:	0312      	lsls	r2, r2, #12
 800103e:	4211      	tst	r1, r2
 8001040:	d009      	beq.n	8001056 <__aeabi_dadd+0x6a2>
 8001042:	4648      	mov	r0, r9
 8001044:	08c4      	lsrs	r4, r0, #3
 8001046:	4214      	tst	r4, r2
 8001048:	d105      	bne.n	8001056 <__aeabi_dadd+0x6a2>
 800104a:	4643      	mov	r3, r8
 800104c:	4665      	mov	r5, ip
 800104e:	0021      	movs	r1, r4
 8001050:	08db      	lsrs	r3, r3, #3
 8001052:	0742      	lsls	r2, r0, #29
 8001054:	4313      	orrs	r3, r2
 8001056:	0f5a      	lsrs	r2, r3, #29
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	08db      	lsrs	r3, r3, #3
 800105c:	0752      	lsls	r2, r2, #29
 800105e:	4313      	orrs	r3, r2
 8001060:	e5fa      	b.n	8000c58 <__aeabi_dadd+0x2a4>
 8001062:	2300      	movs	r3, #0
 8001064:	4a01      	ldr	r2, [pc, #4]	; (800106c <__aeabi_dadd+0x6b8>)
 8001066:	001c      	movs	r4, r3
 8001068:	e540      	b.n	8000aec <__aeabi_dadd+0x138>
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	000007ff 	.word	0x000007ff
 8001070:	ff7fffff 	.word	0xff7fffff

08001074 <__aeabi_ddiv>:
 8001074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001076:	4657      	mov	r7, sl
 8001078:	464e      	mov	r6, r9
 800107a:	4645      	mov	r5, r8
 800107c:	46de      	mov	lr, fp
 800107e:	b5e0      	push	{r5, r6, r7, lr}
 8001080:	030c      	lsls	r4, r1, #12
 8001082:	001f      	movs	r7, r3
 8001084:	004b      	lsls	r3, r1, #1
 8001086:	4681      	mov	r9, r0
 8001088:	4692      	mov	sl, r2
 800108a:	0005      	movs	r5, r0
 800108c:	b085      	sub	sp, #20
 800108e:	0b24      	lsrs	r4, r4, #12
 8001090:	0d5b      	lsrs	r3, r3, #21
 8001092:	0fce      	lsrs	r6, r1, #31
 8001094:	2b00      	cmp	r3, #0
 8001096:	d100      	bne.n	800109a <__aeabi_ddiv+0x26>
 8001098:	e152      	b.n	8001340 <__aeabi_ddiv+0x2cc>
 800109a:	4ad2      	ldr	r2, [pc, #840]	; (80013e4 <__aeabi_ddiv+0x370>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d100      	bne.n	80010a2 <__aeabi_ddiv+0x2e>
 80010a0:	e16e      	b.n	8001380 <__aeabi_ddiv+0x30c>
 80010a2:	0f42      	lsrs	r2, r0, #29
 80010a4:	00e4      	lsls	r4, r4, #3
 80010a6:	4314      	orrs	r4, r2
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	0412      	lsls	r2, r2, #16
 80010ac:	4322      	orrs	r2, r4
 80010ae:	4690      	mov	r8, r2
 80010b0:	4acd      	ldr	r2, [pc, #820]	; (80013e8 <__aeabi_ddiv+0x374>)
 80010b2:	00c5      	lsls	r5, r0, #3
 80010b4:	4693      	mov	fp, r2
 80010b6:	449b      	add	fp, r3
 80010b8:	2300      	movs	r3, #0
 80010ba:	4699      	mov	r9, r3
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	033c      	lsls	r4, r7, #12
 80010c0:	007b      	lsls	r3, r7, #1
 80010c2:	4650      	mov	r0, sl
 80010c4:	0b24      	lsrs	r4, r4, #12
 80010c6:	0d5b      	lsrs	r3, r3, #21
 80010c8:	0fff      	lsrs	r7, r7, #31
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d100      	bne.n	80010d0 <__aeabi_ddiv+0x5c>
 80010ce:	e11a      	b.n	8001306 <__aeabi_ddiv+0x292>
 80010d0:	4ac4      	ldr	r2, [pc, #784]	; (80013e4 <__aeabi_ddiv+0x370>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d100      	bne.n	80010d8 <__aeabi_ddiv+0x64>
 80010d6:	e15e      	b.n	8001396 <__aeabi_ddiv+0x322>
 80010d8:	0f42      	lsrs	r2, r0, #29
 80010da:	00e4      	lsls	r4, r4, #3
 80010dc:	4322      	orrs	r2, r4
 80010de:	2480      	movs	r4, #128	; 0x80
 80010e0:	0424      	lsls	r4, r4, #16
 80010e2:	4314      	orrs	r4, r2
 80010e4:	4ac0      	ldr	r2, [pc, #768]	; (80013e8 <__aeabi_ddiv+0x374>)
 80010e6:	00c1      	lsls	r1, r0, #3
 80010e8:	4694      	mov	ip, r2
 80010ea:	465a      	mov	r2, fp
 80010ec:	4463      	add	r3, ip
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	469b      	mov	fp, r3
 80010f2:	2000      	movs	r0, #0
 80010f4:	0033      	movs	r3, r6
 80010f6:	407b      	eors	r3, r7
 80010f8:	469a      	mov	sl, r3
 80010fa:	464b      	mov	r3, r9
 80010fc:	2b0f      	cmp	r3, #15
 80010fe:	d827      	bhi.n	8001150 <__aeabi_ddiv+0xdc>
 8001100:	4aba      	ldr	r2, [pc, #744]	; (80013ec <__aeabi_ddiv+0x378>)
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	58d3      	ldr	r3, [r2, r3]
 8001106:	469f      	mov	pc, r3
 8001108:	46b2      	mov	sl, r6
 800110a:	9b00      	ldr	r3, [sp, #0]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d016      	beq.n	800113e <__aeabi_ddiv+0xca>
 8001110:	2b03      	cmp	r3, #3
 8001112:	d100      	bne.n	8001116 <__aeabi_ddiv+0xa2>
 8001114:	e287      	b.n	8001626 <__aeabi_ddiv+0x5b2>
 8001116:	2b01      	cmp	r3, #1
 8001118:	d000      	beq.n	800111c <__aeabi_ddiv+0xa8>
 800111a:	e0d5      	b.n	80012c8 <__aeabi_ddiv+0x254>
 800111c:	2300      	movs	r3, #0
 800111e:	2200      	movs	r2, #0
 8001120:	2500      	movs	r5, #0
 8001122:	051b      	lsls	r3, r3, #20
 8001124:	4313      	orrs	r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	07d2      	lsls	r2, r2, #31
 800112a:	4313      	orrs	r3, r2
 800112c:	0028      	movs	r0, r5
 800112e:	0019      	movs	r1, r3
 8001130:	b005      	add	sp, #20
 8001132:	bcf0      	pop	{r4, r5, r6, r7}
 8001134:	46bb      	mov	fp, r7
 8001136:	46b2      	mov	sl, r6
 8001138:	46a9      	mov	r9, r5
 800113a:	46a0      	mov	r8, r4
 800113c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800113e:	2200      	movs	r2, #0
 8001140:	2500      	movs	r5, #0
 8001142:	4ba8      	ldr	r3, [pc, #672]	; (80013e4 <__aeabi_ddiv+0x370>)
 8001144:	e7ed      	b.n	8001122 <__aeabi_ddiv+0xae>
 8001146:	46ba      	mov	sl, r7
 8001148:	46a0      	mov	r8, r4
 800114a:	000d      	movs	r5, r1
 800114c:	9000      	str	r0, [sp, #0]
 800114e:	e7dc      	b.n	800110a <__aeabi_ddiv+0x96>
 8001150:	4544      	cmp	r4, r8
 8001152:	d200      	bcs.n	8001156 <__aeabi_ddiv+0xe2>
 8001154:	e1c4      	b.n	80014e0 <__aeabi_ddiv+0x46c>
 8001156:	d100      	bne.n	800115a <__aeabi_ddiv+0xe6>
 8001158:	e1bf      	b.n	80014da <__aeabi_ddiv+0x466>
 800115a:	2301      	movs	r3, #1
 800115c:	425b      	negs	r3, r3
 800115e:	469c      	mov	ip, r3
 8001160:	002e      	movs	r6, r5
 8001162:	4640      	mov	r0, r8
 8001164:	2500      	movs	r5, #0
 8001166:	44e3      	add	fp, ip
 8001168:	0223      	lsls	r3, r4, #8
 800116a:	0e0c      	lsrs	r4, r1, #24
 800116c:	431c      	orrs	r4, r3
 800116e:	0c1b      	lsrs	r3, r3, #16
 8001170:	4699      	mov	r9, r3
 8001172:	0423      	lsls	r3, r4, #16
 8001174:	020a      	lsls	r2, r1, #8
 8001176:	0c1f      	lsrs	r7, r3, #16
 8001178:	4649      	mov	r1, r9
 800117a:	9200      	str	r2, [sp, #0]
 800117c:	9701      	str	r7, [sp, #4]
 800117e:	f7ff f865 	bl	800024c <__aeabi_uidivmod>
 8001182:	0002      	movs	r2, r0
 8001184:	437a      	muls	r2, r7
 8001186:	040b      	lsls	r3, r1, #16
 8001188:	0c31      	lsrs	r1, r6, #16
 800118a:	4680      	mov	r8, r0
 800118c:	4319      	orrs	r1, r3
 800118e:	428a      	cmp	r2, r1
 8001190:	d907      	bls.n	80011a2 <__aeabi_ddiv+0x12e>
 8001192:	2301      	movs	r3, #1
 8001194:	425b      	negs	r3, r3
 8001196:	469c      	mov	ip, r3
 8001198:	1909      	adds	r1, r1, r4
 800119a:	44e0      	add	r8, ip
 800119c:	428c      	cmp	r4, r1
 800119e:	d800      	bhi.n	80011a2 <__aeabi_ddiv+0x12e>
 80011a0:	e201      	b.n	80015a6 <__aeabi_ddiv+0x532>
 80011a2:	1a88      	subs	r0, r1, r2
 80011a4:	4649      	mov	r1, r9
 80011a6:	f7ff f851 	bl	800024c <__aeabi_uidivmod>
 80011aa:	9a01      	ldr	r2, [sp, #4]
 80011ac:	0436      	lsls	r6, r6, #16
 80011ae:	4342      	muls	r2, r0
 80011b0:	0409      	lsls	r1, r1, #16
 80011b2:	0c36      	lsrs	r6, r6, #16
 80011b4:	0003      	movs	r3, r0
 80011b6:	430e      	orrs	r6, r1
 80011b8:	42b2      	cmp	r2, r6
 80011ba:	d904      	bls.n	80011c6 <__aeabi_ddiv+0x152>
 80011bc:	1936      	adds	r6, r6, r4
 80011be:	3b01      	subs	r3, #1
 80011c0:	42b4      	cmp	r4, r6
 80011c2:	d800      	bhi.n	80011c6 <__aeabi_ddiv+0x152>
 80011c4:	e1e9      	b.n	800159a <__aeabi_ddiv+0x526>
 80011c6:	1ab0      	subs	r0, r6, r2
 80011c8:	4642      	mov	r2, r8
 80011ca:	9e00      	ldr	r6, [sp, #0]
 80011cc:	0412      	lsls	r2, r2, #16
 80011ce:	431a      	orrs	r2, r3
 80011d0:	0c33      	lsrs	r3, r6, #16
 80011d2:	001f      	movs	r7, r3
 80011d4:	0c11      	lsrs	r1, r2, #16
 80011d6:	4690      	mov	r8, r2
 80011d8:	9302      	str	r3, [sp, #8]
 80011da:	0413      	lsls	r3, r2, #16
 80011dc:	0432      	lsls	r2, r6, #16
 80011de:	0c16      	lsrs	r6, r2, #16
 80011e0:	0032      	movs	r2, r6
 80011e2:	0c1b      	lsrs	r3, r3, #16
 80011e4:	435a      	muls	r2, r3
 80011e6:	9603      	str	r6, [sp, #12]
 80011e8:	437b      	muls	r3, r7
 80011ea:	434e      	muls	r6, r1
 80011ec:	4379      	muls	r1, r7
 80011ee:	0c17      	lsrs	r7, r2, #16
 80011f0:	46bc      	mov	ip, r7
 80011f2:	199b      	adds	r3, r3, r6
 80011f4:	4463      	add	r3, ip
 80011f6:	429e      	cmp	r6, r3
 80011f8:	d903      	bls.n	8001202 <__aeabi_ddiv+0x18e>
 80011fa:	2680      	movs	r6, #128	; 0x80
 80011fc:	0276      	lsls	r6, r6, #9
 80011fe:	46b4      	mov	ip, r6
 8001200:	4461      	add	r1, ip
 8001202:	0c1e      	lsrs	r6, r3, #16
 8001204:	1871      	adds	r1, r6, r1
 8001206:	0416      	lsls	r6, r2, #16
 8001208:	041b      	lsls	r3, r3, #16
 800120a:	0c36      	lsrs	r6, r6, #16
 800120c:	199e      	adds	r6, r3, r6
 800120e:	4288      	cmp	r0, r1
 8001210:	d302      	bcc.n	8001218 <__aeabi_ddiv+0x1a4>
 8001212:	d112      	bne.n	800123a <__aeabi_ddiv+0x1c6>
 8001214:	42b5      	cmp	r5, r6
 8001216:	d210      	bcs.n	800123a <__aeabi_ddiv+0x1c6>
 8001218:	4643      	mov	r3, r8
 800121a:	1e5a      	subs	r2, r3, #1
 800121c:	9b00      	ldr	r3, [sp, #0]
 800121e:	469c      	mov	ip, r3
 8001220:	4465      	add	r5, ip
 8001222:	001f      	movs	r7, r3
 8001224:	429d      	cmp	r5, r3
 8001226:	419b      	sbcs	r3, r3
 8001228:	425b      	negs	r3, r3
 800122a:	191b      	adds	r3, r3, r4
 800122c:	18c0      	adds	r0, r0, r3
 800122e:	4284      	cmp	r4, r0
 8001230:	d200      	bcs.n	8001234 <__aeabi_ddiv+0x1c0>
 8001232:	e19e      	b.n	8001572 <__aeabi_ddiv+0x4fe>
 8001234:	d100      	bne.n	8001238 <__aeabi_ddiv+0x1c4>
 8001236:	e199      	b.n	800156c <__aeabi_ddiv+0x4f8>
 8001238:	4690      	mov	r8, r2
 800123a:	1bae      	subs	r6, r5, r6
 800123c:	42b5      	cmp	r5, r6
 800123e:	41ad      	sbcs	r5, r5
 8001240:	1a40      	subs	r0, r0, r1
 8001242:	426d      	negs	r5, r5
 8001244:	1b40      	subs	r0, r0, r5
 8001246:	4284      	cmp	r4, r0
 8001248:	d100      	bne.n	800124c <__aeabi_ddiv+0x1d8>
 800124a:	e1d2      	b.n	80015f2 <__aeabi_ddiv+0x57e>
 800124c:	4649      	mov	r1, r9
 800124e:	f7fe fffd 	bl	800024c <__aeabi_uidivmod>
 8001252:	9a01      	ldr	r2, [sp, #4]
 8001254:	040b      	lsls	r3, r1, #16
 8001256:	4342      	muls	r2, r0
 8001258:	0c31      	lsrs	r1, r6, #16
 800125a:	0005      	movs	r5, r0
 800125c:	4319      	orrs	r1, r3
 800125e:	428a      	cmp	r2, r1
 8001260:	d900      	bls.n	8001264 <__aeabi_ddiv+0x1f0>
 8001262:	e16c      	b.n	800153e <__aeabi_ddiv+0x4ca>
 8001264:	1a88      	subs	r0, r1, r2
 8001266:	4649      	mov	r1, r9
 8001268:	f7fe fff0 	bl	800024c <__aeabi_uidivmod>
 800126c:	9a01      	ldr	r2, [sp, #4]
 800126e:	0436      	lsls	r6, r6, #16
 8001270:	4342      	muls	r2, r0
 8001272:	0409      	lsls	r1, r1, #16
 8001274:	0c36      	lsrs	r6, r6, #16
 8001276:	0003      	movs	r3, r0
 8001278:	430e      	orrs	r6, r1
 800127a:	42b2      	cmp	r2, r6
 800127c:	d900      	bls.n	8001280 <__aeabi_ddiv+0x20c>
 800127e:	e153      	b.n	8001528 <__aeabi_ddiv+0x4b4>
 8001280:	9803      	ldr	r0, [sp, #12]
 8001282:	1ab6      	subs	r6, r6, r2
 8001284:	0002      	movs	r2, r0
 8001286:	042d      	lsls	r5, r5, #16
 8001288:	431d      	orrs	r5, r3
 800128a:	9f02      	ldr	r7, [sp, #8]
 800128c:	042b      	lsls	r3, r5, #16
 800128e:	0c1b      	lsrs	r3, r3, #16
 8001290:	435a      	muls	r2, r3
 8001292:	437b      	muls	r3, r7
 8001294:	469c      	mov	ip, r3
 8001296:	0c29      	lsrs	r1, r5, #16
 8001298:	4348      	muls	r0, r1
 800129a:	0c13      	lsrs	r3, r2, #16
 800129c:	4484      	add	ip, r0
 800129e:	4463      	add	r3, ip
 80012a0:	4379      	muls	r1, r7
 80012a2:	4298      	cmp	r0, r3
 80012a4:	d903      	bls.n	80012ae <__aeabi_ddiv+0x23a>
 80012a6:	2080      	movs	r0, #128	; 0x80
 80012a8:	0240      	lsls	r0, r0, #9
 80012aa:	4684      	mov	ip, r0
 80012ac:	4461      	add	r1, ip
 80012ae:	0c18      	lsrs	r0, r3, #16
 80012b0:	0412      	lsls	r2, r2, #16
 80012b2:	041b      	lsls	r3, r3, #16
 80012b4:	0c12      	lsrs	r2, r2, #16
 80012b6:	1840      	adds	r0, r0, r1
 80012b8:	189b      	adds	r3, r3, r2
 80012ba:	4286      	cmp	r6, r0
 80012bc:	d200      	bcs.n	80012c0 <__aeabi_ddiv+0x24c>
 80012be:	e100      	b.n	80014c2 <__aeabi_ddiv+0x44e>
 80012c0:	d100      	bne.n	80012c4 <__aeabi_ddiv+0x250>
 80012c2:	e0fb      	b.n	80014bc <__aeabi_ddiv+0x448>
 80012c4:	2301      	movs	r3, #1
 80012c6:	431d      	orrs	r5, r3
 80012c8:	4b49      	ldr	r3, [pc, #292]	; (80013f0 <__aeabi_ddiv+0x37c>)
 80012ca:	445b      	add	r3, fp
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	dc00      	bgt.n	80012d2 <__aeabi_ddiv+0x25e>
 80012d0:	e0aa      	b.n	8001428 <__aeabi_ddiv+0x3b4>
 80012d2:	076a      	lsls	r2, r5, #29
 80012d4:	d000      	beq.n	80012d8 <__aeabi_ddiv+0x264>
 80012d6:	e13d      	b.n	8001554 <__aeabi_ddiv+0x4e0>
 80012d8:	08e9      	lsrs	r1, r5, #3
 80012da:	4642      	mov	r2, r8
 80012dc:	01d2      	lsls	r2, r2, #7
 80012de:	d506      	bpl.n	80012ee <__aeabi_ddiv+0x27a>
 80012e0:	4642      	mov	r2, r8
 80012e2:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <__aeabi_ddiv+0x380>)
 80012e4:	401a      	ands	r2, r3
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	4690      	mov	r8, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	445b      	add	r3, fp
 80012ee:	4a42      	ldr	r2, [pc, #264]	; (80013f8 <__aeabi_ddiv+0x384>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	dd00      	ble.n	80012f6 <__aeabi_ddiv+0x282>
 80012f4:	e723      	b.n	800113e <__aeabi_ddiv+0xca>
 80012f6:	4642      	mov	r2, r8
 80012f8:	055b      	lsls	r3, r3, #21
 80012fa:	0755      	lsls	r5, r2, #29
 80012fc:	0252      	lsls	r2, r2, #9
 80012fe:	430d      	orrs	r5, r1
 8001300:	0b12      	lsrs	r2, r2, #12
 8001302:	0d5b      	lsrs	r3, r3, #21
 8001304:	e70d      	b.n	8001122 <__aeabi_ddiv+0xae>
 8001306:	4651      	mov	r1, sl
 8001308:	4321      	orrs	r1, r4
 800130a:	d100      	bne.n	800130e <__aeabi_ddiv+0x29a>
 800130c:	e07c      	b.n	8001408 <__aeabi_ddiv+0x394>
 800130e:	2c00      	cmp	r4, #0
 8001310:	d100      	bne.n	8001314 <__aeabi_ddiv+0x2a0>
 8001312:	e0fb      	b.n	800150c <__aeabi_ddiv+0x498>
 8001314:	0020      	movs	r0, r4
 8001316:	f001 f9dd 	bl	80026d4 <__clzsi2>
 800131a:	0002      	movs	r2, r0
 800131c:	3a0b      	subs	r2, #11
 800131e:	231d      	movs	r3, #29
 8001320:	1a9b      	subs	r3, r3, r2
 8001322:	4652      	mov	r2, sl
 8001324:	0001      	movs	r1, r0
 8001326:	40da      	lsrs	r2, r3
 8001328:	4653      	mov	r3, sl
 800132a:	3908      	subs	r1, #8
 800132c:	408b      	lsls	r3, r1
 800132e:	408c      	lsls	r4, r1
 8001330:	0019      	movs	r1, r3
 8001332:	4314      	orrs	r4, r2
 8001334:	4b31      	ldr	r3, [pc, #196]	; (80013fc <__aeabi_ddiv+0x388>)
 8001336:	4458      	add	r0, fp
 8001338:	469b      	mov	fp, r3
 800133a:	4483      	add	fp, r0
 800133c:	2000      	movs	r0, #0
 800133e:	e6d9      	b.n	80010f4 <__aeabi_ddiv+0x80>
 8001340:	0003      	movs	r3, r0
 8001342:	4323      	orrs	r3, r4
 8001344:	4698      	mov	r8, r3
 8001346:	d044      	beq.n	80013d2 <__aeabi_ddiv+0x35e>
 8001348:	2c00      	cmp	r4, #0
 800134a:	d100      	bne.n	800134e <__aeabi_ddiv+0x2da>
 800134c:	e0cf      	b.n	80014ee <__aeabi_ddiv+0x47a>
 800134e:	0020      	movs	r0, r4
 8001350:	f001 f9c0 	bl	80026d4 <__clzsi2>
 8001354:	0001      	movs	r1, r0
 8001356:	0002      	movs	r2, r0
 8001358:	390b      	subs	r1, #11
 800135a:	231d      	movs	r3, #29
 800135c:	1a5b      	subs	r3, r3, r1
 800135e:	4649      	mov	r1, r9
 8001360:	0010      	movs	r0, r2
 8001362:	40d9      	lsrs	r1, r3
 8001364:	3808      	subs	r0, #8
 8001366:	4084      	lsls	r4, r0
 8001368:	000b      	movs	r3, r1
 800136a:	464d      	mov	r5, r9
 800136c:	4323      	orrs	r3, r4
 800136e:	4698      	mov	r8, r3
 8001370:	4085      	lsls	r5, r0
 8001372:	4b23      	ldr	r3, [pc, #140]	; (8001400 <__aeabi_ddiv+0x38c>)
 8001374:	1a9b      	subs	r3, r3, r2
 8001376:	469b      	mov	fp, r3
 8001378:	2300      	movs	r3, #0
 800137a:	4699      	mov	r9, r3
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	e69e      	b.n	80010be <__aeabi_ddiv+0x4a>
 8001380:	0002      	movs	r2, r0
 8001382:	4322      	orrs	r2, r4
 8001384:	4690      	mov	r8, r2
 8001386:	d11d      	bne.n	80013c4 <__aeabi_ddiv+0x350>
 8001388:	2208      	movs	r2, #8
 800138a:	469b      	mov	fp, r3
 800138c:	2302      	movs	r3, #2
 800138e:	2500      	movs	r5, #0
 8001390:	4691      	mov	r9, r2
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	e693      	b.n	80010be <__aeabi_ddiv+0x4a>
 8001396:	4651      	mov	r1, sl
 8001398:	4321      	orrs	r1, r4
 800139a:	d109      	bne.n	80013b0 <__aeabi_ddiv+0x33c>
 800139c:	2302      	movs	r3, #2
 800139e:	464a      	mov	r2, r9
 80013a0:	431a      	orrs	r2, r3
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <__aeabi_ddiv+0x390>)
 80013a4:	4691      	mov	r9, r2
 80013a6:	469c      	mov	ip, r3
 80013a8:	2400      	movs	r4, #0
 80013aa:	2002      	movs	r0, #2
 80013ac:	44e3      	add	fp, ip
 80013ae:	e6a1      	b.n	80010f4 <__aeabi_ddiv+0x80>
 80013b0:	2303      	movs	r3, #3
 80013b2:	464a      	mov	r2, r9
 80013b4:	431a      	orrs	r2, r3
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <__aeabi_ddiv+0x390>)
 80013b8:	4691      	mov	r9, r2
 80013ba:	469c      	mov	ip, r3
 80013bc:	4651      	mov	r1, sl
 80013be:	2003      	movs	r0, #3
 80013c0:	44e3      	add	fp, ip
 80013c2:	e697      	b.n	80010f4 <__aeabi_ddiv+0x80>
 80013c4:	220c      	movs	r2, #12
 80013c6:	469b      	mov	fp, r3
 80013c8:	2303      	movs	r3, #3
 80013ca:	46a0      	mov	r8, r4
 80013cc:	4691      	mov	r9, r2
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	e675      	b.n	80010be <__aeabi_ddiv+0x4a>
 80013d2:	2304      	movs	r3, #4
 80013d4:	4699      	mov	r9, r3
 80013d6:	2300      	movs	r3, #0
 80013d8:	469b      	mov	fp, r3
 80013da:	3301      	adds	r3, #1
 80013dc:	2500      	movs	r5, #0
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	e66d      	b.n	80010be <__aeabi_ddiv+0x4a>
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	fffffc01 	.word	0xfffffc01
 80013ec:	0800911c 	.word	0x0800911c
 80013f0:	000003ff 	.word	0x000003ff
 80013f4:	feffffff 	.word	0xfeffffff
 80013f8:	000007fe 	.word	0x000007fe
 80013fc:	000003f3 	.word	0x000003f3
 8001400:	fffffc0d 	.word	0xfffffc0d
 8001404:	fffff801 	.word	0xfffff801
 8001408:	464a      	mov	r2, r9
 800140a:	2301      	movs	r3, #1
 800140c:	431a      	orrs	r2, r3
 800140e:	4691      	mov	r9, r2
 8001410:	2400      	movs	r4, #0
 8001412:	2001      	movs	r0, #1
 8001414:	e66e      	b.n	80010f4 <__aeabi_ddiv+0x80>
 8001416:	2300      	movs	r3, #0
 8001418:	2280      	movs	r2, #128	; 0x80
 800141a:	469a      	mov	sl, r3
 800141c:	2500      	movs	r5, #0
 800141e:	4b88      	ldr	r3, [pc, #544]	; (8001640 <__aeabi_ddiv+0x5cc>)
 8001420:	0312      	lsls	r2, r2, #12
 8001422:	e67e      	b.n	8001122 <__aeabi_ddiv+0xae>
 8001424:	2501      	movs	r5, #1
 8001426:	426d      	negs	r5, r5
 8001428:	2201      	movs	r2, #1
 800142a:	1ad2      	subs	r2, r2, r3
 800142c:	2a38      	cmp	r2, #56	; 0x38
 800142e:	dd00      	ble.n	8001432 <__aeabi_ddiv+0x3be>
 8001430:	e674      	b.n	800111c <__aeabi_ddiv+0xa8>
 8001432:	2a1f      	cmp	r2, #31
 8001434:	dc00      	bgt.n	8001438 <__aeabi_ddiv+0x3c4>
 8001436:	e0bd      	b.n	80015b4 <__aeabi_ddiv+0x540>
 8001438:	211f      	movs	r1, #31
 800143a:	4249      	negs	r1, r1
 800143c:	1acb      	subs	r3, r1, r3
 800143e:	4641      	mov	r1, r8
 8001440:	40d9      	lsrs	r1, r3
 8001442:	000b      	movs	r3, r1
 8001444:	2a20      	cmp	r2, #32
 8001446:	d004      	beq.n	8001452 <__aeabi_ddiv+0x3de>
 8001448:	4641      	mov	r1, r8
 800144a:	4a7e      	ldr	r2, [pc, #504]	; (8001644 <__aeabi_ddiv+0x5d0>)
 800144c:	445a      	add	r2, fp
 800144e:	4091      	lsls	r1, r2
 8001450:	430d      	orrs	r5, r1
 8001452:	0029      	movs	r1, r5
 8001454:	1e4a      	subs	r2, r1, #1
 8001456:	4191      	sbcs	r1, r2
 8001458:	4319      	orrs	r1, r3
 800145a:	2307      	movs	r3, #7
 800145c:	001d      	movs	r5, r3
 800145e:	2200      	movs	r2, #0
 8001460:	400d      	ands	r5, r1
 8001462:	420b      	tst	r3, r1
 8001464:	d100      	bne.n	8001468 <__aeabi_ddiv+0x3f4>
 8001466:	e0d0      	b.n	800160a <__aeabi_ddiv+0x596>
 8001468:	220f      	movs	r2, #15
 800146a:	2300      	movs	r3, #0
 800146c:	400a      	ands	r2, r1
 800146e:	2a04      	cmp	r2, #4
 8001470:	d100      	bne.n	8001474 <__aeabi_ddiv+0x400>
 8001472:	e0c7      	b.n	8001604 <__aeabi_ddiv+0x590>
 8001474:	1d0a      	adds	r2, r1, #4
 8001476:	428a      	cmp	r2, r1
 8001478:	4189      	sbcs	r1, r1
 800147a:	4249      	negs	r1, r1
 800147c:	185b      	adds	r3, r3, r1
 800147e:	0011      	movs	r1, r2
 8001480:	021a      	lsls	r2, r3, #8
 8001482:	d400      	bmi.n	8001486 <__aeabi_ddiv+0x412>
 8001484:	e0be      	b.n	8001604 <__aeabi_ddiv+0x590>
 8001486:	2301      	movs	r3, #1
 8001488:	2200      	movs	r2, #0
 800148a:	2500      	movs	r5, #0
 800148c:	e649      	b.n	8001122 <__aeabi_ddiv+0xae>
 800148e:	2280      	movs	r2, #128	; 0x80
 8001490:	4643      	mov	r3, r8
 8001492:	0312      	lsls	r2, r2, #12
 8001494:	4213      	tst	r3, r2
 8001496:	d008      	beq.n	80014aa <__aeabi_ddiv+0x436>
 8001498:	4214      	tst	r4, r2
 800149a:	d106      	bne.n	80014aa <__aeabi_ddiv+0x436>
 800149c:	4322      	orrs	r2, r4
 800149e:	0312      	lsls	r2, r2, #12
 80014a0:	46ba      	mov	sl, r7
 80014a2:	000d      	movs	r5, r1
 80014a4:	4b66      	ldr	r3, [pc, #408]	; (8001640 <__aeabi_ddiv+0x5cc>)
 80014a6:	0b12      	lsrs	r2, r2, #12
 80014a8:	e63b      	b.n	8001122 <__aeabi_ddiv+0xae>
 80014aa:	2280      	movs	r2, #128	; 0x80
 80014ac:	4643      	mov	r3, r8
 80014ae:	0312      	lsls	r2, r2, #12
 80014b0:	431a      	orrs	r2, r3
 80014b2:	0312      	lsls	r2, r2, #12
 80014b4:	46b2      	mov	sl, r6
 80014b6:	4b62      	ldr	r3, [pc, #392]	; (8001640 <__aeabi_ddiv+0x5cc>)
 80014b8:	0b12      	lsrs	r2, r2, #12
 80014ba:	e632      	b.n	8001122 <__aeabi_ddiv+0xae>
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d100      	bne.n	80014c2 <__aeabi_ddiv+0x44e>
 80014c0:	e702      	b.n	80012c8 <__aeabi_ddiv+0x254>
 80014c2:	19a6      	adds	r6, r4, r6
 80014c4:	1e6a      	subs	r2, r5, #1
 80014c6:	42a6      	cmp	r6, r4
 80014c8:	d200      	bcs.n	80014cc <__aeabi_ddiv+0x458>
 80014ca:	e089      	b.n	80015e0 <__aeabi_ddiv+0x56c>
 80014cc:	4286      	cmp	r6, r0
 80014ce:	d200      	bcs.n	80014d2 <__aeabi_ddiv+0x45e>
 80014d0:	e09f      	b.n	8001612 <__aeabi_ddiv+0x59e>
 80014d2:	d100      	bne.n	80014d6 <__aeabi_ddiv+0x462>
 80014d4:	e0af      	b.n	8001636 <__aeabi_ddiv+0x5c2>
 80014d6:	0015      	movs	r5, r2
 80014d8:	e6f4      	b.n	80012c4 <__aeabi_ddiv+0x250>
 80014da:	42a9      	cmp	r1, r5
 80014dc:	d900      	bls.n	80014e0 <__aeabi_ddiv+0x46c>
 80014de:	e63c      	b.n	800115a <__aeabi_ddiv+0xe6>
 80014e0:	4643      	mov	r3, r8
 80014e2:	07de      	lsls	r6, r3, #31
 80014e4:	0858      	lsrs	r0, r3, #1
 80014e6:	086b      	lsrs	r3, r5, #1
 80014e8:	431e      	orrs	r6, r3
 80014ea:	07ed      	lsls	r5, r5, #31
 80014ec:	e63c      	b.n	8001168 <__aeabi_ddiv+0xf4>
 80014ee:	f001 f8f1 	bl	80026d4 <__clzsi2>
 80014f2:	0001      	movs	r1, r0
 80014f4:	0002      	movs	r2, r0
 80014f6:	3115      	adds	r1, #21
 80014f8:	3220      	adds	r2, #32
 80014fa:	291c      	cmp	r1, #28
 80014fc:	dc00      	bgt.n	8001500 <__aeabi_ddiv+0x48c>
 80014fe:	e72c      	b.n	800135a <__aeabi_ddiv+0x2e6>
 8001500:	464b      	mov	r3, r9
 8001502:	3808      	subs	r0, #8
 8001504:	4083      	lsls	r3, r0
 8001506:	2500      	movs	r5, #0
 8001508:	4698      	mov	r8, r3
 800150a:	e732      	b.n	8001372 <__aeabi_ddiv+0x2fe>
 800150c:	f001 f8e2 	bl	80026d4 <__clzsi2>
 8001510:	0003      	movs	r3, r0
 8001512:	001a      	movs	r2, r3
 8001514:	3215      	adds	r2, #21
 8001516:	3020      	adds	r0, #32
 8001518:	2a1c      	cmp	r2, #28
 800151a:	dc00      	bgt.n	800151e <__aeabi_ddiv+0x4aa>
 800151c:	e6ff      	b.n	800131e <__aeabi_ddiv+0x2aa>
 800151e:	4654      	mov	r4, sl
 8001520:	3b08      	subs	r3, #8
 8001522:	2100      	movs	r1, #0
 8001524:	409c      	lsls	r4, r3
 8001526:	e705      	b.n	8001334 <__aeabi_ddiv+0x2c0>
 8001528:	1936      	adds	r6, r6, r4
 800152a:	3b01      	subs	r3, #1
 800152c:	42b4      	cmp	r4, r6
 800152e:	d900      	bls.n	8001532 <__aeabi_ddiv+0x4be>
 8001530:	e6a6      	b.n	8001280 <__aeabi_ddiv+0x20c>
 8001532:	42b2      	cmp	r2, r6
 8001534:	d800      	bhi.n	8001538 <__aeabi_ddiv+0x4c4>
 8001536:	e6a3      	b.n	8001280 <__aeabi_ddiv+0x20c>
 8001538:	1e83      	subs	r3, r0, #2
 800153a:	1936      	adds	r6, r6, r4
 800153c:	e6a0      	b.n	8001280 <__aeabi_ddiv+0x20c>
 800153e:	1909      	adds	r1, r1, r4
 8001540:	3d01      	subs	r5, #1
 8001542:	428c      	cmp	r4, r1
 8001544:	d900      	bls.n	8001548 <__aeabi_ddiv+0x4d4>
 8001546:	e68d      	b.n	8001264 <__aeabi_ddiv+0x1f0>
 8001548:	428a      	cmp	r2, r1
 800154a:	d800      	bhi.n	800154e <__aeabi_ddiv+0x4da>
 800154c:	e68a      	b.n	8001264 <__aeabi_ddiv+0x1f0>
 800154e:	1e85      	subs	r5, r0, #2
 8001550:	1909      	adds	r1, r1, r4
 8001552:	e687      	b.n	8001264 <__aeabi_ddiv+0x1f0>
 8001554:	220f      	movs	r2, #15
 8001556:	402a      	ands	r2, r5
 8001558:	2a04      	cmp	r2, #4
 800155a:	d100      	bne.n	800155e <__aeabi_ddiv+0x4ea>
 800155c:	e6bc      	b.n	80012d8 <__aeabi_ddiv+0x264>
 800155e:	1d29      	adds	r1, r5, #4
 8001560:	42a9      	cmp	r1, r5
 8001562:	41ad      	sbcs	r5, r5
 8001564:	426d      	negs	r5, r5
 8001566:	08c9      	lsrs	r1, r1, #3
 8001568:	44a8      	add	r8, r5
 800156a:	e6b6      	b.n	80012da <__aeabi_ddiv+0x266>
 800156c:	42af      	cmp	r7, r5
 800156e:	d900      	bls.n	8001572 <__aeabi_ddiv+0x4fe>
 8001570:	e662      	b.n	8001238 <__aeabi_ddiv+0x1c4>
 8001572:	4281      	cmp	r1, r0
 8001574:	d804      	bhi.n	8001580 <__aeabi_ddiv+0x50c>
 8001576:	d000      	beq.n	800157a <__aeabi_ddiv+0x506>
 8001578:	e65e      	b.n	8001238 <__aeabi_ddiv+0x1c4>
 800157a:	42ae      	cmp	r6, r5
 800157c:	d800      	bhi.n	8001580 <__aeabi_ddiv+0x50c>
 800157e:	e65b      	b.n	8001238 <__aeabi_ddiv+0x1c4>
 8001580:	2302      	movs	r3, #2
 8001582:	425b      	negs	r3, r3
 8001584:	469c      	mov	ip, r3
 8001586:	9b00      	ldr	r3, [sp, #0]
 8001588:	44e0      	add	r8, ip
 800158a:	469c      	mov	ip, r3
 800158c:	4465      	add	r5, ip
 800158e:	429d      	cmp	r5, r3
 8001590:	419b      	sbcs	r3, r3
 8001592:	425b      	negs	r3, r3
 8001594:	191b      	adds	r3, r3, r4
 8001596:	18c0      	adds	r0, r0, r3
 8001598:	e64f      	b.n	800123a <__aeabi_ddiv+0x1c6>
 800159a:	42b2      	cmp	r2, r6
 800159c:	d800      	bhi.n	80015a0 <__aeabi_ddiv+0x52c>
 800159e:	e612      	b.n	80011c6 <__aeabi_ddiv+0x152>
 80015a0:	1e83      	subs	r3, r0, #2
 80015a2:	1936      	adds	r6, r6, r4
 80015a4:	e60f      	b.n	80011c6 <__aeabi_ddiv+0x152>
 80015a6:	428a      	cmp	r2, r1
 80015a8:	d800      	bhi.n	80015ac <__aeabi_ddiv+0x538>
 80015aa:	e5fa      	b.n	80011a2 <__aeabi_ddiv+0x12e>
 80015ac:	1e83      	subs	r3, r0, #2
 80015ae:	4698      	mov	r8, r3
 80015b0:	1909      	adds	r1, r1, r4
 80015b2:	e5f6      	b.n	80011a2 <__aeabi_ddiv+0x12e>
 80015b4:	4b24      	ldr	r3, [pc, #144]	; (8001648 <__aeabi_ddiv+0x5d4>)
 80015b6:	0028      	movs	r0, r5
 80015b8:	445b      	add	r3, fp
 80015ba:	4641      	mov	r1, r8
 80015bc:	409d      	lsls	r5, r3
 80015be:	4099      	lsls	r1, r3
 80015c0:	40d0      	lsrs	r0, r2
 80015c2:	1e6b      	subs	r3, r5, #1
 80015c4:	419d      	sbcs	r5, r3
 80015c6:	4643      	mov	r3, r8
 80015c8:	4301      	orrs	r1, r0
 80015ca:	4329      	orrs	r1, r5
 80015cc:	40d3      	lsrs	r3, r2
 80015ce:	074a      	lsls	r2, r1, #29
 80015d0:	d100      	bne.n	80015d4 <__aeabi_ddiv+0x560>
 80015d2:	e755      	b.n	8001480 <__aeabi_ddiv+0x40c>
 80015d4:	220f      	movs	r2, #15
 80015d6:	400a      	ands	r2, r1
 80015d8:	2a04      	cmp	r2, #4
 80015da:	d000      	beq.n	80015de <__aeabi_ddiv+0x56a>
 80015dc:	e74a      	b.n	8001474 <__aeabi_ddiv+0x400>
 80015de:	e74f      	b.n	8001480 <__aeabi_ddiv+0x40c>
 80015e0:	0015      	movs	r5, r2
 80015e2:	4286      	cmp	r6, r0
 80015e4:	d000      	beq.n	80015e8 <__aeabi_ddiv+0x574>
 80015e6:	e66d      	b.n	80012c4 <__aeabi_ddiv+0x250>
 80015e8:	9a00      	ldr	r2, [sp, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d000      	beq.n	80015f0 <__aeabi_ddiv+0x57c>
 80015ee:	e669      	b.n	80012c4 <__aeabi_ddiv+0x250>
 80015f0:	e66a      	b.n	80012c8 <__aeabi_ddiv+0x254>
 80015f2:	4b16      	ldr	r3, [pc, #88]	; (800164c <__aeabi_ddiv+0x5d8>)
 80015f4:	445b      	add	r3, fp
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	dc00      	bgt.n	80015fc <__aeabi_ddiv+0x588>
 80015fa:	e713      	b.n	8001424 <__aeabi_ddiv+0x3b0>
 80015fc:	2501      	movs	r5, #1
 80015fe:	2100      	movs	r1, #0
 8001600:	44a8      	add	r8, r5
 8001602:	e66a      	b.n	80012da <__aeabi_ddiv+0x266>
 8001604:	075d      	lsls	r5, r3, #29
 8001606:	025b      	lsls	r3, r3, #9
 8001608:	0b1a      	lsrs	r2, r3, #12
 800160a:	08c9      	lsrs	r1, r1, #3
 800160c:	2300      	movs	r3, #0
 800160e:	430d      	orrs	r5, r1
 8001610:	e587      	b.n	8001122 <__aeabi_ddiv+0xae>
 8001612:	9900      	ldr	r1, [sp, #0]
 8001614:	3d02      	subs	r5, #2
 8001616:	004a      	lsls	r2, r1, #1
 8001618:	428a      	cmp	r2, r1
 800161a:	41bf      	sbcs	r7, r7
 800161c:	427f      	negs	r7, r7
 800161e:	193f      	adds	r7, r7, r4
 8001620:	19f6      	adds	r6, r6, r7
 8001622:	9200      	str	r2, [sp, #0]
 8001624:	e7dd      	b.n	80015e2 <__aeabi_ddiv+0x56e>
 8001626:	2280      	movs	r2, #128	; 0x80
 8001628:	4643      	mov	r3, r8
 800162a:	0312      	lsls	r2, r2, #12
 800162c:	431a      	orrs	r2, r3
 800162e:	0312      	lsls	r2, r2, #12
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <__aeabi_ddiv+0x5cc>)
 8001632:	0b12      	lsrs	r2, r2, #12
 8001634:	e575      	b.n	8001122 <__aeabi_ddiv+0xae>
 8001636:	9900      	ldr	r1, [sp, #0]
 8001638:	4299      	cmp	r1, r3
 800163a:	d3ea      	bcc.n	8001612 <__aeabi_ddiv+0x59e>
 800163c:	0015      	movs	r5, r2
 800163e:	e7d3      	b.n	80015e8 <__aeabi_ddiv+0x574>
 8001640:	000007ff 	.word	0x000007ff
 8001644:	0000043e 	.word	0x0000043e
 8001648:	0000041e 	.word	0x0000041e
 800164c:	000003ff 	.word	0x000003ff

08001650 <__eqdf2>:
 8001650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001652:	464e      	mov	r6, r9
 8001654:	4645      	mov	r5, r8
 8001656:	46de      	mov	lr, fp
 8001658:	4657      	mov	r7, sl
 800165a:	4690      	mov	r8, r2
 800165c:	b5e0      	push	{r5, r6, r7, lr}
 800165e:	0017      	movs	r7, r2
 8001660:	031a      	lsls	r2, r3, #12
 8001662:	0b12      	lsrs	r2, r2, #12
 8001664:	0005      	movs	r5, r0
 8001666:	4684      	mov	ip, r0
 8001668:	4819      	ldr	r0, [pc, #100]	; (80016d0 <__eqdf2+0x80>)
 800166a:	030e      	lsls	r6, r1, #12
 800166c:	004c      	lsls	r4, r1, #1
 800166e:	4691      	mov	r9, r2
 8001670:	005a      	lsls	r2, r3, #1
 8001672:	0fdb      	lsrs	r3, r3, #31
 8001674:	469b      	mov	fp, r3
 8001676:	0b36      	lsrs	r6, r6, #12
 8001678:	0d64      	lsrs	r4, r4, #21
 800167a:	0fc9      	lsrs	r1, r1, #31
 800167c:	0d52      	lsrs	r2, r2, #21
 800167e:	4284      	cmp	r4, r0
 8001680:	d019      	beq.n	80016b6 <__eqdf2+0x66>
 8001682:	4282      	cmp	r2, r0
 8001684:	d010      	beq.n	80016a8 <__eqdf2+0x58>
 8001686:	2001      	movs	r0, #1
 8001688:	4294      	cmp	r4, r2
 800168a:	d10e      	bne.n	80016aa <__eqdf2+0x5a>
 800168c:	454e      	cmp	r6, r9
 800168e:	d10c      	bne.n	80016aa <__eqdf2+0x5a>
 8001690:	2001      	movs	r0, #1
 8001692:	45c4      	cmp	ip, r8
 8001694:	d109      	bne.n	80016aa <__eqdf2+0x5a>
 8001696:	4559      	cmp	r1, fp
 8001698:	d017      	beq.n	80016ca <__eqdf2+0x7a>
 800169a:	2c00      	cmp	r4, #0
 800169c:	d105      	bne.n	80016aa <__eqdf2+0x5a>
 800169e:	0030      	movs	r0, r6
 80016a0:	4328      	orrs	r0, r5
 80016a2:	1e43      	subs	r3, r0, #1
 80016a4:	4198      	sbcs	r0, r3
 80016a6:	e000      	b.n	80016aa <__eqdf2+0x5a>
 80016a8:	2001      	movs	r0, #1
 80016aa:	bcf0      	pop	{r4, r5, r6, r7}
 80016ac:	46bb      	mov	fp, r7
 80016ae:	46b2      	mov	sl, r6
 80016b0:	46a9      	mov	r9, r5
 80016b2:	46a0      	mov	r8, r4
 80016b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b6:	0033      	movs	r3, r6
 80016b8:	2001      	movs	r0, #1
 80016ba:	432b      	orrs	r3, r5
 80016bc:	d1f5      	bne.n	80016aa <__eqdf2+0x5a>
 80016be:	42a2      	cmp	r2, r4
 80016c0:	d1f3      	bne.n	80016aa <__eqdf2+0x5a>
 80016c2:	464b      	mov	r3, r9
 80016c4:	433b      	orrs	r3, r7
 80016c6:	d1f0      	bne.n	80016aa <__eqdf2+0x5a>
 80016c8:	e7e2      	b.n	8001690 <__eqdf2+0x40>
 80016ca:	2000      	movs	r0, #0
 80016cc:	e7ed      	b.n	80016aa <__eqdf2+0x5a>
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	000007ff 	.word	0x000007ff

080016d4 <__gedf2>:
 80016d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d6:	4647      	mov	r7, r8
 80016d8:	46ce      	mov	lr, r9
 80016da:	0004      	movs	r4, r0
 80016dc:	0018      	movs	r0, r3
 80016de:	0016      	movs	r6, r2
 80016e0:	031b      	lsls	r3, r3, #12
 80016e2:	0b1b      	lsrs	r3, r3, #12
 80016e4:	4d2d      	ldr	r5, [pc, #180]	; (800179c <__gedf2+0xc8>)
 80016e6:	004a      	lsls	r2, r1, #1
 80016e8:	4699      	mov	r9, r3
 80016ea:	b580      	push	{r7, lr}
 80016ec:	0043      	lsls	r3, r0, #1
 80016ee:	030f      	lsls	r7, r1, #12
 80016f0:	46a4      	mov	ip, r4
 80016f2:	46b0      	mov	r8, r6
 80016f4:	0b3f      	lsrs	r7, r7, #12
 80016f6:	0d52      	lsrs	r2, r2, #21
 80016f8:	0fc9      	lsrs	r1, r1, #31
 80016fa:	0d5b      	lsrs	r3, r3, #21
 80016fc:	0fc0      	lsrs	r0, r0, #31
 80016fe:	42aa      	cmp	r2, r5
 8001700:	d021      	beq.n	8001746 <__gedf2+0x72>
 8001702:	42ab      	cmp	r3, r5
 8001704:	d013      	beq.n	800172e <__gedf2+0x5a>
 8001706:	2a00      	cmp	r2, #0
 8001708:	d122      	bne.n	8001750 <__gedf2+0x7c>
 800170a:	433c      	orrs	r4, r7
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <__gedf2+0x42>
 8001710:	464d      	mov	r5, r9
 8001712:	432e      	orrs	r6, r5
 8001714:	d022      	beq.n	800175c <__gedf2+0x88>
 8001716:	2c00      	cmp	r4, #0
 8001718:	d010      	beq.n	800173c <__gedf2+0x68>
 800171a:	4281      	cmp	r1, r0
 800171c:	d022      	beq.n	8001764 <__gedf2+0x90>
 800171e:	2002      	movs	r0, #2
 8001720:	3901      	subs	r1, #1
 8001722:	4008      	ands	r0, r1
 8001724:	3801      	subs	r0, #1
 8001726:	bcc0      	pop	{r6, r7}
 8001728:	46b9      	mov	r9, r7
 800172a:	46b0      	mov	r8, r6
 800172c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800172e:	464d      	mov	r5, r9
 8001730:	432e      	orrs	r6, r5
 8001732:	d129      	bne.n	8001788 <__gedf2+0xb4>
 8001734:	2a00      	cmp	r2, #0
 8001736:	d1f0      	bne.n	800171a <__gedf2+0x46>
 8001738:	433c      	orrs	r4, r7
 800173a:	d1ee      	bne.n	800171a <__gedf2+0x46>
 800173c:	2800      	cmp	r0, #0
 800173e:	d1f2      	bne.n	8001726 <__gedf2+0x52>
 8001740:	2001      	movs	r0, #1
 8001742:	4240      	negs	r0, r0
 8001744:	e7ef      	b.n	8001726 <__gedf2+0x52>
 8001746:	003d      	movs	r5, r7
 8001748:	4325      	orrs	r5, r4
 800174a:	d11d      	bne.n	8001788 <__gedf2+0xb4>
 800174c:	4293      	cmp	r3, r2
 800174e:	d0ee      	beq.n	800172e <__gedf2+0x5a>
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1e2      	bne.n	800171a <__gedf2+0x46>
 8001754:	464c      	mov	r4, r9
 8001756:	4326      	orrs	r6, r4
 8001758:	d1df      	bne.n	800171a <__gedf2+0x46>
 800175a:	e7e0      	b.n	800171e <__gedf2+0x4a>
 800175c:	2000      	movs	r0, #0
 800175e:	2c00      	cmp	r4, #0
 8001760:	d0e1      	beq.n	8001726 <__gedf2+0x52>
 8001762:	e7dc      	b.n	800171e <__gedf2+0x4a>
 8001764:	429a      	cmp	r2, r3
 8001766:	dc0a      	bgt.n	800177e <__gedf2+0xaa>
 8001768:	dbe8      	blt.n	800173c <__gedf2+0x68>
 800176a:	454f      	cmp	r7, r9
 800176c:	d8d7      	bhi.n	800171e <__gedf2+0x4a>
 800176e:	d00e      	beq.n	800178e <__gedf2+0xba>
 8001770:	2000      	movs	r0, #0
 8001772:	454f      	cmp	r7, r9
 8001774:	d2d7      	bcs.n	8001726 <__gedf2+0x52>
 8001776:	2900      	cmp	r1, #0
 8001778:	d0e2      	beq.n	8001740 <__gedf2+0x6c>
 800177a:	0008      	movs	r0, r1
 800177c:	e7d3      	b.n	8001726 <__gedf2+0x52>
 800177e:	4243      	negs	r3, r0
 8001780:	4158      	adcs	r0, r3
 8001782:	0040      	lsls	r0, r0, #1
 8001784:	3801      	subs	r0, #1
 8001786:	e7ce      	b.n	8001726 <__gedf2+0x52>
 8001788:	2002      	movs	r0, #2
 800178a:	4240      	negs	r0, r0
 800178c:	e7cb      	b.n	8001726 <__gedf2+0x52>
 800178e:	45c4      	cmp	ip, r8
 8001790:	d8c5      	bhi.n	800171e <__gedf2+0x4a>
 8001792:	2000      	movs	r0, #0
 8001794:	45c4      	cmp	ip, r8
 8001796:	d2c6      	bcs.n	8001726 <__gedf2+0x52>
 8001798:	e7ed      	b.n	8001776 <__gedf2+0xa2>
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	000007ff 	.word	0x000007ff

080017a0 <__ledf2>:
 80017a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a2:	4647      	mov	r7, r8
 80017a4:	46ce      	mov	lr, r9
 80017a6:	0004      	movs	r4, r0
 80017a8:	0018      	movs	r0, r3
 80017aa:	0016      	movs	r6, r2
 80017ac:	031b      	lsls	r3, r3, #12
 80017ae:	0b1b      	lsrs	r3, r3, #12
 80017b0:	4d2c      	ldr	r5, [pc, #176]	; (8001864 <__ledf2+0xc4>)
 80017b2:	004a      	lsls	r2, r1, #1
 80017b4:	4699      	mov	r9, r3
 80017b6:	b580      	push	{r7, lr}
 80017b8:	0043      	lsls	r3, r0, #1
 80017ba:	030f      	lsls	r7, r1, #12
 80017bc:	46a4      	mov	ip, r4
 80017be:	46b0      	mov	r8, r6
 80017c0:	0b3f      	lsrs	r7, r7, #12
 80017c2:	0d52      	lsrs	r2, r2, #21
 80017c4:	0fc9      	lsrs	r1, r1, #31
 80017c6:	0d5b      	lsrs	r3, r3, #21
 80017c8:	0fc0      	lsrs	r0, r0, #31
 80017ca:	42aa      	cmp	r2, r5
 80017cc:	d00d      	beq.n	80017ea <__ledf2+0x4a>
 80017ce:	42ab      	cmp	r3, r5
 80017d0:	d010      	beq.n	80017f4 <__ledf2+0x54>
 80017d2:	2a00      	cmp	r2, #0
 80017d4:	d127      	bne.n	8001826 <__ledf2+0x86>
 80017d6:	433c      	orrs	r4, r7
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d111      	bne.n	8001800 <__ledf2+0x60>
 80017dc:	464d      	mov	r5, r9
 80017de:	432e      	orrs	r6, r5
 80017e0:	d10e      	bne.n	8001800 <__ledf2+0x60>
 80017e2:	2000      	movs	r0, #0
 80017e4:	2c00      	cmp	r4, #0
 80017e6:	d015      	beq.n	8001814 <__ledf2+0x74>
 80017e8:	e00e      	b.n	8001808 <__ledf2+0x68>
 80017ea:	003d      	movs	r5, r7
 80017ec:	4325      	orrs	r5, r4
 80017ee:	d110      	bne.n	8001812 <__ledf2+0x72>
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d118      	bne.n	8001826 <__ledf2+0x86>
 80017f4:	464d      	mov	r5, r9
 80017f6:	432e      	orrs	r6, r5
 80017f8:	d10b      	bne.n	8001812 <__ledf2+0x72>
 80017fa:	2a00      	cmp	r2, #0
 80017fc:	d102      	bne.n	8001804 <__ledf2+0x64>
 80017fe:	433c      	orrs	r4, r7
 8001800:	2c00      	cmp	r4, #0
 8001802:	d00b      	beq.n	800181c <__ledf2+0x7c>
 8001804:	4281      	cmp	r1, r0
 8001806:	d014      	beq.n	8001832 <__ledf2+0x92>
 8001808:	2002      	movs	r0, #2
 800180a:	3901      	subs	r1, #1
 800180c:	4008      	ands	r0, r1
 800180e:	3801      	subs	r0, #1
 8001810:	e000      	b.n	8001814 <__ledf2+0x74>
 8001812:	2002      	movs	r0, #2
 8001814:	bcc0      	pop	{r6, r7}
 8001816:	46b9      	mov	r9, r7
 8001818:	46b0      	mov	r8, r6
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181c:	2800      	cmp	r0, #0
 800181e:	d1f9      	bne.n	8001814 <__ledf2+0x74>
 8001820:	2001      	movs	r0, #1
 8001822:	4240      	negs	r0, r0
 8001824:	e7f6      	b.n	8001814 <__ledf2+0x74>
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1ec      	bne.n	8001804 <__ledf2+0x64>
 800182a:	464c      	mov	r4, r9
 800182c:	4326      	orrs	r6, r4
 800182e:	d1e9      	bne.n	8001804 <__ledf2+0x64>
 8001830:	e7ea      	b.n	8001808 <__ledf2+0x68>
 8001832:	429a      	cmp	r2, r3
 8001834:	dd04      	ble.n	8001840 <__ledf2+0xa0>
 8001836:	4243      	negs	r3, r0
 8001838:	4158      	adcs	r0, r3
 800183a:	0040      	lsls	r0, r0, #1
 800183c:	3801      	subs	r0, #1
 800183e:	e7e9      	b.n	8001814 <__ledf2+0x74>
 8001840:	429a      	cmp	r2, r3
 8001842:	dbeb      	blt.n	800181c <__ledf2+0x7c>
 8001844:	454f      	cmp	r7, r9
 8001846:	d8df      	bhi.n	8001808 <__ledf2+0x68>
 8001848:	d006      	beq.n	8001858 <__ledf2+0xb8>
 800184a:	2000      	movs	r0, #0
 800184c:	454f      	cmp	r7, r9
 800184e:	d2e1      	bcs.n	8001814 <__ledf2+0x74>
 8001850:	2900      	cmp	r1, #0
 8001852:	d0e5      	beq.n	8001820 <__ledf2+0x80>
 8001854:	0008      	movs	r0, r1
 8001856:	e7dd      	b.n	8001814 <__ledf2+0x74>
 8001858:	45c4      	cmp	ip, r8
 800185a:	d8d5      	bhi.n	8001808 <__ledf2+0x68>
 800185c:	2000      	movs	r0, #0
 800185e:	45c4      	cmp	ip, r8
 8001860:	d2d8      	bcs.n	8001814 <__ledf2+0x74>
 8001862:	e7f5      	b.n	8001850 <__ledf2+0xb0>
 8001864:	000007ff 	.word	0x000007ff

08001868 <__aeabi_dmul>:
 8001868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800186a:	4645      	mov	r5, r8
 800186c:	46de      	mov	lr, fp
 800186e:	4657      	mov	r7, sl
 8001870:	464e      	mov	r6, r9
 8001872:	b5e0      	push	{r5, r6, r7, lr}
 8001874:	001f      	movs	r7, r3
 8001876:	030b      	lsls	r3, r1, #12
 8001878:	0b1b      	lsrs	r3, r3, #12
 800187a:	469b      	mov	fp, r3
 800187c:	004d      	lsls	r5, r1, #1
 800187e:	0fcb      	lsrs	r3, r1, #31
 8001880:	0004      	movs	r4, r0
 8001882:	4691      	mov	r9, r2
 8001884:	4698      	mov	r8, r3
 8001886:	b087      	sub	sp, #28
 8001888:	0d6d      	lsrs	r5, r5, #21
 800188a:	d100      	bne.n	800188e <__aeabi_dmul+0x26>
 800188c:	e1cd      	b.n	8001c2a <__aeabi_dmul+0x3c2>
 800188e:	4bce      	ldr	r3, [pc, #824]	; (8001bc8 <__aeabi_dmul+0x360>)
 8001890:	429d      	cmp	r5, r3
 8001892:	d100      	bne.n	8001896 <__aeabi_dmul+0x2e>
 8001894:	e1e9      	b.n	8001c6a <__aeabi_dmul+0x402>
 8001896:	465a      	mov	r2, fp
 8001898:	0f43      	lsrs	r3, r0, #29
 800189a:	00d2      	lsls	r2, r2, #3
 800189c:	4313      	orrs	r3, r2
 800189e:	2280      	movs	r2, #128	; 0x80
 80018a0:	0412      	lsls	r2, r2, #16
 80018a2:	431a      	orrs	r2, r3
 80018a4:	00c3      	lsls	r3, r0, #3
 80018a6:	469a      	mov	sl, r3
 80018a8:	4bc8      	ldr	r3, [pc, #800]	; (8001bcc <__aeabi_dmul+0x364>)
 80018aa:	4693      	mov	fp, r2
 80018ac:	469c      	mov	ip, r3
 80018ae:	2300      	movs	r3, #0
 80018b0:	2600      	movs	r6, #0
 80018b2:	4465      	add	r5, ip
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	033c      	lsls	r4, r7, #12
 80018b8:	007b      	lsls	r3, r7, #1
 80018ba:	4648      	mov	r0, r9
 80018bc:	0b24      	lsrs	r4, r4, #12
 80018be:	0d5b      	lsrs	r3, r3, #21
 80018c0:	0fff      	lsrs	r7, r7, #31
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d100      	bne.n	80018c8 <__aeabi_dmul+0x60>
 80018c6:	e189      	b.n	8001bdc <__aeabi_dmul+0x374>
 80018c8:	4abf      	ldr	r2, [pc, #764]	; (8001bc8 <__aeabi_dmul+0x360>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d019      	beq.n	8001902 <__aeabi_dmul+0x9a>
 80018ce:	0f42      	lsrs	r2, r0, #29
 80018d0:	00e4      	lsls	r4, r4, #3
 80018d2:	4322      	orrs	r2, r4
 80018d4:	2480      	movs	r4, #128	; 0x80
 80018d6:	0424      	lsls	r4, r4, #16
 80018d8:	4314      	orrs	r4, r2
 80018da:	4abc      	ldr	r2, [pc, #752]	; (8001bcc <__aeabi_dmul+0x364>)
 80018dc:	2100      	movs	r1, #0
 80018de:	4694      	mov	ip, r2
 80018e0:	4642      	mov	r2, r8
 80018e2:	4463      	add	r3, ip
 80018e4:	195b      	adds	r3, r3, r5
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	9b01      	ldr	r3, [sp, #4]
 80018ea:	407a      	eors	r2, r7
 80018ec:	3301      	adds	r3, #1
 80018ee:	00c0      	lsls	r0, r0, #3
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	9302      	str	r3, [sp, #8]
 80018f4:	2e0a      	cmp	r6, #10
 80018f6:	dd1c      	ble.n	8001932 <__aeabi_dmul+0xca>
 80018f8:	003a      	movs	r2, r7
 80018fa:	2e0b      	cmp	r6, #11
 80018fc:	d05e      	beq.n	80019bc <__aeabi_dmul+0x154>
 80018fe:	4647      	mov	r7, r8
 8001900:	e056      	b.n	80019b0 <__aeabi_dmul+0x148>
 8001902:	4649      	mov	r1, r9
 8001904:	4bb0      	ldr	r3, [pc, #704]	; (8001bc8 <__aeabi_dmul+0x360>)
 8001906:	4321      	orrs	r1, r4
 8001908:	18eb      	adds	r3, r5, r3
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	2900      	cmp	r1, #0
 800190e:	d12a      	bne.n	8001966 <__aeabi_dmul+0xfe>
 8001910:	2080      	movs	r0, #128	; 0x80
 8001912:	2202      	movs	r2, #2
 8001914:	0100      	lsls	r0, r0, #4
 8001916:	002b      	movs	r3, r5
 8001918:	4684      	mov	ip, r0
 800191a:	4316      	orrs	r6, r2
 800191c:	4642      	mov	r2, r8
 800191e:	4463      	add	r3, ip
 8001920:	407a      	eors	r2, r7
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	2e0a      	cmp	r6, #10
 8001928:	dd00      	ble.n	800192c <__aeabi_dmul+0xc4>
 800192a:	e231      	b.n	8001d90 <__aeabi_dmul+0x528>
 800192c:	2000      	movs	r0, #0
 800192e:	2400      	movs	r4, #0
 8001930:	2102      	movs	r1, #2
 8001932:	2e02      	cmp	r6, #2
 8001934:	dc26      	bgt.n	8001984 <__aeabi_dmul+0x11c>
 8001936:	3e01      	subs	r6, #1
 8001938:	2e01      	cmp	r6, #1
 800193a:	d852      	bhi.n	80019e2 <__aeabi_dmul+0x17a>
 800193c:	2902      	cmp	r1, #2
 800193e:	d04c      	beq.n	80019da <__aeabi_dmul+0x172>
 8001940:	2901      	cmp	r1, #1
 8001942:	d000      	beq.n	8001946 <__aeabi_dmul+0xde>
 8001944:	e118      	b.n	8001b78 <__aeabi_dmul+0x310>
 8001946:	2300      	movs	r3, #0
 8001948:	2400      	movs	r4, #0
 800194a:	2500      	movs	r5, #0
 800194c:	051b      	lsls	r3, r3, #20
 800194e:	4323      	orrs	r3, r4
 8001950:	07d2      	lsls	r2, r2, #31
 8001952:	4313      	orrs	r3, r2
 8001954:	0028      	movs	r0, r5
 8001956:	0019      	movs	r1, r3
 8001958:	b007      	add	sp, #28
 800195a:	bcf0      	pop	{r4, r5, r6, r7}
 800195c:	46bb      	mov	fp, r7
 800195e:	46b2      	mov	sl, r6
 8001960:	46a9      	mov	r9, r5
 8001962:	46a0      	mov	r8, r4
 8001964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	2203      	movs	r2, #3
 800196a:	0109      	lsls	r1, r1, #4
 800196c:	002b      	movs	r3, r5
 800196e:	468c      	mov	ip, r1
 8001970:	4316      	orrs	r6, r2
 8001972:	4642      	mov	r2, r8
 8001974:	4463      	add	r3, ip
 8001976:	407a      	eors	r2, r7
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	9302      	str	r3, [sp, #8]
 800197c:	2e0a      	cmp	r6, #10
 800197e:	dd00      	ble.n	8001982 <__aeabi_dmul+0x11a>
 8001980:	e228      	b.n	8001dd4 <__aeabi_dmul+0x56c>
 8001982:	2103      	movs	r1, #3
 8001984:	2501      	movs	r5, #1
 8001986:	40b5      	lsls	r5, r6
 8001988:	46ac      	mov	ip, r5
 800198a:	26a6      	movs	r6, #166	; 0xa6
 800198c:	4663      	mov	r3, ip
 800198e:	00f6      	lsls	r6, r6, #3
 8001990:	4035      	ands	r5, r6
 8001992:	4233      	tst	r3, r6
 8001994:	d10b      	bne.n	80019ae <__aeabi_dmul+0x146>
 8001996:	2690      	movs	r6, #144	; 0x90
 8001998:	00b6      	lsls	r6, r6, #2
 800199a:	4233      	tst	r3, r6
 800199c:	d118      	bne.n	80019d0 <__aeabi_dmul+0x168>
 800199e:	3eb9      	subs	r6, #185	; 0xb9
 80019a0:	3eff      	subs	r6, #255	; 0xff
 80019a2:	421e      	tst	r6, r3
 80019a4:	d01d      	beq.n	80019e2 <__aeabi_dmul+0x17a>
 80019a6:	46a3      	mov	fp, r4
 80019a8:	4682      	mov	sl, r0
 80019aa:	9100      	str	r1, [sp, #0]
 80019ac:	e000      	b.n	80019b0 <__aeabi_dmul+0x148>
 80019ae:	0017      	movs	r7, r2
 80019b0:	9900      	ldr	r1, [sp, #0]
 80019b2:	003a      	movs	r2, r7
 80019b4:	2902      	cmp	r1, #2
 80019b6:	d010      	beq.n	80019da <__aeabi_dmul+0x172>
 80019b8:	465c      	mov	r4, fp
 80019ba:	4650      	mov	r0, sl
 80019bc:	2903      	cmp	r1, #3
 80019be:	d1bf      	bne.n	8001940 <__aeabi_dmul+0xd8>
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	031b      	lsls	r3, r3, #12
 80019c4:	431c      	orrs	r4, r3
 80019c6:	0324      	lsls	r4, r4, #12
 80019c8:	0005      	movs	r5, r0
 80019ca:	4b7f      	ldr	r3, [pc, #508]	; (8001bc8 <__aeabi_dmul+0x360>)
 80019cc:	0b24      	lsrs	r4, r4, #12
 80019ce:	e7bd      	b.n	800194c <__aeabi_dmul+0xe4>
 80019d0:	2480      	movs	r4, #128	; 0x80
 80019d2:	2200      	movs	r2, #0
 80019d4:	4b7c      	ldr	r3, [pc, #496]	; (8001bc8 <__aeabi_dmul+0x360>)
 80019d6:	0324      	lsls	r4, r4, #12
 80019d8:	e7b8      	b.n	800194c <__aeabi_dmul+0xe4>
 80019da:	2400      	movs	r4, #0
 80019dc:	2500      	movs	r5, #0
 80019de:	4b7a      	ldr	r3, [pc, #488]	; (8001bc8 <__aeabi_dmul+0x360>)
 80019e0:	e7b4      	b.n	800194c <__aeabi_dmul+0xe4>
 80019e2:	4653      	mov	r3, sl
 80019e4:	041e      	lsls	r6, r3, #16
 80019e6:	0c36      	lsrs	r6, r6, #16
 80019e8:	0c1f      	lsrs	r7, r3, #16
 80019ea:	0033      	movs	r3, r6
 80019ec:	0c01      	lsrs	r1, r0, #16
 80019ee:	0400      	lsls	r0, r0, #16
 80019f0:	0c00      	lsrs	r0, r0, #16
 80019f2:	4343      	muls	r3, r0
 80019f4:	4698      	mov	r8, r3
 80019f6:	0003      	movs	r3, r0
 80019f8:	437b      	muls	r3, r7
 80019fa:	4699      	mov	r9, r3
 80019fc:	0033      	movs	r3, r6
 80019fe:	434b      	muls	r3, r1
 8001a00:	469c      	mov	ip, r3
 8001a02:	4643      	mov	r3, r8
 8001a04:	000d      	movs	r5, r1
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	469a      	mov	sl, r3
 8001a0a:	437d      	muls	r5, r7
 8001a0c:	44cc      	add	ip, r9
 8001a0e:	44d4      	add	ip, sl
 8001a10:	9500      	str	r5, [sp, #0]
 8001a12:	45e1      	cmp	r9, ip
 8001a14:	d904      	bls.n	8001a20 <__aeabi_dmul+0x1b8>
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	025b      	lsls	r3, r3, #9
 8001a1a:	4699      	mov	r9, r3
 8001a1c:	444d      	add	r5, r9
 8001a1e:	9500      	str	r5, [sp, #0]
 8001a20:	4663      	mov	r3, ip
 8001a22:	0c1b      	lsrs	r3, r3, #16
 8001a24:	001d      	movs	r5, r3
 8001a26:	4663      	mov	r3, ip
 8001a28:	041b      	lsls	r3, r3, #16
 8001a2a:	469c      	mov	ip, r3
 8001a2c:	4643      	mov	r3, r8
 8001a2e:	041b      	lsls	r3, r3, #16
 8001a30:	0c1b      	lsrs	r3, r3, #16
 8001a32:	4698      	mov	r8, r3
 8001a34:	4663      	mov	r3, ip
 8001a36:	4443      	add	r3, r8
 8001a38:	9303      	str	r3, [sp, #12]
 8001a3a:	0c23      	lsrs	r3, r4, #16
 8001a3c:	4698      	mov	r8, r3
 8001a3e:	0033      	movs	r3, r6
 8001a40:	0424      	lsls	r4, r4, #16
 8001a42:	0c24      	lsrs	r4, r4, #16
 8001a44:	4363      	muls	r3, r4
 8001a46:	469c      	mov	ip, r3
 8001a48:	0023      	movs	r3, r4
 8001a4a:	437b      	muls	r3, r7
 8001a4c:	4699      	mov	r9, r3
 8001a4e:	4643      	mov	r3, r8
 8001a50:	435e      	muls	r6, r3
 8001a52:	435f      	muls	r7, r3
 8001a54:	444e      	add	r6, r9
 8001a56:	4663      	mov	r3, ip
 8001a58:	46b2      	mov	sl, r6
 8001a5a:	0c1e      	lsrs	r6, r3, #16
 8001a5c:	4456      	add	r6, sl
 8001a5e:	45b1      	cmp	r9, r6
 8001a60:	d903      	bls.n	8001a6a <__aeabi_dmul+0x202>
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	025b      	lsls	r3, r3, #9
 8001a66:	4699      	mov	r9, r3
 8001a68:	444f      	add	r7, r9
 8001a6a:	0c33      	lsrs	r3, r6, #16
 8001a6c:	4699      	mov	r9, r3
 8001a6e:	003b      	movs	r3, r7
 8001a70:	444b      	add	r3, r9
 8001a72:	9305      	str	r3, [sp, #20]
 8001a74:	4663      	mov	r3, ip
 8001a76:	46ac      	mov	ip, r5
 8001a78:	041f      	lsls	r7, r3, #16
 8001a7a:	0c3f      	lsrs	r7, r7, #16
 8001a7c:	0436      	lsls	r6, r6, #16
 8001a7e:	19f6      	adds	r6, r6, r7
 8001a80:	44b4      	add	ip, r6
 8001a82:	4663      	mov	r3, ip
 8001a84:	9304      	str	r3, [sp, #16]
 8001a86:	465b      	mov	r3, fp
 8001a88:	0c1b      	lsrs	r3, r3, #16
 8001a8a:	469c      	mov	ip, r3
 8001a8c:	465b      	mov	r3, fp
 8001a8e:	041f      	lsls	r7, r3, #16
 8001a90:	0c3f      	lsrs	r7, r7, #16
 8001a92:	003b      	movs	r3, r7
 8001a94:	4343      	muls	r3, r0
 8001a96:	4699      	mov	r9, r3
 8001a98:	4663      	mov	r3, ip
 8001a9a:	4343      	muls	r3, r0
 8001a9c:	469a      	mov	sl, r3
 8001a9e:	464b      	mov	r3, r9
 8001aa0:	4660      	mov	r0, ip
 8001aa2:	0c1b      	lsrs	r3, r3, #16
 8001aa4:	469b      	mov	fp, r3
 8001aa6:	4348      	muls	r0, r1
 8001aa8:	4379      	muls	r1, r7
 8001aaa:	4451      	add	r1, sl
 8001aac:	4459      	add	r1, fp
 8001aae:	458a      	cmp	sl, r1
 8001ab0:	d903      	bls.n	8001aba <__aeabi_dmul+0x252>
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	025b      	lsls	r3, r3, #9
 8001ab6:	469a      	mov	sl, r3
 8001ab8:	4450      	add	r0, sl
 8001aba:	0c0b      	lsrs	r3, r1, #16
 8001abc:	469a      	mov	sl, r3
 8001abe:	464b      	mov	r3, r9
 8001ac0:	041b      	lsls	r3, r3, #16
 8001ac2:	0c1b      	lsrs	r3, r3, #16
 8001ac4:	4699      	mov	r9, r3
 8001ac6:	003b      	movs	r3, r7
 8001ac8:	4363      	muls	r3, r4
 8001aca:	0409      	lsls	r1, r1, #16
 8001acc:	4645      	mov	r5, r8
 8001ace:	4449      	add	r1, r9
 8001ad0:	4699      	mov	r9, r3
 8001ad2:	4663      	mov	r3, ip
 8001ad4:	435c      	muls	r4, r3
 8001ad6:	436b      	muls	r3, r5
 8001ad8:	469c      	mov	ip, r3
 8001ada:	464b      	mov	r3, r9
 8001adc:	0c1b      	lsrs	r3, r3, #16
 8001ade:	4698      	mov	r8, r3
 8001ae0:	436f      	muls	r7, r5
 8001ae2:	193f      	adds	r7, r7, r4
 8001ae4:	4447      	add	r7, r8
 8001ae6:	4450      	add	r0, sl
 8001ae8:	42bc      	cmp	r4, r7
 8001aea:	d903      	bls.n	8001af4 <__aeabi_dmul+0x28c>
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	025b      	lsls	r3, r3, #9
 8001af0:	4698      	mov	r8, r3
 8001af2:	44c4      	add	ip, r8
 8001af4:	9b04      	ldr	r3, [sp, #16]
 8001af6:	9d00      	ldr	r5, [sp, #0]
 8001af8:	4698      	mov	r8, r3
 8001afa:	4445      	add	r5, r8
 8001afc:	42b5      	cmp	r5, r6
 8001afe:	41b6      	sbcs	r6, r6
 8001b00:	4273      	negs	r3, r6
 8001b02:	4698      	mov	r8, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	041e      	lsls	r6, r3, #16
 8001b08:	9b05      	ldr	r3, [sp, #20]
 8001b0a:	043c      	lsls	r4, r7, #16
 8001b0c:	4699      	mov	r9, r3
 8001b0e:	0c36      	lsrs	r6, r6, #16
 8001b10:	19a4      	adds	r4, r4, r6
 8001b12:	444c      	add	r4, r9
 8001b14:	46a1      	mov	r9, r4
 8001b16:	4683      	mov	fp, r0
 8001b18:	186e      	adds	r6, r5, r1
 8001b1a:	44c1      	add	r9, r8
 8001b1c:	428e      	cmp	r6, r1
 8001b1e:	4189      	sbcs	r1, r1
 8001b20:	44cb      	add	fp, r9
 8001b22:	465d      	mov	r5, fp
 8001b24:	4249      	negs	r1, r1
 8001b26:	186d      	adds	r5, r5, r1
 8001b28:	429c      	cmp	r4, r3
 8001b2a:	41a4      	sbcs	r4, r4
 8001b2c:	45c1      	cmp	r9, r8
 8001b2e:	419b      	sbcs	r3, r3
 8001b30:	4583      	cmp	fp, r0
 8001b32:	4180      	sbcs	r0, r0
 8001b34:	428d      	cmp	r5, r1
 8001b36:	4189      	sbcs	r1, r1
 8001b38:	425b      	negs	r3, r3
 8001b3a:	4264      	negs	r4, r4
 8001b3c:	431c      	orrs	r4, r3
 8001b3e:	4240      	negs	r0, r0
 8001b40:	9b03      	ldr	r3, [sp, #12]
 8001b42:	4249      	negs	r1, r1
 8001b44:	4301      	orrs	r1, r0
 8001b46:	0270      	lsls	r0, r6, #9
 8001b48:	0c3f      	lsrs	r7, r7, #16
 8001b4a:	4318      	orrs	r0, r3
 8001b4c:	19e4      	adds	r4, r4, r7
 8001b4e:	1e47      	subs	r7, r0, #1
 8001b50:	41b8      	sbcs	r0, r7
 8001b52:	1864      	adds	r4, r4, r1
 8001b54:	4464      	add	r4, ip
 8001b56:	0df6      	lsrs	r6, r6, #23
 8001b58:	0261      	lsls	r1, r4, #9
 8001b5a:	4330      	orrs	r0, r6
 8001b5c:	0dec      	lsrs	r4, r5, #23
 8001b5e:	026e      	lsls	r6, r5, #9
 8001b60:	430c      	orrs	r4, r1
 8001b62:	4330      	orrs	r0, r6
 8001b64:	01c9      	lsls	r1, r1, #7
 8001b66:	d400      	bmi.n	8001b6a <__aeabi_dmul+0x302>
 8001b68:	e0f1      	b.n	8001d4e <__aeabi_dmul+0x4e6>
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	0843      	lsrs	r3, r0, #1
 8001b6e:	4001      	ands	r1, r0
 8001b70:	430b      	orrs	r3, r1
 8001b72:	07e0      	lsls	r0, r4, #31
 8001b74:	4318      	orrs	r0, r3
 8001b76:	0864      	lsrs	r4, r4, #1
 8001b78:	4915      	ldr	r1, [pc, #84]	; (8001bd0 <__aeabi_dmul+0x368>)
 8001b7a:	9b02      	ldr	r3, [sp, #8]
 8001b7c:	468c      	mov	ip, r1
 8001b7e:	4463      	add	r3, ip
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	dc00      	bgt.n	8001b86 <__aeabi_dmul+0x31e>
 8001b84:	e097      	b.n	8001cb6 <__aeabi_dmul+0x44e>
 8001b86:	0741      	lsls	r1, r0, #29
 8001b88:	d009      	beq.n	8001b9e <__aeabi_dmul+0x336>
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	4001      	ands	r1, r0
 8001b8e:	2904      	cmp	r1, #4
 8001b90:	d005      	beq.n	8001b9e <__aeabi_dmul+0x336>
 8001b92:	1d01      	adds	r1, r0, #4
 8001b94:	4281      	cmp	r1, r0
 8001b96:	4180      	sbcs	r0, r0
 8001b98:	4240      	negs	r0, r0
 8001b9a:	1824      	adds	r4, r4, r0
 8001b9c:	0008      	movs	r0, r1
 8001b9e:	01e1      	lsls	r1, r4, #7
 8001ba0:	d506      	bpl.n	8001bb0 <__aeabi_dmul+0x348>
 8001ba2:	2180      	movs	r1, #128	; 0x80
 8001ba4:	00c9      	lsls	r1, r1, #3
 8001ba6:	468c      	mov	ip, r1
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <__aeabi_dmul+0x36c>)
 8001baa:	401c      	ands	r4, r3
 8001bac:	9b02      	ldr	r3, [sp, #8]
 8001bae:	4463      	add	r3, ip
 8001bb0:	4909      	ldr	r1, [pc, #36]	; (8001bd8 <__aeabi_dmul+0x370>)
 8001bb2:	428b      	cmp	r3, r1
 8001bb4:	dd00      	ble.n	8001bb8 <__aeabi_dmul+0x350>
 8001bb6:	e710      	b.n	80019da <__aeabi_dmul+0x172>
 8001bb8:	0761      	lsls	r1, r4, #29
 8001bba:	08c5      	lsrs	r5, r0, #3
 8001bbc:	0264      	lsls	r4, r4, #9
 8001bbe:	055b      	lsls	r3, r3, #21
 8001bc0:	430d      	orrs	r5, r1
 8001bc2:	0b24      	lsrs	r4, r4, #12
 8001bc4:	0d5b      	lsrs	r3, r3, #21
 8001bc6:	e6c1      	b.n	800194c <__aeabi_dmul+0xe4>
 8001bc8:	000007ff 	.word	0x000007ff
 8001bcc:	fffffc01 	.word	0xfffffc01
 8001bd0:	000003ff 	.word	0x000003ff
 8001bd4:	feffffff 	.word	0xfeffffff
 8001bd8:	000007fe 	.word	0x000007fe
 8001bdc:	464b      	mov	r3, r9
 8001bde:	4323      	orrs	r3, r4
 8001be0:	d059      	beq.n	8001c96 <__aeabi_dmul+0x42e>
 8001be2:	2c00      	cmp	r4, #0
 8001be4:	d100      	bne.n	8001be8 <__aeabi_dmul+0x380>
 8001be6:	e0a3      	b.n	8001d30 <__aeabi_dmul+0x4c8>
 8001be8:	0020      	movs	r0, r4
 8001bea:	f000 fd73 	bl	80026d4 <__clzsi2>
 8001bee:	0001      	movs	r1, r0
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	390b      	subs	r1, #11
 8001bf4:	221d      	movs	r2, #29
 8001bf6:	1a52      	subs	r2, r2, r1
 8001bf8:	4649      	mov	r1, r9
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	40d1      	lsrs	r1, r2
 8001bfe:	464a      	mov	r2, r9
 8001c00:	3808      	subs	r0, #8
 8001c02:	4082      	lsls	r2, r0
 8001c04:	4084      	lsls	r4, r0
 8001c06:	0010      	movs	r0, r2
 8001c08:	430c      	orrs	r4, r1
 8001c0a:	4a74      	ldr	r2, [pc, #464]	; (8001ddc <__aeabi_dmul+0x574>)
 8001c0c:	1aeb      	subs	r3, r5, r3
 8001c0e:	4694      	mov	ip, r2
 8001c10:	4642      	mov	r2, r8
 8001c12:	4463      	add	r3, ip
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	9b01      	ldr	r3, [sp, #4]
 8001c18:	407a      	eors	r2, r7
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	9302      	str	r3, [sp, #8]
 8001c22:	2e0a      	cmp	r6, #10
 8001c24:	dd00      	ble.n	8001c28 <__aeabi_dmul+0x3c0>
 8001c26:	e667      	b.n	80018f8 <__aeabi_dmul+0x90>
 8001c28:	e683      	b.n	8001932 <__aeabi_dmul+0xca>
 8001c2a:	465b      	mov	r3, fp
 8001c2c:	4303      	orrs	r3, r0
 8001c2e:	469a      	mov	sl, r3
 8001c30:	d02a      	beq.n	8001c88 <__aeabi_dmul+0x420>
 8001c32:	465b      	mov	r3, fp
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d06d      	beq.n	8001d14 <__aeabi_dmul+0x4ac>
 8001c38:	4658      	mov	r0, fp
 8001c3a:	f000 fd4b 	bl	80026d4 <__clzsi2>
 8001c3e:	0001      	movs	r1, r0
 8001c40:	0003      	movs	r3, r0
 8001c42:	390b      	subs	r1, #11
 8001c44:	221d      	movs	r2, #29
 8001c46:	1a52      	subs	r2, r2, r1
 8001c48:	0021      	movs	r1, r4
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	465d      	mov	r5, fp
 8001c4e:	40d1      	lsrs	r1, r2
 8001c50:	3808      	subs	r0, #8
 8001c52:	4085      	lsls	r5, r0
 8001c54:	000a      	movs	r2, r1
 8001c56:	4084      	lsls	r4, r0
 8001c58:	432a      	orrs	r2, r5
 8001c5a:	4693      	mov	fp, r2
 8001c5c:	46a2      	mov	sl, r4
 8001c5e:	4d5f      	ldr	r5, [pc, #380]	; (8001ddc <__aeabi_dmul+0x574>)
 8001c60:	2600      	movs	r6, #0
 8001c62:	1aed      	subs	r5, r5, r3
 8001c64:	2300      	movs	r3, #0
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	e625      	b.n	80018b6 <__aeabi_dmul+0x4e>
 8001c6a:	465b      	mov	r3, fp
 8001c6c:	4303      	orrs	r3, r0
 8001c6e:	469a      	mov	sl, r3
 8001c70:	d105      	bne.n	8001c7e <__aeabi_dmul+0x416>
 8001c72:	2300      	movs	r3, #0
 8001c74:	469b      	mov	fp, r3
 8001c76:	3302      	adds	r3, #2
 8001c78:	2608      	movs	r6, #8
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	e61b      	b.n	80018b6 <__aeabi_dmul+0x4e>
 8001c7e:	2303      	movs	r3, #3
 8001c80:	4682      	mov	sl, r0
 8001c82:	260c      	movs	r6, #12
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	e616      	b.n	80018b6 <__aeabi_dmul+0x4e>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	469b      	mov	fp, r3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	2604      	movs	r6, #4
 8001c90:	2500      	movs	r5, #0
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	e60f      	b.n	80018b6 <__aeabi_dmul+0x4e>
 8001c96:	4642      	mov	r2, r8
 8001c98:	3301      	adds	r3, #1
 8001c9a:	9501      	str	r5, [sp, #4]
 8001c9c:	431e      	orrs	r6, r3
 8001c9e:	9b01      	ldr	r3, [sp, #4]
 8001ca0:	407a      	eors	r2, r7
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	2400      	movs	r4, #0
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	2101      	movs	r1, #1
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	9302      	str	r3, [sp, #8]
 8001cae:	2e0a      	cmp	r6, #10
 8001cb0:	dd00      	ble.n	8001cb4 <__aeabi_dmul+0x44c>
 8001cb2:	e621      	b.n	80018f8 <__aeabi_dmul+0x90>
 8001cb4:	e63d      	b.n	8001932 <__aeabi_dmul+0xca>
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	1ac9      	subs	r1, r1, r3
 8001cba:	2938      	cmp	r1, #56	; 0x38
 8001cbc:	dd00      	ble.n	8001cc0 <__aeabi_dmul+0x458>
 8001cbe:	e642      	b.n	8001946 <__aeabi_dmul+0xde>
 8001cc0:	291f      	cmp	r1, #31
 8001cc2:	dd47      	ble.n	8001d54 <__aeabi_dmul+0x4ec>
 8001cc4:	261f      	movs	r6, #31
 8001cc6:	0025      	movs	r5, r4
 8001cc8:	4276      	negs	r6, r6
 8001cca:	1af3      	subs	r3, r6, r3
 8001ccc:	40dd      	lsrs	r5, r3
 8001cce:	002b      	movs	r3, r5
 8001cd0:	2920      	cmp	r1, #32
 8001cd2:	d005      	beq.n	8001ce0 <__aeabi_dmul+0x478>
 8001cd4:	4942      	ldr	r1, [pc, #264]	; (8001de0 <__aeabi_dmul+0x578>)
 8001cd6:	9d02      	ldr	r5, [sp, #8]
 8001cd8:	468c      	mov	ip, r1
 8001cda:	4465      	add	r5, ip
 8001cdc:	40ac      	lsls	r4, r5
 8001cde:	4320      	orrs	r0, r4
 8001ce0:	1e41      	subs	r1, r0, #1
 8001ce2:	4188      	sbcs	r0, r1
 8001ce4:	4318      	orrs	r0, r3
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	001d      	movs	r5, r3
 8001cea:	2400      	movs	r4, #0
 8001cec:	4005      	ands	r5, r0
 8001cee:	4203      	tst	r3, r0
 8001cf0:	d04a      	beq.n	8001d88 <__aeabi_dmul+0x520>
 8001cf2:	230f      	movs	r3, #15
 8001cf4:	2400      	movs	r4, #0
 8001cf6:	4003      	ands	r3, r0
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d042      	beq.n	8001d82 <__aeabi_dmul+0x51a>
 8001cfc:	1d03      	adds	r3, r0, #4
 8001cfe:	4283      	cmp	r3, r0
 8001d00:	4180      	sbcs	r0, r0
 8001d02:	4240      	negs	r0, r0
 8001d04:	1824      	adds	r4, r4, r0
 8001d06:	0018      	movs	r0, r3
 8001d08:	0223      	lsls	r3, r4, #8
 8001d0a:	d53a      	bpl.n	8001d82 <__aeabi_dmul+0x51a>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	2400      	movs	r4, #0
 8001d10:	2500      	movs	r5, #0
 8001d12:	e61b      	b.n	800194c <__aeabi_dmul+0xe4>
 8001d14:	f000 fcde 	bl	80026d4 <__clzsi2>
 8001d18:	0001      	movs	r1, r0
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	3115      	adds	r1, #21
 8001d1e:	3320      	adds	r3, #32
 8001d20:	291c      	cmp	r1, #28
 8001d22:	dd8f      	ble.n	8001c44 <__aeabi_dmul+0x3dc>
 8001d24:	3808      	subs	r0, #8
 8001d26:	2200      	movs	r2, #0
 8001d28:	4084      	lsls	r4, r0
 8001d2a:	4692      	mov	sl, r2
 8001d2c:	46a3      	mov	fp, r4
 8001d2e:	e796      	b.n	8001c5e <__aeabi_dmul+0x3f6>
 8001d30:	f000 fcd0 	bl	80026d4 <__clzsi2>
 8001d34:	0001      	movs	r1, r0
 8001d36:	0003      	movs	r3, r0
 8001d38:	3115      	adds	r1, #21
 8001d3a:	3320      	adds	r3, #32
 8001d3c:	291c      	cmp	r1, #28
 8001d3e:	dc00      	bgt.n	8001d42 <__aeabi_dmul+0x4da>
 8001d40:	e758      	b.n	8001bf4 <__aeabi_dmul+0x38c>
 8001d42:	0002      	movs	r2, r0
 8001d44:	464c      	mov	r4, r9
 8001d46:	3a08      	subs	r2, #8
 8001d48:	2000      	movs	r0, #0
 8001d4a:	4094      	lsls	r4, r2
 8001d4c:	e75d      	b.n	8001c0a <__aeabi_dmul+0x3a2>
 8001d4e:	9b01      	ldr	r3, [sp, #4]
 8001d50:	9302      	str	r3, [sp, #8]
 8001d52:	e711      	b.n	8001b78 <__aeabi_dmul+0x310>
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <__aeabi_dmul+0x57c>)
 8001d56:	0026      	movs	r6, r4
 8001d58:	469c      	mov	ip, r3
 8001d5a:	0003      	movs	r3, r0
 8001d5c:	9d02      	ldr	r5, [sp, #8]
 8001d5e:	40cb      	lsrs	r3, r1
 8001d60:	4465      	add	r5, ip
 8001d62:	40ae      	lsls	r6, r5
 8001d64:	431e      	orrs	r6, r3
 8001d66:	0003      	movs	r3, r0
 8001d68:	40ab      	lsls	r3, r5
 8001d6a:	1e58      	subs	r0, r3, #1
 8001d6c:	4183      	sbcs	r3, r0
 8001d6e:	0030      	movs	r0, r6
 8001d70:	4318      	orrs	r0, r3
 8001d72:	40cc      	lsrs	r4, r1
 8001d74:	0743      	lsls	r3, r0, #29
 8001d76:	d0c7      	beq.n	8001d08 <__aeabi_dmul+0x4a0>
 8001d78:	230f      	movs	r3, #15
 8001d7a:	4003      	ands	r3, r0
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d1bd      	bne.n	8001cfc <__aeabi_dmul+0x494>
 8001d80:	e7c2      	b.n	8001d08 <__aeabi_dmul+0x4a0>
 8001d82:	0765      	lsls	r5, r4, #29
 8001d84:	0264      	lsls	r4, r4, #9
 8001d86:	0b24      	lsrs	r4, r4, #12
 8001d88:	08c0      	lsrs	r0, r0, #3
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	4305      	orrs	r5, r0
 8001d8e:	e5dd      	b.n	800194c <__aeabi_dmul+0xe4>
 8001d90:	2500      	movs	r5, #0
 8001d92:	2302      	movs	r3, #2
 8001d94:	2e0f      	cmp	r6, #15
 8001d96:	d10c      	bne.n	8001db2 <__aeabi_dmul+0x54a>
 8001d98:	2480      	movs	r4, #128	; 0x80
 8001d9a:	465b      	mov	r3, fp
 8001d9c:	0324      	lsls	r4, r4, #12
 8001d9e:	4223      	tst	r3, r4
 8001da0:	d00e      	beq.n	8001dc0 <__aeabi_dmul+0x558>
 8001da2:	4221      	tst	r1, r4
 8001da4:	d10c      	bne.n	8001dc0 <__aeabi_dmul+0x558>
 8001da6:	430c      	orrs	r4, r1
 8001da8:	0324      	lsls	r4, r4, #12
 8001daa:	003a      	movs	r2, r7
 8001dac:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <__aeabi_dmul+0x580>)
 8001dae:	0b24      	lsrs	r4, r4, #12
 8001db0:	e5cc      	b.n	800194c <__aeabi_dmul+0xe4>
 8001db2:	2e0b      	cmp	r6, #11
 8001db4:	d000      	beq.n	8001db8 <__aeabi_dmul+0x550>
 8001db6:	e5a2      	b.n	80018fe <__aeabi_dmul+0x96>
 8001db8:	468b      	mov	fp, r1
 8001dba:	46aa      	mov	sl, r5
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	e5f7      	b.n	80019b0 <__aeabi_dmul+0x148>
 8001dc0:	2480      	movs	r4, #128	; 0x80
 8001dc2:	465b      	mov	r3, fp
 8001dc4:	0324      	lsls	r4, r4, #12
 8001dc6:	431c      	orrs	r4, r3
 8001dc8:	0324      	lsls	r4, r4, #12
 8001dca:	4642      	mov	r2, r8
 8001dcc:	4655      	mov	r5, sl
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <__aeabi_dmul+0x580>)
 8001dd0:	0b24      	lsrs	r4, r4, #12
 8001dd2:	e5bb      	b.n	800194c <__aeabi_dmul+0xe4>
 8001dd4:	464d      	mov	r5, r9
 8001dd6:	0021      	movs	r1, r4
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e7db      	b.n	8001d94 <__aeabi_dmul+0x52c>
 8001ddc:	fffffc0d 	.word	0xfffffc0d
 8001de0:	0000043e 	.word	0x0000043e
 8001de4:	0000041e 	.word	0x0000041e
 8001de8:	000007ff 	.word	0x000007ff

08001dec <__aeabi_dsub>:
 8001dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dee:	4657      	mov	r7, sl
 8001df0:	464e      	mov	r6, r9
 8001df2:	4645      	mov	r5, r8
 8001df4:	46de      	mov	lr, fp
 8001df6:	b5e0      	push	{r5, r6, r7, lr}
 8001df8:	000d      	movs	r5, r1
 8001dfa:	0004      	movs	r4, r0
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	0010      	movs	r0, r2
 8001e00:	032b      	lsls	r3, r5, #12
 8001e02:	0a5b      	lsrs	r3, r3, #9
 8001e04:	0f62      	lsrs	r2, r4, #29
 8001e06:	431a      	orrs	r2, r3
 8001e08:	00e3      	lsls	r3, r4, #3
 8001e0a:	030c      	lsls	r4, r1, #12
 8001e0c:	0a64      	lsrs	r4, r4, #9
 8001e0e:	0f47      	lsrs	r7, r0, #29
 8001e10:	4327      	orrs	r7, r4
 8001e12:	4cd0      	ldr	r4, [pc, #832]	; (8002154 <__aeabi_dsub+0x368>)
 8001e14:	006e      	lsls	r6, r5, #1
 8001e16:	4691      	mov	r9, r2
 8001e18:	b083      	sub	sp, #12
 8001e1a:	004a      	lsls	r2, r1, #1
 8001e1c:	00c0      	lsls	r0, r0, #3
 8001e1e:	4698      	mov	r8, r3
 8001e20:	46a2      	mov	sl, r4
 8001e22:	0d76      	lsrs	r6, r6, #21
 8001e24:	0fed      	lsrs	r5, r5, #31
 8001e26:	0d52      	lsrs	r2, r2, #21
 8001e28:	0fc9      	lsrs	r1, r1, #31
 8001e2a:	9001      	str	r0, [sp, #4]
 8001e2c:	42a2      	cmp	r2, r4
 8001e2e:	d100      	bne.n	8001e32 <__aeabi_dsub+0x46>
 8001e30:	e0b9      	b.n	8001fa6 <__aeabi_dsub+0x1ba>
 8001e32:	2401      	movs	r4, #1
 8001e34:	4061      	eors	r1, r4
 8001e36:	468b      	mov	fp, r1
 8001e38:	428d      	cmp	r5, r1
 8001e3a:	d100      	bne.n	8001e3e <__aeabi_dsub+0x52>
 8001e3c:	e08d      	b.n	8001f5a <__aeabi_dsub+0x16e>
 8001e3e:	1ab4      	subs	r4, r6, r2
 8001e40:	46a4      	mov	ip, r4
 8001e42:	2c00      	cmp	r4, #0
 8001e44:	dc00      	bgt.n	8001e48 <__aeabi_dsub+0x5c>
 8001e46:	e0b7      	b.n	8001fb8 <__aeabi_dsub+0x1cc>
 8001e48:	2a00      	cmp	r2, #0
 8001e4a:	d100      	bne.n	8001e4e <__aeabi_dsub+0x62>
 8001e4c:	e0cb      	b.n	8001fe6 <__aeabi_dsub+0x1fa>
 8001e4e:	4ac1      	ldr	r2, [pc, #772]	; (8002154 <__aeabi_dsub+0x368>)
 8001e50:	4296      	cmp	r6, r2
 8001e52:	d100      	bne.n	8001e56 <__aeabi_dsub+0x6a>
 8001e54:	e186      	b.n	8002164 <__aeabi_dsub+0x378>
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	0412      	lsls	r2, r2, #16
 8001e5a:	4317      	orrs	r7, r2
 8001e5c:	4662      	mov	r2, ip
 8001e5e:	2a38      	cmp	r2, #56	; 0x38
 8001e60:	dd00      	ble.n	8001e64 <__aeabi_dsub+0x78>
 8001e62:	e1a4      	b.n	80021ae <__aeabi_dsub+0x3c2>
 8001e64:	2a1f      	cmp	r2, #31
 8001e66:	dd00      	ble.n	8001e6a <__aeabi_dsub+0x7e>
 8001e68:	e21d      	b.n	80022a6 <__aeabi_dsub+0x4ba>
 8001e6a:	4661      	mov	r1, ip
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	003c      	movs	r4, r7
 8001e70:	1a52      	subs	r2, r2, r1
 8001e72:	0001      	movs	r1, r0
 8001e74:	4090      	lsls	r0, r2
 8001e76:	4094      	lsls	r4, r2
 8001e78:	1e42      	subs	r2, r0, #1
 8001e7a:	4190      	sbcs	r0, r2
 8001e7c:	4662      	mov	r2, ip
 8001e7e:	46a0      	mov	r8, r4
 8001e80:	4664      	mov	r4, ip
 8001e82:	40d7      	lsrs	r7, r2
 8001e84:	464a      	mov	r2, r9
 8001e86:	40e1      	lsrs	r1, r4
 8001e88:	4644      	mov	r4, r8
 8001e8a:	1bd2      	subs	r2, r2, r7
 8001e8c:	4691      	mov	r9, r2
 8001e8e:	430c      	orrs	r4, r1
 8001e90:	4304      	orrs	r4, r0
 8001e92:	1b1c      	subs	r4, r3, r4
 8001e94:	42a3      	cmp	r3, r4
 8001e96:	4192      	sbcs	r2, r2
 8001e98:	464b      	mov	r3, r9
 8001e9a:	4252      	negs	r2, r2
 8001e9c:	1a9b      	subs	r3, r3, r2
 8001e9e:	469a      	mov	sl, r3
 8001ea0:	4653      	mov	r3, sl
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	d400      	bmi.n	8001ea8 <__aeabi_dsub+0xbc>
 8001ea6:	e12b      	b.n	8002100 <__aeabi_dsub+0x314>
 8001ea8:	4653      	mov	r3, sl
 8001eaa:	025a      	lsls	r2, r3, #9
 8001eac:	0a53      	lsrs	r3, r2, #9
 8001eae:	469a      	mov	sl, r3
 8001eb0:	4653      	mov	r3, sl
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d100      	bne.n	8001eb8 <__aeabi_dsub+0xcc>
 8001eb6:	e166      	b.n	8002186 <__aeabi_dsub+0x39a>
 8001eb8:	4650      	mov	r0, sl
 8001eba:	f000 fc0b 	bl	80026d4 <__clzsi2>
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	3b08      	subs	r3, #8
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	0020      	movs	r0, r4
 8001ec6:	1ad2      	subs	r2, r2, r3
 8001ec8:	4651      	mov	r1, sl
 8001eca:	40d0      	lsrs	r0, r2
 8001ecc:	4099      	lsls	r1, r3
 8001ece:	0002      	movs	r2, r0
 8001ed0:	409c      	lsls	r4, r3
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	429e      	cmp	r6, r3
 8001ed6:	dd00      	ble.n	8001eda <__aeabi_dsub+0xee>
 8001ed8:	e164      	b.n	80021a4 <__aeabi_dsub+0x3b8>
 8001eda:	1b9b      	subs	r3, r3, r6
 8001edc:	1c59      	adds	r1, r3, #1
 8001ede:	291f      	cmp	r1, #31
 8001ee0:	dd00      	ble.n	8001ee4 <__aeabi_dsub+0xf8>
 8001ee2:	e0fe      	b.n	80020e2 <__aeabi_dsub+0x2f6>
 8001ee4:	2320      	movs	r3, #32
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	0026      	movs	r6, r4
 8001eea:	1a5b      	subs	r3, r3, r1
 8001eec:	409c      	lsls	r4, r3
 8001eee:	4098      	lsls	r0, r3
 8001ef0:	40ce      	lsrs	r6, r1
 8001ef2:	40ca      	lsrs	r2, r1
 8001ef4:	1e63      	subs	r3, r4, #1
 8001ef6:	419c      	sbcs	r4, r3
 8001ef8:	4330      	orrs	r0, r6
 8001efa:	4692      	mov	sl, r2
 8001efc:	2600      	movs	r6, #0
 8001efe:	4304      	orrs	r4, r0
 8001f00:	0763      	lsls	r3, r4, #29
 8001f02:	d009      	beq.n	8001f18 <__aeabi_dsub+0x12c>
 8001f04:	230f      	movs	r3, #15
 8001f06:	4023      	ands	r3, r4
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d005      	beq.n	8001f18 <__aeabi_dsub+0x12c>
 8001f0c:	1d23      	adds	r3, r4, #4
 8001f0e:	42a3      	cmp	r3, r4
 8001f10:	41a4      	sbcs	r4, r4
 8001f12:	4264      	negs	r4, r4
 8001f14:	44a2      	add	sl, r4
 8001f16:	001c      	movs	r4, r3
 8001f18:	4653      	mov	r3, sl
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	d400      	bmi.n	8001f20 <__aeabi_dsub+0x134>
 8001f1e:	e0f2      	b.n	8002106 <__aeabi_dsub+0x31a>
 8001f20:	4b8c      	ldr	r3, [pc, #560]	; (8002154 <__aeabi_dsub+0x368>)
 8001f22:	3601      	adds	r6, #1
 8001f24:	429e      	cmp	r6, r3
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dsub+0x13e>
 8001f28:	e10f      	b.n	800214a <__aeabi_dsub+0x35e>
 8001f2a:	4653      	mov	r3, sl
 8001f2c:	498a      	ldr	r1, [pc, #552]	; (8002158 <__aeabi_dsub+0x36c>)
 8001f2e:	08e4      	lsrs	r4, r4, #3
 8001f30:	400b      	ands	r3, r1
 8001f32:	0019      	movs	r1, r3
 8001f34:	075b      	lsls	r3, r3, #29
 8001f36:	4323      	orrs	r3, r4
 8001f38:	0572      	lsls	r2, r6, #21
 8001f3a:	024c      	lsls	r4, r1, #9
 8001f3c:	0b24      	lsrs	r4, r4, #12
 8001f3e:	0d52      	lsrs	r2, r2, #21
 8001f40:	0512      	lsls	r2, r2, #20
 8001f42:	4322      	orrs	r2, r4
 8001f44:	07ed      	lsls	r5, r5, #31
 8001f46:	432a      	orrs	r2, r5
 8001f48:	0018      	movs	r0, r3
 8001f4a:	0011      	movs	r1, r2
 8001f4c:	b003      	add	sp, #12
 8001f4e:	bcf0      	pop	{r4, r5, r6, r7}
 8001f50:	46bb      	mov	fp, r7
 8001f52:	46b2      	mov	sl, r6
 8001f54:	46a9      	mov	r9, r5
 8001f56:	46a0      	mov	r8, r4
 8001f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f5a:	1ab4      	subs	r4, r6, r2
 8001f5c:	46a4      	mov	ip, r4
 8001f5e:	2c00      	cmp	r4, #0
 8001f60:	dd59      	ble.n	8002016 <__aeabi_dsub+0x22a>
 8001f62:	2a00      	cmp	r2, #0
 8001f64:	d100      	bne.n	8001f68 <__aeabi_dsub+0x17c>
 8001f66:	e0b0      	b.n	80020ca <__aeabi_dsub+0x2de>
 8001f68:	4556      	cmp	r6, sl
 8001f6a:	d100      	bne.n	8001f6e <__aeabi_dsub+0x182>
 8001f6c:	e0fa      	b.n	8002164 <__aeabi_dsub+0x378>
 8001f6e:	2280      	movs	r2, #128	; 0x80
 8001f70:	0412      	lsls	r2, r2, #16
 8001f72:	4317      	orrs	r7, r2
 8001f74:	4662      	mov	r2, ip
 8001f76:	2a38      	cmp	r2, #56	; 0x38
 8001f78:	dd00      	ble.n	8001f7c <__aeabi_dsub+0x190>
 8001f7a:	e0d4      	b.n	8002126 <__aeabi_dsub+0x33a>
 8001f7c:	2a1f      	cmp	r2, #31
 8001f7e:	dc00      	bgt.n	8001f82 <__aeabi_dsub+0x196>
 8001f80:	e1c0      	b.n	8002304 <__aeabi_dsub+0x518>
 8001f82:	0039      	movs	r1, r7
 8001f84:	3a20      	subs	r2, #32
 8001f86:	40d1      	lsrs	r1, r2
 8001f88:	4662      	mov	r2, ip
 8001f8a:	2a20      	cmp	r2, #32
 8001f8c:	d006      	beq.n	8001f9c <__aeabi_dsub+0x1b0>
 8001f8e:	4664      	mov	r4, ip
 8001f90:	2240      	movs	r2, #64	; 0x40
 8001f92:	1b12      	subs	r2, r2, r4
 8001f94:	003c      	movs	r4, r7
 8001f96:	4094      	lsls	r4, r2
 8001f98:	4304      	orrs	r4, r0
 8001f9a:	9401      	str	r4, [sp, #4]
 8001f9c:	9c01      	ldr	r4, [sp, #4]
 8001f9e:	1e62      	subs	r2, r4, #1
 8001fa0:	4194      	sbcs	r4, r2
 8001fa2:	430c      	orrs	r4, r1
 8001fa4:	e0c3      	b.n	800212e <__aeabi_dsub+0x342>
 8001fa6:	003c      	movs	r4, r7
 8001fa8:	4304      	orrs	r4, r0
 8001faa:	d02b      	beq.n	8002004 <__aeabi_dsub+0x218>
 8001fac:	468b      	mov	fp, r1
 8001fae:	428d      	cmp	r5, r1
 8001fb0:	d02e      	beq.n	8002010 <__aeabi_dsub+0x224>
 8001fb2:	4c6a      	ldr	r4, [pc, #424]	; (800215c <__aeabi_dsub+0x370>)
 8001fb4:	46a4      	mov	ip, r4
 8001fb6:	44b4      	add	ip, r6
 8001fb8:	4664      	mov	r4, ip
 8001fba:	2c00      	cmp	r4, #0
 8001fbc:	d05f      	beq.n	800207e <__aeabi_dsub+0x292>
 8001fbe:	1b94      	subs	r4, r2, r6
 8001fc0:	46a4      	mov	ip, r4
 8001fc2:	2e00      	cmp	r6, #0
 8001fc4:	d000      	beq.n	8001fc8 <__aeabi_dsub+0x1dc>
 8001fc6:	e120      	b.n	800220a <__aeabi_dsub+0x41e>
 8001fc8:	464c      	mov	r4, r9
 8001fca:	431c      	orrs	r4, r3
 8001fcc:	d100      	bne.n	8001fd0 <__aeabi_dsub+0x1e4>
 8001fce:	e1c7      	b.n	8002360 <__aeabi_dsub+0x574>
 8001fd0:	4661      	mov	r1, ip
 8001fd2:	1e4c      	subs	r4, r1, #1
 8001fd4:	2901      	cmp	r1, #1
 8001fd6:	d100      	bne.n	8001fda <__aeabi_dsub+0x1ee>
 8001fd8:	e223      	b.n	8002422 <__aeabi_dsub+0x636>
 8001fda:	4d5e      	ldr	r5, [pc, #376]	; (8002154 <__aeabi_dsub+0x368>)
 8001fdc:	45ac      	cmp	ip, r5
 8001fde:	d100      	bne.n	8001fe2 <__aeabi_dsub+0x1f6>
 8001fe0:	e1d8      	b.n	8002394 <__aeabi_dsub+0x5a8>
 8001fe2:	46a4      	mov	ip, r4
 8001fe4:	e11a      	b.n	800221c <__aeabi_dsub+0x430>
 8001fe6:	003a      	movs	r2, r7
 8001fe8:	4302      	orrs	r2, r0
 8001fea:	d100      	bne.n	8001fee <__aeabi_dsub+0x202>
 8001fec:	e0e4      	b.n	80021b8 <__aeabi_dsub+0x3cc>
 8001fee:	0022      	movs	r2, r4
 8001ff0:	3a01      	subs	r2, #1
 8001ff2:	2c01      	cmp	r4, #1
 8001ff4:	d100      	bne.n	8001ff8 <__aeabi_dsub+0x20c>
 8001ff6:	e1c3      	b.n	8002380 <__aeabi_dsub+0x594>
 8001ff8:	4956      	ldr	r1, [pc, #344]	; (8002154 <__aeabi_dsub+0x368>)
 8001ffa:	428c      	cmp	r4, r1
 8001ffc:	d100      	bne.n	8002000 <__aeabi_dsub+0x214>
 8001ffe:	e0b1      	b.n	8002164 <__aeabi_dsub+0x378>
 8002000:	4694      	mov	ip, r2
 8002002:	e72b      	b.n	8001e5c <__aeabi_dsub+0x70>
 8002004:	2401      	movs	r4, #1
 8002006:	4061      	eors	r1, r4
 8002008:	468b      	mov	fp, r1
 800200a:	428d      	cmp	r5, r1
 800200c:	d000      	beq.n	8002010 <__aeabi_dsub+0x224>
 800200e:	e716      	b.n	8001e3e <__aeabi_dsub+0x52>
 8002010:	4952      	ldr	r1, [pc, #328]	; (800215c <__aeabi_dsub+0x370>)
 8002012:	468c      	mov	ip, r1
 8002014:	44b4      	add	ip, r6
 8002016:	4664      	mov	r4, ip
 8002018:	2c00      	cmp	r4, #0
 800201a:	d100      	bne.n	800201e <__aeabi_dsub+0x232>
 800201c:	e0d3      	b.n	80021c6 <__aeabi_dsub+0x3da>
 800201e:	1b91      	subs	r1, r2, r6
 8002020:	468c      	mov	ip, r1
 8002022:	2e00      	cmp	r6, #0
 8002024:	d100      	bne.n	8002028 <__aeabi_dsub+0x23c>
 8002026:	e15e      	b.n	80022e6 <__aeabi_dsub+0x4fa>
 8002028:	494a      	ldr	r1, [pc, #296]	; (8002154 <__aeabi_dsub+0x368>)
 800202a:	428a      	cmp	r2, r1
 800202c:	d100      	bne.n	8002030 <__aeabi_dsub+0x244>
 800202e:	e1be      	b.n	80023ae <__aeabi_dsub+0x5c2>
 8002030:	2180      	movs	r1, #128	; 0x80
 8002032:	464c      	mov	r4, r9
 8002034:	0409      	lsls	r1, r1, #16
 8002036:	430c      	orrs	r4, r1
 8002038:	46a1      	mov	r9, r4
 800203a:	4661      	mov	r1, ip
 800203c:	2938      	cmp	r1, #56	; 0x38
 800203e:	dd00      	ble.n	8002042 <__aeabi_dsub+0x256>
 8002040:	e1ba      	b.n	80023b8 <__aeabi_dsub+0x5cc>
 8002042:	291f      	cmp	r1, #31
 8002044:	dd00      	ble.n	8002048 <__aeabi_dsub+0x25c>
 8002046:	e227      	b.n	8002498 <__aeabi_dsub+0x6ac>
 8002048:	2420      	movs	r4, #32
 800204a:	1a64      	subs	r4, r4, r1
 800204c:	4649      	mov	r1, r9
 800204e:	40a1      	lsls	r1, r4
 8002050:	001e      	movs	r6, r3
 8002052:	4688      	mov	r8, r1
 8002054:	4661      	mov	r1, ip
 8002056:	40a3      	lsls	r3, r4
 8002058:	40ce      	lsrs	r6, r1
 800205a:	4641      	mov	r1, r8
 800205c:	1e5c      	subs	r4, r3, #1
 800205e:	41a3      	sbcs	r3, r4
 8002060:	4331      	orrs	r1, r6
 8002062:	4319      	orrs	r1, r3
 8002064:	000c      	movs	r4, r1
 8002066:	4663      	mov	r3, ip
 8002068:	4649      	mov	r1, r9
 800206a:	40d9      	lsrs	r1, r3
 800206c:	187f      	adds	r7, r7, r1
 800206e:	1824      	adds	r4, r4, r0
 8002070:	4284      	cmp	r4, r0
 8002072:	419b      	sbcs	r3, r3
 8002074:	425b      	negs	r3, r3
 8002076:	469a      	mov	sl, r3
 8002078:	0016      	movs	r6, r2
 800207a:	44ba      	add	sl, r7
 800207c:	e05d      	b.n	800213a <__aeabi_dsub+0x34e>
 800207e:	4c38      	ldr	r4, [pc, #224]	; (8002160 <__aeabi_dsub+0x374>)
 8002080:	1c72      	adds	r2, r6, #1
 8002082:	4222      	tst	r2, r4
 8002084:	d000      	beq.n	8002088 <__aeabi_dsub+0x29c>
 8002086:	e0df      	b.n	8002248 <__aeabi_dsub+0x45c>
 8002088:	464a      	mov	r2, r9
 800208a:	431a      	orrs	r2, r3
 800208c:	2e00      	cmp	r6, #0
 800208e:	d000      	beq.n	8002092 <__aeabi_dsub+0x2a6>
 8002090:	e15c      	b.n	800234c <__aeabi_dsub+0x560>
 8002092:	2a00      	cmp	r2, #0
 8002094:	d100      	bne.n	8002098 <__aeabi_dsub+0x2ac>
 8002096:	e1cf      	b.n	8002438 <__aeabi_dsub+0x64c>
 8002098:	003a      	movs	r2, r7
 800209a:	4302      	orrs	r2, r0
 800209c:	d100      	bne.n	80020a0 <__aeabi_dsub+0x2b4>
 800209e:	e17f      	b.n	80023a0 <__aeabi_dsub+0x5b4>
 80020a0:	1a1c      	subs	r4, r3, r0
 80020a2:	464a      	mov	r2, r9
 80020a4:	42a3      	cmp	r3, r4
 80020a6:	4189      	sbcs	r1, r1
 80020a8:	1bd2      	subs	r2, r2, r7
 80020aa:	4249      	negs	r1, r1
 80020ac:	1a52      	subs	r2, r2, r1
 80020ae:	4692      	mov	sl, r2
 80020b0:	0212      	lsls	r2, r2, #8
 80020b2:	d400      	bmi.n	80020b6 <__aeabi_dsub+0x2ca>
 80020b4:	e20a      	b.n	80024cc <__aeabi_dsub+0x6e0>
 80020b6:	1ac4      	subs	r4, r0, r3
 80020b8:	42a0      	cmp	r0, r4
 80020ba:	4180      	sbcs	r0, r0
 80020bc:	464b      	mov	r3, r9
 80020be:	4240      	negs	r0, r0
 80020c0:	1aff      	subs	r7, r7, r3
 80020c2:	1a3b      	subs	r3, r7, r0
 80020c4:	469a      	mov	sl, r3
 80020c6:	465d      	mov	r5, fp
 80020c8:	e71a      	b.n	8001f00 <__aeabi_dsub+0x114>
 80020ca:	003a      	movs	r2, r7
 80020cc:	4302      	orrs	r2, r0
 80020ce:	d073      	beq.n	80021b8 <__aeabi_dsub+0x3cc>
 80020d0:	0022      	movs	r2, r4
 80020d2:	3a01      	subs	r2, #1
 80020d4:	2c01      	cmp	r4, #1
 80020d6:	d100      	bne.n	80020da <__aeabi_dsub+0x2ee>
 80020d8:	e0cb      	b.n	8002272 <__aeabi_dsub+0x486>
 80020da:	4554      	cmp	r4, sl
 80020dc:	d042      	beq.n	8002164 <__aeabi_dsub+0x378>
 80020de:	4694      	mov	ip, r2
 80020e0:	e748      	b.n	8001f74 <__aeabi_dsub+0x188>
 80020e2:	0010      	movs	r0, r2
 80020e4:	3b1f      	subs	r3, #31
 80020e6:	40d8      	lsrs	r0, r3
 80020e8:	2920      	cmp	r1, #32
 80020ea:	d003      	beq.n	80020f4 <__aeabi_dsub+0x308>
 80020ec:	2340      	movs	r3, #64	; 0x40
 80020ee:	1a5b      	subs	r3, r3, r1
 80020f0:	409a      	lsls	r2, r3
 80020f2:	4314      	orrs	r4, r2
 80020f4:	1e63      	subs	r3, r4, #1
 80020f6:	419c      	sbcs	r4, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	2600      	movs	r6, #0
 80020fc:	469a      	mov	sl, r3
 80020fe:	4304      	orrs	r4, r0
 8002100:	0763      	lsls	r3, r4, #29
 8002102:	d000      	beq.n	8002106 <__aeabi_dsub+0x31a>
 8002104:	e6fe      	b.n	8001f04 <__aeabi_dsub+0x118>
 8002106:	4652      	mov	r2, sl
 8002108:	08e3      	lsrs	r3, r4, #3
 800210a:	0752      	lsls	r2, r2, #29
 800210c:	4313      	orrs	r3, r2
 800210e:	4652      	mov	r2, sl
 8002110:	46b4      	mov	ip, r6
 8002112:	08d2      	lsrs	r2, r2, #3
 8002114:	490f      	ldr	r1, [pc, #60]	; (8002154 <__aeabi_dsub+0x368>)
 8002116:	458c      	cmp	ip, r1
 8002118:	d02a      	beq.n	8002170 <__aeabi_dsub+0x384>
 800211a:	0312      	lsls	r2, r2, #12
 800211c:	0b14      	lsrs	r4, r2, #12
 800211e:	4662      	mov	r2, ip
 8002120:	0552      	lsls	r2, r2, #21
 8002122:	0d52      	lsrs	r2, r2, #21
 8002124:	e70c      	b.n	8001f40 <__aeabi_dsub+0x154>
 8002126:	003c      	movs	r4, r7
 8002128:	4304      	orrs	r4, r0
 800212a:	1e62      	subs	r2, r4, #1
 800212c:	4194      	sbcs	r4, r2
 800212e:	18e4      	adds	r4, r4, r3
 8002130:	429c      	cmp	r4, r3
 8002132:	4192      	sbcs	r2, r2
 8002134:	4252      	negs	r2, r2
 8002136:	444a      	add	r2, r9
 8002138:	4692      	mov	sl, r2
 800213a:	4653      	mov	r3, sl
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	d5df      	bpl.n	8002100 <__aeabi_dsub+0x314>
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <__aeabi_dsub+0x368>)
 8002142:	3601      	adds	r6, #1
 8002144:	429e      	cmp	r6, r3
 8002146:	d000      	beq.n	800214a <__aeabi_dsub+0x35e>
 8002148:	e0a0      	b.n	800228c <__aeabi_dsub+0x4a0>
 800214a:	0032      	movs	r2, r6
 800214c:	2400      	movs	r4, #0
 800214e:	2300      	movs	r3, #0
 8002150:	e6f6      	b.n	8001f40 <__aeabi_dsub+0x154>
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	000007ff 	.word	0x000007ff
 8002158:	ff7fffff 	.word	0xff7fffff
 800215c:	fffff801 	.word	0xfffff801
 8002160:	000007fe 	.word	0x000007fe
 8002164:	08db      	lsrs	r3, r3, #3
 8002166:	464a      	mov	r2, r9
 8002168:	0752      	lsls	r2, r2, #29
 800216a:	4313      	orrs	r3, r2
 800216c:	464a      	mov	r2, r9
 800216e:	08d2      	lsrs	r2, r2, #3
 8002170:	0019      	movs	r1, r3
 8002172:	4311      	orrs	r1, r2
 8002174:	d100      	bne.n	8002178 <__aeabi_dsub+0x38c>
 8002176:	e1b5      	b.n	80024e4 <__aeabi_dsub+0x6f8>
 8002178:	2480      	movs	r4, #128	; 0x80
 800217a:	0324      	lsls	r4, r4, #12
 800217c:	4314      	orrs	r4, r2
 800217e:	0324      	lsls	r4, r4, #12
 8002180:	4ad5      	ldr	r2, [pc, #852]	; (80024d8 <__aeabi_dsub+0x6ec>)
 8002182:	0b24      	lsrs	r4, r4, #12
 8002184:	e6dc      	b.n	8001f40 <__aeabi_dsub+0x154>
 8002186:	0020      	movs	r0, r4
 8002188:	f000 faa4 	bl	80026d4 <__clzsi2>
 800218c:	0003      	movs	r3, r0
 800218e:	3318      	adds	r3, #24
 8002190:	2b1f      	cmp	r3, #31
 8002192:	dc00      	bgt.n	8002196 <__aeabi_dsub+0x3aa>
 8002194:	e695      	b.n	8001ec2 <__aeabi_dsub+0xd6>
 8002196:	0022      	movs	r2, r4
 8002198:	3808      	subs	r0, #8
 800219a:	4082      	lsls	r2, r0
 800219c:	2400      	movs	r4, #0
 800219e:	429e      	cmp	r6, r3
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_dsub+0x3b8>
 80021a2:	e69a      	b.n	8001eda <__aeabi_dsub+0xee>
 80021a4:	1af6      	subs	r6, r6, r3
 80021a6:	4bcd      	ldr	r3, [pc, #820]	; (80024dc <__aeabi_dsub+0x6f0>)
 80021a8:	401a      	ands	r2, r3
 80021aa:	4692      	mov	sl, r2
 80021ac:	e6a8      	b.n	8001f00 <__aeabi_dsub+0x114>
 80021ae:	003c      	movs	r4, r7
 80021b0:	4304      	orrs	r4, r0
 80021b2:	1e62      	subs	r2, r4, #1
 80021b4:	4194      	sbcs	r4, r2
 80021b6:	e66c      	b.n	8001e92 <__aeabi_dsub+0xa6>
 80021b8:	464a      	mov	r2, r9
 80021ba:	08db      	lsrs	r3, r3, #3
 80021bc:	0752      	lsls	r2, r2, #29
 80021be:	4313      	orrs	r3, r2
 80021c0:	464a      	mov	r2, r9
 80021c2:	08d2      	lsrs	r2, r2, #3
 80021c4:	e7a6      	b.n	8002114 <__aeabi_dsub+0x328>
 80021c6:	4cc6      	ldr	r4, [pc, #792]	; (80024e0 <__aeabi_dsub+0x6f4>)
 80021c8:	1c72      	adds	r2, r6, #1
 80021ca:	4222      	tst	r2, r4
 80021cc:	d000      	beq.n	80021d0 <__aeabi_dsub+0x3e4>
 80021ce:	e0ac      	b.n	800232a <__aeabi_dsub+0x53e>
 80021d0:	464a      	mov	r2, r9
 80021d2:	431a      	orrs	r2, r3
 80021d4:	2e00      	cmp	r6, #0
 80021d6:	d000      	beq.n	80021da <__aeabi_dsub+0x3ee>
 80021d8:	e105      	b.n	80023e6 <__aeabi_dsub+0x5fa>
 80021da:	2a00      	cmp	r2, #0
 80021dc:	d100      	bne.n	80021e0 <__aeabi_dsub+0x3f4>
 80021de:	e156      	b.n	800248e <__aeabi_dsub+0x6a2>
 80021e0:	003a      	movs	r2, r7
 80021e2:	4302      	orrs	r2, r0
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dsub+0x3fc>
 80021e6:	e0db      	b.n	80023a0 <__aeabi_dsub+0x5b4>
 80021e8:	181c      	adds	r4, r3, r0
 80021ea:	429c      	cmp	r4, r3
 80021ec:	419b      	sbcs	r3, r3
 80021ee:	444f      	add	r7, r9
 80021f0:	46ba      	mov	sl, r7
 80021f2:	425b      	negs	r3, r3
 80021f4:	449a      	add	sl, r3
 80021f6:	4653      	mov	r3, sl
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	d400      	bmi.n	80021fe <__aeabi_dsub+0x412>
 80021fc:	e780      	b.n	8002100 <__aeabi_dsub+0x314>
 80021fe:	4652      	mov	r2, sl
 8002200:	4bb6      	ldr	r3, [pc, #728]	; (80024dc <__aeabi_dsub+0x6f0>)
 8002202:	2601      	movs	r6, #1
 8002204:	401a      	ands	r2, r3
 8002206:	4692      	mov	sl, r2
 8002208:	e77a      	b.n	8002100 <__aeabi_dsub+0x314>
 800220a:	4cb3      	ldr	r4, [pc, #716]	; (80024d8 <__aeabi_dsub+0x6ec>)
 800220c:	42a2      	cmp	r2, r4
 800220e:	d100      	bne.n	8002212 <__aeabi_dsub+0x426>
 8002210:	e0c0      	b.n	8002394 <__aeabi_dsub+0x5a8>
 8002212:	2480      	movs	r4, #128	; 0x80
 8002214:	464d      	mov	r5, r9
 8002216:	0424      	lsls	r4, r4, #16
 8002218:	4325      	orrs	r5, r4
 800221a:	46a9      	mov	r9, r5
 800221c:	4664      	mov	r4, ip
 800221e:	2c38      	cmp	r4, #56	; 0x38
 8002220:	dc53      	bgt.n	80022ca <__aeabi_dsub+0x4de>
 8002222:	4661      	mov	r1, ip
 8002224:	2c1f      	cmp	r4, #31
 8002226:	dd00      	ble.n	800222a <__aeabi_dsub+0x43e>
 8002228:	e0cd      	b.n	80023c6 <__aeabi_dsub+0x5da>
 800222a:	2520      	movs	r5, #32
 800222c:	001e      	movs	r6, r3
 800222e:	1b2d      	subs	r5, r5, r4
 8002230:	464c      	mov	r4, r9
 8002232:	40ab      	lsls	r3, r5
 8002234:	40ac      	lsls	r4, r5
 8002236:	40ce      	lsrs	r6, r1
 8002238:	1e5d      	subs	r5, r3, #1
 800223a:	41ab      	sbcs	r3, r5
 800223c:	4334      	orrs	r4, r6
 800223e:	4323      	orrs	r3, r4
 8002240:	464c      	mov	r4, r9
 8002242:	40cc      	lsrs	r4, r1
 8002244:	1b3f      	subs	r7, r7, r4
 8002246:	e045      	b.n	80022d4 <__aeabi_dsub+0x4e8>
 8002248:	464a      	mov	r2, r9
 800224a:	1a1c      	subs	r4, r3, r0
 800224c:	1bd1      	subs	r1, r2, r7
 800224e:	42a3      	cmp	r3, r4
 8002250:	4192      	sbcs	r2, r2
 8002252:	4252      	negs	r2, r2
 8002254:	4692      	mov	sl, r2
 8002256:	000a      	movs	r2, r1
 8002258:	4651      	mov	r1, sl
 800225a:	1a52      	subs	r2, r2, r1
 800225c:	4692      	mov	sl, r2
 800225e:	0212      	lsls	r2, r2, #8
 8002260:	d500      	bpl.n	8002264 <__aeabi_dsub+0x478>
 8002262:	e083      	b.n	800236c <__aeabi_dsub+0x580>
 8002264:	4653      	mov	r3, sl
 8002266:	4323      	orrs	r3, r4
 8002268:	d000      	beq.n	800226c <__aeabi_dsub+0x480>
 800226a:	e621      	b.n	8001eb0 <__aeabi_dsub+0xc4>
 800226c:	2200      	movs	r2, #0
 800226e:	2500      	movs	r5, #0
 8002270:	e753      	b.n	800211a <__aeabi_dsub+0x32e>
 8002272:	181c      	adds	r4, r3, r0
 8002274:	429c      	cmp	r4, r3
 8002276:	419b      	sbcs	r3, r3
 8002278:	444f      	add	r7, r9
 800227a:	46ba      	mov	sl, r7
 800227c:	425b      	negs	r3, r3
 800227e:	449a      	add	sl, r3
 8002280:	4653      	mov	r3, sl
 8002282:	2601      	movs	r6, #1
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	d400      	bmi.n	800228a <__aeabi_dsub+0x49e>
 8002288:	e73a      	b.n	8002100 <__aeabi_dsub+0x314>
 800228a:	2602      	movs	r6, #2
 800228c:	4652      	mov	r2, sl
 800228e:	4b93      	ldr	r3, [pc, #588]	; (80024dc <__aeabi_dsub+0x6f0>)
 8002290:	2101      	movs	r1, #1
 8002292:	401a      	ands	r2, r3
 8002294:	0013      	movs	r3, r2
 8002296:	4021      	ands	r1, r4
 8002298:	0862      	lsrs	r2, r4, #1
 800229a:	430a      	orrs	r2, r1
 800229c:	07dc      	lsls	r4, r3, #31
 800229e:	085b      	lsrs	r3, r3, #1
 80022a0:	469a      	mov	sl, r3
 80022a2:	4314      	orrs	r4, r2
 80022a4:	e62c      	b.n	8001f00 <__aeabi_dsub+0x114>
 80022a6:	0039      	movs	r1, r7
 80022a8:	3a20      	subs	r2, #32
 80022aa:	40d1      	lsrs	r1, r2
 80022ac:	4662      	mov	r2, ip
 80022ae:	2a20      	cmp	r2, #32
 80022b0:	d006      	beq.n	80022c0 <__aeabi_dsub+0x4d4>
 80022b2:	4664      	mov	r4, ip
 80022b4:	2240      	movs	r2, #64	; 0x40
 80022b6:	1b12      	subs	r2, r2, r4
 80022b8:	003c      	movs	r4, r7
 80022ba:	4094      	lsls	r4, r2
 80022bc:	4304      	orrs	r4, r0
 80022be:	9401      	str	r4, [sp, #4]
 80022c0:	9c01      	ldr	r4, [sp, #4]
 80022c2:	1e62      	subs	r2, r4, #1
 80022c4:	4194      	sbcs	r4, r2
 80022c6:	430c      	orrs	r4, r1
 80022c8:	e5e3      	b.n	8001e92 <__aeabi_dsub+0xa6>
 80022ca:	4649      	mov	r1, r9
 80022cc:	4319      	orrs	r1, r3
 80022ce:	000b      	movs	r3, r1
 80022d0:	1e5c      	subs	r4, r3, #1
 80022d2:	41a3      	sbcs	r3, r4
 80022d4:	1ac4      	subs	r4, r0, r3
 80022d6:	42a0      	cmp	r0, r4
 80022d8:	419b      	sbcs	r3, r3
 80022da:	425b      	negs	r3, r3
 80022dc:	1afb      	subs	r3, r7, r3
 80022de:	469a      	mov	sl, r3
 80022e0:	465d      	mov	r5, fp
 80022e2:	0016      	movs	r6, r2
 80022e4:	e5dc      	b.n	8001ea0 <__aeabi_dsub+0xb4>
 80022e6:	4649      	mov	r1, r9
 80022e8:	4319      	orrs	r1, r3
 80022ea:	d100      	bne.n	80022ee <__aeabi_dsub+0x502>
 80022ec:	e0ae      	b.n	800244c <__aeabi_dsub+0x660>
 80022ee:	4661      	mov	r1, ip
 80022f0:	4664      	mov	r4, ip
 80022f2:	3901      	subs	r1, #1
 80022f4:	2c01      	cmp	r4, #1
 80022f6:	d100      	bne.n	80022fa <__aeabi_dsub+0x50e>
 80022f8:	e0e0      	b.n	80024bc <__aeabi_dsub+0x6d0>
 80022fa:	4c77      	ldr	r4, [pc, #476]	; (80024d8 <__aeabi_dsub+0x6ec>)
 80022fc:	45a4      	cmp	ip, r4
 80022fe:	d056      	beq.n	80023ae <__aeabi_dsub+0x5c2>
 8002300:	468c      	mov	ip, r1
 8002302:	e69a      	b.n	800203a <__aeabi_dsub+0x24e>
 8002304:	4661      	mov	r1, ip
 8002306:	2220      	movs	r2, #32
 8002308:	003c      	movs	r4, r7
 800230a:	1a52      	subs	r2, r2, r1
 800230c:	4094      	lsls	r4, r2
 800230e:	0001      	movs	r1, r0
 8002310:	4090      	lsls	r0, r2
 8002312:	46a0      	mov	r8, r4
 8002314:	4664      	mov	r4, ip
 8002316:	1e42      	subs	r2, r0, #1
 8002318:	4190      	sbcs	r0, r2
 800231a:	4662      	mov	r2, ip
 800231c:	40e1      	lsrs	r1, r4
 800231e:	4644      	mov	r4, r8
 8002320:	40d7      	lsrs	r7, r2
 8002322:	430c      	orrs	r4, r1
 8002324:	4304      	orrs	r4, r0
 8002326:	44b9      	add	r9, r7
 8002328:	e701      	b.n	800212e <__aeabi_dsub+0x342>
 800232a:	496b      	ldr	r1, [pc, #428]	; (80024d8 <__aeabi_dsub+0x6ec>)
 800232c:	428a      	cmp	r2, r1
 800232e:	d100      	bne.n	8002332 <__aeabi_dsub+0x546>
 8002330:	e70c      	b.n	800214c <__aeabi_dsub+0x360>
 8002332:	1818      	adds	r0, r3, r0
 8002334:	4298      	cmp	r0, r3
 8002336:	419b      	sbcs	r3, r3
 8002338:	444f      	add	r7, r9
 800233a:	425b      	negs	r3, r3
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	07dc      	lsls	r4, r3, #31
 8002340:	0840      	lsrs	r0, r0, #1
 8002342:	085b      	lsrs	r3, r3, #1
 8002344:	469a      	mov	sl, r3
 8002346:	0016      	movs	r6, r2
 8002348:	4304      	orrs	r4, r0
 800234a:	e6d9      	b.n	8002100 <__aeabi_dsub+0x314>
 800234c:	2a00      	cmp	r2, #0
 800234e:	d000      	beq.n	8002352 <__aeabi_dsub+0x566>
 8002350:	e081      	b.n	8002456 <__aeabi_dsub+0x66a>
 8002352:	003b      	movs	r3, r7
 8002354:	4303      	orrs	r3, r0
 8002356:	d11d      	bne.n	8002394 <__aeabi_dsub+0x5a8>
 8002358:	2280      	movs	r2, #128	; 0x80
 800235a:	2500      	movs	r5, #0
 800235c:	0312      	lsls	r2, r2, #12
 800235e:	e70b      	b.n	8002178 <__aeabi_dsub+0x38c>
 8002360:	08c0      	lsrs	r0, r0, #3
 8002362:	077b      	lsls	r3, r7, #29
 8002364:	465d      	mov	r5, fp
 8002366:	4303      	orrs	r3, r0
 8002368:	08fa      	lsrs	r2, r7, #3
 800236a:	e6d3      	b.n	8002114 <__aeabi_dsub+0x328>
 800236c:	1ac4      	subs	r4, r0, r3
 800236e:	42a0      	cmp	r0, r4
 8002370:	4180      	sbcs	r0, r0
 8002372:	464b      	mov	r3, r9
 8002374:	4240      	negs	r0, r0
 8002376:	1aff      	subs	r7, r7, r3
 8002378:	1a3b      	subs	r3, r7, r0
 800237a:	469a      	mov	sl, r3
 800237c:	465d      	mov	r5, fp
 800237e:	e597      	b.n	8001eb0 <__aeabi_dsub+0xc4>
 8002380:	1a1c      	subs	r4, r3, r0
 8002382:	464a      	mov	r2, r9
 8002384:	42a3      	cmp	r3, r4
 8002386:	419b      	sbcs	r3, r3
 8002388:	1bd7      	subs	r7, r2, r7
 800238a:	425b      	negs	r3, r3
 800238c:	1afb      	subs	r3, r7, r3
 800238e:	469a      	mov	sl, r3
 8002390:	2601      	movs	r6, #1
 8002392:	e585      	b.n	8001ea0 <__aeabi_dsub+0xb4>
 8002394:	08c0      	lsrs	r0, r0, #3
 8002396:	077b      	lsls	r3, r7, #29
 8002398:	465d      	mov	r5, fp
 800239a:	4303      	orrs	r3, r0
 800239c:	08fa      	lsrs	r2, r7, #3
 800239e:	e6e7      	b.n	8002170 <__aeabi_dsub+0x384>
 80023a0:	464a      	mov	r2, r9
 80023a2:	08db      	lsrs	r3, r3, #3
 80023a4:	0752      	lsls	r2, r2, #29
 80023a6:	4313      	orrs	r3, r2
 80023a8:	464a      	mov	r2, r9
 80023aa:	08d2      	lsrs	r2, r2, #3
 80023ac:	e6b5      	b.n	800211a <__aeabi_dsub+0x32e>
 80023ae:	08c0      	lsrs	r0, r0, #3
 80023b0:	077b      	lsls	r3, r7, #29
 80023b2:	4303      	orrs	r3, r0
 80023b4:	08fa      	lsrs	r2, r7, #3
 80023b6:	e6db      	b.n	8002170 <__aeabi_dsub+0x384>
 80023b8:	4649      	mov	r1, r9
 80023ba:	4319      	orrs	r1, r3
 80023bc:	000b      	movs	r3, r1
 80023be:	1e59      	subs	r1, r3, #1
 80023c0:	418b      	sbcs	r3, r1
 80023c2:	001c      	movs	r4, r3
 80023c4:	e653      	b.n	800206e <__aeabi_dsub+0x282>
 80023c6:	464d      	mov	r5, r9
 80023c8:	3c20      	subs	r4, #32
 80023ca:	40e5      	lsrs	r5, r4
 80023cc:	2920      	cmp	r1, #32
 80023ce:	d005      	beq.n	80023dc <__aeabi_dsub+0x5f0>
 80023d0:	2440      	movs	r4, #64	; 0x40
 80023d2:	1a64      	subs	r4, r4, r1
 80023d4:	4649      	mov	r1, r9
 80023d6:	40a1      	lsls	r1, r4
 80023d8:	430b      	orrs	r3, r1
 80023da:	4698      	mov	r8, r3
 80023dc:	4643      	mov	r3, r8
 80023de:	1e5c      	subs	r4, r3, #1
 80023e0:	41a3      	sbcs	r3, r4
 80023e2:	432b      	orrs	r3, r5
 80023e4:	e776      	b.n	80022d4 <__aeabi_dsub+0x4e8>
 80023e6:	2a00      	cmp	r2, #0
 80023e8:	d0e1      	beq.n	80023ae <__aeabi_dsub+0x5c2>
 80023ea:	003a      	movs	r2, r7
 80023ec:	08db      	lsrs	r3, r3, #3
 80023ee:	4302      	orrs	r2, r0
 80023f0:	d100      	bne.n	80023f4 <__aeabi_dsub+0x608>
 80023f2:	e6b8      	b.n	8002166 <__aeabi_dsub+0x37a>
 80023f4:	464a      	mov	r2, r9
 80023f6:	0752      	lsls	r2, r2, #29
 80023f8:	2480      	movs	r4, #128	; 0x80
 80023fa:	4313      	orrs	r3, r2
 80023fc:	464a      	mov	r2, r9
 80023fe:	0324      	lsls	r4, r4, #12
 8002400:	08d2      	lsrs	r2, r2, #3
 8002402:	4222      	tst	r2, r4
 8002404:	d007      	beq.n	8002416 <__aeabi_dsub+0x62a>
 8002406:	08fe      	lsrs	r6, r7, #3
 8002408:	4226      	tst	r6, r4
 800240a:	d104      	bne.n	8002416 <__aeabi_dsub+0x62a>
 800240c:	465d      	mov	r5, fp
 800240e:	0032      	movs	r2, r6
 8002410:	08c3      	lsrs	r3, r0, #3
 8002412:	077f      	lsls	r7, r7, #29
 8002414:	433b      	orrs	r3, r7
 8002416:	0f59      	lsrs	r1, r3, #29
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	0749      	lsls	r1, r1, #29
 800241c:	08db      	lsrs	r3, r3, #3
 800241e:	430b      	orrs	r3, r1
 8002420:	e6a6      	b.n	8002170 <__aeabi_dsub+0x384>
 8002422:	1ac4      	subs	r4, r0, r3
 8002424:	42a0      	cmp	r0, r4
 8002426:	4180      	sbcs	r0, r0
 8002428:	464b      	mov	r3, r9
 800242a:	4240      	negs	r0, r0
 800242c:	1aff      	subs	r7, r7, r3
 800242e:	1a3b      	subs	r3, r7, r0
 8002430:	469a      	mov	sl, r3
 8002432:	465d      	mov	r5, fp
 8002434:	2601      	movs	r6, #1
 8002436:	e533      	b.n	8001ea0 <__aeabi_dsub+0xb4>
 8002438:	003b      	movs	r3, r7
 800243a:	4303      	orrs	r3, r0
 800243c:	d100      	bne.n	8002440 <__aeabi_dsub+0x654>
 800243e:	e715      	b.n	800226c <__aeabi_dsub+0x480>
 8002440:	08c0      	lsrs	r0, r0, #3
 8002442:	077b      	lsls	r3, r7, #29
 8002444:	465d      	mov	r5, fp
 8002446:	4303      	orrs	r3, r0
 8002448:	08fa      	lsrs	r2, r7, #3
 800244a:	e666      	b.n	800211a <__aeabi_dsub+0x32e>
 800244c:	08c0      	lsrs	r0, r0, #3
 800244e:	077b      	lsls	r3, r7, #29
 8002450:	4303      	orrs	r3, r0
 8002452:	08fa      	lsrs	r2, r7, #3
 8002454:	e65e      	b.n	8002114 <__aeabi_dsub+0x328>
 8002456:	003a      	movs	r2, r7
 8002458:	08db      	lsrs	r3, r3, #3
 800245a:	4302      	orrs	r2, r0
 800245c:	d100      	bne.n	8002460 <__aeabi_dsub+0x674>
 800245e:	e682      	b.n	8002166 <__aeabi_dsub+0x37a>
 8002460:	464a      	mov	r2, r9
 8002462:	0752      	lsls	r2, r2, #29
 8002464:	2480      	movs	r4, #128	; 0x80
 8002466:	4313      	orrs	r3, r2
 8002468:	464a      	mov	r2, r9
 800246a:	0324      	lsls	r4, r4, #12
 800246c:	08d2      	lsrs	r2, r2, #3
 800246e:	4222      	tst	r2, r4
 8002470:	d007      	beq.n	8002482 <__aeabi_dsub+0x696>
 8002472:	08fe      	lsrs	r6, r7, #3
 8002474:	4226      	tst	r6, r4
 8002476:	d104      	bne.n	8002482 <__aeabi_dsub+0x696>
 8002478:	465d      	mov	r5, fp
 800247a:	0032      	movs	r2, r6
 800247c:	08c3      	lsrs	r3, r0, #3
 800247e:	077f      	lsls	r7, r7, #29
 8002480:	433b      	orrs	r3, r7
 8002482:	0f59      	lsrs	r1, r3, #29
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	08db      	lsrs	r3, r3, #3
 8002488:	0749      	lsls	r1, r1, #29
 800248a:	430b      	orrs	r3, r1
 800248c:	e670      	b.n	8002170 <__aeabi_dsub+0x384>
 800248e:	08c0      	lsrs	r0, r0, #3
 8002490:	077b      	lsls	r3, r7, #29
 8002492:	4303      	orrs	r3, r0
 8002494:	08fa      	lsrs	r2, r7, #3
 8002496:	e640      	b.n	800211a <__aeabi_dsub+0x32e>
 8002498:	464c      	mov	r4, r9
 800249a:	3920      	subs	r1, #32
 800249c:	40cc      	lsrs	r4, r1
 800249e:	4661      	mov	r1, ip
 80024a0:	2920      	cmp	r1, #32
 80024a2:	d006      	beq.n	80024b2 <__aeabi_dsub+0x6c6>
 80024a4:	4666      	mov	r6, ip
 80024a6:	2140      	movs	r1, #64	; 0x40
 80024a8:	1b89      	subs	r1, r1, r6
 80024aa:	464e      	mov	r6, r9
 80024ac:	408e      	lsls	r6, r1
 80024ae:	4333      	orrs	r3, r6
 80024b0:	4698      	mov	r8, r3
 80024b2:	4643      	mov	r3, r8
 80024b4:	1e59      	subs	r1, r3, #1
 80024b6:	418b      	sbcs	r3, r1
 80024b8:	431c      	orrs	r4, r3
 80024ba:	e5d8      	b.n	800206e <__aeabi_dsub+0x282>
 80024bc:	181c      	adds	r4, r3, r0
 80024be:	4284      	cmp	r4, r0
 80024c0:	4180      	sbcs	r0, r0
 80024c2:	444f      	add	r7, r9
 80024c4:	46ba      	mov	sl, r7
 80024c6:	4240      	negs	r0, r0
 80024c8:	4482      	add	sl, r0
 80024ca:	e6d9      	b.n	8002280 <__aeabi_dsub+0x494>
 80024cc:	4653      	mov	r3, sl
 80024ce:	4323      	orrs	r3, r4
 80024d0:	d100      	bne.n	80024d4 <__aeabi_dsub+0x6e8>
 80024d2:	e6cb      	b.n	800226c <__aeabi_dsub+0x480>
 80024d4:	e614      	b.n	8002100 <__aeabi_dsub+0x314>
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	000007ff 	.word	0x000007ff
 80024dc:	ff7fffff 	.word	0xff7fffff
 80024e0:	000007fe 	.word	0x000007fe
 80024e4:	2300      	movs	r3, #0
 80024e6:	4a01      	ldr	r2, [pc, #4]	; (80024ec <__aeabi_dsub+0x700>)
 80024e8:	001c      	movs	r4, r3
 80024ea:	e529      	b.n	8001f40 <__aeabi_dsub+0x154>
 80024ec:	000007ff 	.word	0x000007ff

080024f0 <__aeabi_dcmpun>:
 80024f0:	b570      	push	{r4, r5, r6, lr}
 80024f2:	0005      	movs	r5, r0
 80024f4:	480c      	ldr	r0, [pc, #48]	; (8002528 <__aeabi_dcmpun+0x38>)
 80024f6:	031c      	lsls	r4, r3, #12
 80024f8:	0016      	movs	r6, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	030a      	lsls	r2, r1, #12
 80024fe:	0049      	lsls	r1, r1, #1
 8002500:	0b12      	lsrs	r2, r2, #12
 8002502:	0d49      	lsrs	r1, r1, #21
 8002504:	0b24      	lsrs	r4, r4, #12
 8002506:	0d5b      	lsrs	r3, r3, #21
 8002508:	4281      	cmp	r1, r0
 800250a:	d008      	beq.n	800251e <__aeabi_dcmpun+0x2e>
 800250c:	4a06      	ldr	r2, [pc, #24]	; (8002528 <__aeabi_dcmpun+0x38>)
 800250e:	2000      	movs	r0, #0
 8002510:	4293      	cmp	r3, r2
 8002512:	d103      	bne.n	800251c <__aeabi_dcmpun+0x2c>
 8002514:	0020      	movs	r0, r4
 8002516:	4330      	orrs	r0, r6
 8002518:	1e43      	subs	r3, r0, #1
 800251a:	4198      	sbcs	r0, r3
 800251c:	bd70      	pop	{r4, r5, r6, pc}
 800251e:	2001      	movs	r0, #1
 8002520:	432a      	orrs	r2, r5
 8002522:	d1fb      	bne.n	800251c <__aeabi_dcmpun+0x2c>
 8002524:	e7f2      	b.n	800250c <__aeabi_dcmpun+0x1c>
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	000007ff 	.word	0x000007ff

0800252c <__aeabi_d2iz>:
 800252c:	000a      	movs	r2, r1
 800252e:	b530      	push	{r4, r5, lr}
 8002530:	4c13      	ldr	r4, [pc, #76]	; (8002580 <__aeabi_d2iz+0x54>)
 8002532:	0053      	lsls	r3, r2, #1
 8002534:	0309      	lsls	r1, r1, #12
 8002536:	0005      	movs	r5, r0
 8002538:	0b09      	lsrs	r1, r1, #12
 800253a:	2000      	movs	r0, #0
 800253c:	0d5b      	lsrs	r3, r3, #21
 800253e:	0fd2      	lsrs	r2, r2, #31
 8002540:	42a3      	cmp	r3, r4
 8002542:	dd04      	ble.n	800254e <__aeabi_d2iz+0x22>
 8002544:	480f      	ldr	r0, [pc, #60]	; (8002584 <__aeabi_d2iz+0x58>)
 8002546:	4283      	cmp	r3, r0
 8002548:	dd02      	ble.n	8002550 <__aeabi_d2iz+0x24>
 800254a:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <__aeabi_d2iz+0x5c>)
 800254c:	18d0      	adds	r0, r2, r3
 800254e:	bd30      	pop	{r4, r5, pc}
 8002550:	2080      	movs	r0, #128	; 0x80
 8002552:	0340      	lsls	r0, r0, #13
 8002554:	4301      	orrs	r1, r0
 8002556:	480d      	ldr	r0, [pc, #52]	; (800258c <__aeabi_d2iz+0x60>)
 8002558:	1ac0      	subs	r0, r0, r3
 800255a:	281f      	cmp	r0, #31
 800255c:	dd08      	ble.n	8002570 <__aeabi_d2iz+0x44>
 800255e:	480c      	ldr	r0, [pc, #48]	; (8002590 <__aeabi_d2iz+0x64>)
 8002560:	1ac3      	subs	r3, r0, r3
 8002562:	40d9      	lsrs	r1, r3
 8002564:	000b      	movs	r3, r1
 8002566:	4258      	negs	r0, r3
 8002568:	2a00      	cmp	r2, #0
 800256a:	d1f0      	bne.n	800254e <__aeabi_d2iz+0x22>
 800256c:	0018      	movs	r0, r3
 800256e:	e7ee      	b.n	800254e <__aeabi_d2iz+0x22>
 8002570:	4c08      	ldr	r4, [pc, #32]	; (8002594 <__aeabi_d2iz+0x68>)
 8002572:	40c5      	lsrs	r5, r0
 8002574:	46a4      	mov	ip, r4
 8002576:	4463      	add	r3, ip
 8002578:	4099      	lsls	r1, r3
 800257a:	000b      	movs	r3, r1
 800257c:	432b      	orrs	r3, r5
 800257e:	e7f2      	b.n	8002566 <__aeabi_d2iz+0x3a>
 8002580:	000003fe 	.word	0x000003fe
 8002584:	0000041d 	.word	0x0000041d
 8002588:	7fffffff 	.word	0x7fffffff
 800258c:	00000433 	.word	0x00000433
 8002590:	00000413 	.word	0x00000413
 8002594:	fffffbed 	.word	0xfffffbed

08002598 <__aeabi_i2d>:
 8002598:	b570      	push	{r4, r5, r6, lr}
 800259a:	2800      	cmp	r0, #0
 800259c:	d016      	beq.n	80025cc <__aeabi_i2d+0x34>
 800259e:	17c3      	asrs	r3, r0, #31
 80025a0:	18c5      	adds	r5, r0, r3
 80025a2:	405d      	eors	r5, r3
 80025a4:	0fc4      	lsrs	r4, r0, #31
 80025a6:	0028      	movs	r0, r5
 80025a8:	f000 f894 	bl	80026d4 <__clzsi2>
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <__aeabi_i2d+0x5c>)
 80025ae:	1a1b      	subs	r3, r3, r0
 80025b0:	280a      	cmp	r0, #10
 80025b2:	dc16      	bgt.n	80025e2 <__aeabi_i2d+0x4a>
 80025b4:	0002      	movs	r2, r0
 80025b6:	002e      	movs	r6, r5
 80025b8:	3215      	adds	r2, #21
 80025ba:	4096      	lsls	r6, r2
 80025bc:	220b      	movs	r2, #11
 80025be:	1a12      	subs	r2, r2, r0
 80025c0:	40d5      	lsrs	r5, r2
 80025c2:	055b      	lsls	r3, r3, #21
 80025c4:	032d      	lsls	r5, r5, #12
 80025c6:	0b2d      	lsrs	r5, r5, #12
 80025c8:	0d5b      	lsrs	r3, r3, #21
 80025ca:	e003      	b.n	80025d4 <__aeabi_i2d+0x3c>
 80025cc:	2400      	movs	r4, #0
 80025ce:	2300      	movs	r3, #0
 80025d0:	2500      	movs	r5, #0
 80025d2:	2600      	movs	r6, #0
 80025d4:	051b      	lsls	r3, r3, #20
 80025d6:	432b      	orrs	r3, r5
 80025d8:	07e4      	lsls	r4, r4, #31
 80025da:	4323      	orrs	r3, r4
 80025dc:	0030      	movs	r0, r6
 80025de:	0019      	movs	r1, r3
 80025e0:	bd70      	pop	{r4, r5, r6, pc}
 80025e2:	380b      	subs	r0, #11
 80025e4:	4085      	lsls	r5, r0
 80025e6:	055b      	lsls	r3, r3, #21
 80025e8:	032d      	lsls	r5, r5, #12
 80025ea:	2600      	movs	r6, #0
 80025ec:	0b2d      	lsrs	r5, r5, #12
 80025ee:	0d5b      	lsrs	r3, r3, #21
 80025f0:	e7f0      	b.n	80025d4 <__aeabi_i2d+0x3c>
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	0000041e 	.word	0x0000041e

080025f8 <__aeabi_ui2d>:
 80025f8:	b510      	push	{r4, lr}
 80025fa:	1e04      	subs	r4, r0, #0
 80025fc:	d010      	beq.n	8002620 <__aeabi_ui2d+0x28>
 80025fe:	f000 f869 	bl	80026d4 <__clzsi2>
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <__aeabi_ui2d+0x48>)
 8002604:	1a1b      	subs	r3, r3, r0
 8002606:	280a      	cmp	r0, #10
 8002608:	dc11      	bgt.n	800262e <__aeabi_ui2d+0x36>
 800260a:	220b      	movs	r2, #11
 800260c:	0021      	movs	r1, r4
 800260e:	1a12      	subs	r2, r2, r0
 8002610:	40d1      	lsrs	r1, r2
 8002612:	3015      	adds	r0, #21
 8002614:	030a      	lsls	r2, r1, #12
 8002616:	055b      	lsls	r3, r3, #21
 8002618:	4084      	lsls	r4, r0
 800261a:	0b12      	lsrs	r2, r2, #12
 800261c:	0d5b      	lsrs	r3, r3, #21
 800261e:	e001      	b.n	8002624 <__aeabi_ui2d+0x2c>
 8002620:	2300      	movs	r3, #0
 8002622:	2200      	movs	r2, #0
 8002624:	051b      	lsls	r3, r3, #20
 8002626:	4313      	orrs	r3, r2
 8002628:	0020      	movs	r0, r4
 800262a:	0019      	movs	r1, r3
 800262c:	bd10      	pop	{r4, pc}
 800262e:	0022      	movs	r2, r4
 8002630:	380b      	subs	r0, #11
 8002632:	4082      	lsls	r2, r0
 8002634:	055b      	lsls	r3, r3, #21
 8002636:	0312      	lsls	r2, r2, #12
 8002638:	2400      	movs	r4, #0
 800263a:	0b12      	lsrs	r2, r2, #12
 800263c:	0d5b      	lsrs	r3, r3, #21
 800263e:	e7f1      	b.n	8002624 <__aeabi_ui2d+0x2c>
 8002640:	0000041e 	.word	0x0000041e

08002644 <__aeabi_f2d>:
 8002644:	b570      	push	{r4, r5, r6, lr}
 8002646:	0242      	lsls	r2, r0, #9
 8002648:	0043      	lsls	r3, r0, #1
 800264a:	0fc4      	lsrs	r4, r0, #31
 800264c:	20fe      	movs	r0, #254	; 0xfe
 800264e:	0e1b      	lsrs	r3, r3, #24
 8002650:	1c59      	adds	r1, r3, #1
 8002652:	0a55      	lsrs	r5, r2, #9
 8002654:	4208      	tst	r0, r1
 8002656:	d00c      	beq.n	8002672 <__aeabi_f2d+0x2e>
 8002658:	21e0      	movs	r1, #224	; 0xe0
 800265a:	0089      	lsls	r1, r1, #2
 800265c:	468c      	mov	ip, r1
 800265e:	076d      	lsls	r5, r5, #29
 8002660:	0b12      	lsrs	r2, r2, #12
 8002662:	4463      	add	r3, ip
 8002664:	051b      	lsls	r3, r3, #20
 8002666:	4313      	orrs	r3, r2
 8002668:	07e4      	lsls	r4, r4, #31
 800266a:	4323      	orrs	r3, r4
 800266c:	0028      	movs	r0, r5
 800266e:	0019      	movs	r1, r3
 8002670:	bd70      	pop	{r4, r5, r6, pc}
 8002672:	2b00      	cmp	r3, #0
 8002674:	d114      	bne.n	80026a0 <__aeabi_f2d+0x5c>
 8002676:	2d00      	cmp	r5, #0
 8002678:	d01b      	beq.n	80026b2 <__aeabi_f2d+0x6e>
 800267a:	0028      	movs	r0, r5
 800267c:	f000 f82a 	bl	80026d4 <__clzsi2>
 8002680:	280a      	cmp	r0, #10
 8002682:	dc1c      	bgt.n	80026be <__aeabi_f2d+0x7a>
 8002684:	230b      	movs	r3, #11
 8002686:	002a      	movs	r2, r5
 8002688:	1a1b      	subs	r3, r3, r0
 800268a:	40da      	lsrs	r2, r3
 800268c:	0003      	movs	r3, r0
 800268e:	3315      	adds	r3, #21
 8002690:	409d      	lsls	r5, r3
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <__aeabi_f2d+0x88>)
 8002694:	0312      	lsls	r2, r2, #12
 8002696:	1a1b      	subs	r3, r3, r0
 8002698:	055b      	lsls	r3, r3, #21
 800269a:	0b12      	lsrs	r2, r2, #12
 800269c:	0d5b      	lsrs	r3, r3, #21
 800269e:	e7e1      	b.n	8002664 <__aeabi_f2d+0x20>
 80026a0:	2d00      	cmp	r5, #0
 80026a2:	d009      	beq.n	80026b8 <__aeabi_f2d+0x74>
 80026a4:	0b13      	lsrs	r3, r2, #12
 80026a6:	2280      	movs	r2, #128	; 0x80
 80026a8:	0312      	lsls	r2, r2, #12
 80026aa:	431a      	orrs	r2, r3
 80026ac:	076d      	lsls	r5, r5, #29
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <__aeabi_f2d+0x8c>)
 80026b0:	e7d8      	b.n	8002664 <__aeabi_f2d+0x20>
 80026b2:	2300      	movs	r3, #0
 80026b4:	2200      	movs	r2, #0
 80026b6:	e7d5      	b.n	8002664 <__aeabi_f2d+0x20>
 80026b8:	2200      	movs	r2, #0
 80026ba:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <__aeabi_f2d+0x8c>)
 80026bc:	e7d2      	b.n	8002664 <__aeabi_f2d+0x20>
 80026be:	0003      	movs	r3, r0
 80026c0:	002a      	movs	r2, r5
 80026c2:	3b0b      	subs	r3, #11
 80026c4:	409a      	lsls	r2, r3
 80026c6:	2500      	movs	r5, #0
 80026c8:	e7e3      	b.n	8002692 <__aeabi_f2d+0x4e>
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	00000389 	.word	0x00000389
 80026d0:	000007ff 	.word	0x000007ff

080026d4 <__clzsi2>:
 80026d4:	211c      	movs	r1, #28
 80026d6:	2301      	movs	r3, #1
 80026d8:	041b      	lsls	r3, r3, #16
 80026da:	4298      	cmp	r0, r3
 80026dc:	d301      	bcc.n	80026e2 <__clzsi2+0xe>
 80026de:	0c00      	lsrs	r0, r0, #16
 80026e0:	3910      	subs	r1, #16
 80026e2:	0a1b      	lsrs	r3, r3, #8
 80026e4:	4298      	cmp	r0, r3
 80026e6:	d301      	bcc.n	80026ec <__clzsi2+0x18>
 80026e8:	0a00      	lsrs	r0, r0, #8
 80026ea:	3908      	subs	r1, #8
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	4298      	cmp	r0, r3
 80026f0:	d301      	bcc.n	80026f6 <__clzsi2+0x22>
 80026f2:	0900      	lsrs	r0, r0, #4
 80026f4:	3904      	subs	r1, #4
 80026f6:	a202      	add	r2, pc, #8	; (adr r2, 8002700 <__clzsi2+0x2c>)
 80026f8:	5c10      	ldrb	r0, [r2, r0]
 80026fa:	1840      	adds	r0, r0, r1
 80026fc:	4770      	bx	lr
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	02020304 	.word	0x02020304
 8002704:	01010101 	.word	0x01010101
	...

08002710 <__clzdi2>:
 8002710:	b510      	push	{r4, lr}
 8002712:	2900      	cmp	r1, #0
 8002714:	d103      	bne.n	800271e <__clzdi2+0xe>
 8002716:	f7ff ffdd 	bl	80026d4 <__clzsi2>
 800271a:	3020      	adds	r0, #32
 800271c:	e002      	b.n	8002724 <__clzdi2+0x14>
 800271e:	0008      	movs	r0, r1
 8002720:	f7ff ffd8 	bl	80026d4 <__clzsi2>
 8002724:	bd10      	pop	{r4, pc}
 8002726:	46c0      	nop			; (mov r8, r8)

08002728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800272c:	f000 fdd6 	bl	80032dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002730:	f000 f80c 	bl	800274c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002734:	f000 f8ee 	bl	8002914 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002738:	f000 f87c 	bl	8002834 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800273c:	f000 f8ba 	bl	80028b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  i2c_scan();
 8002740:	f000 f90a 	bl	8002958 <i2c_scan>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lps22hb_read_data_polling();
 8002744:	f000 f9bc 	bl	8002ac0 <lps22hb_read_data_polling>
 8002748:	e7fc      	b.n	8002744 <main+0x1c>
	...

0800274c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b09d      	sub	sp, #116	; 0x74
 8002750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002752:	2438      	movs	r4, #56	; 0x38
 8002754:	193b      	adds	r3, r7, r4
 8002756:	0018      	movs	r0, r3
 8002758:	2338      	movs	r3, #56	; 0x38
 800275a:	001a      	movs	r2, r3
 800275c:	2100      	movs	r1, #0
 800275e:	f004 fae5 	bl	8006d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002762:	2324      	movs	r3, #36	; 0x24
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	0018      	movs	r0, r3
 8002768:	2314      	movs	r3, #20
 800276a:	001a      	movs	r2, r3
 800276c:	2100      	movs	r1, #0
 800276e:	f004 fadd 	bl	8006d2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002772:	003b      	movs	r3, r7
 8002774:	0018      	movs	r0, r3
 8002776:	2324      	movs	r3, #36	; 0x24
 8002778:	001a      	movs	r2, r3
 800277a:	2100      	movs	r1, #0
 800277c:	f004 fad6 	bl	8006d2c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002780:	4b2a      	ldr	r3, [pc, #168]	; (800282c <SystemClock_Config+0xe0>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a2a      	ldr	r2, [pc, #168]	; (8002830 <SystemClock_Config+0xe4>)
 8002786:	401a      	ands	r2, r3
 8002788:	4b28      	ldr	r3, [pc, #160]	; (800282c <SystemClock_Config+0xe0>)
 800278a:	2180      	movs	r1, #128	; 0x80
 800278c:	0109      	lsls	r1, r1, #4
 800278e:	430a      	orrs	r2, r1
 8002790:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002792:	0021      	movs	r1, r4
 8002794:	187b      	adds	r3, r7, r1
 8002796:	2202      	movs	r2, #2
 8002798:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800279a:	187b      	adds	r3, r7, r1
 800279c:	2201      	movs	r2, #1
 800279e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	2210      	movs	r2, #16
 80027a4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027a6:	187b      	adds	r3, r7, r1
 80027a8:	2202      	movs	r2, #2
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027ac:	187b      	adds	r3, r7, r1
 80027ae:	2200      	movs	r2, #0
 80027b0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80027b2:	187b      	adds	r3, r7, r1
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80027b8:	187b      	adds	r3, r7, r1
 80027ba:	2280      	movs	r2, #128	; 0x80
 80027bc:	0412      	lsls	r2, r2, #16
 80027be:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	0018      	movs	r0, r3
 80027c4:	f001 ffec 	bl	80047a0 <HAL_RCC_OscConfig>
 80027c8:	1e03      	subs	r3, r0, #0
 80027ca:	d001      	beq.n	80027d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80027cc:	f000 fa46 	bl	8002c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027d0:	2124      	movs	r1, #36	; 0x24
 80027d2:	187b      	adds	r3, r7, r1
 80027d4:	220f      	movs	r2, #15
 80027d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027d8:	187b      	adds	r3, r7, r1
 80027da:	2203      	movs	r2, #3
 80027dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027de:	187b      	adds	r3, r7, r1
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027e4:	187b      	adds	r3, r7, r1
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ea:	187b      	adds	r3, r7, r1
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027f0:	187b      	adds	r3, r7, r1
 80027f2:	2100      	movs	r1, #0
 80027f4:	0018      	movs	r0, r3
 80027f6:	f002 fb97 	bl	8004f28 <HAL_RCC_ClockConfig>
 80027fa:	1e03      	subs	r3, r0, #0
 80027fc:	d001      	beq.n	8002802 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80027fe:	f000 fa2d 	bl	8002c5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002802:	003b      	movs	r3, r7
 8002804:	2209      	movs	r2, #9
 8002806:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002808:	003b      	movs	r3, r7
 800280a:	2200      	movs	r2, #0
 800280c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800280e:	003b      	movs	r3, r7
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002814:	003b      	movs	r3, r7
 8002816:	0018      	movs	r0, r3
 8002818:	f002 fdaa 	bl	8005370 <HAL_RCCEx_PeriphCLKConfig>
 800281c:	1e03      	subs	r3, r0, #0
 800281e:	d001      	beq.n	8002824 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8002820:	f000 fa1c 	bl	8002c5c <Error_Handler>
  }
}
 8002824:	46c0      	nop			; (mov r8, r8)
 8002826:	46bd      	mov	sp, r7
 8002828:	b01d      	add	sp, #116	; 0x74
 800282a:	bd90      	pop	{r4, r7, pc}
 800282c:	40007000 	.word	0x40007000
 8002830:	ffffe7ff 	.word	0xffffe7ff

08002834 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <MX_I2C1_Init+0x74>)
 800283a:	4a1c      	ldr	r2, [pc, #112]	; (80028ac <MX_I2C1_Init+0x78>)
 800283c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800283e:	4b1a      	ldr	r3, [pc, #104]	; (80028a8 <MX_I2C1_Init+0x74>)
 8002840:	4a1b      	ldr	r2, [pc, #108]	; (80028b0 <MX_I2C1_Init+0x7c>)
 8002842:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002844:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <MX_I2C1_Init+0x74>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800284a:	4b17      	ldr	r3, [pc, #92]	; (80028a8 <MX_I2C1_Init+0x74>)
 800284c:	2201      	movs	r2, #1
 800284e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002850:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <MX_I2C1_Init+0x74>)
 8002852:	2200      	movs	r2, #0
 8002854:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002856:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <MX_I2C1_Init+0x74>)
 8002858:	2200      	movs	r2, #0
 800285a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800285c:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <MX_I2C1_Init+0x74>)
 800285e:	2200      	movs	r2, #0
 8002860:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002862:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <MX_I2C1_Init+0x74>)
 8002864:	2200      	movs	r2, #0
 8002866:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002868:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <MX_I2C1_Init+0x74>)
 800286a:	2200      	movs	r2, #0
 800286c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <MX_I2C1_Init+0x74>)
 8002870:	0018      	movs	r0, r3
 8002872:	f000 fff1 	bl	8003858 <HAL_I2C_Init>
 8002876:	1e03      	subs	r3, r0, #0
 8002878:	d001      	beq.n	800287e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800287a:	f000 f9ef 	bl	8002c5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <MX_I2C1_Init+0x74>)
 8002880:	2100      	movs	r1, #0
 8002882:	0018      	movs	r0, r3
 8002884:	f001 fef4 	bl	8004670 <HAL_I2CEx_ConfigAnalogFilter>
 8002888:	1e03      	subs	r3, r0, #0
 800288a:	d001      	beq.n	8002890 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800288c:	f000 f9e6 	bl	8002c5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <MX_I2C1_Init+0x74>)
 8002892:	2100      	movs	r1, #0
 8002894:	0018      	movs	r0, r3
 8002896:	f001 ff37 	bl	8004708 <HAL_I2CEx_ConfigDigitalFilter>
 800289a:	1e03      	subs	r3, r0, #0
 800289c:	d001      	beq.n	80028a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800289e:	f000 f9dd 	bl	8002c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200001f4 	.word	0x200001f4
 80028ac:	40005400 	.word	0x40005400
 80028b0:	00303d5b 	.word	0x00303d5b

080028b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028b8:	4b14      	ldr	r3, [pc, #80]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028ba:	4a15      	ldr	r2, [pc, #84]	; (8002910 <MX_USART1_UART_Init+0x5c>)
 80028bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028c0:	22e1      	movs	r2, #225	; 0xe1
 80028c2:	0252      	lsls	r2, r2, #9
 80028c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028da:	220c      	movs	r2, #12
 80028dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028f8:	0018      	movs	r0, r3
 80028fa:	f002 fec7 	bl	800568c <HAL_UART_Init>
 80028fe:	1e03      	subs	r3, r0, #0
 8002900:	d001      	beq.n	8002906 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002902:	f000 f9ab 	bl	8002c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000248 	.word	0x20000248
 8002910:	40013800 	.word	0x40013800

08002914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800291a:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <MX_GPIO_Init+0x40>)
 800291c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800291e:	4b0d      	ldr	r3, [pc, #52]	; (8002954 <MX_GPIO_Init+0x40>)
 8002920:	2101      	movs	r1, #1
 8002922:	430a      	orrs	r2, r1
 8002924:	62da      	str	r2, [r3, #44]	; 0x2c
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <MX_GPIO_Init+0x40>)
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	2201      	movs	r2, #1
 800292c:	4013      	ands	r3, r2
 800292e:	607b      	str	r3, [r7, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002932:	4b08      	ldr	r3, [pc, #32]	; (8002954 <MX_GPIO_Init+0x40>)
 8002934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002936:	4b07      	ldr	r3, [pc, #28]	; (8002954 <MX_GPIO_Init+0x40>)
 8002938:	2102      	movs	r1, #2
 800293a:	430a      	orrs	r2, r1
 800293c:	62da      	str	r2, [r3, #44]	; 0x2c
 800293e:	4b05      	ldr	r3, [pc, #20]	; (8002954 <MX_GPIO_Init+0x40>)
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	2202      	movs	r2, #2
 8002944:	4013      	ands	r3, r2
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	b002      	add	sp, #8
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	40021000 	.word	0x40021000

08002958 <i2c_scan>:

/* USER CODE BEGIN 4 */

void i2c_scan()
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	for(i=0; i<128; i++)
 800295c:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <i2c_scan+0x80>)
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e030      	b.n	80029c6 <i2c_scan+0x6e>
	{
		   ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 8002964:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <i2c_scan+0x80>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	b29b      	uxth	r3, r3
 800296a:	18db      	adds	r3, r3, r3
 800296c:	b299      	uxth	r1, r3
 800296e:	481b      	ldr	r0, [pc, #108]	; (80029dc <i2c_scan+0x84>)
 8002970:	2305      	movs	r3, #5
 8002972:	2203      	movs	r2, #3
 8002974:	f001 fa68 	bl	8003e48 <HAL_I2C_IsDeviceReady>
 8002978:	0003      	movs	r3, r0
 800297a:	001a      	movs	r2, r3
 800297c:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <i2c_scan+0x88>)
 800297e:	601a      	str	r2, [r3, #0]
		        if (ret != HAL_OK) /* No ACK Received At That Address */
 8002980:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <i2c_scan+0x88>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d006      	beq.n	8002996 <i2c_scan+0x3e>
		        {
		            HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
 8002988:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <i2c_scan+0x8c>)
 800298a:	4917      	ldr	r1, [pc, #92]	; (80029e8 <i2c_scan+0x90>)
 800298c:	4817      	ldr	r0, [pc, #92]	; (80029ec <i2c_scan+0x94>)
 800298e:	2204      	movs	r2, #4
 8002990:	f002 fed0 	bl	8005734 <HAL_UART_Transmit>
 8002994:	e011      	b.n	80029ba <i2c_scan+0x62>
		        }
		        else if(ret == HAL_OK)	/* ACK Received At That Address */
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <i2c_scan+0x88>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10d      	bne.n	80029ba <i2c_scan+0x62>
		        {
		            sprintf(Buffer, "0x%X", i);
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <i2c_scan+0x80>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	001a      	movs	r2, r3
 80029a4:	4912      	ldr	r1, [pc, #72]	; (80029f0 <i2c_scan+0x98>)
 80029a6:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <i2c_scan+0x9c>)
 80029a8:	0018      	movs	r0, r3
 80029aa:	f004 f953 	bl	8006c54 <siprintf>
		            HAL_UART_Transmit(&huart1, (uint8_t *)Buffer, sizeof(Buffer), 10000);
 80029ae:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <i2c_scan+0x8c>)
 80029b0:	4910      	ldr	r1, [pc, #64]	; (80029f4 <i2c_scan+0x9c>)
 80029b2:	480e      	ldr	r0, [pc, #56]	; (80029ec <i2c_scan+0x94>)
 80029b4:	2219      	movs	r2, #25
 80029b6:	f002 febd 	bl	8005734 <HAL_UART_Transmit>
	for(i=0; i<128; i++)
 80029ba:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <i2c_scan+0x80>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	3301      	adds	r3, #1
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <i2c_scan+0x80>)
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <i2c_scan+0x80>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	b25b      	sxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	dac9      	bge.n	8002964 <i2c_scan+0xc>
		        }
	}
}
 80029d0:	46c0      	nop			; (mov r8, r8)
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	200002e9 	.word	0x200002e9
 80029dc:	200001f4 	.word	0x200001f4
 80029e0:	200002ec 	.word	0x200002ec
 80029e4:	00002710 	.word	0x00002710
 80029e8:	20000000 	.word	0x20000000
 80029ec:	20000248 	.word	0x20000248
 80029f0:	08009060 	.word	0x08009060
 80029f4:	200002d0 	.word	0x200002d0

080029f8 <platform_write>:


static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 80029f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029fa:	b08b      	sub	sp, #44	; 0x2c
 80029fc:	af04      	add	r7, sp, #16
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	0008      	movs	r0, r1
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	0019      	movs	r1, r3
 8002a06:	240b      	movs	r4, #11
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	1c02      	adds	r2, r0, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
 8002a0e:	2508      	movs	r5, #8
 8002a10:	197b      	adds	r3, r7, r5
 8002a12:	1c0a      	adds	r2, r1, #0
 8002a14:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(handle, LPS22HB_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)bufp, len, 1000);
 8002a16:	193b      	adds	r3, r7, r4
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	2617      	movs	r6, #23
 8002a1e:	19bc      	adds	r4, r7, r6
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	23fa      	movs	r3, #250	; 0xfa
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	9302      	str	r3, [sp, #8]
 8002a28:	197b      	adds	r3, r7, r5
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	9301      	str	r3, [sp, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	2301      	movs	r3, #1
 8002a34:	21b8      	movs	r1, #184	; 0xb8
 8002a36:	f000 ffa5 	bl	8003984 <HAL_I2C_Mem_Write>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	7023      	strb	r3, [r4, #0]
    return (status == HAL_OK) ? 0 : -1; // Return 0 on success, -1 on failure
 8002a3e:	19bb      	adds	r3, r7, r6
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <platform_write+0x52>
 8002a46:	2300      	movs	r3, #0
 8002a48:	e001      	b.n	8002a4e <platform_write+0x56>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	425b      	negs	r3, r3
}
 8002a4e:	0018      	movs	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b007      	add	sp, #28
 8002a54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a56 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8002a56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a58:	b08b      	sub	sp, #44	; 0x2c
 8002a5a:	af04      	add	r7, sp, #16
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	0008      	movs	r0, r1
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	0019      	movs	r1, r3
 8002a64:	240b      	movs	r4, #11
 8002a66:	193b      	adds	r3, r7, r4
 8002a68:	1c02      	adds	r2, r0, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
 8002a6c:	2508      	movs	r5, #8
 8002a6e:	197b      	adds	r3, r7, r5
 8002a70:	1c0a      	adds	r2, r1, #0
 8002a72:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle, LPS22HB_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8002a74:	193b      	adds	r3, r7, r4
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	2617      	movs	r6, #23
 8002a7c:	19bc      	adds	r4, r7, r6
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	23fa      	movs	r3, #250	; 0xfa
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	9302      	str	r3, [sp, #8]
 8002a86:	197b      	adds	r3, r7, r5
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2301      	movs	r3, #1
 8002a92:	21b8      	movs	r1, #184	; 0xb8
 8002a94:	f001 f8a4 	bl	8003be0 <HAL_I2C_Mem_Read>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	7023      	strb	r3, [r4, #0]
    return (status == HAL_OK) ? 0 : -1; // Return 0 on success, -1 on failure
 8002a9c:	19bb      	adds	r3, r7, r6
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <platform_read+0x52>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e001      	b.n	8002aac <platform_read+0x56>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	425b      	negs	r3, r3
}
 8002aac:	0018      	movs	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b007      	add	sp, #28
 8002ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ab4 <platform_init>:


static void platform_init(void){
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  TIM3->CCR2 = PWM_3V3;
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  platform_delay(1000);
#endif
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <lps22hb_read_data_polling>:

void lps22hb_read_data_polling(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 8002ac6:	4b46      	ldr	r3, [pc, #280]	; (8002be0 <lps22hb_read_data_polling+0x120>)
 8002ac8:	4a46      	ldr	r2, [pc, #280]	; (8002be4 <lps22hb_read_data_polling+0x124>)
 8002aca:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8002acc:	4b44      	ldr	r3, [pc, #272]	; (8002be0 <lps22hb_read_data_polling+0x120>)
 8002ace:	4a46      	ldr	r2, [pc, #280]	; (8002be8 <lps22hb_read_data_polling+0x128>)
 8002ad0:	605a      	str	r2, [r3, #4]
  dev_ctx.mdelay = platform_delay;
 8002ad2:	4b43      	ldr	r3, [pc, #268]	; (8002be0 <lps22hb_read_data_polling+0x120>)
 8002ad4:	4a45      	ldr	r2, [pc, #276]	; (8002bec <lps22hb_read_data_polling+0x12c>)
 8002ad6:	609a      	str	r2, [r3, #8]
  dev_ctx.handle = &SENSOR_BUS;
 8002ad8:	4b41      	ldr	r3, [pc, #260]	; (8002be0 <lps22hb_read_data_polling+0x120>)
 8002ada:	4a45      	ldr	r2, [pc, #276]	; (8002bf0 <lps22hb_read_data_polling+0x130>)
 8002adc:	60da      	str	r2, [r3, #12]
  /* Initialize platform specific hardware */
  platform_init();
 8002ade:	f7ff ffe9 	bl	8002ab4 <platform_init>
  /* Check device ID */
  lps22hb_device_id_get(&dev_ctx, &whoamI);
 8002ae2:	4a44      	ldr	r2, [pc, #272]	; (8002bf4 <lps22hb_read_data_polling+0x134>)
 8002ae4:	4b3e      	ldr	r3, [pc, #248]	; (8002be0 <lps22hb_read_data_polling+0x120>)
 8002ae6:	0011      	movs	r1, r2
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f000 fb99 	bl	8003220 <lps22hb_device_id_get>

  if (whoamI != LPS22HB_ID) {
 8002aee:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <lps22hb_read_data_polling+0x134>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2bb1      	cmp	r3, #177	; 0xb1
 8002af4:	d000      	beq.n	8002af8 <lps22hb_read_data_polling+0x38>
    while (1)/* manage here device not found */;
 8002af6:	e7fe      	b.n	8002af6 <lps22hb_read_data_polling+0x36>
  }

  /* Restore default configuration */
  lps22hb_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8002af8:	4b39      	ldr	r3, [pc, #228]	; (8002be0 <lps22hb_read_data_polling+0x120>)
 8002afa:	2101      	movs	r1, #1
 8002afc:	0018      	movs	r0, r3
 8002afe:	f000 fba1 	bl	8003244 <lps22hb_reset_set>

  do {
    lps22hb_reset_get(&dev_ctx, &rst);
 8002b02:	4a3d      	ldr	r2, [pc, #244]	; (8002bf8 <lps22hb_read_data_polling+0x138>)
 8002b04:	4b36      	ldr	r3, [pc, #216]	; (8002be0 <lps22hb_read_data_polling+0x120>)
 8002b06:	0011      	movs	r1, r2
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f000 fbcb 	bl	80032a4 <lps22hb_reset_get>
  } while (rst);
 8002b0e:	4b3a      	ldr	r3, [pc, #232]	; (8002bf8 <lps22hb_read_data_polling+0x138>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f5      	bne.n	8002b02 <lps22hb_read_data_polling+0x42>

  /* Enable Block Data Update */
  //lps22hb_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
  /* Can be enabled low pass filter on output */
  lps22hb_low_pass_filter_mode_set(&dev_ctx, LPS22HB_LPF_ODR_DIV_2);
 8002b16:	4b32      	ldr	r3, [pc, #200]	; (8002be0 <lps22hb_read_data_polling+0x120>)
 8002b18:	2100      	movs	r1, #0
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f000 fab0 	bl	8003080 <lps22hb_low_pass_filter_mode_set>
  /* Can be set Data-ready signal on INT_DRDY pin */
  //lps22hb_drdy_on_int_set(&dev_ctx, PROPERTY_ENABLE);
  /* Set Output Data Rate */
  lps22hb_data_rate_set(&dev_ctx, LPS22HB_ODR_10_Hz);
 8002b20:	4b2f      	ldr	r3, [pc, #188]	; (8002be0 <lps22hb_read_data_polling+0x120>)
 8002b22:	2102      	movs	r1, #2
 8002b24:	0018      	movs	r0, r3
 8002b26:	f000 fadb 	bl	80030e0 <lps22hb_data_rate_set>

  /* Read samples in polling mode (no int) */
  while (1) {
    uint8_t reg;
    /* Read output only if new value is available */
    lps22hb_press_data_ready_get(&dev_ctx, &reg);
 8002b2a:	1dfa      	adds	r2, r7, #7
 8002b2c:	4b2c      	ldr	r3, [pc, #176]	; (8002be0 <lps22hb_read_data_polling+0x120>)
 8002b2e:	0011      	movs	r1, r2
 8002b30:	0018      	movs	r0, r3
 8002b32:	f000 fb05 	bl	8003140 <lps22hb_press_data_ready_get>

    if (reg) {
 8002b36:	1dfb      	adds	r3, r7, #7
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f5      	beq.n	8002b2a <lps22hb_read_data_polling+0x6a>
 8002b3e:	4b2f      	ldr	r3, [pc, #188]	; (8002bfc <lps22hb_read_data_polling+0x13c>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
      memset(&data_raw_pressure, 0x00, sizeof(int32_t));
      lps22hb_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 8002b44:	4a2d      	ldr	r2, [pc, #180]	; (8002bfc <lps22hb_read_data_polling+0x13c>)
 8002b46:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <lps22hb_read_data_polling+0x120>)
 8002b48:	0011      	movs	r1, r2
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f000 fb13 	bl	8003176 <lps22hb_pressure_raw_get>
      pressure_hPa = lps22hb_from_lsb_to_hpa(data_raw_pressure);
 8002b50:	4b2a      	ldr	r3, [pc, #168]	; (8002bfc <lps22hb_read_data_polling+0x13c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	0018      	movs	r0, r3
 8002b56:	f000 fa68 	bl	800302a <lps22hb_from_lsb_to_hpa>
 8002b5a:	1c02      	adds	r2, r0, #0
 8002b5c:	4b28      	ldr	r3, [pc, #160]	; (8002c00 <lps22hb_read_data_polling+0x140>)
 8002b5e:	601a      	str	r2, [r3, #0]
      sprintf((char *)tx_buffer, "pressure [hPa]:%6.2f\r\n", pressure_hPa);
 8002b60:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <lps22hb_read_data_polling+0x140>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	1c18      	adds	r0, r3, #0
 8002b66:	f7ff fd6d 	bl	8002644 <__aeabi_f2d>
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	000b      	movs	r3, r1
 8002b6e:	4925      	ldr	r1, [pc, #148]	; (8002c04 <lps22hb_read_data_polling+0x144>)
 8002b70:	4825      	ldr	r0, [pc, #148]	; (8002c08 <lps22hb_read_data_polling+0x148>)
 8002b72:	f004 f86f 	bl	8006c54 <siprintf>
      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8002b76:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <lps22hb_read_data_polling+0x148>)
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f7fd fac5 	bl	8000108 <strlen>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <lps22hb_read_data_polling+0x148>)
 8002b84:	0011      	movs	r1, r2
 8002b86:	0018      	movs	r0, r3
 8002b88:	f000 f846 	bl	8002c18 <tx_com>
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <lps22hb_read_data_polling+0x14c>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	801a      	strh	r2, [r3, #0]
      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
      lps22hb_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 8002b92:	4a1e      	ldr	r2, [pc, #120]	; (8002c0c <lps22hb_read_data_polling+0x14c>)
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <lps22hb_read_data_polling+0x120>)
 8002b96:	0011      	movs	r1, r2
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f000 fb1a 	bl	80031d2 <lps22hb_temperature_raw_get>
      temperature_degC = lps22hb_from_lsb_to_degc(data_raw_temperature);
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <lps22hb_read_data_polling+0x14c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	5e9b      	ldrsh	r3, [r3, r2]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f000 fa53 	bl	8003050 <lps22hb_from_lsb_to_degc>
 8002baa:	1c02      	adds	r2, r0, #0
 8002bac:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <lps22hb_read_data_polling+0x150>)
 8002bae:	601a      	str	r2, [r3, #0]
      sprintf((char *)tx_buffer, "temperature [degC]:%6.2f\r\n",
 8002bb0:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <lps22hb_read_data_polling+0x150>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	1c18      	adds	r0, r3, #0
 8002bb6:	f7ff fd45 	bl	8002644 <__aeabi_f2d>
 8002bba:	0002      	movs	r2, r0
 8002bbc:	000b      	movs	r3, r1
 8002bbe:	4915      	ldr	r1, [pc, #84]	; (8002c14 <lps22hb_read_data_polling+0x154>)
 8002bc0:	4811      	ldr	r0, [pc, #68]	; (8002c08 <lps22hb_read_data_polling+0x148>)
 8002bc2:	f004 f847 	bl	8006c54 <siprintf>
              temperature_degC);
      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <lps22hb_read_data_polling+0x148>)
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7fd fa9d 	bl	8000108 <strlen>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <lps22hb_read_data_polling+0x148>)
 8002bd4:	0011      	movs	r1, r2
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f000 f81e 	bl	8002c18 <tx_com>
  while (1) {
 8002bdc:	e7a5      	b.n	8002b2a <lps22hb_read_data_polling+0x6a>
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	200006e4 	.word	0x200006e4
 8002be4:	080029f9 	.word	0x080029f9
 8002be8:	08002a57 	.word	0x08002a57
 8002bec:	08002c45 	.word	0x08002c45
 8002bf0:	200001f4 	.word	0x200001f4
 8002bf4:	200002f8 	.word	0x200002f8
 8002bf8:	200002f9 	.word	0x200002f9
 8002bfc:	200002f0 	.word	0x200002f0
 8002c00:	200002f4 	.word	0x200002f4
 8002c04:	08009068 	.word	0x08009068
 8002c08:	200002fc 	.word	0x200002fc
 8002c0c:	200006f4 	.word	0x200006f4
 8002c10:	200006f8 	.word	0x200006f8
 8002c14:	08009080 	.word	0x08009080

08002c18 <tx_com>:
    }
  }
}

static void tx_com(uint8_t *tx_buffer, uint16_t len) {
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	000a      	movs	r2, r1
 8002c22:	1cbb      	adds	r3, r7, #2
 8002c24:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, tx_buffer, len, HAL_MAX_DELAY);
 8002c26:	2301      	movs	r3, #1
 8002c28:	425c      	negs	r4, r3
 8002c2a:	1cbb      	adds	r3, r7, #2
 8002c2c:	881a      	ldrh	r2, [r3, #0]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4803      	ldr	r0, [pc, #12]	; (8002c40 <tx_com+0x28>)
 8002c32:	0023      	movs	r3, r4
 8002c34:	f002 fd7e 	bl	8005734 <HAL_UART_Transmit>
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b003      	add	sp, #12
 8002c3e:	bd90      	pop	{r4, r7, pc}
 8002c40:	20000248 	.word	0x20000248

08002c44 <platform_delay>:
void platform_delay(long unsigned int ms) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms); // Using HAL_Delay as an example; you may implement your own delay function
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f000 fbb4 	bl	80033bc <HAL_Delay>
}
 8002c54:	46c0      	nop			; (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b002      	add	sp, #8
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c60:	b672      	cpsid	i
}
 8002c62:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c64:	e7fe      	b.n	8002c64 <Error_Handler+0x8>
	...

08002c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6c:	4b07      	ldr	r3, [pc, #28]	; (8002c8c <HAL_MspInit+0x24>)
 8002c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_MspInit+0x24>)
 8002c72:	2101      	movs	r1, #1
 8002c74:	430a      	orrs	r2, r1
 8002c76:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <HAL_MspInit+0x24>)
 8002c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <HAL_MspInit+0x24>)
 8002c7e:	2180      	movs	r1, #128	; 0x80
 8002c80:	0549      	lsls	r1, r1, #21
 8002c82:	430a      	orrs	r2, r1
 8002c84:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40021000 	.word	0x40021000

08002c90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b089      	sub	sp, #36	; 0x24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c98:	240c      	movs	r4, #12
 8002c9a:	193b      	adds	r3, r7, r4
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	2314      	movs	r3, #20
 8002ca0:	001a      	movs	r2, r3
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	f004 f842 	bl	8006d2c <memset>
  if(hi2c->Instance==I2C1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a17      	ldr	r2, [pc, #92]	; (8002d0c <HAL_I2C_MspInit+0x7c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d128      	bne.n	8002d04 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb2:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <HAL_I2C_MspInit+0x80>)
 8002cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb6:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <HAL_I2C_MspInit+0x80>)
 8002cb8:	2102      	movs	r1, #2
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cbe:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <HAL_I2C_MspInit+0x80>)
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BSP_I2C1_SCL_Pin|BSP_I2C1_SDA_Pin;
 8002cca:	0021      	movs	r1, r4
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	22c0      	movs	r2, #192	; 0xc0
 8002cd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cd2:	187b      	adds	r3, r7, r1
 8002cd4:	2212      	movs	r2, #18
 8002cd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd8:	187b      	adds	r3, r7, r1
 8002cda:	2200      	movs	r2, #0
 8002cdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cde:	187b      	adds	r3, r7, r1
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002ce4:	187b      	adds	r3, r7, r1
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cea:	187b      	adds	r3, r7, r1
 8002cec:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <HAL_I2C_MspInit+0x84>)
 8002cee:	0019      	movs	r1, r3
 8002cf0:	0010      	movs	r0, r2
 8002cf2:	f000 fc3b 	bl	800356c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_I2C_MspInit+0x80>)
 8002cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cfa:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_I2C_MspInit+0x80>)
 8002cfc:	2180      	movs	r1, #128	; 0x80
 8002cfe:	0389      	lsls	r1, r1, #14
 8002d00:	430a      	orrs	r2, r1
 8002d02:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d04:	46c0      	nop			; (mov r8, r8)
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b009      	add	sp, #36	; 0x24
 8002d0a:	bd90      	pop	{r4, r7, pc}
 8002d0c:	40005400 	.word	0x40005400
 8002d10:	40021000 	.word	0x40021000
 8002d14:	50000400 	.word	0x50000400

08002d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b089      	sub	sp, #36	; 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d20:	240c      	movs	r4, #12
 8002d22:	193b      	adds	r3, r7, r4
 8002d24:	0018      	movs	r0, r3
 8002d26:	2314      	movs	r3, #20
 8002d28:	001a      	movs	r2, r3
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	f003 fffe 	bl	8006d2c <memset>
  if(huart->Instance==USART1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a18      	ldr	r2, [pc, #96]	; (8002d98 <HAL_UART_MspInit+0x80>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d12a      	bne.n	8002d90 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d3a:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <HAL_UART_MspInit+0x84>)
 8002d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d3e:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <HAL_UART_MspInit+0x84>)
 8002d40:	2180      	movs	r1, #128	; 0x80
 8002d42:	01c9      	lsls	r1, r1, #7
 8002d44:	430a      	orrs	r2, r1
 8002d46:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <HAL_UART_MspInit+0x84>)
 8002d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4c:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <HAL_UART_MspInit+0x84>)
 8002d4e:	2101      	movs	r1, #1
 8002d50:	430a      	orrs	r2, r1
 8002d52:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_UART_MspInit+0x84>)
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	2201      	movs	r2, #1
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_USART1_TX_Pin|BSP_USART1_RX_Pin;
 8002d60:	193b      	adds	r3, r7, r4
 8002d62:	22c0      	movs	r2, #192	; 0xc0
 8002d64:	00d2      	lsls	r2, r2, #3
 8002d66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d68:	0021      	movs	r1, r4
 8002d6a:	187b      	adds	r3, r7, r1
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d70:	187b      	adds	r3, r7, r1
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d76:	187b      	adds	r3, r7, r1
 8002d78:	2203      	movs	r2, #3
 8002d7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002d7c:	187b      	adds	r3, r7, r1
 8002d7e:	2204      	movs	r2, #4
 8002d80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d82:	187a      	adds	r2, r7, r1
 8002d84:	23a0      	movs	r3, #160	; 0xa0
 8002d86:	05db      	lsls	r3, r3, #23
 8002d88:	0011      	movs	r1, r2
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f000 fbee 	bl	800356c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b009      	add	sp, #36	; 0x24
 8002d96:	bd90      	pop	{r4, r7, pc}
 8002d98:	40013800 	.word	0x40013800
 8002d9c:	40021000 	.word	0x40021000

08002da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002da4:	e7fe      	b.n	8002da4 <NMI_Handler+0x4>

08002da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002daa:	e7fe      	b.n	8002daa <HardFault_Handler+0x4>

08002dac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002db0:	46c0      	nop			; (mov r8, r8)
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dc4:	f000 fade 	bl	8003384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	af00      	add	r7, sp, #0
  return 1;
 8002dd2:	2301      	movs	r3, #1
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <_kill>:

int _kill(int pid, int sig)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002de4:	f003 fffc 	bl	8006de0 <__errno>
 8002de8:	0003      	movs	r3, r0
 8002dea:	2216      	movs	r2, #22
 8002dec:	601a      	str	r2, [r3, #0]
  return -1;
 8002dee:	2301      	movs	r3, #1
 8002df0:	425b      	negs	r3, r3
}
 8002df2:	0018      	movs	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b002      	add	sp, #8
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <_exit>:

void _exit (int status)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e02:	2301      	movs	r3, #1
 8002e04:	425a      	negs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	0011      	movs	r1, r2
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f7ff ffe5 	bl	8002dda <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e10:	e7fe      	b.n	8002e10 <_exit+0x16>

08002e12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	e00a      	b.n	8002e3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e24:	e000      	b.n	8002e28 <_read+0x16>
 8002e26:	bf00      	nop
 8002e28:	0001      	movs	r1, r0
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	60ba      	str	r2, [r7, #8]
 8002e30:	b2ca      	uxtb	r2, r1
 8002e32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	3301      	adds	r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	dbf0      	blt.n	8002e24 <_read+0x12>
  }

  return len;
 8002e42:	687b      	ldr	r3, [r7, #4]
}
 8002e44:	0018      	movs	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b006      	add	sp, #24
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	e009      	b.n	8002e72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	60ba      	str	r2, [r7, #8]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	0018      	movs	r0, r3
 8002e68:	e000      	b.n	8002e6c <_write+0x20>
 8002e6a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	dbf1      	blt.n	8002e5e <_write+0x12>
  }
  return len;
 8002e7a:	687b      	ldr	r3, [r7, #4]
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b006      	add	sp, #24
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <_close>:

int _close(int file)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	425b      	negs	r3, r3
}
 8002e90:	0018      	movs	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b002      	add	sp, #8
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2280      	movs	r2, #128	; 0x80
 8002ea6:	0192      	lsls	r2, r2, #6
 8002ea8:	605a      	str	r2, [r3, #4]
  return 0;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	0018      	movs	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b002      	add	sp, #8
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <_isatty>:

int _isatty(int file)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ebc:	2301      	movs	r3, #1
}
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b002      	add	sp, #8
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b004      	add	sp, #16
 8002eda:	bd80      	pop	{r7, pc}

08002edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ee4:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <_sbrk+0x5c>)
 8002ee6:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <_sbrk+0x60>)
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ef0:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <_sbrk+0x64>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d102      	bne.n	8002efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <_sbrk+0x64>)
 8002efa:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <_sbrk+0x68>)
 8002efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <_sbrk+0x64>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	18d3      	adds	r3, r2, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d207      	bcs.n	8002f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f0c:	f003 ff68 	bl	8006de0 <__errno>
 8002f10:	0003      	movs	r3, r0
 8002f12:	220c      	movs	r2, #12
 8002f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f16:	2301      	movs	r3, #1
 8002f18:	425b      	negs	r3, r3
 8002f1a:	e009      	b.n	8002f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f1c:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <_sbrk+0x64>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f22:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <_sbrk+0x64>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	18d2      	adds	r2, r2, r3
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <_sbrk+0x64>)
 8002f2c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
}
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b006      	add	sp, #24
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20002000 	.word	0x20002000
 8002f3c:	00000400 	.word	0x00000400
 8002f40:	200006fc 	.word	0x200006fc
 8002f44:	20000850 	.word	0x20000850

08002f48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f4c:	46c0      	nop			; (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8002f54:	480d      	ldr	r0, [pc, #52]	; (8002f8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f56:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f58:	f7ff fff6 	bl	8002f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f5c:	480c      	ldr	r0, [pc, #48]	; (8002f90 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f5e:	490d      	ldr	r1, [pc, #52]	; (8002f94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f60:	4a0d      	ldr	r2, [pc, #52]	; (8002f98 <LoopForever+0xe>)
  movs r3, #0
 8002f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f64:	e002      	b.n	8002f6c <LoopCopyDataInit>

08002f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f6a:	3304      	adds	r3, #4

08002f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f70:	d3f9      	bcc.n	8002f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f72:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f74:	4c0a      	ldr	r4, [pc, #40]	; (8002fa0 <LoopForever+0x16>)
  movs r3, #0
 8002f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f78:	e001      	b.n	8002f7e <LoopFillZerobss>

08002f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f7c:	3204      	adds	r2, #4

08002f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f80:	d3fb      	bcc.n	8002f7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f82:	f003 ff33 	bl	8006dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f86:	f7ff fbcf 	bl	8002728 <main>

08002f8a <LoopForever>:

LoopForever:
    b LoopForever
 8002f8a:	e7fe      	b.n	8002f8a <LoopForever>
  ldr   r0, =_estack
 8002f8c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f94:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002f98:	0800954c 	.word	0x0800954c
  ldr r2, =_sbss
 8002f9c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002fa0:	20000850 	.word	0x20000850

08002fa4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fa4:	e7fe      	b.n	8002fa4 <ADC1_COMP_IRQHandler>

08002fa6 <lps22hb_read_reg>:
  *
  */
int32_t __weak lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002fa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa8:	b087      	sub	sp, #28
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	0008      	movs	r0, r1
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	260b      	movs	r6, #11
 8002fb6:	19bb      	adds	r3, r7, r6
 8002fb8:	1c02      	adds	r2, r0, #0
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	2508      	movs	r5, #8
 8002fbe:	197b      	adds	r3, r7, r5
 8002fc0:	1c0a      	adds	r2, r1, #0
 8002fc2:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	685c      	ldr	r4, [r3, #4]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	68d8      	ldr	r0, [r3, #12]
 8002fcc:	197b      	adds	r3, r7, r5
 8002fce:	881d      	ldrh	r5, [r3, #0]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	19bb      	adds	r3, r7, r6
 8002fd4:	7819      	ldrb	r1, [r3, #0]
 8002fd6:	002b      	movs	r3, r5
 8002fd8:	47a0      	blx	r4
 8002fda:	0003      	movs	r3, r0
 8002fdc:	617b      	str	r3, [r7, #20]

  return ret;
 8002fde:	697b      	ldr	r3, [r7, #20]
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b007      	add	sp, #28
 8002fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fe8 <lps22hb_write_reg>:
  *
  */
int32_t __weak lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8002fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	0008      	movs	r0, r1
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	0019      	movs	r1, r3
 8002ff6:	260b      	movs	r6, #11
 8002ff8:	19bb      	adds	r3, r7, r6
 8002ffa:	1c02      	adds	r2, r0, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	2508      	movs	r5, #8
 8003000:	197b      	adds	r3, r7, r5
 8003002:	1c0a      	adds	r2, r1, #0
 8003004:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681c      	ldr	r4, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	68d8      	ldr	r0, [r3, #12]
 800300e:	197b      	adds	r3, r7, r5
 8003010:	881d      	ldrh	r5, [r3, #0]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	19bb      	adds	r3, r7, r6
 8003016:	7819      	ldrb	r1, [r3, #0]
 8003018:	002b      	movs	r3, r5
 800301a:	47a0      	blx	r4
 800301c:	0003      	movs	r3, r0
 800301e:	617b      	str	r3, [r7, #20]

  return ret;
 8003020:	697b      	ldr	r3, [r7, #20]
}
 8003022:	0018      	movs	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	b007      	add	sp, #28
 8003028:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800302a <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd fc6c 	bl	8000910 <__aeabi_i2f>
 8003038:	1c03      	adds	r3, r0, #0
 800303a:	2193      	movs	r1, #147	; 0x93
 800303c:	05c9      	lsls	r1, r1, #23
 800303e:	1c18      	adds	r0, r3, #0
 8003040:	f7fd fb4c 	bl	80006dc <__aeabi_fdiv>
 8003044:	1c03      	adds	r3, r0, #0
}
 8003046:	1c18      	adds	r0, r3, #0
 8003048:	46bd      	mov	sp, r7
 800304a:	b002      	add	sp, #8
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	0002      	movs	r2, r0
 8003058:	1dbb      	adds	r3, r7, #6
 800305a:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb / 100.0f);
 800305c:	1dbb      	adds	r3, r7, #6
 800305e:	2200      	movs	r2, #0
 8003060:	5e9b      	ldrsh	r3, [r3, r2]
 8003062:	0018      	movs	r0, r3
 8003064:	f7fd fc54 	bl	8000910 <__aeabi_i2f>
 8003068:	1c03      	adds	r3, r0, #0
 800306a:	4904      	ldr	r1, [pc, #16]	; (800307c <lps22hb_from_lsb_to_degc+0x2c>)
 800306c:	1c18      	adds	r0, r3, #0
 800306e:	f7fd fb35 	bl	80006dc <__aeabi_fdiv>
 8003072:	1c03      	adds	r3, r0, #0
}
 8003074:	1c18      	adds	r0, r3, #0
 8003076:	46bd      	mov	sp, r7
 8003078:	b002      	add	sp, #8
 800307a:	bd80      	pop	{r7, pc}
 800307c:	42c80000 	.word	0x42c80000

08003080 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8003080:	b590      	push	{r4, r7, lr}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	000a      	movs	r2, r1
 800308a:	1cfb      	adds	r3, r7, #3
 800308c:	701a      	strb	r2, [r3, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800308e:	2408      	movs	r4, #8
 8003090:	193a      	adds	r2, r7, r4
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	2301      	movs	r3, #1
 8003096:	2110      	movs	r1, #16
 8003098:	f7ff ff85 	bl	8002fa6 <lps22hb_read_reg>
 800309c:	0003      	movs	r3, r0
 800309e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d117      	bne.n	80030d6 <lps22hb_low_pass_filter_mode_set+0x56>
  {
    ctrl_reg1.lpfp = (uint8_t)val;
 80030a6:	1cfb      	adds	r3, r7, #3
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2203      	movs	r2, #3
 80030ac:	4013      	ands	r3, r2
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	193b      	adds	r3, r7, r4
 80030b2:	2103      	movs	r1, #3
 80030b4:	400a      	ands	r2, r1
 80030b6:	0090      	lsls	r0, r2, #2
 80030b8:	781a      	ldrb	r2, [r3, #0]
 80030ba:	210c      	movs	r1, #12
 80030bc:	438a      	bics	r2, r1
 80030be:	1c11      	adds	r1, r2, #0
 80030c0:	1c02      	adds	r2, r0, #0
 80030c2:	430a      	orrs	r2, r1
 80030c4:	701a      	strb	r2, [r3, #0]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80030c6:	193a      	adds	r2, r7, r4
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	2301      	movs	r3, #1
 80030cc:	2110      	movs	r1, #16
 80030ce:	f7ff ff8b 	bl	8002fe8 <lps22hb_write_reg>
 80030d2:	0003      	movs	r3, r0
 80030d4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80030d6:	68fb      	ldr	r3, [r7, #12]
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	b005      	add	sp, #20
 80030de:	bd90      	pop	{r4, r7, pc}

080030e0 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	000a      	movs	r2, r1
 80030ea:	1cfb      	adds	r3, r7, #3
 80030ec:	701a      	strb	r2, [r3, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80030ee:	2408      	movs	r4, #8
 80030f0:	193a      	adds	r2, r7, r4
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	2301      	movs	r3, #1
 80030f6:	2110      	movs	r1, #16
 80030f8:	f7ff ff55 	bl	8002fa6 <lps22hb_read_reg>
 80030fc:	0003      	movs	r3, r0
 80030fe:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d117      	bne.n	8003136 <lps22hb_data_rate_set+0x56>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8003106:	1cfb      	adds	r3, r7, #3
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2207      	movs	r2, #7
 800310c:	4013      	ands	r3, r2
 800310e:	b2da      	uxtb	r2, r3
 8003110:	193b      	adds	r3, r7, r4
 8003112:	2107      	movs	r1, #7
 8003114:	400a      	ands	r2, r1
 8003116:	0110      	lsls	r0, r2, #4
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	2170      	movs	r1, #112	; 0x70
 800311c:	438a      	bics	r2, r1
 800311e:	1c11      	adds	r1, r2, #0
 8003120:	1c02      	adds	r2, r0, #0
 8003122:	430a      	orrs	r2, r1
 8003124:	701a      	strb	r2, [r3, #0]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003126:	193a      	adds	r2, r7, r4
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	2301      	movs	r3, #1
 800312c:	2110      	movs	r1, #16
 800312e:	f7ff ff5b 	bl	8002fe8 <lps22hb_write_reg>
 8003132:	0003      	movs	r3, r0
 8003134:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003136:	68fb      	ldr	r3, [r7, #12]
}
 8003138:	0018      	movs	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	b005      	add	sp, #20
 800313e:	bd90      	pop	{r4, r7, pc}

08003140 <lps22hb_press_data_ready_get>:
  * @param  val    Change the values of p_da in reg STATUS
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_press_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  lps22hb_status_t status;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_STATUS, (uint8_t *)&status, 1);
 800314a:	2408      	movs	r4, #8
 800314c:	193a      	adds	r2, r7, r4
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	2301      	movs	r3, #1
 8003152:	2127      	movs	r1, #39	; 0x27
 8003154:	f7ff ff27 	bl	8002fa6 <lps22hb_read_reg>
 8003158:	0003      	movs	r3, r0
 800315a:	60fb      	str	r3, [r7, #12]
  *val = status.p_da;
 800315c:	193b      	adds	r3, r7, r4
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	07db      	lsls	r3, r3, #31
 8003162:	0fdb      	lsrs	r3, r3, #31
 8003164:	b2db      	uxtb	r3, r3
 8003166:	001a      	movs	r2, r3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	701a      	strb	r2, [r3, #0]

  return ret;
 800316c:	68fb      	ldr	r3, [r7, #12]
}
 800316e:	0018      	movs	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	b005      	add	sp, #20
 8003174:	bd90      	pop	{r4, r7, pc}

08003176 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8003176:	b590      	push	{r4, r7, lr}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 8003180:	2408      	movs	r4, #8
 8003182:	193a      	adds	r2, r7, r4
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	2303      	movs	r3, #3
 8003188:	2128      	movs	r1, #40	; 0x28
 800318a:	f7ff ff0c 	bl	8002fa6 <lps22hb_read_reg>
 800318e:	0003      	movs	r3, r0
 8003190:	60fb      	str	r3, [r7, #12]
  *buff = reg[2];
 8003192:	0021      	movs	r1, r4
 8003194:	187b      	adds	r3, r7, r1
 8003196:	789b      	ldrb	r3, [r3, #2]
 8003198:	001a      	movs	r2, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	187a      	adds	r2, r7, r1
 80031a6:	7852      	ldrb	r2, [r2, #1]
 80031a8:	189a      	adds	r2, r3, r2
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	187a      	adds	r2, r7, r1
 80031b6:	7812      	ldrb	r2, [r2, #0]
 80031b8:	189a      	adds	r2, r3, r2
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	021a      	lsls	r2, r3, #8
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	601a      	str	r2, [r3, #0]

  return ret;
 80031c8:	68fb      	ldr	r3, [r7, #12]
}
 80031ca:	0018      	movs	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b005      	add	sp, #20
 80031d0:	bd90      	pop	{r4, r7, pc}

080031d2 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80031d2:	b590      	push	{r4, r7, lr}
 80031d4:	b085      	sub	sp, #20
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 80031dc:	2408      	movs	r4, #8
 80031de:	193a      	adds	r2, r7, r4
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	2302      	movs	r3, #2
 80031e4:	212b      	movs	r1, #43	; 0x2b
 80031e6:	f7ff fede 	bl	8002fa6 <lps22hb_read_reg>
 80031ea:	0003      	movs	r3, r0
 80031ec:	60fb      	str	r3, [r7, #12]
  *buff = reg[1];
 80031ee:	0021      	movs	r1, r4
 80031f0:	187b      	adds	r3, r7, r1
 80031f2:	785b      	ldrb	r3, [r3, #1]
 80031f4:	b21a      	sxth	r2, r3
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2200      	movs	r2, #0
 80031fe:	5e9b      	ldrsh	r3, [r3, r2]
 8003200:	b29b      	uxth	r3, r3
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	b29a      	uxth	r2, r3
 8003206:	187b      	adds	r3, r7, r1
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	18d3      	adds	r3, r2, r3
 800320e:	b29b      	uxth	r3, r3
 8003210:	b21a      	sxth	r2, r3
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	801a      	strh	r2, [r3, #0]

  return ret;
 8003216:	68fb      	ldr	r3, [r7, #12]
}
 8003218:	0018      	movs	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	b005      	add	sp, #20
 800321e:	bd90      	pop	{r4, r7, pc}

08003220 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	2301      	movs	r3, #1
 8003230:	210f      	movs	r1, #15
 8003232:	f7ff feb8 	bl	8002fa6 <lps22hb_read_reg>
 8003236:	0003      	movs	r3, r0
 8003238:	60fb      	str	r3, [r7, #12]

  return ret;
 800323a:	68fb      	ldr	r3, [r7, #12]
}
 800323c:	0018      	movs	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	b004      	add	sp, #16
 8003242:	bd80      	pop	{r7, pc}

08003244 <lps22hb_reset_set>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	000a      	movs	r2, r1
 800324e:	1cfb      	adds	r3, r7, #3
 8003250:	701a      	strb	r2, [r3, #0]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003252:	2408      	movs	r4, #8
 8003254:	193a      	adds	r2, r7, r4
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	2301      	movs	r3, #1
 800325a:	2111      	movs	r1, #17
 800325c:	f7ff fea3 	bl	8002fa6 <lps22hb_read_reg>
 8003260:	0003      	movs	r3, r0
 8003262:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d117      	bne.n	800329a <lps22hb_reset_set+0x56>
  {
    ctrl_reg2.swreset = val;
 800326a:	1cfb      	adds	r3, r7, #3
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2201      	movs	r2, #1
 8003270:	4013      	ands	r3, r2
 8003272:	b2da      	uxtb	r2, r3
 8003274:	193b      	adds	r3, r7, r4
 8003276:	2101      	movs	r1, #1
 8003278:	400a      	ands	r2, r1
 800327a:	0090      	lsls	r0, r2, #2
 800327c:	781a      	ldrb	r2, [r3, #0]
 800327e:	2104      	movs	r1, #4
 8003280:	438a      	bics	r2, r1
 8003282:	1c11      	adds	r1, r2, #0
 8003284:	1c02      	adds	r2, r0, #0
 8003286:	430a      	orrs	r2, r1
 8003288:	701a      	strb	r2, [r3, #0]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800328a:	193a      	adds	r2, r7, r4
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	2301      	movs	r3, #1
 8003290:	2111      	movs	r1, #17
 8003292:	f7ff fea9 	bl	8002fe8 <lps22hb_write_reg>
 8003296:	0003      	movs	r3, r0
 8003298:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800329a:	68fb      	ldr	r3, [r7, #12]
}
 800329c:	0018      	movs	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	b005      	add	sp, #20
 80032a2:	bd90      	pop	{r4, r7, pc}

080032a4 <lps22hb_reset_get>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80032a4:	b590      	push	{r4, r7, lr}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80032ae:	2408      	movs	r4, #8
 80032b0:	193a      	adds	r2, r7, r4
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	2301      	movs	r3, #1
 80032b6:	2111      	movs	r1, #17
 80032b8:	f7ff fe75 	bl	8002fa6 <lps22hb_read_reg>
 80032bc:	0003      	movs	r3, r0
 80032be:	60fb      	str	r3, [r7, #12]
  *val = ctrl_reg2.swreset;
 80032c0:	193b      	adds	r3, r7, r4
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	075b      	lsls	r3, r3, #29
 80032c6:	0fdb      	lsrs	r3, r3, #31
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	001a      	movs	r2, r3
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	701a      	strb	r2, [r3, #0]

  return ret;
 80032d0:	68fb      	ldr	r3, [r7, #12]
}
 80032d2:	0018      	movs	r0, r3
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b005      	add	sp, #20
 80032d8:	bd90      	pop	{r4, r7, pc}
	...

080032dc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032e2:	1dfb      	adds	r3, r7, #7
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_Init+0x3c>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <HAL_Init+0x3c>)
 80032ee:	2140      	movs	r1, #64	; 0x40
 80032f0:	430a      	orrs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032f4:	2000      	movs	r0, #0
 80032f6:	f000 f811 	bl	800331c <HAL_InitTick>
 80032fa:	1e03      	subs	r3, r0, #0
 80032fc:	d003      	beq.n	8003306 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80032fe:	1dfb      	adds	r3, r7, #7
 8003300:	2201      	movs	r2, #1
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	e001      	b.n	800330a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003306:	f7ff fcaf 	bl	8002c68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800330a:	1dfb      	adds	r3, r7, #7
 800330c:	781b      	ldrb	r3, [r3, #0]
}
 800330e:	0018      	movs	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	b002      	add	sp, #8
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	40022000 	.word	0x40022000

0800331c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003324:	4b14      	ldr	r3, [pc, #80]	; (8003378 <HAL_InitTick+0x5c>)
 8003326:	681c      	ldr	r4, [r3, #0]
 8003328:	4b14      	ldr	r3, [pc, #80]	; (800337c <HAL_InitTick+0x60>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	0019      	movs	r1, r3
 800332e:	23fa      	movs	r3, #250	; 0xfa
 8003330:	0098      	lsls	r0, r3, #2
 8003332:	f7fc ff05 	bl	8000140 <__udivsi3>
 8003336:	0003      	movs	r3, r0
 8003338:	0019      	movs	r1, r3
 800333a:	0020      	movs	r0, r4
 800333c:	f7fc ff00 	bl	8000140 <__udivsi3>
 8003340:	0003      	movs	r3, r0
 8003342:	0018      	movs	r0, r3
 8003344:	f000 f905 	bl	8003552 <HAL_SYSTICK_Config>
 8003348:	1e03      	subs	r3, r0, #0
 800334a:	d001      	beq.n	8003350 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e00f      	b.n	8003370 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b03      	cmp	r3, #3
 8003354:	d80b      	bhi.n	800336e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	2301      	movs	r3, #1
 800335a:	425b      	negs	r3, r3
 800335c:	2200      	movs	r2, #0
 800335e:	0018      	movs	r0, r3
 8003360:	f000 f8e2 	bl	8003528 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_InitTick+0x64>)
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	e000      	b.n	8003370 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
}
 8003370:	0018      	movs	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	b003      	add	sp, #12
 8003376:	bd90      	pop	{r4, r7, pc}
 8003378:	20000004 	.word	0x20000004
 800337c:	2000000c 	.word	0x2000000c
 8003380:	20000008 	.word	0x20000008

08003384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <HAL_IncTick+0x1c>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	001a      	movs	r2, r3
 800338e:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <HAL_IncTick+0x20>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	18d2      	adds	r2, r2, r3
 8003394:	4b03      	ldr	r3, [pc, #12]	; (80033a4 <HAL_IncTick+0x20>)
 8003396:	601a      	str	r2, [r3, #0]
}
 8003398:	46c0      	nop			; (mov r8, r8)
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	2000000c 	.word	0x2000000c
 80033a4:	20000700 	.word	0x20000700

080033a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  return uwTick;
 80033ac:	4b02      	ldr	r3, [pc, #8]	; (80033b8 <HAL_GetTick+0x10>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	0018      	movs	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	20000700 	.word	0x20000700

080033bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033c4:	f7ff fff0 	bl	80033a8 <HAL_GetTick>
 80033c8:	0003      	movs	r3, r0
 80033ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	3301      	adds	r3, #1
 80033d4:	d005      	beq.n	80033e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <HAL_Delay+0x44>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	001a      	movs	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	189b      	adds	r3, r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	f7ff ffe0 	bl	80033a8 <HAL_GetTick>
 80033e8:	0002      	movs	r2, r0
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d8f7      	bhi.n	80033e4 <HAL_Delay+0x28>
  {
  }
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b004      	add	sp, #16
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	2000000c 	.word	0x2000000c

08003404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	0002      	movs	r2, r0
 800340c:	6039      	str	r1, [r7, #0]
 800340e:	1dfb      	adds	r3, r7, #7
 8003410:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003412:	1dfb      	adds	r3, r7, #7
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b7f      	cmp	r3, #127	; 0x7f
 8003418:	d828      	bhi.n	800346c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800341a:	4a2f      	ldr	r2, [pc, #188]	; (80034d8 <__NVIC_SetPriority+0xd4>)
 800341c:	1dfb      	adds	r3, r7, #7
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	b25b      	sxtb	r3, r3
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	33c0      	adds	r3, #192	; 0xc0
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	589b      	ldr	r3, [r3, r2]
 800342a:	1dfa      	adds	r2, r7, #7
 800342c:	7812      	ldrb	r2, [r2, #0]
 800342e:	0011      	movs	r1, r2
 8003430:	2203      	movs	r2, #3
 8003432:	400a      	ands	r2, r1
 8003434:	00d2      	lsls	r2, r2, #3
 8003436:	21ff      	movs	r1, #255	; 0xff
 8003438:	4091      	lsls	r1, r2
 800343a:	000a      	movs	r2, r1
 800343c:	43d2      	mvns	r2, r2
 800343e:	401a      	ands	r2, r3
 8003440:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	019b      	lsls	r3, r3, #6
 8003446:	22ff      	movs	r2, #255	; 0xff
 8003448:	401a      	ands	r2, r3
 800344a:	1dfb      	adds	r3, r7, #7
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	0018      	movs	r0, r3
 8003450:	2303      	movs	r3, #3
 8003452:	4003      	ands	r3, r0
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003458:	481f      	ldr	r0, [pc, #124]	; (80034d8 <__NVIC_SetPriority+0xd4>)
 800345a:	1dfb      	adds	r3, r7, #7
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	b25b      	sxtb	r3, r3
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	430a      	orrs	r2, r1
 8003464:	33c0      	adds	r3, #192	; 0xc0
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800346a:	e031      	b.n	80034d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800346c:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <__NVIC_SetPriority+0xd8>)
 800346e:	1dfb      	adds	r3, r7, #7
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	0019      	movs	r1, r3
 8003474:	230f      	movs	r3, #15
 8003476:	400b      	ands	r3, r1
 8003478:	3b08      	subs	r3, #8
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	3306      	adds	r3, #6
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	18d3      	adds	r3, r2, r3
 8003482:	3304      	adds	r3, #4
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	1dfa      	adds	r2, r7, #7
 8003488:	7812      	ldrb	r2, [r2, #0]
 800348a:	0011      	movs	r1, r2
 800348c:	2203      	movs	r2, #3
 800348e:	400a      	ands	r2, r1
 8003490:	00d2      	lsls	r2, r2, #3
 8003492:	21ff      	movs	r1, #255	; 0xff
 8003494:	4091      	lsls	r1, r2
 8003496:	000a      	movs	r2, r1
 8003498:	43d2      	mvns	r2, r2
 800349a:	401a      	ands	r2, r3
 800349c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	019b      	lsls	r3, r3, #6
 80034a2:	22ff      	movs	r2, #255	; 0xff
 80034a4:	401a      	ands	r2, r3
 80034a6:	1dfb      	adds	r3, r7, #7
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	0018      	movs	r0, r3
 80034ac:	2303      	movs	r3, #3
 80034ae:	4003      	ands	r3, r0
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034b4:	4809      	ldr	r0, [pc, #36]	; (80034dc <__NVIC_SetPriority+0xd8>)
 80034b6:	1dfb      	adds	r3, r7, #7
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	001c      	movs	r4, r3
 80034bc:	230f      	movs	r3, #15
 80034be:	4023      	ands	r3, r4
 80034c0:	3b08      	subs	r3, #8
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	430a      	orrs	r2, r1
 80034c6:	3306      	adds	r3, #6
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	18c3      	adds	r3, r0, r3
 80034cc:	3304      	adds	r3, #4
 80034ce:	601a      	str	r2, [r3, #0]
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b003      	add	sp, #12
 80034d6:	bd90      	pop	{r4, r7, pc}
 80034d8:	e000e100 	.word	0xe000e100
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	1e5a      	subs	r2, r3, #1
 80034ec:	2380      	movs	r3, #128	; 0x80
 80034ee:	045b      	lsls	r3, r3, #17
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d301      	bcc.n	80034f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034f4:	2301      	movs	r3, #1
 80034f6:	e010      	b.n	800351a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f8:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <SysTick_Config+0x44>)
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	3a01      	subs	r2, #1
 80034fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003500:	2301      	movs	r3, #1
 8003502:	425b      	negs	r3, r3
 8003504:	2103      	movs	r1, #3
 8003506:	0018      	movs	r0, r3
 8003508:	f7ff ff7c 	bl	8003404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <SysTick_Config+0x44>)
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003512:	4b04      	ldr	r3, [pc, #16]	; (8003524 <SysTick_Config+0x44>)
 8003514:	2207      	movs	r2, #7
 8003516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003518:	2300      	movs	r3, #0
}
 800351a:	0018      	movs	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	b002      	add	sp, #8
 8003520:	bd80      	pop	{r7, pc}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	e000e010 	.word	0xe000e010

08003528 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	210f      	movs	r1, #15
 8003534:	187b      	adds	r3, r7, r1
 8003536:	1c02      	adds	r2, r0, #0
 8003538:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	187b      	adds	r3, r7, r1
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	b25b      	sxtb	r3, r3
 8003542:	0011      	movs	r1, r2
 8003544:	0018      	movs	r0, r3
 8003546:	f7ff ff5d 	bl	8003404 <__NVIC_SetPriority>
}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	46bd      	mov	sp, r7
 800354e:	b004      	add	sp, #16
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	0018      	movs	r0, r3
 800355e:	f7ff ffbf 	bl	80034e0 <SysTick_Config>
 8003562:	0003      	movs	r3, r0
}
 8003564:	0018      	movs	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	b002      	add	sp, #8
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800357e:	2300      	movs	r3, #0
 8003580:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003582:	e14f      	b.n	8003824 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2101      	movs	r1, #1
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4091      	lsls	r1, r2
 800358e:	000a      	movs	r2, r1
 8003590:	4013      	ands	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d100      	bne.n	800359c <HAL_GPIO_Init+0x30>
 800359a:	e140      	b.n	800381e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2203      	movs	r2, #3
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d005      	beq.n	80035b4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2203      	movs	r2, #3
 80035ae:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d130      	bne.n	8003616 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	2203      	movs	r2, #3
 80035c0:	409a      	lsls	r2, r3
 80035c2:	0013      	movs	r3, r2
 80035c4:	43da      	mvns	r2, r3
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	409a      	lsls	r2, r3
 80035d6:	0013      	movs	r3, r2
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035ea:	2201      	movs	r2, #1
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	409a      	lsls	r2, r3
 80035f0:	0013      	movs	r3, r2
 80035f2:	43da      	mvns	r2, r3
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	2201      	movs	r2, #1
 8003602:	401a      	ands	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	409a      	lsls	r2, r3
 8003608:	0013      	movs	r3, r2
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2203      	movs	r2, #3
 800361c:	4013      	ands	r3, r2
 800361e:	2b03      	cmp	r3, #3
 8003620:	d017      	beq.n	8003652 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	2203      	movs	r2, #3
 800362e:	409a      	lsls	r2, r3
 8003630:	0013      	movs	r3, r2
 8003632:	43da      	mvns	r2, r3
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4013      	ands	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	409a      	lsls	r2, r3
 8003644:	0013      	movs	r3, r2
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2203      	movs	r2, #3
 8003658:	4013      	ands	r3, r2
 800365a:	2b02      	cmp	r3, #2
 800365c:	d123      	bne.n	80036a6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	08da      	lsrs	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3208      	adds	r2, #8
 8003666:	0092      	lsls	r2, r2, #2
 8003668:	58d3      	ldr	r3, [r2, r3]
 800366a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2207      	movs	r2, #7
 8003670:	4013      	ands	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	220f      	movs	r2, #15
 8003676:	409a      	lsls	r2, r3
 8003678:	0013      	movs	r3, r2
 800367a:	43da      	mvns	r2, r3
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2107      	movs	r1, #7
 800368a:	400b      	ands	r3, r1
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	409a      	lsls	r2, r3
 8003690:	0013      	movs	r3, r2
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	08da      	lsrs	r2, r3, #3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3208      	adds	r2, #8
 80036a0:	0092      	lsls	r2, r2, #2
 80036a2:	6939      	ldr	r1, [r7, #16]
 80036a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	2203      	movs	r2, #3
 80036b2:	409a      	lsls	r2, r3
 80036b4:	0013      	movs	r3, r2
 80036b6:	43da      	mvns	r2, r3
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2203      	movs	r2, #3
 80036c4:	401a      	ands	r2, r3
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	409a      	lsls	r2, r3
 80036cc:	0013      	movs	r3, r2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	23c0      	movs	r3, #192	; 0xc0
 80036e0:	029b      	lsls	r3, r3, #10
 80036e2:	4013      	ands	r3, r2
 80036e4:	d100      	bne.n	80036e8 <HAL_GPIO_Init+0x17c>
 80036e6:	e09a      	b.n	800381e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e8:	4b54      	ldr	r3, [pc, #336]	; (800383c <HAL_GPIO_Init+0x2d0>)
 80036ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ec:	4b53      	ldr	r3, [pc, #332]	; (800383c <HAL_GPIO_Init+0x2d0>)
 80036ee:	2101      	movs	r1, #1
 80036f0:	430a      	orrs	r2, r1
 80036f2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80036f4:	4a52      	ldr	r2, [pc, #328]	; (8003840 <HAL_GPIO_Init+0x2d4>)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	089b      	lsrs	r3, r3, #2
 80036fa:	3302      	adds	r3, #2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	589b      	ldr	r3, [r3, r2]
 8003700:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2203      	movs	r2, #3
 8003706:	4013      	ands	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	220f      	movs	r2, #15
 800370c:	409a      	lsls	r2, r3
 800370e:	0013      	movs	r3, r2
 8003710:	43da      	mvns	r2, r3
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	23a0      	movs	r3, #160	; 0xa0
 800371c:	05db      	lsls	r3, r3, #23
 800371e:	429a      	cmp	r2, r3
 8003720:	d019      	beq.n	8003756 <HAL_GPIO_Init+0x1ea>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a47      	ldr	r2, [pc, #284]	; (8003844 <HAL_GPIO_Init+0x2d8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <HAL_GPIO_Init+0x1e6>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a46      	ldr	r2, [pc, #280]	; (8003848 <HAL_GPIO_Init+0x2dc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00d      	beq.n	800374e <HAL_GPIO_Init+0x1e2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a45      	ldr	r2, [pc, #276]	; (800384c <HAL_GPIO_Init+0x2e0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d007      	beq.n	800374a <HAL_GPIO_Init+0x1de>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a44      	ldr	r2, [pc, #272]	; (8003850 <HAL_GPIO_Init+0x2e4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d101      	bne.n	8003746 <HAL_GPIO_Init+0x1da>
 8003742:	2305      	movs	r3, #5
 8003744:	e008      	b.n	8003758 <HAL_GPIO_Init+0x1ec>
 8003746:	2306      	movs	r3, #6
 8003748:	e006      	b.n	8003758 <HAL_GPIO_Init+0x1ec>
 800374a:	2303      	movs	r3, #3
 800374c:	e004      	b.n	8003758 <HAL_GPIO_Init+0x1ec>
 800374e:	2302      	movs	r3, #2
 8003750:	e002      	b.n	8003758 <HAL_GPIO_Init+0x1ec>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <HAL_GPIO_Init+0x1ec>
 8003756:	2300      	movs	r3, #0
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	2103      	movs	r1, #3
 800375c:	400a      	ands	r2, r1
 800375e:	0092      	lsls	r2, r2, #2
 8003760:	4093      	lsls	r3, r2
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003768:	4935      	ldr	r1, [pc, #212]	; (8003840 <HAL_GPIO_Init+0x2d4>)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	089b      	lsrs	r3, r3, #2
 800376e:	3302      	adds	r3, #2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003776:	4b37      	ldr	r3, [pc, #220]	; (8003854 <HAL_GPIO_Init+0x2e8>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	43da      	mvns	r2, r3
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	2380      	movs	r3, #128	; 0x80
 800378c:	035b      	lsls	r3, r3, #13
 800378e:	4013      	ands	r3, r2
 8003790:	d003      	beq.n	800379a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800379a:	4b2e      	ldr	r3, [pc, #184]	; (8003854 <HAL_GPIO_Init+0x2e8>)
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80037a0:	4b2c      	ldr	r3, [pc, #176]	; (8003854 <HAL_GPIO_Init+0x2e8>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	43da      	mvns	r2, r3
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4013      	ands	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	2380      	movs	r3, #128	; 0x80
 80037b6:	039b      	lsls	r3, r3, #14
 80037b8:	4013      	ands	r3, r2
 80037ba:	d003      	beq.n	80037c4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80037c4:	4b23      	ldr	r3, [pc, #140]	; (8003854 <HAL_GPIO_Init+0x2e8>)
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80037ca:	4b22      	ldr	r3, [pc, #136]	; (8003854 <HAL_GPIO_Init+0x2e8>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	43da      	mvns	r2, r3
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4013      	ands	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	2380      	movs	r3, #128	; 0x80
 80037e0:	029b      	lsls	r3, r3, #10
 80037e2:	4013      	ands	r3, r2
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80037ee:	4b19      	ldr	r3, [pc, #100]	; (8003854 <HAL_GPIO_Init+0x2e8>)
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037f4:	4b17      	ldr	r3, [pc, #92]	; (8003854 <HAL_GPIO_Init+0x2e8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	43da      	mvns	r2, r3
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	2380      	movs	r3, #128	; 0x80
 800380a:	025b      	lsls	r3, r3, #9
 800380c:	4013      	ands	r3, r2
 800380e:	d003      	beq.n	8003818 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4313      	orrs	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003818:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <HAL_GPIO_Init+0x2e8>)
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	3301      	adds	r3, #1
 8003822:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	40da      	lsrs	r2, r3
 800382c:	1e13      	subs	r3, r2, #0
 800382e:	d000      	beq.n	8003832 <HAL_GPIO_Init+0x2c6>
 8003830:	e6a8      	b.n	8003584 <HAL_GPIO_Init+0x18>
  }
}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	46c0      	nop			; (mov r8, r8)
 8003836:	46bd      	mov	sp, r7
 8003838:	b006      	add	sp, #24
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000
 8003840:	40010000 	.word	0x40010000
 8003844:	50000400 	.word	0x50000400
 8003848:	50000800 	.word	0x50000800
 800384c:	50000c00 	.word	0x50000c00
 8003850:	50001c00 	.word	0x50001c00
 8003854:	40010400 	.word	0x40010400

08003858 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e082      	b.n	8003970 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2241      	movs	r2, #65	; 0x41
 800386e:	5c9b      	ldrb	r3, [r3, r2]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d107      	bne.n	8003886 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2240      	movs	r2, #64	; 0x40
 800387a:	2100      	movs	r1, #0
 800387c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	0018      	movs	r0, r3
 8003882:	f7ff fa05 	bl	8002c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2241      	movs	r2, #65	; 0x41
 800388a:	2124      	movs	r1, #36	; 0x24
 800388c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2101      	movs	r1, #1
 800389a:	438a      	bics	r2, r1
 800389c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4934      	ldr	r1, [pc, #208]	; (8003978 <HAL_I2C_Init+0x120>)
 80038a8:	400a      	ands	r2, r1
 80038aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4931      	ldr	r1, [pc, #196]	; (800397c <HAL_I2C_Init+0x124>)
 80038b8:	400a      	ands	r2, r1
 80038ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d108      	bne.n	80038d6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2180      	movs	r1, #128	; 0x80
 80038ce:	0209      	lsls	r1, r1, #8
 80038d0:	430a      	orrs	r2, r1
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	e007      	b.n	80038e6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2184      	movs	r1, #132	; 0x84
 80038e0:	0209      	lsls	r1, r1, #8
 80038e2:	430a      	orrs	r2, r1
 80038e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d104      	bne.n	80038f8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2280      	movs	r2, #128	; 0x80
 80038f4:	0112      	lsls	r2, r2, #4
 80038f6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	491f      	ldr	r1, [pc, #124]	; (8003980 <HAL_I2C_Init+0x128>)
 8003904:	430a      	orrs	r2, r1
 8003906:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	491a      	ldr	r1, [pc, #104]	; (800397c <HAL_I2C_Init+0x124>)
 8003914:	400a      	ands	r2, r1
 8003916:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	431a      	orrs	r2, r3
 8003922:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69d9      	ldr	r1, [r3, #28]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1a      	ldr	r2, [r3, #32]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2101      	movs	r1, #1
 800394e:	430a      	orrs	r2, r1
 8003950:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2241      	movs	r2, #65	; 0x41
 800395c:	2120      	movs	r1, #32
 800395e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2242      	movs	r2, #66	; 0x42
 800396a:	2100      	movs	r1, #0
 800396c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	b002      	add	sp, #8
 8003976:	bd80      	pop	{r7, pc}
 8003978:	f0ffffff 	.word	0xf0ffffff
 800397c:	ffff7fff 	.word	0xffff7fff
 8003980:	02008000 	.word	0x02008000

08003984 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003984:	b590      	push	{r4, r7, lr}
 8003986:	b089      	sub	sp, #36	; 0x24
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	000c      	movs	r4, r1
 800398e:	0010      	movs	r0, r2
 8003990:	0019      	movs	r1, r3
 8003992:	230a      	movs	r3, #10
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	1c22      	adds	r2, r4, #0
 8003998:	801a      	strh	r2, [r3, #0]
 800399a:	2308      	movs	r3, #8
 800399c:	18fb      	adds	r3, r7, r3
 800399e:	1c02      	adds	r2, r0, #0
 80039a0:	801a      	strh	r2, [r3, #0]
 80039a2:	1dbb      	adds	r3, r7, #6
 80039a4:	1c0a      	adds	r2, r1, #0
 80039a6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2241      	movs	r2, #65	; 0x41
 80039ac:	5c9b      	ldrb	r3, [r3, r2]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d000      	beq.n	80039b6 <HAL_I2C_Mem_Write+0x32>
 80039b4:	e10c      	b.n	8003bd0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d004      	beq.n	80039c6 <HAL_I2C_Mem_Write+0x42>
 80039bc:	232c      	movs	r3, #44	; 0x2c
 80039be:	18fb      	adds	r3, r7, r3
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d105      	bne.n	80039d2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	0092      	lsls	r2, r2, #2
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e0ff      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2240      	movs	r2, #64	; 0x40
 80039d6:	5c9b      	ldrb	r3, [r3, r2]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_I2C_Mem_Write+0x5c>
 80039dc:	2302      	movs	r3, #2
 80039de:	e0f8      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x24e>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2240      	movs	r2, #64	; 0x40
 80039e4:	2101      	movs	r1, #1
 80039e6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039e8:	f7ff fcde 	bl	80033a8 <HAL_GetTick>
 80039ec:	0003      	movs	r3, r0
 80039ee:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039f0:	2380      	movs	r3, #128	; 0x80
 80039f2:	0219      	lsls	r1, r3, #8
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	2319      	movs	r3, #25
 80039fc:	2201      	movs	r2, #1
 80039fe:	f000 fc25 	bl	800424c <I2C_WaitOnFlagUntilTimeout>
 8003a02:	1e03      	subs	r3, r0, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e0e3      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2241      	movs	r2, #65	; 0x41
 8003a0e:	2121      	movs	r1, #33	; 0x21
 8003a10:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2242      	movs	r2, #66	; 0x42
 8003a16:	2140      	movs	r1, #64	; 0x40
 8003a18:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	222c      	movs	r2, #44	; 0x2c
 8003a2a:	18ba      	adds	r2, r7, r2
 8003a2c:	8812      	ldrh	r2, [r2, #0]
 8003a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a36:	1dbb      	adds	r3, r7, #6
 8003a38:	881c      	ldrh	r4, [r3, #0]
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	881a      	ldrh	r2, [r3, #0]
 8003a40:	230a      	movs	r3, #10
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	8819      	ldrh	r1, [r3, #0]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	0023      	movs	r3, r4
 8003a52:	f000 fb13 	bl	800407c <I2C_RequestMemoryWrite>
 8003a56:	1e03      	subs	r3, r0, #0
 8003a58:	d005      	beq.n	8003a66 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2240      	movs	r2, #64	; 0x40
 8003a5e:	2100      	movs	r1, #0
 8003a60:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e0b5      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2bff      	cmp	r3, #255	; 0xff
 8003a6e:	d911      	bls.n	8003a94 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	22ff      	movs	r2, #255	; 0xff
 8003a74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	045c      	lsls	r4, r3, #17
 8003a80:	230a      	movs	r3, #10
 8003a82:	18fb      	adds	r3, r7, r3
 8003a84:	8819      	ldrh	r1, [r3, #0]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	0023      	movs	r3, r4
 8003a8e:	f000 fdb5 	bl	80045fc <I2C_TransferConfig>
 8003a92:	e012      	b.n	8003aba <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	2380      	movs	r3, #128	; 0x80
 8003aa6:	049c      	lsls	r4, r3, #18
 8003aa8:	230a      	movs	r3, #10
 8003aaa:	18fb      	adds	r3, r7, r3
 8003aac:	8819      	ldrh	r1, [r3, #0]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	0023      	movs	r3, r4
 8003ab6:	f000 fda1 	bl	80045fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f000 fc11 	bl	80042e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ac6:	1e03      	subs	r3, r0, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e081      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	781a      	ldrb	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d03a      	beq.n	8003b7e <HAL_I2C_Mem_Write+0x1fa>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d136      	bne.n	8003b7e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	0013      	movs	r3, r2
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2180      	movs	r1, #128	; 0x80
 8003b1e:	f000 fb95 	bl	800424c <I2C_WaitOnFlagUntilTimeout>
 8003b22:	1e03      	subs	r3, r0, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e053      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2bff      	cmp	r3, #255	; 0xff
 8003b32:	d911      	bls.n	8003b58 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	22ff      	movs	r2, #255	; 0xff
 8003b38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	045c      	lsls	r4, r3, #17
 8003b44:	230a      	movs	r3, #10
 8003b46:	18fb      	adds	r3, r7, r3
 8003b48:	8819      	ldrh	r1, [r3, #0]
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	0023      	movs	r3, r4
 8003b52:	f000 fd53 	bl	80045fc <I2C_TransferConfig>
 8003b56:	e012      	b.n	8003b7e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	049c      	lsls	r4, r3, #18
 8003b6c:	230a      	movs	r3, #10
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	8819      	ldrh	r1, [r3, #0]
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	2300      	movs	r3, #0
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	0023      	movs	r3, r4
 8003b7a:	f000 fd3f 	bl	80045fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d198      	bne.n	8003aba <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f000 fbf0 	bl	8004374 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b94:	1e03      	subs	r3, r0, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e01a      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	490b      	ldr	r1, [pc, #44]	; (8003bdc <HAL_I2C_Mem_Write+0x258>)
 8003bb0:	400a      	ands	r2, r1
 8003bb2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2241      	movs	r2, #65	; 0x41
 8003bb8:	2120      	movs	r1, #32
 8003bba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2242      	movs	r2, #66	; 0x42
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2240      	movs	r2, #64	; 0x40
 8003bc8:	2100      	movs	r1, #0
 8003bca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e000      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003bd0:	2302      	movs	r3, #2
  }
}
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b007      	add	sp, #28
 8003bd8:	bd90      	pop	{r4, r7, pc}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	fe00e800 	.word	0xfe00e800

08003be0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be0:	b590      	push	{r4, r7, lr}
 8003be2:	b089      	sub	sp, #36	; 0x24
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	000c      	movs	r4, r1
 8003bea:	0010      	movs	r0, r2
 8003bec:	0019      	movs	r1, r3
 8003bee:	230a      	movs	r3, #10
 8003bf0:	18fb      	adds	r3, r7, r3
 8003bf2:	1c22      	adds	r2, r4, #0
 8003bf4:	801a      	strh	r2, [r3, #0]
 8003bf6:	2308      	movs	r3, #8
 8003bf8:	18fb      	adds	r3, r7, r3
 8003bfa:	1c02      	adds	r2, r0, #0
 8003bfc:	801a      	strh	r2, [r3, #0]
 8003bfe:	1dbb      	adds	r3, r7, #6
 8003c00:	1c0a      	adds	r2, r1, #0
 8003c02:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2241      	movs	r2, #65	; 0x41
 8003c08:	5c9b      	ldrb	r3, [r3, r2]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d000      	beq.n	8003c12 <HAL_I2C_Mem_Read+0x32>
 8003c10:	e110      	b.n	8003e34 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d004      	beq.n	8003c22 <HAL_I2C_Mem_Read+0x42>
 8003c18:	232c      	movs	r3, #44	; 0x2c
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d105      	bne.n	8003c2e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2280      	movs	r2, #128	; 0x80
 8003c26:	0092      	lsls	r2, r2, #2
 8003c28:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e103      	b.n	8003e36 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2240      	movs	r2, #64	; 0x40
 8003c32:	5c9b      	ldrb	r3, [r3, r2]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_I2C_Mem_Read+0x5c>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e0fc      	b.n	8003e36 <HAL_I2C_Mem_Read+0x256>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2240      	movs	r2, #64	; 0x40
 8003c40:	2101      	movs	r1, #1
 8003c42:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c44:	f7ff fbb0 	bl	80033a8 <HAL_GetTick>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	0219      	lsls	r1, r3, #8
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	2319      	movs	r3, #25
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f000 faf7 	bl	800424c <I2C_WaitOnFlagUntilTimeout>
 8003c5e:	1e03      	subs	r3, r0, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e0e7      	b.n	8003e36 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2241      	movs	r2, #65	; 0x41
 8003c6a:	2122      	movs	r1, #34	; 0x22
 8003c6c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2242      	movs	r2, #66	; 0x42
 8003c72:	2140      	movs	r1, #64	; 0x40
 8003c74:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	222c      	movs	r2, #44	; 0x2c
 8003c86:	18ba      	adds	r2, r7, r2
 8003c88:	8812      	ldrh	r2, [r2, #0]
 8003c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c92:	1dbb      	adds	r3, r7, #6
 8003c94:	881c      	ldrh	r4, [r3, #0]
 8003c96:	2308      	movs	r3, #8
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	881a      	ldrh	r2, [r3, #0]
 8003c9c:	230a      	movs	r3, #10
 8003c9e:	18fb      	adds	r3, r7, r3
 8003ca0:	8819      	ldrh	r1, [r3, #0]
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	9301      	str	r3, [sp, #4]
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	0023      	movs	r3, r4
 8003cae:	f000 fa49 	bl	8004144 <I2C_RequestMemoryRead>
 8003cb2:	1e03      	subs	r3, r0, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2240      	movs	r2, #64	; 0x40
 8003cba:	2100      	movs	r1, #0
 8003cbc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e0b9      	b.n	8003e36 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2bff      	cmp	r3, #255	; 0xff
 8003cca:	d911      	bls.n	8003cf0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	22ff      	movs	r2, #255	; 0xff
 8003cd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	2380      	movs	r3, #128	; 0x80
 8003cda:	045c      	lsls	r4, r3, #17
 8003cdc:	230a      	movs	r3, #10
 8003cde:	18fb      	adds	r3, r7, r3
 8003ce0:	8819      	ldrh	r1, [r3, #0]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	4b56      	ldr	r3, [pc, #344]	; (8003e40 <HAL_I2C_Mem_Read+0x260>)
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	0023      	movs	r3, r4
 8003cea:	f000 fc87 	bl	80045fc <I2C_TransferConfig>
 8003cee:	e012      	b.n	8003d16 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	2380      	movs	r3, #128	; 0x80
 8003d02:	049c      	lsls	r4, r3, #18
 8003d04:	230a      	movs	r3, #10
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	8819      	ldrh	r1, [r3, #0]
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	4b4c      	ldr	r3, [pc, #304]	; (8003e40 <HAL_I2C_Mem_Read+0x260>)
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	0023      	movs	r3, r4
 8003d12:	f000 fc73 	bl	80045fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	0013      	movs	r3, r2
 8003d20:	2200      	movs	r2, #0
 8003d22:	2104      	movs	r1, #4
 8003d24:	f000 fa92 	bl	800424c <I2C_WaitOnFlagUntilTimeout>
 8003d28:	1e03      	subs	r3, r0, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e082      	b.n	8003e36 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d03a      	beq.n	8003de2 <HAL_I2C_Mem_Read+0x202>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d136      	bne.n	8003de2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	0013      	movs	r3, r2
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2180      	movs	r1, #128	; 0x80
 8003d82:	f000 fa63 	bl	800424c <I2C_WaitOnFlagUntilTimeout>
 8003d86:	1e03      	subs	r3, r0, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e053      	b.n	8003e36 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2bff      	cmp	r3, #255	; 0xff
 8003d96:	d911      	bls.n	8003dbc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	22ff      	movs	r2, #255	; 0xff
 8003d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	045c      	lsls	r4, r3, #17
 8003da8:	230a      	movs	r3, #10
 8003daa:	18fb      	adds	r3, r7, r3
 8003dac:	8819      	ldrh	r1, [r3, #0]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	2300      	movs	r3, #0
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	0023      	movs	r3, r4
 8003db6:	f000 fc21 	bl	80045fc <I2C_TransferConfig>
 8003dba:	e012      	b.n	8003de2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	049c      	lsls	r4, r3, #18
 8003dd0:	230a      	movs	r3, #10
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	8819      	ldrh	r1, [r3, #0]
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	0023      	movs	r3, r4
 8003dde:	f000 fc0d 	bl	80045fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d194      	bne.n	8003d16 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	0018      	movs	r0, r3
 8003df4:	f000 fabe 	bl	8004374 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003df8:	1e03      	subs	r3, r0, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e01a      	b.n	8003e36 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2220      	movs	r2, #32
 8003e06:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	490c      	ldr	r1, [pc, #48]	; (8003e44 <HAL_I2C_Mem_Read+0x264>)
 8003e14:	400a      	ands	r2, r1
 8003e16:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2241      	movs	r2, #65	; 0x41
 8003e1c:	2120      	movs	r1, #32
 8003e1e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2242      	movs	r2, #66	; 0x42
 8003e24:	2100      	movs	r1, #0
 8003e26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2240      	movs	r2, #64	; 0x40
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	e000      	b.n	8003e36 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003e34:	2302      	movs	r3, #2
  }
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b007      	add	sp, #28
 8003e3c:	bd90      	pop	{r4, r7, pc}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	80002400 	.word	0x80002400
 8003e44:	fe00e800 	.word	0xfe00e800

08003e48 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08a      	sub	sp, #40	; 0x28
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	607a      	str	r2, [r7, #4]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	230a      	movs	r3, #10
 8003e56:	18fb      	adds	r3, r7, r3
 8003e58:	1c0a      	adds	r2, r1, #0
 8003e5a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2241      	movs	r2, #65	; 0x41
 8003e64:	5c9b      	ldrb	r3, [r3, r2]
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d000      	beq.n	8003e6e <HAL_I2C_IsDeviceReady+0x26>
 8003e6c:	e0fd      	b.n	800406a <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699a      	ldr	r2, [r3, #24]
 8003e74:	2380      	movs	r3, #128	; 0x80
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	401a      	ands	r2, r3
 8003e7a:	2380      	movs	r3, #128	; 0x80
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d101      	bne.n	8003e86 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8003e82:	2302      	movs	r3, #2
 8003e84:	e0f2      	b.n	800406c <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2240      	movs	r2, #64	; 0x40
 8003e8a:	5c9b      	ldrb	r3, [r3, r2]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_I2C_IsDeviceReady+0x4c>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e0eb      	b.n	800406c <HAL_I2C_IsDeviceReady+0x224>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2240      	movs	r2, #64	; 0x40
 8003e98:	2101      	movs	r1, #1
 8003e9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2241      	movs	r2, #65	; 0x41
 8003ea0:	2124      	movs	r1, #36	; 0x24
 8003ea2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d107      	bne.n	8003ec2 <HAL_I2C_IsDeviceReady+0x7a>
 8003eb2:	230a      	movs	r3, #10
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	059b      	lsls	r3, r3, #22
 8003eba:	0d9b      	lsrs	r3, r3, #22
 8003ebc:	4a6d      	ldr	r2, [pc, #436]	; (8004074 <HAL_I2C_IsDeviceReady+0x22c>)
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	e006      	b.n	8003ed0 <HAL_I2C_IsDeviceReady+0x88>
 8003ec2:	230a      	movs	r3, #10
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	059b      	lsls	r3, r3, #22
 8003eca:	0d9b      	lsrs	r3, r3, #22
 8003ecc:	4a6a      	ldr	r2, [pc, #424]	; (8004078 <HAL_I2C_IsDeviceReady+0x230>)
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003ed6:	f7ff fa67 	bl	80033a8 <HAL_GetTick>
 8003eda:	0003      	movs	r3, r0
 8003edc:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	3b20      	subs	r3, #32
 8003eea:	425a      	negs	r2, r3
 8003eec:	4153      	adcs	r3, r2
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	231f      	movs	r3, #31
 8003ef2:	18fb      	adds	r3, r7, r3
 8003ef4:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	2210      	movs	r2, #16
 8003efe:	4013      	ands	r3, r2
 8003f00:	3b10      	subs	r3, #16
 8003f02:	425a      	negs	r2, r3
 8003f04:	4153      	adcs	r3, r2
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	231e      	movs	r3, #30
 8003f0a:	18fb      	adds	r3, r7, r3
 8003f0c:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003f0e:	e035      	b.n	8003f7c <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	3301      	adds	r3, #1
 8003f14:	d01a      	beq.n	8003f4c <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f16:	f7ff fa47 	bl	80033a8 <HAL_GetTick>
 8003f1a:	0002      	movs	r2, r0
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d302      	bcc.n	8003f2c <HAL_I2C_IsDeviceReady+0xe4>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10f      	bne.n	8003f4c <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2241      	movs	r2, #65	; 0x41
 8003f30:	2120      	movs	r1, #32
 8003f32:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	2220      	movs	r2, #32
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2240      	movs	r2, #64	; 0x40
 8003f44:	2100      	movs	r1, #0
 8003f46:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e08f      	b.n	800406c <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	2220      	movs	r2, #32
 8003f54:	4013      	ands	r3, r2
 8003f56:	3b20      	subs	r3, #32
 8003f58:	425a      	negs	r2, r3
 8003f5a:	4153      	adcs	r3, r2
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	231f      	movs	r3, #31
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2210      	movs	r2, #16
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	3b10      	subs	r3, #16
 8003f70:	425a      	negs	r2, r3
 8003f72:	4153      	adcs	r3, r2
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	231e      	movs	r3, #30
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003f7c:	231f      	movs	r3, #31
 8003f7e:	18fb      	adds	r3, r7, r3
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d104      	bne.n	8003f90 <HAL_I2C_IsDeviceReady+0x148>
 8003f86:	231e      	movs	r3, #30
 8003f88:	18fb      	adds	r3, r7, r3
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0bf      	beq.n	8003f10 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2210      	movs	r2, #16
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b10      	cmp	r3, #16
 8003f9c:	d01a      	beq.n	8003fd4 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	0013      	movs	r3, r2
 8003fa8:	2200      	movs	r2, #0
 8003faa:	2120      	movs	r1, #32
 8003fac:	f000 f94e 	bl	800424c <I2C_WaitOnFlagUntilTimeout>
 8003fb0:	1e03      	subs	r3, r0, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e059      	b.n	800406c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2241      	movs	r2, #65	; 0x41
 8003fc4:	2120      	movs	r1, #32
 8003fc6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2240      	movs	r2, #64	; 0x40
 8003fcc:	2100      	movs	r1, #0
 8003fce:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e04b      	b.n	800406c <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	0013      	movs	r3, r2
 8003fde:	2200      	movs	r2, #0
 8003fe0:	2120      	movs	r1, #32
 8003fe2:	f000 f933 	bl	800424c <I2C_WaitOnFlagUntilTimeout>
 8003fe6:	1e03      	subs	r3, r0, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e03e      	b.n	800406c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2210      	movs	r2, #16
 8003ff4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	429a      	cmp	r2, r3
 8004004:	d119      	bne.n	800403a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2180      	movs	r1, #128	; 0x80
 8004012:	01c9      	lsls	r1, r1, #7
 8004014:	430a      	orrs	r2, r1
 8004016:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	0013      	movs	r3, r2
 8004022:	2200      	movs	r2, #0
 8004024:	2120      	movs	r1, #32
 8004026:	f000 f911 	bl	800424c <I2C_WaitOnFlagUntilTimeout>
 800402a:	1e03      	subs	r3, r0, #0
 800402c:	d001      	beq.n	8004032 <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e01c      	b.n	800406c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2220      	movs	r2, #32
 8004038:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	3301      	adds	r3, #1
 800403e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	d900      	bls.n	800404a <HAL_I2C_IsDeviceReady+0x202>
 8004048:	e72f      	b.n	8003eaa <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2241      	movs	r2, #65	; 0x41
 800404e:	2120      	movs	r1, #32
 8004050:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	2220      	movs	r2, #32
 8004058:	431a      	orrs	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2240      	movs	r2, #64	; 0x40
 8004062:	2100      	movs	r1, #0
 8004064:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 800406a:	2302      	movs	r3, #2
  }
}
 800406c:	0018      	movs	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	b008      	add	sp, #32
 8004072:	bd80      	pop	{r7, pc}
 8004074:	02002000 	.word	0x02002000
 8004078:	02002800 	.word	0x02002800

0800407c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800407c:	b5b0      	push	{r4, r5, r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af02      	add	r7, sp, #8
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	000c      	movs	r4, r1
 8004086:	0010      	movs	r0, r2
 8004088:	0019      	movs	r1, r3
 800408a:	250a      	movs	r5, #10
 800408c:	197b      	adds	r3, r7, r5
 800408e:	1c22      	adds	r2, r4, #0
 8004090:	801a      	strh	r2, [r3, #0]
 8004092:	2308      	movs	r3, #8
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	1c02      	adds	r2, r0, #0
 8004098:	801a      	strh	r2, [r3, #0]
 800409a:	1dbb      	adds	r3, r7, #6
 800409c:	1c0a      	adds	r2, r1, #0
 800409e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80040a0:	1dbb      	adds	r3, r7, #6
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	045c      	lsls	r4, r3, #17
 80040aa:	197b      	adds	r3, r7, r5
 80040ac:	8819      	ldrh	r1, [r3, #0]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	4b23      	ldr	r3, [pc, #140]	; (8004140 <I2C_RequestMemoryWrite+0xc4>)
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	0023      	movs	r3, r4
 80040b6:	f000 faa1 	bl	80045fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040bc:	6a39      	ldr	r1, [r7, #32]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	0018      	movs	r0, r3
 80040c2:	f000 f911 	bl	80042e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80040c6:	1e03      	subs	r3, r0, #0
 80040c8:	d001      	beq.n	80040ce <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e033      	b.n	8004136 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040ce:	1dbb      	adds	r3, r7, #6
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d107      	bne.n	80040e6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040d6:	2308      	movs	r3, #8
 80040d8:	18fb      	adds	r3, r7, r3
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	629a      	str	r2, [r3, #40]	; 0x28
 80040e4:	e019      	b.n	800411a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040e6:	2308      	movs	r3, #8
 80040e8:	18fb      	adds	r3, r7, r3
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	0a1b      	lsrs	r3, r3, #8
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fa:	6a39      	ldr	r1, [r7, #32]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	0018      	movs	r0, r3
 8004100:	f000 f8f2 	bl	80042e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004104:	1e03      	subs	r3, r0, #0
 8004106:	d001      	beq.n	800410c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e014      	b.n	8004136 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800410c:	2308      	movs	r3, #8
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	b2da      	uxtb	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800411a:	6a3a      	ldr	r2, [r7, #32]
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	0013      	movs	r3, r2
 8004124:	2200      	movs	r2, #0
 8004126:	2180      	movs	r1, #128	; 0x80
 8004128:	f000 f890 	bl	800424c <I2C_WaitOnFlagUntilTimeout>
 800412c:	1e03      	subs	r3, r0, #0
 800412e:	d001      	beq.n	8004134 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	0018      	movs	r0, r3
 8004138:	46bd      	mov	sp, r7
 800413a:	b004      	add	sp, #16
 800413c:	bdb0      	pop	{r4, r5, r7, pc}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	80002000 	.word	0x80002000

08004144 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004144:	b5b0      	push	{r4, r5, r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	000c      	movs	r4, r1
 800414e:	0010      	movs	r0, r2
 8004150:	0019      	movs	r1, r3
 8004152:	250a      	movs	r5, #10
 8004154:	197b      	adds	r3, r7, r5
 8004156:	1c22      	adds	r2, r4, #0
 8004158:	801a      	strh	r2, [r3, #0]
 800415a:	2308      	movs	r3, #8
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	1c02      	adds	r2, r0, #0
 8004160:	801a      	strh	r2, [r3, #0]
 8004162:	1dbb      	adds	r3, r7, #6
 8004164:	1c0a      	adds	r2, r1, #0
 8004166:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004168:	1dbb      	adds	r3, r7, #6
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	b2da      	uxtb	r2, r3
 800416e:	197b      	adds	r3, r7, r5
 8004170:	8819      	ldrh	r1, [r3, #0]
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	4b23      	ldr	r3, [pc, #140]	; (8004204 <I2C_RequestMemoryRead+0xc0>)
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	2300      	movs	r3, #0
 800417a:	f000 fa3f 	bl	80045fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800417e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004180:	6a39      	ldr	r1, [r7, #32]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	0018      	movs	r0, r3
 8004186:	f000 f8af 	bl	80042e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800418a:	1e03      	subs	r3, r0, #0
 800418c:	d001      	beq.n	8004192 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e033      	b.n	80041fa <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004192:	1dbb      	adds	r3, r7, #6
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d107      	bne.n	80041aa <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800419a:	2308      	movs	r3, #8
 800419c:	18fb      	adds	r3, r7, r3
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	629a      	str	r2, [r3, #40]	; 0x28
 80041a8:	e019      	b.n	80041de <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041aa:	2308      	movs	r3, #8
 80041ac:	18fb      	adds	r3, r7, r3
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	0a1b      	lsrs	r3, r3, #8
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041be:	6a39      	ldr	r1, [r7, #32]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	0018      	movs	r0, r3
 80041c4:	f000 f890 	bl	80042e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80041c8:	1e03      	subs	r3, r0, #0
 80041ca:	d001      	beq.n	80041d0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e014      	b.n	80041fa <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041d0:	2308      	movs	r3, #8
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80041de:	6a3a      	ldr	r2, [r7, #32]
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	0013      	movs	r3, r2
 80041e8:	2200      	movs	r2, #0
 80041ea:	2140      	movs	r1, #64	; 0x40
 80041ec:	f000 f82e 	bl	800424c <I2C_WaitOnFlagUntilTimeout>
 80041f0:	1e03      	subs	r3, r0, #0
 80041f2:	d001      	beq.n	80041f8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	0018      	movs	r0, r3
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b004      	add	sp, #16
 8004200:	bdb0      	pop	{r4, r5, r7, pc}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	80002000 	.word	0x80002000

08004208 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	2202      	movs	r2, #2
 8004218:	4013      	ands	r3, r2
 800421a:	2b02      	cmp	r3, #2
 800421c:	d103      	bne.n	8004226 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2200      	movs	r2, #0
 8004224:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	2201      	movs	r2, #1
 800422e:	4013      	ands	r3, r2
 8004230:	2b01      	cmp	r3, #1
 8004232:	d007      	beq.n	8004244 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2101      	movs	r1, #1
 8004240:	430a      	orrs	r2, r1
 8004242:	619a      	str	r2, [r3, #24]
  }
}
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b002      	add	sp, #8
 800424a:	bd80      	pop	{r7, pc}

0800424c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	1dfb      	adds	r3, r7, #7
 800425a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800425c:	e030      	b.n	80042c0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	3301      	adds	r3, #1
 8004262:	d02d      	beq.n	80042c0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004264:	f7ff f8a0 	bl	80033a8 <HAL_GetTick>
 8004268:	0002      	movs	r2, r0
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d302      	bcc.n	800427a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d122      	bne.n	80042c0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	4013      	ands	r3, r2
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	425a      	negs	r2, r3
 800428a:	4153      	adcs	r3, r2
 800428c:	b2db      	uxtb	r3, r3
 800428e:	001a      	movs	r2, r3
 8004290:	1dfb      	adds	r3, r7, #7
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d113      	bne.n	80042c0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429c:	2220      	movs	r2, #32
 800429e:	431a      	orrs	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2241      	movs	r2, #65	; 0x41
 80042a8:	2120      	movs	r1, #32
 80042aa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2242      	movs	r2, #66	; 0x42
 80042b0:	2100      	movs	r1, #0
 80042b2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2240      	movs	r2, #64	; 0x40
 80042b8:	2100      	movs	r1, #0
 80042ba:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e00f      	b.n	80042e0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	4013      	ands	r3, r2
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	425a      	negs	r2, r3
 80042d0:	4153      	adcs	r3, r2
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	001a      	movs	r2, r3
 80042d6:	1dfb      	adds	r3, r7, #7
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d0bf      	beq.n	800425e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	0018      	movs	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	b004      	add	sp, #16
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042f4:	e032      	b.n	800435c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	0018      	movs	r0, r3
 80042fe:	f000 f87d 	bl	80043fc <I2C_IsErrorOccurred>
 8004302:	1e03      	subs	r3, r0, #0
 8004304:	d001      	beq.n	800430a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e030      	b.n	800436c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	3301      	adds	r3, #1
 800430e:	d025      	beq.n	800435c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004310:	f7ff f84a 	bl	80033a8 <HAL_GetTick>
 8004314:	0002      	movs	r2, r0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	429a      	cmp	r2, r3
 800431e:	d302      	bcc.n	8004326 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d11a      	bne.n	800435c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2202      	movs	r2, #2
 800432e:	4013      	ands	r3, r2
 8004330:	2b02      	cmp	r3, #2
 8004332:	d013      	beq.n	800435c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004338:	2220      	movs	r2, #32
 800433a:	431a      	orrs	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2241      	movs	r2, #65	; 0x41
 8004344:	2120      	movs	r1, #32
 8004346:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2242      	movs	r2, #66	; 0x42
 800434c:	2100      	movs	r1, #0
 800434e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2240      	movs	r2, #64	; 0x40
 8004354:	2100      	movs	r1, #0
 8004356:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e007      	b.n	800436c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2202      	movs	r2, #2
 8004364:	4013      	ands	r3, r2
 8004366:	2b02      	cmp	r3, #2
 8004368:	d1c5      	bne.n	80042f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b004      	add	sp, #16
 8004372:	bd80      	pop	{r7, pc}

08004374 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004380:	e02f      	b.n	80043e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	0018      	movs	r0, r3
 800438a:	f000 f837 	bl	80043fc <I2C_IsErrorOccurred>
 800438e:	1e03      	subs	r3, r0, #0
 8004390:	d001      	beq.n	8004396 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e02d      	b.n	80043f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004396:	f7ff f807 	bl	80033a8 <HAL_GetTick>
 800439a:	0002      	movs	r2, r0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d302      	bcc.n	80043ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d11a      	bne.n	80043e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	2220      	movs	r2, #32
 80043b4:	4013      	ands	r3, r2
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	d013      	beq.n	80043e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	2220      	movs	r2, #32
 80043c0:	431a      	orrs	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2241      	movs	r2, #65	; 0x41
 80043ca:	2120      	movs	r1, #32
 80043cc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2242      	movs	r2, #66	; 0x42
 80043d2:	2100      	movs	r1, #0
 80043d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2240      	movs	r2, #64	; 0x40
 80043da:	2100      	movs	r1, #0
 80043dc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e007      	b.n	80043f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	2220      	movs	r2, #32
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d1c8      	bne.n	8004382 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	0018      	movs	r0, r3
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b004      	add	sp, #16
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043fc:	b590      	push	{r4, r7, lr}
 80043fe:	b08b      	sub	sp, #44	; 0x2c
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004408:	2327      	movs	r3, #39	; 0x27
 800440a:	18fb      	adds	r3, r7, r3
 800440c:	2200      	movs	r2, #0
 800440e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	2210      	movs	r2, #16
 8004424:	4013      	ands	r3, r2
 8004426:	d100      	bne.n	800442a <I2C_IsErrorOccurred+0x2e>
 8004428:	e082      	b.n	8004530 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2210      	movs	r2, #16
 8004430:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004432:	e060      	b.n	80044f6 <I2C_IsErrorOccurred+0xfa>
 8004434:	2427      	movs	r4, #39	; 0x27
 8004436:	193b      	adds	r3, r7, r4
 8004438:	193a      	adds	r2, r7, r4
 800443a:	7812      	ldrb	r2, [r2, #0]
 800443c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	3301      	adds	r3, #1
 8004442:	d058      	beq.n	80044f6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004444:	f7fe ffb0 	bl	80033a8 <HAL_GetTick>
 8004448:	0002      	movs	r2, r0
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	429a      	cmp	r2, r3
 8004452:	d306      	bcc.n	8004462 <I2C_IsErrorOccurred+0x66>
 8004454:	193b      	adds	r3, r7, r4
 8004456:	193a      	adds	r2, r7, r4
 8004458:	7812      	ldrb	r2, [r2, #0]
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d149      	bne.n	80044f6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	2380      	movs	r3, #128	; 0x80
 800446a:	01db      	lsls	r3, r3, #7
 800446c:	4013      	ands	r3, r2
 800446e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004470:	2013      	movs	r0, #19
 8004472:	183b      	adds	r3, r7, r0
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	2142      	movs	r1, #66	; 0x42
 8004478:	5c52      	ldrb	r2, [r2, r1]
 800447a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	021b      	lsls	r3, r3, #8
 8004486:	401a      	ands	r2, r3
 8004488:	2380      	movs	r3, #128	; 0x80
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	429a      	cmp	r2, r3
 800448e:	d126      	bne.n	80044de <I2C_IsErrorOccurred+0xe2>
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	2380      	movs	r3, #128	; 0x80
 8004494:	01db      	lsls	r3, r3, #7
 8004496:	429a      	cmp	r2, r3
 8004498:	d021      	beq.n	80044de <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800449a:	183b      	adds	r3, r7, r0
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d01d      	beq.n	80044de <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2180      	movs	r1, #128	; 0x80
 80044ae:	01c9      	lsls	r1, r1, #7
 80044b0:	430a      	orrs	r2, r1
 80044b2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80044b4:	f7fe ff78 	bl	80033a8 <HAL_GetTick>
 80044b8:	0003      	movs	r3, r0
 80044ba:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044bc:	e00f      	b.n	80044de <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80044be:	f7fe ff73 	bl	80033a8 <HAL_GetTick>
 80044c2:	0002      	movs	r2, r0
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b19      	cmp	r3, #25
 80044ca:	d908      	bls.n	80044de <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	2220      	movs	r2, #32
 80044d0:	4313      	orrs	r3, r2
 80044d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80044d4:	2327      	movs	r3, #39	; 0x27
 80044d6:	18fb      	adds	r3, r7, r3
 80044d8:	2201      	movs	r2, #1
 80044da:	701a      	strb	r2, [r3, #0]

              break;
 80044dc:	e00b      	b.n	80044f6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	2220      	movs	r2, #32
 80044e6:	4013      	ands	r3, r2
 80044e8:	2127      	movs	r1, #39	; 0x27
 80044ea:	187a      	adds	r2, r7, r1
 80044ec:	1879      	adds	r1, r7, r1
 80044ee:	7809      	ldrb	r1, [r1, #0]
 80044f0:	7011      	strb	r1, [r2, #0]
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d1e3      	bne.n	80044be <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	2220      	movs	r2, #32
 80044fe:	4013      	ands	r3, r2
 8004500:	2b20      	cmp	r3, #32
 8004502:	d004      	beq.n	800450e <I2C_IsErrorOccurred+0x112>
 8004504:	2327      	movs	r3, #39	; 0x27
 8004506:	18fb      	adds	r3, r7, r3
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d092      	beq.n	8004434 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800450e:	2327      	movs	r3, #39	; 0x27
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d103      	bne.n	8004520 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2220      	movs	r2, #32
 800451e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	2204      	movs	r2, #4
 8004524:	4313      	orrs	r3, r2
 8004526:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004528:	2327      	movs	r3, #39	; 0x27
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	2201      	movs	r2, #1
 800452e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	2380      	movs	r3, #128	; 0x80
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	4013      	ands	r3, r2
 8004540:	d00c      	beq.n	800455c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	2201      	movs	r2, #1
 8004546:	4313      	orrs	r3, r2
 8004548:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2280      	movs	r2, #128	; 0x80
 8004550:	0052      	lsls	r2, r2, #1
 8004552:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004554:	2327      	movs	r3, #39	; 0x27
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	2201      	movs	r2, #1
 800455a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	2380      	movs	r3, #128	; 0x80
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4013      	ands	r3, r2
 8004564:	d00c      	beq.n	8004580 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	2208      	movs	r2, #8
 800456a:	4313      	orrs	r3, r2
 800456c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2280      	movs	r2, #128	; 0x80
 8004574:	00d2      	lsls	r2, r2, #3
 8004576:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004578:	2327      	movs	r3, #39	; 0x27
 800457a:	18fb      	adds	r3, r7, r3
 800457c:	2201      	movs	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	2380      	movs	r3, #128	; 0x80
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4013      	ands	r3, r2
 8004588:	d00c      	beq.n	80045a4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	2202      	movs	r2, #2
 800458e:	4313      	orrs	r3, r2
 8004590:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2280      	movs	r2, #128	; 0x80
 8004598:	0092      	lsls	r2, r2, #2
 800459a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800459c:	2327      	movs	r3, #39	; 0x27
 800459e:	18fb      	adds	r3, r7, r3
 80045a0:	2201      	movs	r2, #1
 80045a2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80045a4:	2327      	movs	r3, #39	; 0x27
 80045a6:	18fb      	adds	r3, r7, r3
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d01d      	beq.n	80045ea <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f7ff fe29 	bl	8004208 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	490d      	ldr	r1, [pc, #52]	; (80045f8 <I2C_IsErrorOccurred+0x1fc>)
 80045c2:	400a      	ands	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	431a      	orrs	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2241      	movs	r2, #65	; 0x41
 80045d6:	2120      	movs	r1, #32
 80045d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2242      	movs	r2, #66	; 0x42
 80045de:	2100      	movs	r1, #0
 80045e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2240      	movs	r2, #64	; 0x40
 80045e6:	2100      	movs	r1, #0
 80045e8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80045ea:	2327      	movs	r3, #39	; 0x27
 80045ec:	18fb      	adds	r3, r7, r3
 80045ee:	781b      	ldrb	r3, [r3, #0]
}
 80045f0:	0018      	movs	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b00b      	add	sp, #44	; 0x2c
 80045f6:	bd90      	pop	{r4, r7, pc}
 80045f8:	fe00e800 	.word	0xfe00e800

080045fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80045fc:	b590      	push	{r4, r7, lr}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	0008      	movs	r0, r1
 8004606:	0011      	movs	r1, r2
 8004608:	607b      	str	r3, [r7, #4]
 800460a:	240a      	movs	r4, #10
 800460c:	193b      	adds	r3, r7, r4
 800460e:	1c02      	adds	r2, r0, #0
 8004610:	801a      	strh	r2, [r3, #0]
 8004612:	2009      	movs	r0, #9
 8004614:	183b      	adds	r3, r7, r0
 8004616:	1c0a      	adds	r2, r1, #0
 8004618:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800461a:	193b      	adds	r3, r7, r4
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	059b      	lsls	r3, r3, #22
 8004620:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004622:	183b      	adds	r3, r7, r0
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	0419      	lsls	r1, r3, #16
 8004628:	23ff      	movs	r3, #255	; 0xff
 800462a:	041b      	lsls	r3, r3, #16
 800462c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800462e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	4313      	orrs	r3, r2
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	085b      	lsrs	r3, r3, #1
 800463c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004646:	0d51      	lsrs	r1, r2, #21
 8004648:	2280      	movs	r2, #128	; 0x80
 800464a:	00d2      	lsls	r2, r2, #3
 800464c:	400a      	ands	r2, r1
 800464e:	4907      	ldr	r1, [pc, #28]	; (800466c <I2C_TransferConfig+0x70>)
 8004650:	430a      	orrs	r2, r1
 8004652:	43d2      	mvns	r2, r2
 8004654:	401a      	ands	r2, r3
 8004656:	0011      	movs	r1, r2
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	46bd      	mov	sp, r7
 8004666:	b007      	add	sp, #28
 8004668:	bd90      	pop	{r4, r7, pc}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	03ff63ff 	.word	0x03ff63ff

08004670 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2241      	movs	r2, #65	; 0x41
 800467e:	5c9b      	ldrb	r3, [r3, r2]
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b20      	cmp	r3, #32
 8004684:	d138      	bne.n	80046f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2240      	movs	r2, #64	; 0x40
 800468a:	5c9b      	ldrb	r3, [r3, r2]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004690:	2302      	movs	r3, #2
 8004692:	e032      	b.n	80046fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2240      	movs	r2, #64	; 0x40
 8004698:	2101      	movs	r1, #1
 800469a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2241      	movs	r2, #65	; 0x41
 80046a0:	2124      	movs	r1, #36	; 0x24
 80046a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2101      	movs	r1, #1
 80046b0:	438a      	bics	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4911      	ldr	r1, [pc, #68]	; (8004704 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80046c0:	400a      	ands	r2, r1
 80046c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6819      	ldr	r1, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2101      	movs	r1, #1
 80046e0:	430a      	orrs	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2241      	movs	r2, #65	; 0x41
 80046e8:	2120      	movs	r1, #32
 80046ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2240      	movs	r2, #64	; 0x40
 80046f0:	2100      	movs	r1, #0
 80046f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	e000      	b.n	80046fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046f8:	2302      	movs	r3, #2
  }
}
 80046fa:	0018      	movs	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b002      	add	sp, #8
 8004700:	bd80      	pop	{r7, pc}
 8004702:	46c0      	nop			; (mov r8, r8)
 8004704:	ffffefff 	.word	0xffffefff

08004708 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2241      	movs	r2, #65	; 0x41
 8004716:	5c9b      	ldrb	r3, [r3, r2]
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b20      	cmp	r3, #32
 800471c:	d139      	bne.n	8004792 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2240      	movs	r2, #64	; 0x40
 8004722:	5c9b      	ldrb	r3, [r3, r2]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004728:	2302      	movs	r3, #2
 800472a:	e033      	b.n	8004794 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2240      	movs	r2, #64	; 0x40
 8004730:	2101      	movs	r1, #1
 8004732:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2241      	movs	r2, #65	; 0x41
 8004738:	2124      	movs	r1, #36	; 0x24
 800473a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2101      	movs	r1, #1
 8004748:	438a      	bics	r2, r1
 800474a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4a11      	ldr	r2, [pc, #68]	; (800479c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004758:	4013      	ands	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2101      	movs	r1, #1
 800477a:	430a      	orrs	r2, r1
 800477c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2241      	movs	r2, #65	; 0x41
 8004782:	2120      	movs	r1, #32
 8004784:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2240      	movs	r2, #64	; 0x40
 800478a:	2100      	movs	r1, #0
 800478c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	e000      	b.n	8004794 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004792:	2302      	movs	r3, #2
  }
}
 8004794:	0018      	movs	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	b004      	add	sp, #16
 800479a:	bd80      	pop	{r7, pc}
 800479c:	fffff0ff 	.word	0xfffff0ff

080047a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a0:	b5b0      	push	{r4, r5, r7, lr}
 80047a2:	b08a      	sub	sp, #40	; 0x28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d102      	bne.n	80047b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	f000 fbaf 	bl	8004f12 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047b4:	4bcf      	ldr	r3, [pc, #828]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	220c      	movs	r2, #12
 80047ba:	4013      	ands	r3, r2
 80047bc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047be:	4bcd      	ldr	r3, [pc, #820]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	2380      	movs	r3, #128	; 0x80
 80047c4:	025b      	lsls	r3, r3, #9
 80047c6:	4013      	ands	r3, r2
 80047c8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2201      	movs	r2, #1
 80047d0:	4013      	ands	r3, r2
 80047d2:	d100      	bne.n	80047d6 <HAL_RCC_OscConfig+0x36>
 80047d4:	e07e      	b.n	80048d4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d007      	beq.n	80047ec <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	2b0c      	cmp	r3, #12
 80047e0:	d112      	bne.n	8004808 <HAL_RCC_OscConfig+0x68>
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	2380      	movs	r3, #128	; 0x80
 80047e6:	025b      	lsls	r3, r3, #9
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d10d      	bne.n	8004808 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ec:	4bc1      	ldr	r3, [pc, #772]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	029b      	lsls	r3, r3, #10
 80047f4:	4013      	ands	r3, r2
 80047f6:	d100      	bne.n	80047fa <HAL_RCC_OscConfig+0x5a>
 80047f8:	e06b      	b.n	80048d2 <HAL_RCC_OscConfig+0x132>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d167      	bne.n	80048d2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	f000 fb85 	bl	8004f12 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	025b      	lsls	r3, r3, #9
 8004810:	429a      	cmp	r2, r3
 8004812:	d107      	bne.n	8004824 <HAL_RCC_OscConfig+0x84>
 8004814:	4bb7      	ldr	r3, [pc, #732]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	4bb6      	ldr	r3, [pc, #728]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 800481a:	2180      	movs	r1, #128	; 0x80
 800481c:	0249      	lsls	r1, r1, #9
 800481e:	430a      	orrs	r2, r1
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	e027      	b.n	8004874 <HAL_RCC_OscConfig+0xd4>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	23a0      	movs	r3, #160	; 0xa0
 800482a:	02db      	lsls	r3, r3, #11
 800482c:	429a      	cmp	r2, r3
 800482e:	d10e      	bne.n	800484e <HAL_RCC_OscConfig+0xae>
 8004830:	4bb0      	ldr	r3, [pc, #704]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	4baf      	ldr	r3, [pc, #700]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004836:	2180      	movs	r1, #128	; 0x80
 8004838:	02c9      	lsls	r1, r1, #11
 800483a:	430a      	orrs	r2, r1
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	4bad      	ldr	r3, [pc, #692]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	4bac      	ldr	r3, [pc, #688]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004844:	2180      	movs	r1, #128	; 0x80
 8004846:	0249      	lsls	r1, r1, #9
 8004848:	430a      	orrs	r2, r1
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	e012      	b.n	8004874 <HAL_RCC_OscConfig+0xd4>
 800484e:	4ba9      	ldr	r3, [pc, #676]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4ba8      	ldr	r3, [pc, #672]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004854:	49a8      	ldr	r1, [pc, #672]	; (8004af8 <HAL_RCC_OscConfig+0x358>)
 8004856:	400a      	ands	r2, r1
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	4ba6      	ldr	r3, [pc, #664]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	2380      	movs	r3, #128	; 0x80
 8004860:	025b      	lsls	r3, r3, #9
 8004862:	4013      	ands	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4ba2      	ldr	r3, [pc, #648]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	4ba1      	ldr	r3, [pc, #644]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 800486e:	49a3      	ldr	r1, [pc, #652]	; (8004afc <HAL_RCC_OscConfig+0x35c>)
 8004870:	400a      	ands	r2, r1
 8004872:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d015      	beq.n	80048a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487c:	f7fe fd94 	bl	80033a8 <HAL_GetTick>
 8004880:	0003      	movs	r3, r0
 8004882:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004884:	e009      	b.n	800489a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004886:	f7fe fd8f 	bl	80033a8 <HAL_GetTick>
 800488a:	0002      	movs	r2, r0
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b64      	cmp	r3, #100	; 0x64
 8004892:	d902      	bls.n	800489a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	f000 fb3c 	bl	8004f12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800489a:	4b96      	ldr	r3, [pc, #600]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	2380      	movs	r3, #128	; 0x80
 80048a0:	029b      	lsls	r3, r3, #10
 80048a2:	4013      	ands	r3, r2
 80048a4:	d0ef      	beq.n	8004886 <HAL_RCC_OscConfig+0xe6>
 80048a6:	e015      	b.n	80048d4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fe fd7e 	bl	80033a8 <HAL_GetTick>
 80048ac:	0003      	movs	r3, r0
 80048ae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048b2:	f7fe fd79 	bl	80033a8 <HAL_GetTick>
 80048b6:	0002      	movs	r2, r0
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b64      	cmp	r3, #100	; 0x64
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e326      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048c4:	4b8b      	ldr	r3, [pc, #556]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	2380      	movs	r3, #128	; 0x80
 80048ca:	029b      	lsls	r3, r3, #10
 80048cc:	4013      	ands	r3, r2
 80048ce:	d1f0      	bne.n	80048b2 <HAL_RCC_OscConfig+0x112>
 80048d0:	e000      	b.n	80048d4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2202      	movs	r2, #2
 80048da:	4013      	ands	r3, r2
 80048dc:	d100      	bne.n	80048e0 <HAL_RCC_OscConfig+0x140>
 80048de:	e08b      	b.n	80049f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d005      	beq.n	80048f8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	2b0c      	cmp	r3, #12
 80048f0:	d13e      	bne.n	8004970 <HAL_RCC_OscConfig+0x1d0>
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d13b      	bne.n	8004970 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80048f8:	4b7e      	ldr	r3, [pc, #504]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2204      	movs	r2, #4
 80048fe:	4013      	ands	r3, r2
 8004900:	d004      	beq.n	800490c <HAL_RCC_OscConfig+0x16c>
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e302      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490c:	4b79      	ldr	r3, [pc, #484]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	4a7b      	ldr	r2, [pc, #492]	; (8004b00 <HAL_RCC_OscConfig+0x360>)
 8004912:	4013      	ands	r3, r2
 8004914:	0019      	movs	r1, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	021a      	lsls	r2, r3, #8
 800491c:	4b75      	ldr	r3, [pc, #468]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004922:	4b74      	ldr	r3, [pc, #464]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2209      	movs	r2, #9
 8004928:	4393      	bics	r3, r2
 800492a:	0019      	movs	r1, r3
 800492c:	4b71      	ldr	r3, [pc, #452]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	430a      	orrs	r2, r1
 8004932:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004934:	f000 fc40 	bl	80051b8 <HAL_RCC_GetSysClockFreq>
 8004938:	0001      	movs	r1, r0
 800493a:	4b6e      	ldr	r3, [pc, #440]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	091b      	lsrs	r3, r3, #4
 8004940:	220f      	movs	r2, #15
 8004942:	4013      	ands	r3, r2
 8004944:	4a6f      	ldr	r2, [pc, #444]	; (8004b04 <HAL_RCC_OscConfig+0x364>)
 8004946:	5cd3      	ldrb	r3, [r2, r3]
 8004948:	000a      	movs	r2, r1
 800494a:	40da      	lsrs	r2, r3
 800494c:	4b6e      	ldr	r3, [pc, #440]	; (8004b08 <HAL_RCC_OscConfig+0x368>)
 800494e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004950:	4b6e      	ldr	r3, [pc, #440]	; (8004b0c <HAL_RCC_OscConfig+0x36c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2513      	movs	r5, #19
 8004956:	197c      	adds	r4, r7, r5
 8004958:	0018      	movs	r0, r3
 800495a:	f7fe fcdf 	bl	800331c <HAL_InitTick>
 800495e:	0003      	movs	r3, r0
 8004960:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004962:	197b      	adds	r3, r7, r5
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d046      	beq.n	80049f8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800496a:	197b      	adds	r3, r7, r5
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	e2d0      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d027      	beq.n	80049c6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004976:	4b5f      	ldr	r3, [pc, #380]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2209      	movs	r2, #9
 800497c:	4393      	bics	r3, r2
 800497e:	0019      	movs	r1, r3
 8004980:	4b5c      	ldr	r3, [pc, #368]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	430a      	orrs	r2, r1
 8004986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004988:	f7fe fd0e 	bl	80033a8 <HAL_GetTick>
 800498c:	0003      	movs	r3, r0
 800498e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004992:	f7fe fd09 	bl	80033a8 <HAL_GetTick>
 8004996:	0002      	movs	r2, r0
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e2b6      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049a4:	4b53      	ldr	r3, [pc, #332]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2204      	movs	r2, #4
 80049aa:	4013      	ands	r3, r2
 80049ac:	d0f1      	beq.n	8004992 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ae:	4b51      	ldr	r3, [pc, #324]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	4a53      	ldr	r2, [pc, #332]	; (8004b00 <HAL_RCC_OscConfig+0x360>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	0019      	movs	r1, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	021a      	lsls	r2, r3, #8
 80049be:	4b4d      	ldr	r3, [pc, #308]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 80049c0:	430a      	orrs	r2, r1
 80049c2:	605a      	str	r2, [r3, #4]
 80049c4:	e018      	b.n	80049f8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049c6:	4b4b      	ldr	r3, [pc, #300]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b4a      	ldr	r3, [pc, #296]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 80049cc:	2101      	movs	r1, #1
 80049ce:	438a      	bics	r2, r1
 80049d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d2:	f7fe fce9 	bl	80033a8 <HAL_GetTick>
 80049d6:	0003      	movs	r3, r0
 80049d8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049dc:	f7fe fce4 	bl	80033a8 <HAL_GetTick>
 80049e0:	0002      	movs	r2, r0
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e291      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049ee:	4b41      	ldr	r3, [pc, #260]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2204      	movs	r2, #4
 80049f4:	4013      	ands	r3, r2
 80049f6:	d1f1      	bne.n	80049dc <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2210      	movs	r2, #16
 80049fe:	4013      	ands	r3, r2
 8004a00:	d100      	bne.n	8004a04 <HAL_RCC_OscConfig+0x264>
 8004a02:	e0a1      	b.n	8004b48 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d140      	bne.n	8004a8c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a0a:	4b3a      	ldr	r3, [pc, #232]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	2380      	movs	r3, #128	; 0x80
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4013      	ands	r3, r2
 8004a14:	d005      	beq.n	8004a22 <HAL_RCC_OscConfig+0x282>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e277      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a22:	4b34      	ldr	r3, [pc, #208]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	4a3a      	ldr	r2, [pc, #232]	; (8004b10 <HAL_RCC_OscConfig+0x370>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	0019      	movs	r1, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a30:	4b30      	ldr	r3, [pc, #192]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a36:	4b2f      	ldr	r3, [pc, #188]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	021b      	lsls	r3, r3, #8
 8004a3c:	0a19      	lsrs	r1, r3, #8
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	061a      	lsls	r2, r3, #24
 8004a44:	4b2b      	ldr	r3, [pc, #172]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	0b5b      	lsrs	r3, r3, #13
 8004a50:	3301      	adds	r3, #1
 8004a52:	2280      	movs	r2, #128	; 0x80
 8004a54:	0212      	lsls	r2, r2, #8
 8004a56:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004a58:	4b26      	ldr	r3, [pc, #152]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	091b      	lsrs	r3, r3, #4
 8004a5e:	210f      	movs	r1, #15
 8004a60:	400b      	ands	r3, r1
 8004a62:	4928      	ldr	r1, [pc, #160]	; (8004b04 <HAL_RCC_OscConfig+0x364>)
 8004a64:	5ccb      	ldrb	r3, [r1, r3]
 8004a66:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004a68:	4b27      	ldr	r3, [pc, #156]	; (8004b08 <HAL_RCC_OscConfig+0x368>)
 8004a6a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004a6c:	4b27      	ldr	r3, [pc, #156]	; (8004b0c <HAL_RCC_OscConfig+0x36c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2513      	movs	r5, #19
 8004a72:	197c      	adds	r4, r7, r5
 8004a74:	0018      	movs	r0, r3
 8004a76:	f7fe fc51 	bl	800331c <HAL_InitTick>
 8004a7a:	0003      	movs	r3, r0
 8004a7c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004a7e:	197b      	adds	r3, r7, r5
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d060      	beq.n	8004b48 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8004a86:	197b      	adds	r3, r7, r5
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	e242      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d03f      	beq.n	8004b14 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a94:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	4b16      	ldr	r3, [pc, #88]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004a9a:	2180      	movs	r1, #128	; 0x80
 8004a9c:	0049      	lsls	r1, r1, #1
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa2:	f7fe fc81 	bl	80033a8 <HAL_GetTick>
 8004aa6:	0003      	movs	r3, r0
 8004aa8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004aac:	f7fe fc7c 	bl	80033a8 <HAL_GetTick>
 8004ab0:	0002      	movs	r2, r0
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e229      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004abe:	4b0d      	ldr	r3, [pc, #52]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	2380      	movs	r3, #128	; 0x80
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004aca:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	4a10      	ldr	r2, [pc, #64]	; (8004b10 <HAL_RCC_OscConfig+0x370>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	0019      	movs	r1, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ad8:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ade:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	0a19      	lsrs	r1, r3, #8
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	061a      	lsls	r2, r3, #24
 8004aec:	4b01      	ldr	r3, [pc, #4]	; (8004af4 <HAL_RCC_OscConfig+0x354>)
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
 8004af2:	e029      	b.n	8004b48 <HAL_RCC_OscConfig+0x3a8>
 8004af4:	40021000 	.word	0x40021000
 8004af8:	fffeffff 	.word	0xfffeffff
 8004afc:	fffbffff 	.word	0xfffbffff
 8004b00:	ffffe0ff 	.word	0xffffe0ff
 8004b04:	0800915c 	.word	0x0800915c
 8004b08:	20000004 	.word	0x20000004
 8004b0c:	20000008 	.word	0x20000008
 8004b10:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b14:	4bbd      	ldr	r3, [pc, #756]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	4bbc      	ldr	r3, [pc, #752]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004b1a:	49bd      	ldr	r1, [pc, #756]	; (8004e10 <HAL_RCC_OscConfig+0x670>)
 8004b1c:	400a      	ands	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b20:	f7fe fc42 	bl	80033a8 <HAL_GetTick>
 8004b24:	0003      	movs	r3, r0
 8004b26:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b2a:	f7fe fc3d 	bl	80033a8 <HAL_GetTick>
 8004b2e:	0002      	movs	r2, r0
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e1ea      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004b3c:	4bb3      	ldr	r3, [pc, #716]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	2380      	movs	r3, #128	; 0x80
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4013      	ands	r3, r2
 8004b46:	d1f0      	bne.n	8004b2a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2208      	movs	r2, #8
 8004b4e:	4013      	ands	r3, r2
 8004b50:	d036      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d019      	beq.n	8004b8e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b5a:	4bac      	ldr	r3, [pc, #688]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004b5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b5e:	4bab      	ldr	r3, [pc, #684]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004b60:	2101      	movs	r1, #1
 8004b62:	430a      	orrs	r2, r1
 8004b64:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b66:	f7fe fc1f 	bl	80033a8 <HAL_GetTick>
 8004b6a:	0003      	movs	r3, r0
 8004b6c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b70:	f7fe fc1a 	bl	80033a8 <HAL_GetTick>
 8004b74:	0002      	movs	r2, r0
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e1c7      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b82:	4ba2      	ldr	r3, [pc, #648]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b86:	2202      	movs	r2, #2
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d0f1      	beq.n	8004b70 <HAL_RCC_OscConfig+0x3d0>
 8004b8c:	e018      	b.n	8004bc0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b8e:	4b9f      	ldr	r3, [pc, #636]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004b90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b92:	4b9e      	ldr	r3, [pc, #632]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004b94:	2101      	movs	r1, #1
 8004b96:	438a      	bics	r2, r1
 8004b98:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b9a:	f7fe fc05 	bl	80033a8 <HAL_GetTick>
 8004b9e:	0003      	movs	r3, r0
 8004ba0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ba4:	f7fe fc00 	bl	80033a8 <HAL_GetTick>
 8004ba8:	0002      	movs	r2, r0
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e1ad      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004bb6:	4b95      	ldr	r3, [pc, #596]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bba:	2202      	movs	r2, #2
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d1f1      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d100      	bne.n	8004bcc <HAL_RCC_OscConfig+0x42c>
 8004bca:	e0ae      	b.n	8004d2a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bcc:	2027      	movs	r0, #39	; 0x27
 8004bce:	183b      	adds	r3, r7, r0
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bd4:	4b8d      	ldr	r3, [pc, #564]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd8:	2380      	movs	r3, #128	; 0x80
 8004bda:	055b      	lsls	r3, r3, #21
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d109      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be0:	4b8a      	ldr	r3, [pc, #552]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be4:	4b89      	ldr	r3, [pc, #548]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004be6:	2180      	movs	r1, #128	; 0x80
 8004be8:	0549      	lsls	r1, r1, #21
 8004bea:	430a      	orrs	r2, r1
 8004bec:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004bee:	183b      	adds	r3, r7, r0
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf4:	4b87      	ldr	r3, [pc, #540]	; (8004e14 <HAL_RCC_OscConfig+0x674>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	2380      	movs	r3, #128	; 0x80
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d11a      	bne.n	8004c36 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c00:	4b84      	ldr	r3, [pc, #528]	; (8004e14 <HAL_RCC_OscConfig+0x674>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	4b83      	ldr	r3, [pc, #524]	; (8004e14 <HAL_RCC_OscConfig+0x674>)
 8004c06:	2180      	movs	r1, #128	; 0x80
 8004c08:	0049      	lsls	r1, r1, #1
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c0e:	f7fe fbcb 	bl	80033a8 <HAL_GetTick>
 8004c12:	0003      	movs	r3, r0
 8004c14:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c18:	f7fe fbc6 	bl	80033a8 <HAL_GetTick>
 8004c1c:	0002      	movs	r2, r0
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b64      	cmp	r3, #100	; 0x64
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e173      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c2a:	4b7a      	ldr	r3, [pc, #488]	; (8004e14 <HAL_RCC_OscConfig+0x674>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	2380      	movs	r3, #128	; 0x80
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	4013      	ands	r3, r2
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	2380      	movs	r3, #128	; 0x80
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d107      	bne.n	8004c52 <HAL_RCC_OscConfig+0x4b2>
 8004c42:	4b72      	ldr	r3, [pc, #456]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004c44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c46:	4b71      	ldr	r3, [pc, #452]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004c48:	2180      	movs	r1, #128	; 0x80
 8004c4a:	0049      	lsls	r1, r1, #1
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	651a      	str	r2, [r3, #80]	; 0x50
 8004c50:	e031      	b.n	8004cb6 <HAL_RCC_OscConfig+0x516>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10c      	bne.n	8004c74 <HAL_RCC_OscConfig+0x4d4>
 8004c5a:	4b6c      	ldr	r3, [pc, #432]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004c5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c5e:	4b6b      	ldr	r3, [pc, #428]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004c60:	496b      	ldr	r1, [pc, #428]	; (8004e10 <HAL_RCC_OscConfig+0x670>)
 8004c62:	400a      	ands	r2, r1
 8004c64:	651a      	str	r2, [r3, #80]	; 0x50
 8004c66:	4b69      	ldr	r3, [pc, #420]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004c68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c6a:	4b68      	ldr	r3, [pc, #416]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004c6c:	496a      	ldr	r1, [pc, #424]	; (8004e18 <HAL_RCC_OscConfig+0x678>)
 8004c6e:	400a      	ands	r2, r1
 8004c70:	651a      	str	r2, [r3, #80]	; 0x50
 8004c72:	e020      	b.n	8004cb6 <HAL_RCC_OscConfig+0x516>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	23a0      	movs	r3, #160	; 0xa0
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d10e      	bne.n	8004c9e <HAL_RCC_OscConfig+0x4fe>
 8004c80:	4b62      	ldr	r3, [pc, #392]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004c82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c84:	4b61      	ldr	r3, [pc, #388]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004c86:	2180      	movs	r1, #128	; 0x80
 8004c88:	00c9      	lsls	r1, r1, #3
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	651a      	str	r2, [r3, #80]	; 0x50
 8004c8e:	4b5f      	ldr	r3, [pc, #380]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004c90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c92:	4b5e      	ldr	r3, [pc, #376]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004c94:	2180      	movs	r1, #128	; 0x80
 8004c96:	0049      	lsls	r1, r1, #1
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	651a      	str	r2, [r3, #80]	; 0x50
 8004c9c:	e00b      	b.n	8004cb6 <HAL_RCC_OscConfig+0x516>
 8004c9e:	4b5b      	ldr	r3, [pc, #364]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004ca0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ca2:	4b5a      	ldr	r3, [pc, #360]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004ca4:	495a      	ldr	r1, [pc, #360]	; (8004e10 <HAL_RCC_OscConfig+0x670>)
 8004ca6:	400a      	ands	r2, r1
 8004ca8:	651a      	str	r2, [r3, #80]	; 0x50
 8004caa:	4b58      	ldr	r3, [pc, #352]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004cac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cae:	4b57      	ldr	r3, [pc, #348]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004cb0:	4959      	ldr	r1, [pc, #356]	; (8004e18 <HAL_RCC_OscConfig+0x678>)
 8004cb2:	400a      	ands	r2, r1
 8004cb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d015      	beq.n	8004cea <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cbe:	f7fe fb73 	bl	80033a8 <HAL_GetTick>
 8004cc2:	0003      	movs	r3, r0
 8004cc4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cc6:	e009      	b.n	8004cdc <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cc8:	f7fe fb6e 	bl	80033a8 <HAL_GetTick>
 8004ccc:	0002      	movs	r2, r0
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	4a52      	ldr	r2, [pc, #328]	; (8004e1c <HAL_RCC_OscConfig+0x67c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e11a      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cdc:	4b4b      	ldr	r3, [pc, #300]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004cde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ce0:	2380      	movs	r3, #128	; 0x80
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d0ef      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x528>
 8004ce8:	e014      	b.n	8004d14 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cea:	f7fe fb5d 	bl	80033a8 <HAL_GetTick>
 8004cee:	0003      	movs	r3, r0
 8004cf0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004cf2:	e009      	b.n	8004d08 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cf4:	f7fe fb58 	bl	80033a8 <HAL_GetTick>
 8004cf8:	0002      	movs	r2, r0
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	4a47      	ldr	r2, [pc, #284]	; (8004e1c <HAL_RCC_OscConfig+0x67c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e104      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d08:	4b40      	ldr	r3, [pc, #256]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004d0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d0c:	2380      	movs	r3, #128	; 0x80
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4013      	ands	r3, r2
 8004d12:	d1ef      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d14:	2327      	movs	r3, #39	; 0x27
 8004d16:	18fb      	adds	r3, r7, r3
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d105      	bne.n	8004d2a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d1e:	4b3b      	ldr	r3, [pc, #236]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d22:	4b3a      	ldr	r3, [pc, #232]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004d24:	493e      	ldr	r1, [pc, #248]	; (8004e20 <HAL_RCC_OscConfig+0x680>)
 8004d26:	400a      	ands	r2, r1
 8004d28:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	4013      	ands	r3, r2
 8004d32:	d049      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d026      	beq.n	8004d8a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004d3c:	4b33      	ldr	r3, [pc, #204]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	4b32      	ldr	r3, [pc, #200]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004d42:	2101      	movs	r1, #1
 8004d44:	430a      	orrs	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]
 8004d48:	4b30      	ldr	r3, [pc, #192]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d4c:	4b2f      	ldr	r3, [pc, #188]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004d4e:	2101      	movs	r1, #1
 8004d50:	430a      	orrs	r2, r1
 8004d52:	635a      	str	r2, [r3, #52]	; 0x34
 8004d54:	4b33      	ldr	r3, [pc, #204]	; (8004e24 <HAL_RCC_OscConfig+0x684>)
 8004d56:	6a1a      	ldr	r2, [r3, #32]
 8004d58:	4b32      	ldr	r3, [pc, #200]	; (8004e24 <HAL_RCC_OscConfig+0x684>)
 8004d5a:	2180      	movs	r1, #128	; 0x80
 8004d5c:	0189      	lsls	r1, r1, #6
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d62:	f7fe fb21 	bl	80033a8 <HAL_GetTick>
 8004d66:	0003      	movs	r3, r0
 8004d68:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d6c:	f7fe fb1c 	bl	80033a8 <HAL_GetTick>
 8004d70:	0002      	movs	r2, r0
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e0c9      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d7e:	4b23      	ldr	r3, [pc, #140]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2202      	movs	r2, #2
 8004d84:	4013      	ands	r3, r2
 8004d86:	d0f1      	beq.n	8004d6c <HAL_RCC_OscConfig+0x5cc>
 8004d88:	e01e      	b.n	8004dc8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004d8a:	4b20      	ldr	r3, [pc, #128]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	4b1f      	ldr	r3, [pc, #124]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004d90:	2101      	movs	r1, #1
 8004d92:	438a      	bics	r2, r1
 8004d94:	609a      	str	r2, [r3, #8]
 8004d96:	4b23      	ldr	r3, [pc, #140]	; (8004e24 <HAL_RCC_OscConfig+0x684>)
 8004d98:	6a1a      	ldr	r2, [r3, #32]
 8004d9a:	4b22      	ldr	r3, [pc, #136]	; (8004e24 <HAL_RCC_OscConfig+0x684>)
 8004d9c:	4922      	ldr	r1, [pc, #136]	; (8004e28 <HAL_RCC_OscConfig+0x688>)
 8004d9e:	400a      	ands	r2, r1
 8004da0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da2:	f7fe fb01 	bl	80033a8 <HAL_GetTick>
 8004da6:	0003      	movs	r3, r0
 8004da8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dac:	f7fe fafc 	bl	80033a8 <HAL_GetTick>
 8004db0:	0002      	movs	r2, r0
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e0a9      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dbe:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d1f1      	bne.n	8004dac <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d100      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x632>
 8004dd0:	e09e      	b.n	8004f10 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	2b0c      	cmp	r3, #12
 8004dd6:	d100      	bne.n	8004dda <HAL_RCC_OscConfig+0x63a>
 8004dd8:	e077      	b.n	8004eca <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d158      	bne.n	8004e94 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de2:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <HAL_RCC_OscConfig+0x66c>)
 8004de8:	4910      	ldr	r1, [pc, #64]	; (8004e2c <HAL_RCC_OscConfig+0x68c>)
 8004dea:	400a      	ands	r2, r1
 8004dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dee:	f7fe fadb 	bl	80033a8 <HAL_GetTick>
 8004df2:	0003      	movs	r3, r0
 8004df4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004df6:	e01b      	b.n	8004e30 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df8:	f7fe fad6 	bl	80033a8 <HAL_GetTick>
 8004dfc:	0002      	movs	r2, r0
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d914      	bls.n	8004e30 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e083      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	fffffeff 	.word	0xfffffeff
 8004e14:	40007000 	.word	0x40007000
 8004e18:	fffffbff 	.word	0xfffffbff
 8004e1c:	00001388 	.word	0x00001388
 8004e20:	efffffff 	.word	0xefffffff
 8004e24:	40010000 	.word	0x40010000
 8004e28:	ffffdfff 	.word	0xffffdfff
 8004e2c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004e30:	4b3a      	ldr	r3, [pc, #232]	; (8004f1c <HAL_RCC_OscConfig+0x77c>)
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	2380      	movs	r3, #128	; 0x80
 8004e36:	049b      	lsls	r3, r3, #18
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d1dd      	bne.n	8004df8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e3c:	4b37      	ldr	r3, [pc, #220]	; (8004f1c <HAL_RCC_OscConfig+0x77c>)
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	4a37      	ldr	r2, [pc, #220]	; (8004f20 <HAL_RCC_OscConfig+0x780>)
 8004e42:	4013      	ands	r3, r2
 8004e44:	0019      	movs	r1, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e54:	431a      	orrs	r2, r3
 8004e56:	4b31      	ldr	r3, [pc, #196]	; (8004f1c <HAL_RCC_OscConfig+0x77c>)
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e5c:	4b2f      	ldr	r3, [pc, #188]	; (8004f1c <HAL_RCC_OscConfig+0x77c>)
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	4b2e      	ldr	r3, [pc, #184]	; (8004f1c <HAL_RCC_OscConfig+0x77c>)
 8004e62:	2180      	movs	r1, #128	; 0x80
 8004e64:	0449      	lsls	r1, r1, #17
 8004e66:	430a      	orrs	r2, r1
 8004e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6a:	f7fe fa9d 	bl	80033a8 <HAL_GetTick>
 8004e6e:	0003      	movs	r3, r0
 8004e70:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e74:	f7fe fa98 	bl	80033a8 <HAL_GetTick>
 8004e78:	0002      	movs	r2, r0
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e045      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004e86:	4b25      	ldr	r3, [pc, #148]	; (8004f1c <HAL_RCC_OscConfig+0x77c>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	049b      	lsls	r3, r3, #18
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d0f0      	beq.n	8004e74 <HAL_RCC_OscConfig+0x6d4>
 8004e92:	e03d      	b.n	8004f10 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e94:	4b21      	ldr	r3, [pc, #132]	; (8004f1c <HAL_RCC_OscConfig+0x77c>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	4b20      	ldr	r3, [pc, #128]	; (8004f1c <HAL_RCC_OscConfig+0x77c>)
 8004e9a:	4922      	ldr	r1, [pc, #136]	; (8004f24 <HAL_RCC_OscConfig+0x784>)
 8004e9c:	400a      	ands	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea0:	f7fe fa82 	bl	80033a8 <HAL_GetTick>
 8004ea4:	0003      	movs	r3, r0
 8004ea6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eaa:	f7fe fa7d 	bl	80033a8 <HAL_GetTick>
 8004eae:	0002      	movs	r2, r0
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e02a      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004ebc:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <HAL_RCC_OscConfig+0x77c>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	2380      	movs	r3, #128	; 0x80
 8004ec2:	049b      	lsls	r3, r3, #18
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	d1f0      	bne.n	8004eaa <HAL_RCC_OscConfig+0x70a>
 8004ec8:	e022      	b.n	8004f10 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d101      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e01d      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ed6:	4b11      	ldr	r3, [pc, #68]	; (8004f1c <HAL_RCC_OscConfig+0x77c>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	2380      	movs	r3, #128	; 0x80
 8004ee0:	025b      	lsls	r3, r3, #9
 8004ee2:	401a      	ands	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d10f      	bne.n	8004f0c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	23f0      	movs	r3, #240	; 0xf0
 8004ef0:	039b      	lsls	r3, r3, #14
 8004ef2:	401a      	ands	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d107      	bne.n	8004f0c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	23c0      	movs	r3, #192	; 0xc0
 8004f00:	041b      	lsls	r3, r3, #16
 8004f02:	401a      	ands	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d001      	beq.n	8004f10 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	0018      	movs	r0, r3
 8004f14:	46bd      	mov	sp, r7
 8004f16:	b00a      	add	sp, #40	; 0x28
 8004f18:	bdb0      	pop	{r4, r5, r7, pc}
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	ff02ffff 	.word	0xff02ffff
 8004f24:	feffffff 	.word	0xfeffffff

08004f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f28:	b5b0      	push	{r4, r5, r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e128      	b.n	800518e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f3c:	4b96      	ldr	r3, [pc, #600]	; (8005198 <HAL_RCC_ClockConfig+0x270>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2201      	movs	r2, #1
 8004f42:	4013      	ands	r3, r2
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d91e      	bls.n	8004f88 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f4a:	4b93      	ldr	r3, [pc, #588]	; (8005198 <HAL_RCC_ClockConfig+0x270>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	4393      	bics	r3, r2
 8004f52:	0019      	movs	r1, r3
 8004f54:	4b90      	ldr	r3, [pc, #576]	; (8005198 <HAL_RCC_ClockConfig+0x270>)
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f5c:	f7fe fa24 	bl	80033a8 <HAL_GetTick>
 8004f60:	0003      	movs	r3, r0
 8004f62:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f64:	e009      	b.n	8004f7a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f66:	f7fe fa1f 	bl	80033a8 <HAL_GetTick>
 8004f6a:	0002      	movs	r2, r0
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	4a8a      	ldr	r2, [pc, #552]	; (800519c <HAL_RCC_ClockConfig+0x274>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e109      	b.n	800518e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f7a:	4b87      	ldr	r3, [pc, #540]	; (8005198 <HAL_RCC_ClockConfig+0x270>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	4013      	ands	r3, r2
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d1ee      	bne.n	8004f66 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d009      	beq.n	8004fa6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f92:	4b83      	ldr	r3, [pc, #524]	; (80051a0 <HAL_RCC_ClockConfig+0x278>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	22f0      	movs	r2, #240	; 0xf0
 8004f98:	4393      	bics	r3, r2
 8004f9a:	0019      	movs	r1, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	4b7f      	ldr	r3, [pc, #508]	; (80051a0 <HAL_RCC_ClockConfig+0x278>)
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2201      	movs	r2, #1
 8004fac:	4013      	ands	r3, r2
 8004fae:	d100      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0x8a>
 8004fb0:	e089      	b.n	80050c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d107      	bne.n	8004fca <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fba:	4b79      	ldr	r3, [pc, #484]	; (80051a0 <HAL_RCC_ClockConfig+0x278>)
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	2380      	movs	r3, #128	; 0x80
 8004fc0:	029b      	lsls	r3, r3, #10
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	d120      	bne.n	8005008 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e0e1      	b.n	800518e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d107      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fd2:	4b73      	ldr	r3, [pc, #460]	; (80051a0 <HAL_RCC_ClockConfig+0x278>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	2380      	movs	r3, #128	; 0x80
 8004fd8:	049b      	lsls	r3, r3, #18
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d114      	bne.n	8005008 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e0d5      	b.n	800518e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d106      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fea:	4b6d      	ldr	r3, [pc, #436]	; (80051a0 <HAL_RCC_ClockConfig+0x278>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2204      	movs	r2, #4
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d109      	bne.n	8005008 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0ca      	b.n	800518e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004ff8:	4b69      	ldr	r3, [pc, #420]	; (80051a0 <HAL_RCC_ClockConfig+0x278>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	2380      	movs	r3, #128	; 0x80
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4013      	ands	r3, r2
 8005002:	d101      	bne.n	8005008 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0c2      	b.n	800518e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005008:	4b65      	ldr	r3, [pc, #404]	; (80051a0 <HAL_RCC_ClockConfig+0x278>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	2203      	movs	r2, #3
 800500e:	4393      	bics	r3, r2
 8005010:	0019      	movs	r1, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	4b62      	ldr	r3, [pc, #392]	; (80051a0 <HAL_RCC_ClockConfig+0x278>)
 8005018:	430a      	orrs	r2, r1
 800501a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800501c:	f7fe f9c4 	bl	80033a8 <HAL_GetTick>
 8005020:	0003      	movs	r3, r0
 8005022:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d111      	bne.n	8005050 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800502c:	e009      	b.n	8005042 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800502e:	f7fe f9bb 	bl	80033a8 <HAL_GetTick>
 8005032:	0002      	movs	r2, r0
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	4a58      	ldr	r2, [pc, #352]	; (800519c <HAL_RCC_ClockConfig+0x274>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e0a5      	b.n	800518e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005042:	4b57      	ldr	r3, [pc, #348]	; (80051a0 <HAL_RCC_ClockConfig+0x278>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	220c      	movs	r2, #12
 8005048:	4013      	ands	r3, r2
 800504a:	2b08      	cmp	r3, #8
 800504c:	d1ef      	bne.n	800502e <HAL_RCC_ClockConfig+0x106>
 800504e:	e03a      	b.n	80050c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b03      	cmp	r3, #3
 8005056:	d111      	bne.n	800507c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005058:	e009      	b.n	800506e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800505a:	f7fe f9a5 	bl	80033a8 <HAL_GetTick>
 800505e:	0002      	movs	r2, r0
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	4a4d      	ldr	r2, [pc, #308]	; (800519c <HAL_RCC_ClockConfig+0x274>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d901      	bls.n	800506e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e08f      	b.n	800518e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800506e:	4b4c      	ldr	r3, [pc, #304]	; (80051a0 <HAL_RCC_ClockConfig+0x278>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	220c      	movs	r2, #12
 8005074:	4013      	ands	r3, r2
 8005076:	2b0c      	cmp	r3, #12
 8005078:	d1ef      	bne.n	800505a <HAL_RCC_ClockConfig+0x132>
 800507a:	e024      	b.n	80050c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d11b      	bne.n	80050bc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005084:	e009      	b.n	800509a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005086:	f7fe f98f 	bl	80033a8 <HAL_GetTick>
 800508a:	0002      	movs	r2, r0
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	4a42      	ldr	r2, [pc, #264]	; (800519c <HAL_RCC_ClockConfig+0x274>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d901      	bls.n	800509a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e079      	b.n	800518e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800509a:	4b41      	ldr	r3, [pc, #260]	; (80051a0 <HAL_RCC_ClockConfig+0x278>)
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	220c      	movs	r2, #12
 80050a0:	4013      	ands	r3, r2
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d1ef      	bne.n	8005086 <HAL_RCC_ClockConfig+0x15e>
 80050a6:	e00e      	b.n	80050c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a8:	f7fe f97e 	bl	80033a8 <HAL_GetTick>
 80050ac:	0002      	movs	r2, r0
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	4a3a      	ldr	r2, [pc, #232]	; (800519c <HAL_RCC_ClockConfig+0x274>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e068      	b.n	800518e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80050bc:	4b38      	ldr	r3, [pc, #224]	; (80051a0 <HAL_RCC_ClockConfig+0x278>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	220c      	movs	r2, #12
 80050c2:	4013      	ands	r3, r2
 80050c4:	d1f0      	bne.n	80050a8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050c6:	4b34      	ldr	r3, [pc, #208]	; (8005198 <HAL_RCC_ClockConfig+0x270>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2201      	movs	r2, #1
 80050cc:	4013      	ands	r3, r2
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d21e      	bcs.n	8005112 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d4:	4b30      	ldr	r3, [pc, #192]	; (8005198 <HAL_RCC_ClockConfig+0x270>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2201      	movs	r2, #1
 80050da:	4393      	bics	r3, r2
 80050dc:	0019      	movs	r1, r3
 80050de:	4b2e      	ldr	r3, [pc, #184]	; (8005198 <HAL_RCC_ClockConfig+0x270>)
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050e6:	f7fe f95f 	bl	80033a8 <HAL_GetTick>
 80050ea:	0003      	movs	r3, r0
 80050ec:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ee:	e009      	b.n	8005104 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f0:	f7fe f95a 	bl	80033a8 <HAL_GetTick>
 80050f4:	0002      	movs	r2, r0
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	4a28      	ldr	r2, [pc, #160]	; (800519c <HAL_RCC_ClockConfig+0x274>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e044      	b.n	800518e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005104:	4b24      	ldr	r3, [pc, #144]	; (8005198 <HAL_RCC_ClockConfig+0x270>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2201      	movs	r2, #1
 800510a:	4013      	ands	r3, r2
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d1ee      	bne.n	80050f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2204      	movs	r2, #4
 8005118:	4013      	ands	r3, r2
 800511a:	d009      	beq.n	8005130 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800511c:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <HAL_RCC_ClockConfig+0x278>)
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	4a20      	ldr	r2, [pc, #128]	; (80051a4 <HAL_RCC_ClockConfig+0x27c>)
 8005122:	4013      	ands	r3, r2
 8005124:	0019      	movs	r1, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68da      	ldr	r2, [r3, #12]
 800512a:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <HAL_RCC_ClockConfig+0x278>)
 800512c:	430a      	orrs	r2, r1
 800512e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2208      	movs	r2, #8
 8005136:	4013      	ands	r3, r2
 8005138:	d00a      	beq.n	8005150 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800513a:	4b19      	ldr	r3, [pc, #100]	; (80051a0 <HAL_RCC_ClockConfig+0x278>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	4a1a      	ldr	r2, [pc, #104]	; (80051a8 <HAL_RCC_ClockConfig+0x280>)
 8005140:	4013      	ands	r3, r2
 8005142:	0019      	movs	r1, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	00da      	lsls	r2, r3, #3
 800514a:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <HAL_RCC_ClockConfig+0x278>)
 800514c:	430a      	orrs	r2, r1
 800514e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005150:	f000 f832 	bl	80051b8 <HAL_RCC_GetSysClockFreq>
 8005154:	0001      	movs	r1, r0
 8005156:	4b12      	ldr	r3, [pc, #72]	; (80051a0 <HAL_RCC_ClockConfig+0x278>)
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	091b      	lsrs	r3, r3, #4
 800515c:	220f      	movs	r2, #15
 800515e:	4013      	ands	r3, r2
 8005160:	4a12      	ldr	r2, [pc, #72]	; (80051ac <HAL_RCC_ClockConfig+0x284>)
 8005162:	5cd3      	ldrb	r3, [r2, r3]
 8005164:	000a      	movs	r2, r1
 8005166:	40da      	lsrs	r2, r3
 8005168:	4b11      	ldr	r3, [pc, #68]	; (80051b0 <HAL_RCC_ClockConfig+0x288>)
 800516a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800516c:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <HAL_RCC_ClockConfig+0x28c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	250b      	movs	r5, #11
 8005172:	197c      	adds	r4, r7, r5
 8005174:	0018      	movs	r0, r3
 8005176:	f7fe f8d1 	bl	800331c <HAL_InitTick>
 800517a:	0003      	movs	r3, r0
 800517c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800517e:	197b      	adds	r3, r7, r5
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005186:	197b      	adds	r3, r7, r5
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	e000      	b.n	800518e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	0018      	movs	r0, r3
 8005190:	46bd      	mov	sp, r7
 8005192:	b004      	add	sp, #16
 8005194:	bdb0      	pop	{r4, r5, r7, pc}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	40022000 	.word	0x40022000
 800519c:	00001388 	.word	0x00001388
 80051a0:	40021000 	.word	0x40021000
 80051a4:	fffff8ff 	.word	0xfffff8ff
 80051a8:	ffffc7ff 	.word	0xffffc7ff
 80051ac:	0800915c 	.word	0x0800915c
 80051b0:	20000004 	.word	0x20000004
 80051b4:	20000008 	.word	0x20000008

080051b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051b8:	b5b0      	push	{r4, r5, r7, lr}
 80051ba:	b08e      	sub	sp, #56	; 0x38
 80051bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80051be:	4b4c      	ldr	r3, [pc, #304]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051c6:	230c      	movs	r3, #12
 80051c8:	4013      	ands	r3, r2
 80051ca:	2b0c      	cmp	r3, #12
 80051cc:	d014      	beq.n	80051f8 <HAL_RCC_GetSysClockFreq+0x40>
 80051ce:	d900      	bls.n	80051d2 <HAL_RCC_GetSysClockFreq+0x1a>
 80051d0:	e07b      	b.n	80052ca <HAL_RCC_GetSysClockFreq+0x112>
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d002      	beq.n	80051dc <HAL_RCC_GetSysClockFreq+0x24>
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d00b      	beq.n	80051f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80051da:	e076      	b.n	80052ca <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80051dc:	4b44      	ldr	r3, [pc, #272]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2210      	movs	r2, #16
 80051e2:	4013      	ands	r3, r2
 80051e4:	d002      	beq.n	80051ec <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80051e6:	4b43      	ldr	r3, [pc, #268]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80051e8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80051ea:	e07c      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80051ec:	4b42      	ldr	r3, [pc, #264]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x140>)
 80051ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80051f0:	e079      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051f2:	4b42      	ldr	r3, [pc, #264]	; (80052fc <HAL_RCC_GetSysClockFreq+0x144>)
 80051f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80051f6:	e076      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80051f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fa:	0c9a      	lsrs	r2, r3, #18
 80051fc:	230f      	movs	r3, #15
 80051fe:	401a      	ands	r2, r3
 8005200:	4b3f      	ldr	r3, [pc, #252]	; (8005300 <HAL_RCC_GetSysClockFreq+0x148>)
 8005202:	5c9b      	ldrb	r3, [r3, r2]
 8005204:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005208:	0d9a      	lsrs	r2, r3, #22
 800520a:	2303      	movs	r3, #3
 800520c:	4013      	ands	r3, r2
 800520e:	3301      	adds	r3, #1
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005212:	4b37      	ldr	r3, [pc, #220]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	2380      	movs	r3, #128	; 0x80
 8005218:	025b      	lsls	r3, r3, #9
 800521a:	4013      	ands	r3, r2
 800521c:	d01a      	beq.n	8005254 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	2300      	movs	r3, #0
 8005224:	61fb      	str	r3, [r7, #28]
 8005226:	4a35      	ldr	r2, [pc, #212]	; (80052fc <HAL_RCC_GetSysClockFreq+0x144>)
 8005228:	2300      	movs	r3, #0
 800522a:	69b8      	ldr	r0, [r7, #24]
 800522c:	69f9      	ldr	r1, [r7, #28]
 800522e:	f7fb f95b 	bl	80004e8 <__aeabi_lmul>
 8005232:	0002      	movs	r2, r0
 8005234:	000b      	movs	r3, r1
 8005236:	0010      	movs	r0, r2
 8005238:	0019      	movs	r1, r3
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f7fb f92f 	bl	80004a8 <__aeabi_uldivmod>
 800524a:	0002      	movs	r2, r0
 800524c:	000b      	movs	r3, r1
 800524e:	0013      	movs	r3, r2
 8005250:	637b      	str	r3, [r7, #52]	; 0x34
 8005252:	e037      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005254:	4b26      	ldr	r3, [pc, #152]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2210      	movs	r2, #16
 800525a:	4013      	ands	r3, r2
 800525c:	d01a      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	60bb      	str	r3, [r7, #8]
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	4a23      	ldr	r2, [pc, #140]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005268:	2300      	movs	r3, #0
 800526a:	68b8      	ldr	r0, [r7, #8]
 800526c:	68f9      	ldr	r1, [r7, #12]
 800526e:	f7fb f93b 	bl	80004e8 <__aeabi_lmul>
 8005272:	0002      	movs	r2, r0
 8005274:	000b      	movs	r3, r1
 8005276:	0010      	movs	r0, r2
 8005278:	0019      	movs	r1, r3
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	603b      	str	r3, [r7, #0]
 800527e:	2300      	movs	r3, #0
 8005280:	607b      	str	r3, [r7, #4]
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f7fb f90f 	bl	80004a8 <__aeabi_uldivmod>
 800528a:	0002      	movs	r2, r0
 800528c:	000b      	movs	r3, r1
 800528e:	0013      	movs	r3, r2
 8005290:	637b      	str	r3, [r7, #52]	; 0x34
 8005292:	e017      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	0018      	movs	r0, r3
 8005298:	2300      	movs	r3, #0
 800529a:	0019      	movs	r1, r3
 800529c:	4a16      	ldr	r2, [pc, #88]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x140>)
 800529e:	2300      	movs	r3, #0
 80052a0:	f7fb f922 	bl	80004e8 <__aeabi_lmul>
 80052a4:	0002      	movs	r2, r0
 80052a6:	000b      	movs	r3, r1
 80052a8:	0010      	movs	r0, r2
 80052aa:	0019      	movs	r1, r3
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	001c      	movs	r4, r3
 80052b0:	2300      	movs	r3, #0
 80052b2:	001d      	movs	r5, r3
 80052b4:	0022      	movs	r2, r4
 80052b6:	002b      	movs	r3, r5
 80052b8:	f7fb f8f6 	bl	80004a8 <__aeabi_uldivmod>
 80052bc:	0002      	movs	r2, r0
 80052be:	000b      	movs	r3, r1
 80052c0:	0013      	movs	r3, r2
 80052c2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80052c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80052c8:	e00d      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80052ca:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	0b5b      	lsrs	r3, r3, #13
 80052d0:	2207      	movs	r2, #7
 80052d2:	4013      	ands	r3, r2
 80052d4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	3301      	adds	r3, #1
 80052da:	2280      	movs	r2, #128	; 0x80
 80052dc:	0212      	lsls	r2, r2, #8
 80052de:	409a      	lsls	r2, r3
 80052e0:	0013      	movs	r3, r2
 80052e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80052e4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80052e8:	0018      	movs	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b00e      	add	sp, #56	; 0x38
 80052ee:	bdb0      	pop	{r4, r5, r7, pc}
 80052f0:	40021000 	.word	0x40021000
 80052f4:	003d0900 	.word	0x003d0900
 80052f8:	00f42400 	.word	0x00f42400
 80052fc:	007a1200 	.word	0x007a1200
 8005300:	08009174 	.word	0x08009174

08005304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005308:	4b02      	ldr	r3, [pc, #8]	; (8005314 <HAL_RCC_GetHCLKFreq+0x10>)
 800530a:	681b      	ldr	r3, [r3, #0]
}
 800530c:	0018      	movs	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	20000004 	.word	0x20000004

08005318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800531c:	f7ff fff2 	bl	8005304 <HAL_RCC_GetHCLKFreq>
 8005320:	0001      	movs	r1, r0
 8005322:	4b06      	ldr	r3, [pc, #24]	; (800533c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	0a1b      	lsrs	r3, r3, #8
 8005328:	2207      	movs	r2, #7
 800532a:	4013      	ands	r3, r2
 800532c:	4a04      	ldr	r2, [pc, #16]	; (8005340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800532e:	5cd3      	ldrb	r3, [r2, r3]
 8005330:	40d9      	lsrs	r1, r3
 8005332:	000b      	movs	r3, r1
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	40021000 	.word	0x40021000
 8005340:	0800916c 	.word	0x0800916c

08005344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005348:	f7ff ffdc 	bl	8005304 <HAL_RCC_GetHCLKFreq>
 800534c:	0001      	movs	r1, r0
 800534e:	4b06      	ldr	r3, [pc, #24]	; (8005368 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	0adb      	lsrs	r3, r3, #11
 8005354:	2207      	movs	r2, #7
 8005356:	4013      	ands	r3, r2
 8005358:	4a04      	ldr	r2, [pc, #16]	; (800536c <HAL_RCC_GetPCLK2Freq+0x28>)
 800535a:	5cd3      	ldrb	r3, [r2, r3]
 800535c:	40d9      	lsrs	r1, r3
 800535e:	000b      	movs	r3, r1
}
 8005360:	0018      	movs	r0, r3
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	40021000 	.word	0x40021000
 800536c:	0800916c 	.word	0x0800916c

08005370 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005378:	2317      	movs	r3, #23
 800537a:	18fb      	adds	r3, r7, r3
 800537c:	2200      	movs	r2, #0
 800537e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2220      	movs	r2, #32
 8005386:	4013      	ands	r3, r2
 8005388:	d106      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	2380      	movs	r3, #128	; 0x80
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	4013      	ands	r3, r2
 8005394:	d100      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005396:	e104      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005398:	4bb1      	ldr	r3, [pc, #708]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800539a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800539c:	2380      	movs	r3, #128	; 0x80
 800539e:	055b      	lsls	r3, r3, #21
 80053a0:	4013      	ands	r3, r2
 80053a2:	d10a      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a4:	4bae      	ldr	r3, [pc, #696]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053a8:	4bad      	ldr	r3, [pc, #692]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053aa:	2180      	movs	r1, #128	; 0x80
 80053ac:	0549      	lsls	r1, r1, #21
 80053ae:	430a      	orrs	r2, r1
 80053b0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80053b2:	2317      	movs	r3, #23
 80053b4:	18fb      	adds	r3, r7, r3
 80053b6:	2201      	movs	r2, #1
 80053b8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ba:	4baa      	ldr	r3, [pc, #680]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	2380      	movs	r3, #128	; 0x80
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	4013      	ands	r3, r2
 80053c4:	d11a      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053c6:	4ba7      	ldr	r3, [pc, #668]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4ba6      	ldr	r3, [pc, #664]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053cc:	2180      	movs	r1, #128	; 0x80
 80053ce:	0049      	lsls	r1, r1, #1
 80053d0:	430a      	orrs	r2, r1
 80053d2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053d4:	f7fd ffe8 	bl	80033a8 <HAL_GetTick>
 80053d8:	0003      	movs	r3, r0
 80053da:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053dc:	e008      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053de:	f7fd ffe3 	bl	80033a8 <HAL_GetTick>
 80053e2:	0002      	movs	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b64      	cmp	r3, #100	; 0x64
 80053ea:	d901      	bls.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e133      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f0:	4b9c      	ldr	r3, [pc, #624]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	2380      	movs	r3, #128	; 0x80
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	4013      	ands	r3, r2
 80053fa:	d0f0      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80053fc:	4b98      	ldr	r3, [pc, #608]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	23c0      	movs	r3, #192	; 0xc0
 8005402:	039b      	lsls	r3, r3, #14
 8005404:	4013      	ands	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	23c0      	movs	r3, #192	; 0xc0
 800540e:	039b      	lsls	r3, r3, #14
 8005410:	4013      	ands	r3, r2
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	429a      	cmp	r2, r3
 8005416:	d107      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	23c0      	movs	r3, #192	; 0xc0
 800541e:	039b      	lsls	r3, r3, #14
 8005420:	4013      	ands	r3, r2
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	429a      	cmp	r2, r3
 8005426:	d013      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	23c0      	movs	r3, #192	; 0xc0
 800542e:	029b      	lsls	r3, r3, #10
 8005430:	401a      	ands	r2, r3
 8005432:	23c0      	movs	r3, #192	; 0xc0
 8005434:	029b      	lsls	r3, r3, #10
 8005436:	429a      	cmp	r2, r3
 8005438:	d10a      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800543a:	4b89      	ldr	r3, [pc, #548]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	2380      	movs	r3, #128	; 0x80
 8005440:	029b      	lsls	r3, r3, #10
 8005442:	401a      	ands	r2, r3
 8005444:	2380      	movs	r3, #128	; 0x80
 8005446:	029b      	lsls	r3, r3, #10
 8005448:	429a      	cmp	r2, r3
 800544a:	d101      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e103      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005450:	4b83      	ldr	r3, [pc, #524]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005452:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005454:	23c0      	movs	r3, #192	; 0xc0
 8005456:	029b      	lsls	r3, r3, #10
 8005458:	4013      	ands	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d049      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	23c0      	movs	r3, #192	; 0xc0
 8005468:	029b      	lsls	r3, r3, #10
 800546a:	4013      	ands	r3, r2
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	429a      	cmp	r2, r3
 8005470:	d004      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2220      	movs	r2, #32
 8005478:	4013      	ands	r3, r2
 800547a:	d10d      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	23c0      	movs	r3, #192	; 0xc0
 8005482:	029b      	lsls	r3, r3, #10
 8005484:	4013      	ands	r3, r2
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	429a      	cmp	r2, r3
 800548a:	d034      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	2380      	movs	r3, #128	; 0x80
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	4013      	ands	r3, r2
 8005496:	d02e      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005498:	4b71      	ldr	r3, [pc, #452]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800549a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800549c:	4a72      	ldr	r2, [pc, #456]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800549e:	4013      	ands	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054a2:	4b6f      	ldr	r3, [pc, #444]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054a6:	4b6e      	ldr	r3, [pc, #440]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054a8:	2180      	movs	r1, #128	; 0x80
 80054aa:	0309      	lsls	r1, r1, #12
 80054ac:	430a      	orrs	r2, r1
 80054ae:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054b0:	4b6b      	ldr	r3, [pc, #428]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054b4:	4b6a      	ldr	r3, [pc, #424]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054b6:	496d      	ldr	r1, [pc, #436]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80054b8:	400a      	ands	r2, r1
 80054ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80054bc:	4b68      	ldr	r3, [pc, #416]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	2380      	movs	r3, #128	; 0x80
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	4013      	ands	r3, r2
 80054ca:	d014      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054cc:	f7fd ff6c 	bl	80033a8 <HAL_GetTick>
 80054d0:	0003      	movs	r3, r0
 80054d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054d4:	e009      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054d6:	f7fd ff67 	bl	80033a8 <HAL_GetTick>
 80054da:	0002      	movs	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	4a63      	ldr	r2, [pc, #396]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d901      	bls.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e0b6      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054ea:	4b5d      	ldr	r3, [pc, #372]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054ee:	2380      	movs	r3, #128	; 0x80
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4013      	ands	r3, r2
 80054f4:	d0ef      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	2380      	movs	r3, #128	; 0x80
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	4013      	ands	r3, r2
 8005500:	d01f      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	23c0      	movs	r3, #192	; 0xc0
 8005508:	029b      	lsls	r3, r3, #10
 800550a:	401a      	ands	r2, r3
 800550c:	23c0      	movs	r3, #192	; 0xc0
 800550e:	029b      	lsls	r3, r3, #10
 8005510:	429a      	cmp	r2, r3
 8005512:	d10c      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005514:	4b52      	ldr	r3, [pc, #328]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a56      	ldr	r2, [pc, #344]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800551a:	4013      	ands	r3, r2
 800551c:	0019      	movs	r1, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	23c0      	movs	r3, #192	; 0xc0
 8005524:	039b      	lsls	r3, r3, #14
 8005526:	401a      	ands	r2, r3
 8005528:	4b4d      	ldr	r3, [pc, #308]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800552a:	430a      	orrs	r2, r1
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	4b4c      	ldr	r3, [pc, #304]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005530:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	23c0      	movs	r3, #192	; 0xc0
 8005538:	029b      	lsls	r3, r3, #10
 800553a:	401a      	ands	r2, r3
 800553c:	4b48      	ldr	r3, [pc, #288]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800553e:	430a      	orrs	r2, r1
 8005540:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2220      	movs	r2, #32
 8005548:	4013      	ands	r3, r2
 800554a:	d01f      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	23c0      	movs	r3, #192	; 0xc0
 8005552:	029b      	lsls	r3, r3, #10
 8005554:	401a      	ands	r2, r3
 8005556:	23c0      	movs	r3, #192	; 0xc0
 8005558:	029b      	lsls	r3, r3, #10
 800555a:	429a      	cmp	r2, r3
 800555c:	d10c      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800555e:	4b40      	ldr	r3, [pc, #256]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a44      	ldr	r2, [pc, #272]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005564:	4013      	ands	r3, r2
 8005566:	0019      	movs	r1, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	23c0      	movs	r3, #192	; 0xc0
 800556e:	039b      	lsls	r3, r3, #14
 8005570:	401a      	ands	r2, r3
 8005572:	4b3b      	ldr	r3, [pc, #236]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005574:	430a      	orrs	r2, r1
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	4b39      	ldr	r3, [pc, #228]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800557a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	23c0      	movs	r3, #192	; 0xc0
 8005582:	029b      	lsls	r3, r3, #10
 8005584:	401a      	ands	r2, r3
 8005586:	4b36      	ldr	r3, [pc, #216]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005588:	430a      	orrs	r2, r1
 800558a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800558c:	2317      	movs	r3, #23
 800558e:	18fb      	adds	r3, r7, r3
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d105      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005596:	4b32      	ldr	r3, [pc, #200]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800559a:	4b31      	ldr	r3, [pc, #196]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800559c:	4936      	ldr	r1, [pc, #216]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800559e:	400a      	ands	r2, r1
 80055a0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2201      	movs	r2, #1
 80055a8:	4013      	ands	r3, r2
 80055aa:	d009      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055ac:	4b2c      	ldr	r3, [pc, #176]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b0:	2203      	movs	r2, #3
 80055b2:	4393      	bics	r3, r2
 80055b4:	0019      	movs	r1, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	4b29      	ldr	r3, [pc, #164]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055bc:	430a      	orrs	r2, r1
 80055be:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2202      	movs	r2, #2
 80055c6:	4013      	ands	r3, r2
 80055c8:	d009      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055ca:	4b25      	ldr	r3, [pc, #148]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ce:	220c      	movs	r2, #12
 80055d0:	4393      	bics	r3, r2
 80055d2:	0019      	movs	r1, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	4b21      	ldr	r3, [pc, #132]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055da:	430a      	orrs	r2, r1
 80055dc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2204      	movs	r2, #4
 80055e4:	4013      	ands	r3, r2
 80055e6:	d009      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055e8:	4b1d      	ldr	r3, [pc, #116]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ec:	4a23      	ldr	r2, [pc, #140]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80055ee:	4013      	ands	r3, r2
 80055f0:	0019      	movs	r1, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	695a      	ldr	r2, [r3, #20]
 80055f6:	4b1a      	ldr	r3, [pc, #104]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055f8:	430a      	orrs	r2, r1
 80055fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2208      	movs	r2, #8
 8005602:	4013      	ands	r3, r2
 8005604:	d009      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005606:	4b16      	ldr	r3, [pc, #88]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560a:	4a1d      	ldr	r2, [pc, #116]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800560c:	4013      	ands	r3, r2
 800560e:	0019      	movs	r1, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699a      	ldr	r2, [r3, #24]
 8005614:	4b12      	ldr	r3, [pc, #72]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005616:	430a      	orrs	r2, r1
 8005618:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2240      	movs	r2, #64	; 0x40
 8005620:	4013      	ands	r3, r2
 8005622:	d009      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005624:	4b0e      	ldr	r3, [pc, #56]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005628:	4a16      	ldr	r2, [pc, #88]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800562a:	4013      	ands	r3, r2
 800562c:	0019      	movs	r1, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1a      	ldr	r2, [r3, #32]
 8005632:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005634:	430a      	orrs	r2, r1
 8005636:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2280      	movs	r2, #128	; 0x80
 800563e:	4013      	ands	r3, r2
 8005640:	d009      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005642:	4b07      	ldr	r3, [pc, #28]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005646:	4a10      	ldr	r2, [pc, #64]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005648:	4013      	ands	r3, r2
 800564a:	0019      	movs	r1, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	4b03      	ldr	r3, [pc, #12]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005652:	430a      	orrs	r2, r1
 8005654:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	0018      	movs	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	b006      	add	sp, #24
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40021000 	.word	0x40021000
 8005664:	40007000 	.word	0x40007000
 8005668:	fffcffff 	.word	0xfffcffff
 800566c:	fff7ffff 	.word	0xfff7ffff
 8005670:	00001388 	.word	0x00001388
 8005674:	ffcfffff 	.word	0xffcfffff
 8005678:	efffffff 	.word	0xefffffff
 800567c:	fffff3ff 	.word	0xfffff3ff
 8005680:	ffffcfff 	.word	0xffffcfff
 8005684:	fbffffff 	.word	0xfbffffff
 8005688:	fff3ffff 	.word	0xfff3ffff

0800568c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e044      	b.n	8005728 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d107      	bne.n	80056b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2278      	movs	r2, #120	; 0x78
 80056aa:	2100      	movs	r1, #0
 80056ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	0018      	movs	r0, r3
 80056b2:	f7fd fb31 	bl	8002d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2224      	movs	r2, #36	; 0x24
 80056ba:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2101      	movs	r1, #1
 80056c8:	438a      	bics	r2, r1
 80056ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	0018      	movs	r0, r3
 80056d0:	f000 f8d0 	bl	8005874 <UART_SetConfig>
 80056d4:	0003      	movs	r3, r0
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e024      	b.n	8005728 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	0018      	movs	r0, r3
 80056ea:	f000 fb47 	bl	8005d7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	490d      	ldr	r1, [pc, #52]	; (8005730 <HAL_UART_Init+0xa4>)
 80056fa:	400a      	ands	r2, r1
 80056fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	212a      	movs	r1, #42	; 0x2a
 800570a:	438a      	bics	r2, r1
 800570c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2101      	movs	r1, #1
 800571a:	430a      	orrs	r2, r1
 800571c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	0018      	movs	r0, r3
 8005722:	f000 fbdf 	bl	8005ee4 <UART_CheckIdleState>
 8005726:	0003      	movs	r3, r0
}
 8005728:	0018      	movs	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	b002      	add	sp, #8
 800572e:	bd80      	pop	{r7, pc}
 8005730:	ffffb7ff 	.word	0xffffb7ff

08005734 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08a      	sub	sp, #40	; 0x28
 8005738:	af02      	add	r7, sp, #8
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	603b      	str	r3, [r7, #0]
 8005740:	1dbb      	adds	r3, r7, #6
 8005742:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005748:	2b20      	cmp	r3, #32
 800574a:	d000      	beq.n	800574e <HAL_UART_Transmit+0x1a>
 800574c:	e08c      	b.n	8005868 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <HAL_UART_Transmit+0x28>
 8005754:	1dbb      	adds	r3, r7, #6
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e084      	b.n	800586a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	2380      	movs	r3, #128	; 0x80
 8005766:	015b      	lsls	r3, r3, #5
 8005768:	429a      	cmp	r2, r3
 800576a:	d109      	bne.n	8005780 <HAL_UART_Transmit+0x4c>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d105      	bne.n	8005780 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2201      	movs	r2, #1
 8005778:	4013      	ands	r3, r2
 800577a:	d001      	beq.n	8005780 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e074      	b.n	800586a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2284      	movs	r2, #132	; 0x84
 8005784:	2100      	movs	r1, #0
 8005786:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2221      	movs	r2, #33	; 0x21
 800578c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800578e:	f7fd fe0b 	bl	80033a8 <HAL_GetTick>
 8005792:	0003      	movs	r3, r0
 8005794:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1dba      	adds	r2, r7, #6
 800579a:	2150      	movs	r1, #80	; 0x50
 800579c:	8812      	ldrh	r2, [r2, #0]
 800579e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	1dba      	adds	r2, r7, #6
 80057a4:	2152      	movs	r1, #82	; 0x52
 80057a6:	8812      	ldrh	r2, [r2, #0]
 80057a8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	689a      	ldr	r2, [r3, #8]
 80057ae:	2380      	movs	r3, #128	; 0x80
 80057b0:	015b      	lsls	r3, r3, #5
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d108      	bne.n	80057c8 <HAL_UART_Transmit+0x94>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d104      	bne.n	80057c8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80057be:	2300      	movs	r3, #0
 80057c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	61bb      	str	r3, [r7, #24]
 80057c6:	e003      	b.n	80057d0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057cc:	2300      	movs	r3, #0
 80057ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057d0:	e02f      	b.n	8005832 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	0013      	movs	r3, r2
 80057dc:	2200      	movs	r2, #0
 80057de:	2180      	movs	r1, #128	; 0x80
 80057e0:	f000 fc28 	bl	8006034 <UART_WaitOnFlagUntilTimeout>
 80057e4:	1e03      	subs	r3, r0, #0
 80057e6:	d004      	beq.n	80057f2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2220      	movs	r2, #32
 80057ec:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e03b      	b.n	800586a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10b      	bne.n	8005810 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	001a      	movs	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	05d2      	lsls	r2, r2, #23
 8005804:	0dd2      	lsrs	r2, r2, #23
 8005806:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	3302      	adds	r3, #2
 800580c:	61bb      	str	r3, [r7, #24]
 800580e:	e007      	b.n	8005820 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	781a      	ldrb	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	3301      	adds	r3, #1
 800581e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2252      	movs	r2, #82	; 0x52
 8005824:	5a9b      	ldrh	r3, [r3, r2]
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b299      	uxth	r1, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2252      	movs	r2, #82	; 0x52
 8005830:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2252      	movs	r2, #82	; 0x52
 8005836:	5a9b      	ldrh	r3, [r3, r2]
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1c9      	bne.n	80057d2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	0013      	movs	r3, r2
 8005848:	2200      	movs	r2, #0
 800584a:	2140      	movs	r1, #64	; 0x40
 800584c:	f000 fbf2 	bl	8006034 <UART_WaitOnFlagUntilTimeout>
 8005850:	1e03      	subs	r3, r0, #0
 8005852:	d004      	beq.n	800585e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e005      	b.n	800586a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2220      	movs	r2, #32
 8005862:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005864:	2300      	movs	r3, #0
 8005866:	e000      	b.n	800586a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005868:	2302      	movs	r3, #2
  }
}
 800586a:	0018      	movs	r0, r3
 800586c:	46bd      	mov	sp, r7
 800586e:	b008      	add	sp, #32
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005874:	b5b0      	push	{r4, r5, r7, lr}
 8005876:	b08e      	sub	sp, #56	; 0x38
 8005878:	af00      	add	r7, sp, #0
 800587a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800587c:	231a      	movs	r3, #26
 800587e:	2218      	movs	r2, #24
 8005880:	189b      	adds	r3, r3, r2
 8005882:	19db      	adds	r3, r3, r7
 8005884:	2200      	movs	r2, #0
 8005886:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	431a      	orrs	r2, r3
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	431a      	orrs	r2, r3
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	4313      	orrs	r3, r2
 800589e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4ac6      	ldr	r2, [pc, #792]	; (8005bc0 <UART_SetConfig+0x34c>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	0019      	movs	r1, r3
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058b2:	430a      	orrs	r2, r1
 80058b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	4ac1      	ldr	r2, [pc, #772]	; (8005bc4 <UART_SetConfig+0x350>)
 80058be:	4013      	ands	r3, r2
 80058c0:	0019      	movs	r1, r3
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4abb      	ldr	r2, [pc, #748]	; (8005bc8 <UART_SetConfig+0x354>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d004      	beq.n	80058e8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058e4:	4313      	orrs	r3, r2
 80058e6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	4ab7      	ldr	r2, [pc, #732]	; (8005bcc <UART_SetConfig+0x358>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	0019      	movs	r1, r3
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058fa:	430a      	orrs	r2, r1
 80058fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4ab3      	ldr	r2, [pc, #716]	; (8005bd0 <UART_SetConfig+0x35c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d131      	bne.n	800596c <UART_SetConfig+0xf8>
 8005908:	4bb2      	ldr	r3, [pc, #712]	; (8005bd4 <UART_SetConfig+0x360>)
 800590a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590c:	2203      	movs	r2, #3
 800590e:	4013      	ands	r3, r2
 8005910:	2b03      	cmp	r3, #3
 8005912:	d01d      	beq.n	8005950 <UART_SetConfig+0xdc>
 8005914:	d823      	bhi.n	800595e <UART_SetConfig+0xea>
 8005916:	2b02      	cmp	r3, #2
 8005918:	d00c      	beq.n	8005934 <UART_SetConfig+0xc0>
 800591a:	d820      	bhi.n	800595e <UART_SetConfig+0xea>
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <UART_SetConfig+0xb2>
 8005920:	2b01      	cmp	r3, #1
 8005922:	d00e      	beq.n	8005942 <UART_SetConfig+0xce>
 8005924:	e01b      	b.n	800595e <UART_SetConfig+0xea>
 8005926:	231b      	movs	r3, #27
 8005928:	2218      	movs	r2, #24
 800592a:	189b      	adds	r3, r3, r2
 800592c:	19db      	adds	r3, r3, r7
 800592e:	2201      	movs	r2, #1
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	e09c      	b.n	8005a6e <UART_SetConfig+0x1fa>
 8005934:	231b      	movs	r3, #27
 8005936:	2218      	movs	r2, #24
 8005938:	189b      	adds	r3, r3, r2
 800593a:	19db      	adds	r3, r3, r7
 800593c:	2202      	movs	r2, #2
 800593e:	701a      	strb	r2, [r3, #0]
 8005940:	e095      	b.n	8005a6e <UART_SetConfig+0x1fa>
 8005942:	231b      	movs	r3, #27
 8005944:	2218      	movs	r2, #24
 8005946:	189b      	adds	r3, r3, r2
 8005948:	19db      	adds	r3, r3, r7
 800594a:	2204      	movs	r2, #4
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	e08e      	b.n	8005a6e <UART_SetConfig+0x1fa>
 8005950:	231b      	movs	r3, #27
 8005952:	2218      	movs	r2, #24
 8005954:	189b      	adds	r3, r3, r2
 8005956:	19db      	adds	r3, r3, r7
 8005958:	2208      	movs	r2, #8
 800595a:	701a      	strb	r2, [r3, #0]
 800595c:	e087      	b.n	8005a6e <UART_SetConfig+0x1fa>
 800595e:	231b      	movs	r3, #27
 8005960:	2218      	movs	r2, #24
 8005962:	189b      	adds	r3, r3, r2
 8005964:	19db      	adds	r3, r3, r7
 8005966:	2210      	movs	r2, #16
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	e080      	b.n	8005a6e <UART_SetConfig+0x1fa>
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a99      	ldr	r2, [pc, #612]	; (8005bd8 <UART_SetConfig+0x364>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d131      	bne.n	80059da <UART_SetConfig+0x166>
 8005976:	4b97      	ldr	r3, [pc, #604]	; (8005bd4 <UART_SetConfig+0x360>)
 8005978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597a:	220c      	movs	r2, #12
 800597c:	4013      	ands	r3, r2
 800597e:	2b0c      	cmp	r3, #12
 8005980:	d01d      	beq.n	80059be <UART_SetConfig+0x14a>
 8005982:	d823      	bhi.n	80059cc <UART_SetConfig+0x158>
 8005984:	2b08      	cmp	r3, #8
 8005986:	d00c      	beq.n	80059a2 <UART_SetConfig+0x12e>
 8005988:	d820      	bhi.n	80059cc <UART_SetConfig+0x158>
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <UART_SetConfig+0x120>
 800598e:	2b04      	cmp	r3, #4
 8005990:	d00e      	beq.n	80059b0 <UART_SetConfig+0x13c>
 8005992:	e01b      	b.n	80059cc <UART_SetConfig+0x158>
 8005994:	231b      	movs	r3, #27
 8005996:	2218      	movs	r2, #24
 8005998:	189b      	adds	r3, r3, r2
 800599a:	19db      	adds	r3, r3, r7
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	e065      	b.n	8005a6e <UART_SetConfig+0x1fa>
 80059a2:	231b      	movs	r3, #27
 80059a4:	2218      	movs	r2, #24
 80059a6:	189b      	adds	r3, r3, r2
 80059a8:	19db      	adds	r3, r3, r7
 80059aa:	2202      	movs	r2, #2
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	e05e      	b.n	8005a6e <UART_SetConfig+0x1fa>
 80059b0:	231b      	movs	r3, #27
 80059b2:	2218      	movs	r2, #24
 80059b4:	189b      	adds	r3, r3, r2
 80059b6:	19db      	adds	r3, r3, r7
 80059b8:	2204      	movs	r2, #4
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	e057      	b.n	8005a6e <UART_SetConfig+0x1fa>
 80059be:	231b      	movs	r3, #27
 80059c0:	2218      	movs	r2, #24
 80059c2:	189b      	adds	r3, r3, r2
 80059c4:	19db      	adds	r3, r3, r7
 80059c6:	2208      	movs	r2, #8
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	e050      	b.n	8005a6e <UART_SetConfig+0x1fa>
 80059cc:	231b      	movs	r3, #27
 80059ce:	2218      	movs	r2, #24
 80059d0:	189b      	adds	r3, r3, r2
 80059d2:	19db      	adds	r3, r3, r7
 80059d4:	2210      	movs	r2, #16
 80059d6:	701a      	strb	r2, [r3, #0]
 80059d8:	e049      	b.n	8005a6e <UART_SetConfig+0x1fa>
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a7a      	ldr	r2, [pc, #488]	; (8005bc8 <UART_SetConfig+0x354>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d13e      	bne.n	8005a62 <UART_SetConfig+0x1ee>
 80059e4:	4b7b      	ldr	r3, [pc, #492]	; (8005bd4 <UART_SetConfig+0x360>)
 80059e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059e8:	23c0      	movs	r3, #192	; 0xc0
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	4013      	ands	r3, r2
 80059ee:	22c0      	movs	r2, #192	; 0xc0
 80059f0:	0112      	lsls	r2, r2, #4
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d027      	beq.n	8005a46 <UART_SetConfig+0x1d2>
 80059f6:	22c0      	movs	r2, #192	; 0xc0
 80059f8:	0112      	lsls	r2, r2, #4
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d82a      	bhi.n	8005a54 <UART_SetConfig+0x1e0>
 80059fe:	2280      	movs	r2, #128	; 0x80
 8005a00:	0112      	lsls	r2, r2, #4
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d011      	beq.n	8005a2a <UART_SetConfig+0x1b6>
 8005a06:	2280      	movs	r2, #128	; 0x80
 8005a08:	0112      	lsls	r2, r2, #4
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d822      	bhi.n	8005a54 <UART_SetConfig+0x1e0>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d004      	beq.n	8005a1c <UART_SetConfig+0x1a8>
 8005a12:	2280      	movs	r2, #128	; 0x80
 8005a14:	00d2      	lsls	r2, r2, #3
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00e      	beq.n	8005a38 <UART_SetConfig+0x1c4>
 8005a1a:	e01b      	b.n	8005a54 <UART_SetConfig+0x1e0>
 8005a1c:	231b      	movs	r3, #27
 8005a1e:	2218      	movs	r2, #24
 8005a20:	189b      	adds	r3, r3, r2
 8005a22:	19db      	adds	r3, r3, r7
 8005a24:	2200      	movs	r2, #0
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	e021      	b.n	8005a6e <UART_SetConfig+0x1fa>
 8005a2a:	231b      	movs	r3, #27
 8005a2c:	2218      	movs	r2, #24
 8005a2e:	189b      	adds	r3, r3, r2
 8005a30:	19db      	adds	r3, r3, r7
 8005a32:	2202      	movs	r2, #2
 8005a34:	701a      	strb	r2, [r3, #0]
 8005a36:	e01a      	b.n	8005a6e <UART_SetConfig+0x1fa>
 8005a38:	231b      	movs	r3, #27
 8005a3a:	2218      	movs	r2, #24
 8005a3c:	189b      	adds	r3, r3, r2
 8005a3e:	19db      	adds	r3, r3, r7
 8005a40:	2204      	movs	r2, #4
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	e013      	b.n	8005a6e <UART_SetConfig+0x1fa>
 8005a46:	231b      	movs	r3, #27
 8005a48:	2218      	movs	r2, #24
 8005a4a:	189b      	adds	r3, r3, r2
 8005a4c:	19db      	adds	r3, r3, r7
 8005a4e:	2208      	movs	r2, #8
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	e00c      	b.n	8005a6e <UART_SetConfig+0x1fa>
 8005a54:	231b      	movs	r3, #27
 8005a56:	2218      	movs	r2, #24
 8005a58:	189b      	adds	r3, r3, r2
 8005a5a:	19db      	adds	r3, r3, r7
 8005a5c:	2210      	movs	r2, #16
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	e005      	b.n	8005a6e <UART_SetConfig+0x1fa>
 8005a62:	231b      	movs	r3, #27
 8005a64:	2218      	movs	r2, #24
 8005a66:	189b      	adds	r3, r3, r2
 8005a68:	19db      	adds	r3, r3, r7
 8005a6a:	2210      	movs	r2, #16
 8005a6c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a55      	ldr	r2, [pc, #340]	; (8005bc8 <UART_SetConfig+0x354>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d000      	beq.n	8005a7a <UART_SetConfig+0x206>
 8005a78:	e084      	b.n	8005b84 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a7a:	231b      	movs	r3, #27
 8005a7c:	2218      	movs	r2, #24
 8005a7e:	189b      	adds	r3, r3, r2
 8005a80:	19db      	adds	r3, r3, r7
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d01d      	beq.n	8005ac4 <UART_SetConfig+0x250>
 8005a88:	dc20      	bgt.n	8005acc <UART_SetConfig+0x258>
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d015      	beq.n	8005aba <UART_SetConfig+0x246>
 8005a8e:	dc1d      	bgt.n	8005acc <UART_SetConfig+0x258>
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <UART_SetConfig+0x226>
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d005      	beq.n	8005aa4 <UART_SetConfig+0x230>
 8005a98:	e018      	b.n	8005acc <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a9a:	f7ff fc3d 	bl	8005318 <HAL_RCC_GetPCLK1Freq>
 8005a9e:	0003      	movs	r3, r0
 8005aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005aa2:	e01c      	b.n	8005ade <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aa4:	4b4b      	ldr	r3, [pc, #300]	; (8005bd4 <UART_SetConfig+0x360>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2210      	movs	r2, #16
 8005aaa:	4013      	ands	r3, r2
 8005aac:	d002      	beq.n	8005ab4 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005aae:	4b4b      	ldr	r3, [pc, #300]	; (8005bdc <UART_SetConfig+0x368>)
 8005ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ab2:	e014      	b.n	8005ade <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8005ab4:	4b4a      	ldr	r3, [pc, #296]	; (8005be0 <UART_SetConfig+0x36c>)
 8005ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ab8:	e011      	b.n	8005ade <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aba:	f7ff fb7d 	bl	80051b8 <HAL_RCC_GetSysClockFreq>
 8005abe:	0003      	movs	r3, r0
 8005ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ac2:	e00c      	b.n	8005ade <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ac4:	2380      	movs	r3, #128	; 0x80
 8005ac6:	021b      	lsls	r3, r3, #8
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005aca:	e008      	b.n	8005ade <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005ad0:	231a      	movs	r3, #26
 8005ad2:	2218      	movs	r2, #24
 8005ad4:	189b      	adds	r3, r3, r2
 8005ad6:	19db      	adds	r3, r3, r7
 8005ad8:	2201      	movs	r2, #1
 8005ada:	701a      	strb	r2, [r3, #0]
        break;
 8005adc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d100      	bne.n	8005ae6 <UART_SetConfig+0x272>
 8005ae4:	e132      	b.n	8005d4c <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	0013      	movs	r3, r2
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	189b      	adds	r3, r3, r2
 8005af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d305      	bcc.n	8005b02 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d906      	bls.n	8005b10 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8005b02:	231a      	movs	r3, #26
 8005b04:	2218      	movs	r2, #24
 8005b06:	189b      	adds	r3, r3, r2
 8005b08:	19db      	adds	r3, r3, r7
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	701a      	strb	r2, [r3, #0]
 8005b0e:	e11d      	b.n	8005d4c <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	2300      	movs	r3, #0
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	6939      	ldr	r1, [r7, #16]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	000b      	movs	r3, r1
 8005b1e:	0e1b      	lsrs	r3, r3, #24
 8005b20:	0010      	movs	r0, r2
 8005b22:	0205      	lsls	r5, r0, #8
 8005b24:	431d      	orrs	r5, r3
 8005b26:	000b      	movs	r3, r1
 8005b28:	021c      	lsls	r4, r3, #8
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	60bb      	str	r3, [r7, #8]
 8005b32:	2300      	movs	r3, #0
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	68b8      	ldr	r0, [r7, #8]
 8005b38:	68f9      	ldr	r1, [r7, #12]
 8005b3a:	1900      	adds	r0, r0, r4
 8005b3c:	4169      	adcs	r1, r5
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	2300      	movs	r3, #0
 8005b46:	607b      	str	r3, [r7, #4]
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f7fa fcac 	bl	80004a8 <__aeabi_uldivmod>
 8005b50:	0002      	movs	r2, r0
 8005b52:	000b      	movs	r3, r1
 8005b54:	0013      	movs	r3, r2
 8005b56:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b5a:	23c0      	movs	r3, #192	; 0xc0
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d309      	bcc.n	8005b76 <UART_SetConfig+0x302>
 8005b62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b64:	2380      	movs	r3, #128	; 0x80
 8005b66:	035b      	lsls	r3, r3, #13
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d204      	bcs.n	8005b76 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b72:	60da      	str	r2, [r3, #12]
 8005b74:	e0ea      	b.n	8005d4c <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8005b76:	231a      	movs	r3, #26
 8005b78:	2218      	movs	r2, #24
 8005b7a:	189b      	adds	r3, r3, r2
 8005b7c:	19db      	adds	r3, r3, r7
 8005b7e:	2201      	movs	r2, #1
 8005b80:	701a      	strb	r2, [r3, #0]
 8005b82:	e0e3      	b.n	8005d4c <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	69da      	ldr	r2, [r3, #28]
 8005b88:	2380      	movs	r3, #128	; 0x80
 8005b8a:	021b      	lsls	r3, r3, #8
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d000      	beq.n	8005b92 <UART_SetConfig+0x31e>
 8005b90:	e085      	b.n	8005c9e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8005b92:	231b      	movs	r3, #27
 8005b94:	2218      	movs	r2, #24
 8005b96:	189b      	adds	r3, r3, r2
 8005b98:	19db      	adds	r3, r3, r7
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d837      	bhi.n	8005c10 <UART_SetConfig+0x39c>
 8005ba0:	009a      	lsls	r2, r3, #2
 8005ba2:	4b10      	ldr	r3, [pc, #64]	; (8005be4 <UART_SetConfig+0x370>)
 8005ba4:	18d3      	adds	r3, r2, r3
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005baa:	f7ff fbb5 	bl	8005318 <HAL_RCC_GetPCLK1Freq>
 8005bae:	0003      	movs	r3, r0
 8005bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bb2:	e036      	b.n	8005c22 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bb4:	f7ff fbc6 	bl	8005344 <HAL_RCC_GetPCLK2Freq>
 8005bb8:	0003      	movs	r3, r0
 8005bba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bbc:	e031      	b.n	8005c22 <UART_SetConfig+0x3ae>
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	efff69f3 	.word	0xefff69f3
 8005bc4:	ffffcfff 	.word	0xffffcfff
 8005bc8:	40004800 	.word	0x40004800
 8005bcc:	fffff4ff 	.word	0xfffff4ff
 8005bd0:	40013800 	.word	0x40013800
 8005bd4:	40021000 	.word	0x40021000
 8005bd8:	40004400 	.word	0x40004400
 8005bdc:	003d0900 	.word	0x003d0900
 8005be0:	00f42400 	.word	0x00f42400
 8005be4:	08009180 	.word	0x08009180
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005be8:	4b60      	ldr	r3, [pc, #384]	; (8005d6c <UART_SetConfig+0x4f8>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2210      	movs	r2, #16
 8005bee:	4013      	ands	r3, r2
 8005bf0:	d002      	beq.n	8005bf8 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005bf2:	4b5f      	ldr	r3, [pc, #380]	; (8005d70 <UART_SetConfig+0x4fc>)
 8005bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bf6:	e014      	b.n	8005c22 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8005bf8:	4b5e      	ldr	r3, [pc, #376]	; (8005d74 <UART_SetConfig+0x500>)
 8005bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bfc:	e011      	b.n	8005c22 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bfe:	f7ff fadb 	bl	80051b8 <HAL_RCC_GetSysClockFreq>
 8005c02:	0003      	movs	r3, r0
 8005c04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c06:	e00c      	b.n	8005c22 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c08:	2380      	movs	r3, #128	; 0x80
 8005c0a:	021b      	lsls	r3, r3, #8
 8005c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c0e:	e008      	b.n	8005c22 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005c14:	231a      	movs	r3, #26
 8005c16:	2218      	movs	r2, #24
 8005c18:	189b      	adds	r3, r3, r2
 8005c1a:	19db      	adds	r3, r3, r7
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	701a      	strb	r2, [r3, #0]
        break;
 8005c20:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d100      	bne.n	8005c2a <UART_SetConfig+0x3b6>
 8005c28:	e090      	b.n	8005d4c <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2c:	005a      	lsls	r2, r3, #1
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	085b      	lsrs	r3, r3, #1
 8005c34:	18d2      	adds	r2, r2, r3
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	0019      	movs	r1, r3
 8005c3c:	0010      	movs	r0, r2
 8005c3e:	f7fa fa7f 	bl	8000140 <__udivsi3>
 8005c42:	0003      	movs	r3, r0
 8005c44:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	2b0f      	cmp	r3, #15
 8005c4a:	d921      	bls.n	8005c90 <UART_SetConfig+0x41c>
 8005c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c4e:	2380      	movs	r3, #128	; 0x80
 8005c50:	025b      	lsls	r3, r3, #9
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d21c      	bcs.n	8005c90 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	200e      	movs	r0, #14
 8005c5c:	2418      	movs	r4, #24
 8005c5e:	1903      	adds	r3, r0, r4
 8005c60:	19db      	adds	r3, r3, r7
 8005c62:	210f      	movs	r1, #15
 8005c64:	438a      	bics	r2, r1
 8005c66:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6a:	085b      	lsrs	r3, r3, #1
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2207      	movs	r2, #7
 8005c70:	4013      	ands	r3, r2
 8005c72:	b299      	uxth	r1, r3
 8005c74:	1903      	adds	r3, r0, r4
 8005c76:	19db      	adds	r3, r3, r7
 8005c78:	1902      	adds	r2, r0, r4
 8005c7a:	19d2      	adds	r2, r2, r7
 8005c7c:	8812      	ldrh	r2, [r2, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	1902      	adds	r2, r0, r4
 8005c88:	19d2      	adds	r2, r2, r7
 8005c8a:	8812      	ldrh	r2, [r2, #0]
 8005c8c:	60da      	str	r2, [r3, #12]
 8005c8e:	e05d      	b.n	8005d4c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8005c90:	231a      	movs	r3, #26
 8005c92:	2218      	movs	r2, #24
 8005c94:	189b      	adds	r3, r3, r2
 8005c96:	19db      	adds	r3, r3, r7
 8005c98:	2201      	movs	r2, #1
 8005c9a:	701a      	strb	r2, [r3, #0]
 8005c9c:	e056      	b.n	8005d4c <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c9e:	231b      	movs	r3, #27
 8005ca0:	2218      	movs	r2, #24
 8005ca2:	189b      	adds	r3, r3, r2
 8005ca4:	19db      	adds	r3, r3, r7
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d822      	bhi.n	8005cf2 <UART_SetConfig+0x47e>
 8005cac:	009a      	lsls	r2, r3, #2
 8005cae:	4b32      	ldr	r3, [pc, #200]	; (8005d78 <UART_SetConfig+0x504>)
 8005cb0:	18d3      	adds	r3, r2, r3
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cb6:	f7ff fb2f 	bl	8005318 <HAL_RCC_GetPCLK1Freq>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cbe:	e021      	b.n	8005d04 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cc0:	f7ff fb40 	bl	8005344 <HAL_RCC_GetPCLK2Freq>
 8005cc4:	0003      	movs	r3, r0
 8005cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cc8:	e01c      	b.n	8005d04 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cca:	4b28      	ldr	r3, [pc, #160]	; (8005d6c <UART_SetConfig+0x4f8>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2210      	movs	r2, #16
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	d002      	beq.n	8005cda <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005cd4:	4b26      	ldr	r3, [pc, #152]	; (8005d70 <UART_SetConfig+0x4fc>)
 8005cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cd8:	e014      	b.n	8005d04 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8005cda:	4b26      	ldr	r3, [pc, #152]	; (8005d74 <UART_SetConfig+0x500>)
 8005cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cde:	e011      	b.n	8005d04 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ce0:	f7ff fa6a 	bl	80051b8 <HAL_RCC_GetSysClockFreq>
 8005ce4:	0003      	movs	r3, r0
 8005ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ce8:	e00c      	b.n	8005d04 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cea:	2380      	movs	r3, #128	; 0x80
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cf0:	e008      	b.n	8005d04 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005cf6:	231a      	movs	r3, #26
 8005cf8:	2218      	movs	r2, #24
 8005cfa:	189b      	adds	r3, r3, r2
 8005cfc:	19db      	adds	r3, r3, r7
 8005cfe:	2201      	movs	r2, #1
 8005d00:	701a      	strb	r2, [r3, #0]
        break;
 8005d02:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d020      	beq.n	8005d4c <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	085a      	lsrs	r2, r3, #1
 8005d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d12:	18d2      	adds	r2, r2, r3
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	0019      	movs	r1, r3
 8005d1a:	0010      	movs	r0, r2
 8005d1c:	f7fa fa10 	bl	8000140 <__udivsi3>
 8005d20:	0003      	movs	r3, r0
 8005d22:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	2b0f      	cmp	r3, #15
 8005d28:	d90a      	bls.n	8005d40 <UART_SetConfig+0x4cc>
 8005d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d2c:	2380      	movs	r3, #128	; 0x80
 8005d2e:	025b      	lsls	r3, r3, #9
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d205      	bcs.n	8005d40 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	60da      	str	r2, [r3, #12]
 8005d3e:	e005      	b.n	8005d4c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8005d40:	231a      	movs	r3, #26
 8005d42:	2218      	movs	r2, #24
 8005d44:	189b      	adds	r3, r3, r2
 8005d46:	19db      	adds	r3, r3, r7
 8005d48:	2201      	movs	r2, #1
 8005d4a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	2200      	movs	r2, #0
 8005d56:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005d58:	231a      	movs	r3, #26
 8005d5a:	2218      	movs	r2, #24
 8005d5c:	189b      	adds	r3, r3, r2
 8005d5e:	19db      	adds	r3, r3, r7
 8005d60:	781b      	ldrb	r3, [r3, #0]
}
 8005d62:	0018      	movs	r0, r3
 8005d64:	46bd      	mov	sp, r7
 8005d66:	b00e      	add	sp, #56	; 0x38
 8005d68:	bdb0      	pop	{r4, r5, r7, pc}
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	40021000 	.word	0x40021000
 8005d70:	003d0900 	.word	0x003d0900
 8005d74:	00f42400 	.word	0x00f42400
 8005d78:	080091a4 	.word	0x080091a4

08005d7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	2201      	movs	r2, #1
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	d00b      	beq.n	8005da6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	4a4a      	ldr	r2, [pc, #296]	; (8005ec0 <UART_AdvFeatureConfig+0x144>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	0019      	movs	r1, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	2202      	movs	r2, #2
 8005dac:	4013      	ands	r3, r2
 8005dae:	d00b      	beq.n	8005dc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	4a43      	ldr	r2, [pc, #268]	; (8005ec4 <UART_AdvFeatureConfig+0x148>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	0019      	movs	r1, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	2204      	movs	r2, #4
 8005dce:	4013      	ands	r3, r2
 8005dd0:	d00b      	beq.n	8005dea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	4a3b      	ldr	r2, [pc, #236]	; (8005ec8 <UART_AdvFeatureConfig+0x14c>)
 8005dda:	4013      	ands	r3, r2
 8005ddc:	0019      	movs	r1, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	2208      	movs	r2, #8
 8005df0:	4013      	ands	r3, r2
 8005df2:	d00b      	beq.n	8005e0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	4a34      	ldr	r2, [pc, #208]	; (8005ecc <UART_AdvFeatureConfig+0x150>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	0019      	movs	r1, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	2210      	movs	r2, #16
 8005e12:	4013      	ands	r3, r2
 8005e14:	d00b      	beq.n	8005e2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	4a2c      	ldr	r2, [pc, #176]	; (8005ed0 <UART_AdvFeatureConfig+0x154>)
 8005e1e:	4013      	ands	r3, r2
 8005e20:	0019      	movs	r1, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	2220      	movs	r2, #32
 8005e34:	4013      	ands	r3, r2
 8005e36:	d00b      	beq.n	8005e50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	4a25      	ldr	r2, [pc, #148]	; (8005ed4 <UART_AdvFeatureConfig+0x158>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	0019      	movs	r1, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	2240      	movs	r2, #64	; 0x40
 8005e56:	4013      	ands	r3, r2
 8005e58:	d01d      	beq.n	8005e96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	4a1d      	ldr	r2, [pc, #116]	; (8005ed8 <UART_AdvFeatureConfig+0x15c>)
 8005e62:	4013      	ands	r3, r2
 8005e64:	0019      	movs	r1, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e76:	2380      	movs	r3, #128	; 0x80
 8005e78:	035b      	lsls	r3, r3, #13
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d10b      	bne.n	8005e96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	4a15      	ldr	r2, [pc, #84]	; (8005edc <UART_AdvFeatureConfig+0x160>)
 8005e86:	4013      	ands	r3, r2
 8005e88:	0019      	movs	r1, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	2280      	movs	r2, #128	; 0x80
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	d00b      	beq.n	8005eb8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	4a0e      	ldr	r2, [pc, #56]	; (8005ee0 <UART_AdvFeatureConfig+0x164>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	0019      	movs	r1, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	605a      	str	r2, [r3, #4]
  }
}
 8005eb8:	46c0      	nop			; (mov r8, r8)
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	b002      	add	sp, #8
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	fffdffff 	.word	0xfffdffff
 8005ec4:	fffeffff 	.word	0xfffeffff
 8005ec8:	fffbffff 	.word	0xfffbffff
 8005ecc:	ffff7fff 	.word	0xffff7fff
 8005ed0:	ffffefff 	.word	0xffffefff
 8005ed4:	ffffdfff 	.word	0xffffdfff
 8005ed8:	ffefffff 	.word	0xffefffff
 8005edc:	ff9fffff 	.word	0xff9fffff
 8005ee0:	fff7ffff 	.word	0xfff7ffff

08005ee4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b092      	sub	sp, #72	; 0x48
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2284      	movs	r2, #132	; 0x84
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ef4:	f7fd fa58 	bl	80033a8 <HAL_GetTick>
 8005ef8:	0003      	movs	r3, r0
 8005efa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2208      	movs	r2, #8
 8005f04:	4013      	ands	r3, r2
 8005f06:	2b08      	cmp	r3, #8
 8005f08:	d12c      	bne.n	8005f64 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f0c:	2280      	movs	r2, #128	; 0x80
 8005f0e:	0391      	lsls	r1, r2, #14
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	4a46      	ldr	r2, [pc, #280]	; (800602c <UART_CheckIdleState+0x148>)
 8005f14:	9200      	str	r2, [sp, #0]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f000 f88c 	bl	8006034 <UART_WaitOnFlagUntilTimeout>
 8005f1c:	1e03      	subs	r3, r0, #0
 8005f1e:	d021      	beq.n	8005f64 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f20:	f3ef 8310 	mrs	r3, PRIMASK
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f28:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	f383 8810 	msr	PRIMASK, r3
}
 8005f34:	46c0      	nop			; (mov r8, r8)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2180      	movs	r1, #128	; 0x80
 8005f42:	438a      	bics	r2, r1
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	f383 8810 	msr	PRIMASK, r3
}
 8005f50:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2220      	movs	r2, #32
 8005f56:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2278      	movs	r2, #120	; 0x78
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e05f      	b.n	8006024 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	d146      	bne.n	8006000 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f74:	2280      	movs	r2, #128	; 0x80
 8005f76:	03d1      	lsls	r1, r2, #15
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	4a2c      	ldr	r2, [pc, #176]	; (800602c <UART_CheckIdleState+0x148>)
 8005f7c:	9200      	str	r2, [sp, #0]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f000 f858 	bl	8006034 <UART_WaitOnFlagUntilTimeout>
 8005f84:	1e03      	subs	r3, r0, #0
 8005f86:	d03b      	beq.n	8006000 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f88:	f3ef 8310 	mrs	r3, PRIMASK
 8005f8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f90:	637b      	str	r3, [r7, #52]	; 0x34
 8005f92:	2301      	movs	r3, #1
 8005f94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f383 8810 	msr	PRIMASK, r3
}
 8005f9c:	46c0      	nop			; (mov r8, r8)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4921      	ldr	r1, [pc, #132]	; (8006030 <UART_CheckIdleState+0x14c>)
 8005faa:	400a      	ands	r2, r1
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f383 8810 	msr	PRIMASK, r3
}
 8005fb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fba:	f3ef 8310 	mrs	r3, PRIMASK
 8005fbe:	61bb      	str	r3, [r7, #24]
  return(result);
 8005fc0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc2:	633b      	str	r3, [r7, #48]	; 0x30
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	f383 8810 	msr	PRIMASK, r3
}
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2101      	movs	r1, #1
 8005fdc:	438a      	bics	r2, r1
 8005fde:	609a      	str	r2, [r3, #8]
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	f383 8810 	msr	PRIMASK, r3
}
 8005fea:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2280      	movs	r2, #128	; 0x80
 8005ff0:	2120      	movs	r1, #32
 8005ff2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2278      	movs	r2, #120	; 0x78
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e011      	b.n	8006024 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2280      	movs	r2, #128	; 0x80
 800600a:	2120      	movs	r1, #32
 800600c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2278      	movs	r2, #120	; 0x78
 800601e:	2100      	movs	r1, #0
 8006020:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	0018      	movs	r0, r3
 8006026:	46bd      	mov	sp, r7
 8006028:	b010      	add	sp, #64	; 0x40
 800602a:	bd80      	pop	{r7, pc}
 800602c:	01ffffff 	.word	0x01ffffff
 8006030:	fffffedf 	.word	0xfffffedf

08006034 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	1dfb      	adds	r3, r7, #7
 8006042:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006044:	e04b      	b.n	80060de <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	3301      	adds	r3, #1
 800604a:	d048      	beq.n	80060de <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604c:	f7fd f9ac 	bl	80033a8 <HAL_GetTick>
 8006050:	0002      	movs	r2, r0
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	429a      	cmp	r2, r3
 800605a:	d302      	bcc.n	8006062 <UART_WaitOnFlagUntilTimeout+0x2e>
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e04b      	b.n	80060fe <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2204      	movs	r2, #4
 800606e:	4013      	ands	r3, r2
 8006070:	d035      	beq.n	80060de <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69db      	ldr	r3, [r3, #28]
 8006078:	2208      	movs	r2, #8
 800607a:	4013      	ands	r3, r2
 800607c:	2b08      	cmp	r3, #8
 800607e:	d111      	bne.n	80060a4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2208      	movs	r2, #8
 8006086:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	0018      	movs	r0, r3
 800608c:	f000 f83c 	bl	8006108 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2284      	movs	r2, #132	; 0x84
 8006094:	2108      	movs	r1, #8
 8006096:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2278      	movs	r2, #120	; 0x78
 800609c:	2100      	movs	r1, #0
 800609e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e02c      	b.n	80060fe <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69da      	ldr	r2, [r3, #28]
 80060aa:	2380      	movs	r3, #128	; 0x80
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	401a      	ands	r2, r3
 80060b0:	2380      	movs	r3, #128	; 0x80
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d112      	bne.n	80060de <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2280      	movs	r2, #128	; 0x80
 80060be:	0112      	lsls	r2, r2, #4
 80060c0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	0018      	movs	r0, r3
 80060c6:	f000 f81f 	bl	8006108 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2284      	movs	r2, #132	; 0x84
 80060ce:	2120      	movs	r1, #32
 80060d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2278      	movs	r2, #120	; 0x78
 80060d6:	2100      	movs	r1, #0
 80060d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e00f      	b.n	80060fe <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	4013      	ands	r3, r2
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	425a      	negs	r2, r3
 80060ee:	4153      	adcs	r3, r2
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	001a      	movs	r2, r3
 80060f4:	1dfb      	adds	r3, r7, #7
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d0a4      	beq.n	8006046 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	0018      	movs	r0, r3
 8006100:	46bd      	mov	sp, r7
 8006102:	b004      	add	sp, #16
 8006104:	bd80      	pop	{r7, pc}
	...

08006108 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08e      	sub	sp, #56	; 0x38
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006110:	f3ef 8310 	mrs	r3, PRIMASK
 8006114:	617b      	str	r3, [r7, #20]
  return(result);
 8006116:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006118:	637b      	str	r3, [r7, #52]	; 0x34
 800611a:	2301      	movs	r3, #1
 800611c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	f383 8810 	msr	PRIMASK, r3
}
 8006124:	46c0      	nop			; (mov r8, r8)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4926      	ldr	r1, [pc, #152]	; (80061cc <UART_EndRxTransfer+0xc4>)
 8006132:	400a      	ands	r2, r1
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006138:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	f383 8810 	msr	PRIMASK, r3
}
 8006140:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006142:	f3ef 8310 	mrs	r3, PRIMASK
 8006146:	623b      	str	r3, [r7, #32]
  return(result);
 8006148:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614a:	633b      	str	r3, [r7, #48]	; 0x30
 800614c:	2301      	movs	r3, #1
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	f383 8810 	msr	PRIMASK, r3
}
 8006156:	46c0      	nop			; (mov r8, r8)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2101      	movs	r1, #1
 8006164:	438a      	bics	r2, r1
 8006166:	609a      	str	r2, [r3, #8]
 8006168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800616c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616e:	f383 8810 	msr	PRIMASK, r3
}
 8006172:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006178:	2b01      	cmp	r3, #1
 800617a:	d118      	bne.n	80061ae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800617c:	f3ef 8310 	mrs	r3, PRIMASK
 8006180:	60bb      	str	r3, [r7, #8]
  return(result);
 8006182:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006186:	2301      	movs	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f383 8810 	msr	PRIMASK, r3
}
 8006190:	46c0      	nop			; (mov r8, r8)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2110      	movs	r1, #16
 800619e:	438a      	bics	r2, r1
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f383 8810 	msr	PRIMASK, r3
}
 80061ac:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2280      	movs	r2, #128	; 0x80
 80061b2:	2120      	movs	r1, #32
 80061b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80061c2:	46c0      	nop			; (mov r8, r8)
 80061c4:	46bd      	mov	sp, r7
 80061c6:	b00e      	add	sp, #56	; 0x38
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	46c0      	nop			; (mov r8, r8)
 80061cc:	fffffedf 	.word	0xfffffedf

080061d0 <__cvt>:
 80061d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061d2:	001e      	movs	r6, r3
 80061d4:	2300      	movs	r3, #0
 80061d6:	0014      	movs	r4, r2
 80061d8:	b08b      	sub	sp, #44	; 0x2c
 80061da:	429e      	cmp	r6, r3
 80061dc:	da04      	bge.n	80061e8 <__cvt+0x18>
 80061de:	2180      	movs	r1, #128	; 0x80
 80061e0:	0609      	lsls	r1, r1, #24
 80061e2:	1873      	adds	r3, r6, r1
 80061e4:	001e      	movs	r6, r3
 80061e6:	232d      	movs	r3, #45	; 0x2d
 80061e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80061ec:	7013      	strb	r3, [r2, #0]
 80061ee:	2320      	movs	r3, #32
 80061f0:	2203      	movs	r2, #3
 80061f2:	439f      	bics	r7, r3
 80061f4:	2f46      	cmp	r7, #70	; 0x46
 80061f6:	d007      	beq.n	8006208 <__cvt+0x38>
 80061f8:	003b      	movs	r3, r7
 80061fa:	3b45      	subs	r3, #69	; 0x45
 80061fc:	4259      	negs	r1, r3
 80061fe:	414b      	adcs	r3, r1
 8006200:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006202:	3a01      	subs	r2, #1
 8006204:	18cb      	adds	r3, r1, r3
 8006206:	9310      	str	r3, [sp, #64]	; 0x40
 8006208:	ab09      	add	r3, sp, #36	; 0x24
 800620a:	9304      	str	r3, [sp, #16]
 800620c:	ab08      	add	r3, sp, #32
 800620e:	9303      	str	r3, [sp, #12]
 8006210:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006212:	9200      	str	r2, [sp, #0]
 8006214:	9302      	str	r3, [sp, #8]
 8006216:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006218:	0022      	movs	r2, r4
 800621a:	9301      	str	r3, [sp, #4]
 800621c:	0033      	movs	r3, r6
 800621e:	f000 fea7 	bl	8006f70 <_dtoa_r>
 8006222:	0005      	movs	r5, r0
 8006224:	2f47      	cmp	r7, #71	; 0x47
 8006226:	d102      	bne.n	800622e <__cvt+0x5e>
 8006228:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800622a:	07db      	lsls	r3, r3, #31
 800622c:	d528      	bpl.n	8006280 <__cvt+0xb0>
 800622e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006230:	18eb      	adds	r3, r5, r3
 8006232:	9307      	str	r3, [sp, #28]
 8006234:	2f46      	cmp	r7, #70	; 0x46
 8006236:	d114      	bne.n	8006262 <__cvt+0x92>
 8006238:	782b      	ldrb	r3, [r5, #0]
 800623a:	2b30      	cmp	r3, #48	; 0x30
 800623c:	d10c      	bne.n	8006258 <__cvt+0x88>
 800623e:	2200      	movs	r2, #0
 8006240:	2300      	movs	r3, #0
 8006242:	0020      	movs	r0, r4
 8006244:	0031      	movs	r1, r6
 8006246:	f7fa f901 	bl	800044c <__aeabi_dcmpeq>
 800624a:	2800      	cmp	r0, #0
 800624c:	d104      	bne.n	8006258 <__cvt+0x88>
 800624e:	2301      	movs	r3, #1
 8006250:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006252:	1a9b      	subs	r3, r3, r2
 8006254:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800625a:	9a07      	ldr	r2, [sp, #28]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	18d3      	adds	r3, r2, r3
 8006260:	9307      	str	r3, [sp, #28]
 8006262:	2200      	movs	r2, #0
 8006264:	2300      	movs	r3, #0
 8006266:	0020      	movs	r0, r4
 8006268:	0031      	movs	r1, r6
 800626a:	f7fa f8ef 	bl	800044c <__aeabi_dcmpeq>
 800626e:	2800      	cmp	r0, #0
 8006270:	d001      	beq.n	8006276 <__cvt+0xa6>
 8006272:	9b07      	ldr	r3, [sp, #28]
 8006274:	9309      	str	r3, [sp, #36]	; 0x24
 8006276:	2230      	movs	r2, #48	; 0x30
 8006278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800627a:	9907      	ldr	r1, [sp, #28]
 800627c:	428b      	cmp	r3, r1
 800627e:	d306      	bcc.n	800628e <__cvt+0xbe>
 8006280:	0028      	movs	r0, r5
 8006282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006284:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006286:	1b5b      	subs	r3, r3, r5
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	b00b      	add	sp, #44	; 0x2c
 800628c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800628e:	1c59      	adds	r1, r3, #1
 8006290:	9109      	str	r1, [sp, #36]	; 0x24
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	e7f0      	b.n	8006278 <__cvt+0xa8>

08006296 <__exponent>:
 8006296:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006298:	1c83      	adds	r3, r0, #2
 800629a:	b087      	sub	sp, #28
 800629c:	9303      	str	r3, [sp, #12]
 800629e:	0005      	movs	r5, r0
 80062a0:	000c      	movs	r4, r1
 80062a2:	232b      	movs	r3, #43	; 0x2b
 80062a4:	7002      	strb	r2, [r0, #0]
 80062a6:	2900      	cmp	r1, #0
 80062a8:	da01      	bge.n	80062ae <__exponent+0x18>
 80062aa:	424c      	negs	r4, r1
 80062ac:	3302      	adds	r3, #2
 80062ae:	706b      	strb	r3, [r5, #1]
 80062b0:	2c09      	cmp	r4, #9
 80062b2:	dd2f      	ble.n	8006314 <__exponent+0x7e>
 80062b4:	270a      	movs	r7, #10
 80062b6:	ab04      	add	r3, sp, #16
 80062b8:	1dde      	adds	r6, r3, #7
 80062ba:	0020      	movs	r0, r4
 80062bc:	0039      	movs	r1, r7
 80062be:	9601      	str	r6, [sp, #4]
 80062c0:	f7fa f8ae 	bl	8000420 <__aeabi_idivmod>
 80062c4:	3e01      	subs	r6, #1
 80062c6:	3130      	adds	r1, #48	; 0x30
 80062c8:	0020      	movs	r0, r4
 80062ca:	7031      	strb	r1, [r6, #0]
 80062cc:	0039      	movs	r1, r7
 80062ce:	9402      	str	r4, [sp, #8]
 80062d0:	f7f9 ffc0 	bl	8000254 <__divsi3>
 80062d4:	9b02      	ldr	r3, [sp, #8]
 80062d6:	0004      	movs	r4, r0
 80062d8:	2b63      	cmp	r3, #99	; 0x63
 80062da:	dcee      	bgt.n	80062ba <__exponent+0x24>
 80062dc:	9b01      	ldr	r3, [sp, #4]
 80062de:	3430      	adds	r4, #48	; 0x30
 80062e0:	1e9a      	subs	r2, r3, #2
 80062e2:	0013      	movs	r3, r2
 80062e4:	9903      	ldr	r1, [sp, #12]
 80062e6:	7014      	strb	r4, [r2, #0]
 80062e8:	a804      	add	r0, sp, #16
 80062ea:	3007      	adds	r0, #7
 80062ec:	4298      	cmp	r0, r3
 80062ee:	d80c      	bhi.n	800630a <__exponent+0x74>
 80062f0:	2300      	movs	r3, #0
 80062f2:	4282      	cmp	r2, r0
 80062f4:	d804      	bhi.n	8006300 <__exponent+0x6a>
 80062f6:	aa04      	add	r2, sp, #16
 80062f8:	3309      	adds	r3, #9
 80062fa:	189b      	adds	r3, r3, r2
 80062fc:	9a01      	ldr	r2, [sp, #4]
 80062fe:	1a9b      	subs	r3, r3, r2
 8006300:	9a03      	ldr	r2, [sp, #12]
 8006302:	18d3      	adds	r3, r2, r3
 8006304:	1b58      	subs	r0, r3, r5
 8006306:	b007      	add	sp, #28
 8006308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800630a:	7818      	ldrb	r0, [r3, #0]
 800630c:	3301      	adds	r3, #1
 800630e:	7008      	strb	r0, [r1, #0]
 8006310:	3101      	adds	r1, #1
 8006312:	e7e9      	b.n	80062e8 <__exponent+0x52>
 8006314:	2330      	movs	r3, #48	; 0x30
 8006316:	3430      	adds	r4, #48	; 0x30
 8006318:	70ab      	strb	r3, [r5, #2]
 800631a:	70ec      	strb	r4, [r5, #3]
 800631c:	1d2b      	adds	r3, r5, #4
 800631e:	e7f1      	b.n	8006304 <__exponent+0x6e>

08006320 <_printf_float>:
 8006320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006322:	b095      	sub	sp, #84	; 0x54
 8006324:	000c      	movs	r4, r1
 8006326:	9208      	str	r2, [sp, #32]
 8006328:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800632a:	9309      	str	r3, [sp, #36]	; 0x24
 800632c:	0007      	movs	r7, r0
 800632e:	f000 fd05 	bl	8006d3c <_localeconv_r>
 8006332:	6803      	ldr	r3, [r0, #0]
 8006334:	0018      	movs	r0, r3
 8006336:	930c      	str	r3, [sp, #48]	; 0x30
 8006338:	f7f9 fee6 	bl	8000108 <strlen>
 800633c:	2300      	movs	r3, #0
 800633e:	9312      	str	r3, [sp, #72]	; 0x48
 8006340:	7e23      	ldrb	r3, [r4, #24]
 8006342:	2207      	movs	r2, #7
 8006344:	930a      	str	r3, [sp, #40]	; 0x28
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	900d      	str	r0, [sp, #52]	; 0x34
 800634a:	930b      	str	r3, [sp, #44]	; 0x2c
 800634c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800634e:	682b      	ldr	r3, [r5, #0]
 8006350:	05c9      	lsls	r1, r1, #23
 8006352:	d547      	bpl.n	80063e4 <_printf_float+0xc4>
 8006354:	189b      	adds	r3, r3, r2
 8006356:	4393      	bics	r3, r2
 8006358:	001a      	movs	r2, r3
 800635a:	3208      	adds	r2, #8
 800635c:	602a      	str	r2, [r5, #0]
 800635e:	681e      	ldr	r6, [r3, #0]
 8006360:	685d      	ldr	r5, [r3, #4]
 8006362:	0032      	movs	r2, r6
 8006364:	002b      	movs	r3, r5
 8006366:	64a2      	str	r2, [r4, #72]	; 0x48
 8006368:	64e3      	str	r3, [r4, #76]	; 0x4c
 800636a:	2201      	movs	r2, #1
 800636c:	006b      	lsls	r3, r5, #1
 800636e:	085b      	lsrs	r3, r3, #1
 8006370:	930e      	str	r3, [sp, #56]	; 0x38
 8006372:	0030      	movs	r0, r6
 8006374:	4bab      	ldr	r3, [pc, #684]	; (8006624 <_printf_float+0x304>)
 8006376:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006378:	4252      	negs	r2, r2
 800637a:	f7fc f8b9 	bl	80024f0 <__aeabi_dcmpun>
 800637e:	2800      	cmp	r0, #0
 8006380:	d132      	bne.n	80063e8 <_printf_float+0xc8>
 8006382:	2201      	movs	r2, #1
 8006384:	0030      	movs	r0, r6
 8006386:	4ba7      	ldr	r3, [pc, #668]	; (8006624 <_printf_float+0x304>)
 8006388:	990e      	ldr	r1, [sp, #56]	; 0x38
 800638a:	4252      	negs	r2, r2
 800638c:	f7fa f86e 	bl	800046c <__aeabi_dcmple>
 8006390:	2800      	cmp	r0, #0
 8006392:	d129      	bne.n	80063e8 <_printf_float+0xc8>
 8006394:	2200      	movs	r2, #0
 8006396:	2300      	movs	r3, #0
 8006398:	0030      	movs	r0, r6
 800639a:	0029      	movs	r1, r5
 800639c:	f7fa f85c 	bl	8000458 <__aeabi_dcmplt>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d003      	beq.n	80063ac <_printf_float+0x8c>
 80063a4:	0023      	movs	r3, r4
 80063a6:	222d      	movs	r2, #45	; 0x2d
 80063a8:	3343      	adds	r3, #67	; 0x43
 80063aa:	701a      	strb	r2, [r3, #0]
 80063ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ae:	4d9e      	ldr	r5, [pc, #632]	; (8006628 <_printf_float+0x308>)
 80063b0:	2b47      	cmp	r3, #71	; 0x47
 80063b2:	d900      	bls.n	80063b6 <_printf_float+0x96>
 80063b4:	4d9d      	ldr	r5, [pc, #628]	; (800662c <_printf_float+0x30c>)
 80063b6:	2303      	movs	r3, #3
 80063b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063ba:	6123      	str	r3, [r4, #16]
 80063bc:	3301      	adds	r3, #1
 80063be:	439a      	bics	r2, r3
 80063c0:	2300      	movs	r3, #0
 80063c2:	6022      	str	r2, [r4, #0]
 80063c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80063c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c8:	0021      	movs	r1, r4
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	0038      	movs	r0, r7
 80063ce:	9b08      	ldr	r3, [sp, #32]
 80063d0:	aa13      	add	r2, sp, #76	; 0x4c
 80063d2:	f000 f9fb 	bl	80067cc <_printf_common>
 80063d6:	3001      	adds	r0, #1
 80063d8:	d000      	beq.n	80063dc <_printf_float+0xbc>
 80063da:	e0a3      	b.n	8006524 <_printf_float+0x204>
 80063dc:	2001      	movs	r0, #1
 80063de:	4240      	negs	r0, r0
 80063e0:	b015      	add	sp, #84	; 0x54
 80063e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e4:	3307      	adds	r3, #7
 80063e6:	e7b6      	b.n	8006356 <_printf_float+0x36>
 80063e8:	0032      	movs	r2, r6
 80063ea:	002b      	movs	r3, r5
 80063ec:	0030      	movs	r0, r6
 80063ee:	0029      	movs	r1, r5
 80063f0:	f7fc f87e 	bl	80024f0 <__aeabi_dcmpun>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	d00b      	beq.n	8006410 <_printf_float+0xf0>
 80063f8:	2d00      	cmp	r5, #0
 80063fa:	da03      	bge.n	8006404 <_printf_float+0xe4>
 80063fc:	0023      	movs	r3, r4
 80063fe:	222d      	movs	r2, #45	; 0x2d
 8006400:	3343      	adds	r3, #67	; 0x43
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006406:	4d8a      	ldr	r5, [pc, #552]	; (8006630 <_printf_float+0x310>)
 8006408:	2b47      	cmp	r3, #71	; 0x47
 800640a:	d9d4      	bls.n	80063b6 <_printf_float+0x96>
 800640c:	4d89      	ldr	r5, [pc, #548]	; (8006634 <_printf_float+0x314>)
 800640e:	e7d2      	b.n	80063b6 <_printf_float+0x96>
 8006410:	2220      	movs	r2, #32
 8006412:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006414:	6863      	ldr	r3, [r4, #4]
 8006416:	4391      	bics	r1, r2
 8006418:	910e      	str	r1, [sp, #56]	; 0x38
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	d14a      	bne.n	80064b4 <_printf_float+0x194>
 800641e:	3307      	adds	r3, #7
 8006420:	6063      	str	r3, [r4, #4]
 8006422:	2380      	movs	r3, #128	; 0x80
 8006424:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	4313      	orrs	r3, r2
 800642a:	2200      	movs	r2, #0
 800642c:	9206      	str	r2, [sp, #24]
 800642e:	aa12      	add	r2, sp, #72	; 0x48
 8006430:	9205      	str	r2, [sp, #20]
 8006432:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	9204      	str	r2, [sp, #16]
 8006438:	aa11      	add	r2, sp, #68	; 0x44
 800643a:	9203      	str	r2, [sp, #12]
 800643c:	2223      	movs	r2, #35	; 0x23
 800643e:	a908      	add	r1, sp, #32
 8006440:	9301      	str	r3, [sp, #4]
 8006442:	6863      	ldr	r3, [r4, #4]
 8006444:	1852      	adds	r2, r2, r1
 8006446:	9202      	str	r2, [sp, #8]
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	0032      	movs	r2, r6
 800644c:	002b      	movs	r3, r5
 800644e:	0038      	movs	r0, r7
 8006450:	f7ff febe 	bl	80061d0 <__cvt>
 8006454:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006456:	0005      	movs	r5, r0
 8006458:	2b47      	cmp	r3, #71	; 0x47
 800645a:	d109      	bne.n	8006470 <_printf_float+0x150>
 800645c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800645e:	1cda      	adds	r2, r3, #3
 8006460:	db02      	blt.n	8006468 <_printf_float+0x148>
 8006462:	6862      	ldr	r2, [r4, #4]
 8006464:	4293      	cmp	r3, r2
 8006466:	dd49      	ble.n	80064fc <_printf_float+0x1dc>
 8006468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800646a:	3b02      	subs	r3, #2
 800646c:	b2db      	uxtb	r3, r3
 800646e:	930a      	str	r3, [sp, #40]	; 0x28
 8006470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006472:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006474:	2b65      	cmp	r3, #101	; 0x65
 8006476:	d824      	bhi.n	80064c2 <_printf_float+0x1a2>
 8006478:	0020      	movs	r0, r4
 800647a:	001a      	movs	r2, r3
 800647c:	3901      	subs	r1, #1
 800647e:	3050      	adds	r0, #80	; 0x50
 8006480:	9111      	str	r1, [sp, #68]	; 0x44
 8006482:	f7ff ff08 	bl	8006296 <__exponent>
 8006486:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006488:	900b      	str	r0, [sp, #44]	; 0x2c
 800648a:	1813      	adds	r3, r2, r0
 800648c:	6123      	str	r3, [r4, #16]
 800648e:	2a01      	cmp	r2, #1
 8006490:	dc02      	bgt.n	8006498 <_printf_float+0x178>
 8006492:	6822      	ldr	r2, [r4, #0]
 8006494:	07d2      	lsls	r2, r2, #31
 8006496:	d501      	bpl.n	800649c <_printf_float+0x17c>
 8006498:	3301      	adds	r3, #1
 800649a:	6123      	str	r3, [r4, #16]
 800649c:	2323      	movs	r3, #35	; 0x23
 800649e:	aa08      	add	r2, sp, #32
 80064a0:	189b      	adds	r3, r3, r2
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d100      	bne.n	80064aa <_printf_float+0x18a>
 80064a8:	e78d      	b.n	80063c6 <_printf_float+0xa6>
 80064aa:	0023      	movs	r3, r4
 80064ac:	222d      	movs	r2, #45	; 0x2d
 80064ae:	3343      	adds	r3, #67	; 0x43
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	e788      	b.n	80063c6 <_printf_float+0xa6>
 80064b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064b6:	2a47      	cmp	r2, #71	; 0x47
 80064b8:	d1b3      	bne.n	8006422 <_printf_float+0x102>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1b1      	bne.n	8006422 <_printf_float+0x102>
 80064be:	3301      	adds	r3, #1
 80064c0:	e7ae      	b.n	8006420 <_printf_float+0x100>
 80064c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c4:	2b66      	cmp	r3, #102	; 0x66
 80064c6:	d11b      	bne.n	8006500 <_printf_float+0x1e0>
 80064c8:	6863      	ldr	r3, [r4, #4]
 80064ca:	2900      	cmp	r1, #0
 80064cc:	dd09      	ble.n	80064e2 <_printf_float+0x1c2>
 80064ce:	6121      	str	r1, [r4, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d102      	bne.n	80064da <_printf_float+0x1ba>
 80064d4:	6822      	ldr	r2, [r4, #0]
 80064d6:	07d2      	lsls	r2, r2, #31
 80064d8:	d50b      	bpl.n	80064f2 <_printf_float+0x1d2>
 80064da:	3301      	adds	r3, #1
 80064dc:	185b      	adds	r3, r3, r1
 80064de:	6123      	str	r3, [r4, #16]
 80064e0:	e007      	b.n	80064f2 <_printf_float+0x1d2>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d103      	bne.n	80064ee <_printf_float+0x1ce>
 80064e6:	2201      	movs	r2, #1
 80064e8:	6821      	ldr	r1, [r4, #0]
 80064ea:	4211      	tst	r1, r2
 80064ec:	d000      	beq.n	80064f0 <_printf_float+0x1d0>
 80064ee:	1c9a      	adds	r2, r3, #2
 80064f0:	6122      	str	r2, [r4, #16]
 80064f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064f4:	65a3      	str	r3, [r4, #88]	; 0x58
 80064f6:	2300      	movs	r3, #0
 80064f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80064fa:	e7cf      	b.n	800649c <_printf_float+0x17c>
 80064fc:	2367      	movs	r3, #103	; 0x67
 80064fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006500:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006502:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006504:	4299      	cmp	r1, r3
 8006506:	db06      	blt.n	8006516 <_printf_float+0x1f6>
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	6121      	str	r1, [r4, #16]
 800650c:	07db      	lsls	r3, r3, #31
 800650e:	d5f0      	bpl.n	80064f2 <_printf_float+0x1d2>
 8006510:	3101      	adds	r1, #1
 8006512:	6121      	str	r1, [r4, #16]
 8006514:	e7ed      	b.n	80064f2 <_printf_float+0x1d2>
 8006516:	2201      	movs	r2, #1
 8006518:	2900      	cmp	r1, #0
 800651a:	dc01      	bgt.n	8006520 <_printf_float+0x200>
 800651c:	1892      	adds	r2, r2, r2
 800651e:	1a52      	subs	r2, r2, r1
 8006520:	189b      	adds	r3, r3, r2
 8006522:	e7dc      	b.n	80064de <_printf_float+0x1be>
 8006524:	6822      	ldr	r2, [r4, #0]
 8006526:	0553      	lsls	r3, r2, #21
 8006528:	d408      	bmi.n	800653c <_printf_float+0x21c>
 800652a:	6923      	ldr	r3, [r4, #16]
 800652c:	002a      	movs	r2, r5
 800652e:	0038      	movs	r0, r7
 8006530:	9908      	ldr	r1, [sp, #32]
 8006532:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006534:	47a8      	blx	r5
 8006536:	3001      	adds	r0, #1
 8006538:	d12a      	bne.n	8006590 <_printf_float+0x270>
 800653a:	e74f      	b.n	80063dc <_printf_float+0xbc>
 800653c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800653e:	2b65      	cmp	r3, #101	; 0x65
 8006540:	d800      	bhi.n	8006544 <_printf_float+0x224>
 8006542:	e0ec      	b.n	800671e <_printf_float+0x3fe>
 8006544:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006546:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006548:	2200      	movs	r2, #0
 800654a:	2300      	movs	r3, #0
 800654c:	f7f9 ff7e 	bl	800044c <__aeabi_dcmpeq>
 8006550:	2800      	cmp	r0, #0
 8006552:	d034      	beq.n	80065be <_printf_float+0x29e>
 8006554:	2301      	movs	r3, #1
 8006556:	0038      	movs	r0, r7
 8006558:	4a37      	ldr	r2, [pc, #220]	; (8006638 <_printf_float+0x318>)
 800655a:	9908      	ldr	r1, [sp, #32]
 800655c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800655e:	47a8      	blx	r5
 8006560:	3001      	adds	r0, #1
 8006562:	d100      	bne.n	8006566 <_printf_float+0x246>
 8006564:	e73a      	b.n	80063dc <_printf_float+0xbc>
 8006566:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006568:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800656a:	429a      	cmp	r2, r3
 800656c:	db02      	blt.n	8006574 <_printf_float+0x254>
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	07db      	lsls	r3, r3, #31
 8006572:	d50d      	bpl.n	8006590 <_printf_float+0x270>
 8006574:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006576:	0038      	movs	r0, r7
 8006578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800657a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800657c:	9908      	ldr	r1, [sp, #32]
 800657e:	47a8      	blx	r5
 8006580:	2500      	movs	r5, #0
 8006582:	3001      	adds	r0, #1
 8006584:	d100      	bne.n	8006588 <_printf_float+0x268>
 8006586:	e729      	b.n	80063dc <_printf_float+0xbc>
 8006588:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800658a:	3b01      	subs	r3, #1
 800658c:	42ab      	cmp	r3, r5
 800658e:	dc0a      	bgt.n	80065a6 <_printf_float+0x286>
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	079b      	lsls	r3, r3, #30
 8006594:	d500      	bpl.n	8006598 <_printf_float+0x278>
 8006596:	e116      	b.n	80067c6 <_printf_float+0x4a6>
 8006598:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800659a:	68e0      	ldr	r0, [r4, #12]
 800659c:	4298      	cmp	r0, r3
 800659e:	db00      	blt.n	80065a2 <_printf_float+0x282>
 80065a0:	e71e      	b.n	80063e0 <_printf_float+0xc0>
 80065a2:	0018      	movs	r0, r3
 80065a4:	e71c      	b.n	80063e0 <_printf_float+0xc0>
 80065a6:	0022      	movs	r2, r4
 80065a8:	2301      	movs	r3, #1
 80065aa:	0038      	movs	r0, r7
 80065ac:	9908      	ldr	r1, [sp, #32]
 80065ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80065b0:	321a      	adds	r2, #26
 80065b2:	47b0      	blx	r6
 80065b4:	3001      	adds	r0, #1
 80065b6:	d100      	bne.n	80065ba <_printf_float+0x29a>
 80065b8:	e710      	b.n	80063dc <_printf_float+0xbc>
 80065ba:	3501      	adds	r5, #1
 80065bc:	e7e4      	b.n	8006588 <_printf_float+0x268>
 80065be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	dc3b      	bgt.n	800663c <_printf_float+0x31c>
 80065c4:	2301      	movs	r3, #1
 80065c6:	0038      	movs	r0, r7
 80065c8:	4a1b      	ldr	r2, [pc, #108]	; (8006638 <_printf_float+0x318>)
 80065ca:	9908      	ldr	r1, [sp, #32]
 80065cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80065ce:	47b0      	blx	r6
 80065d0:	3001      	adds	r0, #1
 80065d2:	d100      	bne.n	80065d6 <_printf_float+0x2b6>
 80065d4:	e702      	b.n	80063dc <_printf_float+0xbc>
 80065d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065da:	4313      	orrs	r3, r2
 80065dc:	d102      	bne.n	80065e4 <_printf_float+0x2c4>
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	07db      	lsls	r3, r3, #31
 80065e2:	d5d5      	bpl.n	8006590 <_printf_float+0x270>
 80065e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065e6:	0038      	movs	r0, r7
 80065e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065ea:	9908      	ldr	r1, [sp, #32]
 80065ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80065ee:	47b0      	blx	r6
 80065f0:	2300      	movs	r3, #0
 80065f2:	3001      	adds	r0, #1
 80065f4:	d100      	bne.n	80065f8 <_printf_float+0x2d8>
 80065f6:	e6f1      	b.n	80063dc <_printf_float+0xbc>
 80065f8:	930a      	str	r3, [sp, #40]	; 0x28
 80065fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065fe:	425b      	negs	r3, r3
 8006600:	4293      	cmp	r3, r2
 8006602:	dc01      	bgt.n	8006608 <_printf_float+0x2e8>
 8006604:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006606:	e791      	b.n	800652c <_printf_float+0x20c>
 8006608:	0022      	movs	r2, r4
 800660a:	2301      	movs	r3, #1
 800660c:	0038      	movs	r0, r7
 800660e:	9908      	ldr	r1, [sp, #32]
 8006610:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006612:	321a      	adds	r2, #26
 8006614:	47b0      	blx	r6
 8006616:	3001      	adds	r0, #1
 8006618:	d100      	bne.n	800661c <_printf_float+0x2fc>
 800661a:	e6df      	b.n	80063dc <_printf_float+0xbc>
 800661c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800661e:	3301      	adds	r3, #1
 8006620:	e7ea      	b.n	80065f8 <_printf_float+0x2d8>
 8006622:	46c0      	nop			; (mov r8, r8)
 8006624:	7fefffff 	.word	0x7fefffff
 8006628:	080091c8 	.word	0x080091c8
 800662c:	080091cc 	.word	0x080091cc
 8006630:	080091d0 	.word	0x080091d0
 8006634:	080091d4 	.word	0x080091d4
 8006638:	080091d8 	.word	0x080091d8
 800663c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800663e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006640:	920a      	str	r2, [sp, #40]	; 0x28
 8006642:	429a      	cmp	r2, r3
 8006644:	dd00      	ble.n	8006648 <_printf_float+0x328>
 8006646:	930a      	str	r3, [sp, #40]	; 0x28
 8006648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800664a:	2b00      	cmp	r3, #0
 800664c:	dc3d      	bgt.n	80066ca <_printf_float+0x3aa>
 800664e:	2300      	movs	r3, #0
 8006650:	930e      	str	r3, [sp, #56]	; 0x38
 8006652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006654:	43db      	mvns	r3, r3
 8006656:	17db      	asrs	r3, r3, #31
 8006658:	930f      	str	r3, [sp, #60]	; 0x3c
 800665a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800665c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800665e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006660:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006662:	4013      	ands	r3, r2
 8006664:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800666a:	4293      	cmp	r3, r2
 800666c:	dc36      	bgt.n	80066dc <_printf_float+0x3bc>
 800666e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006670:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006672:	429a      	cmp	r2, r3
 8006674:	db40      	blt.n	80066f8 <_printf_float+0x3d8>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	07db      	lsls	r3, r3, #31
 800667a:	d43d      	bmi.n	80066f8 <_printf_float+0x3d8>
 800667c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800667e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006682:	1af3      	subs	r3, r6, r3
 8006684:	1ab6      	subs	r6, r6, r2
 8006686:	429e      	cmp	r6, r3
 8006688:	dd00      	ble.n	800668c <_printf_float+0x36c>
 800668a:	001e      	movs	r6, r3
 800668c:	2e00      	cmp	r6, #0
 800668e:	dc3c      	bgt.n	800670a <_printf_float+0x3ea>
 8006690:	2300      	movs	r3, #0
 8006692:	930a      	str	r3, [sp, #40]	; 0x28
 8006694:	43f3      	mvns	r3, r6
 8006696:	17db      	asrs	r3, r3, #31
 8006698:	930b      	str	r3, [sp, #44]	; 0x2c
 800669a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800669c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800669e:	1a9b      	subs	r3, r3, r2
 80066a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066a2:	4032      	ands	r2, r6
 80066a4:	1a9b      	subs	r3, r3, r2
 80066a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066a8:	4293      	cmp	r3, r2
 80066aa:	dc00      	bgt.n	80066ae <_printf_float+0x38e>
 80066ac:	e770      	b.n	8006590 <_printf_float+0x270>
 80066ae:	0022      	movs	r2, r4
 80066b0:	2301      	movs	r3, #1
 80066b2:	0038      	movs	r0, r7
 80066b4:	9908      	ldr	r1, [sp, #32]
 80066b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80066b8:	321a      	adds	r2, #26
 80066ba:	47a8      	blx	r5
 80066bc:	3001      	adds	r0, #1
 80066be:	d100      	bne.n	80066c2 <_printf_float+0x3a2>
 80066c0:	e68c      	b.n	80063dc <_printf_float+0xbc>
 80066c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066c4:	3301      	adds	r3, #1
 80066c6:	930a      	str	r3, [sp, #40]	; 0x28
 80066c8:	e7e7      	b.n	800669a <_printf_float+0x37a>
 80066ca:	002a      	movs	r2, r5
 80066cc:	0038      	movs	r0, r7
 80066ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066d0:	9908      	ldr	r1, [sp, #32]
 80066d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80066d4:	47b0      	blx	r6
 80066d6:	3001      	adds	r0, #1
 80066d8:	d1b9      	bne.n	800664e <_printf_float+0x32e>
 80066da:	e67f      	b.n	80063dc <_printf_float+0xbc>
 80066dc:	0022      	movs	r2, r4
 80066de:	2301      	movs	r3, #1
 80066e0:	0038      	movs	r0, r7
 80066e2:	9908      	ldr	r1, [sp, #32]
 80066e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80066e6:	321a      	adds	r2, #26
 80066e8:	47b0      	blx	r6
 80066ea:	3001      	adds	r0, #1
 80066ec:	d100      	bne.n	80066f0 <_printf_float+0x3d0>
 80066ee:	e675      	b.n	80063dc <_printf_float+0xbc>
 80066f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066f2:	3301      	adds	r3, #1
 80066f4:	930e      	str	r3, [sp, #56]	; 0x38
 80066f6:	e7b0      	b.n	800665a <_printf_float+0x33a>
 80066f8:	0038      	movs	r0, r7
 80066fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066fe:	9908      	ldr	r1, [sp, #32]
 8006700:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006702:	47b0      	blx	r6
 8006704:	3001      	adds	r0, #1
 8006706:	d1b9      	bne.n	800667c <_printf_float+0x35c>
 8006708:	e668      	b.n	80063dc <_printf_float+0xbc>
 800670a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800670c:	0038      	movs	r0, r7
 800670e:	18ea      	adds	r2, r5, r3
 8006710:	9908      	ldr	r1, [sp, #32]
 8006712:	0033      	movs	r3, r6
 8006714:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006716:	47a8      	blx	r5
 8006718:	3001      	adds	r0, #1
 800671a:	d1b9      	bne.n	8006690 <_printf_float+0x370>
 800671c:	e65e      	b.n	80063dc <_printf_float+0xbc>
 800671e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006720:	2b01      	cmp	r3, #1
 8006722:	dc02      	bgt.n	800672a <_printf_float+0x40a>
 8006724:	2301      	movs	r3, #1
 8006726:	421a      	tst	r2, r3
 8006728:	d03a      	beq.n	80067a0 <_printf_float+0x480>
 800672a:	2301      	movs	r3, #1
 800672c:	002a      	movs	r2, r5
 800672e:	0038      	movs	r0, r7
 8006730:	9908      	ldr	r1, [sp, #32]
 8006732:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006734:	47b0      	blx	r6
 8006736:	3001      	adds	r0, #1
 8006738:	d100      	bne.n	800673c <_printf_float+0x41c>
 800673a:	e64f      	b.n	80063dc <_printf_float+0xbc>
 800673c:	0038      	movs	r0, r7
 800673e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006740:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006742:	9908      	ldr	r1, [sp, #32]
 8006744:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006746:	47b0      	blx	r6
 8006748:	3001      	adds	r0, #1
 800674a:	d100      	bne.n	800674e <_printf_float+0x42e>
 800674c:	e646      	b.n	80063dc <_printf_float+0xbc>
 800674e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006750:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006752:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006754:	2200      	movs	r2, #0
 8006756:	001e      	movs	r6, r3
 8006758:	2300      	movs	r3, #0
 800675a:	f7f9 fe77 	bl	800044c <__aeabi_dcmpeq>
 800675e:	2800      	cmp	r0, #0
 8006760:	d11c      	bne.n	800679c <_printf_float+0x47c>
 8006762:	0033      	movs	r3, r6
 8006764:	1c6a      	adds	r2, r5, #1
 8006766:	3b01      	subs	r3, #1
 8006768:	0038      	movs	r0, r7
 800676a:	9908      	ldr	r1, [sp, #32]
 800676c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800676e:	47a8      	blx	r5
 8006770:	3001      	adds	r0, #1
 8006772:	d10f      	bne.n	8006794 <_printf_float+0x474>
 8006774:	e632      	b.n	80063dc <_printf_float+0xbc>
 8006776:	0022      	movs	r2, r4
 8006778:	2301      	movs	r3, #1
 800677a:	0038      	movs	r0, r7
 800677c:	9908      	ldr	r1, [sp, #32]
 800677e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006780:	321a      	adds	r2, #26
 8006782:	47b0      	blx	r6
 8006784:	3001      	adds	r0, #1
 8006786:	d100      	bne.n	800678a <_printf_float+0x46a>
 8006788:	e628      	b.n	80063dc <_printf_float+0xbc>
 800678a:	3501      	adds	r5, #1
 800678c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800678e:	3b01      	subs	r3, #1
 8006790:	42ab      	cmp	r3, r5
 8006792:	dcf0      	bgt.n	8006776 <_printf_float+0x456>
 8006794:	0022      	movs	r2, r4
 8006796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006798:	3250      	adds	r2, #80	; 0x50
 800679a:	e6c8      	b.n	800652e <_printf_float+0x20e>
 800679c:	2500      	movs	r5, #0
 800679e:	e7f5      	b.n	800678c <_printf_float+0x46c>
 80067a0:	002a      	movs	r2, r5
 80067a2:	e7e1      	b.n	8006768 <_printf_float+0x448>
 80067a4:	0022      	movs	r2, r4
 80067a6:	2301      	movs	r3, #1
 80067a8:	0038      	movs	r0, r7
 80067aa:	9908      	ldr	r1, [sp, #32]
 80067ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80067ae:	3219      	adds	r2, #25
 80067b0:	47b0      	blx	r6
 80067b2:	3001      	adds	r0, #1
 80067b4:	d100      	bne.n	80067b8 <_printf_float+0x498>
 80067b6:	e611      	b.n	80063dc <_printf_float+0xbc>
 80067b8:	3501      	adds	r5, #1
 80067ba:	68e3      	ldr	r3, [r4, #12]
 80067bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067be:	1a9b      	subs	r3, r3, r2
 80067c0:	42ab      	cmp	r3, r5
 80067c2:	dcef      	bgt.n	80067a4 <_printf_float+0x484>
 80067c4:	e6e8      	b.n	8006598 <_printf_float+0x278>
 80067c6:	2500      	movs	r5, #0
 80067c8:	e7f7      	b.n	80067ba <_printf_float+0x49a>
 80067ca:	46c0      	nop			; (mov r8, r8)

080067cc <_printf_common>:
 80067cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067ce:	0016      	movs	r6, r2
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	688a      	ldr	r2, [r1, #8]
 80067d4:	690b      	ldr	r3, [r1, #16]
 80067d6:	000c      	movs	r4, r1
 80067d8:	9000      	str	r0, [sp, #0]
 80067da:	4293      	cmp	r3, r2
 80067dc:	da00      	bge.n	80067e0 <_printf_common+0x14>
 80067de:	0013      	movs	r3, r2
 80067e0:	0022      	movs	r2, r4
 80067e2:	6033      	str	r3, [r6, #0]
 80067e4:	3243      	adds	r2, #67	; 0x43
 80067e6:	7812      	ldrb	r2, [r2, #0]
 80067e8:	2a00      	cmp	r2, #0
 80067ea:	d001      	beq.n	80067f0 <_printf_common+0x24>
 80067ec:	3301      	adds	r3, #1
 80067ee:	6033      	str	r3, [r6, #0]
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	069b      	lsls	r3, r3, #26
 80067f4:	d502      	bpl.n	80067fc <_printf_common+0x30>
 80067f6:	6833      	ldr	r3, [r6, #0]
 80067f8:	3302      	adds	r3, #2
 80067fa:	6033      	str	r3, [r6, #0]
 80067fc:	6822      	ldr	r2, [r4, #0]
 80067fe:	2306      	movs	r3, #6
 8006800:	0015      	movs	r5, r2
 8006802:	401d      	ands	r5, r3
 8006804:	421a      	tst	r2, r3
 8006806:	d027      	beq.n	8006858 <_printf_common+0x8c>
 8006808:	0023      	movs	r3, r4
 800680a:	3343      	adds	r3, #67	; 0x43
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	1e5a      	subs	r2, r3, #1
 8006810:	4193      	sbcs	r3, r2
 8006812:	6822      	ldr	r2, [r4, #0]
 8006814:	0692      	lsls	r2, r2, #26
 8006816:	d430      	bmi.n	800687a <_printf_common+0xae>
 8006818:	0022      	movs	r2, r4
 800681a:	9901      	ldr	r1, [sp, #4]
 800681c:	9800      	ldr	r0, [sp, #0]
 800681e:	9d08      	ldr	r5, [sp, #32]
 8006820:	3243      	adds	r2, #67	; 0x43
 8006822:	47a8      	blx	r5
 8006824:	3001      	adds	r0, #1
 8006826:	d025      	beq.n	8006874 <_printf_common+0xa8>
 8006828:	2206      	movs	r2, #6
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	2500      	movs	r5, #0
 800682e:	4013      	ands	r3, r2
 8006830:	2b04      	cmp	r3, #4
 8006832:	d105      	bne.n	8006840 <_printf_common+0x74>
 8006834:	6833      	ldr	r3, [r6, #0]
 8006836:	68e5      	ldr	r5, [r4, #12]
 8006838:	1aed      	subs	r5, r5, r3
 800683a:	43eb      	mvns	r3, r5
 800683c:	17db      	asrs	r3, r3, #31
 800683e:	401d      	ands	r5, r3
 8006840:	68a3      	ldr	r3, [r4, #8]
 8006842:	6922      	ldr	r2, [r4, #16]
 8006844:	4293      	cmp	r3, r2
 8006846:	dd01      	ble.n	800684c <_printf_common+0x80>
 8006848:	1a9b      	subs	r3, r3, r2
 800684a:	18ed      	adds	r5, r5, r3
 800684c:	2600      	movs	r6, #0
 800684e:	42b5      	cmp	r5, r6
 8006850:	d120      	bne.n	8006894 <_printf_common+0xc8>
 8006852:	2000      	movs	r0, #0
 8006854:	e010      	b.n	8006878 <_printf_common+0xac>
 8006856:	3501      	adds	r5, #1
 8006858:	68e3      	ldr	r3, [r4, #12]
 800685a:	6832      	ldr	r2, [r6, #0]
 800685c:	1a9b      	subs	r3, r3, r2
 800685e:	42ab      	cmp	r3, r5
 8006860:	ddd2      	ble.n	8006808 <_printf_common+0x3c>
 8006862:	0022      	movs	r2, r4
 8006864:	2301      	movs	r3, #1
 8006866:	9901      	ldr	r1, [sp, #4]
 8006868:	9800      	ldr	r0, [sp, #0]
 800686a:	9f08      	ldr	r7, [sp, #32]
 800686c:	3219      	adds	r2, #25
 800686e:	47b8      	blx	r7
 8006870:	3001      	adds	r0, #1
 8006872:	d1f0      	bne.n	8006856 <_printf_common+0x8a>
 8006874:	2001      	movs	r0, #1
 8006876:	4240      	negs	r0, r0
 8006878:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800687a:	2030      	movs	r0, #48	; 0x30
 800687c:	18e1      	adds	r1, r4, r3
 800687e:	3143      	adds	r1, #67	; 0x43
 8006880:	7008      	strb	r0, [r1, #0]
 8006882:	0021      	movs	r1, r4
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	3145      	adds	r1, #69	; 0x45
 8006888:	7809      	ldrb	r1, [r1, #0]
 800688a:	18a2      	adds	r2, r4, r2
 800688c:	3243      	adds	r2, #67	; 0x43
 800688e:	3302      	adds	r3, #2
 8006890:	7011      	strb	r1, [r2, #0]
 8006892:	e7c1      	b.n	8006818 <_printf_common+0x4c>
 8006894:	0022      	movs	r2, r4
 8006896:	2301      	movs	r3, #1
 8006898:	9901      	ldr	r1, [sp, #4]
 800689a:	9800      	ldr	r0, [sp, #0]
 800689c:	9f08      	ldr	r7, [sp, #32]
 800689e:	321a      	adds	r2, #26
 80068a0:	47b8      	blx	r7
 80068a2:	3001      	adds	r0, #1
 80068a4:	d0e6      	beq.n	8006874 <_printf_common+0xa8>
 80068a6:	3601      	adds	r6, #1
 80068a8:	e7d1      	b.n	800684e <_printf_common+0x82>
	...

080068ac <_printf_i>:
 80068ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ae:	b08b      	sub	sp, #44	; 0x2c
 80068b0:	9206      	str	r2, [sp, #24]
 80068b2:	000a      	movs	r2, r1
 80068b4:	3243      	adds	r2, #67	; 0x43
 80068b6:	9307      	str	r3, [sp, #28]
 80068b8:	9005      	str	r0, [sp, #20]
 80068ba:	9204      	str	r2, [sp, #16]
 80068bc:	7e0a      	ldrb	r2, [r1, #24]
 80068be:	000c      	movs	r4, r1
 80068c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068c2:	2a78      	cmp	r2, #120	; 0x78
 80068c4:	d809      	bhi.n	80068da <_printf_i+0x2e>
 80068c6:	2a62      	cmp	r2, #98	; 0x62
 80068c8:	d80b      	bhi.n	80068e2 <_printf_i+0x36>
 80068ca:	2a00      	cmp	r2, #0
 80068cc:	d100      	bne.n	80068d0 <_printf_i+0x24>
 80068ce:	e0be      	b.n	8006a4e <_printf_i+0x1a2>
 80068d0:	497c      	ldr	r1, [pc, #496]	; (8006ac4 <_printf_i+0x218>)
 80068d2:	9103      	str	r1, [sp, #12]
 80068d4:	2a58      	cmp	r2, #88	; 0x58
 80068d6:	d100      	bne.n	80068da <_printf_i+0x2e>
 80068d8:	e093      	b.n	8006a02 <_printf_i+0x156>
 80068da:	0026      	movs	r6, r4
 80068dc:	3642      	adds	r6, #66	; 0x42
 80068de:	7032      	strb	r2, [r6, #0]
 80068e0:	e022      	b.n	8006928 <_printf_i+0x7c>
 80068e2:	0010      	movs	r0, r2
 80068e4:	3863      	subs	r0, #99	; 0x63
 80068e6:	2815      	cmp	r0, #21
 80068e8:	d8f7      	bhi.n	80068da <_printf_i+0x2e>
 80068ea:	f7f9 fc1f 	bl	800012c <__gnu_thumb1_case_shi>
 80068ee:	0016      	.short	0x0016
 80068f0:	fff6001f 	.word	0xfff6001f
 80068f4:	fff6fff6 	.word	0xfff6fff6
 80068f8:	001ffff6 	.word	0x001ffff6
 80068fc:	fff6fff6 	.word	0xfff6fff6
 8006900:	fff6fff6 	.word	0xfff6fff6
 8006904:	003600a3 	.word	0x003600a3
 8006908:	fff60083 	.word	0xfff60083
 800690c:	00b4fff6 	.word	0x00b4fff6
 8006910:	0036fff6 	.word	0x0036fff6
 8006914:	fff6fff6 	.word	0xfff6fff6
 8006918:	0087      	.short	0x0087
 800691a:	0026      	movs	r6, r4
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	3642      	adds	r6, #66	; 0x42
 8006920:	1d11      	adds	r1, r2, #4
 8006922:	6019      	str	r1, [r3, #0]
 8006924:	6813      	ldr	r3, [r2, #0]
 8006926:	7033      	strb	r3, [r6, #0]
 8006928:	2301      	movs	r3, #1
 800692a:	e0a2      	b.n	8006a72 <_printf_i+0x1c6>
 800692c:	6818      	ldr	r0, [r3, #0]
 800692e:	6809      	ldr	r1, [r1, #0]
 8006930:	1d02      	adds	r2, r0, #4
 8006932:	060d      	lsls	r5, r1, #24
 8006934:	d50b      	bpl.n	800694e <_printf_i+0xa2>
 8006936:	6805      	ldr	r5, [r0, #0]
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	2d00      	cmp	r5, #0
 800693c:	da03      	bge.n	8006946 <_printf_i+0x9a>
 800693e:	232d      	movs	r3, #45	; 0x2d
 8006940:	9a04      	ldr	r2, [sp, #16]
 8006942:	426d      	negs	r5, r5
 8006944:	7013      	strb	r3, [r2, #0]
 8006946:	4b5f      	ldr	r3, [pc, #380]	; (8006ac4 <_printf_i+0x218>)
 8006948:	270a      	movs	r7, #10
 800694a:	9303      	str	r3, [sp, #12]
 800694c:	e01b      	b.n	8006986 <_printf_i+0xda>
 800694e:	6805      	ldr	r5, [r0, #0]
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	0649      	lsls	r1, r1, #25
 8006954:	d5f1      	bpl.n	800693a <_printf_i+0x8e>
 8006956:	b22d      	sxth	r5, r5
 8006958:	e7ef      	b.n	800693a <_printf_i+0x8e>
 800695a:	680d      	ldr	r5, [r1, #0]
 800695c:	6819      	ldr	r1, [r3, #0]
 800695e:	1d08      	adds	r0, r1, #4
 8006960:	6018      	str	r0, [r3, #0]
 8006962:	062e      	lsls	r6, r5, #24
 8006964:	d501      	bpl.n	800696a <_printf_i+0xbe>
 8006966:	680d      	ldr	r5, [r1, #0]
 8006968:	e003      	b.n	8006972 <_printf_i+0xc6>
 800696a:	066d      	lsls	r5, r5, #25
 800696c:	d5fb      	bpl.n	8006966 <_printf_i+0xba>
 800696e:	680d      	ldr	r5, [r1, #0]
 8006970:	b2ad      	uxth	r5, r5
 8006972:	4b54      	ldr	r3, [pc, #336]	; (8006ac4 <_printf_i+0x218>)
 8006974:	2708      	movs	r7, #8
 8006976:	9303      	str	r3, [sp, #12]
 8006978:	2a6f      	cmp	r2, #111	; 0x6f
 800697a:	d000      	beq.n	800697e <_printf_i+0xd2>
 800697c:	3702      	adds	r7, #2
 800697e:	0023      	movs	r3, r4
 8006980:	2200      	movs	r2, #0
 8006982:	3343      	adds	r3, #67	; 0x43
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	6863      	ldr	r3, [r4, #4]
 8006988:	60a3      	str	r3, [r4, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	db03      	blt.n	8006996 <_printf_i+0xea>
 800698e:	2104      	movs	r1, #4
 8006990:	6822      	ldr	r2, [r4, #0]
 8006992:	438a      	bics	r2, r1
 8006994:	6022      	str	r2, [r4, #0]
 8006996:	2d00      	cmp	r5, #0
 8006998:	d102      	bne.n	80069a0 <_printf_i+0xf4>
 800699a:	9e04      	ldr	r6, [sp, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00c      	beq.n	80069ba <_printf_i+0x10e>
 80069a0:	9e04      	ldr	r6, [sp, #16]
 80069a2:	0028      	movs	r0, r5
 80069a4:	0039      	movs	r1, r7
 80069a6:	f7f9 fc51 	bl	800024c <__aeabi_uidivmod>
 80069aa:	9b03      	ldr	r3, [sp, #12]
 80069ac:	3e01      	subs	r6, #1
 80069ae:	5c5b      	ldrb	r3, [r3, r1]
 80069b0:	7033      	strb	r3, [r6, #0]
 80069b2:	002b      	movs	r3, r5
 80069b4:	0005      	movs	r5, r0
 80069b6:	429f      	cmp	r7, r3
 80069b8:	d9f3      	bls.n	80069a2 <_printf_i+0xf6>
 80069ba:	2f08      	cmp	r7, #8
 80069bc:	d109      	bne.n	80069d2 <_printf_i+0x126>
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	07db      	lsls	r3, r3, #31
 80069c2:	d506      	bpl.n	80069d2 <_printf_i+0x126>
 80069c4:	6862      	ldr	r2, [r4, #4]
 80069c6:	6923      	ldr	r3, [r4, #16]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	dc02      	bgt.n	80069d2 <_printf_i+0x126>
 80069cc:	2330      	movs	r3, #48	; 0x30
 80069ce:	3e01      	subs	r6, #1
 80069d0:	7033      	strb	r3, [r6, #0]
 80069d2:	9b04      	ldr	r3, [sp, #16]
 80069d4:	1b9b      	subs	r3, r3, r6
 80069d6:	6123      	str	r3, [r4, #16]
 80069d8:	9b07      	ldr	r3, [sp, #28]
 80069da:	0021      	movs	r1, r4
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	9805      	ldr	r0, [sp, #20]
 80069e0:	9b06      	ldr	r3, [sp, #24]
 80069e2:	aa09      	add	r2, sp, #36	; 0x24
 80069e4:	f7ff fef2 	bl	80067cc <_printf_common>
 80069e8:	3001      	adds	r0, #1
 80069ea:	d147      	bne.n	8006a7c <_printf_i+0x1d0>
 80069ec:	2001      	movs	r0, #1
 80069ee:	4240      	negs	r0, r0
 80069f0:	b00b      	add	sp, #44	; 0x2c
 80069f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069f4:	2220      	movs	r2, #32
 80069f6:	6809      	ldr	r1, [r1, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	6022      	str	r2, [r4, #0]
 80069fc:	2278      	movs	r2, #120	; 0x78
 80069fe:	4932      	ldr	r1, [pc, #200]	; (8006ac8 <_printf_i+0x21c>)
 8006a00:	9103      	str	r1, [sp, #12]
 8006a02:	0021      	movs	r1, r4
 8006a04:	3145      	adds	r1, #69	; 0x45
 8006a06:	700a      	strb	r2, [r1, #0]
 8006a08:	6819      	ldr	r1, [r3, #0]
 8006a0a:	6822      	ldr	r2, [r4, #0]
 8006a0c:	c920      	ldmia	r1!, {r5}
 8006a0e:	0610      	lsls	r0, r2, #24
 8006a10:	d402      	bmi.n	8006a18 <_printf_i+0x16c>
 8006a12:	0650      	lsls	r0, r2, #25
 8006a14:	d500      	bpl.n	8006a18 <_printf_i+0x16c>
 8006a16:	b2ad      	uxth	r5, r5
 8006a18:	6019      	str	r1, [r3, #0]
 8006a1a:	07d3      	lsls	r3, r2, #31
 8006a1c:	d502      	bpl.n	8006a24 <_printf_i+0x178>
 8006a1e:	2320      	movs	r3, #32
 8006a20:	4313      	orrs	r3, r2
 8006a22:	6023      	str	r3, [r4, #0]
 8006a24:	2710      	movs	r7, #16
 8006a26:	2d00      	cmp	r5, #0
 8006a28:	d1a9      	bne.n	800697e <_printf_i+0xd2>
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	4393      	bics	r3, r2
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	e7a4      	b.n	800697e <_printf_i+0xd2>
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	680d      	ldr	r5, [r1, #0]
 8006a38:	1d10      	adds	r0, r2, #4
 8006a3a:	6949      	ldr	r1, [r1, #20]
 8006a3c:	6018      	str	r0, [r3, #0]
 8006a3e:	6813      	ldr	r3, [r2, #0]
 8006a40:	062e      	lsls	r6, r5, #24
 8006a42:	d501      	bpl.n	8006a48 <_printf_i+0x19c>
 8006a44:	6019      	str	r1, [r3, #0]
 8006a46:	e002      	b.n	8006a4e <_printf_i+0x1a2>
 8006a48:	066d      	lsls	r5, r5, #25
 8006a4a:	d5fb      	bpl.n	8006a44 <_printf_i+0x198>
 8006a4c:	8019      	strh	r1, [r3, #0]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	9e04      	ldr	r6, [sp, #16]
 8006a52:	6123      	str	r3, [r4, #16]
 8006a54:	e7c0      	b.n	80069d8 <_printf_i+0x12c>
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	1d11      	adds	r1, r2, #4
 8006a5a:	6019      	str	r1, [r3, #0]
 8006a5c:	6816      	ldr	r6, [r2, #0]
 8006a5e:	2100      	movs	r1, #0
 8006a60:	0030      	movs	r0, r6
 8006a62:	6862      	ldr	r2, [r4, #4]
 8006a64:	f000 f9e9 	bl	8006e3a <memchr>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	d001      	beq.n	8006a70 <_printf_i+0x1c4>
 8006a6c:	1b80      	subs	r0, r0, r6
 8006a6e:	6060      	str	r0, [r4, #4]
 8006a70:	6863      	ldr	r3, [r4, #4]
 8006a72:	6123      	str	r3, [r4, #16]
 8006a74:	2300      	movs	r3, #0
 8006a76:	9a04      	ldr	r2, [sp, #16]
 8006a78:	7013      	strb	r3, [r2, #0]
 8006a7a:	e7ad      	b.n	80069d8 <_printf_i+0x12c>
 8006a7c:	0032      	movs	r2, r6
 8006a7e:	6923      	ldr	r3, [r4, #16]
 8006a80:	9906      	ldr	r1, [sp, #24]
 8006a82:	9805      	ldr	r0, [sp, #20]
 8006a84:	9d07      	ldr	r5, [sp, #28]
 8006a86:	47a8      	blx	r5
 8006a88:	3001      	adds	r0, #1
 8006a8a:	d0af      	beq.n	80069ec <_printf_i+0x140>
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	079b      	lsls	r3, r3, #30
 8006a90:	d415      	bmi.n	8006abe <_printf_i+0x212>
 8006a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a94:	68e0      	ldr	r0, [r4, #12]
 8006a96:	4298      	cmp	r0, r3
 8006a98:	daaa      	bge.n	80069f0 <_printf_i+0x144>
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	e7a8      	b.n	80069f0 <_printf_i+0x144>
 8006a9e:	0022      	movs	r2, r4
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	9906      	ldr	r1, [sp, #24]
 8006aa4:	9805      	ldr	r0, [sp, #20]
 8006aa6:	9e07      	ldr	r6, [sp, #28]
 8006aa8:	3219      	adds	r2, #25
 8006aaa:	47b0      	blx	r6
 8006aac:	3001      	adds	r0, #1
 8006aae:	d09d      	beq.n	80069ec <_printf_i+0x140>
 8006ab0:	3501      	adds	r5, #1
 8006ab2:	68e3      	ldr	r3, [r4, #12]
 8006ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ab6:	1a9b      	subs	r3, r3, r2
 8006ab8:	42ab      	cmp	r3, r5
 8006aba:	dcf0      	bgt.n	8006a9e <_printf_i+0x1f2>
 8006abc:	e7e9      	b.n	8006a92 <_printf_i+0x1e6>
 8006abe:	2500      	movs	r5, #0
 8006ac0:	e7f7      	b.n	8006ab2 <_printf_i+0x206>
 8006ac2:	46c0      	nop			; (mov r8, r8)
 8006ac4:	080091da 	.word	0x080091da
 8006ac8:	080091eb 	.word	0x080091eb

08006acc <std>:
 8006acc:	2300      	movs	r3, #0
 8006ace:	b510      	push	{r4, lr}
 8006ad0:	0004      	movs	r4, r0
 8006ad2:	6003      	str	r3, [r0, #0]
 8006ad4:	6043      	str	r3, [r0, #4]
 8006ad6:	6083      	str	r3, [r0, #8]
 8006ad8:	8181      	strh	r1, [r0, #12]
 8006ada:	6643      	str	r3, [r0, #100]	; 0x64
 8006adc:	81c2      	strh	r2, [r0, #14]
 8006ade:	6103      	str	r3, [r0, #16]
 8006ae0:	6143      	str	r3, [r0, #20]
 8006ae2:	6183      	str	r3, [r0, #24]
 8006ae4:	0019      	movs	r1, r3
 8006ae6:	2208      	movs	r2, #8
 8006ae8:	305c      	adds	r0, #92	; 0x5c
 8006aea:	f000 f91f 	bl	8006d2c <memset>
 8006aee:	4b0b      	ldr	r3, [pc, #44]	; (8006b1c <std+0x50>)
 8006af0:	6224      	str	r4, [r4, #32]
 8006af2:	6263      	str	r3, [r4, #36]	; 0x24
 8006af4:	4b0a      	ldr	r3, [pc, #40]	; (8006b20 <std+0x54>)
 8006af6:	62a3      	str	r3, [r4, #40]	; 0x28
 8006af8:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <std+0x58>)
 8006afa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006afc:	4b0a      	ldr	r3, [pc, #40]	; (8006b28 <std+0x5c>)
 8006afe:	6323      	str	r3, [r4, #48]	; 0x30
 8006b00:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <std+0x60>)
 8006b02:	429c      	cmp	r4, r3
 8006b04:	d005      	beq.n	8006b12 <std+0x46>
 8006b06:	4b0a      	ldr	r3, [pc, #40]	; (8006b30 <std+0x64>)
 8006b08:	429c      	cmp	r4, r3
 8006b0a:	d002      	beq.n	8006b12 <std+0x46>
 8006b0c:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <std+0x68>)
 8006b0e:	429c      	cmp	r4, r3
 8006b10:	d103      	bne.n	8006b1a <std+0x4e>
 8006b12:	0020      	movs	r0, r4
 8006b14:	3058      	adds	r0, #88	; 0x58
 8006b16:	f000 f98d 	bl	8006e34 <__retarget_lock_init_recursive>
 8006b1a:	bd10      	pop	{r4, pc}
 8006b1c:	08006c95 	.word	0x08006c95
 8006b20:	08006cbd 	.word	0x08006cbd
 8006b24:	08006cf5 	.word	0x08006cf5
 8006b28:	08006d21 	.word	0x08006d21
 8006b2c:	20000704 	.word	0x20000704
 8006b30:	2000076c 	.word	0x2000076c
 8006b34:	200007d4 	.word	0x200007d4

08006b38 <stdio_exit_handler>:
 8006b38:	b510      	push	{r4, lr}
 8006b3a:	4a03      	ldr	r2, [pc, #12]	; (8006b48 <stdio_exit_handler+0x10>)
 8006b3c:	4903      	ldr	r1, [pc, #12]	; (8006b4c <stdio_exit_handler+0x14>)
 8006b3e:	4804      	ldr	r0, [pc, #16]	; (8006b50 <stdio_exit_handler+0x18>)
 8006b40:	f000 f86c 	bl	8006c1c <_fwalk_sglue>
 8006b44:	bd10      	pop	{r4, pc}
 8006b46:	46c0      	nop			; (mov r8, r8)
 8006b48:	20000010 	.word	0x20000010
 8006b4c:	080088a9 	.word	0x080088a9
 8006b50:	2000001c 	.word	0x2000001c

08006b54 <cleanup_stdio>:
 8006b54:	6841      	ldr	r1, [r0, #4]
 8006b56:	4b0b      	ldr	r3, [pc, #44]	; (8006b84 <cleanup_stdio+0x30>)
 8006b58:	b510      	push	{r4, lr}
 8006b5a:	0004      	movs	r4, r0
 8006b5c:	4299      	cmp	r1, r3
 8006b5e:	d001      	beq.n	8006b64 <cleanup_stdio+0x10>
 8006b60:	f001 fea2 	bl	80088a8 <_fflush_r>
 8006b64:	68a1      	ldr	r1, [r4, #8]
 8006b66:	4b08      	ldr	r3, [pc, #32]	; (8006b88 <cleanup_stdio+0x34>)
 8006b68:	4299      	cmp	r1, r3
 8006b6a:	d002      	beq.n	8006b72 <cleanup_stdio+0x1e>
 8006b6c:	0020      	movs	r0, r4
 8006b6e:	f001 fe9b 	bl	80088a8 <_fflush_r>
 8006b72:	68e1      	ldr	r1, [r4, #12]
 8006b74:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <cleanup_stdio+0x38>)
 8006b76:	4299      	cmp	r1, r3
 8006b78:	d002      	beq.n	8006b80 <cleanup_stdio+0x2c>
 8006b7a:	0020      	movs	r0, r4
 8006b7c:	f001 fe94 	bl	80088a8 <_fflush_r>
 8006b80:	bd10      	pop	{r4, pc}
 8006b82:	46c0      	nop			; (mov r8, r8)
 8006b84:	20000704 	.word	0x20000704
 8006b88:	2000076c 	.word	0x2000076c
 8006b8c:	200007d4 	.word	0x200007d4

08006b90 <global_stdio_init.part.0>:
 8006b90:	b510      	push	{r4, lr}
 8006b92:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <global_stdio_init.part.0+0x28>)
 8006b94:	4a09      	ldr	r2, [pc, #36]	; (8006bbc <global_stdio_init.part.0+0x2c>)
 8006b96:	2104      	movs	r1, #4
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	4809      	ldr	r0, [pc, #36]	; (8006bc0 <global_stdio_init.part.0+0x30>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f7ff ff95 	bl	8006acc <std>
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	2109      	movs	r1, #9
 8006ba6:	4807      	ldr	r0, [pc, #28]	; (8006bc4 <global_stdio_init.part.0+0x34>)
 8006ba8:	f7ff ff90 	bl	8006acc <std>
 8006bac:	2202      	movs	r2, #2
 8006bae:	2112      	movs	r1, #18
 8006bb0:	4805      	ldr	r0, [pc, #20]	; (8006bc8 <global_stdio_init.part.0+0x38>)
 8006bb2:	f7ff ff8b 	bl	8006acc <std>
 8006bb6:	bd10      	pop	{r4, pc}
 8006bb8:	2000083c 	.word	0x2000083c
 8006bbc:	08006b39 	.word	0x08006b39
 8006bc0:	20000704 	.word	0x20000704
 8006bc4:	2000076c 	.word	0x2000076c
 8006bc8:	200007d4 	.word	0x200007d4

08006bcc <__sfp_lock_acquire>:
 8006bcc:	b510      	push	{r4, lr}
 8006bce:	4802      	ldr	r0, [pc, #8]	; (8006bd8 <__sfp_lock_acquire+0xc>)
 8006bd0:	f000 f931 	bl	8006e36 <__retarget_lock_acquire_recursive>
 8006bd4:	bd10      	pop	{r4, pc}
 8006bd6:	46c0      	nop			; (mov r8, r8)
 8006bd8:	20000845 	.word	0x20000845

08006bdc <__sfp_lock_release>:
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	4802      	ldr	r0, [pc, #8]	; (8006be8 <__sfp_lock_release+0xc>)
 8006be0:	f000 f92a 	bl	8006e38 <__retarget_lock_release_recursive>
 8006be4:	bd10      	pop	{r4, pc}
 8006be6:	46c0      	nop			; (mov r8, r8)
 8006be8:	20000845 	.word	0x20000845

08006bec <__sinit>:
 8006bec:	b510      	push	{r4, lr}
 8006bee:	0004      	movs	r4, r0
 8006bf0:	f7ff ffec 	bl	8006bcc <__sfp_lock_acquire>
 8006bf4:	6a23      	ldr	r3, [r4, #32]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <__sinit+0x14>
 8006bfa:	f7ff ffef 	bl	8006bdc <__sfp_lock_release>
 8006bfe:	bd10      	pop	{r4, pc}
 8006c00:	4b04      	ldr	r3, [pc, #16]	; (8006c14 <__sinit+0x28>)
 8006c02:	6223      	str	r3, [r4, #32]
 8006c04:	4b04      	ldr	r3, [pc, #16]	; (8006c18 <__sinit+0x2c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1f6      	bne.n	8006bfa <__sinit+0xe>
 8006c0c:	f7ff ffc0 	bl	8006b90 <global_stdio_init.part.0>
 8006c10:	e7f3      	b.n	8006bfa <__sinit+0xe>
 8006c12:	46c0      	nop			; (mov r8, r8)
 8006c14:	08006b55 	.word	0x08006b55
 8006c18:	2000083c 	.word	0x2000083c

08006c1c <_fwalk_sglue>:
 8006c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c1e:	0014      	movs	r4, r2
 8006c20:	2600      	movs	r6, #0
 8006c22:	9000      	str	r0, [sp, #0]
 8006c24:	9101      	str	r1, [sp, #4]
 8006c26:	68a5      	ldr	r5, [r4, #8]
 8006c28:	6867      	ldr	r7, [r4, #4]
 8006c2a:	3f01      	subs	r7, #1
 8006c2c:	d504      	bpl.n	8006c38 <_fwalk_sglue+0x1c>
 8006c2e:	6824      	ldr	r4, [r4, #0]
 8006c30:	2c00      	cmp	r4, #0
 8006c32:	d1f8      	bne.n	8006c26 <_fwalk_sglue+0xa>
 8006c34:	0030      	movs	r0, r6
 8006c36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c38:	89ab      	ldrh	r3, [r5, #12]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d908      	bls.n	8006c50 <_fwalk_sglue+0x34>
 8006c3e:	220e      	movs	r2, #14
 8006c40:	5eab      	ldrsh	r3, [r5, r2]
 8006c42:	3301      	adds	r3, #1
 8006c44:	d004      	beq.n	8006c50 <_fwalk_sglue+0x34>
 8006c46:	0029      	movs	r1, r5
 8006c48:	9800      	ldr	r0, [sp, #0]
 8006c4a:	9b01      	ldr	r3, [sp, #4]
 8006c4c:	4798      	blx	r3
 8006c4e:	4306      	orrs	r6, r0
 8006c50:	3568      	adds	r5, #104	; 0x68
 8006c52:	e7ea      	b.n	8006c2a <_fwalk_sglue+0xe>

08006c54 <siprintf>:
 8006c54:	b40e      	push	{r1, r2, r3}
 8006c56:	b500      	push	{lr}
 8006c58:	490b      	ldr	r1, [pc, #44]	; (8006c88 <siprintf+0x34>)
 8006c5a:	b09c      	sub	sp, #112	; 0x70
 8006c5c:	ab1d      	add	r3, sp, #116	; 0x74
 8006c5e:	9002      	str	r0, [sp, #8]
 8006c60:	9006      	str	r0, [sp, #24]
 8006c62:	9107      	str	r1, [sp, #28]
 8006c64:	9104      	str	r1, [sp, #16]
 8006c66:	4809      	ldr	r0, [pc, #36]	; (8006c8c <siprintf+0x38>)
 8006c68:	4909      	ldr	r1, [pc, #36]	; (8006c90 <siprintf+0x3c>)
 8006c6a:	cb04      	ldmia	r3!, {r2}
 8006c6c:	9105      	str	r1, [sp, #20]
 8006c6e:	6800      	ldr	r0, [r0, #0]
 8006c70:	a902      	add	r1, sp, #8
 8006c72:	9301      	str	r3, [sp, #4]
 8006c74:	f001 fc8e 	bl	8008594 <_svfiprintf_r>
 8006c78:	2200      	movs	r2, #0
 8006c7a:	9b02      	ldr	r3, [sp, #8]
 8006c7c:	701a      	strb	r2, [r3, #0]
 8006c7e:	b01c      	add	sp, #112	; 0x70
 8006c80:	bc08      	pop	{r3}
 8006c82:	b003      	add	sp, #12
 8006c84:	4718      	bx	r3
 8006c86:	46c0      	nop			; (mov r8, r8)
 8006c88:	7fffffff 	.word	0x7fffffff
 8006c8c:	20000068 	.word	0x20000068
 8006c90:	ffff0208 	.word	0xffff0208

08006c94 <__sread>:
 8006c94:	b570      	push	{r4, r5, r6, lr}
 8006c96:	000c      	movs	r4, r1
 8006c98:	250e      	movs	r5, #14
 8006c9a:	5f49      	ldrsh	r1, [r1, r5]
 8006c9c:	f000 f878 	bl	8006d90 <_read_r>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	db03      	blt.n	8006cac <__sread+0x18>
 8006ca4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006ca6:	181b      	adds	r3, r3, r0
 8006ca8:	6563      	str	r3, [r4, #84]	; 0x54
 8006caa:	bd70      	pop	{r4, r5, r6, pc}
 8006cac:	89a3      	ldrh	r3, [r4, #12]
 8006cae:	4a02      	ldr	r2, [pc, #8]	; (8006cb8 <__sread+0x24>)
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	81a3      	strh	r3, [r4, #12]
 8006cb4:	e7f9      	b.n	8006caa <__sread+0x16>
 8006cb6:	46c0      	nop			; (mov r8, r8)
 8006cb8:	ffffefff 	.word	0xffffefff

08006cbc <__swrite>:
 8006cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cbe:	001f      	movs	r7, r3
 8006cc0:	898b      	ldrh	r3, [r1, #12]
 8006cc2:	0005      	movs	r5, r0
 8006cc4:	000c      	movs	r4, r1
 8006cc6:	0016      	movs	r6, r2
 8006cc8:	05db      	lsls	r3, r3, #23
 8006cca:	d505      	bpl.n	8006cd8 <__swrite+0x1c>
 8006ccc:	230e      	movs	r3, #14
 8006cce:	5ec9      	ldrsh	r1, [r1, r3]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	f000 f848 	bl	8006d68 <_lseek_r>
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	4a05      	ldr	r2, [pc, #20]	; (8006cf0 <__swrite+0x34>)
 8006cdc:	0028      	movs	r0, r5
 8006cde:	4013      	ands	r3, r2
 8006ce0:	81a3      	strh	r3, [r4, #12]
 8006ce2:	0032      	movs	r2, r6
 8006ce4:	230e      	movs	r3, #14
 8006ce6:	5ee1      	ldrsh	r1, [r4, r3]
 8006ce8:	003b      	movs	r3, r7
 8006cea:	f000 f865 	bl	8006db8 <_write_r>
 8006cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cf0:	ffffefff 	.word	0xffffefff

08006cf4 <__sseek>:
 8006cf4:	b570      	push	{r4, r5, r6, lr}
 8006cf6:	000c      	movs	r4, r1
 8006cf8:	250e      	movs	r5, #14
 8006cfa:	5f49      	ldrsh	r1, [r1, r5]
 8006cfc:	f000 f834 	bl	8006d68 <_lseek_r>
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	1c42      	adds	r2, r0, #1
 8006d04:	d103      	bne.n	8006d0e <__sseek+0x1a>
 8006d06:	4a05      	ldr	r2, [pc, #20]	; (8006d1c <__sseek+0x28>)
 8006d08:	4013      	ands	r3, r2
 8006d0a:	81a3      	strh	r3, [r4, #12]
 8006d0c:	bd70      	pop	{r4, r5, r6, pc}
 8006d0e:	2280      	movs	r2, #128	; 0x80
 8006d10:	0152      	lsls	r2, r2, #5
 8006d12:	4313      	orrs	r3, r2
 8006d14:	81a3      	strh	r3, [r4, #12]
 8006d16:	6560      	str	r0, [r4, #84]	; 0x54
 8006d18:	e7f8      	b.n	8006d0c <__sseek+0x18>
 8006d1a:	46c0      	nop			; (mov r8, r8)
 8006d1c:	ffffefff 	.word	0xffffefff

08006d20 <__sclose>:
 8006d20:	b510      	push	{r4, lr}
 8006d22:	230e      	movs	r3, #14
 8006d24:	5ec9      	ldrsh	r1, [r1, r3]
 8006d26:	f000 f80d 	bl	8006d44 <_close_r>
 8006d2a:	bd10      	pop	{r4, pc}

08006d2c <memset>:
 8006d2c:	0003      	movs	r3, r0
 8006d2e:	1882      	adds	r2, r0, r2
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d100      	bne.n	8006d36 <memset+0xa>
 8006d34:	4770      	bx	lr
 8006d36:	7019      	strb	r1, [r3, #0]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	e7f9      	b.n	8006d30 <memset+0x4>

08006d3c <_localeconv_r>:
 8006d3c:	4800      	ldr	r0, [pc, #0]	; (8006d40 <_localeconv_r+0x4>)
 8006d3e:	4770      	bx	lr
 8006d40:	2000015c 	.word	0x2000015c

08006d44 <_close_r>:
 8006d44:	2300      	movs	r3, #0
 8006d46:	b570      	push	{r4, r5, r6, lr}
 8006d48:	4d06      	ldr	r5, [pc, #24]	; (8006d64 <_close_r+0x20>)
 8006d4a:	0004      	movs	r4, r0
 8006d4c:	0008      	movs	r0, r1
 8006d4e:	602b      	str	r3, [r5, #0]
 8006d50:	f7fc f898 	bl	8002e84 <_close>
 8006d54:	1c43      	adds	r3, r0, #1
 8006d56:	d103      	bne.n	8006d60 <_close_r+0x1c>
 8006d58:	682b      	ldr	r3, [r5, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d000      	beq.n	8006d60 <_close_r+0x1c>
 8006d5e:	6023      	str	r3, [r4, #0]
 8006d60:	bd70      	pop	{r4, r5, r6, pc}
 8006d62:	46c0      	nop			; (mov r8, r8)
 8006d64:	20000840 	.word	0x20000840

08006d68 <_lseek_r>:
 8006d68:	b570      	push	{r4, r5, r6, lr}
 8006d6a:	0004      	movs	r4, r0
 8006d6c:	0008      	movs	r0, r1
 8006d6e:	0011      	movs	r1, r2
 8006d70:	001a      	movs	r2, r3
 8006d72:	2300      	movs	r3, #0
 8006d74:	4d05      	ldr	r5, [pc, #20]	; (8006d8c <_lseek_r+0x24>)
 8006d76:	602b      	str	r3, [r5, #0]
 8006d78:	f7fc f8a5 	bl	8002ec6 <_lseek>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d103      	bne.n	8006d88 <_lseek_r+0x20>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d000      	beq.n	8006d88 <_lseek_r+0x20>
 8006d86:	6023      	str	r3, [r4, #0]
 8006d88:	bd70      	pop	{r4, r5, r6, pc}
 8006d8a:	46c0      	nop			; (mov r8, r8)
 8006d8c:	20000840 	.word	0x20000840

08006d90 <_read_r>:
 8006d90:	b570      	push	{r4, r5, r6, lr}
 8006d92:	0004      	movs	r4, r0
 8006d94:	0008      	movs	r0, r1
 8006d96:	0011      	movs	r1, r2
 8006d98:	001a      	movs	r2, r3
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	4d05      	ldr	r5, [pc, #20]	; (8006db4 <_read_r+0x24>)
 8006d9e:	602b      	str	r3, [r5, #0]
 8006da0:	f7fc f837 	bl	8002e12 <_read>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d103      	bne.n	8006db0 <_read_r+0x20>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d000      	beq.n	8006db0 <_read_r+0x20>
 8006dae:	6023      	str	r3, [r4, #0]
 8006db0:	bd70      	pop	{r4, r5, r6, pc}
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	20000840 	.word	0x20000840

08006db8 <_write_r>:
 8006db8:	b570      	push	{r4, r5, r6, lr}
 8006dba:	0004      	movs	r4, r0
 8006dbc:	0008      	movs	r0, r1
 8006dbe:	0011      	movs	r1, r2
 8006dc0:	001a      	movs	r2, r3
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	4d05      	ldr	r5, [pc, #20]	; (8006ddc <_write_r+0x24>)
 8006dc6:	602b      	str	r3, [r5, #0]
 8006dc8:	f7fc f840 	bl	8002e4c <_write>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d103      	bne.n	8006dd8 <_write_r+0x20>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d000      	beq.n	8006dd8 <_write_r+0x20>
 8006dd6:	6023      	str	r3, [r4, #0]
 8006dd8:	bd70      	pop	{r4, r5, r6, pc}
 8006dda:	46c0      	nop			; (mov r8, r8)
 8006ddc:	20000840 	.word	0x20000840

08006de0 <__errno>:
 8006de0:	4b01      	ldr	r3, [pc, #4]	; (8006de8 <__errno+0x8>)
 8006de2:	6818      	ldr	r0, [r3, #0]
 8006de4:	4770      	bx	lr
 8006de6:	46c0      	nop			; (mov r8, r8)
 8006de8:	20000068 	.word	0x20000068

08006dec <__libc_init_array>:
 8006dec:	b570      	push	{r4, r5, r6, lr}
 8006dee:	2600      	movs	r6, #0
 8006df0:	4c0c      	ldr	r4, [pc, #48]	; (8006e24 <__libc_init_array+0x38>)
 8006df2:	4d0d      	ldr	r5, [pc, #52]	; (8006e28 <__libc_init_array+0x3c>)
 8006df4:	1b64      	subs	r4, r4, r5
 8006df6:	10a4      	asrs	r4, r4, #2
 8006df8:	42a6      	cmp	r6, r4
 8006dfa:	d109      	bne.n	8006e10 <__libc_init_array+0x24>
 8006dfc:	2600      	movs	r6, #0
 8006dfe:	f002 f923 	bl	8009048 <_init>
 8006e02:	4c0a      	ldr	r4, [pc, #40]	; (8006e2c <__libc_init_array+0x40>)
 8006e04:	4d0a      	ldr	r5, [pc, #40]	; (8006e30 <__libc_init_array+0x44>)
 8006e06:	1b64      	subs	r4, r4, r5
 8006e08:	10a4      	asrs	r4, r4, #2
 8006e0a:	42a6      	cmp	r6, r4
 8006e0c:	d105      	bne.n	8006e1a <__libc_init_array+0x2e>
 8006e0e:	bd70      	pop	{r4, r5, r6, pc}
 8006e10:	00b3      	lsls	r3, r6, #2
 8006e12:	58eb      	ldr	r3, [r5, r3]
 8006e14:	4798      	blx	r3
 8006e16:	3601      	adds	r6, #1
 8006e18:	e7ee      	b.n	8006df8 <__libc_init_array+0xc>
 8006e1a:	00b3      	lsls	r3, r6, #2
 8006e1c:	58eb      	ldr	r3, [r5, r3]
 8006e1e:	4798      	blx	r3
 8006e20:	3601      	adds	r6, #1
 8006e22:	e7f2      	b.n	8006e0a <__libc_init_array+0x1e>
 8006e24:	08009544 	.word	0x08009544
 8006e28:	08009544 	.word	0x08009544
 8006e2c:	08009548 	.word	0x08009548
 8006e30:	08009544 	.word	0x08009544

08006e34 <__retarget_lock_init_recursive>:
 8006e34:	4770      	bx	lr

08006e36 <__retarget_lock_acquire_recursive>:
 8006e36:	4770      	bx	lr

08006e38 <__retarget_lock_release_recursive>:
 8006e38:	4770      	bx	lr

08006e3a <memchr>:
 8006e3a:	b2c9      	uxtb	r1, r1
 8006e3c:	1882      	adds	r2, r0, r2
 8006e3e:	4290      	cmp	r0, r2
 8006e40:	d101      	bne.n	8006e46 <memchr+0xc>
 8006e42:	2000      	movs	r0, #0
 8006e44:	4770      	bx	lr
 8006e46:	7803      	ldrb	r3, [r0, #0]
 8006e48:	428b      	cmp	r3, r1
 8006e4a:	d0fb      	beq.n	8006e44 <memchr+0xa>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	e7f6      	b.n	8006e3e <memchr+0x4>

08006e50 <quorem>:
 8006e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e52:	6902      	ldr	r2, [r0, #16]
 8006e54:	690b      	ldr	r3, [r1, #16]
 8006e56:	b089      	sub	sp, #36	; 0x24
 8006e58:	0007      	movs	r7, r0
 8006e5a:	9104      	str	r1, [sp, #16]
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	db69      	blt.n	8006f36 <quorem+0xe6>
 8006e62:	3b01      	subs	r3, #1
 8006e64:	009c      	lsls	r4, r3, #2
 8006e66:	9301      	str	r3, [sp, #4]
 8006e68:	000b      	movs	r3, r1
 8006e6a:	3314      	adds	r3, #20
 8006e6c:	9306      	str	r3, [sp, #24]
 8006e6e:	191b      	adds	r3, r3, r4
 8006e70:	9305      	str	r3, [sp, #20]
 8006e72:	003b      	movs	r3, r7
 8006e74:	3314      	adds	r3, #20
 8006e76:	9303      	str	r3, [sp, #12]
 8006e78:	191c      	adds	r4, r3, r4
 8006e7a:	9b05      	ldr	r3, [sp, #20]
 8006e7c:	6826      	ldr	r6, [r4, #0]
 8006e7e:	681d      	ldr	r5, [r3, #0]
 8006e80:	0030      	movs	r0, r6
 8006e82:	3501      	adds	r5, #1
 8006e84:	0029      	movs	r1, r5
 8006e86:	f7f9 f95b 	bl	8000140 <__udivsi3>
 8006e8a:	9002      	str	r0, [sp, #8]
 8006e8c:	42ae      	cmp	r6, r5
 8006e8e:	d329      	bcc.n	8006ee4 <quorem+0x94>
 8006e90:	9b06      	ldr	r3, [sp, #24]
 8006e92:	2600      	movs	r6, #0
 8006e94:	469c      	mov	ip, r3
 8006e96:	9d03      	ldr	r5, [sp, #12]
 8006e98:	9606      	str	r6, [sp, #24]
 8006e9a:	4662      	mov	r2, ip
 8006e9c:	ca08      	ldmia	r2!, {r3}
 8006e9e:	6828      	ldr	r0, [r5, #0]
 8006ea0:	4694      	mov	ip, r2
 8006ea2:	9a02      	ldr	r2, [sp, #8]
 8006ea4:	b299      	uxth	r1, r3
 8006ea6:	4351      	muls	r1, r2
 8006ea8:	0c1b      	lsrs	r3, r3, #16
 8006eaa:	4353      	muls	r3, r2
 8006eac:	1989      	adds	r1, r1, r6
 8006eae:	0c0a      	lsrs	r2, r1, #16
 8006eb0:	189b      	adds	r3, r3, r2
 8006eb2:	9307      	str	r3, [sp, #28]
 8006eb4:	0c1e      	lsrs	r6, r3, #16
 8006eb6:	9b06      	ldr	r3, [sp, #24]
 8006eb8:	b282      	uxth	r2, r0
 8006eba:	18d2      	adds	r2, r2, r3
 8006ebc:	466b      	mov	r3, sp
 8006ebe:	b289      	uxth	r1, r1
 8006ec0:	8b9b      	ldrh	r3, [r3, #28]
 8006ec2:	1a52      	subs	r2, r2, r1
 8006ec4:	0c01      	lsrs	r1, r0, #16
 8006ec6:	1ac9      	subs	r1, r1, r3
 8006ec8:	1413      	asrs	r3, r2, #16
 8006eca:	18cb      	adds	r3, r1, r3
 8006ecc:	1419      	asrs	r1, r3, #16
 8006ece:	b292      	uxth	r2, r2
 8006ed0:	041b      	lsls	r3, r3, #16
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	c508      	stmia	r5!, {r3}
 8006ed6:	9b05      	ldr	r3, [sp, #20]
 8006ed8:	9106      	str	r1, [sp, #24]
 8006eda:	4563      	cmp	r3, ip
 8006edc:	d2dd      	bcs.n	8006e9a <quorem+0x4a>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d030      	beq.n	8006f46 <quorem+0xf6>
 8006ee4:	0038      	movs	r0, r7
 8006ee6:	9904      	ldr	r1, [sp, #16]
 8006ee8:	f001 f9de 	bl	80082a8 <__mcmp>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	db21      	blt.n	8006f34 <quorem+0xe4>
 8006ef0:	0038      	movs	r0, r7
 8006ef2:	2600      	movs	r6, #0
 8006ef4:	9b02      	ldr	r3, [sp, #8]
 8006ef6:	9c04      	ldr	r4, [sp, #16]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	9302      	str	r3, [sp, #8]
 8006efc:	3014      	adds	r0, #20
 8006efe:	3414      	adds	r4, #20
 8006f00:	6803      	ldr	r3, [r0, #0]
 8006f02:	cc02      	ldmia	r4!, {r1}
 8006f04:	b29d      	uxth	r5, r3
 8006f06:	19ad      	adds	r5, r5, r6
 8006f08:	b28a      	uxth	r2, r1
 8006f0a:	1aaa      	subs	r2, r5, r2
 8006f0c:	0c09      	lsrs	r1, r1, #16
 8006f0e:	0c1b      	lsrs	r3, r3, #16
 8006f10:	1a5b      	subs	r3, r3, r1
 8006f12:	1411      	asrs	r1, r2, #16
 8006f14:	185b      	adds	r3, r3, r1
 8006f16:	141e      	asrs	r6, r3, #16
 8006f18:	b292      	uxth	r2, r2
 8006f1a:	041b      	lsls	r3, r3, #16
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	c008      	stmia	r0!, {r3}
 8006f20:	9b05      	ldr	r3, [sp, #20]
 8006f22:	42a3      	cmp	r3, r4
 8006f24:	d2ec      	bcs.n	8006f00 <quorem+0xb0>
 8006f26:	9b01      	ldr	r3, [sp, #4]
 8006f28:	9a03      	ldr	r2, [sp, #12]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	18d3      	adds	r3, r2, r3
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	2a00      	cmp	r2, #0
 8006f32:	d015      	beq.n	8006f60 <quorem+0x110>
 8006f34:	9802      	ldr	r0, [sp, #8]
 8006f36:	b009      	add	sp, #36	; 0x24
 8006f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d106      	bne.n	8006f4e <quorem+0xfe>
 8006f40:	9b01      	ldr	r3, [sp, #4]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	9301      	str	r3, [sp, #4]
 8006f46:	9b03      	ldr	r3, [sp, #12]
 8006f48:	3c04      	subs	r4, #4
 8006f4a:	42a3      	cmp	r3, r4
 8006f4c:	d3f5      	bcc.n	8006f3a <quorem+0xea>
 8006f4e:	9b01      	ldr	r3, [sp, #4]
 8006f50:	613b      	str	r3, [r7, #16]
 8006f52:	e7c7      	b.n	8006ee4 <quorem+0x94>
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	2a00      	cmp	r2, #0
 8006f58:	d106      	bne.n	8006f68 <quorem+0x118>
 8006f5a:	9a01      	ldr	r2, [sp, #4]
 8006f5c:	3a01      	subs	r2, #1
 8006f5e:	9201      	str	r2, [sp, #4]
 8006f60:	9a03      	ldr	r2, [sp, #12]
 8006f62:	3b04      	subs	r3, #4
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d3f5      	bcc.n	8006f54 <quorem+0x104>
 8006f68:	9b01      	ldr	r3, [sp, #4]
 8006f6a:	613b      	str	r3, [r7, #16]
 8006f6c:	e7e2      	b.n	8006f34 <quorem+0xe4>
	...

08006f70 <_dtoa_r>:
 8006f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f72:	0014      	movs	r4, r2
 8006f74:	001d      	movs	r5, r3
 8006f76:	69c6      	ldr	r6, [r0, #28]
 8006f78:	b09d      	sub	sp, #116	; 0x74
 8006f7a:	9408      	str	r4, [sp, #32]
 8006f7c:	9509      	str	r5, [sp, #36]	; 0x24
 8006f7e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8006f80:	9004      	str	r0, [sp, #16]
 8006f82:	2e00      	cmp	r6, #0
 8006f84:	d10f      	bne.n	8006fa6 <_dtoa_r+0x36>
 8006f86:	2010      	movs	r0, #16
 8006f88:	f000 fe4a 	bl	8007c20 <malloc>
 8006f8c:	9b04      	ldr	r3, [sp, #16]
 8006f8e:	1e02      	subs	r2, r0, #0
 8006f90:	61d8      	str	r0, [r3, #28]
 8006f92:	d104      	bne.n	8006f9e <_dtoa_r+0x2e>
 8006f94:	21ef      	movs	r1, #239	; 0xef
 8006f96:	4bc6      	ldr	r3, [pc, #792]	; (80072b0 <_dtoa_r+0x340>)
 8006f98:	48c6      	ldr	r0, [pc, #792]	; (80072b4 <_dtoa_r+0x344>)
 8006f9a:	f001 fcdf 	bl	800895c <__assert_func>
 8006f9e:	6046      	str	r6, [r0, #4]
 8006fa0:	6086      	str	r6, [r0, #8]
 8006fa2:	6006      	str	r6, [r0, #0]
 8006fa4:	60c6      	str	r6, [r0, #12]
 8006fa6:	9b04      	ldr	r3, [sp, #16]
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	6819      	ldr	r1, [r3, #0]
 8006fac:	2900      	cmp	r1, #0
 8006fae:	d00b      	beq.n	8006fc8 <_dtoa_r+0x58>
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	4093      	lsls	r3, r2
 8006fb6:	604a      	str	r2, [r1, #4]
 8006fb8:	608b      	str	r3, [r1, #8]
 8006fba:	9804      	ldr	r0, [sp, #16]
 8006fbc:	f000 ff32 	bl	8007e24 <_Bfree>
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	9b04      	ldr	r3, [sp, #16]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	601a      	str	r2, [r3, #0]
 8006fc8:	2d00      	cmp	r5, #0
 8006fca:	da1e      	bge.n	800700a <_dtoa_r+0x9a>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	006b      	lsls	r3, r5, #1
 8006fd2:	085b      	lsrs	r3, r3, #1
 8006fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006fd8:	4bb7      	ldr	r3, [pc, #732]	; (80072b8 <_dtoa_r+0x348>)
 8006fda:	4ab7      	ldr	r2, [pc, #732]	; (80072b8 <_dtoa_r+0x348>)
 8006fdc:	403b      	ands	r3, r7
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d116      	bne.n	8007010 <_dtoa_r+0xa0>
 8006fe2:	4bb6      	ldr	r3, [pc, #728]	; (80072bc <_dtoa_r+0x34c>)
 8006fe4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	033b      	lsls	r3, r7, #12
 8006fea:	0b1b      	lsrs	r3, r3, #12
 8006fec:	4323      	orrs	r3, r4
 8006fee:	d101      	bne.n	8006ff4 <_dtoa_r+0x84>
 8006ff0:	f000 fdb5 	bl	8007b5e <_dtoa_r+0xbee>
 8006ff4:	4bb2      	ldr	r3, [pc, #712]	; (80072c0 <_dtoa_r+0x350>)
 8006ff6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006ff8:	9306      	str	r3, [sp, #24]
 8006ffa:	2a00      	cmp	r2, #0
 8006ffc:	d002      	beq.n	8007004 <_dtoa_r+0x94>
 8006ffe:	4bb1      	ldr	r3, [pc, #708]	; (80072c4 <_dtoa_r+0x354>)
 8007000:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	9806      	ldr	r0, [sp, #24]
 8007006:	b01d      	add	sp, #116	; 0x74
 8007008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800700a:	2300      	movs	r3, #0
 800700c:	603b      	str	r3, [r7, #0]
 800700e:	e7e2      	b.n	8006fd6 <_dtoa_r+0x66>
 8007010:	9a08      	ldr	r2, [sp, #32]
 8007012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007014:	9210      	str	r2, [sp, #64]	; 0x40
 8007016:	9311      	str	r3, [sp, #68]	; 0x44
 8007018:	9810      	ldr	r0, [sp, #64]	; 0x40
 800701a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800701c:	2200      	movs	r2, #0
 800701e:	2300      	movs	r3, #0
 8007020:	f7f9 fa14 	bl	800044c <__aeabi_dcmpeq>
 8007024:	1e06      	subs	r6, r0, #0
 8007026:	d009      	beq.n	800703c <_dtoa_r+0xcc>
 8007028:	2301      	movs	r3, #1
 800702a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	4ba6      	ldr	r3, [pc, #664]	; (80072c8 <_dtoa_r+0x358>)
 8007030:	9306      	str	r3, [sp, #24]
 8007032:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0e5      	beq.n	8007004 <_dtoa_r+0x94>
 8007038:	4ba4      	ldr	r3, [pc, #656]	; (80072cc <_dtoa_r+0x35c>)
 800703a:	e7e1      	b.n	8007000 <_dtoa_r+0x90>
 800703c:	ab1a      	add	r3, sp, #104	; 0x68
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	ab1b      	add	r3, sp, #108	; 0x6c
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	9804      	ldr	r0, [sp, #16]
 8007046:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007048:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800704a:	f001 f9e1 	bl	8008410 <__d2b>
 800704e:	007a      	lsls	r2, r7, #1
 8007050:	9005      	str	r0, [sp, #20]
 8007052:	0d52      	lsrs	r2, r2, #21
 8007054:	d100      	bne.n	8007058 <_dtoa_r+0xe8>
 8007056:	e07b      	b.n	8007150 <_dtoa_r+0x1e0>
 8007058:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800705a:	9617      	str	r6, [sp, #92]	; 0x5c
 800705c:	0319      	lsls	r1, r3, #12
 800705e:	4b9c      	ldr	r3, [pc, #624]	; (80072d0 <_dtoa_r+0x360>)
 8007060:	0b09      	lsrs	r1, r1, #12
 8007062:	430b      	orrs	r3, r1
 8007064:	499b      	ldr	r1, [pc, #620]	; (80072d4 <_dtoa_r+0x364>)
 8007066:	1857      	adds	r7, r2, r1
 8007068:	9810      	ldr	r0, [sp, #64]	; 0x40
 800706a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800706c:	0019      	movs	r1, r3
 800706e:	2200      	movs	r2, #0
 8007070:	4b99      	ldr	r3, [pc, #612]	; (80072d8 <_dtoa_r+0x368>)
 8007072:	f7fa febb 	bl	8001dec <__aeabi_dsub>
 8007076:	4a99      	ldr	r2, [pc, #612]	; (80072dc <_dtoa_r+0x36c>)
 8007078:	4b99      	ldr	r3, [pc, #612]	; (80072e0 <_dtoa_r+0x370>)
 800707a:	f7fa fbf5 	bl	8001868 <__aeabi_dmul>
 800707e:	4a99      	ldr	r2, [pc, #612]	; (80072e4 <_dtoa_r+0x374>)
 8007080:	4b99      	ldr	r3, [pc, #612]	; (80072e8 <_dtoa_r+0x378>)
 8007082:	f7f9 fc97 	bl	80009b4 <__aeabi_dadd>
 8007086:	0004      	movs	r4, r0
 8007088:	0038      	movs	r0, r7
 800708a:	000d      	movs	r5, r1
 800708c:	f7fb fa84 	bl	8002598 <__aeabi_i2d>
 8007090:	4a96      	ldr	r2, [pc, #600]	; (80072ec <_dtoa_r+0x37c>)
 8007092:	4b97      	ldr	r3, [pc, #604]	; (80072f0 <_dtoa_r+0x380>)
 8007094:	f7fa fbe8 	bl	8001868 <__aeabi_dmul>
 8007098:	0002      	movs	r2, r0
 800709a:	000b      	movs	r3, r1
 800709c:	0020      	movs	r0, r4
 800709e:	0029      	movs	r1, r5
 80070a0:	f7f9 fc88 	bl	80009b4 <__aeabi_dadd>
 80070a4:	0004      	movs	r4, r0
 80070a6:	000d      	movs	r5, r1
 80070a8:	f7fb fa40 	bl	800252c <__aeabi_d2iz>
 80070ac:	2200      	movs	r2, #0
 80070ae:	9003      	str	r0, [sp, #12]
 80070b0:	2300      	movs	r3, #0
 80070b2:	0020      	movs	r0, r4
 80070b4:	0029      	movs	r1, r5
 80070b6:	f7f9 f9cf 	bl	8000458 <__aeabi_dcmplt>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d00b      	beq.n	80070d6 <_dtoa_r+0x166>
 80070be:	9803      	ldr	r0, [sp, #12]
 80070c0:	f7fb fa6a 	bl	8002598 <__aeabi_i2d>
 80070c4:	002b      	movs	r3, r5
 80070c6:	0022      	movs	r2, r4
 80070c8:	f7f9 f9c0 	bl	800044c <__aeabi_dcmpeq>
 80070cc:	4243      	negs	r3, r0
 80070ce:	4158      	adcs	r0, r3
 80070d0:	9b03      	ldr	r3, [sp, #12]
 80070d2:	1a1b      	subs	r3, r3, r0
 80070d4:	9303      	str	r3, [sp, #12]
 80070d6:	2301      	movs	r3, #1
 80070d8:	9316      	str	r3, [sp, #88]	; 0x58
 80070da:	9b03      	ldr	r3, [sp, #12]
 80070dc:	2b16      	cmp	r3, #22
 80070de:	d810      	bhi.n	8007102 <_dtoa_r+0x192>
 80070e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80070e2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80070e4:	9a03      	ldr	r2, [sp, #12]
 80070e6:	4b83      	ldr	r3, [pc, #524]	; (80072f4 <_dtoa_r+0x384>)
 80070e8:	00d2      	lsls	r2, r2, #3
 80070ea:	189b      	adds	r3, r3, r2
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f7f9 f9b2 	bl	8000458 <__aeabi_dcmplt>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d047      	beq.n	8007188 <_dtoa_r+0x218>
 80070f8:	9b03      	ldr	r3, [sp, #12]
 80070fa:	3b01      	subs	r3, #1
 80070fc:	9303      	str	r3, [sp, #12]
 80070fe:	2300      	movs	r3, #0
 8007100:	9316      	str	r3, [sp, #88]	; 0x58
 8007102:	2200      	movs	r2, #0
 8007104:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007106:	920a      	str	r2, [sp, #40]	; 0x28
 8007108:	1bdb      	subs	r3, r3, r7
 800710a:	1e5a      	subs	r2, r3, #1
 800710c:	d53e      	bpl.n	800718c <_dtoa_r+0x21c>
 800710e:	2201      	movs	r2, #1
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	930a      	str	r3, [sp, #40]	; 0x28
 8007114:	2300      	movs	r3, #0
 8007116:	930c      	str	r3, [sp, #48]	; 0x30
 8007118:	9b03      	ldr	r3, [sp, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	db38      	blt.n	8007190 <_dtoa_r+0x220>
 800711e:	9a03      	ldr	r2, [sp, #12]
 8007120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007122:	4694      	mov	ip, r2
 8007124:	4463      	add	r3, ip
 8007126:	930c      	str	r3, [sp, #48]	; 0x30
 8007128:	2300      	movs	r3, #0
 800712a:	9213      	str	r2, [sp, #76]	; 0x4c
 800712c:	930d      	str	r3, [sp, #52]	; 0x34
 800712e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007130:	2401      	movs	r4, #1
 8007132:	2b09      	cmp	r3, #9
 8007134:	d867      	bhi.n	8007206 <_dtoa_r+0x296>
 8007136:	2b05      	cmp	r3, #5
 8007138:	dd02      	ble.n	8007140 <_dtoa_r+0x1d0>
 800713a:	2400      	movs	r4, #0
 800713c:	3b04      	subs	r3, #4
 800713e:	9322      	str	r3, [sp, #136]	; 0x88
 8007140:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007142:	1e98      	subs	r0, r3, #2
 8007144:	2803      	cmp	r0, #3
 8007146:	d867      	bhi.n	8007218 <_dtoa_r+0x2a8>
 8007148:	f7f8 ffe6 	bl	8000118 <__gnu_thumb1_case_uqi>
 800714c:	5b383a2b 	.word	0x5b383a2b
 8007150:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007152:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8007154:	18f6      	adds	r6, r6, r3
 8007156:	4b68      	ldr	r3, [pc, #416]	; (80072f8 <_dtoa_r+0x388>)
 8007158:	18f2      	adds	r2, r6, r3
 800715a:	2a20      	cmp	r2, #32
 800715c:	dd0f      	ble.n	800717e <_dtoa_r+0x20e>
 800715e:	2340      	movs	r3, #64	; 0x40
 8007160:	1a9b      	subs	r3, r3, r2
 8007162:	409f      	lsls	r7, r3
 8007164:	4b65      	ldr	r3, [pc, #404]	; (80072fc <_dtoa_r+0x38c>)
 8007166:	0038      	movs	r0, r7
 8007168:	18f3      	adds	r3, r6, r3
 800716a:	40dc      	lsrs	r4, r3
 800716c:	4320      	orrs	r0, r4
 800716e:	f7fb fa43 	bl	80025f8 <__aeabi_ui2d>
 8007172:	2201      	movs	r2, #1
 8007174:	4b62      	ldr	r3, [pc, #392]	; (8007300 <_dtoa_r+0x390>)
 8007176:	1e77      	subs	r7, r6, #1
 8007178:	18cb      	adds	r3, r1, r3
 800717a:	9217      	str	r2, [sp, #92]	; 0x5c
 800717c:	e776      	b.n	800706c <_dtoa_r+0xfc>
 800717e:	2320      	movs	r3, #32
 8007180:	0020      	movs	r0, r4
 8007182:	1a9b      	subs	r3, r3, r2
 8007184:	4098      	lsls	r0, r3
 8007186:	e7f2      	b.n	800716e <_dtoa_r+0x1fe>
 8007188:	9016      	str	r0, [sp, #88]	; 0x58
 800718a:	e7ba      	b.n	8007102 <_dtoa_r+0x192>
 800718c:	920c      	str	r2, [sp, #48]	; 0x30
 800718e:	e7c3      	b.n	8007118 <_dtoa_r+0x1a8>
 8007190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007192:	9a03      	ldr	r2, [sp, #12]
 8007194:	1a9b      	subs	r3, r3, r2
 8007196:	930a      	str	r3, [sp, #40]	; 0x28
 8007198:	4253      	negs	r3, r2
 800719a:	930d      	str	r3, [sp, #52]	; 0x34
 800719c:	2300      	movs	r3, #0
 800719e:	9313      	str	r3, [sp, #76]	; 0x4c
 80071a0:	e7c5      	b.n	800712e <_dtoa_r+0x1be>
 80071a2:	2300      	movs	r3, #0
 80071a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80071a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80071aa:	9307      	str	r3, [sp, #28]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	dc13      	bgt.n	80071d8 <_dtoa_r+0x268>
 80071b0:	2301      	movs	r3, #1
 80071b2:	001a      	movs	r2, r3
 80071b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80071b6:	9307      	str	r3, [sp, #28]
 80071b8:	9223      	str	r2, [sp, #140]	; 0x8c
 80071ba:	e00d      	b.n	80071d8 <_dtoa_r+0x268>
 80071bc:	2301      	movs	r3, #1
 80071be:	e7f1      	b.n	80071a4 <_dtoa_r+0x234>
 80071c0:	2300      	movs	r3, #0
 80071c2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80071c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80071c6:	4694      	mov	ip, r2
 80071c8:	9b03      	ldr	r3, [sp, #12]
 80071ca:	4463      	add	r3, ip
 80071cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80071ce:	3301      	adds	r3, #1
 80071d0:	9307      	str	r3, [sp, #28]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	dc00      	bgt.n	80071d8 <_dtoa_r+0x268>
 80071d6:	2301      	movs	r3, #1
 80071d8:	9a04      	ldr	r2, [sp, #16]
 80071da:	2100      	movs	r1, #0
 80071dc:	69d0      	ldr	r0, [r2, #28]
 80071de:	2204      	movs	r2, #4
 80071e0:	0015      	movs	r5, r2
 80071e2:	3514      	adds	r5, #20
 80071e4:	429d      	cmp	r5, r3
 80071e6:	d91b      	bls.n	8007220 <_dtoa_r+0x2b0>
 80071e8:	6041      	str	r1, [r0, #4]
 80071ea:	9804      	ldr	r0, [sp, #16]
 80071ec:	f000 fdd6 	bl	8007d9c <_Balloc>
 80071f0:	9006      	str	r0, [sp, #24]
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d117      	bne.n	8007226 <_dtoa_r+0x2b6>
 80071f6:	21b0      	movs	r1, #176	; 0xb0
 80071f8:	4b42      	ldr	r3, [pc, #264]	; (8007304 <_dtoa_r+0x394>)
 80071fa:	482e      	ldr	r0, [pc, #184]	; (80072b4 <_dtoa_r+0x344>)
 80071fc:	9a06      	ldr	r2, [sp, #24]
 80071fe:	31ff      	adds	r1, #255	; 0xff
 8007200:	e6cb      	b.n	8006f9a <_dtoa_r+0x2a>
 8007202:	2301      	movs	r3, #1
 8007204:	e7dd      	b.n	80071c2 <_dtoa_r+0x252>
 8007206:	2300      	movs	r3, #0
 8007208:	940f      	str	r4, [sp, #60]	; 0x3c
 800720a:	9322      	str	r3, [sp, #136]	; 0x88
 800720c:	3b01      	subs	r3, #1
 800720e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007210:	9307      	str	r3, [sp, #28]
 8007212:	2200      	movs	r2, #0
 8007214:	3313      	adds	r3, #19
 8007216:	e7cf      	b.n	80071b8 <_dtoa_r+0x248>
 8007218:	2301      	movs	r3, #1
 800721a:	930f      	str	r3, [sp, #60]	; 0x3c
 800721c:	3b02      	subs	r3, #2
 800721e:	e7f6      	b.n	800720e <_dtoa_r+0x29e>
 8007220:	3101      	adds	r1, #1
 8007222:	0052      	lsls	r2, r2, #1
 8007224:	e7dc      	b.n	80071e0 <_dtoa_r+0x270>
 8007226:	9b04      	ldr	r3, [sp, #16]
 8007228:	9a06      	ldr	r2, [sp, #24]
 800722a:	69db      	ldr	r3, [r3, #28]
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	9b07      	ldr	r3, [sp, #28]
 8007230:	2b0e      	cmp	r3, #14
 8007232:	d900      	bls.n	8007236 <_dtoa_r+0x2c6>
 8007234:	e0e5      	b.n	8007402 <_dtoa_r+0x492>
 8007236:	2c00      	cmp	r4, #0
 8007238:	d100      	bne.n	800723c <_dtoa_r+0x2cc>
 800723a:	e0e2      	b.n	8007402 <_dtoa_r+0x492>
 800723c:	9b03      	ldr	r3, [sp, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	dd64      	ble.n	800730c <_dtoa_r+0x39c>
 8007242:	210f      	movs	r1, #15
 8007244:	9a03      	ldr	r2, [sp, #12]
 8007246:	4b2b      	ldr	r3, [pc, #172]	; (80072f4 <_dtoa_r+0x384>)
 8007248:	400a      	ands	r2, r1
 800724a:	00d2      	lsls	r2, r2, #3
 800724c:	189b      	adds	r3, r3, r2
 800724e:	681e      	ldr	r6, [r3, #0]
 8007250:	685f      	ldr	r7, [r3, #4]
 8007252:	9b03      	ldr	r3, [sp, #12]
 8007254:	2402      	movs	r4, #2
 8007256:	111d      	asrs	r5, r3, #4
 8007258:	05db      	lsls	r3, r3, #23
 800725a:	d50a      	bpl.n	8007272 <_dtoa_r+0x302>
 800725c:	4b2a      	ldr	r3, [pc, #168]	; (8007308 <_dtoa_r+0x398>)
 800725e:	400d      	ands	r5, r1
 8007260:	6a1a      	ldr	r2, [r3, #32]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007266:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007268:	f7f9 ff04 	bl	8001074 <__aeabi_ddiv>
 800726c:	9008      	str	r0, [sp, #32]
 800726e:	9109      	str	r1, [sp, #36]	; 0x24
 8007270:	3401      	adds	r4, #1
 8007272:	4b25      	ldr	r3, [pc, #148]	; (8007308 <_dtoa_r+0x398>)
 8007274:	930e      	str	r3, [sp, #56]	; 0x38
 8007276:	2d00      	cmp	r5, #0
 8007278:	d108      	bne.n	800728c <_dtoa_r+0x31c>
 800727a:	9808      	ldr	r0, [sp, #32]
 800727c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800727e:	0032      	movs	r2, r6
 8007280:	003b      	movs	r3, r7
 8007282:	f7f9 fef7 	bl	8001074 <__aeabi_ddiv>
 8007286:	9008      	str	r0, [sp, #32]
 8007288:	9109      	str	r1, [sp, #36]	; 0x24
 800728a:	e05a      	b.n	8007342 <_dtoa_r+0x3d2>
 800728c:	2301      	movs	r3, #1
 800728e:	421d      	tst	r5, r3
 8007290:	d009      	beq.n	80072a6 <_dtoa_r+0x336>
 8007292:	18e4      	adds	r4, r4, r3
 8007294:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007296:	0030      	movs	r0, r6
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	0039      	movs	r1, r7
 800729e:	f7fa fae3 	bl	8001868 <__aeabi_dmul>
 80072a2:	0006      	movs	r6, r0
 80072a4:	000f      	movs	r7, r1
 80072a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072a8:	106d      	asrs	r5, r5, #1
 80072aa:	3308      	adds	r3, #8
 80072ac:	e7e2      	b.n	8007274 <_dtoa_r+0x304>
 80072ae:	46c0      	nop			; (mov r8, r8)
 80072b0:	08009209 	.word	0x08009209
 80072b4:	08009220 	.word	0x08009220
 80072b8:	7ff00000 	.word	0x7ff00000
 80072bc:	0000270f 	.word	0x0000270f
 80072c0:	08009205 	.word	0x08009205
 80072c4:	08009208 	.word	0x08009208
 80072c8:	080091d8 	.word	0x080091d8
 80072cc:	080091d9 	.word	0x080091d9
 80072d0:	3ff00000 	.word	0x3ff00000
 80072d4:	fffffc01 	.word	0xfffffc01
 80072d8:	3ff80000 	.word	0x3ff80000
 80072dc:	636f4361 	.word	0x636f4361
 80072e0:	3fd287a7 	.word	0x3fd287a7
 80072e4:	8b60c8b3 	.word	0x8b60c8b3
 80072e8:	3fc68a28 	.word	0x3fc68a28
 80072ec:	509f79fb 	.word	0x509f79fb
 80072f0:	3fd34413 	.word	0x3fd34413
 80072f4:	08009310 	.word	0x08009310
 80072f8:	00000432 	.word	0x00000432
 80072fc:	00000412 	.word	0x00000412
 8007300:	fe100000 	.word	0xfe100000
 8007304:	08009278 	.word	0x08009278
 8007308:	080092e8 	.word	0x080092e8
 800730c:	9b03      	ldr	r3, [sp, #12]
 800730e:	2402      	movs	r4, #2
 8007310:	2b00      	cmp	r3, #0
 8007312:	d016      	beq.n	8007342 <_dtoa_r+0x3d2>
 8007314:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007316:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007318:	220f      	movs	r2, #15
 800731a:	425d      	negs	r5, r3
 800731c:	402a      	ands	r2, r5
 800731e:	4bdd      	ldr	r3, [pc, #884]	; (8007694 <_dtoa_r+0x724>)
 8007320:	00d2      	lsls	r2, r2, #3
 8007322:	189b      	adds	r3, r3, r2
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f7fa fa9e 	bl	8001868 <__aeabi_dmul>
 800732c:	2701      	movs	r7, #1
 800732e:	2300      	movs	r3, #0
 8007330:	9008      	str	r0, [sp, #32]
 8007332:	9109      	str	r1, [sp, #36]	; 0x24
 8007334:	4ed8      	ldr	r6, [pc, #864]	; (8007698 <_dtoa_r+0x728>)
 8007336:	112d      	asrs	r5, r5, #4
 8007338:	2d00      	cmp	r5, #0
 800733a:	d000      	beq.n	800733e <_dtoa_r+0x3ce>
 800733c:	e091      	b.n	8007462 <_dtoa_r+0x4f2>
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1a1      	bne.n	8007286 <_dtoa_r+0x316>
 8007342:	9e08      	ldr	r6, [sp, #32]
 8007344:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007346:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007348:	2b00      	cmp	r3, #0
 800734a:	d100      	bne.n	800734e <_dtoa_r+0x3de>
 800734c:	e094      	b.n	8007478 <_dtoa_r+0x508>
 800734e:	2200      	movs	r2, #0
 8007350:	0030      	movs	r0, r6
 8007352:	0039      	movs	r1, r7
 8007354:	4bd1      	ldr	r3, [pc, #836]	; (800769c <_dtoa_r+0x72c>)
 8007356:	f7f9 f87f 	bl	8000458 <__aeabi_dcmplt>
 800735a:	2800      	cmp	r0, #0
 800735c:	d100      	bne.n	8007360 <_dtoa_r+0x3f0>
 800735e:	e08b      	b.n	8007478 <_dtoa_r+0x508>
 8007360:	9b07      	ldr	r3, [sp, #28]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d100      	bne.n	8007368 <_dtoa_r+0x3f8>
 8007366:	e087      	b.n	8007478 <_dtoa_r+0x508>
 8007368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800736a:	2b00      	cmp	r3, #0
 800736c:	dd45      	ble.n	80073fa <_dtoa_r+0x48a>
 800736e:	9b03      	ldr	r3, [sp, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	3b01      	subs	r3, #1
 8007374:	930e      	str	r3, [sp, #56]	; 0x38
 8007376:	0030      	movs	r0, r6
 8007378:	4bc9      	ldr	r3, [pc, #804]	; (80076a0 <_dtoa_r+0x730>)
 800737a:	0039      	movs	r1, r7
 800737c:	f7fa fa74 	bl	8001868 <__aeabi_dmul>
 8007380:	9008      	str	r0, [sp, #32]
 8007382:	9109      	str	r1, [sp, #36]	; 0x24
 8007384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007386:	3401      	adds	r4, #1
 8007388:	0020      	movs	r0, r4
 800738a:	9e08      	ldr	r6, [sp, #32]
 800738c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800738e:	9312      	str	r3, [sp, #72]	; 0x48
 8007390:	f7fb f902 	bl	8002598 <__aeabi_i2d>
 8007394:	0032      	movs	r2, r6
 8007396:	003b      	movs	r3, r7
 8007398:	f7fa fa66 	bl	8001868 <__aeabi_dmul>
 800739c:	2200      	movs	r2, #0
 800739e:	4bc1      	ldr	r3, [pc, #772]	; (80076a4 <_dtoa_r+0x734>)
 80073a0:	f7f9 fb08 	bl	80009b4 <__aeabi_dadd>
 80073a4:	4ac0      	ldr	r2, [pc, #768]	; (80076a8 <_dtoa_r+0x738>)
 80073a6:	9014      	str	r0, [sp, #80]	; 0x50
 80073a8:	9115      	str	r1, [sp, #84]	; 0x54
 80073aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073ac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80073ae:	4694      	mov	ip, r2
 80073b0:	9308      	str	r3, [sp, #32]
 80073b2:	9409      	str	r4, [sp, #36]	; 0x24
 80073b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073b6:	4463      	add	r3, ip
 80073b8:	9318      	str	r3, [sp, #96]	; 0x60
 80073ba:	9309      	str	r3, [sp, #36]	; 0x24
 80073bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d15e      	bne.n	8007480 <_dtoa_r+0x510>
 80073c2:	2200      	movs	r2, #0
 80073c4:	4bb9      	ldr	r3, [pc, #740]	; (80076ac <_dtoa_r+0x73c>)
 80073c6:	0030      	movs	r0, r6
 80073c8:	0039      	movs	r1, r7
 80073ca:	f7fa fd0f 	bl	8001dec <__aeabi_dsub>
 80073ce:	9a08      	ldr	r2, [sp, #32]
 80073d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80073d2:	0004      	movs	r4, r0
 80073d4:	000d      	movs	r5, r1
 80073d6:	f7f9 f853 	bl	8000480 <__aeabi_dcmpgt>
 80073da:	2800      	cmp	r0, #0
 80073dc:	d000      	beq.n	80073e0 <_dtoa_r+0x470>
 80073de:	e2b3      	b.n	8007948 <_dtoa_r+0x9d8>
 80073e0:	48b3      	ldr	r0, [pc, #716]	; (80076b0 <_dtoa_r+0x740>)
 80073e2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80073e4:	4684      	mov	ip, r0
 80073e6:	4461      	add	r1, ip
 80073e8:	000b      	movs	r3, r1
 80073ea:	0020      	movs	r0, r4
 80073ec:	0029      	movs	r1, r5
 80073ee:	9a08      	ldr	r2, [sp, #32]
 80073f0:	f7f9 f832 	bl	8000458 <__aeabi_dcmplt>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d000      	beq.n	80073fa <_dtoa_r+0x48a>
 80073f8:	e2a3      	b.n	8007942 <_dtoa_r+0x9d2>
 80073fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073fc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80073fe:	9308      	str	r3, [sp, #32]
 8007400:	9409      	str	r4, [sp, #36]	; 0x24
 8007402:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007404:	2b00      	cmp	r3, #0
 8007406:	da00      	bge.n	800740a <_dtoa_r+0x49a>
 8007408:	e179      	b.n	80076fe <_dtoa_r+0x78e>
 800740a:	9a03      	ldr	r2, [sp, #12]
 800740c:	2a0e      	cmp	r2, #14
 800740e:	dd00      	ble.n	8007412 <_dtoa_r+0x4a2>
 8007410:	e175      	b.n	80076fe <_dtoa_r+0x78e>
 8007412:	4ba0      	ldr	r3, [pc, #640]	; (8007694 <_dtoa_r+0x724>)
 8007414:	00d2      	lsls	r2, r2, #3
 8007416:	189b      	adds	r3, r3, r2
 8007418:	681e      	ldr	r6, [r3, #0]
 800741a:	685f      	ldr	r7, [r3, #4]
 800741c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800741e:	2b00      	cmp	r3, #0
 8007420:	db00      	blt.n	8007424 <_dtoa_r+0x4b4>
 8007422:	e0e5      	b.n	80075f0 <_dtoa_r+0x680>
 8007424:	9b07      	ldr	r3, [sp, #28]
 8007426:	2b00      	cmp	r3, #0
 8007428:	dd00      	ble.n	800742c <_dtoa_r+0x4bc>
 800742a:	e0e1      	b.n	80075f0 <_dtoa_r+0x680>
 800742c:	d000      	beq.n	8007430 <_dtoa_r+0x4c0>
 800742e:	e288      	b.n	8007942 <_dtoa_r+0x9d2>
 8007430:	2200      	movs	r2, #0
 8007432:	0030      	movs	r0, r6
 8007434:	0039      	movs	r1, r7
 8007436:	4b9d      	ldr	r3, [pc, #628]	; (80076ac <_dtoa_r+0x73c>)
 8007438:	f7fa fa16 	bl	8001868 <__aeabi_dmul>
 800743c:	9a08      	ldr	r2, [sp, #32]
 800743e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007440:	f7f9 f828 	bl	8000494 <__aeabi_dcmpge>
 8007444:	9e07      	ldr	r6, [sp, #28]
 8007446:	0037      	movs	r7, r6
 8007448:	2800      	cmp	r0, #0
 800744a:	d000      	beq.n	800744e <_dtoa_r+0x4de>
 800744c:	e25f      	b.n	800790e <_dtoa_r+0x99e>
 800744e:	9b06      	ldr	r3, [sp, #24]
 8007450:	9a06      	ldr	r2, [sp, #24]
 8007452:	3301      	adds	r3, #1
 8007454:	9308      	str	r3, [sp, #32]
 8007456:	2331      	movs	r3, #49	; 0x31
 8007458:	7013      	strb	r3, [r2, #0]
 800745a:	9b03      	ldr	r3, [sp, #12]
 800745c:	3301      	adds	r3, #1
 800745e:	9303      	str	r3, [sp, #12]
 8007460:	e25a      	b.n	8007918 <_dtoa_r+0x9a8>
 8007462:	423d      	tst	r5, r7
 8007464:	d005      	beq.n	8007472 <_dtoa_r+0x502>
 8007466:	6832      	ldr	r2, [r6, #0]
 8007468:	6873      	ldr	r3, [r6, #4]
 800746a:	f7fa f9fd 	bl	8001868 <__aeabi_dmul>
 800746e:	003b      	movs	r3, r7
 8007470:	3401      	adds	r4, #1
 8007472:	106d      	asrs	r5, r5, #1
 8007474:	3608      	adds	r6, #8
 8007476:	e75f      	b.n	8007338 <_dtoa_r+0x3c8>
 8007478:	9b03      	ldr	r3, [sp, #12]
 800747a:	930e      	str	r3, [sp, #56]	; 0x38
 800747c:	9b07      	ldr	r3, [sp, #28]
 800747e:	e783      	b.n	8007388 <_dtoa_r+0x418>
 8007480:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007482:	4b84      	ldr	r3, [pc, #528]	; (8007694 <_dtoa_r+0x724>)
 8007484:	3a01      	subs	r2, #1
 8007486:	00d2      	lsls	r2, r2, #3
 8007488:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800748a:	189b      	adds	r3, r3, r2
 800748c:	9c08      	ldr	r4, [sp, #32]
 800748e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2900      	cmp	r1, #0
 8007496:	d051      	beq.n	800753c <_dtoa_r+0x5cc>
 8007498:	2000      	movs	r0, #0
 800749a:	4986      	ldr	r1, [pc, #536]	; (80076b4 <_dtoa_r+0x744>)
 800749c:	f7f9 fdea 	bl	8001074 <__aeabi_ddiv>
 80074a0:	0022      	movs	r2, r4
 80074a2:	002b      	movs	r3, r5
 80074a4:	f7fa fca2 	bl	8001dec <__aeabi_dsub>
 80074a8:	9a06      	ldr	r2, [sp, #24]
 80074aa:	0004      	movs	r4, r0
 80074ac:	4694      	mov	ip, r2
 80074ae:	000d      	movs	r5, r1
 80074b0:	9b06      	ldr	r3, [sp, #24]
 80074b2:	9314      	str	r3, [sp, #80]	; 0x50
 80074b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074b6:	4463      	add	r3, ip
 80074b8:	9318      	str	r3, [sp, #96]	; 0x60
 80074ba:	0039      	movs	r1, r7
 80074bc:	0030      	movs	r0, r6
 80074be:	f7fb f835 	bl	800252c <__aeabi_d2iz>
 80074c2:	9012      	str	r0, [sp, #72]	; 0x48
 80074c4:	f7fb f868 	bl	8002598 <__aeabi_i2d>
 80074c8:	0002      	movs	r2, r0
 80074ca:	000b      	movs	r3, r1
 80074cc:	0030      	movs	r0, r6
 80074ce:	0039      	movs	r1, r7
 80074d0:	f7fa fc8c 	bl	8001dec <__aeabi_dsub>
 80074d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80074d8:	3301      	adds	r3, #1
 80074da:	9308      	str	r3, [sp, #32]
 80074dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074de:	0006      	movs	r6, r0
 80074e0:	3330      	adds	r3, #48	; 0x30
 80074e2:	7013      	strb	r3, [r2, #0]
 80074e4:	0022      	movs	r2, r4
 80074e6:	002b      	movs	r3, r5
 80074e8:	000f      	movs	r7, r1
 80074ea:	f7f8 ffb5 	bl	8000458 <__aeabi_dcmplt>
 80074ee:	2800      	cmp	r0, #0
 80074f0:	d174      	bne.n	80075dc <_dtoa_r+0x66c>
 80074f2:	0032      	movs	r2, r6
 80074f4:	003b      	movs	r3, r7
 80074f6:	2000      	movs	r0, #0
 80074f8:	4968      	ldr	r1, [pc, #416]	; (800769c <_dtoa_r+0x72c>)
 80074fa:	f7fa fc77 	bl	8001dec <__aeabi_dsub>
 80074fe:	0022      	movs	r2, r4
 8007500:	002b      	movs	r3, r5
 8007502:	f7f8 ffa9 	bl	8000458 <__aeabi_dcmplt>
 8007506:	2800      	cmp	r0, #0
 8007508:	d000      	beq.n	800750c <_dtoa_r+0x59c>
 800750a:	e0d7      	b.n	80076bc <_dtoa_r+0x74c>
 800750c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800750e:	9a08      	ldr	r2, [sp, #32]
 8007510:	4293      	cmp	r3, r2
 8007512:	d100      	bne.n	8007516 <_dtoa_r+0x5a6>
 8007514:	e771      	b.n	80073fa <_dtoa_r+0x48a>
 8007516:	2200      	movs	r2, #0
 8007518:	0020      	movs	r0, r4
 800751a:	0029      	movs	r1, r5
 800751c:	4b60      	ldr	r3, [pc, #384]	; (80076a0 <_dtoa_r+0x730>)
 800751e:	f7fa f9a3 	bl	8001868 <__aeabi_dmul>
 8007522:	4b5f      	ldr	r3, [pc, #380]	; (80076a0 <_dtoa_r+0x730>)
 8007524:	0004      	movs	r4, r0
 8007526:	000d      	movs	r5, r1
 8007528:	0030      	movs	r0, r6
 800752a:	0039      	movs	r1, r7
 800752c:	2200      	movs	r2, #0
 800752e:	f7fa f99b 	bl	8001868 <__aeabi_dmul>
 8007532:	9b08      	ldr	r3, [sp, #32]
 8007534:	0006      	movs	r6, r0
 8007536:	000f      	movs	r7, r1
 8007538:	9314      	str	r3, [sp, #80]	; 0x50
 800753a:	e7be      	b.n	80074ba <_dtoa_r+0x54a>
 800753c:	0020      	movs	r0, r4
 800753e:	0029      	movs	r1, r5
 8007540:	f7fa f992 	bl	8001868 <__aeabi_dmul>
 8007544:	9a06      	ldr	r2, [sp, #24]
 8007546:	9b06      	ldr	r3, [sp, #24]
 8007548:	4694      	mov	ip, r2
 800754a:	9308      	str	r3, [sp, #32]
 800754c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800754e:	9014      	str	r0, [sp, #80]	; 0x50
 8007550:	9115      	str	r1, [sp, #84]	; 0x54
 8007552:	4463      	add	r3, ip
 8007554:	9319      	str	r3, [sp, #100]	; 0x64
 8007556:	0030      	movs	r0, r6
 8007558:	0039      	movs	r1, r7
 800755a:	f7fa ffe7 	bl	800252c <__aeabi_d2iz>
 800755e:	9018      	str	r0, [sp, #96]	; 0x60
 8007560:	f7fb f81a 	bl	8002598 <__aeabi_i2d>
 8007564:	0002      	movs	r2, r0
 8007566:	000b      	movs	r3, r1
 8007568:	0030      	movs	r0, r6
 800756a:	0039      	movs	r1, r7
 800756c:	f7fa fc3e 	bl	8001dec <__aeabi_dsub>
 8007570:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8007572:	9b08      	ldr	r3, [sp, #32]
 8007574:	3630      	adds	r6, #48	; 0x30
 8007576:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007578:	701e      	strb	r6, [r3, #0]
 800757a:	3301      	adds	r3, #1
 800757c:	0004      	movs	r4, r0
 800757e:	000d      	movs	r5, r1
 8007580:	9308      	str	r3, [sp, #32]
 8007582:	4293      	cmp	r3, r2
 8007584:	d12d      	bne.n	80075e2 <_dtoa_r+0x672>
 8007586:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007588:	9915      	ldr	r1, [sp, #84]	; 0x54
 800758a:	9a06      	ldr	r2, [sp, #24]
 800758c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800758e:	4694      	mov	ip, r2
 8007590:	4463      	add	r3, ip
 8007592:	2200      	movs	r2, #0
 8007594:	9308      	str	r3, [sp, #32]
 8007596:	4b47      	ldr	r3, [pc, #284]	; (80076b4 <_dtoa_r+0x744>)
 8007598:	f7f9 fa0c 	bl	80009b4 <__aeabi_dadd>
 800759c:	0002      	movs	r2, r0
 800759e:	000b      	movs	r3, r1
 80075a0:	0020      	movs	r0, r4
 80075a2:	0029      	movs	r1, r5
 80075a4:	f7f8 ff6c 	bl	8000480 <__aeabi_dcmpgt>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d000      	beq.n	80075ae <_dtoa_r+0x63e>
 80075ac:	e086      	b.n	80076bc <_dtoa_r+0x74c>
 80075ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80075b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075b2:	2000      	movs	r0, #0
 80075b4:	493f      	ldr	r1, [pc, #252]	; (80076b4 <_dtoa_r+0x744>)
 80075b6:	f7fa fc19 	bl	8001dec <__aeabi_dsub>
 80075ba:	0002      	movs	r2, r0
 80075bc:	000b      	movs	r3, r1
 80075be:	0020      	movs	r0, r4
 80075c0:	0029      	movs	r1, r5
 80075c2:	f7f8 ff49 	bl	8000458 <__aeabi_dcmplt>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d100      	bne.n	80075cc <_dtoa_r+0x65c>
 80075ca:	e716      	b.n	80073fa <_dtoa_r+0x48a>
 80075cc:	9b08      	ldr	r3, [sp, #32]
 80075ce:	001a      	movs	r2, r3
 80075d0:	3a01      	subs	r2, #1
 80075d2:	9208      	str	r2, [sp, #32]
 80075d4:	7812      	ldrb	r2, [r2, #0]
 80075d6:	2a30      	cmp	r2, #48	; 0x30
 80075d8:	d0f8      	beq.n	80075cc <_dtoa_r+0x65c>
 80075da:	9308      	str	r3, [sp, #32]
 80075dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075de:	9303      	str	r3, [sp, #12]
 80075e0:	e046      	b.n	8007670 <_dtoa_r+0x700>
 80075e2:	2200      	movs	r2, #0
 80075e4:	4b2e      	ldr	r3, [pc, #184]	; (80076a0 <_dtoa_r+0x730>)
 80075e6:	f7fa f93f 	bl	8001868 <__aeabi_dmul>
 80075ea:	0006      	movs	r6, r0
 80075ec:	000f      	movs	r7, r1
 80075ee:	e7b2      	b.n	8007556 <_dtoa_r+0x5e6>
 80075f0:	9b06      	ldr	r3, [sp, #24]
 80075f2:	9a06      	ldr	r2, [sp, #24]
 80075f4:	930a      	str	r3, [sp, #40]	; 0x28
 80075f6:	9b07      	ldr	r3, [sp, #28]
 80075f8:	9c08      	ldr	r4, [sp, #32]
 80075fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80075fc:	3b01      	subs	r3, #1
 80075fe:	189b      	adds	r3, r3, r2
 8007600:	930b      	str	r3, [sp, #44]	; 0x2c
 8007602:	0032      	movs	r2, r6
 8007604:	003b      	movs	r3, r7
 8007606:	0020      	movs	r0, r4
 8007608:	0029      	movs	r1, r5
 800760a:	f7f9 fd33 	bl	8001074 <__aeabi_ddiv>
 800760e:	f7fa ff8d 	bl	800252c <__aeabi_d2iz>
 8007612:	9007      	str	r0, [sp, #28]
 8007614:	f7fa ffc0 	bl	8002598 <__aeabi_i2d>
 8007618:	0032      	movs	r2, r6
 800761a:	003b      	movs	r3, r7
 800761c:	f7fa f924 	bl	8001868 <__aeabi_dmul>
 8007620:	0002      	movs	r2, r0
 8007622:	000b      	movs	r3, r1
 8007624:	0020      	movs	r0, r4
 8007626:	0029      	movs	r1, r5
 8007628:	f7fa fbe0 	bl	8001dec <__aeabi_dsub>
 800762c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800762e:	001a      	movs	r2, r3
 8007630:	3201      	adds	r2, #1
 8007632:	920a      	str	r2, [sp, #40]	; 0x28
 8007634:	9208      	str	r2, [sp, #32]
 8007636:	9a07      	ldr	r2, [sp, #28]
 8007638:	3230      	adds	r2, #48	; 0x30
 800763a:	701a      	strb	r2, [r3, #0]
 800763c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800763e:	429a      	cmp	r2, r3
 8007640:	d14f      	bne.n	80076e2 <_dtoa_r+0x772>
 8007642:	0002      	movs	r2, r0
 8007644:	000b      	movs	r3, r1
 8007646:	f7f9 f9b5 	bl	80009b4 <__aeabi_dadd>
 800764a:	0032      	movs	r2, r6
 800764c:	003b      	movs	r3, r7
 800764e:	0004      	movs	r4, r0
 8007650:	000d      	movs	r5, r1
 8007652:	f7f8 ff15 	bl	8000480 <__aeabi_dcmpgt>
 8007656:	2800      	cmp	r0, #0
 8007658:	d12e      	bne.n	80076b8 <_dtoa_r+0x748>
 800765a:	0032      	movs	r2, r6
 800765c:	003b      	movs	r3, r7
 800765e:	0020      	movs	r0, r4
 8007660:	0029      	movs	r1, r5
 8007662:	f7f8 fef3 	bl	800044c <__aeabi_dcmpeq>
 8007666:	2800      	cmp	r0, #0
 8007668:	d002      	beq.n	8007670 <_dtoa_r+0x700>
 800766a:	9b07      	ldr	r3, [sp, #28]
 800766c:	07de      	lsls	r6, r3, #31
 800766e:	d423      	bmi.n	80076b8 <_dtoa_r+0x748>
 8007670:	9905      	ldr	r1, [sp, #20]
 8007672:	9804      	ldr	r0, [sp, #16]
 8007674:	f000 fbd6 	bl	8007e24 <_Bfree>
 8007678:	2300      	movs	r3, #0
 800767a:	9a08      	ldr	r2, [sp, #32]
 800767c:	7013      	strb	r3, [r2, #0]
 800767e:	9b03      	ldr	r3, [sp, #12]
 8007680:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007682:	3301      	adds	r3, #1
 8007684:	6013      	str	r3, [r2, #0]
 8007686:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007688:	2b00      	cmp	r3, #0
 800768a:	d100      	bne.n	800768e <_dtoa_r+0x71e>
 800768c:	e4ba      	b.n	8007004 <_dtoa_r+0x94>
 800768e:	9a08      	ldr	r2, [sp, #32]
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	e4b7      	b.n	8007004 <_dtoa_r+0x94>
 8007694:	08009310 	.word	0x08009310
 8007698:	080092e8 	.word	0x080092e8
 800769c:	3ff00000 	.word	0x3ff00000
 80076a0:	40240000 	.word	0x40240000
 80076a4:	401c0000 	.word	0x401c0000
 80076a8:	fcc00000 	.word	0xfcc00000
 80076ac:	40140000 	.word	0x40140000
 80076b0:	7cc00000 	.word	0x7cc00000
 80076b4:	3fe00000 	.word	0x3fe00000
 80076b8:	9b03      	ldr	r3, [sp, #12]
 80076ba:	930e      	str	r3, [sp, #56]	; 0x38
 80076bc:	9b08      	ldr	r3, [sp, #32]
 80076be:	9308      	str	r3, [sp, #32]
 80076c0:	3b01      	subs	r3, #1
 80076c2:	781a      	ldrb	r2, [r3, #0]
 80076c4:	2a39      	cmp	r2, #57	; 0x39
 80076c6:	d108      	bne.n	80076da <_dtoa_r+0x76a>
 80076c8:	9a06      	ldr	r2, [sp, #24]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d1f7      	bne.n	80076be <_dtoa_r+0x74e>
 80076ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076d0:	9906      	ldr	r1, [sp, #24]
 80076d2:	3201      	adds	r2, #1
 80076d4:	920e      	str	r2, [sp, #56]	; 0x38
 80076d6:	2230      	movs	r2, #48	; 0x30
 80076d8:	700a      	strb	r2, [r1, #0]
 80076da:	781a      	ldrb	r2, [r3, #0]
 80076dc:	3201      	adds	r2, #1
 80076de:	701a      	strb	r2, [r3, #0]
 80076e0:	e77c      	b.n	80075dc <_dtoa_r+0x66c>
 80076e2:	2200      	movs	r2, #0
 80076e4:	4ba9      	ldr	r3, [pc, #676]	; (800798c <_dtoa_r+0xa1c>)
 80076e6:	f7fa f8bf 	bl	8001868 <__aeabi_dmul>
 80076ea:	2200      	movs	r2, #0
 80076ec:	2300      	movs	r3, #0
 80076ee:	0004      	movs	r4, r0
 80076f0:	000d      	movs	r5, r1
 80076f2:	f7f8 feab 	bl	800044c <__aeabi_dcmpeq>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d100      	bne.n	80076fc <_dtoa_r+0x78c>
 80076fa:	e782      	b.n	8007602 <_dtoa_r+0x692>
 80076fc:	e7b8      	b.n	8007670 <_dtoa_r+0x700>
 80076fe:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8007700:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007702:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007704:	2f00      	cmp	r7, #0
 8007706:	d012      	beq.n	800772e <_dtoa_r+0x7be>
 8007708:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800770a:	2a01      	cmp	r2, #1
 800770c:	dc6e      	bgt.n	80077ec <_dtoa_r+0x87c>
 800770e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007710:	2a00      	cmp	r2, #0
 8007712:	d065      	beq.n	80077e0 <_dtoa_r+0x870>
 8007714:	4a9e      	ldr	r2, [pc, #632]	; (8007990 <_dtoa_r+0xa20>)
 8007716:	189b      	adds	r3, r3, r2
 8007718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800771a:	2101      	movs	r1, #1
 800771c:	18d2      	adds	r2, r2, r3
 800771e:	920a      	str	r2, [sp, #40]	; 0x28
 8007720:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007722:	9804      	ldr	r0, [sp, #16]
 8007724:	18d3      	adds	r3, r2, r3
 8007726:	930c      	str	r3, [sp, #48]	; 0x30
 8007728:	f000 fc2c 	bl	8007f84 <__i2b>
 800772c:	0007      	movs	r7, r0
 800772e:	2c00      	cmp	r4, #0
 8007730:	d00e      	beq.n	8007750 <_dtoa_r+0x7e0>
 8007732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007734:	2b00      	cmp	r3, #0
 8007736:	dd0b      	ble.n	8007750 <_dtoa_r+0x7e0>
 8007738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800773a:	0023      	movs	r3, r4
 800773c:	4294      	cmp	r4, r2
 800773e:	dd00      	ble.n	8007742 <_dtoa_r+0x7d2>
 8007740:	0013      	movs	r3, r2
 8007742:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007744:	1ae4      	subs	r4, r4, r3
 8007746:	1ad2      	subs	r2, r2, r3
 8007748:	920a      	str	r2, [sp, #40]	; 0x28
 800774a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	930c      	str	r3, [sp, #48]	; 0x30
 8007750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007752:	2b00      	cmp	r3, #0
 8007754:	d01e      	beq.n	8007794 <_dtoa_r+0x824>
 8007756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007758:	2b00      	cmp	r3, #0
 800775a:	d05c      	beq.n	8007816 <_dtoa_r+0x8a6>
 800775c:	2d00      	cmp	r5, #0
 800775e:	dd10      	ble.n	8007782 <_dtoa_r+0x812>
 8007760:	0039      	movs	r1, r7
 8007762:	002a      	movs	r2, r5
 8007764:	9804      	ldr	r0, [sp, #16]
 8007766:	f000 fcd5 	bl	8008114 <__pow5mult>
 800776a:	9a05      	ldr	r2, [sp, #20]
 800776c:	0001      	movs	r1, r0
 800776e:	0007      	movs	r7, r0
 8007770:	9804      	ldr	r0, [sp, #16]
 8007772:	f000 fc1f 	bl	8007fb4 <__multiply>
 8007776:	0006      	movs	r6, r0
 8007778:	9905      	ldr	r1, [sp, #20]
 800777a:	9804      	ldr	r0, [sp, #16]
 800777c:	f000 fb52 	bl	8007e24 <_Bfree>
 8007780:	9605      	str	r6, [sp, #20]
 8007782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007784:	1b5a      	subs	r2, r3, r5
 8007786:	42ab      	cmp	r3, r5
 8007788:	d004      	beq.n	8007794 <_dtoa_r+0x824>
 800778a:	9905      	ldr	r1, [sp, #20]
 800778c:	9804      	ldr	r0, [sp, #16]
 800778e:	f000 fcc1 	bl	8008114 <__pow5mult>
 8007792:	9005      	str	r0, [sp, #20]
 8007794:	2101      	movs	r1, #1
 8007796:	9804      	ldr	r0, [sp, #16]
 8007798:	f000 fbf4 	bl	8007f84 <__i2b>
 800779c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800779e:	0006      	movs	r6, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	dd3a      	ble.n	800781a <_dtoa_r+0x8aa>
 80077a4:	001a      	movs	r2, r3
 80077a6:	0001      	movs	r1, r0
 80077a8:	9804      	ldr	r0, [sp, #16]
 80077aa:	f000 fcb3 	bl	8008114 <__pow5mult>
 80077ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077b0:	0006      	movs	r6, r0
 80077b2:	2500      	movs	r5, #0
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	dc38      	bgt.n	800782a <_dtoa_r+0x8ba>
 80077b8:	2500      	movs	r5, #0
 80077ba:	9b08      	ldr	r3, [sp, #32]
 80077bc:	42ab      	cmp	r3, r5
 80077be:	d130      	bne.n	8007822 <_dtoa_r+0x8b2>
 80077c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c2:	031b      	lsls	r3, r3, #12
 80077c4:	42ab      	cmp	r3, r5
 80077c6:	d12c      	bne.n	8007822 <_dtoa_r+0x8b2>
 80077c8:	4b72      	ldr	r3, [pc, #456]	; (8007994 <_dtoa_r+0xa24>)
 80077ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077cc:	4213      	tst	r3, r2
 80077ce:	d028      	beq.n	8007822 <_dtoa_r+0x8b2>
 80077d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d2:	3501      	adds	r5, #1
 80077d4:	3301      	adds	r3, #1
 80077d6:	930a      	str	r3, [sp, #40]	; 0x28
 80077d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077da:	3301      	adds	r3, #1
 80077dc:	930c      	str	r3, [sp, #48]	; 0x30
 80077de:	e020      	b.n	8007822 <_dtoa_r+0x8b2>
 80077e0:	2336      	movs	r3, #54	; 0x36
 80077e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077e4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80077e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80077e8:	1a9b      	subs	r3, r3, r2
 80077ea:	e795      	b.n	8007718 <_dtoa_r+0x7a8>
 80077ec:	9b07      	ldr	r3, [sp, #28]
 80077ee:	1e5d      	subs	r5, r3, #1
 80077f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077f2:	42ab      	cmp	r3, r5
 80077f4:	db07      	blt.n	8007806 <_dtoa_r+0x896>
 80077f6:	1b5d      	subs	r5, r3, r5
 80077f8:	9b07      	ldr	r3, [sp, #28]
 80077fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	da8b      	bge.n	8007718 <_dtoa_r+0x7a8>
 8007800:	1ae4      	subs	r4, r4, r3
 8007802:	2300      	movs	r3, #0
 8007804:	e788      	b.n	8007718 <_dtoa_r+0x7a8>
 8007806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007808:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800780a:	1aeb      	subs	r3, r5, r3
 800780c:	18d3      	adds	r3, r2, r3
 800780e:	950d      	str	r5, [sp, #52]	; 0x34
 8007810:	9313      	str	r3, [sp, #76]	; 0x4c
 8007812:	2500      	movs	r5, #0
 8007814:	e7f0      	b.n	80077f8 <_dtoa_r+0x888>
 8007816:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007818:	e7b7      	b.n	800778a <_dtoa_r+0x81a>
 800781a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800781c:	2500      	movs	r5, #0
 800781e:	2b01      	cmp	r3, #1
 8007820:	ddca      	ble.n	80077b8 <_dtoa_r+0x848>
 8007822:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007824:	2001      	movs	r0, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d008      	beq.n	800783c <_dtoa_r+0x8cc>
 800782a:	6933      	ldr	r3, [r6, #16]
 800782c:	3303      	adds	r3, #3
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	18f3      	adds	r3, r6, r3
 8007832:	6858      	ldr	r0, [r3, #4]
 8007834:	f000 fb5e 	bl	8007ef4 <__hi0bits>
 8007838:	2320      	movs	r3, #32
 800783a:	1a18      	subs	r0, r3, r0
 800783c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800783e:	1818      	adds	r0, r3, r0
 8007840:	0002      	movs	r2, r0
 8007842:	231f      	movs	r3, #31
 8007844:	401a      	ands	r2, r3
 8007846:	4218      	tst	r0, r3
 8007848:	d047      	beq.n	80078da <_dtoa_r+0x96a>
 800784a:	3301      	adds	r3, #1
 800784c:	1a9b      	subs	r3, r3, r2
 800784e:	2b04      	cmp	r3, #4
 8007850:	dd3f      	ble.n	80078d2 <_dtoa_r+0x962>
 8007852:	231c      	movs	r3, #28
 8007854:	1a9b      	subs	r3, r3, r2
 8007856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007858:	18e4      	adds	r4, r4, r3
 800785a:	18d2      	adds	r2, r2, r3
 800785c:	920a      	str	r2, [sp, #40]	; 0x28
 800785e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007860:	18d3      	adds	r3, r2, r3
 8007862:	930c      	str	r3, [sp, #48]	; 0x30
 8007864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007866:	2b00      	cmp	r3, #0
 8007868:	dd05      	ble.n	8007876 <_dtoa_r+0x906>
 800786a:	001a      	movs	r2, r3
 800786c:	9905      	ldr	r1, [sp, #20]
 800786e:	9804      	ldr	r0, [sp, #16]
 8007870:	f000 fcac 	bl	80081cc <__lshift>
 8007874:	9005      	str	r0, [sp, #20]
 8007876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007878:	2b00      	cmp	r3, #0
 800787a:	dd05      	ble.n	8007888 <_dtoa_r+0x918>
 800787c:	0031      	movs	r1, r6
 800787e:	001a      	movs	r2, r3
 8007880:	9804      	ldr	r0, [sp, #16]
 8007882:	f000 fca3 	bl	80081cc <__lshift>
 8007886:	0006      	movs	r6, r0
 8007888:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800788a:	2b00      	cmp	r3, #0
 800788c:	d027      	beq.n	80078de <_dtoa_r+0x96e>
 800788e:	0031      	movs	r1, r6
 8007890:	9805      	ldr	r0, [sp, #20]
 8007892:	f000 fd09 	bl	80082a8 <__mcmp>
 8007896:	2800      	cmp	r0, #0
 8007898:	da21      	bge.n	80078de <_dtoa_r+0x96e>
 800789a:	9b03      	ldr	r3, [sp, #12]
 800789c:	220a      	movs	r2, #10
 800789e:	3b01      	subs	r3, #1
 80078a0:	9303      	str	r3, [sp, #12]
 80078a2:	9905      	ldr	r1, [sp, #20]
 80078a4:	2300      	movs	r3, #0
 80078a6:	9804      	ldr	r0, [sp, #16]
 80078a8:	f000 fae0 	bl	8007e6c <__multadd>
 80078ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078ae:	9005      	str	r0, [sp, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d100      	bne.n	80078b6 <_dtoa_r+0x946>
 80078b4:	e15d      	b.n	8007b72 <_dtoa_r+0xc02>
 80078b6:	2300      	movs	r3, #0
 80078b8:	0039      	movs	r1, r7
 80078ba:	220a      	movs	r2, #10
 80078bc:	9804      	ldr	r0, [sp, #16]
 80078be:	f000 fad5 	bl	8007e6c <__multadd>
 80078c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078c4:	0007      	movs	r7, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	dc49      	bgt.n	800795e <_dtoa_r+0x9ee>
 80078ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	dc0e      	bgt.n	80078ee <_dtoa_r+0x97e>
 80078d0:	e045      	b.n	800795e <_dtoa_r+0x9ee>
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	d0c6      	beq.n	8007864 <_dtoa_r+0x8f4>
 80078d6:	331c      	adds	r3, #28
 80078d8:	e7bd      	b.n	8007856 <_dtoa_r+0x8e6>
 80078da:	0013      	movs	r3, r2
 80078dc:	e7fb      	b.n	80078d6 <_dtoa_r+0x966>
 80078de:	9b07      	ldr	r3, [sp, #28]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	dc36      	bgt.n	8007952 <_dtoa_r+0x9e2>
 80078e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	dd33      	ble.n	8007952 <_dtoa_r+0x9e2>
 80078ea:	9b07      	ldr	r3, [sp, #28]
 80078ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80078ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10c      	bne.n	800790e <_dtoa_r+0x99e>
 80078f4:	0031      	movs	r1, r6
 80078f6:	2205      	movs	r2, #5
 80078f8:	9804      	ldr	r0, [sp, #16]
 80078fa:	f000 fab7 	bl	8007e6c <__multadd>
 80078fe:	0006      	movs	r6, r0
 8007900:	0001      	movs	r1, r0
 8007902:	9805      	ldr	r0, [sp, #20]
 8007904:	f000 fcd0 	bl	80082a8 <__mcmp>
 8007908:	2800      	cmp	r0, #0
 800790a:	dd00      	ble.n	800790e <_dtoa_r+0x99e>
 800790c:	e59f      	b.n	800744e <_dtoa_r+0x4de>
 800790e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007910:	43db      	mvns	r3, r3
 8007912:	9303      	str	r3, [sp, #12]
 8007914:	9b06      	ldr	r3, [sp, #24]
 8007916:	9308      	str	r3, [sp, #32]
 8007918:	2500      	movs	r5, #0
 800791a:	0031      	movs	r1, r6
 800791c:	9804      	ldr	r0, [sp, #16]
 800791e:	f000 fa81 	bl	8007e24 <_Bfree>
 8007922:	2f00      	cmp	r7, #0
 8007924:	d100      	bne.n	8007928 <_dtoa_r+0x9b8>
 8007926:	e6a3      	b.n	8007670 <_dtoa_r+0x700>
 8007928:	2d00      	cmp	r5, #0
 800792a:	d005      	beq.n	8007938 <_dtoa_r+0x9c8>
 800792c:	42bd      	cmp	r5, r7
 800792e:	d003      	beq.n	8007938 <_dtoa_r+0x9c8>
 8007930:	0029      	movs	r1, r5
 8007932:	9804      	ldr	r0, [sp, #16]
 8007934:	f000 fa76 	bl	8007e24 <_Bfree>
 8007938:	0039      	movs	r1, r7
 800793a:	9804      	ldr	r0, [sp, #16]
 800793c:	f000 fa72 	bl	8007e24 <_Bfree>
 8007940:	e696      	b.n	8007670 <_dtoa_r+0x700>
 8007942:	2600      	movs	r6, #0
 8007944:	0037      	movs	r7, r6
 8007946:	e7e2      	b.n	800790e <_dtoa_r+0x99e>
 8007948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800794a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800794c:	9303      	str	r3, [sp, #12]
 800794e:	0037      	movs	r7, r6
 8007950:	e57d      	b.n	800744e <_dtoa_r+0x4de>
 8007952:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007954:	2b00      	cmp	r3, #0
 8007956:	d100      	bne.n	800795a <_dtoa_r+0x9ea>
 8007958:	e0c3      	b.n	8007ae2 <_dtoa_r+0xb72>
 800795a:	9b07      	ldr	r3, [sp, #28]
 800795c:	930b      	str	r3, [sp, #44]	; 0x2c
 800795e:	2c00      	cmp	r4, #0
 8007960:	dd05      	ble.n	800796e <_dtoa_r+0x9fe>
 8007962:	0039      	movs	r1, r7
 8007964:	0022      	movs	r2, r4
 8007966:	9804      	ldr	r0, [sp, #16]
 8007968:	f000 fc30 	bl	80081cc <__lshift>
 800796c:	0007      	movs	r7, r0
 800796e:	0038      	movs	r0, r7
 8007970:	2d00      	cmp	r5, #0
 8007972:	d024      	beq.n	80079be <_dtoa_r+0xa4e>
 8007974:	6879      	ldr	r1, [r7, #4]
 8007976:	9804      	ldr	r0, [sp, #16]
 8007978:	f000 fa10 	bl	8007d9c <_Balloc>
 800797c:	1e04      	subs	r4, r0, #0
 800797e:	d111      	bne.n	80079a4 <_dtoa_r+0xa34>
 8007980:	0022      	movs	r2, r4
 8007982:	4b05      	ldr	r3, [pc, #20]	; (8007998 <_dtoa_r+0xa28>)
 8007984:	4805      	ldr	r0, [pc, #20]	; (800799c <_dtoa_r+0xa2c>)
 8007986:	4906      	ldr	r1, [pc, #24]	; (80079a0 <_dtoa_r+0xa30>)
 8007988:	f7ff fb07 	bl	8006f9a <_dtoa_r+0x2a>
 800798c:	40240000 	.word	0x40240000
 8007990:	00000433 	.word	0x00000433
 8007994:	7ff00000 	.word	0x7ff00000
 8007998:	08009278 	.word	0x08009278
 800799c:	08009220 	.word	0x08009220
 80079a0:	000002ef 	.word	0x000002ef
 80079a4:	0039      	movs	r1, r7
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	310c      	adds	r1, #12
 80079aa:	3202      	adds	r2, #2
 80079ac:	0092      	lsls	r2, r2, #2
 80079ae:	300c      	adds	r0, #12
 80079b0:	f000 ffca 	bl	8008948 <memcpy>
 80079b4:	2201      	movs	r2, #1
 80079b6:	0021      	movs	r1, r4
 80079b8:	9804      	ldr	r0, [sp, #16]
 80079ba:	f000 fc07 	bl	80081cc <__lshift>
 80079be:	9b06      	ldr	r3, [sp, #24]
 80079c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079c2:	9307      	str	r3, [sp, #28]
 80079c4:	3b01      	subs	r3, #1
 80079c6:	189b      	adds	r3, r3, r2
 80079c8:	2201      	movs	r2, #1
 80079ca:	003d      	movs	r5, r7
 80079cc:	0007      	movs	r7, r0
 80079ce:	930e      	str	r3, [sp, #56]	; 0x38
 80079d0:	9b08      	ldr	r3, [sp, #32]
 80079d2:	4013      	ands	r3, r2
 80079d4:	930d      	str	r3, [sp, #52]	; 0x34
 80079d6:	0031      	movs	r1, r6
 80079d8:	9805      	ldr	r0, [sp, #20]
 80079da:	f7ff fa39 	bl	8006e50 <quorem>
 80079de:	0029      	movs	r1, r5
 80079e0:	0004      	movs	r4, r0
 80079e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80079e4:	9805      	ldr	r0, [sp, #20]
 80079e6:	f000 fc5f 	bl	80082a8 <__mcmp>
 80079ea:	003a      	movs	r2, r7
 80079ec:	900c      	str	r0, [sp, #48]	; 0x30
 80079ee:	0031      	movs	r1, r6
 80079f0:	9804      	ldr	r0, [sp, #16]
 80079f2:	f000 fc75 	bl	80082e0 <__mdiff>
 80079f6:	2201      	movs	r2, #1
 80079f8:	68c3      	ldr	r3, [r0, #12]
 80079fa:	3430      	adds	r4, #48	; 0x30
 80079fc:	9008      	str	r0, [sp, #32]
 80079fe:	920a      	str	r2, [sp, #40]	; 0x28
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d104      	bne.n	8007a0e <_dtoa_r+0xa9e>
 8007a04:	0001      	movs	r1, r0
 8007a06:	9805      	ldr	r0, [sp, #20]
 8007a08:	f000 fc4e 	bl	80082a8 <__mcmp>
 8007a0c:	900a      	str	r0, [sp, #40]	; 0x28
 8007a0e:	9908      	ldr	r1, [sp, #32]
 8007a10:	9804      	ldr	r0, [sp, #16]
 8007a12:	f000 fa07 	bl	8007e24 <_Bfree>
 8007a16:	9b07      	ldr	r3, [sp, #28]
 8007a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	9308      	str	r3, [sp, #32]
 8007a1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a20:	4313      	orrs	r3, r2
 8007a22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a24:	4313      	orrs	r3, r2
 8007a26:	d109      	bne.n	8007a3c <_dtoa_r+0xacc>
 8007a28:	2c39      	cmp	r4, #57	; 0x39
 8007a2a:	d022      	beq.n	8007a72 <_dtoa_r+0xb02>
 8007a2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	dd01      	ble.n	8007a36 <_dtoa_r+0xac6>
 8007a32:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007a34:	3431      	adds	r4, #49	; 0x31
 8007a36:	9b07      	ldr	r3, [sp, #28]
 8007a38:	701c      	strb	r4, [r3, #0]
 8007a3a:	e76e      	b.n	800791a <_dtoa_r+0x9aa>
 8007a3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	db04      	blt.n	8007a4c <_dtoa_r+0xadc>
 8007a42:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007a44:	4313      	orrs	r3, r2
 8007a46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	d11e      	bne.n	8007a8a <_dtoa_r+0xb1a>
 8007a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	ddf1      	ble.n	8007a36 <_dtoa_r+0xac6>
 8007a52:	9905      	ldr	r1, [sp, #20]
 8007a54:	2201      	movs	r2, #1
 8007a56:	9804      	ldr	r0, [sp, #16]
 8007a58:	f000 fbb8 	bl	80081cc <__lshift>
 8007a5c:	0031      	movs	r1, r6
 8007a5e:	9005      	str	r0, [sp, #20]
 8007a60:	f000 fc22 	bl	80082a8 <__mcmp>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	dc02      	bgt.n	8007a6e <_dtoa_r+0xafe>
 8007a68:	d1e5      	bne.n	8007a36 <_dtoa_r+0xac6>
 8007a6a:	07e3      	lsls	r3, r4, #31
 8007a6c:	d5e3      	bpl.n	8007a36 <_dtoa_r+0xac6>
 8007a6e:	2c39      	cmp	r4, #57	; 0x39
 8007a70:	d1df      	bne.n	8007a32 <_dtoa_r+0xac2>
 8007a72:	2339      	movs	r3, #57	; 0x39
 8007a74:	9a07      	ldr	r2, [sp, #28]
 8007a76:	7013      	strb	r3, [r2, #0]
 8007a78:	9b08      	ldr	r3, [sp, #32]
 8007a7a:	9308      	str	r3, [sp, #32]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	781a      	ldrb	r2, [r3, #0]
 8007a80:	2a39      	cmp	r2, #57	; 0x39
 8007a82:	d063      	beq.n	8007b4c <_dtoa_r+0xbdc>
 8007a84:	3201      	adds	r2, #1
 8007a86:	701a      	strb	r2, [r3, #0]
 8007a88:	e747      	b.n	800791a <_dtoa_r+0x9aa>
 8007a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	dd03      	ble.n	8007a98 <_dtoa_r+0xb28>
 8007a90:	2c39      	cmp	r4, #57	; 0x39
 8007a92:	d0ee      	beq.n	8007a72 <_dtoa_r+0xb02>
 8007a94:	3401      	adds	r4, #1
 8007a96:	e7ce      	b.n	8007a36 <_dtoa_r+0xac6>
 8007a98:	9b07      	ldr	r3, [sp, #28]
 8007a9a:	9a07      	ldr	r2, [sp, #28]
 8007a9c:	701c      	strb	r4, [r3, #0]
 8007a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d03e      	beq.n	8007b22 <_dtoa_r+0xbb2>
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	220a      	movs	r2, #10
 8007aa8:	9905      	ldr	r1, [sp, #20]
 8007aaa:	9804      	ldr	r0, [sp, #16]
 8007aac:	f000 f9de 	bl	8007e6c <__multadd>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	9005      	str	r0, [sp, #20]
 8007ab4:	220a      	movs	r2, #10
 8007ab6:	0029      	movs	r1, r5
 8007ab8:	9804      	ldr	r0, [sp, #16]
 8007aba:	42bd      	cmp	r5, r7
 8007abc:	d106      	bne.n	8007acc <_dtoa_r+0xb5c>
 8007abe:	f000 f9d5 	bl	8007e6c <__multadd>
 8007ac2:	0005      	movs	r5, r0
 8007ac4:	0007      	movs	r7, r0
 8007ac6:	9b08      	ldr	r3, [sp, #32]
 8007ac8:	9307      	str	r3, [sp, #28]
 8007aca:	e784      	b.n	80079d6 <_dtoa_r+0xa66>
 8007acc:	f000 f9ce 	bl	8007e6c <__multadd>
 8007ad0:	0039      	movs	r1, r7
 8007ad2:	0005      	movs	r5, r0
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	220a      	movs	r2, #10
 8007ad8:	9804      	ldr	r0, [sp, #16]
 8007ada:	f000 f9c7 	bl	8007e6c <__multadd>
 8007ade:	0007      	movs	r7, r0
 8007ae0:	e7f1      	b.n	8007ac6 <_dtoa_r+0xb56>
 8007ae2:	9b07      	ldr	r3, [sp, #28]
 8007ae4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ae6:	2500      	movs	r5, #0
 8007ae8:	0031      	movs	r1, r6
 8007aea:	9805      	ldr	r0, [sp, #20]
 8007aec:	f7ff f9b0 	bl	8006e50 <quorem>
 8007af0:	9b06      	ldr	r3, [sp, #24]
 8007af2:	3030      	adds	r0, #48	; 0x30
 8007af4:	5558      	strb	r0, [r3, r5]
 8007af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007af8:	3501      	adds	r5, #1
 8007afa:	0004      	movs	r4, r0
 8007afc:	42ab      	cmp	r3, r5
 8007afe:	dd07      	ble.n	8007b10 <_dtoa_r+0xba0>
 8007b00:	2300      	movs	r3, #0
 8007b02:	220a      	movs	r2, #10
 8007b04:	9905      	ldr	r1, [sp, #20]
 8007b06:	9804      	ldr	r0, [sp, #16]
 8007b08:	f000 f9b0 	bl	8007e6c <__multadd>
 8007b0c:	9005      	str	r0, [sp, #20]
 8007b0e:	e7eb      	b.n	8007ae8 <_dtoa_r+0xb78>
 8007b10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b12:	2301      	movs	r3, #1
 8007b14:	2a00      	cmp	r2, #0
 8007b16:	dd00      	ble.n	8007b1a <_dtoa_r+0xbaa>
 8007b18:	0013      	movs	r3, r2
 8007b1a:	2500      	movs	r5, #0
 8007b1c:	9a06      	ldr	r2, [sp, #24]
 8007b1e:	18d3      	adds	r3, r2, r3
 8007b20:	9308      	str	r3, [sp, #32]
 8007b22:	9905      	ldr	r1, [sp, #20]
 8007b24:	2201      	movs	r2, #1
 8007b26:	9804      	ldr	r0, [sp, #16]
 8007b28:	f000 fb50 	bl	80081cc <__lshift>
 8007b2c:	0031      	movs	r1, r6
 8007b2e:	9005      	str	r0, [sp, #20]
 8007b30:	f000 fbba 	bl	80082a8 <__mcmp>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	dc9f      	bgt.n	8007a78 <_dtoa_r+0xb08>
 8007b38:	d101      	bne.n	8007b3e <_dtoa_r+0xbce>
 8007b3a:	07e4      	lsls	r4, r4, #31
 8007b3c:	d49c      	bmi.n	8007a78 <_dtoa_r+0xb08>
 8007b3e:	9b08      	ldr	r3, [sp, #32]
 8007b40:	9308      	str	r3, [sp, #32]
 8007b42:	3b01      	subs	r3, #1
 8007b44:	781a      	ldrb	r2, [r3, #0]
 8007b46:	2a30      	cmp	r2, #48	; 0x30
 8007b48:	d0fa      	beq.n	8007b40 <_dtoa_r+0xbd0>
 8007b4a:	e6e6      	b.n	800791a <_dtoa_r+0x9aa>
 8007b4c:	9a06      	ldr	r2, [sp, #24]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d193      	bne.n	8007a7a <_dtoa_r+0xb0a>
 8007b52:	9b03      	ldr	r3, [sp, #12]
 8007b54:	3301      	adds	r3, #1
 8007b56:	9303      	str	r3, [sp, #12]
 8007b58:	2331      	movs	r3, #49	; 0x31
 8007b5a:	7013      	strb	r3, [r2, #0]
 8007b5c:	e6dd      	b.n	800791a <_dtoa_r+0x9aa>
 8007b5e:	4b09      	ldr	r3, [pc, #36]	; (8007b84 <_dtoa_r+0xc14>)
 8007b60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007b62:	9306      	str	r3, [sp, #24]
 8007b64:	4b08      	ldr	r3, [pc, #32]	; (8007b88 <_dtoa_r+0xc18>)
 8007b66:	2a00      	cmp	r2, #0
 8007b68:	d001      	beq.n	8007b6e <_dtoa_r+0xbfe>
 8007b6a:	f7ff fa49 	bl	8007000 <_dtoa_r+0x90>
 8007b6e:	f7ff fa49 	bl	8007004 <_dtoa_r+0x94>
 8007b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	dcb6      	bgt.n	8007ae6 <_dtoa_r+0xb76>
 8007b78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	dd00      	ble.n	8007b80 <_dtoa_r+0xc10>
 8007b7e:	e6b6      	b.n	80078ee <_dtoa_r+0x97e>
 8007b80:	e7b1      	b.n	8007ae6 <_dtoa_r+0xb76>
 8007b82:	46c0      	nop			; (mov r8, r8)
 8007b84:	080091fc 	.word	0x080091fc
 8007b88:	08009204 	.word	0x08009204

08007b8c <_free_r>:
 8007b8c:	b570      	push	{r4, r5, r6, lr}
 8007b8e:	0005      	movs	r5, r0
 8007b90:	2900      	cmp	r1, #0
 8007b92:	d010      	beq.n	8007bb6 <_free_r+0x2a>
 8007b94:	1f0c      	subs	r4, r1, #4
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	da00      	bge.n	8007b9e <_free_r+0x12>
 8007b9c:	18e4      	adds	r4, r4, r3
 8007b9e:	0028      	movs	r0, r5
 8007ba0:	f000 f8ec 	bl	8007d7c <__malloc_lock>
 8007ba4:	4a1d      	ldr	r2, [pc, #116]	; (8007c1c <_free_r+0x90>)
 8007ba6:	6813      	ldr	r3, [r2, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d105      	bne.n	8007bb8 <_free_r+0x2c>
 8007bac:	6063      	str	r3, [r4, #4]
 8007bae:	6014      	str	r4, [r2, #0]
 8007bb0:	0028      	movs	r0, r5
 8007bb2:	f000 f8eb 	bl	8007d8c <__malloc_unlock>
 8007bb6:	bd70      	pop	{r4, r5, r6, pc}
 8007bb8:	42a3      	cmp	r3, r4
 8007bba:	d908      	bls.n	8007bce <_free_r+0x42>
 8007bbc:	6820      	ldr	r0, [r4, #0]
 8007bbe:	1821      	adds	r1, r4, r0
 8007bc0:	428b      	cmp	r3, r1
 8007bc2:	d1f3      	bne.n	8007bac <_free_r+0x20>
 8007bc4:	6819      	ldr	r1, [r3, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	1809      	adds	r1, r1, r0
 8007bca:	6021      	str	r1, [r4, #0]
 8007bcc:	e7ee      	b.n	8007bac <_free_r+0x20>
 8007bce:	001a      	movs	r2, r3
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <_free_r+0x4e>
 8007bd6:	42a3      	cmp	r3, r4
 8007bd8:	d9f9      	bls.n	8007bce <_free_r+0x42>
 8007bda:	6811      	ldr	r1, [r2, #0]
 8007bdc:	1850      	adds	r0, r2, r1
 8007bde:	42a0      	cmp	r0, r4
 8007be0:	d10b      	bne.n	8007bfa <_free_r+0x6e>
 8007be2:	6820      	ldr	r0, [r4, #0]
 8007be4:	1809      	adds	r1, r1, r0
 8007be6:	1850      	adds	r0, r2, r1
 8007be8:	6011      	str	r1, [r2, #0]
 8007bea:	4283      	cmp	r3, r0
 8007bec:	d1e0      	bne.n	8007bb0 <_free_r+0x24>
 8007bee:	6818      	ldr	r0, [r3, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	1841      	adds	r1, r0, r1
 8007bf4:	6011      	str	r1, [r2, #0]
 8007bf6:	6053      	str	r3, [r2, #4]
 8007bf8:	e7da      	b.n	8007bb0 <_free_r+0x24>
 8007bfa:	42a0      	cmp	r0, r4
 8007bfc:	d902      	bls.n	8007c04 <_free_r+0x78>
 8007bfe:	230c      	movs	r3, #12
 8007c00:	602b      	str	r3, [r5, #0]
 8007c02:	e7d5      	b.n	8007bb0 <_free_r+0x24>
 8007c04:	6820      	ldr	r0, [r4, #0]
 8007c06:	1821      	adds	r1, r4, r0
 8007c08:	428b      	cmp	r3, r1
 8007c0a:	d103      	bne.n	8007c14 <_free_r+0x88>
 8007c0c:	6819      	ldr	r1, [r3, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	1809      	adds	r1, r1, r0
 8007c12:	6021      	str	r1, [r4, #0]
 8007c14:	6063      	str	r3, [r4, #4]
 8007c16:	6054      	str	r4, [r2, #4]
 8007c18:	e7ca      	b.n	8007bb0 <_free_r+0x24>
 8007c1a:	46c0      	nop			; (mov r8, r8)
 8007c1c:	20000848 	.word	0x20000848

08007c20 <malloc>:
 8007c20:	b510      	push	{r4, lr}
 8007c22:	4b03      	ldr	r3, [pc, #12]	; (8007c30 <malloc+0x10>)
 8007c24:	0001      	movs	r1, r0
 8007c26:	6818      	ldr	r0, [r3, #0]
 8007c28:	f000 f826 	bl	8007c78 <_malloc_r>
 8007c2c:	bd10      	pop	{r4, pc}
 8007c2e:	46c0      	nop			; (mov r8, r8)
 8007c30:	20000068 	.word	0x20000068

08007c34 <sbrk_aligned>:
 8007c34:	b570      	push	{r4, r5, r6, lr}
 8007c36:	4e0f      	ldr	r6, [pc, #60]	; (8007c74 <sbrk_aligned+0x40>)
 8007c38:	000d      	movs	r5, r1
 8007c3a:	6831      	ldr	r1, [r6, #0]
 8007c3c:	0004      	movs	r4, r0
 8007c3e:	2900      	cmp	r1, #0
 8007c40:	d102      	bne.n	8007c48 <sbrk_aligned+0x14>
 8007c42:	f000 fe6f 	bl	8008924 <_sbrk_r>
 8007c46:	6030      	str	r0, [r6, #0]
 8007c48:	0029      	movs	r1, r5
 8007c4a:	0020      	movs	r0, r4
 8007c4c:	f000 fe6a 	bl	8008924 <_sbrk_r>
 8007c50:	1c43      	adds	r3, r0, #1
 8007c52:	d00a      	beq.n	8007c6a <sbrk_aligned+0x36>
 8007c54:	2303      	movs	r3, #3
 8007c56:	1cc5      	adds	r5, r0, #3
 8007c58:	439d      	bics	r5, r3
 8007c5a:	42a8      	cmp	r0, r5
 8007c5c:	d007      	beq.n	8007c6e <sbrk_aligned+0x3a>
 8007c5e:	1a29      	subs	r1, r5, r0
 8007c60:	0020      	movs	r0, r4
 8007c62:	f000 fe5f 	bl	8008924 <_sbrk_r>
 8007c66:	3001      	adds	r0, #1
 8007c68:	d101      	bne.n	8007c6e <sbrk_aligned+0x3a>
 8007c6a:	2501      	movs	r5, #1
 8007c6c:	426d      	negs	r5, r5
 8007c6e:	0028      	movs	r0, r5
 8007c70:	bd70      	pop	{r4, r5, r6, pc}
 8007c72:	46c0      	nop			; (mov r8, r8)
 8007c74:	2000084c 	.word	0x2000084c

08007c78 <_malloc_r>:
 8007c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c7a:	2203      	movs	r2, #3
 8007c7c:	1ccb      	adds	r3, r1, #3
 8007c7e:	4393      	bics	r3, r2
 8007c80:	3308      	adds	r3, #8
 8007c82:	0006      	movs	r6, r0
 8007c84:	001f      	movs	r7, r3
 8007c86:	2b0c      	cmp	r3, #12
 8007c88:	d238      	bcs.n	8007cfc <_malloc_r+0x84>
 8007c8a:	270c      	movs	r7, #12
 8007c8c:	42b9      	cmp	r1, r7
 8007c8e:	d837      	bhi.n	8007d00 <_malloc_r+0x88>
 8007c90:	0030      	movs	r0, r6
 8007c92:	f000 f873 	bl	8007d7c <__malloc_lock>
 8007c96:	4b38      	ldr	r3, [pc, #224]	; (8007d78 <_malloc_r+0x100>)
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	001c      	movs	r4, r3
 8007c9e:	2c00      	cmp	r4, #0
 8007ca0:	d133      	bne.n	8007d0a <_malloc_r+0x92>
 8007ca2:	0039      	movs	r1, r7
 8007ca4:	0030      	movs	r0, r6
 8007ca6:	f7ff ffc5 	bl	8007c34 <sbrk_aligned>
 8007caa:	0004      	movs	r4, r0
 8007cac:	1c43      	adds	r3, r0, #1
 8007cae:	d15e      	bne.n	8007d6e <_malloc_r+0xf6>
 8007cb0:	9b00      	ldr	r3, [sp, #0]
 8007cb2:	681c      	ldr	r4, [r3, #0]
 8007cb4:	0025      	movs	r5, r4
 8007cb6:	2d00      	cmp	r5, #0
 8007cb8:	d14e      	bne.n	8007d58 <_malloc_r+0xe0>
 8007cba:	2c00      	cmp	r4, #0
 8007cbc:	d051      	beq.n	8007d62 <_malloc_r+0xea>
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	0029      	movs	r1, r5
 8007cc2:	18e3      	adds	r3, r4, r3
 8007cc4:	0030      	movs	r0, r6
 8007cc6:	9301      	str	r3, [sp, #4]
 8007cc8:	f000 fe2c 	bl	8008924 <_sbrk_r>
 8007ccc:	9b01      	ldr	r3, [sp, #4]
 8007cce:	4283      	cmp	r3, r0
 8007cd0:	d147      	bne.n	8007d62 <_malloc_r+0xea>
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	0030      	movs	r0, r6
 8007cd6:	1aff      	subs	r7, r7, r3
 8007cd8:	0039      	movs	r1, r7
 8007cda:	f7ff ffab 	bl	8007c34 <sbrk_aligned>
 8007cde:	3001      	adds	r0, #1
 8007ce0:	d03f      	beq.n	8007d62 <_malloc_r+0xea>
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	19db      	adds	r3, r3, r7
 8007ce6:	6023      	str	r3, [r4, #0]
 8007ce8:	9b00      	ldr	r3, [sp, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d040      	beq.n	8007d72 <_malloc_r+0xfa>
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	42a2      	cmp	r2, r4
 8007cf4:	d133      	bne.n	8007d5e <_malloc_r+0xe6>
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	605a      	str	r2, [r3, #4]
 8007cfa:	e014      	b.n	8007d26 <_malloc_r+0xae>
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	dac5      	bge.n	8007c8c <_malloc_r+0x14>
 8007d00:	230c      	movs	r3, #12
 8007d02:	2500      	movs	r5, #0
 8007d04:	6033      	str	r3, [r6, #0]
 8007d06:	0028      	movs	r0, r5
 8007d08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d0a:	6821      	ldr	r1, [r4, #0]
 8007d0c:	1bc9      	subs	r1, r1, r7
 8007d0e:	d420      	bmi.n	8007d52 <_malloc_r+0xda>
 8007d10:	290b      	cmp	r1, #11
 8007d12:	d918      	bls.n	8007d46 <_malloc_r+0xce>
 8007d14:	19e2      	adds	r2, r4, r7
 8007d16:	6027      	str	r7, [r4, #0]
 8007d18:	42a3      	cmp	r3, r4
 8007d1a:	d112      	bne.n	8007d42 <_malloc_r+0xca>
 8007d1c:	9b00      	ldr	r3, [sp, #0]
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	6863      	ldr	r3, [r4, #4]
 8007d22:	6011      	str	r1, [r2, #0]
 8007d24:	6053      	str	r3, [r2, #4]
 8007d26:	0030      	movs	r0, r6
 8007d28:	0025      	movs	r5, r4
 8007d2a:	f000 f82f 	bl	8007d8c <__malloc_unlock>
 8007d2e:	2207      	movs	r2, #7
 8007d30:	350b      	adds	r5, #11
 8007d32:	1d23      	adds	r3, r4, #4
 8007d34:	4395      	bics	r5, r2
 8007d36:	1aea      	subs	r2, r5, r3
 8007d38:	429d      	cmp	r5, r3
 8007d3a:	d0e4      	beq.n	8007d06 <_malloc_r+0x8e>
 8007d3c:	1b5b      	subs	r3, r3, r5
 8007d3e:	50a3      	str	r3, [r4, r2]
 8007d40:	e7e1      	b.n	8007d06 <_malloc_r+0x8e>
 8007d42:	605a      	str	r2, [r3, #4]
 8007d44:	e7ec      	b.n	8007d20 <_malloc_r+0xa8>
 8007d46:	6862      	ldr	r2, [r4, #4]
 8007d48:	42a3      	cmp	r3, r4
 8007d4a:	d1d5      	bne.n	8007cf8 <_malloc_r+0x80>
 8007d4c:	9b00      	ldr	r3, [sp, #0]
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	e7e9      	b.n	8007d26 <_malloc_r+0xae>
 8007d52:	0023      	movs	r3, r4
 8007d54:	6864      	ldr	r4, [r4, #4]
 8007d56:	e7a2      	b.n	8007c9e <_malloc_r+0x26>
 8007d58:	002c      	movs	r4, r5
 8007d5a:	686d      	ldr	r5, [r5, #4]
 8007d5c:	e7ab      	b.n	8007cb6 <_malloc_r+0x3e>
 8007d5e:	0013      	movs	r3, r2
 8007d60:	e7c4      	b.n	8007cec <_malloc_r+0x74>
 8007d62:	230c      	movs	r3, #12
 8007d64:	0030      	movs	r0, r6
 8007d66:	6033      	str	r3, [r6, #0]
 8007d68:	f000 f810 	bl	8007d8c <__malloc_unlock>
 8007d6c:	e7cb      	b.n	8007d06 <_malloc_r+0x8e>
 8007d6e:	6027      	str	r7, [r4, #0]
 8007d70:	e7d9      	b.n	8007d26 <_malloc_r+0xae>
 8007d72:	605b      	str	r3, [r3, #4]
 8007d74:	deff      	udf	#255	; 0xff
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	20000848 	.word	0x20000848

08007d7c <__malloc_lock>:
 8007d7c:	b510      	push	{r4, lr}
 8007d7e:	4802      	ldr	r0, [pc, #8]	; (8007d88 <__malloc_lock+0xc>)
 8007d80:	f7ff f859 	bl	8006e36 <__retarget_lock_acquire_recursive>
 8007d84:	bd10      	pop	{r4, pc}
 8007d86:	46c0      	nop			; (mov r8, r8)
 8007d88:	20000844 	.word	0x20000844

08007d8c <__malloc_unlock>:
 8007d8c:	b510      	push	{r4, lr}
 8007d8e:	4802      	ldr	r0, [pc, #8]	; (8007d98 <__malloc_unlock+0xc>)
 8007d90:	f7ff f852 	bl	8006e38 <__retarget_lock_release_recursive>
 8007d94:	bd10      	pop	{r4, pc}
 8007d96:	46c0      	nop			; (mov r8, r8)
 8007d98:	20000844 	.word	0x20000844

08007d9c <_Balloc>:
 8007d9c:	b570      	push	{r4, r5, r6, lr}
 8007d9e:	69c5      	ldr	r5, [r0, #28]
 8007da0:	0006      	movs	r6, r0
 8007da2:	000c      	movs	r4, r1
 8007da4:	2d00      	cmp	r5, #0
 8007da6:	d10e      	bne.n	8007dc6 <_Balloc+0x2a>
 8007da8:	2010      	movs	r0, #16
 8007daa:	f7ff ff39 	bl	8007c20 <malloc>
 8007dae:	1e02      	subs	r2, r0, #0
 8007db0:	61f0      	str	r0, [r6, #28]
 8007db2:	d104      	bne.n	8007dbe <_Balloc+0x22>
 8007db4:	216b      	movs	r1, #107	; 0x6b
 8007db6:	4b19      	ldr	r3, [pc, #100]	; (8007e1c <_Balloc+0x80>)
 8007db8:	4819      	ldr	r0, [pc, #100]	; (8007e20 <_Balloc+0x84>)
 8007dba:	f000 fdcf 	bl	800895c <__assert_func>
 8007dbe:	6045      	str	r5, [r0, #4]
 8007dc0:	6085      	str	r5, [r0, #8]
 8007dc2:	6005      	str	r5, [r0, #0]
 8007dc4:	60c5      	str	r5, [r0, #12]
 8007dc6:	69f5      	ldr	r5, [r6, #28]
 8007dc8:	68eb      	ldr	r3, [r5, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d013      	beq.n	8007df6 <_Balloc+0x5a>
 8007dce:	69f3      	ldr	r3, [r6, #28]
 8007dd0:	00a2      	lsls	r2, r4, #2
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	189b      	adds	r3, r3, r2
 8007dd6:	6818      	ldr	r0, [r3, #0]
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d118      	bne.n	8007e0e <_Balloc+0x72>
 8007ddc:	2101      	movs	r1, #1
 8007dde:	000d      	movs	r5, r1
 8007de0:	40a5      	lsls	r5, r4
 8007de2:	1d6a      	adds	r2, r5, #5
 8007de4:	0030      	movs	r0, r6
 8007de6:	0092      	lsls	r2, r2, #2
 8007de8:	f000 fdd6 	bl	8008998 <_calloc_r>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	d00c      	beq.n	8007e0a <_Balloc+0x6e>
 8007df0:	6044      	str	r4, [r0, #4]
 8007df2:	6085      	str	r5, [r0, #8]
 8007df4:	e00d      	b.n	8007e12 <_Balloc+0x76>
 8007df6:	2221      	movs	r2, #33	; 0x21
 8007df8:	2104      	movs	r1, #4
 8007dfa:	0030      	movs	r0, r6
 8007dfc:	f000 fdcc 	bl	8008998 <_calloc_r>
 8007e00:	69f3      	ldr	r3, [r6, #28]
 8007e02:	60e8      	str	r0, [r5, #12]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1e1      	bne.n	8007dce <_Balloc+0x32>
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	bd70      	pop	{r4, r5, r6, pc}
 8007e0e:	6802      	ldr	r2, [r0, #0]
 8007e10:	601a      	str	r2, [r3, #0]
 8007e12:	2300      	movs	r3, #0
 8007e14:	6103      	str	r3, [r0, #16]
 8007e16:	60c3      	str	r3, [r0, #12]
 8007e18:	e7f8      	b.n	8007e0c <_Balloc+0x70>
 8007e1a:	46c0      	nop			; (mov r8, r8)
 8007e1c:	08009209 	.word	0x08009209
 8007e20:	08009289 	.word	0x08009289

08007e24 <_Bfree>:
 8007e24:	b570      	push	{r4, r5, r6, lr}
 8007e26:	69c6      	ldr	r6, [r0, #28]
 8007e28:	0005      	movs	r5, r0
 8007e2a:	000c      	movs	r4, r1
 8007e2c:	2e00      	cmp	r6, #0
 8007e2e:	d10e      	bne.n	8007e4e <_Bfree+0x2a>
 8007e30:	2010      	movs	r0, #16
 8007e32:	f7ff fef5 	bl	8007c20 <malloc>
 8007e36:	1e02      	subs	r2, r0, #0
 8007e38:	61e8      	str	r0, [r5, #28]
 8007e3a:	d104      	bne.n	8007e46 <_Bfree+0x22>
 8007e3c:	218f      	movs	r1, #143	; 0x8f
 8007e3e:	4b09      	ldr	r3, [pc, #36]	; (8007e64 <_Bfree+0x40>)
 8007e40:	4809      	ldr	r0, [pc, #36]	; (8007e68 <_Bfree+0x44>)
 8007e42:	f000 fd8b 	bl	800895c <__assert_func>
 8007e46:	6046      	str	r6, [r0, #4]
 8007e48:	6086      	str	r6, [r0, #8]
 8007e4a:	6006      	str	r6, [r0, #0]
 8007e4c:	60c6      	str	r6, [r0, #12]
 8007e4e:	2c00      	cmp	r4, #0
 8007e50:	d007      	beq.n	8007e62 <_Bfree+0x3e>
 8007e52:	69eb      	ldr	r3, [r5, #28]
 8007e54:	6862      	ldr	r2, [r4, #4]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	0092      	lsls	r2, r2, #2
 8007e5a:	189b      	adds	r3, r3, r2
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	6022      	str	r2, [r4, #0]
 8007e60:	601c      	str	r4, [r3, #0]
 8007e62:	bd70      	pop	{r4, r5, r6, pc}
 8007e64:	08009209 	.word	0x08009209
 8007e68:	08009289 	.word	0x08009289

08007e6c <__multadd>:
 8007e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e6e:	000e      	movs	r6, r1
 8007e70:	9001      	str	r0, [sp, #4]
 8007e72:	000c      	movs	r4, r1
 8007e74:	001d      	movs	r5, r3
 8007e76:	2000      	movs	r0, #0
 8007e78:	690f      	ldr	r7, [r1, #16]
 8007e7a:	3614      	adds	r6, #20
 8007e7c:	6833      	ldr	r3, [r6, #0]
 8007e7e:	3001      	adds	r0, #1
 8007e80:	b299      	uxth	r1, r3
 8007e82:	4351      	muls	r1, r2
 8007e84:	0c1b      	lsrs	r3, r3, #16
 8007e86:	4353      	muls	r3, r2
 8007e88:	1949      	adds	r1, r1, r5
 8007e8a:	0c0d      	lsrs	r5, r1, #16
 8007e8c:	195b      	adds	r3, r3, r5
 8007e8e:	0c1d      	lsrs	r5, r3, #16
 8007e90:	b289      	uxth	r1, r1
 8007e92:	041b      	lsls	r3, r3, #16
 8007e94:	185b      	adds	r3, r3, r1
 8007e96:	c608      	stmia	r6!, {r3}
 8007e98:	4287      	cmp	r7, r0
 8007e9a:	dcef      	bgt.n	8007e7c <__multadd+0x10>
 8007e9c:	2d00      	cmp	r5, #0
 8007e9e:	d022      	beq.n	8007ee6 <__multadd+0x7a>
 8007ea0:	68a3      	ldr	r3, [r4, #8]
 8007ea2:	42bb      	cmp	r3, r7
 8007ea4:	dc19      	bgt.n	8007eda <__multadd+0x6e>
 8007ea6:	6861      	ldr	r1, [r4, #4]
 8007ea8:	9801      	ldr	r0, [sp, #4]
 8007eaa:	3101      	adds	r1, #1
 8007eac:	f7ff ff76 	bl	8007d9c <_Balloc>
 8007eb0:	1e06      	subs	r6, r0, #0
 8007eb2:	d105      	bne.n	8007ec0 <__multadd+0x54>
 8007eb4:	0032      	movs	r2, r6
 8007eb6:	21ba      	movs	r1, #186	; 0xba
 8007eb8:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <__multadd+0x80>)
 8007eba:	480d      	ldr	r0, [pc, #52]	; (8007ef0 <__multadd+0x84>)
 8007ebc:	f000 fd4e 	bl	800895c <__assert_func>
 8007ec0:	0021      	movs	r1, r4
 8007ec2:	6922      	ldr	r2, [r4, #16]
 8007ec4:	310c      	adds	r1, #12
 8007ec6:	3202      	adds	r2, #2
 8007ec8:	0092      	lsls	r2, r2, #2
 8007eca:	300c      	adds	r0, #12
 8007ecc:	f000 fd3c 	bl	8008948 <memcpy>
 8007ed0:	0021      	movs	r1, r4
 8007ed2:	9801      	ldr	r0, [sp, #4]
 8007ed4:	f7ff ffa6 	bl	8007e24 <_Bfree>
 8007ed8:	0034      	movs	r4, r6
 8007eda:	1d3b      	adds	r3, r7, #4
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	18e3      	adds	r3, r4, r3
 8007ee0:	605d      	str	r5, [r3, #4]
 8007ee2:	1c7b      	adds	r3, r7, #1
 8007ee4:	6123      	str	r3, [r4, #16]
 8007ee6:	0020      	movs	r0, r4
 8007ee8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	08009278 	.word	0x08009278
 8007ef0:	08009289 	.word	0x08009289

08007ef4 <__hi0bits>:
 8007ef4:	0003      	movs	r3, r0
 8007ef6:	0c02      	lsrs	r2, r0, #16
 8007ef8:	2000      	movs	r0, #0
 8007efa:	4282      	cmp	r2, r0
 8007efc:	d101      	bne.n	8007f02 <__hi0bits+0xe>
 8007efe:	041b      	lsls	r3, r3, #16
 8007f00:	3010      	adds	r0, #16
 8007f02:	0e1a      	lsrs	r2, r3, #24
 8007f04:	d101      	bne.n	8007f0a <__hi0bits+0x16>
 8007f06:	3008      	adds	r0, #8
 8007f08:	021b      	lsls	r3, r3, #8
 8007f0a:	0f1a      	lsrs	r2, r3, #28
 8007f0c:	d101      	bne.n	8007f12 <__hi0bits+0x1e>
 8007f0e:	3004      	adds	r0, #4
 8007f10:	011b      	lsls	r3, r3, #4
 8007f12:	0f9a      	lsrs	r2, r3, #30
 8007f14:	d101      	bne.n	8007f1a <__hi0bits+0x26>
 8007f16:	3002      	adds	r0, #2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	db03      	blt.n	8007f26 <__hi0bits+0x32>
 8007f1e:	3001      	adds	r0, #1
 8007f20:	005b      	lsls	r3, r3, #1
 8007f22:	d400      	bmi.n	8007f26 <__hi0bits+0x32>
 8007f24:	2020      	movs	r0, #32
 8007f26:	4770      	bx	lr

08007f28 <__lo0bits>:
 8007f28:	6803      	ldr	r3, [r0, #0]
 8007f2a:	0001      	movs	r1, r0
 8007f2c:	2207      	movs	r2, #7
 8007f2e:	0018      	movs	r0, r3
 8007f30:	4010      	ands	r0, r2
 8007f32:	4213      	tst	r3, r2
 8007f34:	d00d      	beq.n	8007f52 <__lo0bits+0x2a>
 8007f36:	3a06      	subs	r2, #6
 8007f38:	2000      	movs	r0, #0
 8007f3a:	4213      	tst	r3, r2
 8007f3c:	d105      	bne.n	8007f4a <__lo0bits+0x22>
 8007f3e:	3002      	adds	r0, #2
 8007f40:	4203      	tst	r3, r0
 8007f42:	d003      	beq.n	8007f4c <__lo0bits+0x24>
 8007f44:	40d3      	lsrs	r3, r2
 8007f46:	0010      	movs	r0, r2
 8007f48:	600b      	str	r3, [r1, #0]
 8007f4a:	4770      	bx	lr
 8007f4c:	089b      	lsrs	r3, r3, #2
 8007f4e:	600b      	str	r3, [r1, #0]
 8007f50:	e7fb      	b.n	8007f4a <__lo0bits+0x22>
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	2a00      	cmp	r2, #0
 8007f56:	d101      	bne.n	8007f5c <__lo0bits+0x34>
 8007f58:	2010      	movs	r0, #16
 8007f5a:	0c1b      	lsrs	r3, r3, #16
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	2a00      	cmp	r2, #0
 8007f60:	d101      	bne.n	8007f66 <__lo0bits+0x3e>
 8007f62:	3008      	adds	r0, #8
 8007f64:	0a1b      	lsrs	r3, r3, #8
 8007f66:	071a      	lsls	r2, r3, #28
 8007f68:	d101      	bne.n	8007f6e <__lo0bits+0x46>
 8007f6a:	3004      	adds	r0, #4
 8007f6c:	091b      	lsrs	r3, r3, #4
 8007f6e:	079a      	lsls	r2, r3, #30
 8007f70:	d101      	bne.n	8007f76 <__lo0bits+0x4e>
 8007f72:	3002      	adds	r0, #2
 8007f74:	089b      	lsrs	r3, r3, #2
 8007f76:	07da      	lsls	r2, r3, #31
 8007f78:	d4e9      	bmi.n	8007f4e <__lo0bits+0x26>
 8007f7a:	3001      	adds	r0, #1
 8007f7c:	085b      	lsrs	r3, r3, #1
 8007f7e:	d1e6      	bne.n	8007f4e <__lo0bits+0x26>
 8007f80:	2020      	movs	r0, #32
 8007f82:	e7e2      	b.n	8007f4a <__lo0bits+0x22>

08007f84 <__i2b>:
 8007f84:	b510      	push	{r4, lr}
 8007f86:	000c      	movs	r4, r1
 8007f88:	2101      	movs	r1, #1
 8007f8a:	f7ff ff07 	bl	8007d9c <_Balloc>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d107      	bne.n	8007fa2 <__i2b+0x1e>
 8007f92:	2146      	movs	r1, #70	; 0x46
 8007f94:	4c05      	ldr	r4, [pc, #20]	; (8007fac <__i2b+0x28>)
 8007f96:	0002      	movs	r2, r0
 8007f98:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <__i2b+0x2c>)
 8007f9a:	0020      	movs	r0, r4
 8007f9c:	31ff      	adds	r1, #255	; 0xff
 8007f9e:	f000 fcdd 	bl	800895c <__assert_func>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	6144      	str	r4, [r0, #20]
 8007fa6:	6103      	str	r3, [r0, #16]
 8007fa8:	bd10      	pop	{r4, pc}
 8007faa:	46c0      	nop			; (mov r8, r8)
 8007fac:	08009289 	.word	0x08009289
 8007fb0:	08009278 	.word	0x08009278

08007fb4 <__multiply>:
 8007fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fb6:	0015      	movs	r5, r2
 8007fb8:	690a      	ldr	r2, [r1, #16]
 8007fba:	692b      	ldr	r3, [r5, #16]
 8007fbc:	000c      	movs	r4, r1
 8007fbe:	b08b      	sub	sp, #44	; 0x2c
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	da01      	bge.n	8007fc8 <__multiply+0x14>
 8007fc4:	002c      	movs	r4, r5
 8007fc6:	000d      	movs	r5, r1
 8007fc8:	6927      	ldr	r7, [r4, #16]
 8007fca:	692e      	ldr	r6, [r5, #16]
 8007fcc:	6861      	ldr	r1, [r4, #4]
 8007fce:	19bb      	adds	r3, r7, r6
 8007fd0:	9303      	str	r3, [sp, #12]
 8007fd2:	68a3      	ldr	r3, [r4, #8]
 8007fd4:	19ba      	adds	r2, r7, r6
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	da00      	bge.n	8007fdc <__multiply+0x28>
 8007fda:	3101      	adds	r1, #1
 8007fdc:	f7ff fede 	bl	8007d9c <_Balloc>
 8007fe0:	9002      	str	r0, [sp, #8]
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d106      	bne.n	8007ff4 <__multiply+0x40>
 8007fe6:	21b1      	movs	r1, #177	; 0xb1
 8007fe8:	4b48      	ldr	r3, [pc, #288]	; (800810c <__multiply+0x158>)
 8007fea:	4849      	ldr	r0, [pc, #292]	; (8008110 <__multiply+0x15c>)
 8007fec:	9a02      	ldr	r2, [sp, #8]
 8007fee:	0049      	lsls	r1, r1, #1
 8007ff0:	f000 fcb4 	bl	800895c <__assert_func>
 8007ff4:	9b02      	ldr	r3, [sp, #8]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	3314      	adds	r3, #20
 8007ffa:	469c      	mov	ip, r3
 8007ffc:	19bb      	adds	r3, r7, r6
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4463      	add	r3, ip
 8008002:	9304      	str	r3, [sp, #16]
 8008004:	4663      	mov	r3, ip
 8008006:	9904      	ldr	r1, [sp, #16]
 8008008:	428b      	cmp	r3, r1
 800800a:	d32a      	bcc.n	8008062 <__multiply+0xae>
 800800c:	0023      	movs	r3, r4
 800800e:	00bf      	lsls	r7, r7, #2
 8008010:	3314      	adds	r3, #20
 8008012:	3514      	adds	r5, #20
 8008014:	9308      	str	r3, [sp, #32]
 8008016:	00b6      	lsls	r6, r6, #2
 8008018:	19db      	adds	r3, r3, r7
 800801a:	9305      	str	r3, [sp, #20]
 800801c:	19ab      	adds	r3, r5, r6
 800801e:	9309      	str	r3, [sp, #36]	; 0x24
 8008020:	2304      	movs	r3, #4
 8008022:	9306      	str	r3, [sp, #24]
 8008024:	0023      	movs	r3, r4
 8008026:	9a05      	ldr	r2, [sp, #20]
 8008028:	3315      	adds	r3, #21
 800802a:	9501      	str	r5, [sp, #4]
 800802c:	429a      	cmp	r2, r3
 800802e:	d305      	bcc.n	800803c <__multiply+0x88>
 8008030:	1b13      	subs	r3, r2, r4
 8008032:	3b15      	subs	r3, #21
 8008034:	089b      	lsrs	r3, r3, #2
 8008036:	3301      	adds	r3, #1
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	9306      	str	r3, [sp, #24]
 800803c:	9b01      	ldr	r3, [sp, #4]
 800803e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008040:	4293      	cmp	r3, r2
 8008042:	d310      	bcc.n	8008066 <__multiply+0xb2>
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	2b00      	cmp	r3, #0
 8008048:	dd05      	ble.n	8008056 <__multiply+0xa2>
 800804a:	9b04      	ldr	r3, [sp, #16]
 800804c:	3b04      	subs	r3, #4
 800804e:	9304      	str	r3, [sp, #16]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d056      	beq.n	8008104 <__multiply+0x150>
 8008056:	9b02      	ldr	r3, [sp, #8]
 8008058:	9a03      	ldr	r2, [sp, #12]
 800805a:	0018      	movs	r0, r3
 800805c:	611a      	str	r2, [r3, #16]
 800805e:	b00b      	add	sp, #44	; 0x2c
 8008060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008062:	c304      	stmia	r3!, {r2}
 8008064:	e7cf      	b.n	8008006 <__multiply+0x52>
 8008066:	9b01      	ldr	r3, [sp, #4]
 8008068:	6818      	ldr	r0, [r3, #0]
 800806a:	b280      	uxth	r0, r0
 800806c:	2800      	cmp	r0, #0
 800806e:	d01e      	beq.n	80080ae <__multiply+0xfa>
 8008070:	4667      	mov	r7, ip
 8008072:	2500      	movs	r5, #0
 8008074:	9e08      	ldr	r6, [sp, #32]
 8008076:	ce02      	ldmia	r6!, {r1}
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	9307      	str	r3, [sp, #28]
 800807c:	b28b      	uxth	r3, r1
 800807e:	4343      	muls	r3, r0
 8008080:	001a      	movs	r2, r3
 8008082:	466b      	mov	r3, sp
 8008084:	8b9b      	ldrh	r3, [r3, #28]
 8008086:	18d3      	adds	r3, r2, r3
 8008088:	195b      	adds	r3, r3, r5
 800808a:	0c0d      	lsrs	r5, r1, #16
 800808c:	4345      	muls	r5, r0
 800808e:	9a07      	ldr	r2, [sp, #28]
 8008090:	0c11      	lsrs	r1, r2, #16
 8008092:	1869      	adds	r1, r5, r1
 8008094:	0c1a      	lsrs	r2, r3, #16
 8008096:	188a      	adds	r2, r1, r2
 8008098:	b29b      	uxth	r3, r3
 800809a:	0c15      	lsrs	r5, r2, #16
 800809c:	0412      	lsls	r2, r2, #16
 800809e:	431a      	orrs	r2, r3
 80080a0:	9b05      	ldr	r3, [sp, #20]
 80080a2:	c704      	stmia	r7!, {r2}
 80080a4:	42b3      	cmp	r3, r6
 80080a6:	d8e6      	bhi.n	8008076 <__multiply+0xc2>
 80080a8:	4663      	mov	r3, ip
 80080aa:	9a06      	ldr	r2, [sp, #24]
 80080ac:	509d      	str	r5, [r3, r2]
 80080ae:	9b01      	ldr	r3, [sp, #4]
 80080b0:	6818      	ldr	r0, [r3, #0]
 80080b2:	0c00      	lsrs	r0, r0, #16
 80080b4:	d020      	beq.n	80080f8 <__multiply+0x144>
 80080b6:	4663      	mov	r3, ip
 80080b8:	0025      	movs	r5, r4
 80080ba:	4661      	mov	r1, ip
 80080bc:	2700      	movs	r7, #0
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3514      	adds	r5, #20
 80080c2:	682a      	ldr	r2, [r5, #0]
 80080c4:	680e      	ldr	r6, [r1, #0]
 80080c6:	b292      	uxth	r2, r2
 80080c8:	4342      	muls	r2, r0
 80080ca:	0c36      	lsrs	r6, r6, #16
 80080cc:	1992      	adds	r2, r2, r6
 80080ce:	19d2      	adds	r2, r2, r7
 80080d0:	0416      	lsls	r6, r2, #16
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	431e      	orrs	r6, r3
 80080d6:	600e      	str	r6, [r1, #0]
 80080d8:	cd40      	ldmia	r5!, {r6}
 80080da:	684b      	ldr	r3, [r1, #4]
 80080dc:	0c36      	lsrs	r6, r6, #16
 80080de:	4346      	muls	r6, r0
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	0c12      	lsrs	r2, r2, #16
 80080e4:	18f3      	adds	r3, r6, r3
 80080e6:	189b      	adds	r3, r3, r2
 80080e8:	9a05      	ldr	r2, [sp, #20]
 80080ea:	0c1f      	lsrs	r7, r3, #16
 80080ec:	3104      	adds	r1, #4
 80080ee:	42aa      	cmp	r2, r5
 80080f0:	d8e7      	bhi.n	80080c2 <__multiply+0x10e>
 80080f2:	4662      	mov	r2, ip
 80080f4:	9906      	ldr	r1, [sp, #24]
 80080f6:	5053      	str	r3, [r2, r1]
 80080f8:	9b01      	ldr	r3, [sp, #4]
 80080fa:	3304      	adds	r3, #4
 80080fc:	9301      	str	r3, [sp, #4]
 80080fe:	2304      	movs	r3, #4
 8008100:	449c      	add	ip, r3
 8008102:	e79b      	b.n	800803c <__multiply+0x88>
 8008104:	9b03      	ldr	r3, [sp, #12]
 8008106:	3b01      	subs	r3, #1
 8008108:	9303      	str	r3, [sp, #12]
 800810a:	e79b      	b.n	8008044 <__multiply+0x90>
 800810c:	08009278 	.word	0x08009278
 8008110:	08009289 	.word	0x08009289

08008114 <__pow5mult>:
 8008114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008116:	2303      	movs	r3, #3
 8008118:	0015      	movs	r5, r2
 800811a:	0007      	movs	r7, r0
 800811c:	000e      	movs	r6, r1
 800811e:	401a      	ands	r2, r3
 8008120:	421d      	tst	r5, r3
 8008122:	d008      	beq.n	8008136 <__pow5mult+0x22>
 8008124:	4925      	ldr	r1, [pc, #148]	; (80081bc <__pow5mult+0xa8>)
 8008126:	3a01      	subs	r2, #1
 8008128:	0092      	lsls	r2, r2, #2
 800812a:	5852      	ldr	r2, [r2, r1]
 800812c:	2300      	movs	r3, #0
 800812e:	0031      	movs	r1, r6
 8008130:	f7ff fe9c 	bl	8007e6c <__multadd>
 8008134:	0006      	movs	r6, r0
 8008136:	10ad      	asrs	r5, r5, #2
 8008138:	d03d      	beq.n	80081b6 <__pow5mult+0xa2>
 800813a:	69fc      	ldr	r4, [r7, #28]
 800813c:	2c00      	cmp	r4, #0
 800813e:	d10f      	bne.n	8008160 <__pow5mult+0x4c>
 8008140:	2010      	movs	r0, #16
 8008142:	f7ff fd6d 	bl	8007c20 <malloc>
 8008146:	1e02      	subs	r2, r0, #0
 8008148:	61f8      	str	r0, [r7, #28]
 800814a:	d105      	bne.n	8008158 <__pow5mult+0x44>
 800814c:	21b4      	movs	r1, #180	; 0xb4
 800814e:	4b1c      	ldr	r3, [pc, #112]	; (80081c0 <__pow5mult+0xac>)
 8008150:	481c      	ldr	r0, [pc, #112]	; (80081c4 <__pow5mult+0xb0>)
 8008152:	31ff      	adds	r1, #255	; 0xff
 8008154:	f000 fc02 	bl	800895c <__assert_func>
 8008158:	6044      	str	r4, [r0, #4]
 800815a:	6084      	str	r4, [r0, #8]
 800815c:	6004      	str	r4, [r0, #0]
 800815e:	60c4      	str	r4, [r0, #12]
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	689c      	ldr	r4, [r3, #8]
 8008164:	9301      	str	r3, [sp, #4]
 8008166:	2c00      	cmp	r4, #0
 8008168:	d108      	bne.n	800817c <__pow5mult+0x68>
 800816a:	0038      	movs	r0, r7
 800816c:	4916      	ldr	r1, [pc, #88]	; (80081c8 <__pow5mult+0xb4>)
 800816e:	f7ff ff09 	bl	8007f84 <__i2b>
 8008172:	9b01      	ldr	r3, [sp, #4]
 8008174:	0004      	movs	r4, r0
 8008176:	6098      	str	r0, [r3, #8]
 8008178:	2300      	movs	r3, #0
 800817a:	6003      	str	r3, [r0, #0]
 800817c:	2301      	movs	r3, #1
 800817e:	421d      	tst	r5, r3
 8008180:	d00a      	beq.n	8008198 <__pow5mult+0x84>
 8008182:	0031      	movs	r1, r6
 8008184:	0022      	movs	r2, r4
 8008186:	0038      	movs	r0, r7
 8008188:	f7ff ff14 	bl	8007fb4 <__multiply>
 800818c:	0031      	movs	r1, r6
 800818e:	9001      	str	r0, [sp, #4]
 8008190:	0038      	movs	r0, r7
 8008192:	f7ff fe47 	bl	8007e24 <_Bfree>
 8008196:	9e01      	ldr	r6, [sp, #4]
 8008198:	106d      	asrs	r5, r5, #1
 800819a:	d00c      	beq.n	80081b6 <__pow5mult+0xa2>
 800819c:	6820      	ldr	r0, [r4, #0]
 800819e:	2800      	cmp	r0, #0
 80081a0:	d107      	bne.n	80081b2 <__pow5mult+0x9e>
 80081a2:	0022      	movs	r2, r4
 80081a4:	0021      	movs	r1, r4
 80081a6:	0038      	movs	r0, r7
 80081a8:	f7ff ff04 	bl	8007fb4 <__multiply>
 80081ac:	2300      	movs	r3, #0
 80081ae:	6020      	str	r0, [r4, #0]
 80081b0:	6003      	str	r3, [r0, #0]
 80081b2:	0004      	movs	r4, r0
 80081b4:	e7e2      	b.n	800817c <__pow5mult+0x68>
 80081b6:	0030      	movs	r0, r6
 80081b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081ba:	46c0      	nop			; (mov r8, r8)
 80081bc:	080093d8 	.word	0x080093d8
 80081c0:	08009209 	.word	0x08009209
 80081c4:	08009289 	.word	0x08009289
 80081c8:	00000271 	.word	0x00000271

080081cc <__lshift>:
 80081cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ce:	000c      	movs	r4, r1
 80081d0:	0017      	movs	r7, r2
 80081d2:	6923      	ldr	r3, [r4, #16]
 80081d4:	1155      	asrs	r5, r2, #5
 80081d6:	b087      	sub	sp, #28
 80081d8:	18eb      	adds	r3, r5, r3
 80081da:	9302      	str	r3, [sp, #8]
 80081dc:	3301      	adds	r3, #1
 80081de:	9301      	str	r3, [sp, #4]
 80081e0:	6849      	ldr	r1, [r1, #4]
 80081e2:	68a3      	ldr	r3, [r4, #8]
 80081e4:	9004      	str	r0, [sp, #16]
 80081e6:	9a01      	ldr	r2, [sp, #4]
 80081e8:	4293      	cmp	r3, r2
 80081ea:	db10      	blt.n	800820e <__lshift+0x42>
 80081ec:	9804      	ldr	r0, [sp, #16]
 80081ee:	f7ff fdd5 	bl	8007d9c <_Balloc>
 80081f2:	2300      	movs	r3, #0
 80081f4:	0002      	movs	r2, r0
 80081f6:	0006      	movs	r6, r0
 80081f8:	0019      	movs	r1, r3
 80081fa:	3214      	adds	r2, #20
 80081fc:	4298      	cmp	r0, r3
 80081fe:	d10c      	bne.n	800821a <__lshift+0x4e>
 8008200:	31df      	adds	r1, #223	; 0xdf
 8008202:	0032      	movs	r2, r6
 8008204:	4b26      	ldr	r3, [pc, #152]	; (80082a0 <__lshift+0xd4>)
 8008206:	4827      	ldr	r0, [pc, #156]	; (80082a4 <__lshift+0xd8>)
 8008208:	31ff      	adds	r1, #255	; 0xff
 800820a:	f000 fba7 	bl	800895c <__assert_func>
 800820e:	3101      	adds	r1, #1
 8008210:	005b      	lsls	r3, r3, #1
 8008212:	e7e8      	b.n	80081e6 <__lshift+0x1a>
 8008214:	0098      	lsls	r0, r3, #2
 8008216:	5011      	str	r1, [r2, r0]
 8008218:	3301      	adds	r3, #1
 800821a:	42ab      	cmp	r3, r5
 800821c:	dbfa      	blt.n	8008214 <__lshift+0x48>
 800821e:	43eb      	mvns	r3, r5
 8008220:	17db      	asrs	r3, r3, #31
 8008222:	401d      	ands	r5, r3
 8008224:	211f      	movs	r1, #31
 8008226:	0023      	movs	r3, r4
 8008228:	0038      	movs	r0, r7
 800822a:	00ad      	lsls	r5, r5, #2
 800822c:	1955      	adds	r5, r2, r5
 800822e:	6922      	ldr	r2, [r4, #16]
 8008230:	3314      	adds	r3, #20
 8008232:	0092      	lsls	r2, r2, #2
 8008234:	4008      	ands	r0, r1
 8008236:	4684      	mov	ip, r0
 8008238:	189a      	adds	r2, r3, r2
 800823a:	420f      	tst	r7, r1
 800823c:	d02a      	beq.n	8008294 <__lshift+0xc8>
 800823e:	3101      	adds	r1, #1
 8008240:	1a09      	subs	r1, r1, r0
 8008242:	9105      	str	r1, [sp, #20]
 8008244:	2100      	movs	r1, #0
 8008246:	9503      	str	r5, [sp, #12]
 8008248:	4667      	mov	r7, ip
 800824a:	6818      	ldr	r0, [r3, #0]
 800824c:	40b8      	lsls	r0, r7
 800824e:	4308      	orrs	r0, r1
 8008250:	9903      	ldr	r1, [sp, #12]
 8008252:	c101      	stmia	r1!, {r0}
 8008254:	9103      	str	r1, [sp, #12]
 8008256:	9805      	ldr	r0, [sp, #20]
 8008258:	cb02      	ldmia	r3!, {r1}
 800825a:	40c1      	lsrs	r1, r0
 800825c:	429a      	cmp	r2, r3
 800825e:	d8f3      	bhi.n	8008248 <__lshift+0x7c>
 8008260:	0020      	movs	r0, r4
 8008262:	3015      	adds	r0, #21
 8008264:	2304      	movs	r3, #4
 8008266:	4282      	cmp	r2, r0
 8008268:	d304      	bcc.n	8008274 <__lshift+0xa8>
 800826a:	1b13      	subs	r3, r2, r4
 800826c:	3b15      	subs	r3, #21
 800826e:	089b      	lsrs	r3, r3, #2
 8008270:	3301      	adds	r3, #1
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	50e9      	str	r1, [r5, r3]
 8008276:	2900      	cmp	r1, #0
 8008278:	d002      	beq.n	8008280 <__lshift+0xb4>
 800827a:	9b02      	ldr	r3, [sp, #8]
 800827c:	3302      	adds	r3, #2
 800827e:	9301      	str	r3, [sp, #4]
 8008280:	9b01      	ldr	r3, [sp, #4]
 8008282:	9804      	ldr	r0, [sp, #16]
 8008284:	3b01      	subs	r3, #1
 8008286:	0021      	movs	r1, r4
 8008288:	6133      	str	r3, [r6, #16]
 800828a:	f7ff fdcb 	bl	8007e24 <_Bfree>
 800828e:	0030      	movs	r0, r6
 8008290:	b007      	add	sp, #28
 8008292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008294:	cb02      	ldmia	r3!, {r1}
 8008296:	c502      	stmia	r5!, {r1}
 8008298:	429a      	cmp	r2, r3
 800829a:	d8fb      	bhi.n	8008294 <__lshift+0xc8>
 800829c:	e7f0      	b.n	8008280 <__lshift+0xb4>
 800829e:	46c0      	nop			; (mov r8, r8)
 80082a0:	08009278 	.word	0x08009278
 80082a4:	08009289 	.word	0x08009289

080082a8 <__mcmp>:
 80082a8:	b530      	push	{r4, r5, lr}
 80082aa:	690b      	ldr	r3, [r1, #16]
 80082ac:	6904      	ldr	r4, [r0, #16]
 80082ae:	0002      	movs	r2, r0
 80082b0:	1ae0      	subs	r0, r4, r3
 80082b2:	429c      	cmp	r4, r3
 80082b4:	d10e      	bne.n	80082d4 <__mcmp+0x2c>
 80082b6:	3214      	adds	r2, #20
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	3114      	adds	r1, #20
 80082bc:	0014      	movs	r4, r2
 80082be:	18c9      	adds	r1, r1, r3
 80082c0:	18d2      	adds	r2, r2, r3
 80082c2:	3a04      	subs	r2, #4
 80082c4:	3904      	subs	r1, #4
 80082c6:	6815      	ldr	r5, [r2, #0]
 80082c8:	680b      	ldr	r3, [r1, #0]
 80082ca:	429d      	cmp	r5, r3
 80082cc:	d003      	beq.n	80082d6 <__mcmp+0x2e>
 80082ce:	2001      	movs	r0, #1
 80082d0:	429d      	cmp	r5, r3
 80082d2:	d303      	bcc.n	80082dc <__mcmp+0x34>
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	4294      	cmp	r4, r2
 80082d8:	d3f3      	bcc.n	80082c2 <__mcmp+0x1a>
 80082da:	e7fb      	b.n	80082d4 <__mcmp+0x2c>
 80082dc:	4240      	negs	r0, r0
 80082de:	e7f9      	b.n	80082d4 <__mcmp+0x2c>

080082e0 <__mdiff>:
 80082e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082e2:	000e      	movs	r6, r1
 80082e4:	0007      	movs	r7, r0
 80082e6:	0011      	movs	r1, r2
 80082e8:	0030      	movs	r0, r6
 80082ea:	b087      	sub	sp, #28
 80082ec:	0014      	movs	r4, r2
 80082ee:	f7ff ffdb 	bl	80082a8 <__mcmp>
 80082f2:	1e05      	subs	r5, r0, #0
 80082f4:	d110      	bne.n	8008318 <__mdiff+0x38>
 80082f6:	0001      	movs	r1, r0
 80082f8:	0038      	movs	r0, r7
 80082fa:	f7ff fd4f 	bl	8007d9c <_Balloc>
 80082fe:	1e02      	subs	r2, r0, #0
 8008300:	d104      	bne.n	800830c <__mdiff+0x2c>
 8008302:	4b3f      	ldr	r3, [pc, #252]	; (8008400 <__mdiff+0x120>)
 8008304:	483f      	ldr	r0, [pc, #252]	; (8008404 <__mdiff+0x124>)
 8008306:	4940      	ldr	r1, [pc, #256]	; (8008408 <__mdiff+0x128>)
 8008308:	f000 fb28 	bl	800895c <__assert_func>
 800830c:	2301      	movs	r3, #1
 800830e:	6145      	str	r5, [r0, #20]
 8008310:	6103      	str	r3, [r0, #16]
 8008312:	0010      	movs	r0, r2
 8008314:	b007      	add	sp, #28
 8008316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008318:	2301      	movs	r3, #1
 800831a:	9301      	str	r3, [sp, #4]
 800831c:	2800      	cmp	r0, #0
 800831e:	db04      	blt.n	800832a <__mdiff+0x4a>
 8008320:	0023      	movs	r3, r4
 8008322:	0034      	movs	r4, r6
 8008324:	001e      	movs	r6, r3
 8008326:	2300      	movs	r3, #0
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	0038      	movs	r0, r7
 800832c:	6861      	ldr	r1, [r4, #4]
 800832e:	f7ff fd35 	bl	8007d9c <_Balloc>
 8008332:	1e02      	subs	r2, r0, #0
 8008334:	d103      	bne.n	800833e <__mdiff+0x5e>
 8008336:	4b32      	ldr	r3, [pc, #200]	; (8008400 <__mdiff+0x120>)
 8008338:	4832      	ldr	r0, [pc, #200]	; (8008404 <__mdiff+0x124>)
 800833a:	4934      	ldr	r1, [pc, #208]	; (800840c <__mdiff+0x12c>)
 800833c:	e7e4      	b.n	8008308 <__mdiff+0x28>
 800833e:	9b01      	ldr	r3, [sp, #4]
 8008340:	2700      	movs	r7, #0
 8008342:	60c3      	str	r3, [r0, #12]
 8008344:	6920      	ldr	r0, [r4, #16]
 8008346:	3414      	adds	r4, #20
 8008348:	0083      	lsls	r3, r0, #2
 800834a:	18e3      	adds	r3, r4, r3
 800834c:	0021      	movs	r1, r4
 800834e:	9401      	str	r4, [sp, #4]
 8008350:	0034      	movs	r4, r6
 8008352:	9302      	str	r3, [sp, #8]
 8008354:	6933      	ldr	r3, [r6, #16]
 8008356:	3414      	adds	r4, #20
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	18e3      	adds	r3, r4, r3
 800835c:	9303      	str	r3, [sp, #12]
 800835e:	0013      	movs	r3, r2
 8008360:	3314      	adds	r3, #20
 8008362:	469c      	mov	ip, r3
 8008364:	9305      	str	r3, [sp, #20]
 8008366:	9104      	str	r1, [sp, #16]
 8008368:	9b04      	ldr	r3, [sp, #16]
 800836a:	cc02      	ldmia	r4!, {r1}
 800836c:	cb20      	ldmia	r3!, {r5}
 800836e:	9304      	str	r3, [sp, #16]
 8008370:	b2ab      	uxth	r3, r5
 8008372:	19df      	adds	r7, r3, r7
 8008374:	b28b      	uxth	r3, r1
 8008376:	1afb      	subs	r3, r7, r3
 8008378:	0c09      	lsrs	r1, r1, #16
 800837a:	0c2d      	lsrs	r5, r5, #16
 800837c:	1a6d      	subs	r5, r5, r1
 800837e:	1419      	asrs	r1, r3, #16
 8008380:	1869      	adds	r1, r5, r1
 8008382:	b29b      	uxth	r3, r3
 8008384:	140f      	asrs	r7, r1, #16
 8008386:	0409      	lsls	r1, r1, #16
 8008388:	4319      	orrs	r1, r3
 800838a:	4663      	mov	r3, ip
 800838c:	c302      	stmia	r3!, {r1}
 800838e:	469c      	mov	ip, r3
 8008390:	9b03      	ldr	r3, [sp, #12]
 8008392:	42a3      	cmp	r3, r4
 8008394:	d8e8      	bhi.n	8008368 <__mdiff+0x88>
 8008396:	0031      	movs	r1, r6
 8008398:	9c03      	ldr	r4, [sp, #12]
 800839a:	3115      	adds	r1, #21
 800839c:	2304      	movs	r3, #4
 800839e:	428c      	cmp	r4, r1
 80083a0:	d304      	bcc.n	80083ac <__mdiff+0xcc>
 80083a2:	1ba3      	subs	r3, r4, r6
 80083a4:	3b15      	subs	r3, #21
 80083a6:	089b      	lsrs	r3, r3, #2
 80083a8:	3301      	adds	r3, #1
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	9901      	ldr	r1, [sp, #4]
 80083ae:	18cd      	adds	r5, r1, r3
 80083b0:	9905      	ldr	r1, [sp, #20]
 80083b2:	002e      	movs	r6, r5
 80083b4:	18cb      	adds	r3, r1, r3
 80083b6:	469c      	mov	ip, r3
 80083b8:	9902      	ldr	r1, [sp, #8]
 80083ba:	428e      	cmp	r6, r1
 80083bc:	d310      	bcc.n	80083e0 <__mdiff+0x100>
 80083be:	9e02      	ldr	r6, [sp, #8]
 80083c0:	1ee9      	subs	r1, r5, #3
 80083c2:	2400      	movs	r4, #0
 80083c4:	428e      	cmp	r6, r1
 80083c6:	d304      	bcc.n	80083d2 <__mdiff+0xf2>
 80083c8:	0031      	movs	r1, r6
 80083ca:	3103      	adds	r1, #3
 80083cc:	1b49      	subs	r1, r1, r5
 80083ce:	0889      	lsrs	r1, r1, #2
 80083d0:	008c      	lsls	r4, r1, #2
 80083d2:	191b      	adds	r3, r3, r4
 80083d4:	3b04      	subs	r3, #4
 80083d6:	6819      	ldr	r1, [r3, #0]
 80083d8:	2900      	cmp	r1, #0
 80083da:	d00f      	beq.n	80083fc <__mdiff+0x11c>
 80083dc:	6110      	str	r0, [r2, #16]
 80083de:	e798      	b.n	8008312 <__mdiff+0x32>
 80083e0:	ce02      	ldmia	r6!, {r1}
 80083e2:	b28c      	uxth	r4, r1
 80083e4:	19e4      	adds	r4, r4, r7
 80083e6:	0c0f      	lsrs	r7, r1, #16
 80083e8:	1421      	asrs	r1, r4, #16
 80083ea:	1879      	adds	r1, r7, r1
 80083ec:	b2a4      	uxth	r4, r4
 80083ee:	140f      	asrs	r7, r1, #16
 80083f0:	0409      	lsls	r1, r1, #16
 80083f2:	4321      	orrs	r1, r4
 80083f4:	4664      	mov	r4, ip
 80083f6:	c402      	stmia	r4!, {r1}
 80083f8:	46a4      	mov	ip, r4
 80083fa:	e7dd      	b.n	80083b8 <__mdiff+0xd8>
 80083fc:	3801      	subs	r0, #1
 80083fe:	e7e9      	b.n	80083d4 <__mdiff+0xf4>
 8008400:	08009278 	.word	0x08009278
 8008404:	08009289 	.word	0x08009289
 8008408:	00000237 	.word	0x00000237
 800840c:	00000245 	.word	0x00000245

08008410 <__d2b>:
 8008410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008412:	2101      	movs	r1, #1
 8008414:	0014      	movs	r4, r2
 8008416:	001d      	movs	r5, r3
 8008418:	9f08      	ldr	r7, [sp, #32]
 800841a:	f7ff fcbf 	bl	8007d9c <_Balloc>
 800841e:	1e06      	subs	r6, r0, #0
 8008420:	d105      	bne.n	800842e <__d2b+0x1e>
 8008422:	0032      	movs	r2, r6
 8008424:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <__d2b+0xa8>)
 8008426:	4825      	ldr	r0, [pc, #148]	; (80084bc <__d2b+0xac>)
 8008428:	4925      	ldr	r1, [pc, #148]	; (80084c0 <__d2b+0xb0>)
 800842a:	f000 fa97 	bl	800895c <__assert_func>
 800842e:	032b      	lsls	r3, r5, #12
 8008430:	006d      	lsls	r5, r5, #1
 8008432:	0b1b      	lsrs	r3, r3, #12
 8008434:	0d6d      	lsrs	r5, r5, #21
 8008436:	d125      	bne.n	8008484 <__d2b+0x74>
 8008438:	9301      	str	r3, [sp, #4]
 800843a:	2c00      	cmp	r4, #0
 800843c:	d028      	beq.n	8008490 <__d2b+0x80>
 800843e:	4668      	mov	r0, sp
 8008440:	9400      	str	r4, [sp, #0]
 8008442:	f7ff fd71 	bl	8007f28 <__lo0bits>
 8008446:	9b01      	ldr	r3, [sp, #4]
 8008448:	9900      	ldr	r1, [sp, #0]
 800844a:	2800      	cmp	r0, #0
 800844c:	d01e      	beq.n	800848c <__d2b+0x7c>
 800844e:	2220      	movs	r2, #32
 8008450:	001c      	movs	r4, r3
 8008452:	1a12      	subs	r2, r2, r0
 8008454:	4094      	lsls	r4, r2
 8008456:	0022      	movs	r2, r4
 8008458:	40c3      	lsrs	r3, r0
 800845a:	430a      	orrs	r2, r1
 800845c:	6172      	str	r2, [r6, #20]
 800845e:	9301      	str	r3, [sp, #4]
 8008460:	9c01      	ldr	r4, [sp, #4]
 8008462:	61b4      	str	r4, [r6, #24]
 8008464:	1e63      	subs	r3, r4, #1
 8008466:	419c      	sbcs	r4, r3
 8008468:	3401      	adds	r4, #1
 800846a:	6134      	str	r4, [r6, #16]
 800846c:	2d00      	cmp	r5, #0
 800846e:	d017      	beq.n	80084a0 <__d2b+0x90>
 8008470:	2435      	movs	r4, #53	; 0x35
 8008472:	4b14      	ldr	r3, [pc, #80]	; (80084c4 <__d2b+0xb4>)
 8008474:	18ed      	adds	r5, r5, r3
 8008476:	182d      	adds	r5, r5, r0
 8008478:	603d      	str	r5, [r7, #0]
 800847a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800847c:	1a24      	subs	r4, r4, r0
 800847e:	601c      	str	r4, [r3, #0]
 8008480:	0030      	movs	r0, r6
 8008482:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008484:	2280      	movs	r2, #128	; 0x80
 8008486:	0352      	lsls	r2, r2, #13
 8008488:	4313      	orrs	r3, r2
 800848a:	e7d5      	b.n	8008438 <__d2b+0x28>
 800848c:	6171      	str	r1, [r6, #20]
 800848e:	e7e7      	b.n	8008460 <__d2b+0x50>
 8008490:	a801      	add	r0, sp, #4
 8008492:	f7ff fd49 	bl	8007f28 <__lo0bits>
 8008496:	9b01      	ldr	r3, [sp, #4]
 8008498:	2401      	movs	r4, #1
 800849a:	6173      	str	r3, [r6, #20]
 800849c:	3020      	adds	r0, #32
 800849e:	e7e4      	b.n	800846a <__d2b+0x5a>
 80084a0:	4b09      	ldr	r3, [pc, #36]	; (80084c8 <__d2b+0xb8>)
 80084a2:	18c0      	adds	r0, r0, r3
 80084a4:	4b09      	ldr	r3, [pc, #36]	; (80084cc <__d2b+0xbc>)
 80084a6:	6038      	str	r0, [r7, #0]
 80084a8:	18e3      	adds	r3, r4, r3
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	18f3      	adds	r3, r6, r3
 80084ae:	6958      	ldr	r0, [r3, #20]
 80084b0:	f7ff fd20 	bl	8007ef4 <__hi0bits>
 80084b4:	0164      	lsls	r4, r4, #5
 80084b6:	e7e0      	b.n	800847a <__d2b+0x6a>
 80084b8:	08009278 	.word	0x08009278
 80084bc:	08009289 	.word	0x08009289
 80084c0:	0000030f 	.word	0x0000030f
 80084c4:	fffffbcd 	.word	0xfffffbcd
 80084c8:	fffffbce 	.word	0xfffffbce
 80084cc:	3fffffff 	.word	0x3fffffff

080084d0 <__ssputs_r>:
 80084d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084d2:	b085      	sub	sp, #20
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	9203      	str	r2, [sp, #12]
 80084d8:	688e      	ldr	r6, [r1, #8]
 80084da:	9a01      	ldr	r2, [sp, #4]
 80084dc:	0007      	movs	r7, r0
 80084de:	000c      	movs	r4, r1
 80084e0:	680b      	ldr	r3, [r1, #0]
 80084e2:	4296      	cmp	r6, r2
 80084e4:	d831      	bhi.n	800854a <__ssputs_r+0x7a>
 80084e6:	898a      	ldrh	r2, [r1, #12]
 80084e8:	2190      	movs	r1, #144	; 0x90
 80084ea:	00c9      	lsls	r1, r1, #3
 80084ec:	420a      	tst	r2, r1
 80084ee:	d029      	beq.n	8008544 <__ssputs_r+0x74>
 80084f0:	2003      	movs	r0, #3
 80084f2:	6921      	ldr	r1, [r4, #16]
 80084f4:	1a5b      	subs	r3, r3, r1
 80084f6:	9302      	str	r3, [sp, #8]
 80084f8:	6963      	ldr	r3, [r4, #20]
 80084fa:	4343      	muls	r3, r0
 80084fc:	0fdd      	lsrs	r5, r3, #31
 80084fe:	18ed      	adds	r5, r5, r3
 8008500:	9b01      	ldr	r3, [sp, #4]
 8008502:	9802      	ldr	r0, [sp, #8]
 8008504:	3301      	adds	r3, #1
 8008506:	181b      	adds	r3, r3, r0
 8008508:	106d      	asrs	r5, r5, #1
 800850a:	42ab      	cmp	r3, r5
 800850c:	d900      	bls.n	8008510 <__ssputs_r+0x40>
 800850e:	001d      	movs	r5, r3
 8008510:	0552      	lsls	r2, r2, #21
 8008512:	d529      	bpl.n	8008568 <__ssputs_r+0x98>
 8008514:	0029      	movs	r1, r5
 8008516:	0038      	movs	r0, r7
 8008518:	f7ff fbae 	bl	8007c78 <_malloc_r>
 800851c:	1e06      	subs	r6, r0, #0
 800851e:	d02d      	beq.n	800857c <__ssputs_r+0xac>
 8008520:	9a02      	ldr	r2, [sp, #8]
 8008522:	6921      	ldr	r1, [r4, #16]
 8008524:	f000 fa10 	bl	8008948 <memcpy>
 8008528:	89a2      	ldrh	r2, [r4, #12]
 800852a:	4b19      	ldr	r3, [pc, #100]	; (8008590 <__ssputs_r+0xc0>)
 800852c:	401a      	ands	r2, r3
 800852e:	2380      	movs	r3, #128	; 0x80
 8008530:	4313      	orrs	r3, r2
 8008532:	81a3      	strh	r3, [r4, #12]
 8008534:	9b02      	ldr	r3, [sp, #8]
 8008536:	6126      	str	r6, [r4, #16]
 8008538:	18f6      	adds	r6, r6, r3
 800853a:	6026      	str	r6, [r4, #0]
 800853c:	6165      	str	r5, [r4, #20]
 800853e:	9e01      	ldr	r6, [sp, #4]
 8008540:	1aed      	subs	r5, r5, r3
 8008542:	60a5      	str	r5, [r4, #8]
 8008544:	9b01      	ldr	r3, [sp, #4]
 8008546:	429e      	cmp	r6, r3
 8008548:	d900      	bls.n	800854c <__ssputs_r+0x7c>
 800854a:	9e01      	ldr	r6, [sp, #4]
 800854c:	0032      	movs	r2, r6
 800854e:	9903      	ldr	r1, [sp, #12]
 8008550:	6820      	ldr	r0, [r4, #0]
 8008552:	f000 f9d4 	bl	80088fe <memmove>
 8008556:	2000      	movs	r0, #0
 8008558:	68a3      	ldr	r3, [r4, #8]
 800855a:	1b9b      	subs	r3, r3, r6
 800855c:	60a3      	str	r3, [r4, #8]
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	199b      	adds	r3, r3, r6
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	b005      	add	sp, #20
 8008566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008568:	002a      	movs	r2, r5
 800856a:	0038      	movs	r0, r7
 800856c:	f000 fa53 	bl	8008a16 <_realloc_r>
 8008570:	1e06      	subs	r6, r0, #0
 8008572:	d1df      	bne.n	8008534 <__ssputs_r+0x64>
 8008574:	0038      	movs	r0, r7
 8008576:	6921      	ldr	r1, [r4, #16]
 8008578:	f7ff fb08 	bl	8007b8c <_free_r>
 800857c:	230c      	movs	r3, #12
 800857e:	2001      	movs	r0, #1
 8008580:	603b      	str	r3, [r7, #0]
 8008582:	89a2      	ldrh	r2, [r4, #12]
 8008584:	3334      	adds	r3, #52	; 0x34
 8008586:	4313      	orrs	r3, r2
 8008588:	81a3      	strh	r3, [r4, #12]
 800858a:	4240      	negs	r0, r0
 800858c:	e7ea      	b.n	8008564 <__ssputs_r+0x94>
 800858e:	46c0      	nop			; (mov r8, r8)
 8008590:	fffffb7f 	.word	0xfffffb7f

08008594 <_svfiprintf_r>:
 8008594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008596:	b0a1      	sub	sp, #132	; 0x84
 8008598:	9003      	str	r0, [sp, #12]
 800859a:	001d      	movs	r5, r3
 800859c:	898b      	ldrh	r3, [r1, #12]
 800859e:	000f      	movs	r7, r1
 80085a0:	0016      	movs	r6, r2
 80085a2:	061b      	lsls	r3, r3, #24
 80085a4:	d511      	bpl.n	80085ca <_svfiprintf_r+0x36>
 80085a6:	690b      	ldr	r3, [r1, #16]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10e      	bne.n	80085ca <_svfiprintf_r+0x36>
 80085ac:	2140      	movs	r1, #64	; 0x40
 80085ae:	f7ff fb63 	bl	8007c78 <_malloc_r>
 80085b2:	6038      	str	r0, [r7, #0]
 80085b4:	6138      	str	r0, [r7, #16]
 80085b6:	2800      	cmp	r0, #0
 80085b8:	d105      	bne.n	80085c6 <_svfiprintf_r+0x32>
 80085ba:	230c      	movs	r3, #12
 80085bc:	9a03      	ldr	r2, [sp, #12]
 80085be:	3801      	subs	r0, #1
 80085c0:	6013      	str	r3, [r2, #0]
 80085c2:	b021      	add	sp, #132	; 0x84
 80085c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085c6:	2340      	movs	r3, #64	; 0x40
 80085c8:	617b      	str	r3, [r7, #20]
 80085ca:	2300      	movs	r3, #0
 80085cc:	ac08      	add	r4, sp, #32
 80085ce:	6163      	str	r3, [r4, #20]
 80085d0:	3320      	adds	r3, #32
 80085d2:	7663      	strb	r3, [r4, #25]
 80085d4:	3310      	adds	r3, #16
 80085d6:	76a3      	strb	r3, [r4, #26]
 80085d8:	9507      	str	r5, [sp, #28]
 80085da:	0035      	movs	r5, r6
 80085dc:	782b      	ldrb	r3, [r5, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <_svfiprintf_r+0x52>
 80085e2:	2b25      	cmp	r3, #37	; 0x25
 80085e4:	d148      	bne.n	8008678 <_svfiprintf_r+0xe4>
 80085e6:	1bab      	subs	r3, r5, r6
 80085e8:	9305      	str	r3, [sp, #20]
 80085ea:	42b5      	cmp	r5, r6
 80085ec:	d00b      	beq.n	8008606 <_svfiprintf_r+0x72>
 80085ee:	0032      	movs	r2, r6
 80085f0:	0039      	movs	r1, r7
 80085f2:	9803      	ldr	r0, [sp, #12]
 80085f4:	f7ff ff6c 	bl	80084d0 <__ssputs_r>
 80085f8:	3001      	adds	r0, #1
 80085fa:	d100      	bne.n	80085fe <_svfiprintf_r+0x6a>
 80085fc:	e0af      	b.n	800875e <_svfiprintf_r+0x1ca>
 80085fe:	6963      	ldr	r3, [r4, #20]
 8008600:	9a05      	ldr	r2, [sp, #20]
 8008602:	189b      	adds	r3, r3, r2
 8008604:	6163      	str	r3, [r4, #20]
 8008606:	782b      	ldrb	r3, [r5, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d100      	bne.n	800860e <_svfiprintf_r+0x7a>
 800860c:	e0a7      	b.n	800875e <_svfiprintf_r+0x1ca>
 800860e:	2201      	movs	r2, #1
 8008610:	2300      	movs	r3, #0
 8008612:	4252      	negs	r2, r2
 8008614:	6062      	str	r2, [r4, #4]
 8008616:	a904      	add	r1, sp, #16
 8008618:	3254      	adds	r2, #84	; 0x54
 800861a:	1852      	adds	r2, r2, r1
 800861c:	1c6e      	adds	r6, r5, #1
 800861e:	6023      	str	r3, [r4, #0]
 8008620:	60e3      	str	r3, [r4, #12]
 8008622:	60a3      	str	r3, [r4, #8]
 8008624:	7013      	strb	r3, [r2, #0]
 8008626:	65a3      	str	r3, [r4, #88]	; 0x58
 8008628:	4b55      	ldr	r3, [pc, #340]	; (8008780 <_svfiprintf_r+0x1ec>)
 800862a:	2205      	movs	r2, #5
 800862c:	0018      	movs	r0, r3
 800862e:	7831      	ldrb	r1, [r6, #0]
 8008630:	9305      	str	r3, [sp, #20]
 8008632:	f7fe fc02 	bl	8006e3a <memchr>
 8008636:	1c75      	adds	r5, r6, #1
 8008638:	2800      	cmp	r0, #0
 800863a:	d11f      	bne.n	800867c <_svfiprintf_r+0xe8>
 800863c:	6822      	ldr	r2, [r4, #0]
 800863e:	06d3      	lsls	r3, r2, #27
 8008640:	d504      	bpl.n	800864c <_svfiprintf_r+0xb8>
 8008642:	2353      	movs	r3, #83	; 0x53
 8008644:	a904      	add	r1, sp, #16
 8008646:	185b      	adds	r3, r3, r1
 8008648:	2120      	movs	r1, #32
 800864a:	7019      	strb	r1, [r3, #0]
 800864c:	0713      	lsls	r3, r2, #28
 800864e:	d504      	bpl.n	800865a <_svfiprintf_r+0xc6>
 8008650:	2353      	movs	r3, #83	; 0x53
 8008652:	a904      	add	r1, sp, #16
 8008654:	185b      	adds	r3, r3, r1
 8008656:	212b      	movs	r1, #43	; 0x2b
 8008658:	7019      	strb	r1, [r3, #0]
 800865a:	7833      	ldrb	r3, [r6, #0]
 800865c:	2b2a      	cmp	r3, #42	; 0x2a
 800865e:	d016      	beq.n	800868e <_svfiprintf_r+0xfa>
 8008660:	0035      	movs	r5, r6
 8008662:	2100      	movs	r1, #0
 8008664:	200a      	movs	r0, #10
 8008666:	68e3      	ldr	r3, [r4, #12]
 8008668:	782a      	ldrb	r2, [r5, #0]
 800866a:	1c6e      	adds	r6, r5, #1
 800866c:	3a30      	subs	r2, #48	; 0x30
 800866e:	2a09      	cmp	r2, #9
 8008670:	d94e      	bls.n	8008710 <_svfiprintf_r+0x17c>
 8008672:	2900      	cmp	r1, #0
 8008674:	d111      	bne.n	800869a <_svfiprintf_r+0x106>
 8008676:	e017      	b.n	80086a8 <_svfiprintf_r+0x114>
 8008678:	3501      	adds	r5, #1
 800867a:	e7af      	b.n	80085dc <_svfiprintf_r+0x48>
 800867c:	9b05      	ldr	r3, [sp, #20]
 800867e:	6822      	ldr	r2, [r4, #0]
 8008680:	1ac0      	subs	r0, r0, r3
 8008682:	2301      	movs	r3, #1
 8008684:	4083      	lsls	r3, r0
 8008686:	4313      	orrs	r3, r2
 8008688:	002e      	movs	r6, r5
 800868a:	6023      	str	r3, [r4, #0]
 800868c:	e7cc      	b.n	8008628 <_svfiprintf_r+0x94>
 800868e:	9b07      	ldr	r3, [sp, #28]
 8008690:	1d19      	adds	r1, r3, #4
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	9107      	str	r1, [sp, #28]
 8008696:	2b00      	cmp	r3, #0
 8008698:	db01      	blt.n	800869e <_svfiprintf_r+0x10a>
 800869a:	930b      	str	r3, [sp, #44]	; 0x2c
 800869c:	e004      	b.n	80086a8 <_svfiprintf_r+0x114>
 800869e:	425b      	negs	r3, r3
 80086a0:	60e3      	str	r3, [r4, #12]
 80086a2:	2302      	movs	r3, #2
 80086a4:	4313      	orrs	r3, r2
 80086a6:	6023      	str	r3, [r4, #0]
 80086a8:	782b      	ldrb	r3, [r5, #0]
 80086aa:	2b2e      	cmp	r3, #46	; 0x2e
 80086ac:	d10a      	bne.n	80086c4 <_svfiprintf_r+0x130>
 80086ae:	786b      	ldrb	r3, [r5, #1]
 80086b0:	2b2a      	cmp	r3, #42	; 0x2a
 80086b2:	d135      	bne.n	8008720 <_svfiprintf_r+0x18c>
 80086b4:	9b07      	ldr	r3, [sp, #28]
 80086b6:	3502      	adds	r5, #2
 80086b8:	1d1a      	adds	r2, r3, #4
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	9207      	str	r2, [sp, #28]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	db2b      	blt.n	800871a <_svfiprintf_r+0x186>
 80086c2:	9309      	str	r3, [sp, #36]	; 0x24
 80086c4:	4e2f      	ldr	r6, [pc, #188]	; (8008784 <_svfiprintf_r+0x1f0>)
 80086c6:	2203      	movs	r2, #3
 80086c8:	0030      	movs	r0, r6
 80086ca:	7829      	ldrb	r1, [r5, #0]
 80086cc:	f7fe fbb5 	bl	8006e3a <memchr>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d006      	beq.n	80086e2 <_svfiprintf_r+0x14e>
 80086d4:	2340      	movs	r3, #64	; 0x40
 80086d6:	1b80      	subs	r0, r0, r6
 80086d8:	4083      	lsls	r3, r0
 80086da:	6822      	ldr	r2, [r4, #0]
 80086dc:	3501      	adds	r5, #1
 80086de:	4313      	orrs	r3, r2
 80086e0:	6023      	str	r3, [r4, #0]
 80086e2:	7829      	ldrb	r1, [r5, #0]
 80086e4:	2206      	movs	r2, #6
 80086e6:	4828      	ldr	r0, [pc, #160]	; (8008788 <_svfiprintf_r+0x1f4>)
 80086e8:	1c6e      	adds	r6, r5, #1
 80086ea:	7621      	strb	r1, [r4, #24]
 80086ec:	f7fe fba5 	bl	8006e3a <memchr>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d03c      	beq.n	800876e <_svfiprintf_r+0x1da>
 80086f4:	4b25      	ldr	r3, [pc, #148]	; (800878c <_svfiprintf_r+0x1f8>)
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d125      	bne.n	8008746 <_svfiprintf_r+0x1b2>
 80086fa:	2207      	movs	r2, #7
 80086fc:	9b07      	ldr	r3, [sp, #28]
 80086fe:	3307      	adds	r3, #7
 8008700:	4393      	bics	r3, r2
 8008702:	3308      	adds	r3, #8
 8008704:	9307      	str	r3, [sp, #28]
 8008706:	6963      	ldr	r3, [r4, #20]
 8008708:	9a04      	ldr	r2, [sp, #16]
 800870a:	189b      	adds	r3, r3, r2
 800870c:	6163      	str	r3, [r4, #20]
 800870e:	e764      	b.n	80085da <_svfiprintf_r+0x46>
 8008710:	4343      	muls	r3, r0
 8008712:	0035      	movs	r5, r6
 8008714:	2101      	movs	r1, #1
 8008716:	189b      	adds	r3, r3, r2
 8008718:	e7a6      	b.n	8008668 <_svfiprintf_r+0xd4>
 800871a:	2301      	movs	r3, #1
 800871c:	425b      	negs	r3, r3
 800871e:	e7d0      	b.n	80086c2 <_svfiprintf_r+0x12e>
 8008720:	2300      	movs	r3, #0
 8008722:	200a      	movs	r0, #10
 8008724:	001a      	movs	r2, r3
 8008726:	3501      	adds	r5, #1
 8008728:	6063      	str	r3, [r4, #4]
 800872a:	7829      	ldrb	r1, [r5, #0]
 800872c:	1c6e      	adds	r6, r5, #1
 800872e:	3930      	subs	r1, #48	; 0x30
 8008730:	2909      	cmp	r1, #9
 8008732:	d903      	bls.n	800873c <_svfiprintf_r+0x1a8>
 8008734:	2b00      	cmp	r3, #0
 8008736:	d0c5      	beq.n	80086c4 <_svfiprintf_r+0x130>
 8008738:	9209      	str	r2, [sp, #36]	; 0x24
 800873a:	e7c3      	b.n	80086c4 <_svfiprintf_r+0x130>
 800873c:	4342      	muls	r2, r0
 800873e:	0035      	movs	r5, r6
 8008740:	2301      	movs	r3, #1
 8008742:	1852      	adds	r2, r2, r1
 8008744:	e7f1      	b.n	800872a <_svfiprintf_r+0x196>
 8008746:	aa07      	add	r2, sp, #28
 8008748:	9200      	str	r2, [sp, #0]
 800874a:	0021      	movs	r1, r4
 800874c:	003a      	movs	r2, r7
 800874e:	4b10      	ldr	r3, [pc, #64]	; (8008790 <_svfiprintf_r+0x1fc>)
 8008750:	9803      	ldr	r0, [sp, #12]
 8008752:	f7fd fde5 	bl	8006320 <_printf_float>
 8008756:	9004      	str	r0, [sp, #16]
 8008758:	9b04      	ldr	r3, [sp, #16]
 800875a:	3301      	adds	r3, #1
 800875c:	d1d3      	bne.n	8008706 <_svfiprintf_r+0x172>
 800875e:	89bb      	ldrh	r3, [r7, #12]
 8008760:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008762:	065b      	lsls	r3, r3, #25
 8008764:	d400      	bmi.n	8008768 <_svfiprintf_r+0x1d4>
 8008766:	e72c      	b.n	80085c2 <_svfiprintf_r+0x2e>
 8008768:	2001      	movs	r0, #1
 800876a:	4240      	negs	r0, r0
 800876c:	e729      	b.n	80085c2 <_svfiprintf_r+0x2e>
 800876e:	aa07      	add	r2, sp, #28
 8008770:	9200      	str	r2, [sp, #0]
 8008772:	0021      	movs	r1, r4
 8008774:	003a      	movs	r2, r7
 8008776:	4b06      	ldr	r3, [pc, #24]	; (8008790 <_svfiprintf_r+0x1fc>)
 8008778:	9803      	ldr	r0, [sp, #12]
 800877a:	f7fe f897 	bl	80068ac <_printf_i>
 800877e:	e7ea      	b.n	8008756 <_svfiprintf_r+0x1c2>
 8008780:	080093e4 	.word	0x080093e4
 8008784:	080093ea 	.word	0x080093ea
 8008788:	080093ee 	.word	0x080093ee
 800878c:	08006321 	.word	0x08006321
 8008790:	080084d1 	.word	0x080084d1

08008794 <__sflush_r>:
 8008794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008796:	898b      	ldrh	r3, [r1, #12]
 8008798:	0005      	movs	r5, r0
 800879a:	000c      	movs	r4, r1
 800879c:	071a      	lsls	r2, r3, #28
 800879e:	d45c      	bmi.n	800885a <__sflush_r+0xc6>
 80087a0:	684a      	ldr	r2, [r1, #4]
 80087a2:	2a00      	cmp	r2, #0
 80087a4:	dc04      	bgt.n	80087b0 <__sflush_r+0x1c>
 80087a6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80087a8:	2a00      	cmp	r2, #0
 80087aa:	dc01      	bgt.n	80087b0 <__sflush_r+0x1c>
 80087ac:	2000      	movs	r0, #0
 80087ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80087b0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80087b2:	2f00      	cmp	r7, #0
 80087b4:	d0fa      	beq.n	80087ac <__sflush_r+0x18>
 80087b6:	2200      	movs	r2, #0
 80087b8:	2080      	movs	r0, #128	; 0x80
 80087ba:	682e      	ldr	r6, [r5, #0]
 80087bc:	602a      	str	r2, [r5, #0]
 80087be:	001a      	movs	r2, r3
 80087c0:	0140      	lsls	r0, r0, #5
 80087c2:	6a21      	ldr	r1, [r4, #32]
 80087c4:	4002      	ands	r2, r0
 80087c6:	4203      	tst	r3, r0
 80087c8:	d034      	beq.n	8008834 <__sflush_r+0xa0>
 80087ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087cc:	89a3      	ldrh	r3, [r4, #12]
 80087ce:	075b      	lsls	r3, r3, #29
 80087d0:	d506      	bpl.n	80087e0 <__sflush_r+0x4c>
 80087d2:	6863      	ldr	r3, [r4, #4]
 80087d4:	1ac0      	subs	r0, r0, r3
 80087d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <__sflush_r+0x4c>
 80087dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087de:	1ac0      	subs	r0, r0, r3
 80087e0:	0002      	movs	r2, r0
 80087e2:	2300      	movs	r3, #0
 80087e4:	0028      	movs	r0, r5
 80087e6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80087e8:	6a21      	ldr	r1, [r4, #32]
 80087ea:	47b8      	blx	r7
 80087ec:	89a2      	ldrh	r2, [r4, #12]
 80087ee:	1c43      	adds	r3, r0, #1
 80087f0:	d106      	bne.n	8008800 <__sflush_r+0x6c>
 80087f2:	6829      	ldr	r1, [r5, #0]
 80087f4:	291d      	cmp	r1, #29
 80087f6:	d82c      	bhi.n	8008852 <__sflush_r+0xbe>
 80087f8:	4b2a      	ldr	r3, [pc, #168]	; (80088a4 <__sflush_r+0x110>)
 80087fa:	410b      	asrs	r3, r1
 80087fc:	07db      	lsls	r3, r3, #31
 80087fe:	d428      	bmi.n	8008852 <__sflush_r+0xbe>
 8008800:	2300      	movs	r3, #0
 8008802:	6063      	str	r3, [r4, #4]
 8008804:	6923      	ldr	r3, [r4, #16]
 8008806:	6023      	str	r3, [r4, #0]
 8008808:	04d2      	lsls	r2, r2, #19
 800880a:	d505      	bpl.n	8008818 <__sflush_r+0x84>
 800880c:	1c43      	adds	r3, r0, #1
 800880e:	d102      	bne.n	8008816 <__sflush_r+0x82>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d100      	bne.n	8008818 <__sflush_r+0x84>
 8008816:	6560      	str	r0, [r4, #84]	; 0x54
 8008818:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800881a:	602e      	str	r6, [r5, #0]
 800881c:	2900      	cmp	r1, #0
 800881e:	d0c5      	beq.n	80087ac <__sflush_r+0x18>
 8008820:	0023      	movs	r3, r4
 8008822:	3344      	adds	r3, #68	; 0x44
 8008824:	4299      	cmp	r1, r3
 8008826:	d002      	beq.n	800882e <__sflush_r+0x9a>
 8008828:	0028      	movs	r0, r5
 800882a:	f7ff f9af 	bl	8007b8c <_free_r>
 800882e:	2000      	movs	r0, #0
 8008830:	6360      	str	r0, [r4, #52]	; 0x34
 8008832:	e7bc      	b.n	80087ae <__sflush_r+0x1a>
 8008834:	2301      	movs	r3, #1
 8008836:	0028      	movs	r0, r5
 8008838:	47b8      	blx	r7
 800883a:	1c43      	adds	r3, r0, #1
 800883c:	d1c6      	bne.n	80087cc <__sflush_r+0x38>
 800883e:	682b      	ldr	r3, [r5, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d0c3      	beq.n	80087cc <__sflush_r+0x38>
 8008844:	2b1d      	cmp	r3, #29
 8008846:	d001      	beq.n	800884c <__sflush_r+0xb8>
 8008848:	2b16      	cmp	r3, #22
 800884a:	d101      	bne.n	8008850 <__sflush_r+0xbc>
 800884c:	602e      	str	r6, [r5, #0]
 800884e:	e7ad      	b.n	80087ac <__sflush_r+0x18>
 8008850:	89a2      	ldrh	r2, [r4, #12]
 8008852:	2340      	movs	r3, #64	; 0x40
 8008854:	4313      	orrs	r3, r2
 8008856:	81a3      	strh	r3, [r4, #12]
 8008858:	e7a9      	b.n	80087ae <__sflush_r+0x1a>
 800885a:	690e      	ldr	r6, [r1, #16]
 800885c:	2e00      	cmp	r6, #0
 800885e:	d0a5      	beq.n	80087ac <__sflush_r+0x18>
 8008860:	680f      	ldr	r7, [r1, #0]
 8008862:	600e      	str	r6, [r1, #0]
 8008864:	1bba      	subs	r2, r7, r6
 8008866:	9201      	str	r2, [sp, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	079b      	lsls	r3, r3, #30
 800886c:	d100      	bne.n	8008870 <__sflush_r+0xdc>
 800886e:	694a      	ldr	r2, [r1, #20]
 8008870:	60a2      	str	r2, [r4, #8]
 8008872:	9b01      	ldr	r3, [sp, #4]
 8008874:	2b00      	cmp	r3, #0
 8008876:	dd99      	ble.n	80087ac <__sflush_r+0x18>
 8008878:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800887a:	0032      	movs	r2, r6
 800887c:	001f      	movs	r7, r3
 800887e:	0028      	movs	r0, r5
 8008880:	9b01      	ldr	r3, [sp, #4]
 8008882:	6a21      	ldr	r1, [r4, #32]
 8008884:	47b8      	blx	r7
 8008886:	2800      	cmp	r0, #0
 8008888:	dc06      	bgt.n	8008898 <__sflush_r+0x104>
 800888a:	2340      	movs	r3, #64	; 0x40
 800888c:	2001      	movs	r0, #1
 800888e:	89a2      	ldrh	r2, [r4, #12]
 8008890:	4240      	negs	r0, r0
 8008892:	4313      	orrs	r3, r2
 8008894:	81a3      	strh	r3, [r4, #12]
 8008896:	e78a      	b.n	80087ae <__sflush_r+0x1a>
 8008898:	9b01      	ldr	r3, [sp, #4]
 800889a:	1836      	adds	r6, r6, r0
 800889c:	1a1b      	subs	r3, r3, r0
 800889e:	9301      	str	r3, [sp, #4]
 80088a0:	e7e7      	b.n	8008872 <__sflush_r+0xde>
 80088a2:	46c0      	nop			; (mov r8, r8)
 80088a4:	dfbffffe 	.word	0xdfbffffe

080088a8 <_fflush_r>:
 80088a8:	690b      	ldr	r3, [r1, #16]
 80088aa:	b570      	push	{r4, r5, r6, lr}
 80088ac:	0005      	movs	r5, r0
 80088ae:	000c      	movs	r4, r1
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d102      	bne.n	80088ba <_fflush_r+0x12>
 80088b4:	2500      	movs	r5, #0
 80088b6:	0028      	movs	r0, r5
 80088b8:	bd70      	pop	{r4, r5, r6, pc}
 80088ba:	2800      	cmp	r0, #0
 80088bc:	d004      	beq.n	80088c8 <_fflush_r+0x20>
 80088be:	6a03      	ldr	r3, [r0, #32]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <_fflush_r+0x20>
 80088c4:	f7fe f992 	bl	8006bec <__sinit>
 80088c8:	220c      	movs	r2, #12
 80088ca:	5ea3      	ldrsh	r3, [r4, r2]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d0f1      	beq.n	80088b4 <_fflush_r+0xc>
 80088d0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088d2:	07d2      	lsls	r2, r2, #31
 80088d4:	d404      	bmi.n	80088e0 <_fflush_r+0x38>
 80088d6:	059b      	lsls	r3, r3, #22
 80088d8:	d402      	bmi.n	80088e0 <_fflush_r+0x38>
 80088da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088dc:	f7fe faab 	bl	8006e36 <__retarget_lock_acquire_recursive>
 80088e0:	0028      	movs	r0, r5
 80088e2:	0021      	movs	r1, r4
 80088e4:	f7ff ff56 	bl	8008794 <__sflush_r>
 80088e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088ea:	0005      	movs	r5, r0
 80088ec:	07db      	lsls	r3, r3, #31
 80088ee:	d4e2      	bmi.n	80088b6 <_fflush_r+0xe>
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	059b      	lsls	r3, r3, #22
 80088f4:	d4df      	bmi.n	80088b6 <_fflush_r+0xe>
 80088f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088f8:	f7fe fa9e 	bl	8006e38 <__retarget_lock_release_recursive>
 80088fc:	e7db      	b.n	80088b6 <_fflush_r+0xe>

080088fe <memmove>:
 80088fe:	b510      	push	{r4, lr}
 8008900:	4288      	cmp	r0, r1
 8008902:	d902      	bls.n	800890a <memmove+0xc>
 8008904:	188b      	adds	r3, r1, r2
 8008906:	4298      	cmp	r0, r3
 8008908:	d303      	bcc.n	8008912 <memmove+0x14>
 800890a:	2300      	movs	r3, #0
 800890c:	e007      	b.n	800891e <memmove+0x20>
 800890e:	5c8b      	ldrb	r3, [r1, r2]
 8008910:	5483      	strb	r3, [r0, r2]
 8008912:	3a01      	subs	r2, #1
 8008914:	d2fb      	bcs.n	800890e <memmove+0x10>
 8008916:	bd10      	pop	{r4, pc}
 8008918:	5ccc      	ldrb	r4, [r1, r3]
 800891a:	54c4      	strb	r4, [r0, r3]
 800891c:	3301      	adds	r3, #1
 800891e:	429a      	cmp	r2, r3
 8008920:	d1fa      	bne.n	8008918 <memmove+0x1a>
 8008922:	e7f8      	b.n	8008916 <memmove+0x18>

08008924 <_sbrk_r>:
 8008924:	2300      	movs	r3, #0
 8008926:	b570      	push	{r4, r5, r6, lr}
 8008928:	4d06      	ldr	r5, [pc, #24]	; (8008944 <_sbrk_r+0x20>)
 800892a:	0004      	movs	r4, r0
 800892c:	0008      	movs	r0, r1
 800892e:	602b      	str	r3, [r5, #0]
 8008930:	f7fa fad4 	bl	8002edc <_sbrk>
 8008934:	1c43      	adds	r3, r0, #1
 8008936:	d103      	bne.n	8008940 <_sbrk_r+0x1c>
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d000      	beq.n	8008940 <_sbrk_r+0x1c>
 800893e:	6023      	str	r3, [r4, #0]
 8008940:	bd70      	pop	{r4, r5, r6, pc}
 8008942:	46c0      	nop			; (mov r8, r8)
 8008944:	20000840 	.word	0x20000840

08008948 <memcpy>:
 8008948:	2300      	movs	r3, #0
 800894a:	b510      	push	{r4, lr}
 800894c:	429a      	cmp	r2, r3
 800894e:	d100      	bne.n	8008952 <memcpy+0xa>
 8008950:	bd10      	pop	{r4, pc}
 8008952:	5ccc      	ldrb	r4, [r1, r3]
 8008954:	54c4      	strb	r4, [r0, r3]
 8008956:	3301      	adds	r3, #1
 8008958:	e7f8      	b.n	800894c <memcpy+0x4>
	...

0800895c <__assert_func>:
 800895c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800895e:	0014      	movs	r4, r2
 8008960:	001a      	movs	r2, r3
 8008962:	4b09      	ldr	r3, [pc, #36]	; (8008988 <__assert_func+0x2c>)
 8008964:	0005      	movs	r5, r0
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	000e      	movs	r6, r1
 800896a:	68d8      	ldr	r0, [r3, #12]
 800896c:	4b07      	ldr	r3, [pc, #28]	; (800898c <__assert_func+0x30>)
 800896e:	2c00      	cmp	r4, #0
 8008970:	d101      	bne.n	8008976 <__assert_func+0x1a>
 8008972:	4b07      	ldr	r3, [pc, #28]	; (8008990 <__assert_func+0x34>)
 8008974:	001c      	movs	r4, r3
 8008976:	4907      	ldr	r1, [pc, #28]	; (8008994 <__assert_func+0x38>)
 8008978:	9301      	str	r3, [sp, #4]
 800897a:	9402      	str	r4, [sp, #8]
 800897c:	002b      	movs	r3, r5
 800897e:	9600      	str	r6, [sp, #0]
 8008980:	f000 f886 	bl	8008a90 <fiprintf>
 8008984:	f000 f894 	bl	8008ab0 <abort>
 8008988:	20000068 	.word	0x20000068
 800898c:	080093ff 	.word	0x080093ff
 8008990:	0800943a 	.word	0x0800943a
 8008994:	0800940c 	.word	0x0800940c

08008998 <_calloc_r>:
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	0c0b      	lsrs	r3, r1, #16
 800899c:	0c15      	lsrs	r5, r2, #16
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d11e      	bne.n	80089e0 <_calloc_r+0x48>
 80089a2:	2d00      	cmp	r5, #0
 80089a4:	d10c      	bne.n	80089c0 <_calloc_r+0x28>
 80089a6:	b289      	uxth	r1, r1
 80089a8:	b294      	uxth	r4, r2
 80089aa:	434c      	muls	r4, r1
 80089ac:	0021      	movs	r1, r4
 80089ae:	f7ff f963 	bl	8007c78 <_malloc_r>
 80089b2:	1e05      	subs	r5, r0, #0
 80089b4:	d01b      	beq.n	80089ee <_calloc_r+0x56>
 80089b6:	0022      	movs	r2, r4
 80089b8:	2100      	movs	r1, #0
 80089ba:	f7fe f9b7 	bl	8006d2c <memset>
 80089be:	e016      	b.n	80089ee <_calloc_r+0x56>
 80089c0:	1c2b      	adds	r3, r5, #0
 80089c2:	1c0c      	adds	r4, r1, #0
 80089c4:	b289      	uxth	r1, r1
 80089c6:	b292      	uxth	r2, r2
 80089c8:	434a      	muls	r2, r1
 80089ca:	b2a1      	uxth	r1, r4
 80089cc:	b29c      	uxth	r4, r3
 80089ce:	434c      	muls	r4, r1
 80089d0:	0c13      	lsrs	r3, r2, #16
 80089d2:	18e4      	adds	r4, r4, r3
 80089d4:	0c23      	lsrs	r3, r4, #16
 80089d6:	d107      	bne.n	80089e8 <_calloc_r+0x50>
 80089d8:	0424      	lsls	r4, r4, #16
 80089da:	b292      	uxth	r2, r2
 80089dc:	4314      	orrs	r4, r2
 80089de:	e7e5      	b.n	80089ac <_calloc_r+0x14>
 80089e0:	2d00      	cmp	r5, #0
 80089e2:	d101      	bne.n	80089e8 <_calloc_r+0x50>
 80089e4:	1c14      	adds	r4, r2, #0
 80089e6:	e7ed      	b.n	80089c4 <_calloc_r+0x2c>
 80089e8:	230c      	movs	r3, #12
 80089ea:	2500      	movs	r5, #0
 80089ec:	6003      	str	r3, [r0, #0]
 80089ee:	0028      	movs	r0, r5
 80089f0:	bd70      	pop	{r4, r5, r6, pc}

080089f2 <__ascii_mbtowc>:
 80089f2:	b082      	sub	sp, #8
 80089f4:	2900      	cmp	r1, #0
 80089f6:	d100      	bne.n	80089fa <__ascii_mbtowc+0x8>
 80089f8:	a901      	add	r1, sp, #4
 80089fa:	1e10      	subs	r0, r2, #0
 80089fc:	d006      	beq.n	8008a0c <__ascii_mbtowc+0x1a>
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d006      	beq.n	8008a10 <__ascii_mbtowc+0x1e>
 8008a02:	7813      	ldrb	r3, [r2, #0]
 8008a04:	600b      	str	r3, [r1, #0]
 8008a06:	7810      	ldrb	r0, [r2, #0]
 8008a08:	1e43      	subs	r3, r0, #1
 8008a0a:	4198      	sbcs	r0, r3
 8008a0c:	b002      	add	sp, #8
 8008a0e:	4770      	bx	lr
 8008a10:	2002      	movs	r0, #2
 8008a12:	4240      	negs	r0, r0
 8008a14:	e7fa      	b.n	8008a0c <__ascii_mbtowc+0x1a>

08008a16 <_realloc_r>:
 8008a16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a18:	0007      	movs	r7, r0
 8008a1a:	000e      	movs	r6, r1
 8008a1c:	0014      	movs	r4, r2
 8008a1e:	2900      	cmp	r1, #0
 8008a20:	d105      	bne.n	8008a2e <_realloc_r+0x18>
 8008a22:	0011      	movs	r1, r2
 8008a24:	f7ff f928 	bl	8007c78 <_malloc_r>
 8008a28:	0005      	movs	r5, r0
 8008a2a:	0028      	movs	r0, r5
 8008a2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a2e:	2a00      	cmp	r2, #0
 8008a30:	d103      	bne.n	8008a3a <_realloc_r+0x24>
 8008a32:	f7ff f8ab 	bl	8007b8c <_free_r>
 8008a36:	0025      	movs	r5, r4
 8008a38:	e7f7      	b.n	8008a2a <_realloc_r+0x14>
 8008a3a:	f000 f840 	bl	8008abe <_malloc_usable_size_r>
 8008a3e:	9001      	str	r0, [sp, #4]
 8008a40:	4284      	cmp	r4, r0
 8008a42:	d803      	bhi.n	8008a4c <_realloc_r+0x36>
 8008a44:	0035      	movs	r5, r6
 8008a46:	0843      	lsrs	r3, r0, #1
 8008a48:	42a3      	cmp	r3, r4
 8008a4a:	d3ee      	bcc.n	8008a2a <_realloc_r+0x14>
 8008a4c:	0021      	movs	r1, r4
 8008a4e:	0038      	movs	r0, r7
 8008a50:	f7ff f912 	bl	8007c78 <_malloc_r>
 8008a54:	1e05      	subs	r5, r0, #0
 8008a56:	d0e8      	beq.n	8008a2a <_realloc_r+0x14>
 8008a58:	9b01      	ldr	r3, [sp, #4]
 8008a5a:	0022      	movs	r2, r4
 8008a5c:	429c      	cmp	r4, r3
 8008a5e:	d900      	bls.n	8008a62 <_realloc_r+0x4c>
 8008a60:	001a      	movs	r2, r3
 8008a62:	0031      	movs	r1, r6
 8008a64:	0028      	movs	r0, r5
 8008a66:	f7ff ff6f 	bl	8008948 <memcpy>
 8008a6a:	0031      	movs	r1, r6
 8008a6c:	0038      	movs	r0, r7
 8008a6e:	f7ff f88d 	bl	8007b8c <_free_r>
 8008a72:	e7da      	b.n	8008a2a <_realloc_r+0x14>

08008a74 <__ascii_wctomb>:
 8008a74:	0003      	movs	r3, r0
 8008a76:	1e08      	subs	r0, r1, #0
 8008a78:	d005      	beq.n	8008a86 <__ascii_wctomb+0x12>
 8008a7a:	2aff      	cmp	r2, #255	; 0xff
 8008a7c:	d904      	bls.n	8008a88 <__ascii_wctomb+0x14>
 8008a7e:	228a      	movs	r2, #138	; 0x8a
 8008a80:	2001      	movs	r0, #1
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	4240      	negs	r0, r0
 8008a86:	4770      	bx	lr
 8008a88:	2001      	movs	r0, #1
 8008a8a:	700a      	strb	r2, [r1, #0]
 8008a8c:	e7fb      	b.n	8008a86 <__ascii_wctomb+0x12>
	...

08008a90 <fiprintf>:
 8008a90:	b40e      	push	{r1, r2, r3}
 8008a92:	b517      	push	{r0, r1, r2, r4, lr}
 8008a94:	4c05      	ldr	r4, [pc, #20]	; (8008aac <fiprintf+0x1c>)
 8008a96:	ab05      	add	r3, sp, #20
 8008a98:	cb04      	ldmia	r3!, {r2}
 8008a9a:	0001      	movs	r1, r0
 8008a9c:	6820      	ldr	r0, [r4, #0]
 8008a9e:	9301      	str	r3, [sp, #4]
 8008aa0:	f000 f83c 	bl	8008b1c <_vfiprintf_r>
 8008aa4:	bc1e      	pop	{r1, r2, r3, r4}
 8008aa6:	bc08      	pop	{r3}
 8008aa8:	b003      	add	sp, #12
 8008aaa:	4718      	bx	r3
 8008aac:	20000068 	.word	0x20000068

08008ab0 <abort>:
 8008ab0:	2006      	movs	r0, #6
 8008ab2:	b510      	push	{r4, lr}
 8008ab4:	f000 fa1e 	bl	8008ef4 <raise>
 8008ab8:	2001      	movs	r0, #1
 8008aba:	f7fa f99e 	bl	8002dfa <_exit>

08008abe <_malloc_usable_size_r>:
 8008abe:	1f0b      	subs	r3, r1, #4
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	1f18      	subs	r0, r3, #4
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	da01      	bge.n	8008acc <_malloc_usable_size_r+0xe>
 8008ac8:	580b      	ldr	r3, [r1, r0]
 8008aca:	18c0      	adds	r0, r0, r3
 8008acc:	4770      	bx	lr

08008ace <__sfputc_r>:
 8008ace:	6893      	ldr	r3, [r2, #8]
 8008ad0:	b510      	push	{r4, lr}
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	6093      	str	r3, [r2, #8]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	da04      	bge.n	8008ae4 <__sfputc_r+0x16>
 8008ada:	6994      	ldr	r4, [r2, #24]
 8008adc:	42a3      	cmp	r3, r4
 8008ade:	db07      	blt.n	8008af0 <__sfputc_r+0x22>
 8008ae0:	290a      	cmp	r1, #10
 8008ae2:	d005      	beq.n	8008af0 <__sfputc_r+0x22>
 8008ae4:	6813      	ldr	r3, [r2, #0]
 8008ae6:	1c58      	adds	r0, r3, #1
 8008ae8:	6010      	str	r0, [r2, #0]
 8008aea:	7019      	strb	r1, [r3, #0]
 8008aec:	0008      	movs	r0, r1
 8008aee:	bd10      	pop	{r4, pc}
 8008af0:	f000 f930 	bl	8008d54 <__swbuf_r>
 8008af4:	0001      	movs	r1, r0
 8008af6:	e7f9      	b.n	8008aec <__sfputc_r+0x1e>

08008af8 <__sfputs_r>:
 8008af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afa:	0006      	movs	r6, r0
 8008afc:	000f      	movs	r7, r1
 8008afe:	0014      	movs	r4, r2
 8008b00:	18d5      	adds	r5, r2, r3
 8008b02:	42ac      	cmp	r4, r5
 8008b04:	d101      	bne.n	8008b0a <__sfputs_r+0x12>
 8008b06:	2000      	movs	r0, #0
 8008b08:	e007      	b.n	8008b1a <__sfputs_r+0x22>
 8008b0a:	7821      	ldrb	r1, [r4, #0]
 8008b0c:	003a      	movs	r2, r7
 8008b0e:	0030      	movs	r0, r6
 8008b10:	f7ff ffdd 	bl	8008ace <__sfputc_r>
 8008b14:	3401      	adds	r4, #1
 8008b16:	1c43      	adds	r3, r0, #1
 8008b18:	d1f3      	bne.n	8008b02 <__sfputs_r+0xa>
 8008b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b1c <_vfiprintf_r>:
 8008b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b1e:	b0a1      	sub	sp, #132	; 0x84
 8008b20:	000f      	movs	r7, r1
 8008b22:	0015      	movs	r5, r2
 8008b24:	001e      	movs	r6, r3
 8008b26:	9003      	str	r0, [sp, #12]
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d004      	beq.n	8008b36 <_vfiprintf_r+0x1a>
 8008b2c:	6a03      	ldr	r3, [r0, #32]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d101      	bne.n	8008b36 <_vfiprintf_r+0x1a>
 8008b32:	f7fe f85b 	bl	8006bec <__sinit>
 8008b36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b38:	07db      	lsls	r3, r3, #31
 8008b3a:	d405      	bmi.n	8008b48 <_vfiprintf_r+0x2c>
 8008b3c:	89bb      	ldrh	r3, [r7, #12]
 8008b3e:	059b      	lsls	r3, r3, #22
 8008b40:	d402      	bmi.n	8008b48 <_vfiprintf_r+0x2c>
 8008b42:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008b44:	f7fe f977 	bl	8006e36 <__retarget_lock_acquire_recursive>
 8008b48:	89bb      	ldrh	r3, [r7, #12]
 8008b4a:	071b      	lsls	r3, r3, #28
 8008b4c:	d502      	bpl.n	8008b54 <_vfiprintf_r+0x38>
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d113      	bne.n	8008b7c <_vfiprintf_r+0x60>
 8008b54:	0039      	movs	r1, r7
 8008b56:	9803      	ldr	r0, [sp, #12]
 8008b58:	f000 f93e 	bl	8008dd8 <__swsetup_r>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d00d      	beq.n	8008b7c <_vfiprintf_r+0x60>
 8008b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b62:	07db      	lsls	r3, r3, #31
 8008b64:	d503      	bpl.n	8008b6e <_vfiprintf_r+0x52>
 8008b66:	2001      	movs	r0, #1
 8008b68:	4240      	negs	r0, r0
 8008b6a:	b021      	add	sp, #132	; 0x84
 8008b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b6e:	89bb      	ldrh	r3, [r7, #12]
 8008b70:	059b      	lsls	r3, r3, #22
 8008b72:	d4f8      	bmi.n	8008b66 <_vfiprintf_r+0x4a>
 8008b74:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008b76:	f7fe f95f 	bl	8006e38 <__retarget_lock_release_recursive>
 8008b7a:	e7f4      	b.n	8008b66 <_vfiprintf_r+0x4a>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	ac08      	add	r4, sp, #32
 8008b80:	6163      	str	r3, [r4, #20]
 8008b82:	3320      	adds	r3, #32
 8008b84:	7663      	strb	r3, [r4, #25]
 8008b86:	3310      	adds	r3, #16
 8008b88:	76a3      	strb	r3, [r4, #26]
 8008b8a:	9607      	str	r6, [sp, #28]
 8008b8c:	002e      	movs	r6, r5
 8008b8e:	7833      	ldrb	r3, [r6, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <_vfiprintf_r+0x7c>
 8008b94:	2b25      	cmp	r3, #37	; 0x25
 8008b96:	d148      	bne.n	8008c2a <_vfiprintf_r+0x10e>
 8008b98:	1b73      	subs	r3, r6, r5
 8008b9a:	9305      	str	r3, [sp, #20]
 8008b9c:	42ae      	cmp	r6, r5
 8008b9e:	d00b      	beq.n	8008bb8 <_vfiprintf_r+0x9c>
 8008ba0:	002a      	movs	r2, r5
 8008ba2:	0039      	movs	r1, r7
 8008ba4:	9803      	ldr	r0, [sp, #12]
 8008ba6:	f7ff ffa7 	bl	8008af8 <__sfputs_r>
 8008baa:	3001      	adds	r0, #1
 8008bac:	d100      	bne.n	8008bb0 <_vfiprintf_r+0x94>
 8008bae:	e0af      	b.n	8008d10 <_vfiprintf_r+0x1f4>
 8008bb0:	6963      	ldr	r3, [r4, #20]
 8008bb2:	9a05      	ldr	r2, [sp, #20]
 8008bb4:	189b      	adds	r3, r3, r2
 8008bb6:	6163      	str	r3, [r4, #20]
 8008bb8:	7833      	ldrb	r3, [r6, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d100      	bne.n	8008bc0 <_vfiprintf_r+0xa4>
 8008bbe:	e0a7      	b.n	8008d10 <_vfiprintf_r+0x1f4>
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	4252      	negs	r2, r2
 8008bc6:	6062      	str	r2, [r4, #4]
 8008bc8:	a904      	add	r1, sp, #16
 8008bca:	3254      	adds	r2, #84	; 0x54
 8008bcc:	1852      	adds	r2, r2, r1
 8008bce:	1c75      	adds	r5, r6, #1
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	60e3      	str	r3, [r4, #12]
 8008bd4:	60a3      	str	r3, [r4, #8]
 8008bd6:	7013      	strb	r3, [r2, #0]
 8008bd8:	65a3      	str	r3, [r4, #88]	; 0x58
 8008bda:	4b59      	ldr	r3, [pc, #356]	; (8008d40 <_vfiprintf_r+0x224>)
 8008bdc:	2205      	movs	r2, #5
 8008bde:	0018      	movs	r0, r3
 8008be0:	7829      	ldrb	r1, [r5, #0]
 8008be2:	9305      	str	r3, [sp, #20]
 8008be4:	f7fe f929 	bl	8006e3a <memchr>
 8008be8:	1c6e      	adds	r6, r5, #1
 8008bea:	2800      	cmp	r0, #0
 8008bec:	d11f      	bne.n	8008c2e <_vfiprintf_r+0x112>
 8008bee:	6822      	ldr	r2, [r4, #0]
 8008bf0:	06d3      	lsls	r3, r2, #27
 8008bf2:	d504      	bpl.n	8008bfe <_vfiprintf_r+0xe2>
 8008bf4:	2353      	movs	r3, #83	; 0x53
 8008bf6:	a904      	add	r1, sp, #16
 8008bf8:	185b      	adds	r3, r3, r1
 8008bfa:	2120      	movs	r1, #32
 8008bfc:	7019      	strb	r1, [r3, #0]
 8008bfe:	0713      	lsls	r3, r2, #28
 8008c00:	d504      	bpl.n	8008c0c <_vfiprintf_r+0xf0>
 8008c02:	2353      	movs	r3, #83	; 0x53
 8008c04:	a904      	add	r1, sp, #16
 8008c06:	185b      	adds	r3, r3, r1
 8008c08:	212b      	movs	r1, #43	; 0x2b
 8008c0a:	7019      	strb	r1, [r3, #0]
 8008c0c:	782b      	ldrb	r3, [r5, #0]
 8008c0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c10:	d016      	beq.n	8008c40 <_vfiprintf_r+0x124>
 8008c12:	002e      	movs	r6, r5
 8008c14:	2100      	movs	r1, #0
 8008c16:	200a      	movs	r0, #10
 8008c18:	68e3      	ldr	r3, [r4, #12]
 8008c1a:	7832      	ldrb	r2, [r6, #0]
 8008c1c:	1c75      	adds	r5, r6, #1
 8008c1e:	3a30      	subs	r2, #48	; 0x30
 8008c20:	2a09      	cmp	r2, #9
 8008c22:	d94e      	bls.n	8008cc2 <_vfiprintf_r+0x1a6>
 8008c24:	2900      	cmp	r1, #0
 8008c26:	d111      	bne.n	8008c4c <_vfiprintf_r+0x130>
 8008c28:	e017      	b.n	8008c5a <_vfiprintf_r+0x13e>
 8008c2a:	3601      	adds	r6, #1
 8008c2c:	e7af      	b.n	8008b8e <_vfiprintf_r+0x72>
 8008c2e:	9b05      	ldr	r3, [sp, #20]
 8008c30:	6822      	ldr	r2, [r4, #0]
 8008c32:	1ac0      	subs	r0, r0, r3
 8008c34:	2301      	movs	r3, #1
 8008c36:	4083      	lsls	r3, r0
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	0035      	movs	r5, r6
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	e7cc      	b.n	8008bda <_vfiprintf_r+0xbe>
 8008c40:	9b07      	ldr	r3, [sp, #28]
 8008c42:	1d19      	adds	r1, r3, #4
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	9107      	str	r1, [sp, #28]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	db01      	blt.n	8008c50 <_vfiprintf_r+0x134>
 8008c4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c4e:	e004      	b.n	8008c5a <_vfiprintf_r+0x13e>
 8008c50:	425b      	negs	r3, r3
 8008c52:	60e3      	str	r3, [r4, #12]
 8008c54:	2302      	movs	r3, #2
 8008c56:	4313      	orrs	r3, r2
 8008c58:	6023      	str	r3, [r4, #0]
 8008c5a:	7833      	ldrb	r3, [r6, #0]
 8008c5c:	2b2e      	cmp	r3, #46	; 0x2e
 8008c5e:	d10a      	bne.n	8008c76 <_vfiprintf_r+0x15a>
 8008c60:	7873      	ldrb	r3, [r6, #1]
 8008c62:	2b2a      	cmp	r3, #42	; 0x2a
 8008c64:	d135      	bne.n	8008cd2 <_vfiprintf_r+0x1b6>
 8008c66:	9b07      	ldr	r3, [sp, #28]
 8008c68:	3602      	adds	r6, #2
 8008c6a:	1d1a      	adds	r2, r3, #4
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	9207      	str	r2, [sp, #28]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	db2b      	blt.n	8008ccc <_vfiprintf_r+0x1b0>
 8008c74:	9309      	str	r3, [sp, #36]	; 0x24
 8008c76:	4d33      	ldr	r5, [pc, #204]	; (8008d44 <_vfiprintf_r+0x228>)
 8008c78:	2203      	movs	r2, #3
 8008c7a:	0028      	movs	r0, r5
 8008c7c:	7831      	ldrb	r1, [r6, #0]
 8008c7e:	f7fe f8dc 	bl	8006e3a <memchr>
 8008c82:	2800      	cmp	r0, #0
 8008c84:	d006      	beq.n	8008c94 <_vfiprintf_r+0x178>
 8008c86:	2340      	movs	r3, #64	; 0x40
 8008c88:	1b40      	subs	r0, r0, r5
 8008c8a:	4083      	lsls	r3, r0
 8008c8c:	6822      	ldr	r2, [r4, #0]
 8008c8e:	3601      	adds	r6, #1
 8008c90:	4313      	orrs	r3, r2
 8008c92:	6023      	str	r3, [r4, #0]
 8008c94:	7831      	ldrb	r1, [r6, #0]
 8008c96:	2206      	movs	r2, #6
 8008c98:	482b      	ldr	r0, [pc, #172]	; (8008d48 <_vfiprintf_r+0x22c>)
 8008c9a:	1c75      	adds	r5, r6, #1
 8008c9c:	7621      	strb	r1, [r4, #24]
 8008c9e:	f7fe f8cc 	bl	8006e3a <memchr>
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	d043      	beq.n	8008d2e <_vfiprintf_r+0x212>
 8008ca6:	4b29      	ldr	r3, [pc, #164]	; (8008d4c <_vfiprintf_r+0x230>)
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d125      	bne.n	8008cf8 <_vfiprintf_r+0x1dc>
 8008cac:	2207      	movs	r2, #7
 8008cae:	9b07      	ldr	r3, [sp, #28]
 8008cb0:	3307      	adds	r3, #7
 8008cb2:	4393      	bics	r3, r2
 8008cb4:	3308      	adds	r3, #8
 8008cb6:	9307      	str	r3, [sp, #28]
 8008cb8:	6963      	ldr	r3, [r4, #20]
 8008cba:	9a04      	ldr	r2, [sp, #16]
 8008cbc:	189b      	adds	r3, r3, r2
 8008cbe:	6163      	str	r3, [r4, #20]
 8008cc0:	e764      	b.n	8008b8c <_vfiprintf_r+0x70>
 8008cc2:	4343      	muls	r3, r0
 8008cc4:	002e      	movs	r6, r5
 8008cc6:	2101      	movs	r1, #1
 8008cc8:	189b      	adds	r3, r3, r2
 8008cca:	e7a6      	b.n	8008c1a <_vfiprintf_r+0xfe>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	425b      	negs	r3, r3
 8008cd0:	e7d0      	b.n	8008c74 <_vfiprintf_r+0x158>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	200a      	movs	r0, #10
 8008cd6:	001a      	movs	r2, r3
 8008cd8:	3601      	adds	r6, #1
 8008cda:	6063      	str	r3, [r4, #4]
 8008cdc:	7831      	ldrb	r1, [r6, #0]
 8008cde:	1c75      	adds	r5, r6, #1
 8008ce0:	3930      	subs	r1, #48	; 0x30
 8008ce2:	2909      	cmp	r1, #9
 8008ce4:	d903      	bls.n	8008cee <_vfiprintf_r+0x1d2>
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d0c5      	beq.n	8008c76 <_vfiprintf_r+0x15a>
 8008cea:	9209      	str	r2, [sp, #36]	; 0x24
 8008cec:	e7c3      	b.n	8008c76 <_vfiprintf_r+0x15a>
 8008cee:	4342      	muls	r2, r0
 8008cf0:	002e      	movs	r6, r5
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	1852      	adds	r2, r2, r1
 8008cf6:	e7f1      	b.n	8008cdc <_vfiprintf_r+0x1c0>
 8008cf8:	aa07      	add	r2, sp, #28
 8008cfa:	9200      	str	r2, [sp, #0]
 8008cfc:	0021      	movs	r1, r4
 8008cfe:	003a      	movs	r2, r7
 8008d00:	4b13      	ldr	r3, [pc, #76]	; (8008d50 <_vfiprintf_r+0x234>)
 8008d02:	9803      	ldr	r0, [sp, #12]
 8008d04:	f7fd fb0c 	bl	8006320 <_printf_float>
 8008d08:	9004      	str	r0, [sp, #16]
 8008d0a:	9b04      	ldr	r3, [sp, #16]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	d1d3      	bne.n	8008cb8 <_vfiprintf_r+0x19c>
 8008d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d12:	07db      	lsls	r3, r3, #31
 8008d14:	d405      	bmi.n	8008d22 <_vfiprintf_r+0x206>
 8008d16:	89bb      	ldrh	r3, [r7, #12]
 8008d18:	059b      	lsls	r3, r3, #22
 8008d1a:	d402      	bmi.n	8008d22 <_vfiprintf_r+0x206>
 8008d1c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008d1e:	f7fe f88b 	bl	8006e38 <__retarget_lock_release_recursive>
 8008d22:	89bb      	ldrh	r3, [r7, #12]
 8008d24:	065b      	lsls	r3, r3, #25
 8008d26:	d500      	bpl.n	8008d2a <_vfiprintf_r+0x20e>
 8008d28:	e71d      	b.n	8008b66 <_vfiprintf_r+0x4a>
 8008d2a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008d2c:	e71d      	b.n	8008b6a <_vfiprintf_r+0x4e>
 8008d2e:	aa07      	add	r2, sp, #28
 8008d30:	9200      	str	r2, [sp, #0]
 8008d32:	0021      	movs	r1, r4
 8008d34:	003a      	movs	r2, r7
 8008d36:	4b06      	ldr	r3, [pc, #24]	; (8008d50 <_vfiprintf_r+0x234>)
 8008d38:	9803      	ldr	r0, [sp, #12]
 8008d3a:	f7fd fdb7 	bl	80068ac <_printf_i>
 8008d3e:	e7e3      	b.n	8008d08 <_vfiprintf_r+0x1ec>
 8008d40:	080093e4 	.word	0x080093e4
 8008d44:	080093ea 	.word	0x080093ea
 8008d48:	080093ee 	.word	0x080093ee
 8008d4c:	08006321 	.word	0x08006321
 8008d50:	08008af9 	.word	0x08008af9

08008d54 <__swbuf_r>:
 8008d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d56:	0006      	movs	r6, r0
 8008d58:	000d      	movs	r5, r1
 8008d5a:	0014      	movs	r4, r2
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d004      	beq.n	8008d6a <__swbuf_r+0x16>
 8008d60:	6a03      	ldr	r3, [r0, #32]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <__swbuf_r+0x16>
 8008d66:	f7fd ff41 	bl	8006bec <__sinit>
 8008d6a:	69a3      	ldr	r3, [r4, #24]
 8008d6c:	60a3      	str	r3, [r4, #8]
 8008d6e:	89a3      	ldrh	r3, [r4, #12]
 8008d70:	071b      	lsls	r3, r3, #28
 8008d72:	d528      	bpl.n	8008dc6 <__swbuf_r+0x72>
 8008d74:	6923      	ldr	r3, [r4, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d025      	beq.n	8008dc6 <__swbuf_r+0x72>
 8008d7a:	6923      	ldr	r3, [r4, #16]
 8008d7c:	6820      	ldr	r0, [r4, #0]
 8008d7e:	b2ef      	uxtb	r7, r5
 8008d80:	1ac0      	subs	r0, r0, r3
 8008d82:	6963      	ldr	r3, [r4, #20]
 8008d84:	b2ed      	uxtb	r5, r5
 8008d86:	4283      	cmp	r3, r0
 8008d88:	dc05      	bgt.n	8008d96 <__swbuf_r+0x42>
 8008d8a:	0021      	movs	r1, r4
 8008d8c:	0030      	movs	r0, r6
 8008d8e:	f7ff fd8b 	bl	80088a8 <_fflush_r>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	d11d      	bne.n	8008dd2 <__swbuf_r+0x7e>
 8008d96:	68a3      	ldr	r3, [r4, #8]
 8008d98:	3001      	adds	r0, #1
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	60a3      	str	r3, [r4, #8]
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	1c5a      	adds	r2, r3, #1
 8008da2:	6022      	str	r2, [r4, #0]
 8008da4:	701f      	strb	r7, [r3, #0]
 8008da6:	6963      	ldr	r3, [r4, #20]
 8008da8:	4283      	cmp	r3, r0
 8008daa:	d004      	beq.n	8008db6 <__swbuf_r+0x62>
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	07db      	lsls	r3, r3, #31
 8008db0:	d507      	bpl.n	8008dc2 <__swbuf_r+0x6e>
 8008db2:	2d0a      	cmp	r5, #10
 8008db4:	d105      	bne.n	8008dc2 <__swbuf_r+0x6e>
 8008db6:	0021      	movs	r1, r4
 8008db8:	0030      	movs	r0, r6
 8008dba:	f7ff fd75 	bl	80088a8 <_fflush_r>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	d107      	bne.n	8008dd2 <__swbuf_r+0x7e>
 8008dc2:	0028      	movs	r0, r5
 8008dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc6:	0021      	movs	r1, r4
 8008dc8:	0030      	movs	r0, r6
 8008dca:	f000 f805 	bl	8008dd8 <__swsetup_r>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d0d3      	beq.n	8008d7a <__swbuf_r+0x26>
 8008dd2:	2501      	movs	r5, #1
 8008dd4:	426d      	negs	r5, r5
 8008dd6:	e7f4      	b.n	8008dc2 <__swbuf_r+0x6e>

08008dd8 <__swsetup_r>:
 8008dd8:	4b30      	ldr	r3, [pc, #192]	; (8008e9c <__swsetup_r+0xc4>)
 8008dda:	b570      	push	{r4, r5, r6, lr}
 8008ddc:	0005      	movs	r5, r0
 8008dde:	6818      	ldr	r0, [r3, #0]
 8008de0:	000c      	movs	r4, r1
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d004      	beq.n	8008df0 <__swsetup_r+0x18>
 8008de6:	6a03      	ldr	r3, [r0, #32]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <__swsetup_r+0x18>
 8008dec:	f7fd fefe 	bl	8006bec <__sinit>
 8008df0:	230c      	movs	r3, #12
 8008df2:	5ee2      	ldrsh	r2, [r4, r3]
 8008df4:	b293      	uxth	r3, r2
 8008df6:	0711      	lsls	r1, r2, #28
 8008df8:	d423      	bmi.n	8008e42 <__swsetup_r+0x6a>
 8008dfa:	06d9      	lsls	r1, r3, #27
 8008dfc:	d407      	bmi.n	8008e0e <__swsetup_r+0x36>
 8008dfe:	2309      	movs	r3, #9
 8008e00:	2001      	movs	r0, #1
 8008e02:	602b      	str	r3, [r5, #0]
 8008e04:	3337      	adds	r3, #55	; 0x37
 8008e06:	4313      	orrs	r3, r2
 8008e08:	81a3      	strh	r3, [r4, #12]
 8008e0a:	4240      	negs	r0, r0
 8008e0c:	bd70      	pop	{r4, r5, r6, pc}
 8008e0e:	075b      	lsls	r3, r3, #29
 8008e10:	d513      	bpl.n	8008e3a <__swsetup_r+0x62>
 8008e12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e14:	2900      	cmp	r1, #0
 8008e16:	d008      	beq.n	8008e2a <__swsetup_r+0x52>
 8008e18:	0023      	movs	r3, r4
 8008e1a:	3344      	adds	r3, #68	; 0x44
 8008e1c:	4299      	cmp	r1, r3
 8008e1e:	d002      	beq.n	8008e26 <__swsetup_r+0x4e>
 8008e20:	0028      	movs	r0, r5
 8008e22:	f7fe feb3 	bl	8007b8c <_free_r>
 8008e26:	2300      	movs	r3, #0
 8008e28:	6363      	str	r3, [r4, #52]	; 0x34
 8008e2a:	2224      	movs	r2, #36	; 0x24
 8008e2c:	89a3      	ldrh	r3, [r4, #12]
 8008e2e:	4393      	bics	r3, r2
 8008e30:	81a3      	strh	r3, [r4, #12]
 8008e32:	2300      	movs	r3, #0
 8008e34:	6063      	str	r3, [r4, #4]
 8008e36:	6923      	ldr	r3, [r4, #16]
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	2308      	movs	r3, #8
 8008e3c:	89a2      	ldrh	r2, [r4, #12]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	81a3      	strh	r3, [r4, #12]
 8008e42:	6923      	ldr	r3, [r4, #16]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d10b      	bne.n	8008e60 <__swsetup_r+0x88>
 8008e48:	21a0      	movs	r1, #160	; 0xa0
 8008e4a:	2280      	movs	r2, #128	; 0x80
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	0089      	lsls	r1, r1, #2
 8008e50:	0092      	lsls	r2, r2, #2
 8008e52:	400b      	ands	r3, r1
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d003      	beq.n	8008e60 <__swsetup_r+0x88>
 8008e58:	0021      	movs	r1, r4
 8008e5a:	0028      	movs	r0, r5
 8008e5c:	f000 f892 	bl	8008f84 <__smakebuf_r>
 8008e60:	220c      	movs	r2, #12
 8008e62:	5ea3      	ldrsh	r3, [r4, r2]
 8008e64:	2001      	movs	r0, #1
 8008e66:	001a      	movs	r2, r3
 8008e68:	b299      	uxth	r1, r3
 8008e6a:	4002      	ands	r2, r0
 8008e6c:	4203      	tst	r3, r0
 8008e6e:	d00f      	beq.n	8008e90 <__swsetup_r+0xb8>
 8008e70:	2200      	movs	r2, #0
 8008e72:	60a2      	str	r2, [r4, #8]
 8008e74:	6962      	ldr	r2, [r4, #20]
 8008e76:	4252      	negs	r2, r2
 8008e78:	61a2      	str	r2, [r4, #24]
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	6922      	ldr	r2, [r4, #16]
 8008e7e:	4282      	cmp	r2, r0
 8008e80:	d1c4      	bne.n	8008e0c <__swsetup_r+0x34>
 8008e82:	0609      	lsls	r1, r1, #24
 8008e84:	d5c2      	bpl.n	8008e0c <__swsetup_r+0x34>
 8008e86:	2240      	movs	r2, #64	; 0x40
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	81a3      	strh	r3, [r4, #12]
 8008e8c:	3801      	subs	r0, #1
 8008e8e:	e7bd      	b.n	8008e0c <__swsetup_r+0x34>
 8008e90:	0788      	lsls	r0, r1, #30
 8008e92:	d400      	bmi.n	8008e96 <__swsetup_r+0xbe>
 8008e94:	6962      	ldr	r2, [r4, #20]
 8008e96:	60a2      	str	r2, [r4, #8]
 8008e98:	e7ef      	b.n	8008e7a <__swsetup_r+0xa2>
 8008e9a:	46c0      	nop			; (mov r8, r8)
 8008e9c:	20000068 	.word	0x20000068

08008ea0 <_raise_r>:
 8008ea0:	b570      	push	{r4, r5, r6, lr}
 8008ea2:	0004      	movs	r4, r0
 8008ea4:	000d      	movs	r5, r1
 8008ea6:	291f      	cmp	r1, #31
 8008ea8:	d904      	bls.n	8008eb4 <_raise_r+0x14>
 8008eaa:	2316      	movs	r3, #22
 8008eac:	6003      	str	r3, [r0, #0]
 8008eae:	2001      	movs	r0, #1
 8008eb0:	4240      	negs	r0, r0
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d004      	beq.n	8008ec4 <_raise_r+0x24>
 8008eba:	008a      	lsls	r2, r1, #2
 8008ebc:	189b      	adds	r3, r3, r2
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	2a00      	cmp	r2, #0
 8008ec2:	d108      	bne.n	8008ed6 <_raise_r+0x36>
 8008ec4:	0020      	movs	r0, r4
 8008ec6:	f000 f831 	bl	8008f2c <_getpid_r>
 8008eca:	002a      	movs	r2, r5
 8008ecc:	0001      	movs	r1, r0
 8008ece:	0020      	movs	r0, r4
 8008ed0:	f000 f81a 	bl	8008f08 <_kill_r>
 8008ed4:	e7ed      	b.n	8008eb2 <_raise_r+0x12>
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	2a01      	cmp	r2, #1
 8008eda:	d0ea      	beq.n	8008eb2 <_raise_r+0x12>
 8008edc:	1c51      	adds	r1, r2, #1
 8008ede:	d103      	bne.n	8008ee8 <_raise_r+0x48>
 8008ee0:	2316      	movs	r3, #22
 8008ee2:	3001      	adds	r0, #1
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	e7e4      	b.n	8008eb2 <_raise_r+0x12>
 8008ee8:	2400      	movs	r4, #0
 8008eea:	0028      	movs	r0, r5
 8008eec:	601c      	str	r4, [r3, #0]
 8008eee:	4790      	blx	r2
 8008ef0:	0020      	movs	r0, r4
 8008ef2:	e7de      	b.n	8008eb2 <_raise_r+0x12>

08008ef4 <raise>:
 8008ef4:	b510      	push	{r4, lr}
 8008ef6:	4b03      	ldr	r3, [pc, #12]	; (8008f04 <raise+0x10>)
 8008ef8:	0001      	movs	r1, r0
 8008efa:	6818      	ldr	r0, [r3, #0]
 8008efc:	f7ff ffd0 	bl	8008ea0 <_raise_r>
 8008f00:	bd10      	pop	{r4, pc}
 8008f02:	46c0      	nop			; (mov r8, r8)
 8008f04:	20000068 	.word	0x20000068

08008f08 <_kill_r>:
 8008f08:	2300      	movs	r3, #0
 8008f0a:	b570      	push	{r4, r5, r6, lr}
 8008f0c:	4d06      	ldr	r5, [pc, #24]	; (8008f28 <_kill_r+0x20>)
 8008f0e:	0004      	movs	r4, r0
 8008f10:	0008      	movs	r0, r1
 8008f12:	0011      	movs	r1, r2
 8008f14:	602b      	str	r3, [r5, #0]
 8008f16:	f7f9 ff60 	bl	8002dda <_kill>
 8008f1a:	1c43      	adds	r3, r0, #1
 8008f1c:	d103      	bne.n	8008f26 <_kill_r+0x1e>
 8008f1e:	682b      	ldr	r3, [r5, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d000      	beq.n	8008f26 <_kill_r+0x1e>
 8008f24:	6023      	str	r3, [r4, #0]
 8008f26:	bd70      	pop	{r4, r5, r6, pc}
 8008f28:	20000840 	.word	0x20000840

08008f2c <_getpid_r>:
 8008f2c:	b510      	push	{r4, lr}
 8008f2e:	f7f9 ff4e 	bl	8002dce <_getpid>
 8008f32:	bd10      	pop	{r4, pc}

08008f34 <__swhatbuf_r>:
 8008f34:	b570      	push	{r4, r5, r6, lr}
 8008f36:	000e      	movs	r6, r1
 8008f38:	001d      	movs	r5, r3
 8008f3a:	230e      	movs	r3, #14
 8008f3c:	5ec9      	ldrsh	r1, [r1, r3]
 8008f3e:	0014      	movs	r4, r2
 8008f40:	b096      	sub	sp, #88	; 0x58
 8008f42:	2900      	cmp	r1, #0
 8008f44:	da0c      	bge.n	8008f60 <__swhatbuf_r+0x2c>
 8008f46:	89b2      	ldrh	r2, [r6, #12]
 8008f48:	2380      	movs	r3, #128	; 0x80
 8008f4a:	0011      	movs	r1, r2
 8008f4c:	4019      	ands	r1, r3
 8008f4e:	421a      	tst	r2, r3
 8008f50:	d013      	beq.n	8008f7a <__swhatbuf_r+0x46>
 8008f52:	2100      	movs	r1, #0
 8008f54:	3b40      	subs	r3, #64	; 0x40
 8008f56:	2000      	movs	r0, #0
 8008f58:	6029      	str	r1, [r5, #0]
 8008f5a:	6023      	str	r3, [r4, #0]
 8008f5c:	b016      	add	sp, #88	; 0x58
 8008f5e:	bd70      	pop	{r4, r5, r6, pc}
 8008f60:	466a      	mov	r2, sp
 8008f62:	f000 f84d 	bl	8009000 <_fstat_r>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	dbed      	blt.n	8008f46 <__swhatbuf_r+0x12>
 8008f6a:	23f0      	movs	r3, #240	; 0xf0
 8008f6c:	9901      	ldr	r1, [sp, #4]
 8008f6e:	021b      	lsls	r3, r3, #8
 8008f70:	4019      	ands	r1, r3
 8008f72:	4b03      	ldr	r3, [pc, #12]	; (8008f80 <__swhatbuf_r+0x4c>)
 8008f74:	18c9      	adds	r1, r1, r3
 8008f76:	424b      	negs	r3, r1
 8008f78:	4159      	adcs	r1, r3
 8008f7a:	2380      	movs	r3, #128	; 0x80
 8008f7c:	00db      	lsls	r3, r3, #3
 8008f7e:	e7ea      	b.n	8008f56 <__swhatbuf_r+0x22>
 8008f80:	ffffe000 	.word	0xffffe000

08008f84 <__smakebuf_r>:
 8008f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f86:	2602      	movs	r6, #2
 8008f88:	898b      	ldrh	r3, [r1, #12]
 8008f8a:	0005      	movs	r5, r0
 8008f8c:	000c      	movs	r4, r1
 8008f8e:	4233      	tst	r3, r6
 8008f90:	d006      	beq.n	8008fa0 <__smakebuf_r+0x1c>
 8008f92:	0023      	movs	r3, r4
 8008f94:	3347      	adds	r3, #71	; 0x47
 8008f96:	6023      	str	r3, [r4, #0]
 8008f98:	6123      	str	r3, [r4, #16]
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	6163      	str	r3, [r4, #20]
 8008f9e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008fa0:	466a      	mov	r2, sp
 8008fa2:	ab01      	add	r3, sp, #4
 8008fa4:	f7ff ffc6 	bl	8008f34 <__swhatbuf_r>
 8008fa8:	9900      	ldr	r1, [sp, #0]
 8008faa:	0007      	movs	r7, r0
 8008fac:	0028      	movs	r0, r5
 8008fae:	f7fe fe63 	bl	8007c78 <_malloc_r>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d108      	bne.n	8008fc8 <__smakebuf_r+0x44>
 8008fb6:	220c      	movs	r2, #12
 8008fb8:	5ea3      	ldrsh	r3, [r4, r2]
 8008fba:	059a      	lsls	r2, r3, #22
 8008fbc:	d4ef      	bmi.n	8008f9e <__smakebuf_r+0x1a>
 8008fbe:	2203      	movs	r2, #3
 8008fc0:	4393      	bics	r3, r2
 8008fc2:	431e      	orrs	r6, r3
 8008fc4:	81a6      	strh	r6, [r4, #12]
 8008fc6:	e7e4      	b.n	8008f92 <__smakebuf_r+0xe>
 8008fc8:	2380      	movs	r3, #128	; 0x80
 8008fca:	89a2      	ldrh	r2, [r4, #12]
 8008fcc:	6020      	str	r0, [r4, #0]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	81a3      	strh	r3, [r4, #12]
 8008fd2:	9b00      	ldr	r3, [sp, #0]
 8008fd4:	6120      	str	r0, [r4, #16]
 8008fd6:	6163      	str	r3, [r4, #20]
 8008fd8:	9b01      	ldr	r3, [sp, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00c      	beq.n	8008ff8 <__smakebuf_r+0x74>
 8008fde:	0028      	movs	r0, r5
 8008fe0:	230e      	movs	r3, #14
 8008fe2:	5ee1      	ldrsh	r1, [r4, r3]
 8008fe4:	f000 f81e 	bl	8009024 <_isatty_r>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d005      	beq.n	8008ff8 <__smakebuf_r+0x74>
 8008fec:	2303      	movs	r3, #3
 8008fee:	89a2      	ldrh	r2, [r4, #12]
 8008ff0:	439a      	bics	r2, r3
 8008ff2:	3b02      	subs	r3, #2
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	81a3      	strh	r3, [r4, #12]
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	433b      	orrs	r3, r7
 8008ffc:	81a3      	strh	r3, [r4, #12]
 8008ffe:	e7ce      	b.n	8008f9e <__smakebuf_r+0x1a>

08009000 <_fstat_r>:
 8009000:	2300      	movs	r3, #0
 8009002:	b570      	push	{r4, r5, r6, lr}
 8009004:	4d06      	ldr	r5, [pc, #24]	; (8009020 <_fstat_r+0x20>)
 8009006:	0004      	movs	r4, r0
 8009008:	0008      	movs	r0, r1
 800900a:	0011      	movs	r1, r2
 800900c:	602b      	str	r3, [r5, #0]
 800900e:	f7f9 ff43 	bl	8002e98 <_fstat>
 8009012:	1c43      	adds	r3, r0, #1
 8009014:	d103      	bne.n	800901e <_fstat_r+0x1e>
 8009016:	682b      	ldr	r3, [r5, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d000      	beq.n	800901e <_fstat_r+0x1e>
 800901c:	6023      	str	r3, [r4, #0]
 800901e:	bd70      	pop	{r4, r5, r6, pc}
 8009020:	20000840 	.word	0x20000840

08009024 <_isatty_r>:
 8009024:	2300      	movs	r3, #0
 8009026:	b570      	push	{r4, r5, r6, lr}
 8009028:	4d06      	ldr	r5, [pc, #24]	; (8009044 <_isatty_r+0x20>)
 800902a:	0004      	movs	r4, r0
 800902c:	0008      	movs	r0, r1
 800902e:	602b      	str	r3, [r5, #0]
 8009030:	f7f9 ff40 	bl	8002eb4 <_isatty>
 8009034:	1c43      	adds	r3, r0, #1
 8009036:	d103      	bne.n	8009040 <_isatty_r+0x1c>
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d000      	beq.n	8009040 <_isatty_r+0x1c>
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	bd70      	pop	{r4, r5, r6, pc}
 8009042:	46c0      	nop			; (mov r8, r8)
 8009044:	20000840 	.word	0x20000840

08009048 <_init>:
 8009048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904a:	46c0      	nop			; (mov r8, r8)
 800904c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904e:	bc08      	pop	{r3}
 8009050:	469e      	mov	lr, r3
 8009052:	4770      	bx	lr

08009054 <_fini>:
 8009054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009056:	46c0      	nop			; (mov r8, r8)
 8009058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800905a:	bc08      	pop	{r3}
 800905c:	469e      	mov	lr, r3
 800905e:	4770      	bx	lr
