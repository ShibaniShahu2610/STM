
19_USB_HID_KEYBOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007698  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08007758  08007758  00017758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800781c  0800781c  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  0800781c  0800781c  0001781c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007824  08007824  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007824  08007824  00017824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007828  08007828  00017828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  0800782c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f8  20000158  08007984  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000950  08007984  00020950  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af6a  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000265f  00000000  00000000  0002b12d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002d790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000073a  00000000  00000000  0002e170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000152fd  00000000  00000000  0002e8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000da94  00000000  00000000  00043ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076f88  00000000  00000000  0005163b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002190  00000000  00000000  000c85c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000ca754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000158 	.word	0x20000158
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007740 	.word	0x08007740

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000015c 	.word	0x2000015c
 8000104:	08007740 	.word	0x08007740

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 f932 	bl	8000714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f836 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f8aa 	bl	800060c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004b8:	f006 fc94 	bl	8006de4 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HIDkeyBoard.MODIFIER = 0x02;	// print char in capital
 80004bc:	4b16      	ldr	r3, [pc, #88]	; (8000518 <main+0x70>)
 80004be:	2202      	movs	r2, #2
 80004c0:	701a      	strb	r2, [r3, #0]
	  HIDkeyBoard.KEYCODE1 = 0x04;	// print A
 80004c2:	4b15      	ldr	r3, [pc, #84]	; (8000518 <main+0x70>)
 80004c4:	2204      	movs	r2, #4
 80004c6:	709a      	strb	r2, [r3, #2]
	  HIDkeyBoard.KEYCODE2 = 0x05;	// print B
 80004c8:	4b13      	ldr	r3, [pc, #76]	; (8000518 <main+0x70>)
 80004ca:	2205      	movs	r2, #5
 80004cc:	70da      	strb	r2, [r3, #3]
	  HIDkeyBoard.KEYCODE3 = 0x06;	// print C
 80004ce:	4b12      	ldr	r3, [pc, #72]	; (8000518 <main+0x70>)
 80004d0:	2206      	movs	r2, #6
 80004d2:	711a      	strb	r2, [r3, #4]
	  USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *) &HIDkeyBoard, sizeof(HIDkeyBoard));
 80004d4:	4910      	ldr	r1, [pc, #64]	; (8000518 <main+0x70>)
 80004d6:	4b11      	ldr	r3, [pc, #68]	; (800051c <main+0x74>)
 80004d8:	2208      	movs	r2, #8
 80004da:	0018      	movs	r0, r3
 80004dc:	f005 fa28 	bl	8005930 <USBD_HID_SendReport>
	  HAL_Delay(50);
 80004e0:	2032      	movs	r0, #50	; 0x32
 80004e2:	f000 f987 	bl	80007f4 <HAL_Delay>
	  HIDkeyBoard.MODIFIER = 0x00;	// Release shift
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <main+0x70>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
	  HIDkeyBoard.KEYCODE1 = 0x00;	// Release key
 80004ec:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <main+0x70>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	709a      	strb	r2, [r3, #2]
	  HIDkeyBoard.KEYCODE2 = 0x00;	// Release key
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <main+0x70>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	70da      	strb	r2, [r3, #3]
	  HIDkeyBoard.KEYCODE3 = 0x00;	// Release key
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <main+0x70>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	711a      	strb	r2, [r3, #4]
	  USBD_HID_SendReport(&hUsbDeviceFS,(uint8_t *) &HIDkeyBoard, sizeof(HIDkeyBoard));
 80004fe:	4906      	ldr	r1, [pc, #24]	; (8000518 <main+0x70>)
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <main+0x74>)
 8000502:	2208      	movs	r2, #8
 8000504:	0018      	movs	r0, r3
 8000506:	f005 fa13 	bl	8005930 <USBD_HID_SendReport>
	  HAL_Delay(1000);
 800050a:	23fa      	movs	r3, #250	; 0xfa
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	0018      	movs	r0, r3
 8000510:	f000 f970 	bl	80007f4 <HAL_Delay>
	  HIDkeyBoard.MODIFIER = 0x02;	// print char in capital
 8000514:	e7d2      	b.n	80004bc <main+0x14>
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	20000174 	.word	0x20000174
 800051c:	20000184 	.word	0x20000184

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	b09d      	sub	sp, #116	; 0x74
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	2438      	movs	r4, #56	; 0x38
 8000528:	193b      	adds	r3, r7, r4
 800052a:	0018      	movs	r0, r3
 800052c:	2338      	movs	r3, #56	; 0x38
 800052e:	001a      	movs	r2, r3
 8000530:	2100      	movs	r1, #0
 8000532:	f007 f8d9 	bl	80076e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000536:	2324      	movs	r3, #36	; 0x24
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	0018      	movs	r0, r3
 800053c:	2314      	movs	r3, #20
 800053e:	001a      	movs	r2, r3
 8000540:	2100      	movs	r1, #0
 8000542:	f007 f8d1 	bl	80076e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000546:	003b      	movs	r3, r7
 8000548:	0018      	movs	r0, r3
 800054a:	2324      	movs	r3, #36	; 0x24
 800054c:	001a      	movs	r2, r3
 800054e:	2100      	movs	r1, #0
 8000550:	f007 f8ca 	bl	80076e8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	4b2b      	ldr	r3, [pc, #172]	; (8000604 <SystemClock_Config+0xe4>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a2b      	ldr	r2, [pc, #172]	; (8000608 <SystemClock_Config+0xe8>)
 800055a:	401a      	ands	r2, r3
 800055c:	4b29      	ldr	r3, [pc, #164]	; (8000604 <SystemClock_Config+0xe4>)
 800055e:	2180      	movs	r1, #128	; 0x80
 8000560:	0109      	lsls	r1, r1, #4
 8000562:	430a      	orrs	r2, r1
 8000564:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000566:	0021      	movs	r1, r4
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2222      	movs	r2, #34	; 0x22
 800056c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2201      	movs	r2, #1
 8000572:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2210      	movs	r2, #16
 8000578:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2201      	movs	r2, #1
 800057e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2202      	movs	r2, #2
 8000584:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2200      	movs	r2, #0
 800058a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	02d2      	lsls	r2, r2, #11
 8000592:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	03d2      	lsls	r2, r2, #15
 800059a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	187b      	adds	r3, r7, r1
 800059e:	0018      	movs	r0, r3
 80005a0:	f002 f862 	bl	8002668 <HAL_RCC_OscConfig>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005a8:	f000 f846 	bl	8000638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	2124      	movs	r1, #36	; 0x24
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	220f      	movs	r2, #15
 80005b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2203      	movs	r2, #3
 80005b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2101      	movs	r1, #1
 80005d0:	0018      	movs	r0, r3
 80005d2:	f002 fc0d 	bl	8002df0 <HAL_RCC_ClockConfig>
 80005d6:	1e03      	subs	r3, r0, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005da:	f000 f82d 	bl	8000638 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005de:	003b      	movs	r3, r7
 80005e0:	2240      	movs	r2, #64	; 0x40
 80005e2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80005e4:	003b      	movs	r3, r7
 80005e6:	2280      	movs	r2, #128	; 0x80
 80005e8:	04d2      	lsls	r2, r2, #19
 80005ea:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ec:	003b      	movs	r3, r7
 80005ee:	0018      	movs	r0, r3
 80005f0:	f002 fdec 	bl	80031cc <HAL_RCCEx_PeriphCLKConfig>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80005f8:	f000 f81e 	bl	8000638 <Error_Handler>
  }
}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	b01d      	add	sp, #116	; 0x74
 8000602:	bd90      	pop	{r4, r7, pc}
 8000604:	40007000 	.word	0x40007000
 8000608:	ffffe7ff 	.word	0xffffe7ff

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <MX_GPIO_Init+0x28>)
 8000614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <MX_GPIO_Init+0x28>)
 8000618:	2101      	movs	r1, #1
 800061a:	430a      	orrs	r2, r1
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <MX_GPIO_Init+0x28>)
 8000620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000622:	2201      	movs	r2, #1
 8000624:	4013      	ands	r3, r2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b002      	add	sp, #8
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	40021000 	.word	0x40021000

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000640:	e7fe      	b.n	8000640 <Error_Handler+0x8>
	...

08000644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <HAL_MspInit+0x24>)
 800064a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_MspInit+0x24>)
 800064e:	2101      	movs	r1, #1
 8000650:	430a      	orrs	r2, r1
 8000652:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <HAL_MspInit+0x24>)
 8000656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <HAL_MspInit+0x24>)
 800065a:	2180      	movs	r1, #128	; 0x80
 800065c:	0549      	lsls	r1, r1, #21
 800065e:	430a      	orrs	r2, r1
 8000660:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40021000 	.word	0x40021000

0800066c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000670:	e7fe      	b.n	8000670 <NMI_Handler+0x4>

08000672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <HardFault_Handler+0x4>

08000678 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000690:	f000 f894 	bl	80007bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <USB_IRQHandler+0x14>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 face 	bl	8000c44 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	20000648 	.word	0x20000648

080006b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006c2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006c4:	f7ff fff6 	bl	80006b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <LoopForever+0x6>)
  ldr r1, =_edata
 80006ca:	490d      	ldr	r1, [pc, #52]	; (8000700 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006cc:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <LoopForever+0xe>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d0:	e002      	b.n	80006d8 <LoopCopyDataInit>

080006d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d6:	3304      	adds	r3, #4

080006d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006dc:	d3f9      	bcc.n	80006d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e0:	4c0a      	ldr	r4, [pc, #40]	; (800070c <LoopForever+0x16>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e4:	e001      	b.n	80006ea <LoopFillZerobss>

080006e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e8:	3204      	adds	r2, #4

080006ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ec:	d3fb      	bcc.n	80006e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ee:	f007 f803 	bl	80076f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006f2:	f7ff fed9 	bl	80004a8 <main>

080006f6 <LoopForever>:

LoopForever:
    b LoopForever
 80006f6:	e7fe      	b.n	80006f6 <LoopForever>
  ldr   r0, =_estack
 80006f8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000700:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000704:	0800782c 	.word	0x0800782c
  ldr r2, =_sbss
 8000708:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 800070c:	20000950 	.word	0x20000950

08000710 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <ADC1_COMP_IRQHandler>
	...

08000714 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000720:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <HAL_Init+0x3c>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_Init+0x3c>)
 8000726:	2140      	movs	r1, #64	; 0x40
 8000728:	430a      	orrs	r2, r1
 800072a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800072c:	2000      	movs	r0, #0
 800072e:	f000 f811 	bl	8000754 <HAL_InitTick>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d003      	beq.n	800073e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000736:	1dfb      	adds	r3, r7, #7
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
 800073c:	e001      	b.n	8000742 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800073e:	f7ff ff81 	bl	8000644 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000742:	1dfb      	adds	r3, r7, #7
 8000744:	781b      	ldrb	r3, [r3, #0]
}
 8000746:	0018      	movs	r0, r3
 8000748:	46bd      	mov	sp, r7
 800074a:	b002      	add	sp, #8
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	40022000 	.word	0x40022000

08000754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <HAL_InitTick+0x5c>)
 800075e:	681c      	ldr	r4, [r3, #0]
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <HAL_InitTick+0x60>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	0019      	movs	r1, r3
 8000766:	23fa      	movs	r3, #250	; 0xfa
 8000768:	0098      	lsls	r0, r3, #2
 800076a:	f7ff fccd 	bl	8000108 <__udivsi3>
 800076e:	0003      	movs	r3, r0
 8000770:	0019      	movs	r1, r3
 8000772:	0020      	movs	r0, r4
 8000774:	f7ff fcc8 	bl	8000108 <__udivsi3>
 8000778:	0003      	movs	r3, r0
 800077a:	0018      	movs	r0, r3
 800077c:	f000 f92f 	bl	80009de <HAL_SYSTICK_Config>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000784:	2301      	movs	r3, #1
 8000786:	e00f      	b.n	80007a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b03      	cmp	r3, #3
 800078c:	d80b      	bhi.n	80007a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	2301      	movs	r3, #1
 8000792:	425b      	negs	r3, r3
 8000794:	2200      	movs	r2, #0
 8000796:	0018      	movs	r0, r3
 8000798:	f000 f8fc 	bl	8000994 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_InitTick+0x64>)
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007a2:	2300      	movs	r3, #0
 80007a4:	e000      	b.n	80007a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
}
 80007a8:	0018      	movs	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b003      	add	sp, #12
 80007ae:	bd90      	pop	{r4, r7, pc}
 80007b0:	20000000 	.word	0x20000000
 80007b4:	20000008 	.word	0x20000008
 80007b8:	20000004 	.word	0x20000004

080007bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <HAL_IncTick+0x1c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	001a      	movs	r2, r3
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <HAL_IncTick+0x20>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	18d2      	adds	r2, r2, r3
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <HAL_IncTick+0x20>)
 80007ce:	601a      	str	r2, [r3, #0]
}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	20000008 	.word	0x20000008
 80007dc:	2000017c 	.word	0x2000017c

080007e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  return uwTick;
 80007e4:	4b02      	ldr	r3, [pc, #8]	; (80007f0 <HAL_GetTick+0x10>)
 80007e6:	681b      	ldr	r3, [r3, #0]
}
 80007e8:	0018      	movs	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	2000017c 	.word	0x2000017c

080007f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007fc:	f7ff fff0 	bl	80007e0 <HAL_GetTick>
 8000800:	0003      	movs	r3, r0
 8000802:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	3301      	adds	r3, #1
 800080c:	d005      	beq.n	800081a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_Delay+0x44>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	001a      	movs	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	189b      	adds	r3, r3, r2
 8000818:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	f7ff ffe0 	bl	80007e0 <HAL_GetTick>
 8000820:	0002      	movs	r2, r0
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	429a      	cmp	r2, r3
 800082a:	d8f7      	bhi.n	800081c <HAL_Delay+0x28>
  {
  }
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b004      	add	sp, #16
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	20000008 	.word	0x20000008

0800083c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	0002      	movs	r2, r0
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b7f      	cmp	r3, #127	; 0x7f
 800084e:	d809      	bhi.n	8000864 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	001a      	movs	r2, r3
 8000856:	231f      	movs	r3, #31
 8000858:	401a      	ands	r2, r3
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <__NVIC_EnableIRQ+0x30>)
 800085c:	2101      	movs	r1, #1
 800085e:	4091      	lsls	r1, r2
 8000860:	000a      	movs	r2, r1
 8000862:	601a      	str	r2, [r3, #0]
  }
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b002      	add	sp, #8
 800086a:	bd80      	pop	{r7, pc}
 800086c:	e000e100 	.word	0xe000e100

08000870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	0002      	movs	r2, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b7f      	cmp	r3, #127	; 0x7f
 8000884:	d828      	bhi.n	80008d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000886:	4a2f      	ldr	r2, [pc, #188]	; (8000944 <__NVIC_SetPriority+0xd4>)
 8000888:	1dfb      	adds	r3, r7, #7
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b25b      	sxtb	r3, r3
 800088e:	089b      	lsrs	r3, r3, #2
 8000890:	33c0      	adds	r3, #192	; 0xc0
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	589b      	ldr	r3, [r3, r2]
 8000896:	1dfa      	adds	r2, r7, #7
 8000898:	7812      	ldrb	r2, [r2, #0]
 800089a:	0011      	movs	r1, r2
 800089c:	2203      	movs	r2, #3
 800089e:	400a      	ands	r2, r1
 80008a0:	00d2      	lsls	r2, r2, #3
 80008a2:	21ff      	movs	r1, #255	; 0xff
 80008a4:	4091      	lsls	r1, r2
 80008a6:	000a      	movs	r2, r1
 80008a8:	43d2      	mvns	r2, r2
 80008aa:	401a      	ands	r2, r3
 80008ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	019b      	lsls	r3, r3, #6
 80008b2:	22ff      	movs	r2, #255	; 0xff
 80008b4:	401a      	ands	r2, r3
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	0018      	movs	r0, r3
 80008bc:	2303      	movs	r3, #3
 80008be:	4003      	ands	r3, r0
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c4:	481f      	ldr	r0, [pc, #124]	; (8000944 <__NVIC_SetPriority+0xd4>)
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b25b      	sxtb	r3, r3
 80008cc:	089b      	lsrs	r3, r3, #2
 80008ce:	430a      	orrs	r2, r1
 80008d0:	33c0      	adds	r3, #192	; 0xc0
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008d6:	e031      	b.n	800093c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d8:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <__NVIC_SetPriority+0xd8>)
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	0019      	movs	r1, r3
 80008e0:	230f      	movs	r3, #15
 80008e2:	400b      	ands	r3, r1
 80008e4:	3b08      	subs	r3, #8
 80008e6:	089b      	lsrs	r3, r3, #2
 80008e8:	3306      	adds	r3, #6
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	18d3      	adds	r3, r2, r3
 80008ee:	3304      	adds	r3, #4
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	1dfa      	adds	r2, r7, #7
 80008f4:	7812      	ldrb	r2, [r2, #0]
 80008f6:	0011      	movs	r1, r2
 80008f8:	2203      	movs	r2, #3
 80008fa:	400a      	ands	r2, r1
 80008fc:	00d2      	lsls	r2, r2, #3
 80008fe:	21ff      	movs	r1, #255	; 0xff
 8000900:	4091      	lsls	r1, r2
 8000902:	000a      	movs	r2, r1
 8000904:	43d2      	mvns	r2, r2
 8000906:	401a      	ands	r2, r3
 8000908:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	019b      	lsls	r3, r3, #6
 800090e:	22ff      	movs	r2, #255	; 0xff
 8000910:	401a      	ands	r2, r3
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	0018      	movs	r0, r3
 8000918:	2303      	movs	r3, #3
 800091a:	4003      	ands	r3, r0
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <__NVIC_SetPriority+0xd8>)
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	001c      	movs	r4, r3
 8000928:	230f      	movs	r3, #15
 800092a:	4023      	ands	r3, r4
 800092c:	3b08      	subs	r3, #8
 800092e:	089b      	lsrs	r3, r3, #2
 8000930:	430a      	orrs	r2, r1
 8000932:	3306      	adds	r3, #6
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	18c3      	adds	r3, r0, r3
 8000938:	3304      	adds	r3, #4
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b003      	add	sp, #12
 8000942:	bd90      	pop	{r4, r7, pc}
 8000944:	e000e100 	.word	0xe000e100
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	1e5a      	subs	r2, r3, #1
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	045b      	lsls	r3, r3, #17
 800095c:	429a      	cmp	r2, r3
 800095e:	d301      	bcc.n	8000964 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000960:	2301      	movs	r3, #1
 8000962:	e010      	b.n	8000986 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <SysTick_Config+0x44>)
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	3a01      	subs	r2, #1
 800096a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096c:	2301      	movs	r3, #1
 800096e:	425b      	negs	r3, r3
 8000970:	2103      	movs	r1, #3
 8000972:	0018      	movs	r0, r3
 8000974:	f7ff ff7c 	bl	8000870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <SysTick_Config+0x44>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097e:	4b04      	ldr	r3, [pc, #16]	; (8000990 <SysTick_Config+0x44>)
 8000980:	2207      	movs	r2, #7
 8000982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000984:	2300      	movs	r3, #0
}
 8000986:	0018      	movs	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	b002      	add	sp, #8
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	e000e010 	.word	0xe000e010

08000994 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
 800099e:	210f      	movs	r1, #15
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	1c02      	adds	r2, r0, #0
 80009a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	b25b      	sxtb	r3, r3
 80009ae:	0011      	movs	r1, r2
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff ff5d 	bl	8000870 <__NVIC_SetPriority>
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b004      	add	sp, #16
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	0002      	movs	r2, r0
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff ff33 	bl	800083c <__NVIC_EnableIRQ>
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b002      	add	sp, #8
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	0018      	movs	r0, r3
 80009ea:	f7ff ffaf 	bl	800094c <SysTick_Config>
 80009ee:	0003      	movs	r3, r0
}
 80009f0:	0018      	movs	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b002      	add	sp, #8
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80009f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fa:	b08b      	sub	sp, #44	; 0x2c
 80009fc:	af06      	add	r7, sp, #24
 80009fe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d101      	bne.n	8000a0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e0f0      	b.n	8000bec <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a79      	ldr	r2, [pc, #484]	; (8000bf4 <HAL_PCD_Init+0x1fc>)
 8000a0e:	5c9b      	ldrb	r3, [r3, r2]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d108      	bne.n	8000a28 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	23aa      	movs	r3, #170	; 0xaa
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	0018      	movs	r0, r3
 8000a24:	f006 fb34 	bl	8007090 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a72      	ldr	r2, [pc, #456]	; (8000bf4 <HAL_PCD_Init+0x1fc>)
 8000a2c:	2103      	movs	r1, #3
 8000a2e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	0018      	movs	r0, r3
 8000a36:	f002 fd6d 	bl	8003514 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	18fb      	adds	r3, r7, r3
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
 8000a42:	e049      	b.n	8000ad8 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000a44:	200f      	movs	r0, #15
 8000a46:	183b      	adds	r3, r7, r0
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	1c5a      	adds	r2, r3, #1
 8000a4e:	0013      	movs	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	189b      	adds	r3, r3, r2
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	18cb      	adds	r3, r1, r3
 8000a58:	3301      	adds	r3, #1
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000a5e:	183b      	adds	r3, r7, r0
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	1c5a      	adds	r2, r3, #1
 8000a66:	0013      	movs	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	189b      	adds	r3, r3, r2
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	183a      	adds	r2, r7, r0
 8000a70:	7812      	ldrb	r2, [r2, #0]
 8000a72:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000a74:	183b      	adds	r3, r7, r0
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	0013      	movs	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	189b      	adds	r3, r3, r2
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	18cb      	adds	r3, r1, r3
 8000a86:	3303      	adds	r3, #3
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000a8c:	183b      	adds	r3, r7, r0
 8000a8e:	781a      	ldrb	r2, [r3, #0]
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	0013      	movs	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	189b      	adds	r3, r3, r2
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	18cb      	adds	r3, r1, r3
 8000a9c:	3338      	adds	r3, #56	; 0x38
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000aa2:	183b      	adds	r3, r7, r0
 8000aa4:	781a      	ldrb	r2, [r3, #0]
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	0013      	movs	r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	189b      	adds	r3, r3, r2
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	18cb      	adds	r3, r1, r3
 8000ab2:	333c      	adds	r3, #60	; 0x3c
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ab8:	183b      	adds	r3, r7, r0
 8000aba:	781a      	ldrb	r2, [r3, #0]
 8000abc:	6879      	ldr	r1, [r7, #4]
 8000abe:	0013      	movs	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	189b      	adds	r3, r3, r2
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	18cb      	adds	r3, r1, r3
 8000ac8:	3340      	adds	r3, #64	; 0x40
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ace:	183b      	adds	r3, r7, r0
 8000ad0:	781a      	ldrb	r2, [r3, #0]
 8000ad2:	183b      	adds	r3, r7, r0
 8000ad4:	3201      	adds	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	210f      	movs	r1, #15
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d3ae      	bcc.n	8000a44 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
 8000aec:	e056      	b.n	8000b9c <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000aee:	240f      	movs	r4, #15
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	236a      	movs	r3, #106	; 0x6a
 8000af8:	33ff      	adds	r3, #255	; 0xff
 8000afa:	0019      	movs	r1, r3
 8000afc:	0013      	movs	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	189b      	adds	r3, r3, r2
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	18c3      	adds	r3, r0, r3
 8000b06:	185b      	adds	r3, r3, r1
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	23b4      	movs	r3, #180	; 0xb4
 8000b14:	0059      	lsls	r1, r3, #1
 8000b16:	0013      	movs	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	189b      	adds	r3, r3, r2
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	18c3      	adds	r3, r0, r3
 8000b20:	185b      	adds	r3, r3, r1
 8000b22:	193a      	adds	r2, r7, r4
 8000b24:	7812      	ldrb	r2, [r2, #0]
 8000b26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	781a      	ldrb	r2, [r3, #0]
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	236c      	movs	r3, #108	; 0x6c
 8000b30:	33ff      	adds	r3, #255	; 0xff
 8000b32:	0019      	movs	r1, r3
 8000b34:	0013      	movs	r3, r2
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	189b      	adds	r3, r3, r2
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	18c3      	adds	r3, r0, r3
 8000b3e:	185b      	adds	r3, r3, r1
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	781a      	ldrb	r2, [r3, #0]
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	23bc      	movs	r3, #188	; 0xbc
 8000b4c:	0059      	lsls	r1, r3, #1
 8000b4e:	0013      	movs	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	189b      	adds	r3, r3, r2
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	18c3      	adds	r3, r0, r3
 8000b58:	185b      	adds	r3, r3, r1
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	781a      	ldrb	r2, [r3, #0]
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	23be      	movs	r3, #190	; 0xbe
 8000b66:	0059      	lsls	r1, r3, #1
 8000b68:	0013      	movs	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	189b      	adds	r3, r3, r2
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	18c3      	adds	r3, r0, r3
 8000b72:	185b      	adds	r3, r3, r1
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	781a      	ldrb	r2, [r3, #0]
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	23c0      	movs	r3, #192	; 0xc0
 8000b80:	0059      	lsls	r1, r3, #1
 8000b82:	0013      	movs	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	189b      	adds	r3, r3, r2
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	18c3      	adds	r3, r0, r3
 8000b8c:	185b      	adds	r3, r3, r1
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	3201      	adds	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	18fb      	adds	r3, r7, r3
 8000ba0:	781a      	ldrb	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d3a1      	bcc.n	8000aee <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	466a      	mov	r2, sp
 8000bb2:	0011      	movs	r1, r2
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	3210      	adds	r2, #16
 8000bb8:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000bba:	c170      	stmia	r1!, {r4, r5, r6}
 8000bbc:	ca30      	ldmia	r2!, {r4, r5}
 8000bbe:	c130      	stmia	r1!, {r4, r5}
 8000bc0:	6859      	ldr	r1, [r3, #4]
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	f002 fcbf 	bl	8003548 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2224      	movs	r2, #36	; 0x24
 8000bce:	2100      	movs	r1, #0
 8000bd0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_PCD_Init+0x1fc>)
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d103      	bne.n	8000bea <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	0018      	movs	r0, r3
 8000be6:	f001 fd09 	bl	80025fc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	0018      	movs	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b005      	add	sp, #20
 8000bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bf4:	000002a9 	.word	0x000002a9

08000bf8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	23aa      	movs	r3, #170	; 0xaa
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	5cd3      	ldrb	r3, [r2, r3]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d101      	bne.n	8000c10 <HAL_PCD_Start+0x18>
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	e014      	b.n	8000c3a <HAL_PCD_Start+0x42>
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	23aa      	movs	r3, #170	; 0xaa
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	2101      	movs	r1, #1
 8000c18:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f002 fc62 	bl	80034e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f004 fc65 	bl	80054f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	23aa      	movs	r3, #170	; 0xaa
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	2100      	movs	r1, #0
 8000c36:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b002      	add	sp, #8
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	0018      	movs	r0, r3
 8000c52:	f004 fc67 	bl	8005524 <USB_ReadInterrupts>
 8000c56:	0003      	movs	r3, r0
 8000c58:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	021b      	lsls	r3, r3, #8
 8000c60:	4013      	ands	r3, r2
 8000c62:	d004      	beq.n	8000c6e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 fb48 	bl	80012fc <PCD_EP_ISR_Handler>

    return;
 8000c6c:	e11d      	b.n	8000eaa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	4013      	ands	r3, r2
 8000c76:	d015      	beq.n	8000ca4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2244      	movs	r2, #68	; 0x44
 8000c7e:	5a9b      	ldrh	r3, [r3, r2]
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	498a      	ldr	r1, [pc, #552]	; (8000eb0 <HAL_PCD_IRQHandler+0x26c>)
 8000c88:	400a      	ands	r2, r1
 8000c8a:	b291      	uxth	r1, r2
 8000c8c:	2244      	movs	r2, #68	; 0x44
 8000c8e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	0018      	movs	r0, r3
 8000c94:	f006 fa7f 	bl	8007196 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f000 f915 	bl	8000ecc <HAL_PCD_SetAddress>

    return;
 8000ca2:	e102      	b.n	8000eaa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	01db      	lsls	r3, r3, #7
 8000caa:	4013      	ands	r3, r2
 8000cac:	d00c      	beq.n	8000cc8 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2244      	movs	r2, #68	; 0x44
 8000cb4:	5a9b      	ldrh	r3, [r3, r2]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	497d      	ldr	r1, [pc, #500]	; (8000eb4 <HAL_PCD_IRQHandler+0x270>)
 8000cbe:	400a      	ands	r2, r1
 8000cc0:	b291      	uxth	r1, r2
 8000cc2:	2244      	movs	r2, #68	; 0x44
 8000cc4:	5299      	strh	r1, [r3, r2]

    return;
 8000cc6:	e0f0      	b.n	8000eaa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	019b      	lsls	r3, r3, #6
 8000cce:	4013      	ands	r3, r2
 8000cd0:	d00c      	beq.n	8000cec <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2244      	movs	r2, #68	; 0x44
 8000cd8:	5a9b      	ldrh	r3, [r3, r2]
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4975      	ldr	r1, [pc, #468]	; (8000eb8 <HAL_PCD_IRQHandler+0x274>)
 8000ce2:	400a      	ands	r2, r1
 8000ce4:	b291      	uxth	r1, r2
 8000ce6:	2244      	movs	r2, #68	; 0x44
 8000ce8:	5299      	strh	r1, [r3, r2]

    return;
 8000cea:	e0de      	b.n	8000eaa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	015b      	lsls	r3, r3, #5
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	d038      	beq.n	8000d68 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2240      	movs	r2, #64	; 0x40
 8000cfc:	5a9b      	ldrh	r3, [r3, r2]
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2104      	movs	r1, #4
 8000d06:	438a      	bics	r2, r1
 8000d08:	b291      	uxth	r1, r2
 8000d0a:	2240      	movs	r2, #64	; 0x40
 8000d0c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2240      	movs	r2, #64	; 0x40
 8000d14:	5a9b      	ldrh	r3, [r3, r2]
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2108      	movs	r1, #8
 8000d1e:	438a      	bics	r2, r1
 8000d20:	b291      	uxth	r1, r2
 8000d22:	2240      	movs	r2, #64	; 0x40
 8000d24:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	23b8      	movs	r3, #184	; 0xb8
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	5cd3      	ldrb	r3, [r2, r3]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d109      	bne.n	8000d46 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	23b8      	movs	r3, #184	; 0xb8
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	2100      	movs	r1, #0
 8000d3a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2100      	movs	r1, #0
 8000d40:	0018      	movs	r0, r3
 8000d42:	f001 fc85 	bl	8002650 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f006 fa65 	bl	8007218 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2244      	movs	r2, #68	; 0x44
 8000d54:	5a9b      	ldrh	r3, [r3, r2]
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4957      	ldr	r1, [pc, #348]	; (8000ebc <HAL_PCD_IRQHandler+0x278>)
 8000d5e:	400a      	ands	r2, r1
 8000d60:	b291      	uxth	r1, r2
 8000d62:	2244      	movs	r2, #68	; 0x44
 8000d64:	5299      	strh	r1, [r3, r2]

    return;
 8000d66:	e0a0      	b.n	8000eaa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	011b      	lsls	r3, r3, #4
 8000d6e:	4013      	ands	r3, r2
 8000d70:	d028      	beq.n	8000dc4 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2240      	movs	r2, #64	; 0x40
 8000d78:	5a9b      	ldrh	r3, [r3, r2]
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2108      	movs	r1, #8
 8000d82:	430a      	orrs	r2, r1
 8000d84:	b291      	uxth	r1, r2
 8000d86:	2240      	movs	r2, #64	; 0x40
 8000d88:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2244      	movs	r2, #68	; 0x44
 8000d90:	5a9b      	ldrh	r3, [r3, r2]
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4949      	ldr	r1, [pc, #292]	; (8000ec0 <HAL_PCD_IRQHandler+0x27c>)
 8000d9a:	400a      	ands	r2, r1
 8000d9c:	b291      	uxth	r1, r2
 8000d9e:	2244      	movs	r2, #68	; 0x44
 8000da0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2240      	movs	r2, #64	; 0x40
 8000da8:	5a9b      	ldrh	r3, [r3, r2]
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2104      	movs	r1, #4
 8000db2:	430a      	orrs	r2, r1
 8000db4:	b291      	uxth	r1, r2
 8000db6:	2240      	movs	r2, #64	; 0x40
 8000db8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f006 fa0f 	bl	80071e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000dc2:	e072      	b.n	8000eaa <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2280      	movs	r2, #128	; 0x80
 8000dc8:	4013      	ands	r3, r2
 8000dca:	d046      	beq.n	8000e5a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2244      	movs	r2, #68	; 0x44
 8000dd2:	5a9b      	ldrh	r3, [r3, r2]
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2180      	movs	r1, #128	; 0x80
 8000ddc:	438a      	bics	r2, r1
 8000dde:	b291      	uxth	r1, r2
 8000de0:	2244      	movs	r2, #68	; 0x44
 8000de2:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	23b8      	movs	r3, #184	; 0xb8
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	5cd3      	ldrb	r3, [r2, r3]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d12f      	bne.n	8000e50 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2240      	movs	r2, #64	; 0x40
 8000df6:	5a9b      	ldrh	r3, [r3, r2]
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2104      	movs	r1, #4
 8000e00:	430a      	orrs	r2, r1
 8000e02:	b291      	uxth	r1, r2
 8000e04:	2240      	movs	r2, #64	; 0x40
 8000e06:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2240      	movs	r2, #64	; 0x40
 8000e0e:	5a9b      	ldrh	r3, [r3, r2]
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2108      	movs	r1, #8
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	b291      	uxth	r1, r2
 8000e1c:	2240      	movs	r2, #64	; 0x40
 8000e1e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	23b8      	movs	r3, #184	; 0xb8
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	2101      	movs	r1, #1
 8000e28:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2254      	movs	r2, #84	; 0x54
 8000e30:	5a9b      	ldrh	r3, [r3, r2]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	089b      	lsrs	r3, r3, #2
 8000e36:	223c      	movs	r2, #60	; 0x3c
 8000e38:	4013      	ands	r3, r2
 8000e3a:	0019      	movs	r1, r3
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	23b9      	movs	r3, #185	; 0xb9
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2101      	movs	r1, #1
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f001 fc01 	bl	8002650 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000e4e:	e02c      	b.n	8000eaa <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	0018      	movs	r0, r3
 8000e54:	f006 f9c4 	bl	80071e0 <HAL_PCD_SuspendCallback>
    return;
 8000e58:	e027      	b.n	8000eaa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4013      	ands	r3, r2
 8000e62:	d010      	beq.n	8000e86 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2244      	movs	r2, #68	; 0x44
 8000e6a:	5a9b      	ldrh	r3, [r3, r2]
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4914      	ldr	r1, [pc, #80]	; (8000ec4 <HAL_PCD_IRQHandler+0x280>)
 8000e74:	400a      	ands	r2, r1
 8000e76:	b291      	uxth	r1, r2
 8000e78:	2244      	movs	r2, #68	; 0x44
 8000e7a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f006 f97a 	bl	8007178 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000e84:	e011      	b.n	8000eaa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	d00c      	beq.n	8000eaa <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2244      	movs	r2, #68	; 0x44
 8000e96:	5a9b      	ldrh	r3, [r3, r2]
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	490a      	ldr	r1, [pc, #40]	; (8000ec8 <HAL_PCD_IRQHandler+0x284>)
 8000ea0:	400a      	ands	r2, r1
 8000ea2:	b291      	uxth	r1, r2
 8000ea4:	2244      	movs	r2, #68	; 0x44
 8000ea6:	5299      	strh	r1, [r3, r2]

    return;
 8000ea8:	46c0      	nop			; (mov r8, r8)
  }
}
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b004      	add	sp, #16
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	fffffbff 	.word	0xfffffbff
 8000eb4:	ffffbfff 	.word	0xffffbfff
 8000eb8:	ffffdfff 	.word	0xffffdfff
 8000ebc:	ffffefff 	.word	0xffffefff
 8000ec0:	fffff7ff 	.word	0xfffff7ff
 8000ec4:	fffffdff 	.word	0xfffffdff
 8000ec8:	fffffeff 	.word	0xfffffeff

08000ecc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	000a      	movs	r2, r1
 8000ed6:	1cfb      	adds	r3, r7, #3
 8000ed8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	23aa      	movs	r3, #170	; 0xaa
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	5cd3      	ldrb	r3, [r2, r3]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d101      	bne.n	8000eea <HAL_PCD_SetAddress+0x1e>
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	e017      	b.n	8000f1a <HAL_PCD_SetAddress+0x4e>
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	23aa      	movs	r3, #170	; 0xaa
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	1cfa      	adds	r2, r7, #3
 8000ef8:	2124      	movs	r1, #36	; 0x24
 8000efa:	7812      	ldrb	r2, [r2, #0]
 8000efc:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	1cfb      	adds	r3, r7, #3
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	0019      	movs	r1, r3
 8000f08:	0010      	movs	r0, r2
 8000f0a:	f004 fae1 	bl	80054d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	23aa      	movs	r3, #170	; 0xaa
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	2100      	movs	r1, #0
 8000f16:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b002      	add	sp, #8
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000f22:	b590      	push	{r4, r7, lr}
 8000f24:	b085      	sub	sp, #20
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	000c      	movs	r4, r1
 8000f2c:	0010      	movs	r0, r2
 8000f2e:	0019      	movs	r1, r3
 8000f30:	1cfb      	adds	r3, r7, #3
 8000f32:	1c22      	adds	r2, r4, #0
 8000f34:	701a      	strb	r2, [r3, #0]
 8000f36:	003b      	movs	r3, r7
 8000f38:	1c02      	adds	r2, r0, #0
 8000f3a:	801a      	strh	r2, [r3, #0]
 8000f3c:	1cbb      	adds	r3, r7, #2
 8000f3e:	1c0a      	adds	r2, r1, #0
 8000f40:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000f42:	230b      	movs	r3, #11
 8000f44:	18fb      	adds	r3, r7, r3
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000f4a:	1cfb      	adds	r3, r7, #3
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	da0f      	bge.n	8000f74 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f54:	1cfb      	adds	r3, r7, #3
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2207      	movs	r2, #7
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	1c5a      	adds	r2, r3, #1
 8000f5e:	0013      	movs	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	189b      	adds	r3, r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	18d3      	adds	r3, r2, r3
 8000f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	705a      	strb	r2, [r3, #1]
 8000f72:	e00f      	b.n	8000f94 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f74:	1cfb      	adds	r3, r7, #3
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2207      	movs	r2, #7
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	189b      	adds	r3, r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	3369      	adds	r3, #105	; 0x69
 8000f86:	33ff      	adds	r3, #255	; 0xff
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	18d3      	adds	r3, r2, r3
 8000f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2200      	movs	r2, #0
 8000f92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000f94:	1cfb      	adds	r3, r7, #3
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2207      	movs	r2, #7
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000fa2:	003b      	movs	r3, r7
 8000fa4:	881a      	ldrh	r2, [r3, #0]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	1cba      	adds	r2, r7, #2
 8000fae:	7812      	ldrb	r2, [r2, #0]
 8000fb0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000fb2:	1cbb      	adds	r3, r7, #2
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d102      	bne.n	8000fc0 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	23aa      	movs	r3, #170	; 0xaa
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	5cd3      	ldrb	r3, [r2, r3]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d101      	bne.n	8000fd0 <HAL_PCD_EP_Open+0xae>
 8000fcc:	2302      	movs	r3, #2
 8000fce:	e013      	b.n	8000ff8 <HAL_PCD_EP_Open+0xd6>
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	23aa      	movs	r3, #170	; 0xaa
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	0011      	movs	r1, r2
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f002 fad8 	bl	8003598 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	23aa      	movs	r3, #170	; 0xaa
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	2100      	movs	r1, #0
 8000ff0:	54d1      	strb	r1, [r2, r3]

  return ret;
 8000ff2:	230b      	movs	r3, #11
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	781b      	ldrb	r3, [r3, #0]
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b005      	add	sp, #20
 8000ffe:	bd90      	pop	{r4, r7, pc}

08001000 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	000a      	movs	r2, r1
 800100a:	1cfb      	adds	r3, r7, #3
 800100c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800100e:	1cfb      	adds	r3, r7, #3
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b25b      	sxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	da0f      	bge.n	8001038 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001018:	1cfb      	adds	r3, r7, #3
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2207      	movs	r2, #7
 800101e:	4013      	ands	r3, r2
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	0013      	movs	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	189b      	adds	r3, r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	18d3      	adds	r3, r2, r3
 800102e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2201      	movs	r2, #1
 8001034:	705a      	strb	r2, [r3, #1]
 8001036:	e00f      	b.n	8001058 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001038:	1cfb      	adds	r3, r7, #3
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2207      	movs	r2, #7
 800103e:	401a      	ands	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	189b      	adds	r3, r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	3369      	adds	r3, #105	; 0x69
 800104a:	33ff      	adds	r3, #255	; 0xff
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	18d3      	adds	r3, r2, r3
 8001050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2200      	movs	r2, #0
 8001056:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001058:	1cfb      	adds	r3, r7, #3
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2207      	movs	r2, #7
 800105e:	4013      	ands	r3, r2
 8001060:	b2da      	uxtb	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	23aa      	movs	r3, #170	; 0xaa
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	5cd3      	ldrb	r3, [r2, r3]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d101      	bne.n	8001076 <HAL_PCD_EP_Close+0x76>
 8001072:	2302      	movs	r3, #2
 8001074:	e011      	b.n	800109a <HAL_PCD_EP_Close+0x9a>
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	23aa      	movs	r3, #170	; 0xaa
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	2101      	movs	r1, #1
 800107e:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	0011      	movs	r1, r2
 8001088:	0018      	movs	r0, r3
 800108a:	f002 fe27 	bl	8003cdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	23aa      	movs	r3, #170	; 0xaa
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	2100      	movs	r1, #0
 8001096:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	0018      	movs	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	b004      	add	sp, #16
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	200b      	movs	r0, #11
 80010b0:	183b      	adds	r3, r7, r0
 80010b2:	1c0a      	adds	r2, r1, #0
 80010b4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010b6:	0001      	movs	r1, r0
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2207      	movs	r2, #7
 80010be:	401a      	ands	r2, r3
 80010c0:	0013      	movs	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	189b      	adds	r3, r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	3369      	adds	r3, #105	; 0x69
 80010ca:	33ff      	adds	r3, #255	; 0xff
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	18d3      	adds	r3, r2, r3
 80010d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	2200      	movs	r2, #0
 80010e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2207      	movs	r2, #7
 80010f0:	4013      	ands	r3, r2
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	0011      	movs	r1, r2
 8001100:	0018      	movs	r0, r3
 8001102:	f002 ffab 	bl	800405c <USB_EPStartXfer>

  return HAL_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b006      	add	sp, #24
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	200b      	movs	r0, #11
 800111e:	183b      	adds	r3, r7, r0
 8001120:	1c0a      	adds	r2, r1, #0
 8001122:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001124:	183b      	adds	r3, r7, r0
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2207      	movs	r2, #7
 800112a:	4013      	ands	r3, r2
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	0013      	movs	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	189b      	adds	r3, r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	18d3      	adds	r3, r2, r3
 800113a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2224      	movs	r2, #36	; 0x24
 800114c:	2101      	movs	r1, #1
 800114e:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	2200      	movs	r2, #0
 800115a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	2201      	movs	r2, #1
 8001160:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001162:	183b      	adds	r3, r7, r0
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2207      	movs	r2, #7
 8001168:	4013      	ands	r3, r2
 800116a:	b2da      	uxtb	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	0011      	movs	r1, r2
 8001178:	0018      	movs	r0, r3
 800117a:	f002 ff6f 	bl	800405c <USB_EPStartXfer>

  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	0018      	movs	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	b006      	add	sp, #24
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	000a      	movs	r2, r1
 8001192:	1cfb      	adds	r3, r7, #3
 8001194:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001196:	1cfb      	adds	r3, r7, #3
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2207      	movs	r2, #7
 800119c:	401a      	ands	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d901      	bls.n	80011aa <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e046      	b.n	8001238 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80011aa:	1cfb      	adds	r3, r7, #3
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	da0f      	bge.n	80011d4 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011b4:	1cfb      	adds	r3, r7, #3
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2207      	movs	r2, #7
 80011ba:	4013      	ands	r3, r2
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	0013      	movs	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	189b      	adds	r3, r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	18d3      	adds	r3, r2, r3
 80011ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2201      	movs	r2, #1
 80011d0:	705a      	strb	r2, [r3, #1]
 80011d2:	e00d      	b.n	80011f0 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80011d4:	1cfb      	adds	r3, r7, #3
 80011d6:	781a      	ldrb	r2, [r3, #0]
 80011d8:	0013      	movs	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	189b      	adds	r3, r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	3369      	adds	r3, #105	; 0x69
 80011e2:	33ff      	adds	r3, #255	; 0xff
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	18d3      	adds	r3, r2, r3
 80011e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2201      	movs	r2, #1
 80011f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011f6:	1cfb      	adds	r3, r7, #3
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2207      	movs	r2, #7
 80011fc:	4013      	ands	r3, r2
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	23aa      	movs	r3, #170	; 0xaa
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	5cd3      	ldrb	r3, [r2, r3]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <HAL_PCD_EP_SetStall+0x8c>
 8001210:	2302      	movs	r3, #2
 8001212:	e011      	b.n	8001238 <HAL_PCD_EP_SetStall+0xb0>
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	23aa      	movs	r3, #170	; 0xaa
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	2101      	movs	r1, #1
 800121c:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	0011      	movs	r1, r2
 8001226:	0018      	movs	r0, r3
 8001228:	f004 f850 	bl	80052cc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	23aa      	movs	r3, #170	; 0xaa
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	2100      	movs	r1, #0
 8001234:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	0018      	movs	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	b004      	add	sp, #16
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	000a      	movs	r2, r1
 800124a:	1cfb      	adds	r3, r7, #3
 800124c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800124e:	1cfb      	adds	r3, r7, #3
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	220f      	movs	r2, #15
 8001254:	401a      	ands	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	429a      	cmp	r2, r3
 800125c:	d901      	bls.n	8001262 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e048      	b.n	80012f4 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001262:	1cfb      	adds	r3, r7, #3
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b25b      	sxtb	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	da0f      	bge.n	800128c <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800126c:	1cfb      	adds	r3, r7, #3
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2207      	movs	r2, #7
 8001272:	4013      	ands	r3, r2
 8001274:	1c5a      	adds	r2, r3, #1
 8001276:	0013      	movs	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	189b      	adds	r3, r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	18d3      	adds	r3, r2, r3
 8001282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2201      	movs	r2, #1
 8001288:	705a      	strb	r2, [r3, #1]
 800128a:	e00f      	b.n	80012ac <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800128c:	1cfb      	adds	r3, r7, #3
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2207      	movs	r2, #7
 8001292:	401a      	ands	r2, r3
 8001294:	0013      	movs	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	189b      	adds	r3, r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	3369      	adds	r3, #105	; 0x69
 800129e:	33ff      	adds	r3, #255	; 0xff
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	18d3      	adds	r3, r2, r3
 80012a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2200      	movs	r2, #0
 80012b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012b2:	1cfb      	adds	r3, r7, #3
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2207      	movs	r2, #7
 80012b8:	4013      	ands	r3, r2
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	23aa      	movs	r3, #170	; 0xaa
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d101      	bne.n	80012d0 <HAL_PCD_EP_ClrStall+0x90>
 80012cc:	2302      	movs	r3, #2
 80012ce:	e011      	b.n	80012f4 <HAL_PCD_EP_ClrStall+0xb4>
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	23aa      	movs	r3, #170	; 0xaa
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	2101      	movs	r1, #1
 80012d8:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	0011      	movs	r1, r2
 80012e2:	0018      	movs	r0, r3
 80012e4:	f004 f842 	bl	800536c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	23aa      	movs	r3, #170	; 0xaa
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	2100      	movs	r1, #0
 80012f0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	0018      	movs	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b004      	add	sp, #16
 80012fa:	bd80      	pop	{r7, pc}

080012fc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	b096      	sub	sp, #88	; 0x58
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001304:	f000 fbec 	bl	8001ae0 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	204e      	movs	r0, #78	; 0x4e
 800130e:	183b      	adds	r3, r7, r0
 8001310:	2144      	movs	r1, #68	; 0x44
 8001312:	5a52      	ldrh	r2, [r2, r1]
 8001314:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001316:	183b      	adds	r3, r7, r0
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	244d      	movs	r4, #77	; 0x4d
 800131e:	193b      	adds	r3, r7, r4
 8001320:	210f      	movs	r1, #15
 8001322:	400a      	ands	r2, r1
 8001324:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001326:	193b      	adds	r3, r7, r4
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d000      	beq.n	8001330 <PCD_EP_ISR_Handler+0x34>
 800132e:	e18f      	b.n	8001650 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001330:	183b      	adds	r3, r7, r0
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	2210      	movs	r2, #16
 8001336:	4013      	ands	r3, r2
 8001338:	d155      	bne.n	80013e6 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	b29a      	uxth	r2, r3
 8001342:	200e      	movs	r0, #14
 8001344:	183b      	adds	r3, r7, r0
 8001346:	49bb      	ldr	r1, [pc, #748]	; (8001634 <PCD_EP_ISR_Handler+0x338>)
 8001348:	400a      	ands	r2, r1
 800134a:	801a      	strh	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	183a      	adds	r2, r7, r0
 8001352:	8812      	ldrh	r2, [r2, #0]
 8001354:	49b8      	ldr	r1, [pc, #736]	; (8001638 <PCD_EP_ISR_Handler+0x33c>)
 8001356:	430a      	orrs	r2, r1
 8001358:	b292      	uxth	r2, r2
 800135a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3328      	adds	r3, #40	; 0x28
 8001360:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2250      	movs	r2, #80	; 0x50
 8001368:	5a9b      	ldrh	r3, [r3, r2]
 800136a:	b29b      	uxth	r3, r3
 800136c:	001a      	movs	r2, r3
 800136e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	18d2      	adds	r2, r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	18d3      	adds	r3, r2, r3
 800137c:	4aaf      	ldr	r2, [pc, #700]	; (800163c <PCD_EP_ISR_Handler+0x340>)
 800137e:	4694      	mov	ip, r2
 8001380:	4463      	add	r3, ip
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	059b      	lsls	r3, r3, #22
 8001386:	0d9a      	lsrs	r2, r3, #22
 8001388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800138a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800138c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800138e:	695a      	ldr	r2, [r3, #20]
 8001390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	18d2      	adds	r2, r2, r3
 8001396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001398:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2100      	movs	r1, #0
 800139e:	0018      	movs	r0, r3
 80013a0:	f005 fecc 	bl	800713c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2224      	movs	r2, #36	; 0x24
 80013a8:	5c9b      	ldrb	r3, [r3, r2]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <PCD_EP_ISR_Handler+0xb8>
 80013b0:	f000 fb96 	bl	8001ae0 <PCD_EP_ISR_Handler+0x7e4>
 80013b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <PCD_EP_ISR_Handler+0xc4>
 80013bc:	f000 fb90 	bl	8001ae0 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2224      	movs	r2, #36	; 0x24
 80013c4:	5c9b      	ldrb	r3, [r3, r2]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	4252      	negs	r2, r2
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	b291      	uxth	r1, r2
 80013d6:	224c      	movs	r2, #76	; 0x4c
 80013d8:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2224      	movs	r2, #36	; 0x24
 80013de:	2100      	movs	r1, #0
 80013e0:	5499      	strb	r1, [r3, r2]
 80013e2:	f000 fb7d 	bl	8001ae0 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3369      	adds	r3, #105	; 0x69
 80013ea:	33ff      	adds	r3, #255	; 0xff
 80013ec:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	214a      	movs	r1, #74	; 0x4a
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	8812      	ldrh	r2, [r2, #0]
 80013f8:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	881a      	ldrh	r2, [r3, #0]
 80013fe:	2380      	movs	r3, #128	; 0x80
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	4013      	ands	r3, r2
 8001404:	d037      	beq.n	8001476 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2250      	movs	r2, #80	; 0x50
 800140c:	5a9b      	ldrh	r3, [r3, r2]
 800140e:	b29b      	uxth	r3, r3
 8001410:	001a      	movs	r2, r3
 8001412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	18d2      	adds	r2, r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	18d3      	adds	r3, r2, r3
 8001420:	4a87      	ldr	r2, [pc, #540]	; (8001640 <PCD_EP_ISR_Handler+0x344>)
 8001422:	4694      	mov	ip, r2
 8001424:	4463      	add	r3, ip
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	059b      	lsls	r3, r3, #22
 800142a:	0d9a      	lsrs	r2, r3, #22
 800142c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800142e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6818      	ldr	r0, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	22ac      	movs	r2, #172	; 0xac
 8001438:	0092      	lsls	r2, r2, #2
 800143a:	1899      	adds	r1, r3, r2
 800143c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800143e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001442:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001444:	b29b      	uxth	r3, r3
 8001446:	f004 f8c4 	bl	80055d2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	b29a      	uxth	r2, r3
 8001452:	2010      	movs	r0, #16
 8001454:	183b      	adds	r3, r7, r0
 8001456:	497b      	ldr	r1, [pc, #492]	; (8001644 <PCD_EP_ISR_Handler+0x348>)
 8001458:	400a      	ands	r2, r1
 800145a:	801a      	strh	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	183a      	adds	r2, r7, r0
 8001462:	8812      	ldrh	r2, [r2, #0]
 8001464:	2180      	movs	r1, #128	; 0x80
 8001466:	430a      	orrs	r2, r1
 8001468:	b292      	uxth	r2, r2
 800146a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	0018      	movs	r0, r3
 8001470:	f005 fe2e 	bl	80070d0 <HAL_PCD_SetupStageCallback>
 8001474:	e334      	b.n	8001ae0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001476:	234a      	movs	r3, #74	; 0x4a
 8001478:	18fb      	adds	r3, r7, r3
 800147a:	2200      	movs	r2, #0
 800147c:	5e9b      	ldrsh	r3, [r3, r2]
 800147e:	2b00      	cmp	r3, #0
 8001480:	db00      	blt.n	8001484 <PCD_EP_ISR_Handler+0x188>
 8001482:	e32d      	b.n	8001ae0 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	b29a      	uxth	r2, r3
 800148c:	201e      	movs	r0, #30
 800148e:	183b      	adds	r3, r7, r0
 8001490:	496c      	ldr	r1, [pc, #432]	; (8001644 <PCD_EP_ISR_Handler+0x348>)
 8001492:	400a      	ands	r2, r1
 8001494:	801a      	strh	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	183a      	adds	r2, r7, r0
 800149c:	8812      	ldrh	r2, [r2, #0]
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	430a      	orrs	r2, r1
 80014a2:	b292      	uxth	r2, r2
 80014a4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2250      	movs	r2, #80	; 0x50
 80014ac:	5a9b      	ldrh	r3, [r3, r2]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	001a      	movs	r2, r3
 80014b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	18d2      	adds	r2, r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	18d3      	adds	r3, r2, r3
 80014c0:	4a5f      	ldr	r2, [pc, #380]	; (8001640 <PCD_EP_ISR_Handler+0x344>)
 80014c2:	4694      	mov	ip, r2
 80014c4:	4463      	add	r3, ip
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	059b      	lsls	r3, r3, #22
 80014ca:	0d9a      	lsrs	r2, r3, #22
 80014cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ce:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80014d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d01a      	beq.n	800150e <PCD_EP_ISR_Handler+0x212>
 80014d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d016      	beq.n	800150e <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6818      	ldr	r0, [r3, #0]
 80014e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014e6:	6959      	ldr	r1, [r3, #20]
 80014e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80014ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	f004 f86e 	bl	80055d2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80014f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	18d2      	adds	r2, r2, r3
 8001500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001502:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2100      	movs	r1, #0
 8001508:	0018      	movs	r0, r3
 800150a:	f005 fdf6 	bl	80070fa <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	214a      	movs	r1, #74	; 0x4a
 8001514:	187b      	adds	r3, r7, r1
 8001516:	8812      	ldrh	r2, [r2, #0]
 8001518:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800151a:	187b      	adds	r3, r7, r1
 800151c:	881a      	ldrh	r2, [r3, #0]
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	4013      	ands	r3, r2
 8001524:	d000      	beq.n	8001528 <PCD_EP_ISR_Handler+0x22c>
 8001526:	e2db      	b.n	8001ae0 <PCD_EP_ISR_Handler+0x7e4>
 8001528:	187b      	adds	r3, r7, r1
 800152a:	881a      	ldrh	r2, [r3, #0]
 800152c:	23c0      	movs	r3, #192	; 0xc0
 800152e:	019b      	lsls	r3, r3, #6
 8001530:	401a      	ands	r2, r3
 8001532:	23c0      	movs	r3, #192	; 0xc0
 8001534:	019b      	lsls	r3, r3, #6
 8001536:	429a      	cmp	r2, r3
 8001538:	d100      	bne.n	800153c <PCD_EP_ISR_Handler+0x240>
 800153a:	e2d1      	b.n	8001ae0 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2250      	movs	r2, #80	; 0x50
 8001548:	5a9b      	ldrh	r3, [r3, r2]
 800154a:	b29b      	uxth	r3, r3
 800154c:	001a      	movs	r2, r3
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	189b      	adds	r3, r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	4a3a      	ldr	r2, [pc, #232]	; (8001640 <PCD_EP_ISR_Handler+0x344>)
 8001558:	4694      	mov	ip, r2
 800155a:	4463      	add	r3, ip
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	b29b      	uxth	r3, r3
 8001564:	059b      	lsls	r3, r3, #22
 8001566:	0d9b      	lsrs	r3, r3, #22
 8001568:	b29a      	uxth	r2, r3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	801a      	strh	r2, [r3, #0]
 800156e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	2b3e      	cmp	r3, #62	; 0x3e
 8001574:	d91a      	bls.n	80015ac <PCD_EP_ISR_Handler+0x2b0>
 8001576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	647b      	str	r3, [r7, #68]	; 0x44
 800157e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	221f      	movs	r2, #31
 8001584:	4013      	ands	r3, r2
 8001586:	d102      	bne.n	800158e <PCD_EP_ISR_Handler+0x292>
 8001588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800158a:	3b01      	subs	r3, #1
 800158c:	647b      	str	r3, [r7, #68]	; 0x44
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	b29a      	uxth	r2, r3
 8001594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001596:	b29b      	uxth	r3, r3
 8001598:	029b      	lsls	r3, r3, #10
 800159a:	b29b      	uxth	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4a25      	ldr	r2, [pc, #148]	; (8001638 <PCD_EP_ISR_Handler+0x33c>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	801a      	strh	r2, [r3, #0]
 80015aa:	e023      	b.n	80015f4 <PCD_EP_ISR_Handler+0x2f8>
 80015ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d108      	bne.n	80015c6 <PCD_EP_ISR_Handler+0x2ca>
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4a1f      	ldr	r2, [pc, #124]	; (8001638 <PCD_EP_ISR_Handler+0x33c>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	b29a      	uxth	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	801a      	strh	r2, [r3, #0]
 80015c4:	e016      	b.n	80015f4 <PCD_EP_ISR_Handler+0x2f8>
 80015c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	085b      	lsrs	r3, r3, #1
 80015cc:	647b      	str	r3, [r7, #68]	; 0x44
 80015ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	2201      	movs	r2, #1
 80015d4:	4013      	ands	r3, r2
 80015d6:	d002      	beq.n	80015de <PCD_EP_ISR_Handler+0x2e2>
 80015d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015da:	3301      	adds	r3, #1
 80015dc:	647b      	str	r3, [r7, #68]	; 0x44
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	029b      	lsls	r3, r3, #10
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	2012      	movs	r0, #18
 80015fe:	183b      	adds	r3, r7, r0
 8001600:	4911      	ldr	r1, [pc, #68]	; (8001648 <PCD_EP_ISR_Handler+0x34c>)
 8001602:	400a      	ands	r2, r1
 8001604:	801a      	strh	r2, [r3, #0]
 8001606:	183b      	adds	r3, r7, r0
 8001608:	183a      	adds	r2, r7, r0
 800160a:	8812      	ldrh	r2, [r2, #0]
 800160c:	2180      	movs	r1, #128	; 0x80
 800160e:	0149      	lsls	r1, r1, #5
 8001610:	404a      	eors	r2, r1
 8001612:	801a      	strh	r2, [r3, #0]
 8001614:	183b      	adds	r3, r7, r0
 8001616:	183a      	adds	r2, r7, r0
 8001618:	8812      	ldrh	r2, [r2, #0]
 800161a:	2180      	movs	r1, #128	; 0x80
 800161c:	0189      	lsls	r1, r1, #6
 800161e:	404a      	eors	r2, r1
 8001620:	801a      	strh	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	183a      	adds	r2, r7, r0
 8001628:	8812      	ldrh	r2, [r2, #0]
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <PCD_EP_ISR_Handler+0x350>)
 800162c:	430a      	orrs	r2, r1
 800162e:	b292      	uxth	r2, r2
 8001630:	801a      	strh	r2, [r3, #0]
 8001632:	e255      	b.n	8001ae0 <PCD_EP_ISR_Handler+0x7e4>
 8001634:	ffff8f0f 	.word	0xffff8f0f
 8001638:	ffff8000 	.word	0xffff8000
 800163c:	00000402 	.word	0x00000402
 8001640:	00000406 	.word	0x00000406
 8001644:	00000f8f 	.word	0x00000f8f
 8001648:	ffffbf8f 	.word	0xffffbf8f
 800164c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	001a      	movs	r2, r3
 8001656:	204d      	movs	r0, #77	; 0x4d
 8001658:	183b      	adds	r3, r7, r0
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	18d2      	adds	r2, r2, r3
 8001660:	214a      	movs	r1, #74	; 0x4a
 8001662:	187b      	adds	r3, r7, r1
 8001664:	8812      	ldrh	r2, [r2, #0]
 8001666:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001668:	187b      	adds	r3, r7, r1
 800166a:	2200      	movs	r2, #0
 800166c:	5e9b      	ldrsh	r3, [r3, r2]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db00      	blt.n	8001674 <PCD_EP_ISR_Handler+0x378>
 8001672:	e0fa      	b.n	800186a <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	001a      	movs	r2, r3
 800167a:	183b      	adds	r3, r7, r0
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	18d3      	adds	r3, r2, r3
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	b29a      	uxth	r2, r3
 8001686:	2448      	movs	r4, #72	; 0x48
 8001688:	193b      	adds	r3, r7, r4
 800168a:	49d1      	ldr	r1, [pc, #836]	; (80019d0 <PCD_EP_ISR_Handler+0x6d4>)
 800168c:	400a      	ands	r2, r1
 800168e:	801a      	strh	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	001a      	movs	r2, r3
 8001696:	183b      	adds	r3, r7, r0
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	18d3      	adds	r3, r2, r3
 800169e:	193a      	adds	r2, r7, r4
 80016a0:	8812      	ldrh	r2, [r2, #0]
 80016a2:	2180      	movs	r1, #128	; 0x80
 80016a4:	430a      	orrs	r2, r1
 80016a6:	b292      	uxth	r2, r2
 80016a8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80016aa:	183b      	adds	r3, r7, r0
 80016ac:	781a      	ldrb	r2, [r3, #0]
 80016ae:	0013      	movs	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	189b      	adds	r3, r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	3369      	adds	r3, #105	; 0x69
 80016b8:	33ff      	adds	r3, #255	; 0xff
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	18d3      	adds	r3, r2, r3
 80016be:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80016c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016c2:	7b1b      	ldrb	r3, [r3, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d125      	bne.n	8001714 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2250      	movs	r2, #80	; 0x50
 80016ce:	5a9b      	ldrh	r3, [r3, r2]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	001a      	movs	r2, r3
 80016d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	18d2      	adds	r2, r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	18d3      	adds	r3, r2, r3
 80016e2:	4abc      	ldr	r2, [pc, #752]	; (80019d4 <PCD_EP_ISR_Handler+0x6d8>)
 80016e4:	4694      	mov	ip, r2
 80016e6:	4463      	add	r3, ip
 80016e8:	881a      	ldrh	r2, [r3, #0]
 80016ea:	2450      	movs	r4, #80	; 0x50
 80016ec:	193b      	adds	r3, r7, r4
 80016ee:	0592      	lsls	r2, r2, #22
 80016f0:	0d92      	lsrs	r2, r2, #22
 80016f2:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80016f4:	193b      	adds	r3, r7, r4
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d100      	bne.n	80016fe <PCD_EP_ISR_Handler+0x402>
 80016fc:	e08d      	b.n	800181a <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001704:	6959      	ldr	r1, [r3, #20]
 8001706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001708:	88da      	ldrh	r2, [r3, #6]
 800170a:	193b      	adds	r3, r7, r4
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	f003 ff60 	bl	80055d2 <USB_ReadPMA>
 8001712:	e082      	b.n	800181a <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001716:	78db      	ldrb	r3, [r3, #3]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d10c      	bne.n	8001736 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800171c:	2350      	movs	r3, #80	; 0x50
 800171e:	18fc      	adds	r4, r7, r3
 8001720:	234a      	movs	r3, #74	; 0x4a
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	881a      	ldrh	r2, [r3, #0]
 8001726:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	0018      	movs	r0, r3
 800172c:	f000 f9ec 	bl	8001b08 <HAL_PCD_EP_DB_Receive>
 8001730:	0003      	movs	r3, r0
 8001732:	8023      	strh	r3, [r4, #0]
 8001734:	e071      	b.n	800181a <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	001a      	movs	r2, r3
 800173c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	18d3      	adds	r3, r2, r3
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	b29a      	uxth	r2, r3
 8001748:	2052      	movs	r0, #82	; 0x52
 800174a:	183b      	adds	r3, r7, r0
 800174c:	49a2      	ldr	r1, [pc, #648]	; (80019d8 <PCD_EP_ISR_Handler+0x6dc>)
 800174e:	400a      	ands	r2, r1
 8001750:	801a      	strh	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	001a      	movs	r2, r3
 8001758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	18d3      	adds	r3, r2, r3
 8001760:	183a      	adds	r2, r7, r0
 8001762:	8812      	ldrh	r2, [r2, #0]
 8001764:	499d      	ldr	r1, [pc, #628]	; (80019dc <PCD_EP_ISR_Handler+0x6e0>)
 8001766:	430a      	orrs	r2, r1
 8001768:	b292      	uxth	r2, r2
 800176a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	001a      	movs	r2, r3
 8001772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	18d3      	adds	r3, r2, r3
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	b29b      	uxth	r3, r3
 800177e:	001a      	movs	r2, r3
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	01db      	lsls	r3, r3, #7
 8001784:	4013      	ands	r3, r2
 8001786:	d024      	beq.n	80017d2 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2250      	movs	r2, #80	; 0x50
 800178e:	5a9b      	ldrh	r3, [r3, r2]
 8001790:	b29b      	uxth	r3, r3
 8001792:	001a      	movs	r2, r3
 8001794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	18d2      	adds	r2, r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	18d3      	adds	r3, r2, r3
 80017a2:	4a8f      	ldr	r2, [pc, #572]	; (80019e0 <PCD_EP_ISR_Handler+0x6e4>)
 80017a4:	4694      	mov	ip, r2
 80017a6:	4463      	add	r3, ip
 80017a8:	881a      	ldrh	r2, [r3, #0]
 80017aa:	2450      	movs	r4, #80	; 0x50
 80017ac:	193b      	adds	r3, r7, r4
 80017ae:	0592      	lsls	r2, r2, #22
 80017b0:	0d92      	lsrs	r2, r2, #22
 80017b2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80017b4:	193b      	adds	r3, r7, r4
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d02e      	beq.n	800181a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c2:	6959      	ldr	r1, [r3, #20]
 80017c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c6:	891a      	ldrh	r2, [r3, #8]
 80017c8:	193b      	adds	r3, r7, r4
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	f003 ff01 	bl	80055d2 <USB_ReadPMA>
 80017d0:	e023      	b.n	800181a <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2250      	movs	r2, #80	; 0x50
 80017d8:	5a9b      	ldrh	r3, [r3, r2]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	001a      	movs	r2, r3
 80017de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	18d2      	adds	r2, r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	18d3      	adds	r3, r2, r3
 80017ec:	4a79      	ldr	r2, [pc, #484]	; (80019d4 <PCD_EP_ISR_Handler+0x6d8>)
 80017ee:	4694      	mov	ip, r2
 80017f0:	4463      	add	r3, ip
 80017f2:	881a      	ldrh	r2, [r3, #0]
 80017f4:	2450      	movs	r4, #80	; 0x50
 80017f6:	193b      	adds	r3, r7, r4
 80017f8:	0592      	lsls	r2, r2, #22
 80017fa:	0d92      	lsrs	r2, r2, #22
 80017fc:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80017fe:	193b      	adds	r3, r7, r4
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d009      	beq.n	800181a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180c:	6959      	ldr	r1, [r3, #20]
 800180e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001810:	895a      	ldrh	r2, [r3, #10]
 8001812:	193b      	adds	r3, r7, r4
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	f003 fedc 	bl	80055d2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800181a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800181c:	69da      	ldr	r2, [r3, #28]
 800181e:	2150      	movs	r1, #80	; 0x50
 8001820:	187b      	adds	r3, r7, r1
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	18d2      	adds	r2, r2, r3
 8001826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001828:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800182a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800182c:	695a      	ldr	r2, [r3, #20]
 800182e:	187b      	adds	r3, r7, r1
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	18d2      	adds	r2, r2, r3
 8001834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001836:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <PCD_EP_ISR_Handler+0x550>
 8001840:	187b      	adds	r3, r7, r1
 8001842:	881a      	ldrh	r2, [r3, #0]
 8001844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800184c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800184e:	781a      	ldrb	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	0011      	movs	r1, r2
 8001854:	0018      	movs	r0, r3
 8001856:	f005 fc50 	bl	80070fa <HAL_PCD_DataOutStageCallback>
 800185a:	e006      	b.n	800186a <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001862:	0011      	movs	r1, r2
 8001864:	0018      	movs	r0, r3
 8001866:	f002 fbf9 	bl	800405c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800186a:	244a      	movs	r4, #74	; 0x4a
 800186c:	193b      	adds	r3, r7, r4
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	2280      	movs	r2, #128	; 0x80
 8001872:	4013      	ands	r3, r2
 8001874:	d100      	bne.n	8001878 <PCD_EP_ISR_Handler+0x57c>
 8001876:	e133      	b.n	8001ae0 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001878:	204d      	movs	r0, #77	; 0x4d
 800187a:	183b      	adds	r3, r7, r0
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	0013      	movs	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	189b      	adds	r3, r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	18d3      	adds	r3, r2, r3
 800188c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	001a      	movs	r2, r3
 8001894:	183b      	adds	r3, r7, r0
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	18d3      	adds	r3, r2, r3
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	2542      	movs	r5, #66	; 0x42
 80018a2:	197b      	adds	r3, r7, r5
 80018a4:	494f      	ldr	r1, [pc, #316]	; (80019e4 <PCD_EP_ISR_Handler+0x6e8>)
 80018a6:	400a      	ands	r2, r1
 80018a8:	801a      	strh	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	001a      	movs	r2, r3
 80018b0:	183b      	adds	r3, r7, r0
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	18d3      	adds	r3, r2, r3
 80018b8:	197a      	adds	r2, r7, r5
 80018ba:	8812      	ldrh	r2, [r2, #0]
 80018bc:	494a      	ldr	r1, [pc, #296]	; (80019e8 <PCD_EP_ISR_Handler+0x6ec>)
 80018be:	430a      	orrs	r2, r1
 80018c0:	b292      	uxth	r2, r2
 80018c2:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80018c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c6:	78db      	ldrb	r3, [r3, #3]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d000      	beq.n	80018ce <PCD_EP_ISR_Handler+0x5d2>
 80018cc:	e0af      	b.n	8001a2e <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80018ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80018d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d6:	7b1b      	ldrb	r3, [r3, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d100      	bne.n	80018de <PCD_EP_ISR_Handler+0x5e2>
 80018dc:	e09f      	b.n	8001a1e <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80018de:	193b      	adds	r3, r7, r4
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	2240      	movs	r2, #64	; 0x40
 80018e4:	4013      	ands	r3, r2
 80018e6:	d046      	beq.n	8001976 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80018e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ea:	785b      	ldrb	r3, [r3, #1]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d125      	bne.n	800193c <PCD_EP_ISR_Handler+0x640>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2250      	movs	r2, #80	; 0x50
 80018fc:	5a9b      	ldrh	r3, [r3, r2]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	001a      	movs	r2, r3
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	189b      	adds	r3, r3, r2
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
 8001908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	00da      	lsls	r2, r3, #3
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	18d3      	adds	r3, r2, r3
 8001912:	4a33      	ldr	r2, [pc, #204]	; (80019e0 <PCD_EP_ISR_Handler+0x6e4>)
 8001914:	4694      	mov	ip, r2
 8001916:	4463      	add	r3, ip
 8001918:	623b      	str	r3, [r7, #32]
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	b29b      	uxth	r3, r3
 8001920:	059b      	lsls	r3, r3, #22
 8001922:	0d9b      	lsrs	r3, r3, #22
 8001924:	b29a      	uxth	r2, r3
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	801a      	strh	r2, [r3, #0]
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	4a2d      	ldr	r2, [pc, #180]	; (80019e8 <PCD_EP_ISR_Handler+0x6ec>)
 8001932:	4313      	orrs	r3, r2
 8001934:	b29a      	uxth	r2, r3
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	801a      	strh	r2, [r3, #0]
 800193a:	e070      	b.n	8001a1e <PCD_EP_ISR_Handler+0x722>
 800193c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800193e:	785b      	ldrb	r3, [r3, #1]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d16c      	bne.n	8001a1e <PCD_EP_ISR_Handler+0x722>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2250      	movs	r2, #80	; 0x50
 8001950:	5a9b      	ldrh	r3, [r3, r2]
 8001952:	b29b      	uxth	r3, r3
 8001954:	001a      	movs	r2, r3
 8001956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001958:	189b      	adds	r3, r3, r2
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800195c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	00da      	lsls	r2, r3, #3
 8001962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001964:	18d3      	adds	r3, r2, r3
 8001966:	4a1e      	ldr	r2, [pc, #120]	; (80019e0 <PCD_EP_ISR_Handler+0x6e4>)
 8001968:	4694      	mov	ip, r2
 800196a:	4463      	add	r3, ip
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
 800196e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001970:	2200      	movs	r2, #0
 8001972:	801a      	strh	r2, [r3, #0]
 8001974:	e053      	b.n	8001a1e <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800197c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800197e:	785b      	ldrb	r3, [r3, #1]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d133      	bne.n	80019ec <PCD_EP_ISR_Handler+0x6f0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2250      	movs	r2, #80	; 0x50
 8001990:	5a9b      	ldrh	r3, [r3, r2]
 8001992:	b29b      	uxth	r3, r3
 8001994:	001a      	movs	r2, r3
 8001996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001998:	189b      	adds	r3, r3, r2
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
 800199c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	00da      	lsls	r2, r3, #3
 80019a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a4:	18d3      	adds	r3, r2, r3
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <PCD_EP_ISR_Handler+0x6d8>)
 80019a8:	4694      	mov	ip, r2
 80019aa:	4463      	add	r3, ip
 80019ac:	633b      	str	r3, [r7, #48]	; 0x30
 80019ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	059b      	lsls	r3, r3, #22
 80019b6:	0d9b      	lsrs	r3, r3, #22
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019bc:	801a      	strh	r2, [r3, #0]
 80019be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <PCD_EP_ISR_Handler+0x6ec>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019cc:	801a      	strh	r2, [r3, #0]
 80019ce:	e026      	b.n	8001a1e <PCD_EP_ISR_Handler+0x722>
 80019d0:	00000f8f 	.word	0x00000f8f
 80019d4:	00000406 	.word	0x00000406
 80019d8:	ffff8f8f 	.word	0xffff8f8f
 80019dc:	ffff80c0 	.word	0xffff80c0
 80019e0:	00000402 	.word	0x00000402
 80019e4:	ffff8f0f 	.word	0xffff8f0f
 80019e8:	ffff8000 	.word	0xffff8000
 80019ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ee:	785b      	ldrb	r3, [r3, #1]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d114      	bne.n	8001a1e <PCD_EP_ISR_Handler+0x722>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2250      	movs	r2, #80	; 0x50
 80019fa:	5a9b      	ldrh	r3, [r3, r2]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a02:	189b      	adds	r3, r3, r2
 8001a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	00da      	lsls	r2, r3, #3
 8001a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a0e:	18d3      	adds	r3, r2, r3
 8001a10:	4a3b      	ldr	r2, [pc, #236]	; (8001b00 <PCD_EP_ISR_Handler+0x804>)
 8001a12:	4694      	mov	ip, r2
 8001a14:	4463      	add	r3, ip
 8001a16:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a20:	781a      	ldrb	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	0011      	movs	r1, r2
 8001a26:	0018      	movs	r0, r3
 8001a28:	f005 fb88 	bl	800713c <HAL_PCD_DataInStageCallback>
 8001a2c:	e058      	b.n	8001ae0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001a2e:	234a      	movs	r3, #74	; 0x4a
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	881a      	ldrh	r2, [r3, #0]
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d149      	bne.n	8001ad0 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2250      	movs	r2, #80	; 0x50
 8001a42:	5a9b      	ldrh	r3, [r3, r2]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	001a      	movs	r2, r3
 8001a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	18d2      	adds	r2, r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	18d3      	adds	r3, r2, r3
 8001a56:	4a2b      	ldr	r2, [pc, #172]	; (8001b04 <PCD_EP_ISR_Handler+0x808>)
 8001a58:	4694      	mov	ip, r2
 8001a5a:	4463      	add	r3, ip
 8001a5c:	881a      	ldrh	r2, [r3, #0]
 8001a5e:	2140      	movs	r1, #64	; 0x40
 8001a60:	187b      	adds	r3, r7, r1
 8001a62:	0592      	lsls	r2, r2, #22
 8001a64:	0d92      	lsrs	r2, r2, #22
 8001a66:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6a:	699a      	ldr	r2, [r3, #24]
 8001a6c:	187b      	adds	r3, r7, r1
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d907      	bls.n	8001a84 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8001a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a76:	699a      	ldr	r2, [r3, #24]
 8001a78:	187b      	adds	r3, r7, r1
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	1ad2      	subs	r2, r2, r3
 8001a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a80:	619a      	str	r2, [r3, #24]
 8001a82:	e002      	b.n	8001a8a <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8001a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d107      	bne.n	8001aa2 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a94:	781a      	ldrb	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	0011      	movs	r1, r2
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f005 fb4e 	bl	800713c <HAL_PCD_DataInStageCallback>
 8001aa0:	e01e      	b.n	8001ae0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	2140      	movs	r1, #64	; 0x40
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	18d2      	adds	r2, r2, r3
 8001aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab4:	69da      	ldr	r2, [r3, #28]
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	18d2      	adds	r2, r2, r3
 8001abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001abe:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ac6:	0011      	movs	r1, r2
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f002 fac7 	bl	800405c <USB_EPStartXfer>
 8001ace:	e007      	b.n	8001ae0 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ad0:	234a      	movs	r3, #74	; 0x4a
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	881a      	ldrh	r2, [r3, #0]
 8001ad6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	0018      	movs	r0, r3
 8001adc:	f000 f930 	bl	8001d40 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2244      	movs	r2, #68	; 0x44
 8001ae6:	5a9b      	ldrh	r3, [r3, r2]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	da01      	bge.n	8001af4 <PCD_EP_ISR_Handler+0x7f8>
 8001af0:	f7ff fc0a 	bl	8001308 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	0018      	movs	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b016      	add	sp, #88	; 0x58
 8001afc:	bdb0      	pop	{r4, r5, r7, pc}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	00000406 	.word	0x00000406
 8001b04:	00000402 	.word	0x00000402

08001b08 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	1dbb      	adds	r3, r7, #6
 8001b14:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b16:	1dbb      	adds	r3, r7, #6
 8001b18:	881a      	ldrh	r2, [r3, #0]
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	01db      	lsls	r3, r3, #7
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d100      	bne.n	8001b24 <HAL_PCD_EP_DB_Receive+0x1c>
 8001b22:	e07d      	b.n	8001c20 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2250      	movs	r2, #80	; 0x50
 8001b2a:	5a9b      	ldrh	r3, [r3, r2]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	001a      	movs	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	18d2      	adds	r2, r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	18d3      	adds	r3, r2, r3
 8001b3e:	4a7a      	ldr	r2, [pc, #488]	; (8001d28 <HAL_PCD_EP_DB_Receive+0x220>)
 8001b40:	4694      	mov	ip, r2
 8001b42:	4463      	add	r3, ip
 8001b44:	881a      	ldrh	r2, [r3, #0]
 8001b46:	211a      	movs	r1, #26
 8001b48:	187b      	adds	r3, r7, r1
 8001b4a:	0592      	lsls	r2, r2, #22
 8001b4c:	0d92      	lsrs	r2, r2, #22
 8001b4e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	699a      	ldr	r2, [r3, #24]
 8001b54:	187b      	adds	r3, r7, r1
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d307      	bcc.n	8001b6c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	699a      	ldr	r2, [r3, #24]
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	1ad2      	subs	r2, r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	619a      	str	r2, [r3, #24]
 8001b6a:	e002      	b.n	8001b72 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d121      	bne.n	8001bbe <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	001a      	movs	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	18d3      	adds	r3, r2, r3
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	2018      	movs	r0, #24
 8001b8e:	183b      	adds	r3, r7, r0
 8001b90:	4966      	ldr	r1, [pc, #408]	; (8001d2c <HAL_PCD_EP_DB_Receive+0x224>)
 8001b92:	400a      	ands	r2, r1
 8001b94:	801a      	strh	r2, [r3, #0]
 8001b96:	183b      	adds	r3, r7, r0
 8001b98:	183a      	adds	r2, r7, r0
 8001b9a:	8812      	ldrh	r2, [r2, #0]
 8001b9c:	2180      	movs	r1, #128	; 0x80
 8001b9e:	0189      	lsls	r1, r1, #6
 8001ba0:	404a      	eors	r2, r1
 8001ba2:	801a      	strh	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	001a      	movs	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	18d3      	adds	r3, r2, r3
 8001bb2:	183a      	adds	r2, r7, r0
 8001bb4:	8812      	ldrh	r2, [r2, #0]
 8001bb6:	495e      	ldr	r1, [pc, #376]	; (8001d30 <HAL_PCD_EP_DB_Receive+0x228>)
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	b292      	uxth	r2, r2
 8001bbc:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bbe:	1dbb      	adds	r3, r7, #6
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	2240      	movs	r2, #64	; 0x40
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d01a      	beq.n	8001bfe <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	001a      	movs	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	18d3      	adds	r3, r2, r3
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	2016      	movs	r0, #22
 8001bdc:	183b      	adds	r3, r7, r0
 8001bde:	4955      	ldr	r1, [pc, #340]	; (8001d34 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001be0:	400a      	ands	r2, r1
 8001be2:	801a      	strh	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	001a      	movs	r2, r3
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	18d3      	adds	r3, r2, r3
 8001bf2:	183a      	adds	r2, r7, r0
 8001bf4:	8812      	ldrh	r2, [r2, #0]
 8001bf6:	4950      	ldr	r1, [pc, #320]	; (8001d38 <HAL_PCD_EP_DB_Receive+0x230>)
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	b292      	uxth	r2, r2
 8001bfc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001bfe:	241a      	movs	r4, #26
 8001c00:	193b      	adds	r3, r7, r4
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d100      	bne.n	8001c0a <HAL_PCD_EP_DB_Receive+0x102>
 8001c08:	e086      	b.n	8001d18 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	6959      	ldr	r1, [r3, #20]
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	891a      	ldrh	r2, [r3, #8]
 8001c16:	193b      	adds	r3, r7, r4
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	f003 fcda 	bl	80055d2 <USB_ReadPMA>
 8001c1e:	e07b      	b.n	8001d18 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2250      	movs	r2, #80	; 0x50
 8001c26:	5a9b      	ldrh	r3, [r3, r2]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	001a      	movs	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	18d2      	adds	r2, r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	18d3      	adds	r3, r2, r3
 8001c3a:	4a40      	ldr	r2, [pc, #256]	; (8001d3c <HAL_PCD_EP_DB_Receive+0x234>)
 8001c3c:	4694      	mov	ip, r2
 8001c3e:	4463      	add	r3, ip
 8001c40:	881a      	ldrh	r2, [r3, #0]
 8001c42:	211a      	movs	r1, #26
 8001c44:	187b      	adds	r3, r7, r1
 8001c46:	0592      	lsls	r2, r2, #22
 8001c48:	0d92      	lsrs	r2, r2, #22
 8001c4a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	699a      	ldr	r2, [r3, #24]
 8001c50:	187b      	adds	r3, r7, r1
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d307      	bcc.n	8001c68 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	699a      	ldr	r2, [r3, #24]
 8001c5c:	187b      	adds	r3, r7, r1
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	1ad2      	subs	r2, r2, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	619a      	str	r2, [r3, #24]
 8001c66:	e002      	b.n	8001c6e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d121      	bne.n	8001cba <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	001a      	movs	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	18d3      	adds	r3, r2, r3
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	201e      	movs	r0, #30
 8001c8a:	183b      	adds	r3, r7, r0
 8001c8c:	4927      	ldr	r1, [pc, #156]	; (8001d2c <HAL_PCD_EP_DB_Receive+0x224>)
 8001c8e:	400a      	ands	r2, r1
 8001c90:	801a      	strh	r2, [r3, #0]
 8001c92:	183b      	adds	r3, r7, r0
 8001c94:	183a      	adds	r2, r7, r0
 8001c96:	8812      	ldrh	r2, [r2, #0]
 8001c98:	2180      	movs	r1, #128	; 0x80
 8001c9a:	0189      	lsls	r1, r1, #6
 8001c9c:	404a      	eors	r2, r1
 8001c9e:	801a      	strh	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	001a      	movs	r2, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	18d3      	adds	r3, r2, r3
 8001cae:	183a      	adds	r2, r7, r0
 8001cb0:	8812      	ldrh	r2, [r2, #0]
 8001cb2:	491f      	ldr	r1, [pc, #124]	; (8001d30 <HAL_PCD_EP_DB_Receive+0x228>)
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	b292      	uxth	r2, r2
 8001cb8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001cba:	1dbb      	adds	r3, r7, #6
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	2240      	movs	r2, #64	; 0x40
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d11a      	bne.n	8001cfa <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	001a      	movs	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	18d3      	adds	r3, r2, r3
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	201c      	movs	r0, #28
 8001cd8:	183b      	adds	r3, r7, r0
 8001cda:	4916      	ldr	r1, [pc, #88]	; (8001d34 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001cdc:	400a      	ands	r2, r1
 8001cde:	801a      	strh	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	18d3      	adds	r3, r2, r3
 8001cee:	183a      	adds	r2, r7, r0
 8001cf0:	8812      	ldrh	r2, [r2, #0]
 8001cf2:	4911      	ldr	r1, [pc, #68]	; (8001d38 <HAL_PCD_EP_DB_Receive+0x230>)
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	b292      	uxth	r2, r2
 8001cf8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001cfa:	241a      	movs	r4, #26
 8001cfc:	193b      	adds	r3, r7, r4
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d009      	beq.n	8001d18 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	6959      	ldr	r1, [r3, #20]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	895a      	ldrh	r2, [r3, #10]
 8001d10:	193b      	adds	r3, r7, r4
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	f003 fc5d 	bl	80055d2 <USB_ReadPMA>
    }
  }

  return count;
 8001d18:	231a      	movs	r3, #26
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	881b      	ldrh	r3, [r3, #0]
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b009      	add	sp, #36	; 0x24
 8001d24:	bd90      	pop	{r4, r7, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	00000402 	.word	0x00000402
 8001d2c:	ffffbf8f 	.word	0xffffbf8f
 8001d30:	ffff8080 	.word	0xffff8080
 8001d34:	ffff8f8f 	.word	0xffff8f8f
 8001d38:	ffff80c0 	.word	0xffff80c0
 8001d3c:	00000406 	.word	0x00000406

08001d40 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b0a4      	sub	sp, #144	; 0x90
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	1dbb      	adds	r3, r7, #6
 8001d4c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d4e:	1dbb      	adds	r3, r7, #6
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	2240      	movs	r2, #64	; 0x40
 8001d54:	4013      	ands	r3, r2
 8001d56:	d100      	bne.n	8001d5a <HAL_PCD_EP_DB_Transmit+0x1a>
 8001d58:	e1e4      	b.n	8002124 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2250      	movs	r2, #80	; 0x50
 8001d60:	5a9b      	ldrh	r3, [r3, r2]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	001a      	movs	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	18d2      	adds	r2, r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	18d3      	adds	r3, r2, r3
 8001d74:	4ad0      	ldr	r2, [pc, #832]	; (80020b8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001d76:	4694      	mov	ip, r2
 8001d78:	4463      	add	r3, ip
 8001d7a:	881a      	ldrh	r2, [r3, #0]
 8001d7c:	2186      	movs	r1, #134	; 0x86
 8001d7e:	187b      	adds	r3, r7, r1
 8001d80:	0592      	lsls	r2, r2, #22
 8001d82:	0d92      	lsrs	r2, r2, #22
 8001d84:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	699a      	ldr	r2, [r3, #24]
 8001d8a:	187b      	adds	r3, r7, r1
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d907      	bls.n	8001da2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	699a      	ldr	r2, [r3, #24]
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	1ad2      	subs	r2, r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	619a      	str	r2, [r3, #24]
 8001da0:	e002      	b.n	8001da8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d000      	beq.n	8001db2 <HAL_PCD_EP_DB_Transmit+0x72>
 8001db0:	e0b5      	b.n	8001f1e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	785b      	ldrb	r3, [r3, #1]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d125      	bne.n	8001e06 <HAL_PCD_EP_DB_Transmit+0xc6>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2250      	movs	r2, #80	; 0x50
 8001dc6:	5a9b      	ldrh	r3, [r3, r2]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	001a      	movs	r2, r3
 8001dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dce:	189b      	adds	r3, r3, r2
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	00da      	lsls	r2, r3, #3
 8001dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dda:	18d3      	adds	r3, r2, r3
 8001ddc:	4ab6      	ldr	r2, [pc, #728]	; (80020b8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001dde:	4694      	mov	ip, r2
 8001de0:	4463      	add	r3, ip
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	059b      	lsls	r3, r3, #22
 8001dec:	0d9b      	lsrs	r3, r3, #22
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	801a      	strh	r2, [r3, #0]
 8001df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	4ab0      	ldr	r2, [pc, #704]	; (80020bc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e02:	801a      	strh	r2, [r3, #0]
 8001e04:	e01b      	b.n	8001e3e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	785b      	ldrb	r3, [r3, #1]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d117      	bne.n	8001e3e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2250      	movs	r2, #80	; 0x50
 8001e1a:	5a9b      	ldrh	r3, [r3, r2]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	001a      	movs	r2, r3
 8001e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e22:	189b      	adds	r3, r3, r2
 8001e24:	637b      	str	r3, [r7, #52]	; 0x34
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	00da      	lsls	r2, r3, #3
 8001e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2e:	18d3      	adds	r3, r2, r3
 8001e30:	4aa1      	ldr	r2, [pc, #644]	; (80020b8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001e32:	4694      	mov	ip, r2
 8001e34:	4463      	add	r3, ip
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
 8001e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	785b      	ldrb	r3, [r3, #1]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d125      	bne.n	8001e98 <HAL_PCD_EP_DB_Transmit+0x158>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2250      	movs	r2, #80	; 0x50
 8001e58:	5a9b      	ldrh	r3, [r3, r2]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	001a      	movs	r2, r3
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	189b      	adds	r3, r3, r2
 8001e62:	61fb      	str	r3, [r7, #28]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	00da      	lsls	r2, r3, #3
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	18d3      	adds	r3, r2, r3
 8001e6e:	4a94      	ldr	r2, [pc, #592]	; (80020c0 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001e70:	4694      	mov	ip, r2
 8001e72:	4463      	add	r3, ip
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	059b      	lsls	r3, r3, #22
 8001e7e:	0d9b      	lsrs	r3, r3, #22
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	801a      	strh	r2, [r3, #0]
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	4a8b      	ldr	r2, [pc, #556]	; (80020bc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	801a      	strh	r2, [r3, #0]
 8001e96:	e018      	b.n	8001eca <HAL_PCD_EP_DB_Transmit+0x18a>
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	785b      	ldrb	r3, [r3, #1]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d114      	bne.n	8001eca <HAL_PCD_EP_DB_Transmit+0x18a>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2250      	movs	r2, #80	; 0x50
 8001ea6:	5a9b      	ldrh	r3, [r3, r2]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	001a      	movs	r2, r3
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	189b      	adds	r3, r3, r2
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	00da      	lsls	r2, r3, #3
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	18d3      	adds	r3, r2, r3
 8001ebc:	4a80      	ldr	r2, [pc, #512]	; (80020c0 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001ebe:	4694      	mov	ip, r2
 8001ec0:	4463      	add	r3, ip
 8001ec2:	623b      	str	r3, [r7, #32]
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	781a      	ldrb	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	0011      	movs	r1, r2
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f005 f932 	bl	800713c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ed8:	1dbb      	adds	r3, r7, #6
 8001eda:	881a      	ldrh	r2, [r3, #0]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	01db      	lsls	r3, r3, #7
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d100      	bne.n	8001ee6 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8001ee4:	e309      	b.n	80024fa <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	001a      	movs	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	18d3      	adds	r3, r2, r3
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	2016      	movs	r0, #22
 8001efa:	183b      	adds	r3, r7, r0
 8001efc:	4971      	ldr	r1, [pc, #452]	; (80020c4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8001efe:	400a      	ands	r2, r1
 8001f00:	801a      	strh	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	001a      	movs	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	18d3      	adds	r3, r2, r3
 8001f10:	183a      	adds	r2, r7, r0
 8001f12:	8812      	ldrh	r2, [r2, #0]
 8001f14:	496c      	ldr	r1, [pc, #432]	; (80020c8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8001f16:	430a      	orrs	r2, r1
 8001f18:	b292      	uxth	r2, r2
 8001f1a:	801a      	strh	r2, [r3, #0]
 8001f1c:	e2ed      	b.n	80024fa <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f1e:	1dbb      	adds	r3, r7, #6
 8001f20:	881a      	ldrh	r2, [r3, #0]
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	01db      	lsls	r3, r3, #7
 8001f26:	4013      	ands	r3, r2
 8001f28:	d01a      	beq.n	8001f60 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	001a      	movs	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	18d3      	adds	r3, r2, r3
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	208a      	movs	r0, #138	; 0x8a
 8001f3e:	183b      	adds	r3, r7, r0
 8001f40:	4960      	ldr	r1, [pc, #384]	; (80020c4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8001f42:	400a      	ands	r2, r1
 8001f44:	801a      	strh	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	001a      	movs	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	18d3      	adds	r3, r2, r3
 8001f54:	183a      	adds	r2, r7, r0
 8001f56:	8812      	ldrh	r2, [r2, #0]
 8001f58:	495b      	ldr	r1, [pc, #364]	; (80020c8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	b292      	uxth	r2, r2
 8001f5e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2224      	movs	r2, #36	; 0x24
 8001f64:	5c9b      	ldrb	r3, [r3, r2]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d000      	beq.n	8001f6c <HAL_PCD_EP_DB_Transmit+0x22c>
 8001f6a:	e2c6      	b.n	80024fa <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	2186      	movs	r1, #134	; 0x86
 8001f72:	187b      	adds	r3, r7, r1
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	18d2      	adds	r2, r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	69da      	ldr	r2, [r3, #28]
 8001f80:	187b      	adds	r3, r7, r1
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	18d2      	adds	r2, r2, r3
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	6a1a      	ldr	r2, [r3, #32]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d30c      	bcc.n	8001fb0 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	218c      	movs	r1, #140	; 0x8c
 8001f9c:	187a      	adds	r2, r7, r1
 8001f9e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	6a1a      	ldr	r2, [r3, #32]
 8001fa4:	187b      	adds	r3, r7, r1
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	1ad2      	subs	r2, r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	621a      	str	r2, [r3, #32]
 8001fae:	e01a      	b.n	8001fe6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10a      	bne.n	8001fce <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8001fb8:	2386      	movs	r3, #134	; 0x86
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	228c      	movs	r2, #140	; 0x8c
 8001fc0:	18ba      	adds	r2, r7, r2
 8001fc2:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2224      	movs	r2, #36	; 0x24
 8001fc8:	2100      	movs	r1, #0
 8001fca:	5499      	strb	r1, [r3, r2]
 8001fcc:	e00b      	b.n	8001fe6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2224      	movs	r2, #36	; 0x24
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	228c      	movs	r2, #140	; 0x8c
 8001fdc:	18ba      	adds	r2, r7, r2
 8001fde:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	785b      	ldrb	r3, [r3, #1]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d000      	beq.n	8001ff0 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8001fee:	e06d      	b.n	80020cc <HAL_PCD_EP_DB_Transmit+0x38c>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2250      	movs	r2, #80	; 0x50
 8001ffc:	5a9b      	ldrh	r3, [r3, r2]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	001a      	movs	r2, r3
 8002002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002004:	189b      	adds	r3, r3, r2
 8002006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	00da      	lsls	r2, r3, #3
 800200e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002010:	18d3      	adds	r3, r2, r3
 8002012:	4a29      	ldr	r2, [pc, #164]	; (80020b8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8002014:	4694      	mov	ip, r2
 8002016:	4463      	add	r3, ip
 8002018:	63bb      	str	r3, [r7, #56]	; 0x38
 800201a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	b29b      	uxth	r3, r3
 8002020:	059b      	lsls	r3, r3, #22
 8002022:	0d9b      	lsrs	r3, r3, #22
 8002024:	b29a      	uxth	r2, r3
 8002026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002028:	801a      	strh	r2, [r3, #0]
 800202a:	228c      	movs	r2, #140	; 0x8c
 800202c:	18bb      	adds	r3, r7, r2
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b3e      	cmp	r3, #62	; 0x3e
 8002032:	d91a      	bls.n	800206a <HAL_PCD_EP_DB_Transmit+0x32a>
 8002034:	18bb      	adds	r3, r7, r2
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	095b      	lsrs	r3, r3, #5
 800203a:	64bb      	str	r3, [r7, #72]	; 0x48
 800203c:	18bb      	adds	r3, r7, r2
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	221f      	movs	r2, #31
 8002042:	4013      	ands	r3, r2
 8002044:	d102      	bne.n	800204c <HAL_PCD_EP_DB_Transmit+0x30c>
 8002046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002048:	3b01      	subs	r3, #1
 800204a:	64bb      	str	r3, [r7, #72]	; 0x48
 800204c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	b29a      	uxth	r2, r3
 8002052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002054:	b29b      	uxth	r3, r3
 8002056:	029b      	lsls	r3, r3, #10
 8002058:	b29b      	uxth	r3, r3
 800205a:	4313      	orrs	r3, r2
 800205c:	b29b      	uxth	r3, r3
 800205e:	4a17      	ldr	r2, [pc, #92]	; (80020bc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002060:	4313      	orrs	r3, r2
 8002062:	b29a      	uxth	r2, r3
 8002064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002066:	801a      	strh	r2, [r3, #0]
 8002068:	e04f      	b.n	800210a <HAL_PCD_EP_DB_Transmit+0x3ca>
 800206a:	238c      	movs	r3, #140	; 0x8c
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d108      	bne.n	8002086 <HAL_PCD_EP_DB_Transmit+0x346>
 8002074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	4a10      	ldr	r2, [pc, #64]	; (80020bc <HAL_PCD_EP_DB_Transmit+0x37c>)
 800207c:	4313      	orrs	r3, r2
 800207e:	b29a      	uxth	r2, r3
 8002080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002082:	801a      	strh	r2, [r3, #0]
 8002084:	e041      	b.n	800210a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002086:	228c      	movs	r2, #140	; 0x8c
 8002088:	18bb      	adds	r3, r7, r2
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	085b      	lsrs	r3, r3, #1
 800208e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002090:	18bb      	adds	r3, r7, r2
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2201      	movs	r2, #1
 8002096:	4013      	ands	r3, r2
 8002098:	d002      	beq.n	80020a0 <HAL_PCD_EP_DB_Transmit+0x360>
 800209a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800209c:	3301      	adds	r3, #1
 800209e:	64bb      	str	r3, [r7, #72]	; 0x48
 80020a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	029b      	lsls	r3, r3, #10
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	4313      	orrs	r3, r2
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b4:	801a      	strh	r2, [r3, #0]
 80020b6:	e028      	b.n	800210a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80020b8:	00000402 	.word	0x00000402
 80020bc:	ffff8000 	.word	0xffff8000
 80020c0:	00000406 	.word	0x00000406
 80020c4:	ffff8f8f 	.word	0xffff8f8f
 80020c8:	ffffc080 	.word	0xffffc080
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	785b      	ldrb	r3, [r3, #1]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d11a      	bne.n	800210a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	647b      	str	r3, [r7, #68]	; 0x44
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2250      	movs	r2, #80	; 0x50
 80020e0:	5a9b      	ldrh	r3, [r3, r2]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	001a      	movs	r2, r3
 80020e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e8:	189b      	adds	r3, r3, r2
 80020ea:	647b      	str	r3, [r7, #68]	; 0x44
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	00da      	lsls	r2, r3, #3
 80020f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f4:	18d3      	adds	r3, r2, r3
 80020f6:	4adb      	ldr	r2, [pc, #876]	; (8002464 <HAL_PCD_EP_DB_Transmit+0x724>)
 80020f8:	4694      	mov	ip, r2
 80020fa:	4463      	add	r3, ip
 80020fc:	643b      	str	r3, [r7, #64]	; 0x40
 80020fe:	238c      	movs	r3, #140	; 0x8c
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	b29a      	uxth	r2, r3
 8002106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002108:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	6959      	ldr	r1, [r3, #20]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	891a      	ldrh	r2, [r3, #8]
 8002116:	238c      	movs	r3, #140	; 0x8c
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	b29b      	uxth	r3, r3
 800211e:	f003 fa0f 	bl	8005540 <USB_WritePMA>
 8002122:	e1ea      	b.n	80024fa <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2250      	movs	r2, #80	; 0x50
 800212a:	5a9b      	ldrh	r3, [r3, r2]
 800212c:	b29b      	uxth	r3, r3
 800212e:	001a      	movs	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	18d2      	adds	r2, r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	18d3      	adds	r3, r2, r3
 800213e:	4aca      	ldr	r2, [pc, #808]	; (8002468 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002140:	4694      	mov	ip, r2
 8002142:	4463      	add	r3, ip
 8002144:	881a      	ldrh	r2, [r3, #0]
 8002146:	2186      	movs	r1, #134	; 0x86
 8002148:	187b      	adds	r3, r7, r1
 800214a:	0592      	lsls	r2, r2, #22
 800214c:	0d92      	lsrs	r2, r2, #22
 800214e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	699a      	ldr	r2, [r3, #24]
 8002154:	187b      	adds	r3, r7, r1
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d307      	bcc.n	800216c <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	699a      	ldr	r2, [r3, #24]
 8002160:	187b      	adds	r3, r7, r1
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	1ad2      	subs	r2, r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	619a      	str	r2, [r3, #24]
 800216a:	e002      	b.n	8002172 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d000      	beq.n	800217c <HAL_PCD_EP_DB_Transmit+0x43c>
 800217a:	e0bb      	b.n	80022f4 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	785b      	ldrb	r3, [r3, #1]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d125      	bne.n	80021d0 <HAL_PCD_EP_DB_Transmit+0x490>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	67fb      	str	r3, [r7, #124]	; 0x7c
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2250      	movs	r2, #80	; 0x50
 8002190:	5a9b      	ldrh	r3, [r3, r2]
 8002192:	b29b      	uxth	r3, r3
 8002194:	001a      	movs	r2, r3
 8002196:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002198:	189b      	adds	r3, r3, r2
 800219a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	00da      	lsls	r2, r3, #3
 80021a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021a4:	18d3      	adds	r3, r2, r3
 80021a6:	4aaf      	ldr	r2, [pc, #700]	; (8002464 <HAL_PCD_EP_DB_Transmit+0x724>)
 80021a8:	4694      	mov	ip, r2
 80021aa:	4463      	add	r3, ip
 80021ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80021ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	059b      	lsls	r3, r3, #22
 80021b6:	0d9b      	lsrs	r3, r3, #22
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021bc:	801a      	strh	r2, [r3, #0]
 80021be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	4aa9      	ldr	r2, [pc, #676]	; (800246c <HAL_PCD_EP_DB_Transmit+0x72c>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021cc:	801a      	strh	r2, [r3, #0]
 80021ce:	e01b      	b.n	8002208 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	785b      	ldrb	r3, [r3, #1]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d117      	bne.n	8002208 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	667b      	str	r3, [r7, #100]	; 0x64
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2250      	movs	r2, #80	; 0x50
 80021e4:	5a9b      	ldrh	r3, [r3, r2]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	001a      	movs	r2, r3
 80021ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021ec:	189b      	adds	r3, r3, r2
 80021ee:	667b      	str	r3, [r7, #100]	; 0x64
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	00da      	lsls	r2, r3, #3
 80021f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021f8:	18d3      	adds	r3, r2, r3
 80021fa:	4a9a      	ldr	r2, [pc, #616]	; (8002464 <HAL_PCD_EP_DB_Transmit+0x724>)
 80021fc:	4694      	mov	ip, r2
 80021fe:	4463      	add	r3, ip
 8002200:	663b      	str	r3, [r7, #96]	; 0x60
 8002202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002204:	2200      	movs	r2, #0
 8002206:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	677b      	str	r3, [r7, #116]	; 0x74
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	785b      	ldrb	r3, [r3, #1]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d12b      	bne.n	800226e <HAL_PCD_EP_DB_Transmit+0x52e>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2250      	movs	r2, #80	; 0x50
 8002222:	5a9b      	ldrh	r3, [r3, r2]
 8002224:	b29b      	uxth	r3, r3
 8002226:	001a      	movs	r2, r3
 8002228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800222a:	189b      	adds	r3, r3, r2
 800222c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	00da      	lsls	r2, r3, #3
 8002234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002236:	18d3      	adds	r3, r2, r3
 8002238:	4a8b      	ldr	r2, [pc, #556]	; (8002468 <HAL_PCD_EP_DB_Transmit+0x728>)
 800223a:	4694      	mov	ip, r2
 800223c:	4463      	add	r3, ip
 800223e:	2180      	movs	r1, #128	; 0x80
 8002240:	187a      	adds	r2, r7, r1
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	187b      	adds	r3, r7, r1
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	b29b      	uxth	r3, r3
 800224c:	059b      	lsls	r3, r3, #22
 800224e:	0d9b      	lsrs	r3, r3, #22
 8002250:	b29a      	uxth	r2, r3
 8002252:	187b      	adds	r3, r7, r1
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	801a      	strh	r2, [r3, #0]
 8002258:	187b      	adds	r3, r7, r1
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	4a82      	ldr	r2, [pc, #520]	; (800246c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002262:	4313      	orrs	r3, r2
 8002264:	b29a      	uxth	r2, r3
 8002266:	187b      	adds	r3, r7, r1
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	801a      	strh	r2, [r3, #0]
 800226c:	e018      	b.n	80022a0 <HAL_PCD_EP_DB_Transmit+0x560>
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	785b      	ldrb	r3, [r3, #1]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d114      	bne.n	80022a0 <HAL_PCD_EP_DB_Transmit+0x560>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2250      	movs	r2, #80	; 0x50
 800227c:	5a9b      	ldrh	r3, [r3, r2]
 800227e:	b29b      	uxth	r3, r3
 8002280:	001a      	movs	r2, r3
 8002282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002284:	189b      	adds	r3, r3, r2
 8002286:	677b      	str	r3, [r7, #116]	; 0x74
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	00da      	lsls	r2, r3, #3
 800228e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002290:	18d3      	adds	r3, r2, r3
 8002292:	4a75      	ldr	r2, [pc, #468]	; (8002468 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002294:	4694      	mov	ip, r2
 8002296:	4463      	add	r3, ip
 8002298:	673b      	str	r3, [r7, #112]	; 0x70
 800229a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800229c:	2200      	movs	r2, #0
 800229e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	0011      	movs	r1, r2
 80022a8:	0018      	movs	r0, r3
 80022aa:	f004 ff47 	bl	800713c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022ae:	1dbb      	adds	r3, r7, #6
 80022b0:	881a      	ldrh	r2, [r3, #0]
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	01db      	lsls	r3, r3, #7
 80022b6:	4013      	ands	r3, r2
 80022b8:	d000      	beq.n	80022bc <HAL_PCD_EP_DB_Transmit+0x57c>
 80022ba:	e11e      	b.n	80024fa <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	001a      	movs	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	18d3      	adds	r3, r2, r3
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	2088      	movs	r0, #136	; 0x88
 80022d0:	183b      	adds	r3, r7, r0
 80022d2:	4967      	ldr	r1, [pc, #412]	; (8002470 <HAL_PCD_EP_DB_Transmit+0x730>)
 80022d4:	400a      	ands	r2, r1
 80022d6:	801a      	strh	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	001a      	movs	r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	18d3      	adds	r3, r2, r3
 80022e6:	183a      	adds	r2, r7, r0
 80022e8:	8812      	ldrh	r2, [r2, #0]
 80022ea:	4962      	ldr	r1, [pc, #392]	; (8002474 <HAL_PCD_EP_DB_Transmit+0x734>)
 80022ec:	430a      	orrs	r2, r1
 80022ee:	b292      	uxth	r2, r2
 80022f0:	801a      	strh	r2, [r3, #0]
 80022f2:	e102      	b.n	80024fa <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022f4:	1dbb      	adds	r3, r7, #6
 80022f6:	881a      	ldrh	r2, [r3, #0]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	01db      	lsls	r3, r3, #7
 80022fc:	4013      	ands	r3, r2
 80022fe:	d11a      	bne.n	8002336 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	001a      	movs	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	18d3      	adds	r3, r2, r3
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	b29a      	uxth	r2, r3
 8002312:	204e      	movs	r0, #78	; 0x4e
 8002314:	183b      	adds	r3, r7, r0
 8002316:	4956      	ldr	r1, [pc, #344]	; (8002470 <HAL_PCD_EP_DB_Transmit+0x730>)
 8002318:	400a      	ands	r2, r1
 800231a:	801a      	strh	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	001a      	movs	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	18d3      	adds	r3, r2, r3
 800232a:	183a      	adds	r2, r7, r0
 800232c:	8812      	ldrh	r2, [r2, #0]
 800232e:	4951      	ldr	r1, [pc, #324]	; (8002474 <HAL_PCD_EP_DB_Transmit+0x734>)
 8002330:	430a      	orrs	r2, r1
 8002332:	b292      	uxth	r2, r2
 8002334:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2224      	movs	r2, #36	; 0x24
 800233a:	5c9b      	ldrb	r3, [r3, r2]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d000      	beq.n	8002342 <HAL_PCD_EP_DB_Transmit+0x602>
 8002340:	e0db      	b.n	80024fa <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	695a      	ldr	r2, [r3, #20]
 8002346:	2186      	movs	r1, #134	; 0x86
 8002348:	187b      	adds	r3, r7, r1
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	18d2      	adds	r2, r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	69da      	ldr	r2, [r3, #28]
 8002356:	187b      	adds	r3, r7, r1
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	18d2      	adds	r2, r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	6a1a      	ldr	r2, [r3, #32]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	429a      	cmp	r2, r3
 800236a:	d30c      	bcc.n	8002386 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	218c      	movs	r1, #140	; 0x8c
 8002372:	187a      	adds	r2, r7, r1
 8002374:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	6a1a      	ldr	r2, [r3, #32]
 800237a:	187b      	adds	r3, r7, r1
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	1ad2      	subs	r2, r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	621a      	str	r2, [r3, #32]
 8002384:	e01a      	b.n	80023bc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10a      	bne.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800238e:	2386      	movs	r3, #134	; 0x86
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	228c      	movs	r2, #140	; 0x8c
 8002396:	18ba      	adds	r2, r7, r2
 8002398:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2224      	movs	r2, #36	; 0x24
 800239e:	2100      	movs	r1, #0
 80023a0:	5499      	strb	r1, [r3, r2]
 80023a2:	e00b      	b.n	80023bc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	228c      	movs	r2, #140	; 0x8c
 80023aa:	18ba      	adds	r2, r7, r2
 80023ac:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2200      	movs	r2, #0
 80023b2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2224      	movs	r2, #36	; 0x24
 80023b8:	2100      	movs	r1, #0
 80023ba:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	657b      	str	r3, [r7, #84]	; 0x54
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	785b      	ldrb	r3, [r3, #1]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d000      	beq.n	80023cc <HAL_PCD_EP_DB_Transmit+0x68c>
 80023ca:	e06e      	b.n	80024aa <HAL_PCD_EP_DB_Transmit+0x76a>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2250      	movs	r2, #80	; 0x50
 80023d8:	5a9b      	ldrh	r3, [r3, r2]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	001a      	movs	r2, r3
 80023de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023e0:	189b      	adds	r3, r3, r2
 80023e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	00da      	lsls	r2, r3, #3
 80023ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ec:	18d3      	adds	r3, r2, r3
 80023ee:	4a1e      	ldr	r2, [pc, #120]	; (8002468 <HAL_PCD_EP_DB_Transmit+0x728>)
 80023f0:	4694      	mov	ip, r2
 80023f2:	4463      	add	r3, ip
 80023f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80023f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	059b      	lsls	r3, r3, #22
 80023fe:	0d9b      	lsrs	r3, r3, #22
 8002400:	b29a      	uxth	r2, r3
 8002402:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002404:	801a      	strh	r2, [r3, #0]
 8002406:	228c      	movs	r2, #140	; 0x8c
 8002408:	18bb      	adds	r3, r7, r2
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b3e      	cmp	r3, #62	; 0x3e
 800240e:	d91a      	bls.n	8002446 <HAL_PCD_EP_DB_Transmit+0x706>
 8002410:	18bb      	adds	r3, r7, r2
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	66bb      	str	r3, [r7, #104]	; 0x68
 8002418:	18bb      	adds	r3, r7, r2
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	221f      	movs	r2, #31
 800241e:	4013      	ands	r3, r2
 8002420:	d102      	bne.n	8002428 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8002422:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002424:	3b01      	subs	r3, #1
 8002426:	66bb      	str	r3, [r7, #104]	; 0x68
 8002428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	b29a      	uxth	r2, r3
 800242e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002430:	b29b      	uxth	r3, r3
 8002432:	029b      	lsls	r3, r3, #10
 8002434:	b29b      	uxth	r3, r3
 8002436:	4313      	orrs	r3, r2
 8002438:	b29b      	uxth	r3, r3
 800243a:	4a0c      	ldr	r2, [pc, #48]	; (800246c <HAL_PCD_EP_DB_Transmit+0x72c>)
 800243c:	4313      	orrs	r3, r2
 800243e:	b29a      	uxth	r2, r3
 8002440:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002442:	801a      	strh	r2, [r3, #0]
 8002444:	e04d      	b.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002446:	238c      	movs	r3, #140	; 0x8c
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d113      	bne.n	8002478 <HAL_PCD_EP_DB_Transmit+0x738>
 8002450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	b29b      	uxth	r3, r3
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002458:	4313      	orrs	r3, r2
 800245a:	b29a      	uxth	r2, r3
 800245c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800245e:	801a      	strh	r2, [r3, #0]
 8002460:	e03f      	b.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	00000402 	.word	0x00000402
 8002468:	00000406 	.word	0x00000406
 800246c:	ffff8000 	.word	0xffff8000
 8002470:	ffff8f8f 	.word	0xffff8f8f
 8002474:	ffffc080 	.word	0xffffc080
 8002478:	228c      	movs	r2, #140	; 0x8c
 800247a:	18bb      	adds	r3, r7, r2
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	085b      	lsrs	r3, r3, #1
 8002480:	66bb      	str	r3, [r7, #104]	; 0x68
 8002482:	18bb      	adds	r3, r7, r2
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2201      	movs	r2, #1
 8002488:	4013      	ands	r3, r2
 800248a:	d002      	beq.n	8002492 <HAL_PCD_EP_DB_Transmit+0x752>
 800248c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800248e:	3301      	adds	r3, #1
 8002490:	66bb      	str	r3, [r7, #104]	; 0x68
 8002492:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	b29a      	uxth	r2, r3
 8002498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800249a:	b29b      	uxth	r3, r3
 800249c:	029b      	lsls	r3, r3, #10
 800249e:	b29b      	uxth	r3, r3
 80024a0:	4313      	orrs	r3, r2
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a6:	801a      	strh	r2, [r3, #0]
 80024a8:	e01b      	b.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	785b      	ldrb	r3, [r3, #1]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d117      	bne.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2250      	movs	r2, #80	; 0x50
 80024b8:	5a9b      	ldrh	r3, [r3, r2]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	001a      	movs	r2, r3
 80024be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c0:	189b      	adds	r3, r3, r2
 80024c2:	657b      	str	r3, [r7, #84]	; 0x54
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	00da      	lsls	r2, r3, #3
 80024ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024cc:	18d3      	adds	r3, r2, r3
 80024ce:	4a21      	ldr	r2, [pc, #132]	; (8002554 <HAL_PCD_EP_DB_Transmit+0x814>)
 80024d0:	4694      	mov	ip, r2
 80024d2:	4463      	add	r3, ip
 80024d4:	653b      	str	r3, [r7, #80]	; 0x50
 80024d6:	238c      	movs	r3, #140	; 0x8c
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	b29a      	uxth	r2, r3
 80024de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024e0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	6959      	ldr	r1, [r3, #20]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	895a      	ldrh	r2, [r3, #10]
 80024ee:	238c      	movs	r3, #140	; 0x8c
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	f003 f823 	bl	8005540 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	001a      	movs	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	18d3      	adds	r3, r2, r3
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	b29a      	uxth	r2, r3
 800250c:	2014      	movs	r0, #20
 800250e:	183b      	adds	r3, r7, r0
 8002510:	4911      	ldr	r1, [pc, #68]	; (8002558 <HAL_PCD_EP_DB_Transmit+0x818>)
 8002512:	400a      	ands	r2, r1
 8002514:	801a      	strh	r2, [r3, #0]
 8002516:	183b      	adds	r3, r7, r0
 8002518:	183a      	adds	r2, r7, r0
 800251a:	8812      	ldrh	r2, [r2, #0]
 800251c:	2110      	movs	r1, #16
 800251e:	404a      	eors	r2, r1
 8002520:	801a      	strh	r2, [r3, #0]
 8002522:	183b      	adds	r3, r7, r0
 8002524:	183a      	adds	r2, r7, r0
 8002526:	8812      	ldrh	r2, [r2, #0]
 8002528:	2120      	movs	r1, #32
 800252a:	404a      	eors	r2, r1
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	001a      	movs	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	18d3      	adds	r3, r2, r3
 800253c:	183a      	adds	r2, r7, r0
 800253e:	8812      	ldrh	r2, [r2, #0]
 8002540:	4906      	ldr	r1, [pc, #24]	; (800255c <HAL_PCD_EP_DB_Transmit+0x81c>)
 8002542:	430a      	orrs	r2, r1
 8002544:	b292      	uxth	r2, r2
 8002546:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	0018      	movs	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	b024      	add	sp, #144	; 0x90
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	00000406 	.word	0x00000406
 8002558:	ffff8fbf 	.word	0xffff8fbf
 800255c:	ffff8080 	.word	0xffff8080

08002560 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	0008      	movs	r0, r1
 800256a:	0011      	movs	r1, r2
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	240a      	movs	r4, #10
 8002570:	193b      	adds	r3, r7, r4
 8002572:	1c02      	adds	r2, r0, #0
 8002574:	801a      	strh	r2, [r3, #0]
 8002576:	2308      	movs	r3, #8
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	1c0a      	adds	r2, r1, #0
 800257c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800257e:	0021      	movs	r1, r4
 8002580:	187b      	adds	r3, r7, r1
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	2280      	movs	r2, #128	; 0x80
 8002586:	4013      	ands	r3, r2
 8002588:	b29b      	uxth	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00c      	beq.n	80025a8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800258e:	187b      	adds	r3, r7, r1
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	2207      	movs	r2, #7
 8002594:	4013      	ands	r3, r2
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	0013      	movs	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	189b      	adds	r3, r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	18d3      	adds	r3, r2, r3
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	e00b      	b.n	80025c0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025a8:	230a      	movs	r3, #10
 80025aa:	18fb      	adds	r3, r7, r3
 80025ac:	881a      	ldrh	r2, [r3, #0]
 80025ae:	0013      	movs	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	189b      	adds	r3, r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	3369      	adds	r3, #105	; 0x69
 80025b8:	33ff      	adds	r3, #255	; 0xff
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	18d3      	adds	r3, r2, r3
 80025be:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80025c0:	2308      	movs	r3, #8
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d107      	bne.n	80025da <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2200      	movs	r2, #0
 80025ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	80da      	strh	r2, [r3, #6]
 80025d8:	e00b      	b.n	80025f2 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2201      	movs	r2, #1
 80025de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	0c1b      	lsrs	r3, r3, #16
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b007      	add	sp, #28
 80025fa:	bd90      	pop	{r4, r7, pc}

080025fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	23ba      	movs	r3, #186	; 0xba
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	2101      	movs	r1, #1
 8002612:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	23b8      	movs	r3, #184	; 0xb8
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	2100      	movs	r1, #0
 800261c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2254      	movs	r2, #84	; 0x54
 8002622:	5a9b      	ldrh	r3, [r3, r2]
 8002624:	b29b      	uxth	r3, r3
 8002626:	2201      	movs	r2, #1
 8002628:	4313      	orrs	r3, r2
 800262a:	b299      	uxth	r1, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2254      	movs	r2, #84	; 0x54
 8002630:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2254      	movs	r2, #84	; 0x54
 8002636:	5a9b      	ldrh	r3, [r3, r2]
 8002638:	b29b      	uxth	r3, r3
 800263a:	2202      	movs	r2, #2
 800263c:	4313      	orrs	r3, r2
 800263e:	b299      	uxth	r1, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2254      	movs	r2, #84	; 0x54
 8002644:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	0018      	movs	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	b004      	add	sp, #16
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	000a      	movs	r2, r1
 800265a:	1cfb      	adds	r3, r7, #3
 800265c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	46bd      	mov	sp, r7
 8002662:	b002      	add	sp, #8
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002668:	b5b0      	push	{r4, r5, r7, lr}
 800266a:	b08a      	sub	sp, #40	; 0x28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d102      	bne.n	800267c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	f000 fbaf 	bl	8002dda <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800267c:	4bcf      	ldr	r3, [pc, #828]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	220c      	movs	r2, #12
 8002682:	4013      	ands	r3, r2
 8002684:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002686:	4bcd      	ldr	r3, [pc, #820]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	025b      	lsls	r3, r3, #9
 800268e:	4013      	ands	r3, r2
 8002690:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2201      	movs	r2, #1
 8002698:	4013      	ands	r3, r2
 800269a:	d100      	bne.n	800269e <HAL_RCC_OscConfig+0x36>
 800269c:	e07e      	b.n	800279c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d007      	beq.n	80026b4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d112      	bne.n	80026d0 <HAL_RCC_OscConfig+0x68>
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	025b      	lsls	r3, r3, #9
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d10d      	bne.n	80026d0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b4:	4bc1      	ldr	r3, [pc, #772]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	029b      	lsls	r3, r3, #10
 80026bc:	4013      	ands	r3, r2
 80026be:	d100      	bne.n	80026c2 <HAL_RCC_OscConfig+0x5a>
 80026c0:	e06b      	b.n	800279a <HAL_RCC_OscConfig+0x132>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d167      	bne.n	800279a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f000 fb85 	bl	8002dda <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	025b      	lsls	r3, r3, #9
 80026d8:	429a      	cmp	r2, r3
 80026da:	d107      	bne.n	80026ec <HAL_RCC_OscConfig+0x84>
 80026dc:	4bb7      	ldr	r3, [pc, #732]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4bb6      	ldr	r3, [pc, #728]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 80026e2:	2180      	movs	r1, #128	; 0x80
 80026e4:	0249      	lsls	r1, r1, #9
 80026e6:	430a      	orrs	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e027      	b.n	800273c <HAL_RCC_OscConfig+0xd4>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	23a0      	movs	r3, #160	; 0xa0
 80026f2:	02db      	lsls	r3, r3, #11
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d10e      	bne.n	8002716 <HAL_RCC_OscConfig+0xae>
 80026f8:	4bb0      	ldr	r3, [pc, #704]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4baf      	ldr	r3, [pc, #700]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 80026fe:	2180      	movs	r1, #128	; 0x80
 8002700:	02c9      	lsls	r1, r1, #11
 8002702:	430a      	orrs	r2, r1
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	4bad      	ldr	r3, [pc, #692]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4bac      	ldr	r3, [pc, #688]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 800270c:	2180      	movs	r1, #128	; 0x80
 800270e:	0249      	lsls	r1, r1, #9
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	e012      	b.n	800273c <HAL_RCC_OscConfig+0xd4>
 8002716:	4ba9      	ldr	r3, [pc, #676]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4ba8      	ldr	r3, [pc, #672]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 800271c:	49a8      	ldr	r1, [pc, #672]	; (80029c0 <HAL_RCC_OscConfig+0x358>)
 800271e:	400a      	ands	r2, r1
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	4ba6      	ldr	r3, [pc, #664]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	025b      	lsls	r3, r3, #9
 800272a:	4013      	ands	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4ba2      	ldr	r3, [pc, #648]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4ba1      	ldr	r3, [pc, #644]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 8002736:	49a3      	ldr	r1, [pc, #652]	; (80029c4 <HAL_RCC_OscConfig+0x35c>)
 8002738:	400a      	ands	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d015      	beq.n	8002770 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7fe f84c 	bl	80007e0 <HAL_GetTick>
 8002748:	0003      	movs	r3, r0
 800274a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800274c:	e009      	b.n	8002762 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800274e:	f7fe f847 	bl	80007e0 <HAL_GetTick>
 8002752:	0002      	movs	r2, r0
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b64      	cmp	r3, #100	; 0x64
 800275a:	d902      	bls.n	8002762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	f000 fb3c 	bl	8002dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002762:	4b96      	ldr	r3, [pc, #600]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	029b      	lsls	r3, r3, #10
 800276a:	4013      	ands	r3, r2
 800276c:	d0ef      	beq.n	800274e <HAL_RCC_OscConfig+0xe6>
 800276e:	e015      	b.n	800279c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7fe f836 	bl	80007e0 <HAL_GetTick>
 8002774:	0003      	movs	r3, r0
 8002776:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800277a:	f7fe f831 	bl	80007e0 <HAL_GetTick>
 800277e:	0002      	movs	r2, r0
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b64      	cmp	r3, #100	; 0x64
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e326      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800278c:	4b8b      	ldr	r3, [pc, #556]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	029b      	lsls	r3, r3, #10
 8002794:	4013      	ands	r3, r2
 8002796:	d1f0      	bne.n	800277a <HAL_RCC_OscConfig+0x112>
 8002798:	e000      	b.n	800279c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800279a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2202      	movs	r2, #2
 80027a2:	4013      	ands	r3, r2
 80027a4:	d100      	bne.n	80027a8 <HAL_RCC_OscConfig+0x140>
 80027a6:	e08b      	b.n	80028c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	2b0c      	cmp	r3, #12
 80027b8:	d13e      	bne.n	8002838 <HAL_RCC_OscConfig+0x1d0>
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d13b      	bne.n	8002838 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80027c0:	4b7e      	ldr	r3, [pc, #504]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2204      	movs	r2, #4
 80027c6:	4013      	ands	r3, r2
 80027c8:	d004      	beq.n	80027d4 <HAL_RCC_OscConfig+0x16c>
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e302      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d4:	4b79      	ldr	r3, [pc, #484]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4a7b      	ldr	r2, [pc, #492]	; (80029c8 <HAL_RCC_OscConfig+0x360>)
 80027da:	4013      	ands	r3, r2
 80027dc:	0019      	movs	r1, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	021a      	lsls	r2, r3, #8
 80027e4:	4b75      	ldr	r3, [pc, #468]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 80027e6:	430a      	orrs	r2, r1
 80027e8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80027ea:	4b74      	ldr	r3, [pc, #464]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2209      	movs	r2, #9
 80027f0:	4393      	bics	r3, r2
 80027f2:	0019      	movs	r1, r3
 80027f4:	4b71      	ldr	r3, [pc, #452]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027fc:	f000 fc40 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 8002800:	0001      	movs	r1, r0
 8002802:	4b6e      	ldr	r3, [pc, #440]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	220f      	movs	r2, #15
 800280a:	4013      	ands	r3, r2
 800280c:	4a6f      	ldr	r2, [pc, #444]	; (80029cc <HAL_RCC_OscConfig+0x364>)
 800280e:	5cd3      	ldrb	r3, [r2, r3]
 8002810:	000a      	movs	r2, r1
 8002812:	40da      	lsrs	r2, r3
 8002814:	4b6e      	ldr	r3, [pc, #440]	; (80029d0 <HAL_RCC_OscConfig+0x368>)
 8002816:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002818:	4b6e      	ldr	r3, [pc, #440]	; (80029d4 <HAL_RCC_OscConfig+0x36c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2513      	movs	r5, #19
 800281e:	197c      	adds	r4, r7, r5
 8002820:	0018      	movs	r0, r3
 8002822:	f7fd ff97 	bl	8000754 <HAL_InitTick>
 8002826:	0003      	movs	r3, r0
 8002828:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800282a:	197b      	adds	r3, r7, r5
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d046      	beq.n	80028c0 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002832:	197b      	adds	r3, r7, r5
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	e2d0      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d027      	beq.n	800288e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800283e:	4b5f      	ldr	r3, [pc, #380]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2209      	movs	r2, #9
 8002844:	4393      	bics	r3, r2
 8002846:	0019      	movs	r1, r3
 8002848:	4b5c      	ldr	r3, [pc, #368]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fd ffc6 	bl	80007e0 <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285a:	f7fd ffc1 	bl	80007e0 <HAL_GetTick>
 800285e:	0002      	movs	r2, r0
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e2b6      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800286c:	4b53      	ldr	r3, [pc, #332]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2204      	movs	r2, #4
 8002872:	4013      	ands	r3, r2
 8002874:	d0f1      	beq.n	800285a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002876:	4b51      	ldr	r3, [pc, #324]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4a53      	ldr	r2, [pc, #332]	; (80029c8 <HAL_RCC_OscConfig+0x360>)
 800287c:	4013      	ands	r3, r2
 800287e:	0019      	movs	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	021a      	lsls	r2, r3, #8
 8002886:	4b4d      	ldr	r3, [pc, #308]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 8002888:	430a      	orrs	r2, r1
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	e018      	b.n	80028c0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288e:	4b4b      	ldr	r3, [pc, #300]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	4b4a      	ldr	r3, [pc, #296]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 8002894:	2101      	movs	r1, #1
 8002896:	438a      	bics	r2, r1
 8002898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7fd ffa1 	bl	80007e0 <HAL_GetTick>
 800289e:	0003      	movs	r3, r0
 80028a0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a4:	f7fd ff9c 	bl	80007e0 <HAL_GetTick>
 80028a8:	0002      	movs	r2, r0
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e291      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028b6:	4b41      	ldr	r3, [pc, #260]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2204      	movs	r2, #4
 80028bc:	4013      	ands	r3, r2
 80028be:	d1f1      	bne.n	80028a4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2210      	movs	r2, #16
 80028c6:	4013      	ands	r3, r2
 80028c8:	d100      	bne.n	80028cc <HAL_RCC_OscConfig+0x264>
 80028ca:	e0a1      	b.n	8002a10 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d140      	bne.n	8002954 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028d2:	4b3a      	ldr	r3, [pc, #232]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4013      	ands	r3, r2
 80028dc:	d005      	beq.n	80028ea <HAL_RCC_OscConfig+0x282>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e277      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ea:	4b34      	ldr	r3, [pc, #208]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4a3a      	ldr	r2, [pc, #232]	; (80029d8 <HAL_RCC_OscConfig+0x370>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	0019      	movs	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f8:	4b30      	ldr	r3, [pc, #192]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028fe:	4b2f      	ldr	r3, [pc, #188]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	0a19      	lsrs	r1, r3, #8
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	061a      	lsls	r2, r3, #24
 800290c:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 800290e:	430a      	orrs	r2, r1
 8002910:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	0b5b      	lsrs	r3, r3, #13
 8002918:	3301      	adds	r3, #1
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	0212      	lsls	r2, r2, #8
 800291e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002920:	4b26      	ldr	r3, [pc, #152]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	210f      	movs	r1, #15
 8002928:	400b      	ands	r3, r1
 800292a:	4928      	ldr	r1, [pc, #160]	; (80029cc <HAL_RCC_OscConfig+0x364>)
 800292c:	5ccb      	ldrb	r3, [r1, r3]
 800292e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002930:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <HAL_RCC_OscConfig+0x368>)
 8002932:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002934:	4b27      	ldr	r3, [pc, #156]	; (80029d4 <HAL_RCC_OscConfig+0x36c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2513      	movs	r5, #19
 800293a:	197c      	adds	r4, r7, r5
 800293c:	0018      	movs	r0, r3
 800293e:	f7fd ff09 	bl	8000754 <HAL_InitTick>
 8002942:	0003      	movs	r3, r0
 8002944:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002946:	197b      	adds	r3, r7, r5
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d060      	beq.n	8002a10 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800294e:	197b      	adds	r3, r7, r5
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	e242      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d03f      	beq.n	80029dc <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800295c:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	4b16      	ldr	r3, [pc, #88]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 8002962:	2180      	movs	r1, #128	; 0x80
 8002964:	0049      	lsls	r1, r1, #1
 8002966:	430a      	orrs	r2, r1
 8002968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7fd ff39 	bl	80007e0 <HAL_GetTick>
 800296e:	0003      	movs	r3, r0
 8002970:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002974:	f7fd ff34 	bl	80007e0 <HAL_GetTick>
 8002978:	0002      	movs	r2, r0
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e229      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4013      	ands	r3, r2
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002992:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4a10      	ldr	r2, [pc, #64]	; (80029d8 <HAL_RCC_OscConfig+0x370>)
 8002998:	4013      	ands	r3, r2
 800299a:	0019      	movs	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 80029a2:	430a      	orrs	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	0a19      	lsrs	r1, r3, #8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	061a      	lsls	r2, r3, #24
 80029b4:	4b01      	ldr	r3, [pc, #4]	; (80029bc <HAL_RCC_OscConfig+0x354>)
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	e029      	b.n	8002a10 <HAL_RCC_OscConfig+0x3a8>
 80029bc:	40021000 	.word	0x40021000
 80029c0:	fffeffff 	.word	0xfffeffff
 80029c4:	fffbffff 	.word	0xfffbffff
 80029c8:	ffffe0ff 	.word	0xffffe0ff
 80029cc:	080077a0 	.word	0x080077a0
 80029d0:	20000000 	.word	0x20000000
 80029d4:	20000004 	.word	0x20000004
 80029d8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029dc:	4bbd      	ldr	r3, [pc, #756]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4bbc      	ldr	r3, [pc, #752]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 80029e2:	49bd      	ldr	r1, [pc, #756]	; (8002cd8 <HAL_RCC_OscConfig+0x670>)
 80029e4:	400a      	ands	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fd fefa 	bl	80007e0 <HAL_GetTick>
 80029ec:	0003      	movs	r3, r0
 80029ee:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029f2:	f7fd fef5 	bl	80007e0 <HAL_GetTick>
 80029f6:	0002      	movs	r2, r0
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e1ea      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a04:	4bb3      	ldr	r3, [pc, #716]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d1f0      	bne.n	80029f2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2208      	movs	r2, #8
 8002a16:	4013      	ands	r3, r2
 8002a18:	d036      	beq.n	8002a88 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d019      	beq.n	8002a56 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a22:	4bac      	ldr	r3, [pc, #688]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002a24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a26:	4bab      	ldr	r3, [pc, #684]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002a28:	2101      	movs	r1, #1
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2e:	f7fd fed7 	bl	80007e0 <HAL_GetTick>
 8002a32:	0003      	movs	r3, r0
 8002a34:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a38:	f7fd fed2 	bl	80007e0 <HAL_GetTick>
 8002a3c:	0002      	movs	r2, r0
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e1c7      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a4a:	4ba2      	ldr	r3, [pc, #648]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a4e:	2202      	movs	r2, #2
 8002a50:	4013      	ands	r3, r2
 8002a52:	d0f1      	beq.n	8002a38 <HAL_RCC_OscConfig+0x3d0>
 8002a54:	e018      	b.n	8002a88 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a56:	4b9f      	ldr	r3, [pc, #636]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002a58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a5a:	4b9e      	ldr	r3, [pc, #632]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	438a      	bics	r2, r1
 8002a60:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a62:	f7fd febd 	bl	80007e0 <HAL_GetTick>
 8002a66:	0003      	movs	r3, r0
 8002a68:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a6c:	f7fd feb8 	bl	80007e0 <HAL_GetTick>
 8002a70:	0002      	movs	r2, r0
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e1ad      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a7e:	4b95      	ldr	r3, [pc, #596]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a82:	2202      	movs	r2, #2
 8002a84:	4013      	ands	r3, r2
 8002a86:	d1f1      	bne.n	8002a6c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d100      	bne.n	8002a94 <HAL_RCC_OscConfig+0x42c>
 8002a92:	e0ae      	b.n	8002bf2 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a94:	2027      	movs	r0, #39	; 0x27
 8002a96:	183b      	adds	r3, r7, r0
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9c:	4b8d      	ldr	r3, [pc, #564]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	055b      	lsls	r3, r3, #21
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d109      	bne.n	8002abc <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa8:	4b8a      	ldr	r3, [pc, #552]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aac:	4b89      	ldr	r3, [pc, #548]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002aae:	2180      	movs	r1, #128	; 0x80
 8002ab0:	0549      	lsls	r1, r1, #21
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002ab6:	183b      	adds	r3, r7, r0
 8002ab8:	2201      	movs	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abc:	4b87      	ldr	r3, [pc, #540]	; (8002cdc <HAL_RCC_OscConfig+0x674>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d11a      	bne.n	8002afe <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ac8:	4b84      	ldr	r3, [pc, #528]	; (8002cdc <HAL_RCC_OscConfig+0x674>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b83      	ldr	r3, [pc, #524]	; (8002cdc <HAL_RCC_OscConfig+0x674>)
 8002ace:	2180      	movs	r1, #128	; 0x80
 8002ad0:	0049      	lsls	r1, r1, #1
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad6:	f7fd fe83 	bl	80007e0 <HAL_GetTick>
 8002ada:	0003      	movs	r3, r0
 8002adc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae0:	f7fd fe7e 	bl	80007e0 <HAL_GetTick>
 8002ae4:	0002      	movs	r2, r0
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	; 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e173      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af2:	4b7a      	ldr	r3, [pc, #488]	; (8002cdc <HAL_RCC_OscConfig+0x674>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4013      	ands	r3, r2
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_OscConfig+0x4b2>
 8002b0a:	4b72      	ldr	r3, [pc, #456]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b0e:	4b71      	ldr	r3, [pc, #452]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002b10:	2180      	movs	r1, #128	; 0x80
 8002b12:	0049      	lsls	r1, r1, #1
 8002b14:	430a      	orrs	r2, r1
 8002b16:	651a      	str	r2, [r3, #80]	; 0x50
 8002b18:	e031      	b.n	8002b7e <HAL_RCC_OscConfig+0x516>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x4d4>
 8002b22:	4b6c      	ldr	r3, [pc, #432]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002b24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b26:	4b6b      	ldr	r3, [pc, #428]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002b28:	496b      	ldr	r1, [pc, #428]	; (8002cd8 <HAL_RCC_OscConfig+0x670>)
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	651a      	str	r2, [r3, #80]	; 0x50
 8002b2e:	4b69      	ldr	r3, [pc, #420]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002b30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b32:	4b68      	ldr	r3, [pc, #416]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002b34:	496a      	ldr	r1, [pc, #424]	; (8002ce0 <HAL_RCC_OscConfig+0x678>)
 8002b36:	400a      	ands	r2, r1
 8002b38:	651a      	str	r2, [r3, #80]	; 0x50
 8002b3a:	e020      	b.n	8002b7e <HAL_RCC_OscConfig+0x516>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	23a0      	movs	r3, #160	; 0xa0
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d10e      	bne.n	8002b66 <HAL_RCC_OscConfig+0x4fe>
 8002b48:	4b62      	ldr	r3, [pc, #392]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002b4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b4c:	4b61      	ldr	r3, [pc, #388]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002b4e:	2180      	movs	r1, #128	; 0x80
 8002b50:	00c9      	lsls	r1, r1, #3
 8002b52:	430a      	orrs	r2, r1
 8002b54:	651a      	str	r2, [r3, #80]	; 0x50
 8002b56:	4b5f      	ldr	r3, [pc, #380]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002b58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b5a:	4b5e      	ldr	r3, [pc, #376]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	0049      	lsls	r1, r1, #1
 8002b60:	430a      	orrs	r2, r1
 8002b62:	651a      	str	r2, [r3, #80]	; 0x50
 8002b64:	e00b      	b.n	8002b7e <HAL_RCC_OscConfig+0x516>
 8002b66:	4b5b      	ldr	r3, [pc, #364]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002b68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b6a:	4b5a      	ldr	r3, [pc, #360]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002b6c:	495a      	ldr	r1, [pc, #360]	; (8002cd8 <HAL_RCC_OscConfig+0x670>)
 8002b6e:	400a      	ands	r2, r1
 8002b70:	651a      	str	r2, [r3, #80]	; 0x50
 8002b72:	4b58      	ldr	r3, [pc, #352]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002b74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b76:	4b57      	ldr	r3, [pc, #348]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002b78:	4959      	ldr	r1, [pc, #356]	; (8002ce0 <HAL_RCC_OscConfig+0x678>)
 8002b7a:	400a      	ands	r2, r1
 8002b7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d015      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b86:	f7fd fe2b 	bl	80007e0 <HAL_GetTick>
 8002b8a:	0003      	movs	r3, r0
 8002b8c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b8e:	e009      	b.n	8002ba4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b90:	f7fd fe26 	bl	80007e0 <HAL_GetTick>
 8002b94:	0002      	movs	r2, r0
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	4a52      	ldr	r2, [pc, #328]	; (8002ce4 <HAL_RCC_OscConfig+0x67c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e11a      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ba4:	4b4b      	ldr	r3, [pc, #300]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002ba6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4013      	ands	r3, r2
 8002bae:	d0ef      	beq.n	8002b90 <HAL_RCC_OscConfig+0x528>
 8002bb0:	e014      	b.n	8002bdc <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb2:	f7fd fe15 	bl	80007e0 <HAL_GetTick>
 8002bb6:	0003      	movs	r3, r0
 8002bb8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bba:	e009      	b.n	8002bd0 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bbc:	f7fd fe10 	bl	80007e0 <HAL_GetTick>
 8002bc0:	0002      	movs	r2, r0
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	4a47      	ldr	r2, [pc, #284]	; (8002ce4 <HAL_RCC_OscConfig+0x67c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e104      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bd0:	4b40      	ldr	r3, [pc, #256]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002bd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d1ef      	bne.n	8002bbc <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bdc:	2327      	movs	r3, #39	; 0x27
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d105      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be6:	4b3b      	ldr	r3, [pc, #236]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bea:	4b3a      	ldr	r3, [pc, #232]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002bec:	493e      	ldr	r1, [pc, #248]	; (8002ce8 <HAL_RCC_OscConfig+0x680>)
 8002bee:	400a      	ands	r2, r1
 8002bf0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d049      	beq.n	8002c90 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d026      	beq.n	8002c52 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002c04:	4b33      	ldr	r3, [pc, #204]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	4b32      	ldr	r3, [pc, #200]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	4b30      	ldr	r3, [pc, #192]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c14:	4b2f      	ldr	r3, [pc, #188]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002c16:	2101      	movs	r1, #1
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	635a      	str	r2, [r3, #52]	; 0x34
 8002c1c:	4b33      	ldr	r3, [pc, #204]	; (8002cec <HAL_RCC_OscConfig+0x684>)
 8002c1e:	6a1a      	ldr	r2, [r3, #32]
 8002c20:	4b32      	ldr	r3, [pc, #200]	; (8002cec <HAL_RCC_OscConfig+0x684>)
 8002c22:	2180      	movs	r1, #128	; 0x80
 8002c24:	0189      	lsls	r1, r1, #6
 8002c26:	430a      	orrs	r2, r1
 8002c28:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2a:	f7fd fdd9 	bl	80007e0 <HAL_GetTick>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c34:	f7fd fdd4 	bl	80007e0 <HAL_GetTick>
 8002c38:	0002      	movs	r2, r0
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e0c9      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c46:	4b23      	ldr	r3, [pc, #140]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d0f1      	beq.n	8002c34 <HAL_RCC_OscConfig+0x5cc>
 8002c50:	e01e      	b.n	8002c90 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002c52:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	4b1f      	ldr	r3, [pc, #124]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002c58:	2101      	movs	r1, #1
 8002c5a:	438a      	bics	r2, r1
 8002c5c:	609a      	str	r2, [r3, #8]
 8002c5e:	4b23      	ldr	r3, [pc, #140]	; (8002cec <HAL_RCC_OscConfig+0x684>)
 8002c60:	6a1a      	ldr	r2, [r3, #32]
 8002c62:	4b22      	ldr	r3, [pc, #136]	; (8002cec <HAL_RCC_OscConfig+0x684>)
 8002c64:	4922      	ldr	r1, [pc, #136]	; (8002cf0 <HAL_RCC_OscConfig+0x688>)
 8002c66:	400a      	ands	r2, r1
 8002c68:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7fd fdb9 	bl	80007e0 <HAL_GetTick>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c74:	f7fd fdb4 	bl	80007e0 <HAL_GetTick>
 8002c78:	0002      	movs	r2, r0
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e0a9      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c86:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d1f1      	bne.n	8002c74 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d100      	bne.n	8002c9a <HAL_RCC_OscConfig+0x632>
 8002c98:	e09e      	b.n	8002dd8 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	2b0c      	cmp	r3, #12
 8002c9e:	d100      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x63a>
 8002ca0:	e077      	b.n	8002d92 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d158      	bne.n	8002d5c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_RCC_OscConfig+0x66c>)
 8002cb0:	4910      	ldr	r1, [pc, #64]	; (8002cf4 <HAL_RCC_OscConfig+0x68c>)
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7fd fd93 	bl	80007e0 <HAL_GetTick>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cbe:	e01b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fd fd8e 	bl	80007e0 <HAL_GetTick>
 8002cc4:	0002      	movs	r2, r0
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d914      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e083      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	fffffeff 	.word	0xfffffeff
 8002cdc:	40007000 	.word	0x40007000
 8002ce0:	fffffbff 	.word	0xfffffbff
 8002ce4:	00001388 	.word	0x00001388
 8002ce8:	efffffff 	.word	0xefffffff
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	ffffdfff 	.word	0xffffdfff
 8002cf4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cf8:	4b3a      	ldr	r3, [pc, #232]	; (8002de4 <HAL_RCC_OscConfig+0x77c>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	049b      	lsls	r3, r3, #18
 8002d00:	4013      	ands	r3, r2
 8002d02:	d1dd      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d04:	4b37      	ldr	r3, [pc, #220]	; (8002de4 <HAL_RCC_OscConfig+0x77c>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4a37      	ldr	r2, [pc, #220]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	0019      	movs	r1, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	4b31      	ldr	r3, [pc, #196]	; (8002de4 <HAL_RCC_OscConfig+0x77c>)
 8002d20:	430a      	orrs	r2, r1
 8002d22:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d24:	4b2f      	ldr	r3, [pc, #188]	; (8002de4 <HAL_RCC_OscConfig+0x77c>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4b2e      	ldr	r3, [pc, #184]	; (8002de4 <HAL_RCC_OscConfig+0x77c>)
 8002d2a:	2180      	movs	r1, #128	; 0x80
 8002d2c:	0449      	lsls	r1, r1, #17
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7fd fd55 	bl	80007e0 <HAL_GetTick>
 8002d36:	0003      	movs	r3, r0
 8002d38:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fd fd50 	bl	80007e0 <HAL_GetTick>
 8002d40:	0002      	movs	r2, r0
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e045      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d4e:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <HAL_RCC_OscConfig+0x77c>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	049b      	lsls	r3, r3, #18
 8002d56:	4013      	ands	r3, r2
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x6d4>
 8002d5a:	e03d      	b.n	8002dd8 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5c:	4b21      	ldr	r3, [pc, #132]	; (8002de4 <HAL_RCC_OscConfig+0x77c>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <HAL_RCC_OscConfig+0x77c>)
 8002d62:	4922      	ldr	r1, [pc, #136]	; (8002dec <HAL_RCC_OscConfig+0x784>)
 8002d64:	400a      	ands	r2, r1
 8002d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7fd fd3a 	bl	80007e0 <HAL_GetTick>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d72:	f7fd fd35 	bl	80007e0 <HAL_GetTick>
 8002d76:	0002      	movs	r2, r0
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e02a      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d84:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <HAL_RCC_OscConfig+0x77c>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	049b      	lsls	r3, r3, #18
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d1f0      	bne.n	8002d72 <HAL_RCC_OscConfig+0x70a>
 8002d90:	e022      	b.n	8002dd8 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e01d      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d9e:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <HAL_RCC_OscConfig+0x77c>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da4:	69fa      	ldr	r2, [r7, #28]
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	025b      	lsls	r3, r3, #9
 8002daa:	401a      	ands	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d10f      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	23f0      	movs	r3, #240	; 0xf0
 8002db8:	039b      	lsls	r3, r3, #14
 8002dba:	401a      	ands	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d107      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	23c0      	movs	r3, #192	; 0xc0
 8002dc8:	041b      	lsls	r3, r3, #16
 8002dca:	401a      	ands	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	0018      	movs	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b00a      	add	sp, #40	; 0x28
 8002de0:	bdb0      	pop	{r4, r5, r7, pc}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	40021000 	.word	0x40021000
 8002de8:	ff02ffff 	.word	0xff02ffff
 8002dec:	feffffff 	.word	0xfeffffff

08002df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df0:	b5b0      	push	{r4, r5, r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e128      	b.n	8003056 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e04:	4b96      	ldr	r3, [pc, #600]	; (8003060 <HAL_RCC_ClockConfig+0x270>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d91e      	bls.n	8002e50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e12:	4b93      	ldr	r3, [pc, #588]	; (8003060 <HAL_RCC_ClockConfig+0x270>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2201      	movs	r2, #1
 8002e18:	4393      	bics	r3, r2
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	4b90      	ldr	r3, [pc, #576]	; (8003060 <HAL_RCC_ClockConfig+0x270>)
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e24:	f7fd fcdc 	bl	80007e0 <HAL_GetTick>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2c:	e009      	b.n	8002e42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2e:	f7fd fcd7 	bl	80007e0 <HAL_GetTick>
 8002e32:	0002      	movs	r2, r0
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	4a8a      	ldr	r2, [pc, #552]	; (8003064 <HAL_RCC_ClockConfig+0x274>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e109      	b.n	8003056 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e42:	4b87      	ldr	r3, [pc, #540]	; (8003060 <HAL_RCC_ClockConfig+0x270>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2201      	movs	r2, #1
 8002e48:	4013      	ands	r3, r2
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d1ee      	bne.n	8002e2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2202      	movs	r2, #2
 8002e56:	4013      	ands	r3, r2
 8002e58:	d009      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e5a:	4b83      	ldr	r3, [pc, #524]	; (8003068 <HAL_RCC_ClockConfig+0x278>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	22f0      	movs	r2, #240	; 0xf0
 8002e60:	4393      	bics	r3, r2
 8002e62:	0019      	movs	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	4b7f      	ldr	r3, [pc, #508]	; (8003068 <HAL_RCC_ClockConfig+0x278>)
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2201      	movs	r2, #1
 8002e74:	4013      	ands	r3, r2
 8002e76:	d100      	bne.n	8002e7a <HAL_RCC_ClockConfig+0x8a>
 8002e78:	e089      	b.n	8002f8e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e82:	4b79      	ldr	r3, [pc, #484]	; (8003068 <HAL_RCC_ClockConfig+0x278>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	029b      	lsls	r3, r3, #10
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d120      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e0e1      	b.n	8003056 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d107      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e9a:	4b73      	ldr	r3, [pc, #460]	; (8003068 <HAL_RCC_ClockConfig+0x278>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	049b      	lsls	r3, r3, #18
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d114      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e0d5      	b.n	8003056 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d106      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eb2:	4b6d      	ldr	r3, [pc, #436]	; (8003068 <HAL_RCC_ClockConfig+0x278>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d109      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0ca      	b.n	8003056 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ec0:	4b69      	ldr	r3, [pc, #420]	; (8003068 <HAL_RCC_ClockConfig+0x278>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0c2      	b.n	8003056 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ed0:	4b65      	ldr	r3, [pc, #404]	; (8003068 <HAL_RCC_ClockConfig+0x278>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	4393      	bics	r3, r2
 8002ed8:	0019      	movs	r1, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	4b62      	ldr	r3, [pc, #392]	; (8003068 <HAL_RCC_ClockConfig+0x278>)
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee4:	f7fd fc7c 	bl	80007e0 <HAL_GetTick>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d111      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ef4:	e009      	b.n	8002f0a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef6:	f7fd fc73 	bl	80007e0 <HAL_GetTick>
 8002efa:	0002      	movs	r2, r0
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	4a58      	ldr	r2, [pc, #352]	; (8003064 <HAL_RCC_ClockConfig+0x274>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e0a5      	b.n	8003056 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f0a:	4b57      	ldr	r3, [pc, #348]	; (8003068 <HAL_RCC_ClockConfig+0x278>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	220c      	movs	r2, #12
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d1ef      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0x106>
 8002f16:	e03a      	b.n	8002f8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d111      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f20:	e009      	b.n	8002f36 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f22:	f7fd fc5d 	bl	80007e0 <HAL_GetTick>
 8002f26:	0002      	movs	r2, r0
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	4a4d      	ldr	r2, [pc, #308]	; (8003064 <HAL_RCC_ClockConfig+0x274>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e08f      	b.n	8003056 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f36:	4b4c      	ldr	r3, [pc, #304]	; (8003068 <HAL_RCC_ClockConfig+0x278>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	220c      	movs	r2, #12
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b0c      	cmp	r3, #12
 8002f40:	d1ef      	bne.n	8002f22 <HAL_RCC_ClockConfig+0x132>
 8002f42:	e024      	b.n	8002f8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d11b      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f4c:	e009      	b.n	8002f62 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4e:	f7fd fc47 	bl	80007e0 <HAL_GetTick>
 8002f52:	0002      	movs	r2, r0
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	4a42      	ldr	r2, [pc, #264]	; (8003064 <HAL_RCC_ClockConfig+0x274>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e079      	b.n	8003056 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f62:	4b41      	ldr	r3, [pc, #260]	; (8003068 <HAL_RCC_ClockConfig+0x278>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	220c      	movs	r2, #12
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d1ef      	bne.n	8002f4e <HAL_RCC_ClockConfig+0x15e>
 8002f6e:	e00e      	b.n	8002f8e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f70:	f7fd fc36 	bl	80007e0 <HAL_GetTick>
 8002f74:	0002      	movs	r2, r0
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	4a3a      	ldr	r2, [pc, #232]	; (8003064 <HAL_RCC_ClockConfig+0x274>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e068      	b.n	8003056 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f84:	4b38      	ldr	r3, [pc, #224]	; (8003068 <HAL_RCC_ClockConfig+0x278>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	220c      	movs	r2, #12
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f8e:	4b34      	ldr	r3, [pc, #208]	; (8003060 <HAL_RCC_ClockConfig+0x270>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2201      	movs	r2, #1
 8002f94:	4013      	ands	r3, r2
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d21e      	bcs.n	8002fda <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9c:	4b30      	ldr	r3, [pc, #192]	; (8003060 <HAL_RCC_ClockConfig+0x270>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	4393      	bics	r3, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	4b2e      	ldr	r3, [pc, #184]	; (8003060 <HAL_RCC_ClockConfig+0x270>)
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fae:	f7fd fc17 	bl	80007e0 <HAL_GetTick>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb6:	e009      	b.n	8002fcc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb8:	f7fd fc12 	bl	80007e0 <HAL_GetTick>
 8002fbc:	0002      	movs	r2, r0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	4a28      	ldr	r2, [pc, #160]	; (8003064 <HAL_RCC_ClockConfig+0x274>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e044      	b.n	8003056 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fcc:	4b24      	ldr	r3, [pc, #144]	; (8003060 <HAL_RCC_ClockConfig+0x270>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d1ee      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2204      	movs	r2, #4
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe4:	4b20      	ldr	r3, [pc, #128]	; (8003068 <HAL_RCC_ClockConfig+0x278>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4a20      	ldr	r2, [pc, #128]	; (800306c <HAL_RCC_ClockConfig+0x27c>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	0019      	movs	r1, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <HAL_RCC_ClockConfig+0x278>)
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2208      	movs	r2, #8
 8002ffe:	4013      	ands	r3, r2
 8003000:	d00a      	beq.n	8003018 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003002:	4b19      	ldr	r3, [pc, #100]	; (8003068 <HAL_RCC_ClockConfig+0x278>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	4a1a      	ldr	r2, [pc, #104]	; (8003070 <HAL_RCC_ClockConfig+0x280>)
 8003008:	4013      	ands	r3, r2
 800300a:	0019      	movs	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	00da      	lsls	r2, r3, #3
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <HAL_RCC_ClockConfig+0x278>)
 8003014:	430a      	orrs	r2, r1
 8003016:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003018:	f000 f832 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 800301c:	0001      	movs	r1, r0
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <HAL_RCC_ClockConfig+0x278>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	091b      	lsrs	r3, r3, #4
 8003024:	220f      	movs	r2, #15
 8003026:	4013      	ands	r3, r2
 8003028:	4a12      	ldr	r2, [pc, #72]	; (8003074 <HAL_RCC_ClockConfig+0x284>)
 800302a:	5cd3      	ldrb	r3, [r2, r3]
 800302c:	000a      	movs	r2, r1
 800302e:	40da      	lsrs	r2, r3
 8003030:	4b11      	ldr	r3, [pc, #68]	; (8003078 <HAL_RCC_ClockConfig+0x288>)
 8003032:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003034:	4b11      	ldr	r3, [pc, #68]	; (800307c <HAL_RCC_ClockConfig+0x28c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	250b      	movs	r5, #11
 800303a:	197c      	adds	r4, r7, r5
 800303c:	0018      	movs	r0, r3
 800303e:	f7fd fb89 	bl	8000754 <HAL_InitTick>
 8003042:	0003      	movs	r3, r0
 8003044:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003046:	197b      	adds	r3, r7, r5
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800304e:	197b      	adds	r3, r7, r5
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	e000      	b.n	8003056 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	0018      	movs	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	b004      	add	sp, #16
 800305c:	bdb0      	pop	{r4, r5, r7, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	40022000 	.word	0x40022000
 8003064:	00001388 	.word	0x00001388
 8003068:	40021000 	.word	0x40021000
 800306c:	fffff8ff 	.word	0xfffff8ff
 8003070:	ffffc7ff 	.word	0xffffc7ff
 8003074:	080077a0 	.word	0x080077a0
 8003078:	20000000 	.word	0x20000000
 800307c:	20000004 	.word	0x20000004

08003080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003080:	b5b0      	push	{r4, r5, r7, lr}
 8003082:	b08e      	sub	sp, #56	; 0x38
 8003084:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003086:	4b4c      	ldr	r3, [pc, #304]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800308c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800308e:	230c      	movs	r3, #12
 8003090:	4013      	ands	r3, r2
 8003092:	2b0c      	cmp	r3, #12
 8003094:	d014      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0x40>
 8003096:	d900      	bls.n	800309a <HAL_RCC_GetSysClockFreq+0x1a>
 8003098:	e07b      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x112>
 800309a:	2b04      	cmp	r3, #4
 800309c:	d002      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x24>
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d00b      	beq.n	80030ba <HAL_RCC_GetSysClockFreq+0x3a>
 80030a2:	e076      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80030a4:	4b44      	ldr	r3, [pc, #272]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x138>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2210      	movs	r2, #16
 80030aa:	4013      	ands	r3, r2
 80030ac:	d002      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80030ae:	4b43      	ldr	r3, [pc, #268]	; (80031bc <HAL_RCC_GetSysClockFreq+0x13c>)
 80030b0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80030b2:	e07c      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80030b4:	4b42      	ldr	r3, [pc, #264]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x140>)
 80030b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030b8:	e079      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030ba:	4b42      	ldr	r3, [pc, #264]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x144>)
 80030bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030be:	e076      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80030c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c2:	0c9a      	lsrs	r2, r3, #18
 80030c4:	230f      	movs	r3, #15
 80030c6:	401a      	ands	r2, r3
 80030c8:	4b3f      	ldr	r3, [pc, #252]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x148>)
 80030ca:	5c9b      	ldrb	r3, [r3, r2]
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80030ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d0:	0d9a      	lsrs	r2, r3, #22
 80030d2:	2303      	movs	r3, #3
 80030d4:	4013      	ands	r3, r2
 80030d6:	3301      	adds	r3, #1
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030da:	4b37      	ldr	r3, [pc, #220]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x138>)
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	025b      	lsls	r3, r3, #9
 80030e2:	4013      	ands	r3, r2
 80030e4:	d01a      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
 80030ee:	4a35      	ldr	r2, [pc, #212]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x144>)
 80030f0:	2300      	movs	r3, #0
 80030f2:	69b8      	ldr	r0, [r7, #24]
 80030f4:	69f9      	ldr	r1, [r7, #28]
 80030f6:	f7fd f8b3 	bl	8000260 <__aeabi_lmul>
 80030fa:	0002      	movs	r2, r0
 80030fc:	000b      	movs	r3, r1
 80030fe:	0010      	movs	r0, r2
 8003100:	0019      	movs	r1, r3
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f7fd f887 	bl	8000220 <__aeabi_uldivmod>
 8003112:	0002      	movs	r2, r0
 8003114:	000b      	movs	r3, r1
 8003116:	0013      	movs	r3, r2
 8003118:	637b      	str	r3, [r7, #52]	; 0x34
 800311a:	e037      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800311c:	4b26      	ldr	r3, [pc, #152]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x138>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2210      	movs	r2, #16
 8003122:	4013      	ands	r3, r2
 8003124:	d01a      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	4a23      	ldr	r2, [pc, #140]	; (80031bc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003130:	2300      	movs	r3, #0
 8003132:	68b8      	ldr	r0, [r7, #8]
 8003134:	68f9      	ldr	r1, [r7, #12]
 8003136:	f7fd f893 	bl	8000260 <__aeabi_lmul>
 800313a:	0002      	movs	r2, r0
 800313c:	000b      	movs	r3, r1
 800313e:	0010      	movs	r0, r2
 8003140:	0019      	movs	r1, r3
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	2300      	movs	r3, #0
 8003148:	607b      	str	r3, [r7, #4]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f7fd f867 	bl	8000220 <__aeabi_uldivmod>
 8003152:	0002      	movs	r2, r0
 8003154:	000b      	movs	r3, r1
 8003156:	0013      	movs	r3, r2
 8003158:	637b      	str	r3, [r7, #52]	; 0x34
 800315a:	e017      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315e:	0018      	movs	r0, r3
 8003160:	2300      	movs	r3, #0
 8003162:	0019      	movs	r1, r3
 8003164:	4a16      	ldr	r2, [pc, #88]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003166:	2300      	movs	r3, #0
 8003168:	f7fd f87a 	bl	8000260 <__aeabi_lmul>
 800316c:	0002      	movs	r2, r0
 800316e:	000b      	movs	r3, r1
 8003170:	0010      	movs	r0, r2
 8003172:	0019      	movs	r1, r3
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	001c      	movs	r4, r3
 8003178:	2300      	movs	r3, #0
 800317a:	001d      	movs	r5, r3
 800317c:	0022      	movs	r2, r4
 800317e:	002b      	movs	r3, r5
 8003180:	f7fd f84e 	bl	8000220 <__aeabi_uldivmod>
 8003184:	0002      	movs	r2, r0
 8003186:	000b      	movs	r3, r1
 8003188:	0013      	movs	r3, r2
 800318a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800318c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800318e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003190:	e00d      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003192:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	0b5b      	lsrs	r3, r3, #13
 8003198:	2207      	movs	r2, #7
 800319a:	4013      	ands	r3, r2
 800319c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	3301      	adds	r3, #1
 80031a2:	2280      	movs	r2, #128	; 0x80
 80031a4:	0212      	lsls	r2, r2, #8
 80031a6:	409a      	lsls	r2, r3
 80031a8:	0013      	movs	r3, r2
 80031aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031ac:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80031b0:	0018      	movs	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b00e      	add	sp, #56	; 0x38
 80031b6:	bdb0      	pop	{r4, r5, r7, pc}
 80031b8:	40021000 	.word	0x40021000
 80031bc:	003d0900 	.word	0x003d0900
 80031c0:	00f42400 	.word	0x00f42400
 80031c4:	007a1200 	.word	0x007a1200
 80031c8:	080077b0 	.word	0x080077b0

080031cc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80031d4:	2317      	movs	r3, #23
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2220      	movs	r2, #32
 80031e2:	4013      	ands	r3, r2
 80031e4:	d106      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	2380      	movs	r3, #128	; 0x80
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	4013      	ands	r3, r2
 80031f0:	d100      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80031f2:	e104      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f4:	4bb1      	ldr	r3, [pc, #708]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	055b      	lsls	r3, r3, #21
 80031fc:	4013      	ands	r3, r2
 80031fe:	d10a      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003200:	4bae      	ldr	r3, [pc, #696]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003204:	4bad      	ldr	r3, [pc, #692]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003206:	2180      	movs	r1, #128	; 0x80
 8003208:	0549      	lsls	r1, r1, #21
 800320a:	430a      	orrs	r2, r1
 800320c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800320e:	2317      	movs	r3, #23
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	2201      	movs	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003216:	4baa      	ldr	r3, [pc, #680]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4013      	ands	r3, r2
 8003220:	d11a      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003222:	4ba7      	ldr	r3, [pc, #668]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4ba6      	ldr	r3, [pc, #664]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003228:	2180      	movs	r1, #128	; 0x80
 800322a:	0049      	lsls	r1, r1, #1
 800322c:	430a      	orrs	r2, r1
 800322e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003230:	f7fd fad6 	bl	80007e0 <HAL_GetTick>
 8003234:	0003      	movs	r3, r0
 8003236:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003238:	e008      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323a:	f7fd fad1 	bl	80007e0 <HAL_GetTick>
 800323e:	0002      	movs	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b64      	cmp	r3, #100	; 0x64
 8003246:	d901      	bls.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e133      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324c:	4b9c      	ldr	r3, [pc, #624]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4013      	ands	r3, r2
 8003256:	d0f0      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003258:	4b98      	ldr	r3, [pc, #608]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	23c0      	movs	r3, #192	; 0xc0
 800325e:	039b      	lsls	r3, r3, #14
 8003260:	4013      	ands	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	23c0      	movs	r3, #192	; 0xc0
 800326a:	039b      	lsls	r3, r3, #14
 800326c:	4013      	ands	r3, r2
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	429a      	cmp	r2, r3
 8003272:	d107      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	23c0      	movs	r3, #192	; 0xc0
 800327a:	039b      	lsls	r3, r3, #14
 800327c:	4013      	ands	r3, r2
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	429a      	cmp	r2, r3
 8003282:	d013      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	23c0      	movs	r3, #192	; 0xc0
 800328a:	029b      	lsls	r3, r3, #10
 800328c:	401a      	ands	r2, r3
 800328e:	23c0      	movs	r3, #192	; 0xc0
 8003290:	029b      	lsls	r3, r3, #10
 8003292:	429a      	cmp	r2, r3
 8003294:	d10a      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003296:	4b89      	ldr	r3, [pc, #548]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	029b      	lsls	r3, r3, #10
 800329e:	401a      	ands	r2, r3
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	029b      	lsls	r3, r3, #10
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d101      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e103      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80032ac:	4b83      	ldr	r3, [pc, #524]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032b0:	23c0      	movs	r3, #192	; 0xc0
 80032b2:	029b      	lsls	r3, r3, #10
 80032b4:	4013      	ands	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d049      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	23c0      	movs	r3, #192	; 0xc0
 80032c4:	029b      	lsls	r3, r3, #10
 80032c6:	4013      	ands	r3, r2
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d004      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2220      	movs	r2, #32
 80032d4:	4013      	ands	r3, r2
 80032d6:	d10d      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	23c0      	movs	r3, #192	; 0xc0
 80032de:	029b      	lsls	r3, r3, #10
 80032e0:	4013      	ands	r3, r2
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d034      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	4013      	ands	r3, r2
 80032f2:	d02e      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80032f4:	4b71      	ldr	r3, [pc, #452]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f8:	4a72      	ldr	r2, [pc, #456]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032fe:	4b6f      	ldr	r3, [pc, #444]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003300:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003302:	4b6e      	ldr	r3, [pc, #440]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003304:	2180      	movs	r1, #128	; 0x80
 8003306:	0309      	lsls	r1, r1, #12
 8003308:	430a      	orrs	r2, r1
 800330a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800330c:	4b6b      	ldr	r3, [pc, #428]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800330e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003310:	4b6a      	ldr	r3, [pc, #424]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003312:	496d      	ldr	r1, [pc, #436]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003314:	400a      	ands	r2, r1
 8003316:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003318:	4b68      	ldr	r3, [pc, #416]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	2380      	movs	r3, #128	; 0x80
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4013      	ands	r3, r2
 8003326:	d014      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003328:	f7fd fa5a 	bl	80007e0 <HAL_GetTick>
 800332c:	0003      	movs	r3, r0
 800332e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003330:	e009      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003332:	f7fd fa55 	bl	80007e0 <HAL_GetTick>
 8003336:	0002      	movs	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	4a63      	ldr	r2, [pc, #396]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d901      	bls.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e0b6      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003346:	4b5d      	ldr	r3, [pc, #372]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003348:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800334a:	2380      	movs	r3, #128	; 0x80
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4013      	ands	r3, r2
 8003350:	d0ef      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	2380      	movs	r3, #128	; 0x80
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	4013      	ands	r3, r2
 800335c:	d01f      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	23c0      	movs	r3, #192	; 0xc0
 8003364:	029b      	lsls	r3, r3, #10
 8003366:	401a      	ands	r2, r3
 8003368:	23c0      	movs	r3, #192	; 0xc0
 800336a:	029b      	lsls	r3, r3, #10
 800336c:	429a      	cmp	r2, r3
 800336e:	d10c      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003370:	4b52      	ldr	r3, [pc, #328]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a56      	ldr	r2, [pc, #344]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003376:	4013      	ands	r3, r2
 8003378:	0019      	movs	r1, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	23c0      	movs	r3, #192	; 0xc0
 8003380:	039b      	lsls	r3, r3, #14
 8003382:	401a      	ands	r2, r3
 8003384:	4b4d      	ldr	r3, [pc, #308]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003386:	430a      	orrs	r2, r1
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	4b4c      	ldr	r3, [pc, #304]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800338c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	23c0      	movs	r3, #192	; 0xc0
 8003394:	029b      	lsls	r3, r3, #10
 8003396:	401a      	ands	r2, r3
 8003398:	4b48      	ldr	r3, [pc, #288]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800339a:	430a      	orrs	r2, r1
 800339c:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2220      	movs	r2, #32
 80033a4:	4013      	ands	r3, r2
 80033a6:	d01f      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	23c0      	movs	r3, #192	; 0xc0
 80033ae:	029b      	lsls	r3, r3, #10
 80033b0:	401a      	ands	r2, r3
 80033b2:	23c0      	movs	r3, #192	; 0xc0
 80033b4:	029b      	lsls	r3, r3, #10
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80033ba:	4b40      	ldr	r3, [pc, #256]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a44      	ldr	r2, [pc, #272]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	0019      	movs	r1, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	23c0      	movs	r3, #192	; 0xc0
 80033ca:	039b      	lsls	r3, r3, #14
 80033cc:	401a      	ands	r2, r3
 80033ce:	4b3b      	ldr	r3, [pc, #236]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	4b39      	ldr	r3, [pc, #228]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033d6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	23c0      	movs	r3, #192	; 0xc0
 80033de:	029b      	lsls	r3, r3, #10
 80033e0:	401a      	ands	r2, r3
 80033e2:	4b36      	ldr	r3, [pc, #216]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033e4:	430a      	orrs	r2, r1
 80033e6:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033e8:	2317      	movs	r3, #23
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d105      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f2:	4b32      	ldr	r3, [pc, #200]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f6:	4b31      	ldr	r3, [pc, #196]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033f8:	4936      	ldr	r1, [pc, #216]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033fa:	400a      	ands	r2, r1
 80033fc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2201      	movs	r2, #1
 8003404:	4013      	ands	r3, r2
 8003406:	d009      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003408:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800340a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340c:	2203      	movs	r2, #3
 800340e:	4393      	bics	r3, r2
 8003410:	0019      	movs	r1, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	4b29      	ldr	r3, [pc, #164]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003418:	430a      	orrs	r2, r1
 800341a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2202      	movs	r2, #2
 8003422:	4013      	ands	r3, r2
 8003424:	d009      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003426:	4b25      	ldr	r3, [pc, #148]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342a:	220c      	movs	r2, #12
 800342c:	4393      	bics	r3, r2
 800342e:	0019      	movs	r1, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	4b21      	ldr	r3, [pc, #132]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003436:	430a      	orrs	r2, r1
 8003438:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2204      	movs	r2, #4
 8003440:	4013      	ands	r3, r2
 8003442:	d009      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003444:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003448:	4a23      	ldr	r2, [pc, #140]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800344a:	4013      	ands	r3, r2
 800344c:	0019      	movs	r1, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695a      	ldr	r2, [r3, #20]
 8003452:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003454:	430a      	orrs	r2, r1
 8003456:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2208      	movs	r2, #8
 800345e:	4013      	ands	r3, r2
 8003460:	d009      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003462:	4b16      	ldr	r3, [pc, #88]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003466:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003468:	4013      	ands	r3, r2
 800346a:	0019      	movs	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699a      	ldr	r2, [r3, #24]
 8003470:	4b12      	ldr	r3, [pc, #72]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003472:	430a      	orrs	r2, r1
 8003474:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2240      	movs	r2, #64	; 0x40
 800347c:	4013      	ands	r3, r2
 800347e:	d009      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003484:	4a16      	ldr	r2, [pc, #88]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003486:	4013      	ands	r3, r2
 8003488:	0019      	movs	r1, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1a      	ldr	r2, [r3, #32]
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003490:	430a      	orrs	r2, r1
 8003492:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	4013      	ands	r3, r2
 800349c:	d009      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800349e:	4b07      	ldr	r3, [pc, #28]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a2:	4a10      	ldr	r2, [pc, #64]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	0019      	movs	r1, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034ae:	430a      	orrs	r2, r1
 80034b0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	0018      	movs	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b006      	add	sp, #24
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40007000 	.word	0x40007000
 80034c4:	fffcffff 	.word	0xfffcffff
 80034c8:	fff7ffff 	.word	0xfff7ffff
 80034cc:	00001388 	.word	0x00001388
 80034d0:	ffcfffff 	.word	0xffcfffff
 80034d4:	efffffff 	.word	0xefffffff
 80034d8:	fffff3ff 	.word	0xfffff3ff
 80034dc:	ffffcfff 	.word	0xffffcfff
 80034e0:	fbffffff 	.word	0xfbffffff
 80034e4:	fff3ffff 	.word	0xfff3ffff

080034e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2244      	movs	r2, #68	; 0x44
 80034f4:	2100      	movs	r1, #0
 80034f6:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <USB_EnableGlobalInt+0x28>)
 80034fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	b299      	uxth	r1, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2240      	movs	r2, #64	; 0x40
 8003504:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b004      	add	sp, #16
 800350e:	bd80      	pop	{r7, pc}
 8003510:	0000bf80 	.word	0x0000bf80

08003514 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <USB_DisableGlobalInt+0x30>)
 800351e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2240      	movs	r2, #64	; 0x40
 8003524:	5a9b      	ldrh	r3, [r3, r2]
 8003526:	b29b      	uxth	r3, r3
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	b292      	uxth	r2, r2
 800352c:	43d2      	mvns	r2, r2
 800352e:	b292      	uxth	r2, r2
 8003530:	4013      	ands	r3, r2
 8003532:	b299      	uxth	r1, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2240      	movs	r2, #64	; 0x40
 8003538:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	b004      	add	sp, #16
 8003542:	bd80      	pop	{r7, pc}
 8003544:	0000bf80 	.word	0x0000bf80

08003548 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003548:	b084      	sub	sp, #16
 800354a:	b590      	push	{r4, r7, lr}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	2004      	movs	r0, #4
 8003554:	2410      	movs	r4, #16
 8003556:	1900      	adds	r0, r0, r4
 8003558:	2408      	movs	r4, #8
 800355a:	46a4      	mov	ip, r4
 800355c:	44bc      	add	ip, r7
 800355e:	4460      	add	r0, ip
 8003560:	6001      	str	r1, [r0, #0]
 8003562:	6042      	str	r2, [r0, #4]
 8003564:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2240      	movs	r2, #64	; 0x40
 800356a:	2101      	movs	r1, #1
 800356c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2240      	movs	r2, #64	; 0x40
 8003572:	2100      	movs	r1, #0
 8003574:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2244      	movs	r2, #68	; 0x44
 800357a:	2100      	movs	r1, #0
 800357c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2250      	movs	r2, #80	; 0x50
 8003582:	2100      	movs	r1, #0
 8003584:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	0018      	movs	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	b003      	add	sp, #12
 800358e:	bc90      	pop	{r4, r7}
 8003590:	bc08      	pop	{r3}
 8003592:	b004      	add	sp, #16
 8003594:	4718      	bx	r3
	...

08003598 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b09c      	sub	sp, #112	; 0x70
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80035a2:	236f      	movs	r3, #111	; 0x6f
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	18d3      	adds	r3, r2, r3
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	236c      	movs	r3, #108	; 0x6c
 80035ba:	18fb      	adds	r3, r7, r3
 80035bc:	49a3      	ldr	r1, [pc, #652]	; (800384c <USB_ActivateEndpoint+0x2b4>)
 80035be:	400a      	ands	r2, r1
 80035c0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	78db      	ldrb	r3, [r3, #3]
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d017      	beq.n	80035fa <USB_ActivateEndpoint+0x62>
 80035ca:	dc28      	bgt.n	800361e <USB_ActivateEndpoint+0x86>
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d00e      	beq.n	80035ee <USB_ActivateEndpoint+0x56>
 80035d0:	dc25      	bgt.n	800361e <USB_ActivateEndpoint+0x86>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <USB_ActivateEndpoint+0x44>
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d018      	beq.n	800360c <USB_ActivateEndpoint+0x74>
 80035da:	e020      	b.n	800361e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80035dc:	226c      	movs	r2, #108	; 0x6c
 80035de:	18bb      	adds	r3, r7, r2
 80035e0:	18ba      	adds	r2, r7, r2
 80035e2:	8812      	ldrh	r2, [r2, #0]
 80035e4:	2180      	movs	r1, #128	; 0x80
 80035e6:	0089      	lsls	r1, r1, #2
 80035e8:	430a      	orrs	r2, r1
 80035ea:	801a      	strh	r2, [r3, #0]
      break;
 80035ec:	e01c      	b.n	8003628 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80035ee:	226c      	movs	r2, #108	; 0x6c
 80035f0:	18bb      	adds	r3, r7, r2
 80035f2:	18ba      	adds	r2, r7, r2
 80035f4:	8812      	ldrh	r2, [r2, #0]
 80035f6:	801a      	strh	r2, [r3, #0]
      break;
 80035f8:	e016      	b.n	8003628 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80035fa:	226c      	movs	r2, #108	; 0x6c
 80035fc:	18bb      	adds	r3, r7, r2
 80035fe:	18ba      	adds	r2, r7, r2
 8003600:	8812      	ldrh	r2, [r2, #0]
 8003602:	21c0      	movs	r1, #192	; 0xc0
 8003604:	00c9      	lsls	r1, r1, #3
 8003606:	430a      	orrs	r2, r1
 8003608:	801a      	strh	r2, [r3, #0]
      break;
 800360a:	e00d      	b.n	8003628 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800360c:	226c      	movs	r2, #108	; 0x6c
 800360e:	18bb      	adds	r3, r7, r2
 8003610:	18ba      	adds	r2, r7, r2
 8003612:	8812      	ldrh	r2, [r2, #0]
 8003614:	2180      	movs	r1, #128	; 0x80
 8003616:	00c9      	lsls	r1, r1, #3
 8003618:	430a      	orrs	r2, r1
 800361a:	801a      	strh	r2, [r3, #0]
      break;
 800361c:	e004      	b.n	8003628 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800361e:	236f      	movs	r3, #111	; 0x6f
 8003620:	18fb      	adds	r3, r7, r3
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
      break;
 8003626:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	18d3      	adds	r3, r2, r3
 8003632:	226c      	movs	r2, #108	; 0x6c
 8003634:	18ba      	adds	r2, r7, r2
 8003636:	8812      	ldrh	r2, [r2, #0]
 8003638:	4985      	ldr	r1, [pc, #532]	; (8003850 <USB_ActivateEndpoint+0x2b8>)
 800363a:	430a      	orrs	r2, r1
 800363c:	b292      	uxth	r2, r2
 800363e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	18d3      	adds	r3, r2, r3
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	b29b      	uxth	r3, r3
 800364e:	b21b      	sxth	r3, r3
 8003650:	4a80      	ldr	r2, [pc, #512]	; (8003854 <USB_ActivateEndpoint+0x2bc>)
 8003652:	4013      	ands	r3, r2
 8003654:	b21a      	sxth	r2, r3
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	b21b      	sxth	r3, r3
 800365c:	4313      	orrs	r3, r2
 800365e:	b21a      	sxth	r2, r3
 8003660:	2166      	movs	r1, #102	; 0x66
 8003662:	187b      	adds	r3, r7, r1
 8003664:	801a      	strh	r2, [r3, #0]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	18d3      	adds	r3, r2, r3
 8003670:	187a      	adds	r2, r7, r1
 8003672:	8812      	ldrh	r2, [r2, #0]
 8003674:	4976      	ldr	r1, [pc, #472]	; (8003850 <USB_ActivateEndpoint+0x2b8>)
 8003676:	430a      	orrs	r2, r1
 8003678:	b292      	uxth	r2, r2
 800367a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	7b1b      	ldrb	r3, [r3, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d000      	beq.n	8003686 <USB_ActivateEndpoint+0xee>
 8003684:	e178      	b.n	8003978 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	785b      	ldrb	r3, [r3, #1]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d100      	bne.n	8003690 <USB_ActivateEndpoint+0xf8>
 800368e:	e07a      	b.n	8003786 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	61bb      	str	r3, [r7, #24]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2250      	movs	r2, #80	; 0x50
 8003698:	5a9b      	ldrh	r3, [r3, r2]
 800369a:	b29b      	uxth	r3, r3
 800369c:	001a      	movs	r2, r3
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	189b      	adds	r3, r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	00da      	lsls	r2, r3, #3
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	18d3      	adds	r3, r2, r3
 80036ae:	2280      	movs	r2, #128	; 0x80
 80036b0:	00d2      	lsls	r2, r2, #3
 80036b2:	4694      	mov	ip, r2
 80036b4:	4463      	add	r3, ip
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	88db      	ldrh	r3, [r3, #6]
 80036bc:	085b      	lsrs	r3, r3, #1
 80036be:	b29b      	uxth	r3, r3
 80036c0:	18db      	adds	r3, r3, r3
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	18d2      	adds	r2, r2, r3
 80036d2:	2112      	movs	r1, #18
 80036d4:	187b      	adds	r3, r7, r1
 80036d6:	8812      	ldrh	r2, [r2, #0]
 80036d8:	801a      	strh	r2, [r3, #0]
 80036da:	187b      	adds	r3, r7, r1
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	2240      	movs	r2, #64	; 0x40
 80036e0:	4013      	ands	r3, r2
 80036e2:	d016      	beq.n	8003712 <USB_ActivateEndpoint+0x17a>
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	18d3      	adds	r3, r2, r3
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	2010      	movs	r0, #16
 80036f4:	183b      	adds	r3, r7, r0
 80036f6:	4957      	ldr	r1, [pc, #348]	; (8003854 <USB_ActivateEndpoint+0x2bc>)
 80036f8:	400a      	ands	r2, r1
 80036fa:	801a      	strh	r2, [r3, #0]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	18d3      	adds	r3, r2, r3
 8003706:	183a      	adds	r2, r7, r0
 8003708:	8812      	ldrh	r2, [r2, #0]
 800370a:	4953      	ldr	r1, [pc, #332]	; (8003858 <USB_ActivateEndpoint+0x2c0>)
 800370c:	430a      	orrs	r2, r1
 800370e:	b292      	uxth	r2, r2
 8003710:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	78db      	ldrb	r3, [r3, #3]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d01d      	beq.n	8003756 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	b29a      	uxth	r2, r3
 8003728:	200c      	movs	r0, #12
 800372a:	183b      	adds	r3, r7, r0
 800372c:	494b      	ldr	r1, [pc, #300]	; (800385c <USB_ActivateEndpoint+0x2c4>)
 800372e:	400a      	ands	r2, r1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	183b      	adds	r3, r7, r0
 8003734:	183a      	adds	r2, r7, r0
 8003736:	8812      	ldrh	r2, [r2, #0]
 8003738:	2120      	movs	r1, #32
 800373a:	404a      	eors	r2, r1
 800373c:	801a      	strh	r2, [r3, #0]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	18d3      	adds	r3, r2, r3
 8003748:	183a      	adds	r2, r7, r0
 800374a:	8812      	ldrh	r2, [r2, #0]
 800374c:	4940      	ldr	r1, [pc, #256]	; (8003850 <USB_ActivateEndpoint+0x2b8>)
 800374e:	430a      	orrs	r2, r1
 8003750:	b292      	uxth	r2, r2
 8003752:	801a      	strh	r2, [r3, #0]
 8003754:	e2b4      	b.n	8003cc0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	18d3      	adds	r3, r2, r3
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	b29a      	uxth	r2, r3
 8003764:	200e      	movs	r0, #14
 8003766:	183b      	adds	r3, r7, r0
 8003768:	493c      	ldr	r1, [pc, #240]	; (800385c <USB_ActivateEndpoint+0x2c4>)
 800376a:	400a      	ands	r2, r1
 800376c:	801a      	strh	r2, [r3, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	18d3      	adds	r3, r2, r3
 8003778:	183a      	adds	r2, r7, r0
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	4934      	ldr	r1, [pc, #208]	; (8003850 <USB_ActivateEndpoint+0x2b8>)
 800377e:	430a      	orrs	r2, r1
 8003780:	b292      	uxth	r2, r2
 8003782:	801a      	strh	r2, [r3, #0]
 8003784:	e29c      	b.n	8003cc0 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	633b      	str	r3, [r7, #48]	; 0x30
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2250      	movs	r2, #80	; 0x50
 800378e:	5a9b      	ldrh	r3, [r3, r2]
 8003790:	b29b      	uxth	r3, r3
 8003792:	001a      	movs	r2, r3
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	189b      	adds	r3, r3, r2
 8003798:	633b      	str	r3, [r7, #48]	; 0x30
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	00da      	lsls	r2, r3, #3
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	18d3      	adds	r3, r2, r3
 80037a4:	4a2e      	ldr	r2, [pc, #184]	; (8003860 <USB_ActivateEndpoint+0x2c8>)
 80037a6:	4694      	mov	ip, r2
 80037a8:	4463      	add	r3, ip
 80037aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	88db      	ldrh	r3, [r3, #6]
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	18db      	adds	r3, r3, r3
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ba:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2250      	movs	r2, #80	; 0x50
 80037c4:	5a9b      	ldrh	r3, [r3, r2]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	001a      	movs	r2, r3
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	189b      	adds	r3, r3, r2
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	00da      	lsls	r2, r3, #3
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	18d3      	adds	r3, r2, r3
 80037da:	4a22      	ldr	r2, [pc, #136]	; (8003864 <USB_ActivateEndpoint+0x2cc>)
 80037dc:	4694      	mov	ip, r2
 80037de:	4463      	add	r3, ip
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	059b      	lsls	r3, r3, #22
 80037ea:	0d9b      	lsrs	r3, r3, #22
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	801a      	strh	r2, [r3, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b3e      	cmp	r3, #62	; 0x3e
 80037f8:	d91a      	bls.n	8003830 <USB_ActivateEndpoint+0x298>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	66bb      	str	r3, [r7, #104]	; 0x68
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	221f      	movs	r2, #31
 8003808:	4013      	ands	r3, r2
 800380a:	d102      	bne.n	8003812 <USB_ActivateEndpoint+0x27a>
 800380c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800380e:	3b01      	subs	r3, #1
 8003810:	66bb      	str	r3, [r7, #104]	; 0x68
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	b29a      	uxth	r2, r3
 8003818:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800381a:	b29b      	uxth	r3, r3
 800381c:	029b      	lsls	r3, r3, #10
 800381e:	b29b      	uxth	r3, r3
 8003820:	4313      	orrs	r3, r2
 8003822:	b29b      	uxth	r3, r3
 8003824:	4a10      	ldr	r2, [pc, #64]	; (8003868 <USB_ActivateEndpoint+0x2d0>)
 8003826:	4313      	orrs	r3, r2
 8003828:	b29a      	uxth	r2, r3
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	801a      	strh	r2, [r3, #0]
 800382e:	e034      	b.n	800389a <USB_ActivateEndpoint+0x302>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d119      	bne.n	800386c <USB_ActivateEndpoint+0x2d4>
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	b29b      	uxth	r3, r3
 800383e:	4a0a      	ldr	r2, [pc, #40]	; (8003868 <USB_ActivateEndpoint+0x2d0>)
 8003840:	4313      	orrs	r3, r2
 8003842:	b29a      	uxth	r2, r3
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	801a      	strh	r2, [r3, #0]
 8003848:	e027      	b.n	800389a <USB_ActivateEndpoint+0x302>
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	ffff898f 	.word	0xffff898f
 8003850:	ffff8080 	.word	0xffff8080
 8003854:	ffff8f8f 	.word	0xffff8f8f
 8003858:	ffff80c0 	.word	0xffff80c0
 800385c:	ffff8fbf 	.word	0xffff8fbf
 8003860:	00000404 	.word	0x00000404
 8003864:	00000406 	.word	0x00000406
 8003868:	ffff8000 	.word	0xffff8000
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	66bb      	str	r3, [r7, #104]	; 0x68
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2201      	movs	r2, #1
 800387a:	4013      	ands	r3, r2
 800387c:	d002      	beq.n	8003884 <USB_ActivateEndpoint+0x2ec>
 800387e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003880:	3301      	adds	r3, #1
 8003882:	66bb      	str	r3, [r7, #104]	; 0x68
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	b29a      	uxth	r2, r3
 800388a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800388c:	b29b      	uxth	r3, r3
 800388e:	029b      	lsls	r3, r3, #10
 8003890:	b29b      	uxth	r3, r3
 8003892:	4313      	orrs	r3, r2
 8003894:	b29a      	uxth	r2, r3
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	18d2      	adds	r2, r2, r3
 80038a4:	2122      	movs	r1, #34	; 0x22
 80038a6:	187b      	adds	r3, r7, r1
 80038a8:	8812      	ldrh	r2, [r2, #0]
 80038aa:	801a      	strh	r2, [r3, #0]
 80038ac:	187b      	adds	r3, r7, r1
 80038ae:	881a      	ldrh	r2, [r3, #0]
 80038b0:	2380      	movs	r3, #128	; 0x80
 80038b2:	01db      	lsls	r3, r3, #7
 80038b4:	4013      	ands	r3, r2
 80038b6:	d016      	beq.n	80038e6 <USB_ActivateEndpoint+0x34e>
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	18d3      	adds	r3, r2, r3
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	2020      	movs	r0, #32
 80038c8:	183b      	adds	r3, r7, r0
 80038ca:	49dd      	ldr	r1, [pc, #884]	; (8003c40 <USB_ActivateEndpoint+0x6a8>)
 80038cc:	400a      	ands	r2, r1
 80038ce:	801a      	strh	r2, [r3, #0]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	18d3      	adds	r3, r2, r3
 80038da:	183a      	adds	r2, r7, r0
 80038dc:	8812      	ldrh	r2, [r2, #0]
 80038de:	49d9      	ldr	r1, [pc, #868]	; (8003c44 <USB_ActivateEndpoint+0x6ac>)
 80038e0:	430a      	orrs	r2, r1
 80038e2:	b292      	uxth	r2, r2
 80038e4:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d125      	bne.n	800393a <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	18d3      	adds	r3, r2, r3
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	201c      	movs	r0, #28
 80038fe:	183b      	adds	r3, r7, r0
 8003900:	49d1      	ldr	r1, [pc, #836]	; (8003c48 <USB_ActivateEndpoint+0x6b0>)
 8003902:	400a      	ands	r2, r1
 8003904:	801a      	strh	r2, [r3, #0]
 8003906:	183b      	adds	r3, r7, r0
 8003908:	183a      	adds	r2, r7, r0
 800390a:	8812      	ldrh	r2, [r2, #0]
 800390c:	2180      	movs	r1, #128	; 0x80
 800390e:	0149      	lsls	r1, r1, #5
 8003910:	404a      	eors	r2, r1
 8003912:	801a      	strh	r2, [r3, #0]
 8003914:	183b      	adds	r3, r7, r0
 8003916:	183a      	adds	r2, r7, r0
 8003918:	8812      	ldrh	r2, [r2, #0]
 800391a:	2180      	movs	r1, #128	; 0x80
 800391c:	0189      	lsls	r1, r1, #6
 800391e:	404a      	eors	r2, r1
 8003920:	801a      	strh	r2, [r3, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	18d3      	adds	r3, r2, r3
 800392c:	183a      	adds	r2, r7, r0
 800392e:	8812      	ldrh	r2, [r2, #0]
 8003930:	49c6      	ldr	r1, [pc, #792]	; (8003c4c <USB_ActivateEndpoint+0x6b4>)
 8003932:	430a      	orrs	r2, r1
 8003934:	b292      	uxth	r2, r2
 8003936:	801a      	strh	r2, [r3, #0]
 8003938:	e1c2      	b.n	8003cc0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	18d3      	adds	r3, r2, r3
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	b29a      	uxth	r2, r3
 8003948:	201e      	movs	r0, #30
 800394a:	183b      	adds	r3, r7, r0
 800394c:	49be      	ldr	r1, [pc, #760]	; (8003c48 <USB_ActivateEndpoint+0x6b0>)
 800394e:	400a      	ands	r2, r1
 8003950:	801a      	strh	r2, [r3, #0]
 8003952:	183b      	adds	r3, r7, r0
 8003954:	183a      	adds	r2, r7, r0
 8003956:	8812      	ldrh	r2, [r2, #0]
 8003958:	2180      	movs	r1, #128	; 0x80
 800395a:	0189      	lsls	r1, r1, #6
 800395c:	404a      	eors	r2, r1
 800395e:	801a      	strh	r2, [r3, #0]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	18d3      	adds	r3, r2, r3
 800396a:	183a      	adds	r2, r7, r0
 800396c:	8812      	ldrh	r2, [r2, #0]
 800396e:	49b7      	ldr	r1, [pc, #732]	; (8003c4c <USB_ActivateEndpoint+0x6b4>)
 8003970:	430a      	orrs	r2, r1
 8003972:	b292      	uxth	r2, r2
 8003974:	801a      	strh	r2, [r3, #0]
 8003976:	e1a3      	b.n	8003cc0 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	78db      	ldrb	r3, [r3, #3]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d117      	bne.n	80039b0 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	18d3      	adds	r3, r2, r3
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	b29a      	uxth	r2, r3
 800398e:	2062      	movs	r0, #98	; 0x62
 8003990:	183b      	adds	r3, r7, r0
 8003992:	49ab      	ldr	r1, [pc, #684]	; (8003c40 <USB_ActivateEndpoint+0x6a8>)
 8003994:	400a      	ands	r2, r1
 8003996:	801a      	strh	r2, [r3, #0]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	18d3      	adds	r3, r2, r3
 80039a2:	183a      	adds	r2, r7, r0
 80039a4:	8812      	ldrh	r2, [r2, #0]
 80039a6:	49aa      	ldr	r1, [pc, #680]	; (8003c50 <USB_ActivateEndpoint+0x6b8>)
 80039a8:	430a      	orrs	r2, r1
 80039aa:	b292      	uxth	r2, r2
 80039ac:	801a      	strh	r2, [r3, #0]
 80039ae:	e016      	b.n	80039de <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	18d3      	adds	r3, r2, r3
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	b29a      	uxth	r2, r3
 80039be:	2064      	movs	r0, #100	; 0x64
 80039c0:	183b      	adds	r3, r7, r0
 80039c2:	49a4      	ldr	r1, [pc, #656]	; (8003c54 <USB_ActivateEndpoint+0x6bc>)
 80039c4:	400a      	ands	r2, r1
 80039c6:	801a      	strh	r2, [r3, #0]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	18d3      	adds	r3, r2, r3
 80039d2:	183a      	adds	r2, r7, r0
 80039d4:	8812      	ldrh	r2, [r2, #0]
 80039d6:	499d      	ldr	r1, [pc, #628]	; (8003c4c <USB_ActivateEndpoint+0x6b4>)
 80039d8:	430a      	orrs	r2, r1
 80039da:	b292      	uxth	r2, r2
 80039dc:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2250      	movs	r2, #80	; 0x50
 80039e6:	5a9b      	ldrh	r3, [r3, r2]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	001a      	movs	r2, r3
 80039ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ee:	189b      	adds	r3, r3, r2
 80039f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	00da      	lsls	r2, r3, #3
 80039f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039fa:	18d3      	adds	r3, r2, r3
 80039fc:	2280      	movs	r2, #128	; 0x80
 80039fe:	00d2      	lsls	r2, r2, #3
 8003a00:	4694      	mov	ip, r2
 8003a02:	4463      	add	r3, ip
 8003a04:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	891b      	ldrh	r3, [r3, #8]
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	18db      	adds	r3, r3, r3
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a14:	801a      	strh	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	657b      	str	r3, [r7, #84]	; 0x54
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2250      	movs	r2, #80	; 0x50
 8003a1e:	5a9b      	ldrh	r3, [r3, r2]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	001a      	movs	r2, r3
 8003a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a26:	189b      	adds	r3, r3, r2
 8003a28:	657b      	str	r3, [r7, #84]	; 0x54
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	00da      	lsls	r2, r3, #3
 8003a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a32:	18d3      	adds	r3, r2, r3
 8003a34:	4a88      	ldr	r2, [pc, #544]	; (8003c58 <USB_ActivateEndpoint+0x6c0>)
 8003a36:	4694      	mov	ip, r2
 8003a38:	4463      	add	r3, ip
 8003a3a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	895b      	ldrh	r3, [r3, #10]
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	18db      	adds	r3, r3, r3
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a4a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	785b      	ldrb	r3, [r3, #1]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d000      	beq.n	8003a56 <USB_ActivateEndpoint+0x4be>
 8003a54:	e087      	b.n	8003b66 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	18d2      	adds	r2, r2, r3
 8003a60:	2140      	movs	r1, #64	; 0x40
 8003a62:	187b      	adds	r3, r7, r1
 8003a64:	8812      	ldrh	r2, [r2, #0]
 8003a66:	801a      	strh	r2, [r3, #0]
 8003a68:	187b      	adds	r3, r7, r1
 8003a6a:	881a      	ldrh	r2, [r3, #0]
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	01db      	lsls	r3, r3, #7
 8003a70:	4013      	ands	r3, r2
 8003a72:	d016      	beq.n	8003aa2 <USB_ActivateEndpoint+0x50a>
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	18d3      	adds	r3, r2, r3
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	203e      	movs	r0, #62	; 0x3e
 8003a84:	183b      	adds	r3, r7, r0
 8003a86:	496e      	ldr	r1, [pc, #440]	; (8003c40 <USB_ActivateEndpoint+0x6a8>)
 8003a88:	400a      	ands	r2, r1
 8003a8a:	801a      	strh	r2, [r3, #0]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	18d3      	adds	r3, r2, r3
 8003a96:	183a      	adds	r2, r7, r0
 8003a98:	8812      	ldrh	r2, [r2, #0]
 8003a9a:	496a      	ldr	r1, [pc, #424]	; (8003c44 <USB_ActivateEndpoint+0x6ac>)
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	b292      	uxth	r2, r2
 8003aa0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	18d2      	adds	r2, r2, r3
 8003aac:	213c      	movs	r1, #60	; 0x3c
 8003aae:	187b      	adds	r3, r7, r1
 8003ab0:	8812      	ldrh	r2, [r2, #0]
 8003ab2:	801a      	strh	r2, [r3, #0]
 8003ab4:	187b      	adds	r3, r7, r1
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	2240      	movs	r2, #64	; 0x40
 8003aba:	4013      	ands	r3, r2
 8003abc:	d016      	beq.n	8003aec <USB_ActivateEndpoint+0x554>
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	18d3      	adds	r3, r2, r3
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	203a      	movs	r0, #58	; 0x3a
 8003ace:	183b      	adds	r3, r7, r0
 8003ad0:	495b      	ldr	r1, [pc, #364]	; (8003c40 <USB_ActivateEndpoint+0x6a8>)
 8003ad2:	400a      	ands	r2, r1
 8003ad4:	801a      	strh	r2, [r3, #0]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	18d3      	adds	r3, r2, r3
 8003ae0:	183a      	adds	r2, r7, r0
 8003ae2:	8812      	ldrh	r2, [r2, #0]
 8003ae4:	495d      	ldr	r1, [pc, #372]	; (8003c5c <USB_ActivateEndpoint+0x6c4>)
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	b292      	uxth	r2, r2
 8003aea:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	18d3      	adds	r3, r2, r3
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	2038      	movs	r0, #56	; 0x38
 8003afc:	183b      	adds	r3, r7, r0
 8003afe:	4952      	ldr	r1, [pc, #328]	; (8003c48 <USB_ActivateEndpoint+0x6b0>)
 8003b00:	400a      	ands	r2, r1
 8003b02:	801a      	strh	r2, [r3, #0]
 8003b04:	183b      	adds	r3, r7, r0
 8003b06:	183a      	adds	r2, r7, r0
 8003b08:	8812      	ldrh	r2, [r2, #0]
 8003b0a:	2180      	movs	r1, #128	; 0x80
 8003b0c:	0149      	lsls	r1, r1, #5
 8003b0e:	404a      	eors	r2, r1
 8003b10:	801a      	strh	r2, [r3, #0]
 8003b12:	183b      	adds	r3, r7, r0
 8003b14:	183a      	adds	r2, r7, r0
 8003b16:	8812      	ldrh	r2, [r2, #0]
 8003b18:	2180      	movs	r1, #128	; 0x80
 8003b1a:	0189      	lsls	r1, r1, #6
 8003b1c:	404a      	eors	r2, r1
 8003b1e:	801a      	strh	r2, [r3, #0]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	18d3      	adds	r3, r2, r3
 8003b2a:	183a      	adds	r2, r7, r0
 8003b2c:	8812      	ldrh	r2, [r2, #0]
 8003b2e:	4947      	ldr	r1, [pc, #284]	; (8003c4c <USB_ActivateEndpoint+0x6b4>)
 8003b30:	430a      	orrs	r2, r1
 8003b32:	b292      	uxth	r2, r2
 8003b34:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	18d3      	adds	r3, r2, r3
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	2036      	movs	r0, #54	; 0x36
 8003b46:	183b      	adds	r3, r7, r0
 8003b48:	4945      	ldr	r1, [pc, #276]	; (8003c60 <USB_ActivateEndpoint+0x6c8>)
 8003b4a:	400a      	ands	r2, r1
 8003b4c:	801a      	strh	r2, [r3, #0]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	18d3      	adds	r3, r2, r3
 8003b58:	183a      	adds	r2, r7, r0
 8003b5a:	8812      	ldrh	r2, [r2, #0]
 8003b5c:	493b      	ldr	r1, [pc, #236]	; (8003c4c <USB_ActivateEndpoint+0x6b4>)
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	b292      	uxth	r2, r2
 8003b62:	801a      	strh	r2, [r3, #0]
 8003b64:	e0ac      	b.n	8003cc0 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	18d2      	adds	r2, r2, r3
 8003b70:	214e      	movs	r1, #78	; 0x4e
 8003b72:	187b      	adds	r3, r7, r1
 8003b74:	8812      	ldrh	r2, [r2, #0]
 8003b76:	801a      	strh	r2, [r3, #0]
 8003b78:	187b      	adds	r3, r7, r1
 8003b7a:	881a      	ldrh	r2, [r3, #0]
 8003b7c:	2380      	movs	r3, #128	; 0x80
 8003b7e:	01db      	lsls	r3, r3, #7
 8003b80:	4013      	ands	r3, r2
 8003b82:	d016      	beq.n	8003bb2 <USB_ActivateEndpoint+0x61a>
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	18d3      	adds	r3, r2, r3
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	204c      	movs	r0, #76	; 0x4c
 8003b94:	183b      	adds	r3, r7, r0
 8003b96:	492a      	ldr	r1, [pc, #168]	; (8003c40 <USB_ActivateEndpoint+0x6a8>)
 8003b98:	400a      	ands	r2, r1
 8003b9a:	801a      	strh	r2, [r3, #0]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	18d3      	adds	r3, r2, r3
 8003ba6:	183a      	adds	r2, r7, r0
 8003ba8:	8812      	ldrh	r2, [r2, #0]
 8003baa:	4926      	ldr	r1, [pc, #152]	; (8003c44 <USB_ActivateEndpoint+0x6ac>)
 8003bac:	430a      	orrs	r2, r1
 8003bae:	b292      	uxth	r2, r2
 8003bb0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	18d2      	adds	r2, r2, r3
 8003bbc:	214a      	movs	r1, #74	; 0x4a
 8003bbe:	187b      	adds	r3, r7, r1
 8003bc0:	8812      	ldrh	r2, [r2, #0]
 8003bc2:	801a      	strh	r2, [r3, #0]
 8003bc4:	187b      	adds	r3, r7, r1
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	2240      	movs	r2, #64	; 0x40
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d016      	beq.n	8003bfc <USB_ActivateEndpoint+0x664>
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	18d3      	adds	r3, r2, r3
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	2048      	movs	r0, #72	; 0x48
 8003bde:	183b      	adds	r3, r7, r0
 8003be0:	4917      	ldr	r1, [pc, #92]	; (8003c40 <USB_ActivateEndpoint+0x6a8>)
 8003be2:	400a      	ands	r2, r1
 8003be4:	801a      	strh	r2, [r3, #0]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	18d3      	adds	r3, r2, r3
 8003bf0:	183a      	adds	r2, r7, r0
 8003bf2:	8812      	ldrh	r2, [r2, #0]
 8003bf4:	4919      	ldr	r1, [pc, #100]	; (8003c5c <USB_ActivateEndpoint+0x6c4>)
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	b292      	uxth	r2, r2
 8003bfa:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	78db      	ldrb	r3, [r3, #3]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d02f      	beq.n	8003c64 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	18d3      	adds	r3, r2, r3
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	2044      	movs	r0, #68	; 0x44
 8003c14:	183b      	adds	r3, r7, r0
 8003c16:	4912      	ldr	r1, [pc, #72]	; (8003c60 <USB_ActivateEndpoint+0x6c8>)
 8003c18:	400a      	ands	r2, r1
 8003c1a:	801a      	strh	r2, [r3, #0]
 8003c1c:	183b      	adds	r3, r7, r0
 8003c1e:	183a      	adds	r2, r7, r0
 8003c20:	8812      	ldrh	r2, [r2, #0]
 8003c22:	2120      	movs	r1, #32
 8003c24:	404a      	eors	r2, r1
 8003c26:	801a      	strh	r2, [r3, #0]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	18d3      	adds	r3, r2, r3
 8003c32:	183a      	adds	r2, r7, r0
 8003c34:	8812      	ldrh	r2, [r2, #0]
 8003c36:	4905      	ldr	r1, [pc, #20]	; (8003c4c <USB_ActivateEndpoint+0x6b4>)
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	b292      	uxth	r2, r2
 8003c3c:	801a      	strh	r2, [r3, #0]
 8003c3e:	e028      	b.n	8003c92 <USB_ActivateEndpoint+0x6fa>
 8003c40:	ffff8f8f 	.word	0xffff8f8f
 8003c44:	ffffc080 	.word	0xffffc080
 8003c48:	ffffbf8f 	.word	0xffffbf8f
 8003c4c:	ffff8080 	.word	0xffff8080
 8003c50:	ffff8180 	.word	0xffff8180
 8003c54:	ffff8e8f 	.word	0xffff8e8f
 8003c58:	00000404 	.word	0x00000404
 8003c5c:	ffff80c0 	.word	0xffff80c0
 8003c60:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	18d3      	adds	r3, r2, r3
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	2046      	movs	r0, #70	; 0x46
 8003c74:	183b      	adds	r3, r7, r0
 8003c76:	4916      	ldr	r1, [pc, #88]	; (8003cd0 <USB_ActivateEndpoint+0x738>)
 8003c78:	400a      	ands	r2, r1
 8003c7a:	801a      	strh	r2, [r3, #0]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	18d3      	adds	r3, r2, r3
 8003c86:	183a      	adds	r2, r7, r0
 8003c88:	8812      	ldrh	r2, [r2, #0]
 8003c8a:	4912      	ldr	r1, [pc, #72]	; (8003cd4 <USB_ActivateEndpoint+0x73c>)
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	b292      	uxth	r2, r2
 8003c90:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	18d3      	adds	r3, r2, r3
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	2042      	movs	r0, #66	; 0x42
 8003ca2:	183b      	adds	r3, r7, r0
 8003ca4:	490c      	ldr	r1, [pc, #48]	; (8003cd8 <USB_ActivateEndpoint+0x740>)
 8003ca6:	400a      	ands	r2, r1
 8003ca8:	801a      	strh	r2, [r3, #0]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	18d3      	adds	r3, r2, r3
 8003cb4:	183a      	adds	r2, r7, r0
 8003cb6:	8812      	ldrh	r2, [r2, #0]
 8003cb8:	4906      	ldr	r1, [pc, #24]	; (8003cd4 <USB_ActivateEndpoint+0x73c>)
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	b292      	uxth	r2, r2
 8003cbe:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003cc0:	236f      	movs	r3, #111	; 0x6f
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	781b      	ldrb	r3, [r3, #0]
}
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b01c      	add	sp, #112	; 0x70
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	ffff8fbf 	.word	0xffff8fbf
 8003cd4:	ffff8080 	.word	0xffff8080
 8003cd8:	ffffbf8f 	.word	0xffffbf8f

08003cdc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08c      	sub	sp, #48	; 0x30
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	7b1b      	ldrb	r3, [r3, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d000      	beq.n	8003cf0 <USB_DeactivateEndpoint+0x14>
 8003cee:	e07e      	b.n	8003dee <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	785b      	ldrb	r3, [r3, #1]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d03c      	beq.n	8003d72 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	18d2      	adds	r2, r2, r3
 8003d02:	210c      	movs	r1, #12
 8003d04:	187b      	adds	r3, r7, r1
 8003d06:	8812      	ldrh	r2, [r2, #0]
 8003d08:	801a      	strh	r2, [r3, #0]
 8003d0a:	187b      	adds	r3, r7, r1
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	2240      	movs	r2, #64	; 0x40
 8003d10:	4013      	ands	r3, r2
 8003d12:	d016      	beq.n	8003d42 <USB_DeactivateEndpoint+0x66>
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	18d3      	adds	r3, r2, r3
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	200a      	movs	r0, #10
 8003d24:	183b      	adds	r3, r7, r0
 8003d26:	49c7      	ldr	r1, [pc, #796]	; (8004044 <USB_DeactivateEndpoint+0x368>)
 8003d28:	400a      	ands	r2, r1
 8003d2a:	801a      	strh	r2, [r3, #0]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	18d3      	adds	r3, r2, r3
 8003d36:	183a      	adds	r2, r7, r0
 8003d38:	8812      	ldrh	r2, [r2, #0]
 8003d3a:	49c3      	ldr	r1, [pc, #780]	; (8004048 <USB_DeactivateEndpoint+0x36c>)
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	b292      	uxth	r2, r2
 8003d40:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	18d3      	adds	r3, r2, r3
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	2008      	movs	r0, #8
 8003d52:	183b      	adds	r3, r7, r0
 8003d54:	49bd      	ldr	r1, [pc, #756]	; (800404c <USB_DeactivateEndpoint+0x370>)
 8003d56:	400a      	ands	r2, r1
 8003d58:	801a      	strh	r2, [r3, #0]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	18d3      	adds	r3, r2, r3
 8003d64:	183a      	adds	r2, r7, r0
 8003d66:	8812      	ldrh	r2, [r2, #0]
 8003d68:	49b9      	ldr	r1, [pc, #740]	; (8004050 <USB_DeactivateEndpoint+0x374>)
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	b292      	uxth	r2, r2
 8003d6e:	801a      	strh	r2, [r3, #0]
 8003d70:	e163      	b.n	800403a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	18d2      	adds	r2, r2, r3
 8003d7c:	2112      	movs	r1, #18
 8003d7e:	187b      	adds	r3, r7, r1
 8003d80:	8812      	ldrh	r2, [r2, #0]
 8003d82:	801a      	strh	r2, [r3, #0]
 8003d84:	187b      	adds	r3, r7, r1
 8003d86:	881a      	ldrh	r2, [r3, #0]
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	01db      	lsls	r3, r3, #7
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d016      	beq.n	8003dbe <USB_DeactivateEndpoint+0xe2>
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	18d3      	adds	r3, r2, r3
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	2010      	movs	r0, #16
 8003da0:	183b      	adds	r3, r7, r0
 8003da2:	49a8      	ldr	r1, [pc, #672]	; (8004044 <USB_DeactivateEndpoint+0x368>)
 8003da4:	400a      	ands	r2, r1
 8003da6:	801a      	strh	r2, [r3, #0]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	18d3      	adds	r3, r2, r3
 8003db2:	183a      	adds	r2, r7, r0
 8003db4:	8812      	ldrh	r2, [r2, #0]
 8003db6:	49a7      	ldr	r1, [pc, #668]	; (8004054 <USB_DeactivateEndpoint+0x378>)
 8003db8:	430a      	orrs	r2, r1
 8003dba:	b292      	uxth	r2, r2
 8003dbc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	18d3      	adds	r3, r2, r3
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	200e      	movs	r0, #14
 8003dce:	183b      	adds	r3, r7, r0
 8003dd0:	49a1      	ldr	r1, [pc, #644]	; (8004058 <USB_DeactivateEndpoint+0x37c>)
 8003dd2:	400a      	ands	r2, r1
 8003dd4:	801a      	strh	r2, [r3, #0]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	18d3      	adds	r3, r2, r3
 8003de0:	183a      	adds	r2, r7, r0
 8003de2:	8812      	ldrh	r2, [r2, #0]
 8003de4:	499a      	ldr	r1, [pc, #616]	; (8004050 <USB_DeactivateEndpoint+0x374>)
 8003de6:	430a      	orrs	r2, r1
 8003de8:	b292      	uxth	r2, r2
 8003dea:	801a      	strh	r2, [r3, #0]
 8003dec:	e125      	b.n	800403a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	785b      	ldrb	r3, [r3, #1]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d000      	beq.n	8003df8 <USB_DeactivateEndpoint+0x11c>
 8003df6:	e090      	b.n	8003f1a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	18d2      	adds	r2, r2, r3
 8003e02:	2120      	movs	r1, #32
 8003e04:	187b      	adds	r3, r7, r1
 8003e06:	8812      	ldrh	r2, [r2, #0]
 8003e08:	801a      	strh	r2, [r3, #0]
 8003e0a:	187b      	adds	r3, r7, r1
 8003e0c:	881a      	ldrh	r2, [r3, #0]
 8003e0e:	2380      	movs	r3, #128	; 0x80
 8003e10:	01db      	lsls	r3, r3, #7
 8003e12:	4013      	ands	r3, r2
 8003e14:	d016      	beq.n	8003e44 <USB_DeactivateEndpoint+0x168>
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	18d3      	adds	r3, r2, r3
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	201e      	movs	r0, #30
 8003e26:	183b      	adds	r3, r7, r0
 8003e28:	4986      	ldr	r1, [pc, #536]	; (8004044 <USB_DeactivateEndpoint+0x368>)
 8003e2a:	400a      	ands	r2, r1
 8003e2c:	801a      	strh	r2, [r3, #0]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	18d3      	adds	r3, r2, r3
 8003e38:	183a      	adds	r2, r7, r0
 8003e3a:	8812      	ldrh	r2, [r2, #0]
 8003e3c:	4985      	ldr	r1, [pc, #532]	; (8004054 <USB_DeactivateEndpoint+0x378>)
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	b292      	uxth	r2, r2
 8003e42:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	18d2      	adds	r2, r2, r3
 8003e4e:	211c      	movs	r1, #28
 8003e50:	187b      	adds	r3, r7, r1
 8003e52:	8812      	ldrh	r2, [r2, #0]
 8003e54:	801a      	strh	r2, [r3, #0]
 8003e56:	187b      	adds	r3, r7, r1
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	2240      	movs	r2, #64	; 0x40
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d016      	beq.n	8003e8e <USB_DeactivateEndpoint+0x1b2>
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	18d3      	adds	r3, r2, r3
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	201a      	movs	r0, #26
 8003e70:	183b      	adds	r3, r7, r0
 8003e72:	4974      	ldr	r1, [pc, #464]	; (8004044 <USB_DeactivateEndpoint+0x368>)
 8003e74:	400a      	ands	r2, r1
 8003e76:	801a      	strh	r2, [r3, #0]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	18d3      	adds	r3, r2, r3
 8003e82:	183a      	adds	r2, r7, r0
 8003e84:	8812      	ldrh	r2, [r2, #0]
 8003e86:	4970      	ldr	r1, [pc, #448]	; (8004048 <USB_DeactivateEndpoint+0x36c>)
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	b292      	uxth	r2, r2
 8003e8c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	18d3      	adds	r3, r2, r3
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	2018      	movs	r0, #24
 8003e9e:	183b      	adds	r3, r7, r0
 8003ea0:	4968      	ldr	r1, [pc, #416]	; (8004044 <USB_DeactivateEndpoint+0x368>)
 8003ea2:	400a      	ands	r2, r1
 8003ea4:	801a      	strh	r2, [r3, #0]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	18d3      	adds	r3, r2, r3
 8003eb0:	183a      	adds	r2, r7, r0
 8003eb2:	8812      	ldrh	r2, [r2, #0]
 8003eb4:	4964      	ldr	r1, [pc, #400]	; (8004048 <USB_DeactivateEndpoint+0x36c>)
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	b292      	uxth	r2, r2
 8003eba:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	18d3      	adds	r3, r2, r3
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	2016      	movs	r0, #22
 8003ecc:	183b      	adds	r3, r7, r0
 8003ece:	4962      	ldr	r1, [pc, #392]	; (8004058 <USB_DeactivateEndpoint+0x37c>)
 8003ed0:	400a      	ands	r2, r1
 8003ed2:	801a      	strh	r2, [r3, #0]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	18d3      	adds	r3, r2, r3
 8003ede:	183a      	adds	r2, r7, r0
 8003ee0:	8812      	ldrh	r2, [r2, #0]
 8003ee2:	495b      	ldr	r1, [pc, #364]	; (8004050 <USB_DeactivateEndpoint+0x374>)
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	b292      	uxth	r2, r2
 8003ee8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	18d3      	adds	r3, r2, r3
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	2014      	movs	r0, #20
 8003efa:	183b      	adds	r3, r7, r0
 8003efc:	4953      	ldr	r1, [pc, #332]	; (800404c <USB_DeactivateEndpoint+0x370>)
 8003efe:	400a      	ands	r2, r1
 8003f00:	801a      	strh	r2, [r3, #0]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	18d3      	adds	r3, r2, r3
 8003f0c:	183a      	adds	r2, r7, r0
 8003f0e:	8812      	ldrh	r2, [r2, #0]
 8003f10:	494f      	ldr	r1, [pc, #316]	; (8004050 <USB_DeactivateEndpoint+0x374>)
 8003f12:	430a      	orrs	r2, r1
 8003f14:	b292      	uxth	r2, r2
 8003f16:	801a      	strh	r2, [r3, #0]
 8003f18:	e08f      	b.n	800403a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	18d2      	adds	r2, r2, r3
 8003f24:	212e      	movs	r1, #46	; 0x2e
 8003f26:	187b      	adds	r3, r7, r1
 8003f28:	8812      	ldrh	r2, [r2, #0]
 8003f2a:	801a      	strh	r2, [r3, #0]
 8003f2c:	187b      	adds	r3, r7, r1
 8003f2e:	881a      	ldrh	r2, [r3, #0]
 8003f30:	2380      	movs	r3, #128	; 0x80
 8003f32:	01db      	lsls	r3, r3, #7
 8003f34:	4013      	ands	r3, r2
 8003f36:	d016      	beq.n	8003f66 <USB_DeactivateEndpoint+0x28a>
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	18d3      	adds	r3, r2, r3
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	202c      	movs	r0, #44	; 0x2c
 8003f48:	183b      	adds	r3, r7, r0
 8003f4a:	493e      	ldr	r1, [pc, #248]	; (8004044 <USB_DeactivateEndpoint+0x368>)
 8003f4c:	400a      	ands	r2, r1
 8003f4e:	801a      	strh	r2, [r3, #0]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	18d3      	adds	r3, r2, r3
 8003f5a:	183a      	adds	r2, r7, r0
 8003f5c:	8812      	ldrh	r2, [r2, #0]
 8003f5e:	493d      	ldr	r1, [pc, #244]	; (8004054 <USB_DeactivateEndpoint+0x378>)
 8003f60:	430a      	orrs	r2, r1
 8003f62:	b292      	uxth	r2, r2
 8003f64:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	18d2      	adds	r2, r2, r3
 8003f70:	212a      	movs	r1, #42	; 0x2a
 8003f72:	187b      	adds	r3, r7, r1
 8003f74:	8812      	ldrh	r2, [r2, #0]
 8003f76:	801a      	strh	r2, [r3, #0]
 8003f78:	187b      	adds	r3, r7, r1
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	2240      	movs	r2, #64	; 0x40
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d016      	beq.n	8003fb0 <USB_DeactivateEndpoint+0x2d4>
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	18d3      	adds	r3, r2, r3
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	2028      	movs	r0, #40	; 0x28
 8003f92:	183b      	adds	r3, r7, r0
 8003f94:	492b      	ldr	r1, [pc, #172]	; (8004044 <USB_DeactivateEndpoint+0x368>)
 8003f96:	400a      	ands	r2, r1
 8003f98:	801a      	strh	r2, [r3, #0]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	18d3      	adds	r3, r2, r3
 8003fa4:	183a      	adds	r2, r7, r0
 8003fa6:	8812      	ldrh	r2, [r2, #0]
 8003fa8:	4927      	ldr	r1, [pc, #156]	; (8004048 <USB_DeactivateEndpoint+0x36c>)
 8003faa:	430a      	orrs	r2, r1
 8003fac:	b292      	uxth	r2, r2
 8003fae:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	18d3      	adds	r3, r2, r3
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	2026      	movs	r0, #38	; 0x26
 8003fc0:	183b      	adds	r3, r7, r0
 8003fc2:	4920      	ldr	r1, [pc, #128]	; (8004044 <USB_DeactivateEndpoint+0x368>)
 8003fc4:	400a      	ands	r2, r1
 8003fc6:	801a      	strh	r2, [r3, #0]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	18d3      	adds	r3, r2, r3
 8003fd2:	183a      	adds	r2, r7, r0
 8003fd4:	8812      	ldrh	r2, [r2, #0]
 8003fd6:	491f      	ldr	r1, [pc, #124]	; (8004054 <USB_DeactivateEndpoint+0x378>)
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	b292      	uxth	r2, r2
 8003fdc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	18d3      	adds	r3, r2, r3
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	2024      	movs	r0, #36	; 0x24
 8003fee:	183b      	adds	r3, r7, r0
 8003ff0:	4916      	ldr	r1, [pc, #88]	; (800404c <USB_DeactivateEndpoint+0x370>)
 8003ff2:	400a      	ands	r2, r1
 8003ff4:	801a      	strh	r2, [r3, #0]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	18d3      	adds	r3, r2, r3
 8004000:	183a      	adds	r2, r7, r0
 8004002:	8812      	ldrh	r2, [r2, #0]
 8004004:	4912      	ldr	r1, [pc, #72]	; (8004050 <USB_DeactivateEndpoint+0x374>)
 8004006:	430a      	orrs	r2, r1
 8004008:	b292      	uxth	r2, r2
 800400a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	18d3      	adds	r3, r2, r3
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	b29a      	uxth	r2, r3
 800401a:	2022      	movs	r0, #34	; 0x22
 800401c:	183b      	adds	r3, r7, r0
 800401e:	490e      	ldr	r1, [pc, #56]	; (8004058 <USB_DeactivateEndpoint+0x37c>)
 8004020:	400a      	ands	r2, r1
 8004022:	801a      	strh	r2, [r3, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	18d3      	adds	r3, r2, r3
 800402e:	183a      	adds	r2, r7, r0
 8004030:	8812      	ldrh	r2, [r2, #0]
 8004032:	4907      	ldr	r1, [pc, #28]	; (8004050 <USB_DeactivateEndpoint+0x374>)
 8004034:	430a      	orrs	r2, r1
 8004036:	b292      	uxth	r2, r2
 8004038:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	b00c      	add	sp, #48	; 0x30
 8004042:	bd80      	pop	{r7, pc}
 8004044:	ffff8f8f 	.word	0xffff8f8f
 8004048:	ffff80c0 	.word	0xffff80c0
 800404c:	ffff8fbf 	.word	0xffff8fbf
 8004050:	ffff8080 	.word	0xffff8080
 8004054:	ffffc080 	.word	0xffffc080
 8004058:	ffffbf8f 	.word	0xffffbf8f

0800405c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800405c:	b590      	push	{r4, r7, lr}
 800405e:	b0c3      	sub	sp, #268	; 0x10c
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	785b      	ldrb	r3, [r3, #1]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d001      	beq.n	8004072 <USB_EPStartXfer+0x16>
 800406e:	f000 fd2d 	bl	8004acc <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	429a      	cmp	r2, r3
 800407c:	d905      	bls.n	800408a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	1d7a      	adds	r2, r7, #5
 8004084:	32ff      	adds	r2, #255	; 0xff
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	e004      	b.n	8004094 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	1d7a      	adds	r2, r7, #5
 8004090:	32ff      	adds	r2, #255	; 0xff
 8004092:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	7b1b      	ldrb	r3, [r3, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d125      	bne.n	80040e8 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	6959      	ldr	r1, [r3, #20]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	88da      	ldrh	r2, [r3, #6]
 80040a4:	1d7b      	adds	r3, r7, #5
 80040a6:	33ff      	adds	r3, #255	; 0xff
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f001 fa47 	bl	8005540 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2250      	movs	r2, #80	; 0x50
 80040ba:	5a9b      	ldrh	r3, [r3, r2]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	001a      	movs	r2, r3
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	189b      	adds	r3, r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	00da      	lsls	r2, r3, #3
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	18d3      	adds	r3, r2, r3
 80040d0:	4ad7      	ldr	r2, [pc, #860]	; (8004430 <USB_EPStartXfer+0x3d4>)
 80040d2:	4694      	mov	ip, r2
 80040d4:	4463      	add	r3, ip
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	1d7b      	adds	r3, r7, #5
 80040da:	33ff      	adds	r3, #255	; 0xff
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	801a      	strh	r2, [r3, #0]
 80040e4:	f000 fccd 	bl	8004a82 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	78db      	ldrb	r3, [r3, #3]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d000      	beq.n	80040f2 <USB_EPStartXfer+0x96>
 80040f0:	e362      	b.n	80047b8 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	6a1a      	ldr	r2, [r3, #32]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d800      	bhi.n	8004100 <USB_EPStartXfer+0xa4>
 80040fe:	e309      	b.n	8004714 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	18d3      	adds	r3, r2, r3
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29a      	uxth	r2, r3
 800410e:	2056      	movs	r0, #86	; 0x56
 8004110:	183b      	adds	r3, r7, r0
 8004112:	49c8      	ldr	r1, [pc, #800]	; (8004434 <USB_EPStartXfer+0x3d8>)
 8004114:	400a      	ands	r2, r1
 8004116:	801a      	strh	r2, [r3, #0]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	18d3      	adds	r3, r2, r3
 8004122:	183a      	adds	r2, r7, r0
 8004124:	8812      	ldrh	r2, [r2, #0]
 8004126:	49c4      	ldr	r1, [pc, #784]	; (8004438 <USB_EPStartXfer+0x3dc>)
 8004128:	430a      	orrs	r2, r1
 800412a:	b292      	uxth	r2, r2
 800412c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6a1a      	ldr	r2, [r3, #32]
 8004132:	1d7b      	adds	r3, r7, #5
 8004134:	33ff      	adds	r3, #255	; 0xff
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	1ad2      	subs	r2, r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	18d3      	adds	r3, r2, r3
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	b29b      	uxth	r3, r3
 800414c:	001a      	movs	r2, r3
 800414e:	2340      	movs	r3, #64	; 0x40
 8004150:	4013      	ands	r3, r2
 8004152:	d100      	bne.n	8004156 <USB_EPStartXfer+0xfa>
 8004154:	e176      	b.n	8004444 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	633b      	str	r3, [r7, #48]	; 0x30
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	785b      	ldrb	r3, [r3, #1]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d000      	beq.n	8004164 <USB_EPStartXfer+0x108>
 8004162:	e074      	b.n	800424e <USB_EPStartXfer+0x1f2>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	62bb      	str	r3, [r7, #40]	; 0x28
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2250      	movs	r2, #80	; 0x50
 800416c:	5a9b      	ldrh	r3, [r3, r2]
 800416e:	b29b      	uxth	r3, r3
 8004170:	001a      	movs	r2, r3
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	189b      	adds	r3, r3, r2
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	00da      	lsls	r2, r3, #3
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	18d3      	adds	r3, r2, r3
 8004182:	4aae      	ldr	r2, [pc, #696]	; (800443c <USB_EPStartXfer+0x3e0>)
 8004184:	4694      	mov	ip, r2
 8004186:	4463      	add	r3, ip
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	059b      	lsls	r3, r3, #22
 8004192:	0d9b      	lsrs	r3, r3, #22
 8004194:	b29a      	uxth	r2, r3
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	801a      	strh	r2, [r3, #0]
 800419a:	1d7b      	adds	r3, r7, #5
 800419c:	33ff      	adds	r3, #255	; 0xff
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b3e      	cmp	r3, #62	; 0x3e
 80041a2:	d924      	bls.n	80041ee <USB_EPStartXfer+0x192>
 80041a4:	1d7b      	adds	r3, r7, #5
 80041a6:	33ff      	adds	r3, #255	; 0xff
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	1c7a      	adds	r2, r7, #1
 80041ae:	32ff      	adds	r2, #255	; 0xff
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	1d7b      	adds	r3, r7, #5
 80041b4:	33ff      	adds	r3, #255	; 0xff
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	221f      	movs	r2, #31
 80041ba:	4013      	ands	r3, r2
 80041bc:	d106      	bne.n	80041cc <USB_EPStartXfer+0x170>
 80041be:	1c7b      	adds	r3, r7, #1
 80041c0:	33ff      	adds	r3, #255	; 0xff
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	1c7a      	adds	r2, r7, #1
 80041c8:	32ff      	adds	r2, #255	; 0xff
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	1c7b      	adds	r3, r7, #1
 80041d4:	33ff      	adds	r3, #255	; 0xff
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	029b      	lsls	r3, r3, #10
 80041dc:	b29b      	uxth	r3, r3
 80041de:	4313      	orrs	r3, r2
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	4a97      	ldr	r2, [pc, #604]	; (8004440 <USB_EPStartXfer+0x3e4>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	801a      	strh	r2, [r3, #0]
 80041ec:	e04a      	b.n	8004284 <USB_EPStartXfer+0x228>
 80041ee:	1d7b      	adds	r3, r7, #5
 80041f0:	33ff      	adds	r3, #255	; 0xff
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d108      	bne.n	800420a <USB_EPStartXfer+0x1ae>
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	4a90      	ldr	r2, [pc, #576]	; (8004440 <USB_EPStartXfer+0x3e4>)
 8004200:	4313      	orrs	r3, r2
 8004202:	b29a      	uxth	r2, r3
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	801a      	strh	r2, [r3, #0]
 8004208:	e03c      	b.n	8004284 <USB_EPStartXfer+0x228>
 800420a:	1d7b      	adds	r3, r7, #5
 800420c:	33ff      	adds	r3, #255	; 0xff
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	085b      	lsrs	r3, r3, #1
 8004212:	1c7a      	adds	r2, r7, #1
 8004214:	32ff      	adds	r2, #255	; 0xff
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	1d7b      	adds	r3, r7, #5
 800421a:	33ff      	adds	r3, #255	; 0xff
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2201      	movs	r2, #1
 8004220:	4013      	ands	r3, r2
 8004222:	d006      	beq.n	8004232 <USB_EPStartXfer+0x1d6>
 8004224:	1c7b      	adds	r3, r7, #1
 8004226:	33ff      	adds	r3, #255	; 0xff
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3301      	adds	r3, #1
 800422c:	1c7a      	adds	r2, r7, #1
 800422e:	32ff      	adds	r2, #255	; 0xff
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	b29a      	uxth	r2, r3
 8004238:	1c7b      	adds	r3, r7, #1
 800423a:	33ff      	adds	r3, #255	; 0xff
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	029b      	lsls	r3, r3, #10
 8004242:	b29b      	uxth	r3, r3
 8004244:	4313      	orrs	r3, r2
 8004246:	b29a      	uxth	r2, r3
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	801a      	strh	r2, [r3, #0]
 800424c:	e01a      	b.n	8004284 <USB_EPStartXfer+0x228>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	785b      	ldrb	r3, [r3, #1]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d116      	bne.n	8004284 <USB_EPStartXfer+0x228>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2250      	movs	r2, #80	; 0x50
 800425a:	5a9b      	ldrh	r3, [r3, r2]
 800425c:	b29b      	uxth	r3, r3
 800425e:	001a      	movs	r2, r3
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004262:	189b      	adds	r3, r3, r2
 8004264:	633b      	str	r3, [r7, #48]	; 0x30
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	00da      	lsls	r2, r3, #3
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	18d3      	adds	r3, r2, r3
 8004270:	4a72      	ldr	r2, [pc, #456]	; (800443c <USB_EPStartXfer+0x3e0>)
 8004272:	4694      	mov	ip, r2
 8004274:	4463      	add	r3, ip
 8004276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004278:	1d7b      	adds	r3, r7, #5
 800427a:	33ff      	adds	r3, #255	; 0xff
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	b29a      	uxth	r2, r3
 8004280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004282:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004284:	2076      	movs	r0, #118	; 0x76
 8004286:	183b      	adds	r3, r7, r0
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	8952      	ldrh	r2, [r2, #10]
 800428c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6959      	ldr	r1, [r3, #20]
 8004292:	1d7b      	adds	r3, r7, #5
 8004294:	33ff      	adds	r3, #255	; 0xff
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	b29c      	uxth	r4, r3
 800429a:	183b      	adds	r3, r7, r0
 800429c:	881a      	ldrh	r2, [r3, #0]
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	0023      	movs	r3, r4
 80042a2:	f001 f94d 	bl	8005540 <USB_WritePMA>
            ep->xfer_buff += len;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	1d7b      	adds	r3, r7, #5
 80042ac:	33ff      	adds	r3, #255	; 0xff
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	18d2      	adds	r2, r2, r3
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6a1a      	ldr	r2, [r3, #32]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d908      	bls.n	80042d4 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6a1a      	ldr	r2, [r3, #32]
 80042c6:	1d7b      	adds	r3, r7, #5
 80042c8:	33ff      	adds	r3, #255	; 0xff
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	1ad2      	subs	r2, r2, r3
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	621a      	str	r2, [r3, #32]
 80042d2:	e007      	b.n	80042e4 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	1d7a      	adds	r2, r7, #5
 80042da:	32ff      	adds	r2, #255	; 0xff
 80042dc:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2200      	movs	r2, #0
 80042e2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	785b      	ldrb	r3, [r3, #1]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d000      	beq.n	80042ee <USB_EPStartXfer+0x292>
 80042ec:	e070      	b.n	80043d0 <USB_EPStartXfer+0x374>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	61bb      	str	r3, [r7, #24]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2250      	movs	r2, #80	; 0x50
 80042f6:	5a9b      	ldrh	r3, [r3, r2]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	001a      	movs	r2, r3
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	189b      	adds	r3, r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	00da      	lsls	r2, r3, #3
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	18d3      	adds	r3, r2, r3
 800430c:	4a48      	ldr	r2, [pc, #288]	; (8004430 <USB_EPStartXfer+0x3d4>)
 800430e:	4694      	mov	ip, r2
 8004310:	4463      	add	r3, ip
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	b29b      	uxth	r3, r3
 800431a:	059b      	lsls	r3, r3, #22
 800431c:	0d9b      	lsrs	r3, r3, #22
 800431e:	b29a      	uxth	r2, r3
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	801a      	strh	r2, [r3, #0]
 8004324:	1d7b      	adds	r3, r7, #5
 8004326:	33ff      	adds	r3, #255	; 0xff
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b3e      	cmp	r3, #62	; 0x3e
 800432c:	d922      	bls.n	8004374 <USB_EPStartXfer+0x318>
 800432e:	1d7b      	adds	r3, r7, #5
 8004330:	33ff      	adds	r3, #255	; 0xff
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	21fc      	movs	r1, #252	; 0xfc
 8004338:	187a      	adds	r2, r7, r1
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	1d7b      	adds	r3, r7, #5
 800433e:	33ff      	adds	r3, #255	; 0xff
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	221f      	movs	r2, #31
 8004344:	4013      	ands	r3, r2
 8004346:	d104      	bne.n	8004352 <USB_EPStartXfer+0x2f6>
 8004348:	187b      	adds	r3, r7, r1
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3b01      	subs	r3, #1
 800434e:	187a      	adds	r2, r7, r1
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	b29a      	uxth	r2, r3
 8004358:	23fc      	movs	r3, #252	; 0xfc
 800435a:	18fb      	adds	r3, r7, r3
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	029b      	lsls	r3, r3, #10
 8004362:	b29b      	uxth	r3, r3
 8004364:	4313      	orrs	r3, r2
 8004366:	b29b      	uxth	r3, r3
 8004368:	4a35      	ldr	r2, [pc, #212]	; (8004440 <USB_EPStartXfer+0x3e4>)
 800436a:	4313      	orrs	r3, r2
 800436c:	b29a      	uxth	r2, r3
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	801a      	strh	r2, [r3, #0]
 8004372:	e04a      	b.n	800440a <USB_EPStartXfer+0x3ae>
 8004374:	1d7b      	adds	r3, r7, #5
 8004376:	33ff      	adds	r3, #255	; 0xff
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d108      	bne.n	8004390 <USB_EPStartXfer+0x334>
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	4a2e      	ldr	r2, [pc, #184]	; (8004440 <USB_EPStartXfer+0x3e4>)
 8004386:	4313      	orrs	r3, r2
 8004388:	b29a      	uxth	r2, r3
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	801a      	strh	r2, [r3, #0]
 800438e:	e03c      	b.n	800440a <USB_EPStartXfer+0x3ae>
 8004390:	1d7b      	adds	r3, r7, #5
 8004392:	33ff      	adds	r3, #255	; 0xff
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	085b      	lsrs	r3, r3, #1
 8004398:	21fc      	movs	r1, #252	; 0xfc
 800439a:	187a      	adds	r2, r7, r1
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	1d7b      	adds	r3, r7, #5
 80043a0:	33ff      	adds	r3, #255	; 0xff
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2201      	movs	r2, #1
 80043a6:	4013      	ands	r3, r2
 80043a8:	d004      	beq.n	80043b4 <USB_EPStartXfer+0x358>
 80043aa:	187b      	adds	r3, r7, r1
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3301      	adds	r3, #1
 80043b0:	187a      	adds	r2, r7, r1
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	23fc      	movs	r3, #252	; 0xfc
 80043bc:	18fb      	adds	r3, r7, r3
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	029b      	lsls	r3, r3, #10
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	4313      	orrs	r3, r2
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	801a      	strh	r2, [r3, #0]
 80043ce:	e01c      	b.n	800440a <USB_EPStartXfer+0x3ae>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	785b      	ldrb	r3, [r3, #1]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d118      	bne.n	800440a <USB_EPStartXfer+0x3ae>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	623b      	str	r3, [r7, #32]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2250      	movs	r2, #80	; 0x50
 80043e0:	5a9b      	ldrh	r3, [r3, r2]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	001a      	movs	r2, r3
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	189b      	adds	r3, r3, r2
 80043ea:	623b      	str	r3, [r7, #32]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	00da      	lsls	r2, r3, #3
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	18d3      	adds	r3, r2, r3
 80043f6:	4a0e      	ldr	r2, [pc, #56]	; (8004430 <USB_EPStartXfer+0x3d4>)
 80043f8:	4694      	mov	ip, r2
 80043fa:	4463      	add	r3, ip
 80043fc:	61fb      	str	r3, [r7, #28]
 80043fe:	1d7b      	adds	r3, r7, #5
 8004400:	33ff      	adds	r3, #255	; 0xff
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	b29a      	uxth	r2, r3
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800440a:	2076      	movs	r0, #118	; 0x76
 800440c:	183b      	adds	r3, r7, r0
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	8912      	ldrh	r2, [r2, #8]
 8004412:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	6959      	ldr	r1, [r3, #20]
 8004418:	1d7b      	adds	r3, r7, #5
 800441a:	33ff      	adds	r3, #255	; 0xff
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	b29c      	uxth	r4, r3
 8004420:	183b      	adds	r3, r7, r0
 8004422:	881a      	ldrh	r2, [r3, #0]
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	0023      	movs	r3, r4
 8004428:	f001 f88a 	bl	8005540 <USB_WritePMA>
 800442c:	e329      	b.n	8004a82 <USB_EPStartXfer+0xa26>
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	00000402 	.word	0x00000402
 8004434:	ffff8f8f 	.word	0xffff8f8f
 8004438:	ffff8180 	.word	0xffff8180
 800443c:	00000406 	.word	0x00000406
 8004440:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	785b      	ldrb	r3, [r3, #1]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d000      	beq.n	800444e <USB_EPStartXfer+0x3f2>
 800444c:	e070      	b.n	8004530 <USB_EPStartXfer+0x4d4>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	64bb      	str	r3, [r7, #72]	; 0x48
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2250      	movs	r2, #80	; 0x50
 8004456:	5a9b      	ldrh	r3, [r3, r2]
 8004458:	b29b      	uxth	r3, r3
 800445a:	001a      	movs	r2, r3
 800445c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800445e:	189b      	adds	r3, r3, r2
 8004460:	64bb      	str	r3, [r7, #72]	; 0x48
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	00da      	lsls	r2, r3, #3
 8004468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800446a:	18d3      	adds	r3, r2, r3
 800446c:	4acd      	ldr	r2, [pc, #820]	; (80047a4 <USB_EPStartXfer+0x748>)
 800446e:	4694      	mov	ip, r2
 8004470:	4463      	add	r3, ip
 8004472:	647b      	str	r3, [r7, #68]	; 0x44
 8004474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b29b      	uxth	r3, r3
 800447a:	059b      	lsls	r3, r3, #22
 800447c:	0d9b      	lsrs	r3, r3, #22
 800447e:	b29a      	uxth	r2, r3
 8004480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004482:	801a      	strh	r2, [r3, #0]
 8004484:	1d7b      	adds	r3, r7, #5
 8004486:	33ff      	adds	r3, #255	; 0xff
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b3e      	cmp	r3, #62	; 0x3e
 800448c:	d922      	bls.n	80044d4 <USB_EPStartXfer+0x478>
 800448e:	1d7b      	adds	r3, r7, #5
 8004490:	33ff      	adds	r3, #255	; 0xff
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	095b      	lsrs	r3, r3, #5
 8004496:	21f8      	movs	r1, #248	; 0xf8
 8004498:	187a      	adds	r2, r7, r1
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	1d7b      	adds	r3, r7, #5
 800449e:	33ff      	adds	r3, #255	; 0xff
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	221f      	movs	r2, #31
 80044a4:	4013      	ands	r3, r2
 80044a6:	d104      	bne.n	80044b2 <USB_EPStartXfer+0x456>
 80044a8:	187b      	adds	r3, r7, r1
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	187a      	adds	r2, r7, r1
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	23f8      	movs	r3, #248	; 0xf8
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	029b      	lsls	r3, r3, #10
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	4313      	orrs	r3, r2
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	4ab7      	ldr	r2, [pc, #732]	; (80047a8 <USB_EPStartXfer+0x74c>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d0:	801a      	strh	r2, [r3, #0]
 80044d2:	e04a      	b.n	800456a <USB_EPStartXfer+0x50e>
 80044d4:	1d7b      	adds	r3, r7, #5
 80044d6:	33ff      	adds	r3, #255	; 0xff
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d108      	bne.n	80044f0 <USB_EPStartXfer+0x494>
 80044de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	4ab0      	ldr	r2, [pc, #704]	; (80047a8 <USB_EPStartXfer+0x74c>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ec:	801a      	strh	r2, [r3, #0]
 80044ee:	e03c      	b.n	800456a <USB_EPStartXfer+0x50e>
 80044f0:	1d7b      	adds	r3, r7, #5
 80044f2:	33ff      	adds	r3, #255	; 0xff
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	21f8      	movs	r1, #248	; 0xf8
 80044fa:	187a      	adds	r2, r7, r1
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	1d7b      	adds	r3, r7, #5
 8004500:	33ff      	adds	r3, #255	; 0xff
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2201      	movs	r2, #1
 8004506:	4013      	ands	r3, r2
 8004508:	d004      	beq.n	8004514 <USB_EPStartXfer+0x4b8>
 800450a:	187b      	adds	r3, r7, r1
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3301      	adds	r3, #1
 8004510:	187a      	adds	r2, r7, r1
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	b29a      	uxth	r2, r3
 800451a:	23f8      	movs	r3, #248	; 0xf8
 800451c:	18fb      	adds	r3, r7, r3
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	b29b      	uxth	r3, r3
 8004522:	029b      	lsls	r3, r3, #10
 8004524:	b29b      	uxth	r3, r3
 8004526:	4313      	orrs	r3, r2
 8004528:	b29a      	uxth	r2, r3
 800452a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800452c:	801a      	strh	r2, [r3, #0]
 800452e:	e01c      	b.n	800456a <USB_EPStartXfer+0x50e>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	785b      	ldrb	r3, [r3, #1]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d118      	bne.n	800456a <USB_EPStartXfer+0x50e>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	653b      	str	r3, [r7, #80]	; 0x50
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2250      	movs	r2, #80	; 0x50
 8004540:	5a9b      	ldrh	r3, [r3, r2]
 8004542:	b29b      	uxth	r3, r3
 8004544:	001a      	movs	r2, r3
 8004546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004548:	189b      	adds	r3, r3, r2
 800454a:	653b      	str	r3, [r7, #80]	; 0x50
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	00da      	lsls	r2, r3, #3
 8004552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004554:	18d3      	adds	r3, r2, r3
 8004556:	4a93      	ldr	r2, [pc, #588]	; (80047a4 <USB_EPStartXfer+0x748>)
 8004558:	4694      	mov	ip, r2
 800455a:	4463      	add	r3, ip
 800455c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800455e:	1d7b      	adds	r3, r7, #5
 8004560:	33ff      	adds	r3, #255	; 0xff
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	b29a      	uxth	r2, r3
 8004566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004568:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800456a:	2076      	movs	r0, #118	; 0x76
 800456c:	183b      	adds	r3, r7, r0
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	8912      	ldrh	r2, [r2, #8]
 8004572:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	6959      	ldr	r1, [r3, #20]
 8004578:	1d7b      	adds	r3, r7, #5
 800457a:	33ff      	adds	r3, #255	; 0xff
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	b29c      	uxth	r4, r3
 8004580:	183b      	adds	r3, r7, r0
 8004582:	881a      	ldrh	r2, [r3, #0]
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	0023      	movs	r3, r4
 8004588:	f000 ffda 	bl	8005540 <USB_WritePMA>
            ep->xfer_buff += len;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	695a      	ldr	r2, [r3, #20]
 8004590:	1d7b      	adds	r3, r7, #5
 8004592:	33ff      	adds	r3, #255	; 0xff
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	18d2      	adds	r2, r2, r3
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	6a1a      	ldr	r2, [r3, #32]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d908      	bls.n	80045ba <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	6a1a      	ldr	r2, [r3, #32]
 80045ac:	1d7b      	adds	r3, r7, #5
 80045ae:	33ff      	adds	r3, #255	; 0xff
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	1ad2      	subs	r2, r2, r3
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	621a      	str	r2, [r3, #32]
 80045b8:	e007      	b.n	80045ca <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	1d7a      	adds	r2, r7, #5
 80045c0:	32ff      	adds	r2, #255	; 0xff
 80045c2:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2200      	movs	r2, #0
 80045c8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	643b      	str	r3, [r7, #64]	; 0x40
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	785b      	ldrb	r3, [r3, #1]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d000      	beq.n	80045d8 <USB_EPStartXfer+0x57c>
 80045d6:	e070      	b.n	80046ba <USB_EPStartXfer+0x65e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	63bb      	str	r3, [r7, #56]	; 0x38
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2250      	movs	r2, #80	; 0x50
 80045e0:	5a9b      	ldrh	r3, [r3, r2]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	001a      	movs	r2, r3
 80045e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e8:	189b      	adds	r3, r3, r2
 80045ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	00da      	lsls	r2, r3, #3
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f4:	18d3      	adds	r3, r2, r3
 80045f6:	4a6d      	ldr	r2, [pc, #436]	; (80047ac <USB_EPStartXfer+0x750>)
 80045f8:	4694      	mov	ip, r2
 80045fa:	4463      	add	r3, ip
 80045fc:	637b      	str	r3, [r7, #52]	; 0x34
 80045fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	b29b      	uxth	r3, r3
 8004604:	059b      	lsls	r3, r3, #22
 8004606:	0d9b      	lsrs	r3, r3, #22
 8004608:	b29a      	uxth	r2, r3
 800460a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800460c:	801a      	strh	r2, [r3, #0]
 800460e:	1d7b      	adds	r3, r7, #5
 8004610:	33ff      	adds	r3, #255	; 0xff
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b3e      	cmp	r3, #62	; 0x3e
 8004616:	d922      	bls.n	800465e <USB_EPStartXfer+0x602>
 8004618:	1d7b      	adds	r3, r7, #5
 800461a:	33ff      	adds	r3, #255	; 0xff
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	21f4      	movs	r1, #244	; 0xf4
 8004622:	187a      	adds	r2, r7, r1
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	1d7b      	adds	r3, r7, #5
 8004628:	33ff      	adds	r3, #255	; 0xff
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	221f      	movs	r2, #31
 800462e:	4013      	ands	r3, r2
 8004630:	d104      	bne.n	800463c <USB_EPStartXfer+0x5e0>
 8004632:	187b      	adds	r3, r7, r1
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3b01      	subs	r3, #1
 8004638:	187a      	adds	r2, r7, r1
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	b29a      	uxth	r2, r3
 8004642:	23f4      	movs	r3, #244	; 0xf4
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	b29b      	uxth	r3, r3
 800464a:	029b      	lsls	r3, r3, #10
 800464c:	b29b      	uxth	r3, r3
 800464e:	4313      	orrs	r3, r2
 8004650:	b29b      	uxth	r3, r3
 8004652:	4a55      	ldr	r2, [pc, #340]	; (80047a8 <USB_EPStartXfer+0x74c>)
 8004654:	4313      	orrs	r3, r2
 8004656:	b29a      	uxth	r2, r3
 8004658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465a:	801a      	strh	r2, [r3, #0]
 800465c:	e048      	b.n	80046f0 <USB_EPStartXfer+0x694>
 800465e:	1d7b      	adds	r3, r7, #5
 8004660:	33ff      	adds	r3, #255	; 0xff
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d108      	bne.n	800467a <USB_EPStartXfer+0x61e>
 8004668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	b29b      	uxth	r3, r3
 800466e:	4a4e      	ldr	r2, [pc, #312]	; (80047a8 <USB_EPStartXfer+0x74c>)
 8004670:	4313      	orrs	r3, r2
 8004672:	b29a      	uxth	r2, r3
 8004674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004676:	801a      	strh	r2, [r3, #0]
 8004678:	e03a      	b.n	80046f0 <USB_EPStartXfer+0x694>
 800467a:	1d7b      	adds	r3, r7, #5
 800467c:	33ff      	adds	r3, #255	; 0xff
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	085b      	lsrs	r3, r3, #1
 8004682:	21f4      	movs	r1, #244	; 0xf4
 8004684:	187a      	adds	r2, r7, r1
 8004686:	6013      	str	r3, [r2, #0]
 8004688:	1d7b      	adds	r3, r7, #5
 800468a:	33ff      	adds	r3, #255	; 0xff
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2201      	movs	r2, #1
 8004690:	4013      	ands	r3, r2
 8004692:	d004      	beq.n	800469e <USB_EPStartXfer+0x642>
 8004694:	187b      	adds	r3, r7, r1
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3301      	adds	r3, #1
 800469a:	187a      	adds	r2, r7, r1
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	23f4      	movs	r3, #244	; 0xf4
 80046a6:	18fb      	adds	r3, r7, r3
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	029b      	lsls	r3, r3, #10
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	4313      	orrs	r3, r2
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b6:	801a      	strh	r2, [r3, #0]
 80046b8:	e01a      	b.n	80046f0 <USB_EPStartXfer+0x694>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	785b      	ldrb	r3, [r3, #1]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d116      	bne.n	80046f0 <USB_EPStartXfer+0x694>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2250      	movs	r2, #80	; 0x50
 80046c6:	5a9b      	ldrh	r3, [r3, r2]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	001a      	movs	r2, r3
 80046cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ce:	189b      	adds	r3, r3, r2
 80046d0:	643b      	str	r3, [r7, #64]	; 0x40
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	00da      	lsls	r2, r3, #3
 80046d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046da:	18d3      	adds	r3, r2, r3
 80046dc:	4a33      	ldr	r2, [pc, #204]	; (80047ac <USB_EPStartXfer+0x750>)
 80046de:	4694      	mov	ip, r2
 80046e0:	4463      	add	r3, ip
 80046e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046e4:	1d7b      	adds	r3, r7, #5
 80046e6:	33ff      	adds	r3, #255	; 0xff
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80046f0:	2076      	movs	r0, #118	; 0x76
 80046f2:	183b      	adds	r3, r7, r0
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	8952      	ldrh	r2, [r2, #10]
 80046f8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6959      	ldr	r1, [r3, #20]
 80046fe:	1d7b      	adds	r3, r7, #5
 8004700:	33ff      	adds	r3, #255	; 0xff
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	b29c      	uxth	r4, r3
 8004706:	183b      	adds	r3, r7, r0
 8004708:	881a      	ldrh	r2, [r3, #0]
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	0023      	movs	r3, r4
 800470e:	f000 ff17 	bl	8005540 <USB_WritePMA>
 8004712:	e1b6      	b.n	8004a82 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	1d7a      	adds	r2, r7, #5
 800471a:	32ff      	adds	r2, #255	; 0xff
 800471c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	18d3      	adds	r3, r2, r3
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	b29a      	uxth	r2, r3
 800472c:	2062      	movs	r0, #98	; 0x62
 800472e:	183b      	adds	r3, r7, r0
 8004730:	491f      	ldr	r1, [pc, #124]	; (80047b0 <USB_EPStartXfer+0x754>)
 8004732:	400a      	ands	r2, r1
 8004734:	801a      	strh	r2, [r3, #0]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	18d3      	adds	r3, r2, r3
 8004740:	183a      	adds	r2, r7, r0
 8004742:	8812      	ldrh	r2, [r2, #0]
 8004744:	491b      	ldr	r1, [pc, #108]	; (80047b4 <USB_EPStartXfer+0x758>)
 8004746:	430a      	orrs	r2, r1
 8004748:	b292      	uxth	r2, r2
 800474a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2250      	movs	r2, #80	; 0x50
 8004754:	5a9b      	ldrh	r3, [r3, r2]
 8004756:	b29b      	uxth	r3, r3
 8004758:	001a      	movs	r2, r3
 800475a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800475c:	189b      	adds	r3, r3, r2
 800475e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	00da      	lsls	r2, r3, #3
 8004766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004768:	18d3      	adds	r3, r2, r3
 800476a:	4a0e      	ldr	r2, [pc, #56]	; (80047a4 <USB_EPStartXfer+0x748>)
 800476c:	4694      	mov	ip, r2
 800476e:	4463      	add	r3, ip
 8004770:	65bb      	str	r3, [r7, #88]	; 0x58
 8004772:	1d7b      	adds	r3, r7, #5
 8004774:	33ff      	adds	r3, #255	; 0xff
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	b29a      	uxth	r2, r3
 800477a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800477c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800477e:	2076      	movs	r0, #118	; 0x76
 8004780:	183b      	adds	r3, r7, r0
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	8912      	ldrh	r2, [r2, #8]
 8004786:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	6959      	ldr	r1, [r3, #20]
 800478c:	1d7b      	adds	r3, r7, #5
 800478e:	33ff      	adds	r3, #255	; 0xff
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	b29c      	uxth	r4, r3
 8004794:	183b      	adds	r3, r7, r0
 8004796:	881a      	ldrh	r2, [r3, #0]
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	0023      	movs	r3, r4
 800479c:	f000 fed0 	bl	8005540 <USB_WritePMA>
 80047a0:	e16f      	b.n	8004a82 <USB_EPStartXfer+0xa26>
 80047a2:	46c0      	nop			; (mov r8, r8)
 80047a4:	00000402 	.word	0x00000402
 80047a8:	ffff8000 	.word	0xffff8000
 80047ac:	00000406 	.word	0x00000406
 80047b0:	ffff8e8f 	.word	0xffff8e8f
 80047b4:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	6a1a      	ldr	r2, [r3, #32]
 80047bc:	1d7b      	adds	r3, r7, #5
 80047be:	33ff      	adds	r3, #255	; 0xff
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	1ad2      	subs	r2, r2, r3
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	18d3      	adds	r3, r2, r3
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	001a      	movs	r2, r3
 80047d8:	2340      	movs	r3, #64	; 0x40
 80047da:	4013      	ands	r3, r2
 80047dc:	d100      	bne.n	80047e0 <USB_EPStartXfer+0x784>
 80047de:	e0a4      	b.n	800492a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	673b      	str	r3, [r7, #112]	; 0x70
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	785b      	ldrb	r3, [r3, #1]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d000      	beq.n	80047ee <USB_EPStartXfer+0x792>
 80047ec:	e070      	b.n	80048d0 <USB_EPStartXfer+0x874>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2250      	movs	r2, #80	; 0x50
 80047f6:	5a9b      	ldrh	r3, [r3, r2]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	001a      	movs	r2, r3
 80047fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047fe:	189b      	adds	r3, r3, r2
 8004800:	66bb      	str	r3, [r7, #104]	; 0x68
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	00da      	lsls	r2, r3, #3
 8004808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800480a:	18d3      	adds	r3, r2, r3
 800480c:	4abc      	ldr	r2, [pc, #752]	; (8004b00 <USB_EPStartXfer+0xaa4>)
 800480e:	4694      	mov	ip, r2
 8004810:	4463      	add	r3, ip
 8004812:	667b      	str	r3, [r7, #100]	; 0x64
 8004814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	b29b      	uxth	r3, r3
 800481a:	059b      	lsls	r3, r3, #22
 800481c:	0d9b      	lsrs	r3, r3, #22
 800481e:	b29a      	uxth	r2, r3
 8004820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004822:	801a      	strh	r2, [r3, #0]
 8004824:	1d7b      	adds	r3, r7, #5
 8004826:	33ff      	adds	r3, #255	; 0xff
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b3e      	cmp	r3, #62	; 0x3e
 800482c:	d922      	bls.n	8004874 <USB_EPStartXfer+0x818>
 800482e:	1d7b      	adds	r3, r7, #5
 8004830:	33ff      	adds	r3, #255	; 0xff
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	095b      	lsrs	r3, r3, #5
 8004836:	21f0      	movs	r1, #240	; 0xf0
 8004838:	187a      	adds	r2, r7, r1
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	1d7b      	adds	r3, r7, #5
 800483e:	33ff      	adds	r3, #255	; 0xff
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	221f      	movs	r2, #31
 8004844:	4013      	ands	r3, r2
 8004846:	d104      	bne.n	8004852 <USB_EPStartXfer+0x7f6>
 8004848:	187b      	adds	r3, r7, r1
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3b01      	subs	r3, #1
 800484e:	187a      	adds	r2, r7, r1
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	b29a      	uxth	r2, r3
 8004858:	23f0      	movs	r3, #240	; 0xf0
 800485a:	18fb      	adds	r3, r7, r3
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	b29b      	uxth	r3, r3
 8004860:	029b      	lsls	r3, r3, #10
 8004862:	b29b      	uxth	r3, r3
 8004864:	4313      	orrs	r3, r2
 8004866:	b29b      	uxth	r3, r3
 8004868:	4aa6      	ldr	r2, [pc, #664]	; (8004b04 <USB_EPStartXfer+0xaa8>)
 800486a:	4313      	orrs	r3, r2
 800486c:	b29a      	uxth	r2, r3
 800486e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004870:	801a      	strh	r2, [r3, #0]
 8004872:	e048      	b.n	8004906 <USB_EPStartXfer+0x8aa>
 8004874:	1d7b      	adds	r3, r7, #5
 8004876:	33ff      	adds	r3, #255	; 0xff
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d108      	bne.n	8004890 <USB_EPStartXfer+0x834>
 800487e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	b29b      	uxth	r3, r3
 8004884:	4a9f      	ldr	r2, [pc, #636]	; (8004b04 <USB_EPStartXfer+0xaa8>)
 8004886:	4313      	orrs	r3, r2
 8004888:	b29a      	uxth	r2, r3
 800488a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800488c:	801a      	strh	r2, [r3, #0]
 800488e:	e03a      	b.n	8004906 <USB_EPStartXfer+0x8aa>
 8004890:	1d7b      	adds	r3, r7, #5
 8004892:	33ff      	adds	r3, #255	; 0xff
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	085b      	lsrs	r3, r3, #1
 8004898:	21f0      	movs	r1, #240	; 0xf0
 800489a:	187a      	adds	r2, r7, r1
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	1d7b      	adds	r3, r7, #5
 80048a0:	33ff      	adds	r3, #255	; 0xff
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2201      	movs	r2, #1
 80048a6:	4013      	ands	r3, r2
 80048a8:	d004      	beq.n	80048b4 <USB_EPStartXfer+0x858>
 80048aa:	187b      	adds	r3, r7, r1
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3301      	adds	r3, #1
 80048b0:	187a      	adds	r2, r7, r1
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	23f0      	movs	r3, #240	; 0xf0
 80048bc:	18fb      	adds	r3, r7, r3
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	029b      	lsls	r3, r3, #10
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	4313      	orrs	r3, r2
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048cc:	801a      	strh	r2, [r3, #0]
 80048ce:	e01a      	b.n	8004906 <USB_EPStartXfer+0x8aa>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	785b      	ldrb	r3, [r3, #1]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d116      	bne.n	8004906 <USB_EPStartXfer+0x8aa>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2250      	movs	r2, #80	; 0x50
 80048dc:	5a9b      	ldrh	r3, [r3, r2]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	001a      	movs	r2, r3
 80048e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048e4:	189b      	adds	r3, r3, r2
 80048e6:	673b      	str	r3, [r7, #112]	; 0x70
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	00da      	lsls	r2, r3, #3
 80048ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048f0:	18d3      	adds	r3, r2, r3
 80048f2:	4a83      	ldr	r2, [pc, #524]	; (8004b00 <USB_EPStartXfer+0xaa4>)
 80048f4:	4694      	mov	ip, r2
 80048f6:	4463      	add	r3, ip
 80048f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048fa:	1d7b      	adds	r3, r7, #5
 80048fc:	33ff      	adds	r3, #255	; 0xff
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	b29a      	uxth	r2, r3
 8004902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004904:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004906:	2076      	movs	r0, #118	; 0x76
 8004908:	183b      	adds	r3, r7, r0
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	8952      	ldrh	r2, [r2, #10]
 800490e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	6959      	ldr	r1, [r3, #20]
 8004914:	1d7b      	adds	r3, r7, #5
 8004916:	33ff      	adds	r3, #255	; 0xff
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	b29c      	uxth	r4, r3
 800491c:	183b      	adds	r3, r7, r0
 800491e:	881a      	ldrh	r2, [r3, #0]
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	0023      	movs	r3, r4
 8004924:	f000 fe0c 	bl	8005540 <USB_WritePMA>
 8004928:	e0ab      	b.n	8004a82 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	785b      	ldrb	r3, [r3, #1]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d000      	beq.n	8004934 <USB_EPStartXfer+0x8d8>
 8004932:	e070      	b.n	8004a16 <USB_EPStartXfer+0x9ba>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2250      	movs	r2, #80	; 0x50
 800493c:	5a9b      	ldrh	r3, [r3, r2]
 800493e:	b29b      	uxth	r3, r3
 8004940:	001a      	movs	r2, r3
 8004942:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004944:	189b      	adds	r3, r3, r2
 8004946:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	00da      	lsls	r2, r3, #3
 800494e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004950:	18d3      	adds	r3, r2, r3
 8004952:	4a6d      	ldr	r2, [pc, #436]	; (8004b08 <USB_EPStartXfer+0xaac>)
 8004954:	4694      	mov	ip, r2
 8004956:	4463      	add	r3, ip
 8004958:	67bb      	str	r3, [r7, #120]	; 0x78
 800495a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	b29b      	uxth	r3, r3
 8004960:	059b      	lsls	r3, r3, #22
 8004962:	0d9b      	lsrs	r3, r3, #22
 8004964:	b29a      	uxth	r2, r3
 8004966:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004968:	801a      	strh	r2, [r3, #0]
 800496a:	1d7b      	adds	r3, r7, #5
 800496c:	33ff      	adds	r3, #255	; 0xff
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b3e      	cmp	r3, #62	; 0x3e
 8004972:	d922      	bls.n	80049ba <USB_EPStartXfer+0x95e>
 8004974:	1d7b      	adds	r3, r7, #5
 8004976:	33ff      	adds	r3, #255	; 0xff
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	21ec      	movs	r1, #236	; 0xec
 800497e:	187a      	adds	r2, r7, r1
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	1d7b      	adds	r3, r7, #5
 8004984:	33ff      	adds	r3, #255	; 0xff
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	221f      	movs	r2, #31
 800498a:	4013      	ands	r3, r2
 800498c:	d104      	bne.n	8004998 <USB_EPStartXfer+0x93c>
 800498e:	187b      	adds	r3, r7, r1
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3b01      	subs	r3, #1
 8004994:	187a      	adds	r2, r7, r1
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b29a      	uxth	r2, r3
 800499e:	23ec      	movs	r3, #236	; 0xec
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	029b      	lsls	r3, r3, #10
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	4313      	orrs	r3, r2
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	4a55      	ldr	r2, [pc, #340]	; (8004b04 <USB_EPStartXfer+0xaa8>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049b6:	801a      	strh	r2, [r3, #0]
 80049b8:	e052      	b.n	8004a60 <USB_EPStartXfer+0xa04>
 80049ba:	1d7b      	adds	r3, r7, #5
 80049bc:	33ff      	adds	r3, #255	; 0xff
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d108      	bne.n	80049d6 <USB_EPStartXfer+0x97a>
 80049c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	4a4e      	ldr	r2, [pc, #312]	; (8004b04 <USB_EPStartXfer+0xaa8>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049d2:	801a      	strh	r2, [r3, #0]
 80049d4:	e044      	b.n	8004a60 <USB_EPStartXfer+0xa04>
 80049d6:	1d7b      	adds	r3, r7, #5
 80049d8:	33ff      	adds	r3, #255	; 0xff
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	085b      	lsrs	r3, r3, #1
 80049de:	21ec      	movs	r1, #236	; 0xec
 80049e0:	187a      	adds	r2, r7, r1
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	1d7b      	adds	r3, r7, #5
 80049e6:	33ff      	adds	r3, #255	; 0xff
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2201      	movs	r2, #1
 80049ec:	4013      	ands	r3, r2
 80049ee:	d004      	beq.n	80049fa <USB_EPStartXfer+0x99e>
 80049f0:	187b      	adds	r3, r7, r1
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3301      	adds	r3, #1
 80049f6:	187a      	adds	r2, r7, r1
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	23ec      	movs	r3, #236	; 0xec
 8004a02:	18fb      	adds	r3, r7, r3
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	029b      	lsls	r3, r3, #10
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a12:	801a      	strh	r2, [r3, #0]
 8004a14:	e024      	b.n	8004a60 <USB_EPStartXfer+0xa04>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	785b      	ldrb	r3, [r3, #1]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d120      	bne.n	8004a60 <USB_EPStartXfer+0xa04>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2184      	movs	r1, #132	; 0x84
 8004a22:	187a      	adds	r2, r7, r1
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2250      	movs	r2, #80	; 0x50
 8004a2a:	5a9b      	ldrh	r3, [r3, r2]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	001a      	movs	r2, r3
 8004a30:	187b      	adds	r3, r7, r1
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	189b      	adds	r3, r3, r2
 8004a36:	187a      	adds	r2, r7, r1
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	00da      	lsls	r2, r3, #3
 8004a40:	187b      	adds	r3, r7, r1
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	18d3      	adds	r3, r2, r3
 8004a46:	4a30      	ldr	r2, [pc, #192]	; (8004b08 <USB_EPStartXfer+0xaac>)
 8004a48:	4694      	mov	ip, r2
 8004a4a:	4463      	add	r3, ip
 8004a4c:	2180      	movs	r1, #128	; 0x80
 8004a4e:	187a      	adds	r2, r7, r1
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	1d7b      	adds	r3, r7, #5
 8004a54:	33ff      	adds	r3, #255	; 0xff
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	187b      	adds	r3, r7, r1
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004a60:	2076      	movs	r0, #118	; 0x76
 8004a62:	183b      	adds	r3, r7, r0
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	8912      	ldrh	r2, [r2, #8]
 8004a68:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	6959      	ldr	r1, [r3, #20]
 8004a6e:	1d7b      	adds	r3, r7, #5
 8004a70:	33ff      	adds	r3, #255	; 0xff
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	b29c      	uxth	r4, r3
 8004a76:	183b      	adds	r3, r7, r0
 8004a78:	881a      	ldrh	r2, [r3, #0]
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	0023      	movs	r3, r4
 8004a7e:	f000 fd5f 	bl	8005540 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	18d3      	adds	r3, r2, r3
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	200a      	movs	r0, #10
 8004a92:	183b      	adds	r3, r7, r0
 8004a94:	491d      	ldr	r1, [pc, #116]	; (8004b0c <USB_EPStartXfer+0xab0>)
 8004a96:	400a      	ands	r2, r1
 8004a98:	801a      	strh	r2, [r3, #0]
 8004a9a:	183b      	adds	r3, r7, r0
 8004a9c:	183a      	adds	r2, r7, r0
 8004a9e:	8812      	ldrh	r2, [r2, #0]
 8004aa0:	2110      	movs	r1, #16
 8004aa2:	404a      	eors	r2, r1
 8004aa4:	801a      	strh	r2, [r3, #0]
 8004aa6:	183b      	adds	r3, r7, r0
 8004aa8:	183a      	adds	r2, r7, r0
 8004aaa:	8812      	ldrh	r2, [r2, #0]
 8004aac:	2120      	movs	r1, #32
 8004aae:	404a      	eors	r2, r1
 8004ab0:	801a      	strh	r2, [r3, #0]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	18d3      	adds	r3, r2, r3
 8004abc:	183a      	adds	r2, r7, r0
 8004abe:	8812      	ldrh	r2, [r2, #0]
 8004ac0:	4913      	ldr	r1, [pc, #76]	; (8004b10 <USB_EPStartXfer+0xab4>)
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	b292      	uxth	r2, r2
 8004ac6:	801a      	strh	r2, [r3, #0]
 8004ac8:	f000 fbf4 	bl	80052b4 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	7b1b      	ldrb	r3, [r3, #12]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d000      	beq.n	8004ad6 <USB_EPStartXfer+0xa7a>
 8004ad4:	e0a9      	b.n	8004c2a <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	699a      	ldr	r2, [r3, #24]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d918      	bls.n	8004b14 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	1d7a      	adds	r2, r7, #5
 8004ae8:	32ff      	adds	r2, #255	; 0xff
 8004aea:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	699a      	ldr	r2, [r3, #24]
 8004af0:	1d7b      	adds	r3, r7, #5
 8004af2:	33ff      	adds	r3, #255	; 0xff
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	1ad2      	subs	r2, r2, r3
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	619a      	str	r2, [r3, #24]
 8004afc:	e012      	b.n	8004b24 <USB_EPStartXfer+0xac8>
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	00000406 	.word	0x00000406
 8004b04:	ffff8000 	.word	0xffff8000
 8004b08:	00000402 	.word	0x00000402
 8004b0c:	ffff8fbf 	.word	0xffff8fbf
 8004b10:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	1d7a      	adds	r2, r7, #5
 8004b1a:	32ff      	adds	r2, #255	; 0xff
 8004b1c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2200      	movs	r2, #0
 8004b22:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2190      	movs	r1, #144	; 0x90
 8004b28:	187a      	adds	r2, r7, r1
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2250      	movs	r2, #80	; 0x50
 8004b30:	5a9b      	ldrh	r3, [r3, r2]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	001a      	movs	r2, r3
 8004b36:	187b      	adds	r3, r7, r1
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	189b      	adds	r3, r3, r2
 8004b3c:	187a      	adds	r2, r7, r1
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	00da      	lsls	r2, r3, #3
 8004b46:	187b      	adds	r3, r7, r1
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	18d3      	adds	r3, r2, r3
 8004b4c:	4acf      	ldr	r2, [pc, #828]	; (8004e8c <USB_EPStartXfer+0xe30>)
 8004b4e:	4694      	mov	ip, r2
 8004b50:	4463      	add	r3, ip
 8004b52:	218c      	movs	r1, #140	; 0x8c
 8004b54:	187a      	adds	r2, r7, r1
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	187b      	adds	r3, r7, r1
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	059b      	lsls	r3, r3, #22
 8004b62:	0d9b      	lsrs	r3, r3, #22
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	187b      	adds	r3, r7, r1
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	801a      	strh	r2, [r3, #0]
 8004b6c:	1d7b      	adds	r3, r7, #5
 8004b6e:	33ff      	adds	r3, #255	; 0xff
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b3e      	cmp	r3, #62	; 0x3e
 8004b74:	d925      	bls.n	8004bc2 <USB_EPStartXfer+0xb66>
 8004b76:	1d7b      	adds	r3, r7, #5
 8004b78:	33ff      	adds	r3, #255	; 0xff
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	21e8      	movs	r1, #232	; 0xe8
 8004b80:	187a      	adds	r2, r7, r1
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	1d7b      	adds	r3, r7, #5
 8004b86:	33ff      	adds	r3, #255	; 0xff
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	221f      	movs	r2, #31
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d104      	bne.n	8004b9a <USB_EPStartXfer+0xb3e>
 8004b90:	187b      	adds	r3, r7, r1
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	187a      	adds	r2, r7, r1
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	218c      	movs	r1, #140	; 0x8c
 8004b9c:	187b      	adds	r3, r7, r1
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	23e8      	movs	r3, #232	; 0xe8
 8004ba6:	18fb      	adds	r3, r7, r3
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	029b      	lsls	r3, r3, #10
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	4ab6      	ldr	r2, [pc, #728]	; (8004e90 <USB_EPStartXfer+0xe34>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	187b      	adds	r3, r7, r1
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	801a      	strh	r2, [r3, #0]
 8004bc0:	e353      	b.n	800526a <USB_EPStartXfer+0x120e>
 8004bc2:	1d7b      	adds	r3, r7, #5
 8004bc4:	33ff      	adds	r3, #255	; 0xff
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10b      	bne.n	8004be4 <USB_EPStartXfer+0xb88>
 8004bcc:	218c      	movs	r1, #140	; 0x8c
 8004bce:	187b      	adds	r3, r7, r1
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	4aae      	ldr	r2, [pc, #696]	; (8004e90 <USB_EPStartXfer+0xe34>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	187b      	adds	r3, r7, r1
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	801a      	strh	r2, [r3, #0]
 8004be2:	e342      	b.n	800526a <USB_EPStartXfer+0x120e>
 8004be4:	1d7b      	adds	r3, r7, #5
 8004be6:	33ff      	adds	r3, #255	; 0xff
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	21e8      	movs	r1, #232	; 0xe8
 8004bee:	187a      	adds	r2, r7, r1
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	1d7b      	adds	r3, r7, #5
 8004bf4:	33ff      	adds	r3, #255	; 0xff
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d004      	beq.n	8004c08 <USB_EPStartXfer+0xbac>
 8004bfe:	187b      	adds	r3, r7, r1
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3301      	adds	r3, #1
 8004c04:	187a      	adds	r2, r7, r1
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	218c      	movs	r1, #140	; 0x8c
 8004c0a:	187b      	adds	r3, r7, r1
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	23e8      	movs	r3, #232	; 0xe8
 8004c14:	18fb      	adds	r3, r7, r3
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	029b      	lsls	r3, r3, #10
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	187b      	adds	r3, r7, r1
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	801a      	strh	r2, [r3, #0]
 8004c28:	e31f      	b.n	800526a <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	78db      	ldrb	r3, [r3, #3]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d000      	beq.n	8004c34 <USB_EPStartXfer+0xbd8>
 8004c32:	e191      	b.n	8004f58 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	785b      	ldrb	r3, [r3, #1]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d000      	beq.n	8004c3e <USB_EPStartXfer+0xbe2>
 8004c3c:	e07c      	b.n	8004d38 <USB_EPStartXfer+0xcdc>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	21ac      	movs	r1, #172	; 0xac
 8004c42:	187a      	adds	r2, r7, r1
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2250      	movs	r2, #80	; 0x50
 8004c4a:	5a9b      	ldrh	r3, [r3, r2]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	001a      	movs	r2, r3
 8004c50:	187b      	adds	r3, r7, r1
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	189b      	adds	r3, r3, r2
 8004c56:	187a      	adds	r2, r7, r1
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	00da      	lsls	r2, r3, #3
 8004c60:	187b      	adds	r3, r7, r1
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	18d3      	adds	r3, r2, r3
 8004c66:	4a8b      	ldr	r2, [pc, #556]	; (8004e94 <USB_EPStartXfer+0xe38>)
 8004c68:	4694      	mov	ip, r2
 8004c6a:	4463      	add	r3, ip
 8004c6c:	21a8      	movs	r1, #168	; 0xa8
 8004c6e:	187a      	adds	r2, r7, r1
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	187b      	adds	r3, r7, r1
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	059b      	lsls	r3, r3, #22
 8004c7c:	0d9b      	lsrs	r3, r3, #22
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	187b      	adds	r3, r7, r1
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	801a      	strh	r2, [r3, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	2b3e      	cmp	r3, #62	; 0x3e
 8004c8c:	d923      	bls.n	8004cd6 <USB_EPStartXfer+0xc7a>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	21e4      	movs	r1, #228	; 0xe4
 8004c96:	187a      	adds	r2, r7, r1
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	221f      	movs	r2, #31
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	d104      	bne.n	8004cae <USB_EPStartXfer+0xc52>
 8004ca4:	187b      	adds	r3, r7, r1
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	187a      	adds	r2, r7, r1
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	21a8      	movs	r1, #168	; 0xa8
 8004cb0:	187b      	adds	r3, r7, r1
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	23e4      	movs	r3, #228	; 0xe4
 8004cba:	18fb      	adds	r3, r7, r3
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	029b      	lsls	r3, r3, #10
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	4a71      	ldr	r2, [pc, #452]	; (8004e90 <USB_EPStartXfer+0xe34>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	187b      	adds	r3, r7, r1
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	801a      	strh	r2, [r3, #0]
 8004cd4:	e054      	b.n	8004d80 <USB_EPStartXfer+0xd24>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10b      	bne.n	8004cf6 <USB_EPStartXfer+0xc9a>
 8004cde:	21a8      	movs	r1, #168	; 0xa8
 8004ce0:	187b      	adds	r3, r7, r1
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	4a69      	ldr	r2, [pc, #420]	; (8004e90 <USB_EPStartXfer+0xe34>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	187b      	adds	r3, r7, r1
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	801a      	strh	r2, [r3, #0]
 8004cf4:	e044      	b.n	8004d80 <USB_EPStartXfer+0xd24>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	085b      	lsrs	r3, r3, #1
 8004cfc:	21e4      	movs	r1, #228	; 0xe4
 8004cfe:	187a      	adds	r2, r7, r1
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2201      	movs	r2, #1
 8004d08:	4013      	ands	r3, r2
 8004d0a:	d004      	beq.n	8004d16 <USB_EPStartXfer+0xcba>
 8004d0c:	187b      	adds	r3, r7, r1
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3301      	adds	r3, #1
 8004d12:	187a      	adds	r2, r7, r1
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	21a8      	movs	r1, #168	; 0xa8
 8004d18:	187b      	adds	r3, r7, r1
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	23e4      	movs	r3, #228	; 0xe4
 8004d22:	18fb      	adds	r3, r7, r3
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	029b      	lsls	r3, r3, #10
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	187b      	adds	r3, r7, r1
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	801a      	strh	r2, [r3, #0]
 8004d36:	e023      	b.n	8004d80 <USB_EPStartXfer+0xd24>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	785b      	ldrb	r3, [r3, #1]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d11f      	bne.n	8004d80 <USB_EPStartXfer+0xd24>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	21b4      	movs	r1, #180	; 0xb4
 8004d44:	187a      	adds	r2, r7, r1
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2250      	movs	r2, #80	; 0x50
 8004d4c:	5a9b      	ldrh	r3, [r3, r2]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	001a      	movs	r2, r3
 8004d52:	187b      	adds	r3, r7, r1
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	189b      	adds	r3, r3, r2
 8004d58:	187a      	adds	r2, r7, r1
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	00da      	lsls	r2, r3, #3
 8004d62:	187b      	adds	r3, r7, r1
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	18d3      	adds	r3, r2, r3
 8004d68:	4a4a      	ldr	r2, [pc, #296]	; (8004e94 <USB_EPStartXfer+0xe38>)
 8004d6a:	4694      	mov	ip, r2
 8004d6c:	4463      	add	r3, ip
 8004d6e:	21b0      	movs	r1, #176	; 0xb0
 8004d70:	187a      	adds	r2, r7, r1
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	187b      	adds	r3, r7, r1
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	801a      	strh	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	22a4      	movs	r2, #164	; 0xa4
 8004d84:	18ba      	adds	r2, r7, r2
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	785b      	ldrb	r3, [r3, #1]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d000      	beq.n	8004d92 <USB_EPStartXfer+0xd36>
 8004d90:	e082      	b.n	8004e98 <USB_EPStartXfer+0xe3c>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	219c      	movs	r1, #156	; 0x9c
 8004d96:	187a      	adds	r2, r7, r1
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2250      	movs	r2, #80	; 0x50
 8004d9e:	5a9b      	ldrh	r3, [r3, r2]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	001a      	movs	r2, r3
 8004da4:	187b      	adds	r3, r7, r1
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	189b      	adds	r3, r3, r2
 8004daa:	187a      	adds	r2, r7, r1
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	00da      	lsls	r2, r3, #3
 8004db4:	187b      	adds	r3, r7, r1
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	18d3      	adds	r3, r2, r3
 8004dba:	4a34      	ldr	r2, [pc, #208]	; (8004e8c <USB_EPStartXfer+0xe30>)
 8004dbc:	4694      	mov	ip, r2
 8004dbe:	4463      	add	r3, ip
 8004dc0:	2198      	movs	r1, #152	; 0x98
 8004dc2:	187a      	adds	r2, r7, r1
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	187b      	adds	r3, r7, r1
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	059b      	lsls	r3, r3, #22
 8004dd0:	0d9b      	lsrs	r3, r3, #22
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	187b      	adds	r3, r7, r1
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	801a      	strh	r2, [r3, #0]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b3e      	cmp	r3, #62	; 0x3e
 8004de0:	d923      	bls.n	8004e2a <USB_EPStartXfer+0xdce>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	21e0      	movs	r1, #224	; 0xe0
 8004dea:	187a      	adds	r2, r7, r1
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	221f      	movs	r2, #31
 8004df4:	4013      	ands	r3, r2
 8004df6:	d104      	bne.n	8004e02 <USB_EPStartXfer+0xda6>
 8004df8:	187b      	adds	r3, r7, r1
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	187a      	adds	r2, r7, r1
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	2198      	movs	r1, #152	; 0x98
 8004e04:	187b      	adds	r3, r7, r1
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	23e0      	movs	r3, #224	; 0xe0
 8004e0e:	18fb      	adds	r3, r7, r3
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	029b      	lsls	r3, r3, #10
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	4a1c      	ldr	r2, [pc, #112]	; (8004e90 <USB_EPStartXfer+0xe34>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	187b      	adds	r3, r7, r1
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	801a      	strh	r2, [r3, #0]
 8004e28:	e057      	b.n	8004eda <USB_EPStartXfer+0xe7e>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10b      	bne.n	8004e4a <USB_EPStartXfer+0xdee>
 8004e32:	2198      	movs	r1, #152	; 0x98
 8004e34:	187b      	adds	r3, r7, r1
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	4a14      	ldr	r2, [pc, #80]	; (8004e90 <USB_EPStartXfer+0xe34>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	187b      	adds	r3, r7, r1
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	801a      	strh	r2, [r3, #0]
 8004e48:	e047      	b.n	8004eda <USB_EPStartXfer+0xe7e>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	085b      	lsrs	r3, r3, #1
 8004e50:	21e0      	movs	r1, #224	; 0xe0
 8004e52:	187a      	adds	r2, r7, r1
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <USB_EPStartXfer+0xe0e>
 8004e60:	187b      	adds	r3, r7, r1
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3301      	adds	r3, #1
 8004e66:	187a      	adds	r2, r7, r1
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	2198      	movs	r1, #152	; 0x98
 8004e6c:	187b      	adds	r3, r7, r1
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	23e0      	movs	r3, #224	; 0xe0
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	029b      	lsls	r3, r3, #10
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	4313      	orrs	r3, r2
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	187b      	adds	r3, r7, r1
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	801a      	strh	r2, [r3, #0]
 8004e8a:	e026      	b.n	8004eda <USB_EPStartXfer+0xe7e>
 8004e8c:	00000406 	.word	0x00000406
 8004e90:	ffff8000 	.word	0xffff8000
 8004e94:	00000402 	.word	0x00000402
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	785b      	ldrb	r3, [r3, #1]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d11c      	bne.n	8004eda <USB_EPStartXfer+0xe7e>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2250      	movs	r2, #80	; 0x50
 8004ea4:	5a9b      	ldrh	r3, [r3, r2]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	001a      	movs	r2, r3
 8004eaa:	21a4      	movs	r1, #164	; 0xa4
 8004eac:	187b      	adds	r3, r7, r1
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	189b      	adds	r3, r3, r2
 8004eb2:	187a      	adds	r2, r7, r1
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	00da      	lsls	r2, r3, #3
 8004ebc:	187b      	adds	r3, r7, r1
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	18d3      	adds	r3, r2, r3
 8004ec2:	4ad2      	ldr	r2, [pc, #840]	; (800520c <USB_EPStartXfer+0x11b0>)
 8004ec4:	4694      	mov	ip, r2
 8004ec6:	4463      	add	r3, ip
 8004ec8:	21a0      	movs	r1, #160	; 0xa0
 8004eca:	187a      	adds	r2, r7, r1
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	187b      	adds	r3, r7, r1
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d100      	bne.n	8004ee4 <USB_EPStartXfer+0xe88>
 8004ee2:	e1c2      	b.n	800526a <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	18d2      	adds	r2, r2, r3
 8004eee:	2196      	movs	r1, #150	; 0x96
 8004ef0:	187b      	adds	r3, r7, r1
 8004ef2:	8812      	ldrh	r2, [r2, #0]
 8004ef4:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004ef6:	187b      	adds	r3, r7, r1
 8004ef8:	881a      	ldrh	r2, [r3, #0]
 8004efa:	2380      	movs	r3, #128	; 0x80
 8004efc:	01db      	lsls	r3, r3, #7
 8004efe:	4013      	ands	r3, r2
 8004f00:	d004      	beq.n	8004f0c <USB_EPStartXfer+0xeb0>
 8004f02:	187b      	adds	r3, r7, r1
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	2240      	movs	r2, #64	; 0x40
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d10d      	bne.n	8004f28 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f0c:	2196      	movs	r1, #150	; 0x96
 8004f0e:	187b      	adds	r3, r7, r1
 8004f10:	881a      	ldrh	r2, [r3, #0]
 8004f12:	2380      	movs	r3, #128	; 0x80
 8004f14:	01db      	lsls	r3, r3, #7
 8004f16:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f18:	d000      	beq.n	8004f1c <USB_EPStartXfer+0xec0>
 8004f1a:	e1a6      	b.n	800526a <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f1c:	187b      	adds	r3, r7, r1
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	2240      	movs	r2, #64	; 0x40
 8004f22:	4013      	ands	r3, r2
 8004f24:	d000      	beq.n	8004f28 <USB_EPStartXfer+0xecc>
 8004f26:	e1a0      	b.n	800526a <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	18d3      	adds	r3, r2, r3
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	2094      	movs	r0, #148	; 0x94
 8004f38:	183b      	adds	r3, r7, r0
 8004f3a:	49b5      	ldr	r1, [pc, #724]	; (8005210 <USB_EPStartXfer+0x11b4>)
 8004f3c:	400a      	ands	r2, r1
 8004f3e:	801a      	strh	r2, [r3, #0]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	18d3      	adds	r3, r2, r3
 8004f4a:	183a      	adds	r2, r7, r0
 8004f4c:	8812      	ldrh	r2, [r2, #0]
 8004f4e:	49b1      	ldr	r1, [pc, #708]	; (8005214 <USB_EPStartXfer+0x11b8>)
 8004f50:	430a      	orrs	r2, r1
 8004f52:	b292      	uxth	r2, r2
 8004f54:	801a      	strh	r2, [r3, #0]
 8004f56:	e188      	b.n	800526a <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	78db      	ldrb	r3, [r3, #3]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d000      	beq.n	8004f62 <USB_EPStartXfer+0xf06>
 8004f60:	e181      	b.n	8005266 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d90d      	bls.n	8004f8a <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	1d7a      	adds	r2, r7, #5
 8004f74:	32ff      	adds	r2, #255	; 0xff
 8004f76:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	699a      	ldr	r2, [r3, #24]
 8004f7c:	1d7b      	adds	r3, r7, #5
 8004f7e:	33ff      	adds	r3, #255	; 0xff
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	1ad2      	subs	r2, r2, r3
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	619a      	str	r2, [r3, #24]
 8004f88:	e007      	b.n	8004f9a <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	1d7a      	adds	r2, r7, #5
 8004f90:	32ff      	adds	r2, #255	; 0xff
 8004f92:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2200      	movs	r2, #0
 8004f98:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d000      	beq.n	8004fa4 <USB_EPStartXfer+0xf48>
 8004fa2:	e082      	b.n	80050aa <USB_EPStartXfer+0x104e>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	21cc      	movs	r1, #204	; 0xcc
 8004fa8:	187a      	adds	r2, r7, r1
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2250      	movs	r2, #80	; 0x50
 8004fb0:	5a9b      	ldrh	r3, [r3, r2]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	001a      	movs	r2, r3
 8004fb6:	187b      	adds	r3, r7, r1
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	189b      	adds	r3, r3, r2
 8004fbc:	187a      	adds	r2, r7, r1
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	00da      	lsls	r2, r3, #3
 8004fc6:	187b      	adds	r3, r7, r1
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	18d3      	adds	r3, r2, r3
 8004fcc:	4a92      	ldr	r2, [pc, #584]	; (8005218 <USB_EPStartXfer+0x11bc>)
 8004fce:	4694      	mov	ip, r2
 8004fd0:	4463      	add	r3, ip
 8004fd2:	21c8      	movs	r1, #200	; 0xc8
 8004fd4:	187a      	adds	r2, r7, r1
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	187b      	adds	r3, r7, r1
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	059b      	lsls	r3, r3, #22
 8004fe2:	0d9b      	lsrs	r3, r3, #22
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	187b      	adds	r3, r7, r1
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	801a      	strh	r2, [r3, #0]
 8004fec:	1d7b      	adds	r3, r7, #5
 8004fee:	33ff      	adds	r3, #255	; 0xff
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b3e      	cmp	r3, #62	; 0x3e
 8004ff4:	d925      	bls.n	8005042 <USB_EPStartXfer+0xfe6>
 8004ff6:	1d7b      	adds	r3, r7, #5
 8004ff8:	33ff      	adds	r3, #255	; 0xff
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	21dc      	movs	r1, #220	; 0xdc
 8005000:	187a      	adds	r2, r7, r1
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	1d7b      	adds	r3, r7, #5
 8005006:	33ff      	adds	r3, #255	; 0xff
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	221f      	movs	r2, #31
 800500c:	4013      	ands	r3, r2
 800500e:	d104      	bne.n	800501a <USB_EPStartXfer+0xfbe>
 8005010:	187b      	adds	r3, r7, r1
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3b01      	subs	r3, #1
 8005016:	187a      	adds	r2, r7, r1
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	21c8      	movs	r1, #200	; 0xc8
 800501c:	187b      	adds	r3, r7, r1
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	b29a      	uxth	r2, r3
 8005024:	23dc      	movs	r3, #220	; 0xdc
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	b29b      	uxth	r3, r3
 800502c:	029b      	lsls	r3, r3, #10
 800502e:	b29b      	uxth	r3, r3
 8005030:	4313      	orrs	r3, r2
 8005032:	b29b      	uxth	r3, r3
 8005034:	4a79      	ldr	r2, [pc, #484]	; (800521c <USB_EPStartXfer+0x11c0>)
 8005036:	4313      	orrs	r3, r2
 8005038:	b29a      	uxth	r2, r3
 800503a:	187b      	adds	r3, r7, r1
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	801a      	strh	r2, [r3, #0]
 8005040:	e058      	b.n	80050f4 <USB_EPStartXfer+0x1098>
 8005042:	1d7b      	adds	r3, r7, #5
 8005044:	33ff      	adds	r3, #255	; 0xff
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10b      	bne.n	8005064 <USB_EPStartXfer+0x1008>
 800504c:	21c8      	movs	r1, #200	; 0xc8
 800504e:	187b      	adds	r3, r7, r1
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	b29b      	uxth	r3, r3
 8005056:	4a71      	ldr	r2, [pc, #452]	; (800521c <USB_EPStartXfer+0x11c0>)
 8005058:	4313      	orrs	r3, r2
 800505a:	b29a      	uxth	r2, r3
 800505c:	187b      	adds	r3, r7, r1
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	801a      	strh	r2, [r3, #0]
 8005062:	e047      	b.n	80050f4 <USB_EPStartXfer+0x1098>
 8005064:	1d7b      	adds	r3, r7, #5
 8005066:	33ff      	adds	r3, #255	; 0xff
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	21dc      	movs	r1, #220	; 0xdc
 800506e:	187a      	adds	r2, r7, r1
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	1d7b      	adds	r3, r7, #5
 8005074:	33ff      	adds	r3, #255	; 0xff
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2201      	movs	r2, #1
 800507a:	4013      	ands	r3, r2
 800507c:	d004      	beq.n	8005088 <USB_EPStartXfer+0x102c>
 800507e:	187b      	adds	r3, r7, r1
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3301      	adds	r3, #1
 8005084:	187a      	adds	r2, r7, r1
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	21c8      	movs	r1, #200	; 0xc8
 800508a:	187b      	adds	r3, r7, r1
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29a      	uxth	r2, r3
 8005092:	23dc      	movs	r3, #220	; 0xdc
 8005094:	18fb      	adds	r3, r7, r3
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	b29b      	uxth	r3, r3
 800509a:	029b      	lsls	r3, r3, #10
 800509c:	b29b      	uxth	r3, r3
 800509e:	4313      	orrs	r3, r2
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	187b      	adds	r3, r7, r1
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	801a      	strh	r2, [r3, #0]
 80050a8:	e024      	b.n	80050f4 <USB_EPStartXfer+0x1098>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	785b      	ldrb	r3, [r3, #1]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d120      	bne.n	80050f4 <USB_EPStartXfer+0x1098>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	21d4      	movs	r1, #212	; 0xd4
 80050b6:	187a      	adds	r2, r7, r1
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2250      	movs	r2, #80	; 0x50
 80050be:	5a9b      	ldrh	r3, [r3, r2]
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	001a      	movs	r2, r3
 80050c4:	187b      	adds	r3, r7, r1
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	189b      	adds	r3, r3, r2
 80050ca:	187a      	adds	r2, r7, r1
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	00da      	lsls	r2, r3, #3
 80050d4:	187b      	adds	r3, r7, r1
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	18d3      	adds	r3, r2, r3
 80050da:	4a4f      	ldr	r2, [pc, #316]	; (8005218 <USB_EPStartXfer+0x11bc>)
 80050dc:	4694      	mov	ip, r2
 80050de:	4463      	add	r3, ip
 80050e0:	21d0      	movs	r1, #208	; 0xd0
 80050e2:	187a      	adds	r2, r7, r1
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	1d7b      	adds	r3, r7, #5
 80050e8:	33ff      	adds	r3, #255	; 0xff
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	187b      	adds	r3, r7, r1
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	801a      	strh	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	22c4      	movs	r2, #196	; 0xc4
 80050f8:	18ba      	adds	r2, r7, r2
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	785b      	ldrb	r3, [r3, #1]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d000      	beq.n	8005106 <USB_EPStartXfer+0x10aa>
 8005104:	e08c      	b.n	8005220 <USB_EPStartXfer+0x11c4>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	21bc      	movs	r1, #188	; 0xbc
 800510a:	187a      	adds	r2, r7, r1
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2250      	movs	r2, #80	; 0x50
 8005112:	5a9b      	ldrh	r3, [r3, r2]
 8005114:	b29b      	uxth	r3, r3
 8005116:	001a      	movs	r2, r3
 8005118:	187b      	adds	r3, r7, r1
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	189b      	adds	r3, r3, r2
 800511e:	187a      	adds	r2, r7, r1
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	00da      	lsls	r2, r3, #3
 8005128:	187b      	adds	r3, r7, r1
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	18d3      	adds	r3, r2, r3
 800512e:	4a37      	ldr	r2, [pc, #220]	; (800520c <USB_EPStartXfer+0x11b0>)
 8005130:	4694      	mov	ip, r2
 8005132:	4463      	add	r3, ip
 8005134:	21b8      	movs	r1, #184	; 0xb8
 8005136:	187a      	adds	r2, r7, r1
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	187b      	adds	r3, r7, r1
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	b29b      	uxth	r3, r3
 8005142:	059b      	lsls	r3, r3, #22
 8005144:	0d9b      	lsrs	r3, r3, #22
 8005146:	b29a      	uxth	r2, r3
 8005148:	187b      	adds	r3, r7, r1
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	801a      	strh	r2, [r3, #0]
 800514e:	1d7b      	adds	r3, r7, #5
 8005150:	33ff      	adds	r3, #255	; 0xff
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b3e      	cmp	r3, #62	; 0x3e
 8005156:	d925      	bls.n	80051a4 <USB_EPStartXfer+0x1148>
 8005158:	1d7b      	adds	r3, r7, #5
 800515a:	33ff      	adds	r3, #255	; 0xff
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	21d8      	movs	r1, #216	; 0xd8
 8005162:	187a      	adds	r2, r7, r1
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	1d7b      	adds	r3, r7, #5
 8005168:	33ff      	adds	r3, #255	; 0xff
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	221f      	movs	r2, #31
 800516e:	4013      	ands	r3, r2
 8005170:	d104      	bne.n	800517c <USB_EPStartXfer+0x1120>
 8005172:	187b      	adds	r3, r7, r1
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3b01      	subs	r3, #1
 8005178:	187a      	adds	r2, r7, r1
 800517a:	6013      	str	r3, [r2, #0]
 800517c:	21b8      	movs	r1, #184	; 0xb8
 800517e:	187b      	adds	r3, r7, r1
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	b29a      	uxth	r2, r3
 8005186:	23d8      	movs	r3, #216	; 0xd8
 8005188:	18fb      	adds	r3, r7, r3
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	b29b      	uxth	r3, r3
 800518e:	029b      	lsls	r3, r3, #10
 8005190:	b29b      	uxth	r3, r3
 8005192:	4313      	orrs	r3, r2
 8005194:	b29b      	uxth	r3, r3
 8005196:	4a21      	ldr	r2, [pc, #132]	; (800521c <USB_EPStartXfer+0x11c0>)
 8005198:	4313      	orrs	r3, r2
 800519a:	b29a      	uxth	r2, r3
 800519c:	187b      	adds	r3, r7, r1
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	801a      	strh	r2, [r3, #0]
 80051a2:	e062      	b.n	800526a <USB_EPStartXfer+0x120e>
 80051a4:	1d7b      	adds	r3, r7, #5
 80051a6:	33ff      	adds	r3, #255	; 0xff
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10b      	bne.n	80051c6 <USB_EPStartXfer+0x116a>
 80051ae:	21b8      	movs	r1, #184	; 0xb8
 80051b0:	187b      	adds	r3, r7, r1
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	4a18      	ldr	r2, [pc, #96]	; (800521c <USB_EPStartXfer+0x11c0>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	b29a      	uxth	r2, r3
 80051be:	187b      	adds	r3, r7, r1
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	801a      	strh	r2, [r3, #0]
 80051c4:	e051      	b.n	800526a <USB_EPStartXfer+0x120e>
 80051c6:	1d7b      	adds	r3, r7, #5
 80051c8:	33ff      	adds	r3, #255	; 0xff
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	085b      	lsrs	r3, r3, #1
 80051ce:	21d8      	movs	r1, #216	; 0xd8
 80051d0:	187a      	adds	r2, r7, r1
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	1d7b      	adds	r3, r7, #5
 80051d6:	33ff      	adds	r3, #255	; 0xff
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2201      	movs	r2, #1
 80051dc:	4013      	ands	r3, r2
 80051de:	d004      	beq.n	80051ea <USB_EPStartXfer+0x118e>
 80051e0:	187b      	adds	r3, r7, r1
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3301      	adds	r3, #1
 80051e6:	187a      	adds	r2, r7, r1
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	21b8      	movs	r1, #184	; 0xb8
 80051ec:	187b      	adds	r3, r7, r1
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	23d8      	movs	r3, #216	; 0xd8
 80051f6:	18fb      	adds	r3, r7, r3
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	029b      	lsls	r3, r3, #10
 80051fe:	b29b      	uxth	r3, r3
 8005200:	4313      	orrs	r3, r2
 8005202:	b29a      	uxth	r2, r3
 8005204:	187b      	adds	r3, r7, r1
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	801a      	strh	r2, [r3, #0]
 800520a:	e02e      	b.n	800526a <USB_EPStartXfer+0x120e>
 800520c:	00000406 	.word	0x00000406
 8005210:	ffff8f8f 	.word	0xffff8f8f
 8005214:	ffff80c0 	.word	0xffff80c0
 8005218:	00000402 	.word	0x00000402
 800521c:	ffff8000 	.word	0xffff8000
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	785b      	ldrb	r3, [r3, #1]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d120      	bne.n	800526a <USB_EPStartXfer+0x120e>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2250      	movs	r2, #80	; 0x50
 800522c:	5a9b      	ldrh	r3, [r3, r2]
 800522e:	b29b      	uxth	r3, r3
 8005230:	001a      	movs	r2, r3
 8005232:	21c4      	movs	r1, #196	; 0xc4
 8005234:	187b      	adds	r3, r7, r1
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	189b      	adds	r3, r3, r2
 800523a:	187a      	adds	r2, r7, r1
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	00da      	lsls	r2, r3, #3
 8005244:	187b      	adds	r3, r7, r1
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	18d3      	adds	r3, r2, r3
 800524a:	4a1d      	ldr	r2, [pc, #116]	; (80052c0 <USB_EPStartXfer+0x1264>)
 800524c:	4694      	mov	ip, r2
 800524e:	4463      	add	r3, ip
 8005250:	21c0      	movs	r1, #192	; 0xc0
 8005252:	187a      	adds	r2, r7, r1
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	1d7b      	adds	r3, r7, #5
 8005258:	33ff      	adds	r3, #255	; 0xff
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	b29a      	uxth	r2, r3
 800525e:	187b      	adds	r3, r7, r1
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	801a      	strh	r2, [r3, #0]
 8005264:	e001      	b.n	800526a <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e025      	b.n	80052b6 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	18d3      	adds	r3, r2, r3
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	b29a      	uxth	r2, r3
 8005278:	208a      	movs	r0, #138	; 0x8a
 800527a:	183b      	adds	r3, r7, r0
 800527c:	4911      	ldr	r1, [pc, #68]	; (80052c4 <USB_EPStartXfer+0x1268>)
 800527e:	400a      	ands	r2, r1
 8005280:	801a      	strh	r2, [r3, #0]
 8005282:	183b      	adds	r3, r7, r0
 8005284:	183a      	adds	r2, r7, r0
 8005286:	8812      	ldrh	r2, [r2, #0]
 8005288:	2180      	movs	r1, #128	; 0x80
 800528a:	0149      	lsls	r1, r1, #5
 800528c:	404a      	eors	r2, r1
 800528e:	801a      	strh	r2, [r3, #0]
 8005290:	183b      	adds	r3, r7, r0
 8005292:	183a      	adds	r2, r7, r0
 8005294:	8812      	ldrh	r2, [r2, #0]
 8005296:	2180      	movs	r1, #128	; 0x80
 8005298:	0189      	lsls	r1, r1, #6
 800529a:	404a      	eors	r2, r1
 800529c:	801a      	strh	r2, [r3, #0]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	18d3      	adds	r3, r2, r3
 80052a8:	183a      	adds	r2, r7, r0
 80052aa:	8812      	ldrh	r2, [r2, #0]
 80052ac:	4906      	ldr	r1, [pc, #24]	; (80052c8 <USB_EPStartXfer+0x126c>)
 80052ae:	430a      	orrs	r2, r1
 80052b0:	b292      	uxth	r2, r2
 80052b2:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	0018      	movs	r0, r3
 80052b8:	46bd      	mov	sp, r7
 80052ba:	b043      	add	sp, #268	; 0x10c
 80052bc:	bd90      	pop	{r4, r7, pc}
 80052be:	46c0      	nop			; (mov r8, r8)
 80052c0:	00000406 	.word	0x00000406
 80052c4:	ffffbf8f 	.word	0xffffbf8f
 80052c8:	ffff8080 	.word	0xffff8080

080052cc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	785b      	ldrb	r3, [r3, #1]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d01d      	beq.n	800531a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	18d3      	adds	r3, r2, r3
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	200c      	movs	r0, #12
 80052ee:	183b      	adds	r3, r7, r0
 80052f0:	491b      	ldr	r1, [pc, #108]	; (8005360 <USB_EPSetStall+0x94>)
 80052f2:	400a      	ands	r2, r1
 80052f4:	801a      	strh	r2, [r3, #0]
 80052f6:	183b      	adds	r3, r7, r0
 80052f8:	183a      	adds	r2, r7, r0
 80052fa:	8812      	ldrh	r2, [r2, #0]
 80052fc:	2110      	movs	r1, #16
 80052fe:	404a      	eors	r2, r1
 8005300:	801a      	strh	r2, [r3, #0]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	18d3      	adds	r3, r2, r3
 800530c:	183a      	adds	r2, r7, r0
 800530e:	8812      	ldrh	r2, [r2, #0]
 8005310:	4914      	ldr	r1, [pc, #80]	; (8005364 <USB_EPSetStall+0x98>)
 8005312:	430a      	orrs	r2, r1
 8005314:	b292      	uxth	r2, r2
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	e01d      	b.n	8005356 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	18d3      	adds	r3, r2, r3
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29a      	uxth	r2, r3
 8005328:	200e      	movs	r0, #14
 800532a:	183b      	adds	r3, r7, r0
 800532c:	490e      	ldr	r1, [pc, #56]	; (8005368 <USB_EPSetStall+0x9c>)
 800532e:	400a      	ands	r2, r1
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	183b      	adds	r3, r7, r0
 8005334:	183a      	adds	r2, r7, r0
 8005336:	8812      	ldrh	r2, [r2, #0]
 8005338:	2180      	movs	r1, #128	; 0x80
 800533a:	0149      	lsls	r1, r1, #5
 800533c:	404a      	eors	r2, r1
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	18d3      	adds	r3, r2, r3
 800534a:	183a      	adds	r2, r7, r0
 800534c:	8812      	ldrh	r2, [r2, #0]
 800534e:	4905      	ldr	r1, [pc, #20]	; (8005364 <USB_EPSetStall+0x98>)
 8005350:	430a      	orrs	r2, r1
 8005352:	b292      	uxth	r2, r2
 8005354:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	0018      	movs	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	b004      	add	sp, #16
 800535e:	bd80      	pop	{r7, pc}
 8005360:	ffff8fbf 	.word	0xffff8fbf
 8005364:	ffff8080 	.word	0xffff8080
 8005368:	ffffbf8f 	.word	0xffffbf8f

0800536c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	7b1b      	ldrb	r3, [r3, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d000      	beq.n	8005380 <USB_EPClearStall+0x14>
 800537e:	e095      	b.n	80054ac <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	785b      	ldrb	r3, [r3, #1]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d046      	beq.n	8005416 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	18d2      	adds	r2, r2, r3
 8005392:	2110      	movs	r1, #16
 8005394:	187b      	adds	r3, r7, r1
 8005396:	8812      	ldrh	r2, [r2, #0]
 8005398:	801a      	strh	r2, [r3, #0]
 800539a:	187b      	adds	r3, r7, r1
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	2240      	movs	r2, #64	; 0x40
 80053a0:	4013      	ands	r3, r2
 80053a2:	d016      	beq.n	80053d2 <USB_EPClearStall+0x66>
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	18d3      	adds	r3, r2, r3
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	200e      	movs	r0, #14
 80053b4:	183b      	adds	r3, r7, r0
 80053b6:	4940      	ldr	r1, [pc, #256]	; (80054b8 <USB_EPClearStall+0x14c>)
 80053b8:	400a      	ands	r2, r1
 80053ba:	801a      	strh	r2, [r3, #0]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	18d3      	adds	r3, r2, r3
 80053c6:	183a      	adds	r2, r7, r0
 80053c8:	8812      	ldrh	r2, [r2, #0]
 80053ca:	493c      	ldr	r1, [pc, #240]	; (80054bc <USB_EPClearStall+0x150>)
 80053cc:	430a      	orrs	r2, r1
 80053ce:	b292      	uxth	r2, r2
 80053d0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	78db      	ldrb	r3, [r3, #3]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d068      	beq.n	80054ac <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	18d3      	adds	r3, r2, r3
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	200c      	movs	r0, #12
 80053ea:	183b      	adds	r3, r7, r0
 80053ec:	4934      	ldr	r1, [pc, #208]	; (80054c0 <USB_EPClearStall+0x154>)
 80053ee:	400a      	ands	r2, r1
 80053f0:	801a      	strh	r2, [r3, #0]
 80053f2:	183b      	adds	r3, r7, r0
 80053f4:	183a      	adds	r2, r7, r0
 80053f6:	8812      	ldrh	r2, [r2, #0]
 80053f8:	2120      	movs	r1, #32
 80053fa:	404a      	eors	r2, r1
 80053fc:	801a      	strh	r2, [r3, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	18d3      	adds	r3, r2, r3
 8005408:	183a      	adds	r2, r7, r0
 800540a:	8812      	ldrh	r2, [r2, #0]
 800540c:	492d      	ldr	r1, [pc, #180]	; (80054c4 <USB_EPClearStall+0x158>)
 800540e:	430a      	orrs	r2, r1
 8005410:	b292      	uxth	r2, r2
 8005412:	801a      	strh	r2, [r3, #0]
 8005414:	e04a      	b.n	80054ac <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	18d2      	adds	r2, r2, r3
 8005420:	2116      	movs	r1, #22
 8005422:	187b      	adds	r3, r7, r1
 8005424:	8812      	ldrh	r2, [r2, #0]
 8005426:	801a      	strh	r2, [r3, #0]
 8005428:	187b      	adds	r3, r7, r1
 800542a:	881a      	ldrh	r2, [r3, #0]
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	01db      	lsls	r3, r3, #7
 8005430:	4013      	ands	r3, r2
 8005432:	d016      	beq.n	8005462 <USB_EPClearStall+0xf6>
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	18d3      	adds	r3, r2, r3
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	b29a      	uxth	r2, r3
 8005442:	2014      	movs	r0, #20
 8005444:	183b      	adds	r3, r7, r0
 8005446:	491c      	ldr	r1, [pc, #112]	; (80054b8 <USB_EPClearStall+0x14c>)
 8005448:	400a      	ands	r2, r1
 800544a:	801a      	strh	r2, [r3, #0]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	18d3      	adds	r3, r2, r3
 8005456:	183a      	adds	r2, r7, r0
 8005458:	8812      	ldrh	r2, [r2, #0]
 800545a:	491b      	ldr	r1, [pc, #108]	; (80054c8 <USB_EPClearStall+0x15c>)
 800545c:	430a      	orrs	r2, r1
 800545e:	b292      	uxth	r2, r2
 8005460:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	18d3      	adds	r3, r2, r3
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	b29a      	uxth	r2, r3
 8005470:	2012      	movs	r0, #18
 8005472:	183b      	adds	r3, r7, r0
 8005474:	4915      	ldr	r1, [pc, #84]	; (80054cc <USB_EPClearStall+0x160>)
 8005476:	400a      	ands	r2, r1
 8005478:	801a      	strh	r2, [r3, #0]
 800547a:	183b      	adds	r3, r7, r0
 800547c:	183a      	adds	r2, r7, r0
 800547e:	8812      	ldrh	r2, [r2, #0]
 8005480:	2180      	movs	r1, #128	; 0x80
 8005482:	0149      	lsls	r1, r1, #5
 8005484:	404a      	eors	r2, r1
 8005486:	801a      	strh	r2, [r3, #0]
 8005488:	183b      	adds	r3, r7, r0
 800548a:	183a      	adds	r2, r7, r0
 800548c:	8812      	ldrh	r2, [r2, #0]
 800548e:	2180      	movs	r1, #128	; 0x80
 8005490:	0189      	lsls	r1, r1, #6
 8005492:	404a      	eors	r2, r1
 8005494:	801a      	strh	r2, [r3, #0]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	18d3      	adds	r3, r2, r3
 80054a0:	183a      	adds	r2, r7, r0
 80054a2:	8812      	ldrh	r2, [r2, #0]
 80054a4:	4907      	ldr	r1, [pc, #28]	; (80054c4 <USB_EPClearStall+0x158>)
 80054a6:	430a      	orrs	r2, r1
 80054a8:	b292      	uxth	r2, r2
 80054aa:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	0018      	movs	r0, r3
 80054b0:	46bd      	mov	sp, r7
 80054b2:	b006      	add	sp, #24
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	ffff8f8f 	.word	0xffff8f8f
 80054bc:	ffff80c0 	.word	0xffff80c0
 80054c0:	ffff8fbf 	.word	0xffff8fbf
 80054c4:	ffff8080 	.word	0xffff8080
 80054c8:	ffffc080 	.word	0xffffc080
 80054cc:	ffffbf8f 	.word	0xffffbf8f

080054d0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	000a      	movs	r2, r1
 80054da:	1cfb      	adds	r3, r7, #3
 80054dc:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80054de:	1cfb      	adds	r3, r7, #3
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d103      	bne.n	80054ee <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	224c      	movs	r2, #76	; 0x4c
 80054ea:	2180      	movs	r1, #128	; 0x80
 80054ec:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	0018      	movs	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b002      	add	sp, #8
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2258      	movs	r2, #88	; 0x58
 8005504:	5a9b      	ldrh	r3, [r3, r2]
 8005506:	b29b      	uxth	r3, r3
 8005508:	4a05      	ldr	r2, [pc, #20]	; (8005520 <USB_DevConnect+0x28>)
 800550a:	4313      	orrs	r3, r2
 800550c:	b299      	uxth	r1, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2258      	movs	r2, #88	; 0x58
 8005512:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	0018      	movs	r0, r3
 8005518:	46bd      	mov	sp, r7
 800551a:	b002      	add	sp, #8
 800551c:	bd80      	pop	{r7, pc}
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	ffff8000 	.word	0xffff8000

08005524 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2244      	movs	r2, #68	; 0x44
 8005530:	5a9b      	ldrh	r3, [r3, r2]
 8005532:	b29b      	uxth	r3, r3
 8005534:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005536:	68fb      	ldr	r3, [r7, #12]
}
 8005538:	0018      	movs	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	b004      	add	sp, #16
 800553e:	bd80      	pop	{r7, pc}

08005540 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08a      	sub	sp, #40	; 0x28
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	0019      	movs	r1, r3
 800554c:	1dbb      	adds	r3, r7, #6
 800554e:	801a      	strh	r2, [r3, #0]
 8005550:	1d3b      	adds	r3, r7, #4
 8005552:	1c0a      	adds	r2, r1, #0
 8005554:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005556:	1d3b      	adds	r3, r7, #4
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	3301      	adds	r3, #1
 800555c:	085b      	lsrs	r3, r3, #1
 800555e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005568:	1dbb      	adds	r3, r7, #6
 800556a:	881a      	ldrh	r2, [r3, #0]
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	18d3      	adds	r3, r2, r3
 8005570:	2280      	movs	r2, #128	; 0x80
 8005572:	00d2      	lsls	r2, r2, #3
 8005574:	4694      	mov	ip, r2
 8005576:	4463      	add	r3, ip
 8005578:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
 800557e:	e020      	b.n	80055c2 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	781a      	ldrb	r2, [r3, #0]
 8005584:	2112      	movs	r1, #18
 8005586:	187b      	adds	r3, r7, r1
 8005588:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	3301      	adds	r3, #1
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	b21a      	sxth	r2, r3
 8005594:	187b      	adds	r3, r7, r1
 8005596:	2000      	movs	r0, #0
 8005598:	5e1b      	ldrsh	r3, [r3, r0]
 800559a:	4313      	orrs	r3, r2
 800559c:	b21a      	sxth	r2, r3
 800559e:	187b      	adds	r3, r7, r1
 80055a0:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	187a      	adds	r2, r7, r1
 80055a6:	8812      	ldrh	r2, [r2, #0]
 80055a8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	3302      	adds	r3, #2
 80055ae:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	3301      	adds	r3, #1
 80055b4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	3301      	adds	r3, #1
 80055ba:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	3b01      	subs	r3, #1
 80055c0:	627b      	str	r3, [r7, #36]	; 0x24
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1db      	bne.n	8005580 <USB_WritePMA+0x40>
  }
}
 80055c8:	46c0      	nop			; (mov r8, r8)
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b00a      	add	sp, #40	; 0x28
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b08a      	sub	sp, #40	; 0x28
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	0019      	movs	r1, r3
 80055de:	1dbb      	adds	r3, r7, #6
 80055e0:	801a      	strh	r2, [r3, #0]
 80055e2:	1d3b      	adds	r3, r7, #4
 80055e4:	1c0a      	adds	r2, r1, #0
 80055e6:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80055e8:	1d3b      	adds	r3, r7, #4
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	085b      	lsrs	r3, r3, #1
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80055fa:	1dbb      	adds	r3, r7, #6
 80055fc:	881a      	ldrh	r2, [r3, #0]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	18d3      	adds	r3, r2, r3
 8005602:	2280      	movs	r2, #128	; 0x80
 8005604:	00d2      	lsls	r2, r2, #3
 8005606:	4694      	mov	ip, r2
 8005608:	4463      	add	r3, ip
 800560a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
 8005610:	e018      	b.n	8005644 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29b      	uxth	r3, r3
 8005618:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	3302      	adds	r3, #2
 800561e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	b2da      	uxtb	r2, r3
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	3301      	adds	r3, #1
 800562c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	0a1b      	lsrs	r3, r3, #8
 8005632:	b2da      	uxtb	r2, r3
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	3301      	adds	r3, #1
 800563c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	3b01      	subs	r3, #1
 8005642:	627b      	str	r3, [r7, #36]	; 0x24
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e3      	bne.n	8005612 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800564a:	1d3b      	adds	r3, r7, #4
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	2201      	movs	r2, #1
 8005650:	4013      	ands	r3, r2
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	b29b      	uxth	r3, r3
 800565e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	b2da      	uxtb	r2, r3
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	701a      	strb	r2, [r3, #0]
  }
}
 8005668:	46c0      	nop			; (mov r8, r8)
 800566a:	46bd      	mov	sp, r7
 800566c:	b00a      	add	sp, #40	; 0x28
 800566e:	bd80      	pop	{r7, pc}

08005670 <USBD_HID_Init>:
 *         Initialize the HID interface
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	000a      	movs	r2, r1
 800567a:	1cfb      	adds	r3, r7, #3
 800567c:	701a      	strb	r2, [r3, #0]
	/* Open EP IN */
	USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	2304      	movs	r3, #4
 8005682:	2203      	movs	r2, #3
 8005684:	2181      	movs	r1, #129	; 0x81
 8005686:	f001 fe5a 	bl	800733e <USBD_LL_OpenEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	62da      	str	r2, [r3, #44]	; 0x2c

	pdev->pClassData = USBD_malloc (sizeof(USBD_HID_HandleTypeDef));
 8005690:	2010      	movs	r0, #16
 8005692:	f001 ffd7 	bl	8007644 <USBD_static_malloc>
 8005696:	0001      	movs	r1, r0
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	23ae      	movs	r3, #174	; 0xae
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	50d1      	str	r1, [r2, r3]

	if (pdev->pClassData == NULL) {
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	23ae      	movs	r3, #174	; 0xae
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	58d3      	ldr	r3, [r2, r3]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <USBD_HID_Init+0x40>
		return USBD_FAIL;
 80056ac:	2302      	movs	r3, #2
 80056ae:	e006      	b.n	80056be <USBD_HID_Init+0x4e>
	}

	((USBD_HID_HandleTypeDef*) pdev->pClassData)->state = HID_IDLE;
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	23ae      	movs	r3, #174	; 0xae
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	58d3      	ldr	r3, [r2, r3]
 80056b8:	2200      	movs	r2, #0
 80056ba:	731a      	strb	r2, [r3, #12]

	return USBD_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	0018      	movs	r0, r3
 80056c0:	46bd      	mov	sp, r7
 80056c2:	b002      	add	sp, #8
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <USBD_HID_DeInit>:
 *         DeInitialize the HID layer
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b082      	sub	sp, #8
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	000a      	movs	r2, r1
 80056d0:	1cfb      	adds	r3, r7, #3
 80056d2:	701a      	strb	r2, [r3, #0]
	/* Close HID EPs */
	USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2181      	movs	r1, #129	; 0x81
 80056d8:	0018      	movs	r0, r3
 80056da:	f001 fe67 	bl	80073ac <USBD_LL_CloseEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	62da      	str	r2, [r3, #44]	; 0x2c

	/* FRee allocated memory */
	if (pdev->pClassData != NULL) {
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	23ae      	movs	r3, #174	; 0xae
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	58d3      	ldr	r3, [r2, r3]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00b      	beq.n	8005708 <USBD_HID_DeInit+0x42>
		USBD_free(pdev->pClassData);
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	23ae      	movs	r3, #174	; 0xae
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	58d3      	ldr	r3, [r2, r3]
 80056f8:	0018      	movs	r0, r3
 80056fa:	f001 ffaf 	bl	800765c <USBD_static_free>
		pdev->pClassData = NULL;
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	23ae      	movs	r3, #174	; 0xae
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	2100      	movs	r1, #0
 8005706:	50d1      	str	r1, [r2, r3]
	}

	return USBD_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	0018      	movs	r0, r3
 800570c:	46bd      	mov	sp, r7
 800570e:	b002      	add	sp, #8
 8005710:	bd80      	pop	{r7, pc}
	...

08005714 <USBD_HID_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	23ae      	movs	r3, #174	; 0xae
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	58d3      	ldr	r3, [r2, r3]
 8005726:	613b      	str	r3, [r7, #16]
	uint16_t len = 0U;
 8005728:	231e      	movs	r3, #30
 800572a:	18fb      	adds	r3, r7, r3
 800572c:	2200      	movs	r2, #0
 800572e:	801a      	strh	r2, [r3, #0]
	uint8_t *pbuf = NULL;
 8005730:	2300      	movs	r3, #0
 8005732:	61bb      	str	r3, [r7, #24]
	uint16_t status_info = 0U;
 8005734:	230e      	movs	r3, #14
 8005736:	18fb      	adds	r3, r7, r3
 8005738:	2200      	movs	r2, #0
 800573a:	801a      	strh	r2, [r3, #0]
	USBD_StatusTypeDef ret = USBD_OK;
 800573c:	2317      	movs	r3, #23
 800573e:	18fb      	adds	r3, r7, r3
 8005740:	2200      	movs	r2, #0
 8005742:	701a      	strb	r2, [r3, #0]

	switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	001a      	movs	r2, r3
 800574a:	2360      	movs	r3, #96	; 0x60
 800574c:	4013      	ands	r3, r2
 800574e:	d03a      	beq.n	80057c6 <USBD_HID_Setup+0xb2>
 8005750:	2b20      	cmp	r3, #32
 8005752:	d000      	beq.n	8005756 <USBD_HID_Setup+0x42>
 8005754:	e0d6      	b.n	8005904 <USBD_HID_Setup+0x1f0>
	case USB_REQ_TYPE_CLASS:
		switch (req->bRequest) {
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	785b      	ldrb	r3, [r3, #1]
 800575a:	2b0b      	cmp	r3, #11
 800575c:	d008      	beq.n	8005770 <USBD_HID_Setup+0x5c>
 800575e:	dc26      	bgt.n	80057ae <USBD_HID_Setup+0x9a>
 8005760:	2b0a      	cmp	r3, #10
 8005762:	d013      	beq.n	800578c <USBD_HID_Setup+0x78>
 8005764:	dc23      	bgt.n	80057ae <USBD_HID_Setup+0x9a>
 8005766:	2b02      	cmp	r3, #2
 8005768:	d019      	beq.n	800579e <USBD_HID_Setup+0x8a>
 800576a:	2b03      	cmp	r3, #3
 800576c:	d007      	beq.n	800577e <USBD_HID_Setup+0x6a>
 800576e:	e01e      	b.n	80057ae <USBD_HID_Setup+0x9a>
		case HID_REQ_SET_PROTOCOL:
			hhid->Protocol = (uint8_t) (req->wValue);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	885b      	ldrh	r3, [r3, #2]
 8005774:	b2db      	uxtb	r3, r3
 8005776:	001a      	movs	r2, r3
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	601a      	str	r2, [r3, #0]
			break;
 800577c:	e022      	b.n	80057c4 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_PROTOCOL:
			USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->Protocol, 1U);
 800577e:	6939      	ldr	r1, [r7, #16]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	0018      	movs	r0, r3
 8005786:	f001 fabf 	bl	8006d08 <USBD_CtlSendData>
			break;
 800578a:	e01b      	b.n	80057c4 <USBD_HID_Setup+0xb0>

		case HID_REQ_SET_IDLE:
			hhid->IdleState = (uint8_t) (req->wValue >> 8);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	885b      	ldrh	r3, [r3, #2]
 8005790:	0a1b      	lsrs	r3, r3, #8
 8005792:	b29b      	uxth	r3, r3
 8005794:	b2db      	uxtb	r3, r3
 8005796:	001a      	movs	r2, r3
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	605a      	str	r2, [r3, #4]
			break;
 800579c:	e012      	b.n	80057c4 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_IDLE:
			USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->IdleState, 1U);
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1d19      	adds	r1, r3, #4
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	0018      	movs	r0, r3
 80057a8:	f001 faae 	bl	8006d08 <USBD_CtlSendData>
			break;
 80057ac:	e00a      	b.n	80057c4 <USBD_HID_Setup+0xb0>

		default:
			USBD_CtlError(pdev, req);
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	0011      	movs	r1, r2
 80057b4:	0018      	movs	r0, r3
 80057b6:	f001 fa29 	bl	8006c0c <USBD_CtlError>
			ret = USBD_FAIL;
 80057ba:	2317      	movs	r3, #23
 80057bc:	18fb      	adds	r3, r7, r3
 80057be:	2202      	movs	r2, #2
 80057c0:	701a      	strb	r2, [r3, #0]
			break;
 80057c2:	46c0      	nop			; (mov r8, r8)
		}
		break;
 80057c4:	e0a9      	b.n	800591a <USBD_HID_Setup+0x206>
	case USB_REQ_TYPE_STANDARD:
		switch (req->bRequest) {
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	785b      	ldrb	r3, [r3, #1]
 80057ca:	2b0b      	cmp	r3, #11
 80057cc:	d100      	bne.n	80057d0 <USBD_HID_Setup+0xbc>
 80057ce:	e075      	b.n	80058bc <USBD_HID_Setup+0x1a8>
 80057d0:	dd00      	ble.n	80057d4 <USBD_HID_Setup+0xc0>
 80057d2:	e08b      	b.n	80058ec <USBD_HID_Setup+0x1d8>
 80057d4:	2b0a      	cmp	r3, #10
 80057d6:	d057      	beq.n	8005888 <USBD_HID_Setup+0x174>
 80057d8:	dd00      	ble.n	80057dc <USBD_HID_Setup+0xc8>
 80057da:	e087      	b.n	80058ec <USBD_HID_Setup+0x1d8>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <USBD_HID_Setup+0xd2>
 80057e0:	2b06      	cmp	r3, #6
 80057e2:	d019      	beq.n	8005818 <USBD_HID_Setup+0x104>
 80057e4:	e082      	b.n	80058ec <USBD_HID_Setup+0x1d8>
		case USB_REQ_GET_STATUS:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	23a7      	movs	r3, #167	; 0xa7
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	5cd3      	ldrb	r3, [r2, r3]
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d107      	bne.n	8005802 <USBD_HID_Setup+0xee>
				USBD_CtlSendData(pdev, (uint8_t*) (void*) &status_info, 2U);
 80057f2:	230e      	movs	r3, #14
 80057f4:	18f9      	adds	r1, r7, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2202      	movs	r2, #2
 80057fa:	0018      	movs	r0, r3
 80057fc:	f001 fa84 	bl	8006d08 <USBD_CtlSendData>
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 8005800:	e07f      	b.n	8005902 <USBD_HID_Setup+0x1ee>
				USBD_CtlError(pdev, req);
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	0011      	movs	r1, r2
 8005808:	0018      	movs	r0, r3
 800580a:	f001 f9ff 	bl	8006c0c <USBD_CtlError>
				ret = USBD_FAIL;
 800580e:	2317      	movs	r3, #23
 8005810:	18fb      	adds	r3, r7, r3
 8005812:	2202      	movs	r2, #2
 8005814:	701a      	strb	r2, [r3, #0]
			break;
 8005816:	e074      	b.n	8005902 <USBD_HID_Setup+0x1ee>

		case USB_REQ_GET_DESCRIPTOR:
			if (req->wValue >> 8 == HID_REPORT_DESC) {
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	885b      	ldrh	r3, [r3, #2]
 800581c:	0a1b      	lsrs	r3, r3, #8
 800581e:	b29b      	uxth	r3, r3
 8005820:	2b22      	cmp	r3, #34	; 0x22
 8005822:	d10b      	bne.n	800583c <USBD_HID_Setup+0x128>
				len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	88db      	ldrh	r3, [r3, #6]
 8005828:	221e      	movs	r2, #30
 800582a:	18ba      	adds	r2, r7, r2
 800582c:	b299      	uxth	r1, r3
 800582e:	293f      	cmp	r1, #63	; 0x3f
 8005830:	d900      	bls.n	8005834 <USBD_HID_Setup+0x120>
 8005832:	233f      	movs	r3, #63	; 0x3f
 8005834:	8013      	strh	r3, [r2, #0]
				pbuf = HID_MOUSE_ReportDesc;
 8005836:	4b3c      	ldr	r3, [pc, #240]	; (8005928 <USBD_HID_Setup+0x214>)
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	e01c      	b.n	8005876 <USBD_HID_Setup+0x162>
			} else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE) {
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	885b      	ldrh	r3, [r3, #2]
 8005840:	0a1b      	lsrs	r3, r3, #8
 8005842:	b29b      	uxth	r3, r3
 8005844:	2b21      	cmp	r3, #33	; 0x21
 8005846:	d10b      	bne.n	8005860 <USBD_HID_Setup+0x14c>
				pbuf = USBD_HID_Desc;
 8005848:	4b38      	ldr	r3, [pc, #224]	; (800592c <USBD_HID_Setup+0x218>)
 800584a:	61bb      	str	r3, [r7, #24]
				len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	88db      	ldrh	r3, [r3, #6]
 8005850:	221e      	movs	r2, #30
 8005852:	18ba      	adds	r2, r7, r2
 8005854:	b299      	uxth	r1, r3
 8005856:	2909      	cmp	r1, #9
 8005858:	d900      	bls.n	800585c <USBD_HID_Setup+0x148>
 800585a:	2309      	movs	r3, #9
 800585c:	8013      	strh	r3, [r2, #0]
 800585e:	e00a      	b.n	8005876 <USBD_HID_Setup+0x162>
			} else {
				USBD_CtlError(pdev, req);
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	0011      	movs	r1, r2
 8005866:	0018      	movs	r0, r3
 8005868:	f001 f9d0 	bl	8006c0c <USBD_CtlError>
				ret = USBD_FAIL;
 800586c:	2317      	movs	r3, #23
 800586e:	18fb      	adds	r3, r7, r3
 8005870:	2202      	movs	r2, #2
 8005872:	701a      	strb	r2, [r3, #0]
				break;
 8005874:	e045      	b.n	8005902 <USBD_HID_Setup+0x1ee>
			}
			USBD_CtlSendData(pdev, pbuf, len);
 8005876:	231e      	movs	r3, #30
 8005878:	18fb      	adds	r3, r7, r3
 800587a:	881a      	ldrh	r2, [r3, #0]
 800587c:	69b9      	ldr	r1, [r7, #24]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	0018      	movs	r0, r3
 8005882:	f001 fa41 	bl	8006d08 <USBD_CtlSendData>
			break;
 8005886:	e03c      	b.n	8005902 <USBD_HID_Setup+0x1ee>

		case USB_REQ_GET_INTERFACE:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	23a7      	movs	r3, #167	; 0xa7
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	5cd3      	ldrb	r3, [r2, r3]
 8005890:	2b03      	cmp	r3, #3
 8005892:	d108      	bne.n	80058a6 <USBD_HID_Setup+0x192>
				USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->AltSetting,
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	3308      	adds	r3, #8
 8005898:	0019      	movs	r1, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	0018      	movs	r0, r3
 80058a0:	f001 fa32 	bl	8006d08 <USBD_CtlSendData>
						1U);
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 80058a4:	e02d      	b.n	8005902 <USBD_HID_Setup+0x1ee>
				USBD_CtlError(pdev, req);
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	0011      	movs	r1, r2
 80058ac:	0018      	movs	r0, r3
 80058ae:	f001 f9ad 	bl	8006c0c <USBD_CtlError>
				ret = USBD_FAIL;
 80058b2:	2317      	movs	r3, #23
 80058b4:	18fb      	adds	r3, r7, r3
 80058b6:	2202      	movs	r2, #2
 80058b8:	701a      	strb	r2, [r3, #0]
			break;
 80058ba:	e022      	b.n	8005902 <USBD_HID_Setup+0x1ee>

		case USB_REQ_SET_INTERFACE:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	23a7      	movs	r3, #167	; 0xa7
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	5cd3      	ldrb	r3, [r2, r3]
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d106      	bne.n	80058d6 <USBD_HID_Setup+0x1c2>
				hhid->AltSetting = (uint8_t) (req->wValue);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	885b      	ldrh	r3, [r3, #2]
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	001a      	movs	r2, r3
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	609a      	str	r2, [r3, #8]
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 80058d4:	e015      	b.n	8005902 <USBD_HID_Setup+0x1ee>
				USBD_CtlError(pdev, req);
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	0011      	movs	r1, r2
 80058dc:	0018      	movs	r0, r3
 80058de:	f001 f995 	bl	8006c0c <USBD_CtlError>
				ret = USBD_FAIL;
 80058e2:	2317      	movs	r3, #23
 80058e4:	18fb      	adds	r3, r7, r3
 80058e6:	2202      	movs	r2, #2
 80058e8:	701a      	strb	r2, [r3, #0]
			break;
 80058ea:	e00a      	b.n	8005902 <USBD_HID_Setup+0x1ee>

		default:
			USBD_CtlError(pdev, req);
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	0011      	movs	r1, r2
 80058f2:	0018      	movs	r0, r3
 80058f4:	f001 f98a 	bl	8006c0c <USBD_CtlError>
			ret = USBD_FAIL;
 80058f8:	2317      	movs	r3, #23
 80058fa:	18fb      	adds	r3, r7, r3
 80058fc:	2202      	movs	r2, #2
 80058fe:	701a      	strb	r2, [r3, #0]
			break;
 8005900:	46c0      	nop			; (mov r8, r8)
		}
		break;
 8005902:	e00a      	b.n	800591a <USBD_HID_Setup+0x206>

	default:
		USBD_CtlError(pdev, req);
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	0011      	movs	r1, r2
 800590a:	0018      	movs	r0, r3
 800590c:	f001 f97e 	bl	8006c0c <USBD_CtlError>
		ret = USBD_FAIL;
 8005910:	2317      	movs	r3, #23
 8005912:	18fb      	adds	r3, r7, r3
 8005914:	2202      	movs	r2, #2
 8005916:	701a      	strb	r2, [r3, #0]
		break;
 8005918:	46c0      	nop			; (mov r8, r8)
	}

	return ret;
 800591a:	2317      	movs	r3, #23
 800591c:	18fb      	adds	r3, r7, r3
 800591e:	781b      	ldrb	r3, [r3, #0]
}
 8005920:	0018      	movs	r0, r3
 8005922:	46bd      	mov	sp, r7
 8005924:	b008      	add	sp, #32
 8005926:	bd80      	pop	{r7, pc}
 8005928:	200000c8 	.word	0x200000c8
 800592c:	200000b0 	.word	0x200000b0

08005930 <USBD_HID_SendReport>:
 * @param  pdev: device instance
 * @param  buff: pointer to report
 * @retval status
 */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report,
		uint16_t len) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	1dbb      	adds	r3, r7, #6
 800593c:	801a      	strh	r2, [r3, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	23ae      	movs	r3, #174	; 0xae
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	58d3      	ldr	r3, [r2, r3]
 8005946:	617b      	str	r3, [r7, #20]

	if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	23a7      	movs	r3, #167	; 0xa7
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	5cd3      	ldrb	r3, [r2, r3]
 8005950:	2b03      	cmp	r3, #3
 8005952:	d10d      	bne.n	8005970 <USBD_HID_SendReport+0x40>
		if (hhid->state == HID_IDLE) {
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	7b1b      	ldrb	r3, [r3, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d109      	bne.n	8005970 <USBD_HID_SendReport+0x40>
			hhid->state = HID_BUSY;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2201      	movs	r2, #1
 8005960:	731a      	strb	r2, [r3, #12]
			USBD_LL_Transmit(pdev,
 8005962:	1dbb      	adds	r3, r7, #6
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	2181      	movs	r1, #129	; 0x81
 800596c:	f001 fdfb 	bl	8007566 <USBD_LL_Transmit>
			HID_EPIN_ADDR, report, len);
		}
	}
	return USBD_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	0018      	movs	r0, r3
 8005974:	46bd      	mov	sp, r7
 8005976:	b006      	add	sp, #24
 8005978:	bd80      	pop	{r7, pc}
	...

0800597c <USBD_HID_GetFSCfgDesc>:
 *         return FS configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetFSCfgDesc(uint16_t *length) {
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_CfgFSDesc);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2222      	movs	r2, #34	; 0x22
 8005988:	801a      	strh	r2, [r3, #0]
	return USBD_HID_CfgFSDesc;
 800598a:	4b02      	ldr	r3, [pc, #8]	; (8005994 <USBD_HID_GetFSCfgDesc+0x18>)
}
 800598c:	0018      	movs	r0, r3
 800598e:	46bd      	mov	sp, r7
 8005990:	b002      	add	sp, #8
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20000044 	.word	0x20000044

08005998 <USBD_HID_GetHSCfgDesc>:
 *         return HS configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetHSCfgDesc(uint16_t *length) {
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_CfgHSDesc);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2222      	movs	r2, #34	; 0x22
 80059a4:	801a      	strh	r2, [r3, #0]
	return USBD_HID_CfgHSDesc;
 80059a6:	4b02      	ldr	r3, [pc, #8]	; (80059b0 <USBD_HID_GetHSCfgDesc+0x18>)
}
 80059a8:	0018      	movs	r0, r3
 80059aa:	46bd      	mov	sp, r7
 80059ac:	b002      	add	sp, #8
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	20000068 	.word	0x20000068

080059b4 <USBD_HID_GetOtherSpeedCfgDesc>:
 *         return other speed configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length) {
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2222      	movs	r2, #34	; 0x22
 80059c0:	801a      	strh	r2, [r3, #0]
	return USBD_HID_OtherSpeedCfgDesc;
 80059c2:	4b02      	ldr	r3, [pc, #8]	; (80059cc <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 80059c4:	0018      	movs	r0, r3
 80059c6:	46bd      	mov	sp, r7
 80059c8:	b002      	add	sp, #8
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	2000008c 	.word	0x2000008c

080059d0 <USBD_HID_DataIn>:
 *         handle data IN Stage
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	000a      	movs	r2, r1
 80059da:	1cfb      	adds	r3, r7, #3
 80059dc:	701a      	strb	r2, [r3, #0]

	/* Ensure that the FIFO is empty before a new transfer, this condition could
	 be caused by  a new transfer before the end of the previous transfer */
	((USBD_HID_HandleTypeDef*) pdev->pClassData)->state = HID_IDLE;
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	23ae      	movs	r3, #174	; 0xae
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	58d3      	ldr	r3, [r2, r3]
 80059e6:	2200      	movs	r2, #0
 80059e8:	731a      	strb	r2, [r3, #12]
	return USBD_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	0018      	movs	r0, r3
 80059ee:	46bd      	mov	sp, r7
 80059f0:	b002      	add	sp, #8
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <USBD_HID_GetDeviceQualifierDesc>:
 * @brief  DeviceQualifierDescriptor
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetDeviceQualifierDesc(uint16_t *length) {
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_DeviceQualifierDesc);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	220a      	movs	r2, #10
 8005a00:	801a      	strh	r2, [r3, #0]
	return USBD_HID_DeviceQualifierDesc;
 8005a02:	4b02      	ldr	r3, [pc, #8]	; (8005a0c <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8005a04:	0018      	movs	r0, r3
 8005a06:	46bd      	mov	sp, r7
 8005a08:	b002      	add	sp, #8
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	200000bc 	.word	0x200000bc

08005a10 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	1dfb      	adds	r3, r7, #7
 8005a1c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005a24:	2302      	movs	r3, #2
 8005a26:	e020      	b.n	8005a6a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	23ad      	movs	r3, #173	; 0xad
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	58d3      	ldr	r3, [r2, r3]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d004      	beq.n	8005a3e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	23ad      	movs	r3, #173	; 0xad
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d004      	beq.n	8005a4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	23ac      	movs	r3, #172	; 0xac
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	68b9      	ldr	r1, [r7, #8]
 8005a4c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	23a7      	movs	r3, #167	; 0xa7
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	2101      	movs	r1, #1
 8005a56:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	1dfa      	adds	r2, r7, #7
 8005a5c:	7812      	ldrb	r2, [r2, #0]
 8005a5e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	0018      	movs	r0, r3
 8005a64:	f001 fbf6 	bl	8007254 <USBD_LL_Init>

  return USBD_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	b004      	add	sp, #16
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005a7c:	200f      	movs	r0, #15
 8005a7e:	183b      	adds	r3, r7, r0
 8005a80:	2200      	movs	r2, #0
 8005a82:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d008      	beq.n	8005a9c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	23ad      	movs	r3, #173	; 0xad
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	6839      	ldr	r1, [r7, #0]
 8005a92:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8005a94:	183b      	adds	r3, r7, r0
 8005a96:	2200      	movs	r2, #0
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	e003      	b.n	8005aa4 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005a9c:	230f      	movs	r3, #15
 8005a9e:	18fb      	adds	r3, r7, r3
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005aa4:	230f      	movs	r3, #15
 8005aa6:	18fb      	adds	r3, r7, r3
 8005aa8:	781b      	ldrb	r3, [r3, #0]
}
 8005aaa:	0018      	movs	r0, r3
 8005aac:	46bd      	mov	sp, r7
 8005aae:	b004      	add	sp, #16
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b082      	sub	sp, #8
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	0018      	movs	r0, r3
 8005abe:	f001 fc19 	bl	80072f4 <USBD_LL_Start>

  return USBD_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	b002      	add	sp, #8
 8005aca:	bd80      	pop	{r7, pc}

08005acc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	b002      	add	sp, #8
 8005adc:	bd80      	pop	{r7, pc}

08005ade <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005ade:	b590      	push	{r4, r7, lr}
 8005ae0:	b085      	sub	sp, #20
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	000a      	movs	r2, r1
 8005ae8:	1cfb      	adds	r3, r7, #3
 8005aea:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005aec:	240f      	movs	r4, #15
 8005aee:	193b      	adds	r3, r7, r4
 8005af0:	2202      	movs	r2, #2
 8005af2:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	23ad      	movs	r3, #173	; 0xad
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	58d3      	ldr	r3, [r2, r3]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00e      	beq.n	8005b1e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	23ad      	movs	r3, #173	; 0xad
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	58d3      	ldr	r3, [r2, r3]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	1cfa      	adds	r2, r7, #3
 8005b0c:	7811      	ldrb	r1, [r2, #0]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	0010      	movs	r0, r2
 8005b12:	4798      	blx	r3
 8005b14:	1e03      	subs	r3, r0, #0
 8005b16:	d102      	bne.n	8005b1e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8005b18:	193b      	adds	r3, r7, r4
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8005b1e:	230f      	movs	r3, #15
 8005b20:	18fb      	adds	r3, r7, r3
 8005b22:	781b      	ldrb	r3, [r3, #0]
}
 8005b24:	0018      	movs	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	b005      	add	sp, #20
 8005b2a:	bd90      	pop	{r4, r7, pc}

08005b2c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	000a      	movs	r2, r1
 8005b36:	1cfb      	adds	r3, r7, #3
 8005b38:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	23ad      	movs	r3, #173	; 0xad
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	58d3      	ldr	r3, [r2, r3]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	1cfa      	adds	r2, r7, #3
 8005b46:	7811      	ldrb	r1, [r2, #0]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	0010      	movs	r0, r2
 8005b4c:	4798      	blx	r3

  return USBD_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	0018      	movs	r0, r3
 8005b52:	46bd      	mov	sp, r7
 8005b54:	b002      	add	sp, #8
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	22aa      	movs	r2, #170	; 0xaa
 8005b66:	0092      	lsls	r2, r2, #2
 8005b68:	4694      	mov	ip, r2
 8005b6a:	4463      	add	r3, ip
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	0011      	movs	r1, r2
 8005b70:	0018      	movs	r0, r3
 8005b72:	f001 f810 	bl	8006b96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	23a5      	movs	r3, #165	; 0xa5
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a23      	ldr	r2, [pc, #140]	; (8005c10 <USBD_LL_SetupStage+0xb8>)
 8005b84:	5a9b      	ldrh	r3, [r3, r2]
 8005b86:	0019      	movs	r1, r3
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	23a6      	movs	r3, #166	; 0xa6
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	23aa      	movs	r3, #170	; 0xaa
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	5cd3      	ldrb	r3, [r2, r3]
 8005b98:	001a      	movs	r2, r3
 8005b9a:	231f      	movs	r3, #31
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d019      	beq.n	8005bd6 <USBD_LL_SetupStage+0x7e>
 8005ba2:	d822      	bhi.n	8005bea <USBD_LL_SetupStage+0x92>
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <USBD_LL_SetupStage+0x56>
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d00a      	beq.n	8005bc2 <USBD_LL_SetupStage+0x6a>
 8005bac:	e01d      	b.n	8005bea <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	22aa      	movs	r2, #170	; 0xaa
 8005bb2:	0092      	lsls	r2, r2, #2
 8005bb4:	189a      	adds	r2, r3, r2
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	0011      	movs	r1, r2
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f000 fa10 	bl	8005fe0 <USBD_StdDevReq>
      break;
 8005bc0:	e020      	b.n	8005c04 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	22aa      	movs	r2, #170	; 0xaa
 8005bc6:	0092      	lsls	r2, r2, #2
 8005bc8:	189a      	adds	r2, r3, r2
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	0011      	movs	r1, r2
 8005bce:	0018      	movs	r0, r3
 8005bd0:	f000 fa78 	bl	80060c4 <USBD_StdItfReq>
      break;
 8005bd4:	e016      	b.n	8005c04 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	22aa      	movs	r2, #170	; 0xaa
 8005bda:	0092      	lsls	r2, r2, #2
 8005bdc:	189a      	adds	r2, r3, r2
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	0011      	movs	r1, r2
 8005be2:	0018      	movs	r0, r3
 8005be4:	f000 fac5 	bl	8006172 <USBD_StdEPReq>
      break;
 8005be8:	e00c      	b.n	8005c04 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	23aa      	movs	r3, #170	; 0xaa
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	5cd3      	ldrb	r3, [r2, r3]
 8005bf2:	227f      	movs	r2, #127	; 0x7f
 8005bf4:	4393      	bics	r3, r2
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	0011      	movs	r1, r2
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	f001 fc00 	bl	8007402 <USBD_LL_StallEP>
      break;
 8005c02:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	0018      	movs	r0, r3
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	b002      	add	sp, #8
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	000002ae 	.word	0x000002ae

08005c14 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	607a      	str	r2, [r7, #4]
 8005c1e:	200b      	movs	r0, #11
 8005c20:	183b      	adds	r3, r7, r0
 8005c22:	1c0a      	adds	r2, r1, #0
 8005c24:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005c26:	183b      	adds	r3, r7, r0
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d154      	bne.n	8005cd8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3355      	adds	r3, #85	; 0x55
 8005c32:	33ff      	adds	r3, #255	; 0xff
 8005c34:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	23a5      	movs	r3, #165	; 0xa5
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	58d3      	ldr	r3, [r2, r3]
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d139      	bne.n	8005cb6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d919      	bls.n	8005c82 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	1ad2      	subs	r2, r2, r3
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d203      	bcs.n	8005c70 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	e002      	b.n	8005c76 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	001a      	movs	r2, r3
 8005c7c:	f001 f877 	bl	8006d6e <USBD_CtlContinueRx>
 8005c80:	e045      	b.n	8005d0e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	23ad      	movs	r3, #173	; 0xad
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	58d3      	ldr	r3, [r2, r3]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00d      	beq.n	8005cac <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	23a7      	movs	r3, #167	; 0xa7
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	d107      	bne.n	8005cac <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	23ad      	movs	r3, #173	; 0xad
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	58d3      	ldr	r3, [r2, r3]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	0010      	movs	r0, r2
 8005caa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f001 f870 	bl	8006d94 <USBD_CtlSendStatus>
 8005cb4:	e02b      	b.n	8005d0e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	23a5      	movs	r3, #165	; 0xa5
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	58d3      	ldr	r3, [r2, r3]
 8005cbe:	2b05      	cmp	r3, #5
 8005cc0:	d125      	bne.n	8005d0e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	23a5      	movs	r3, #165	; 0xa5
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	2100      	movs	r1, #0
 8005cca:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2100      	movs	r1, #0
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f001 fb96 	bl	8007402 <USBD_LL_StallEP>
 8005cd6:	e01a      	b.n	8005d0e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	23ad      	movs	r3, #173	; 0xad
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	58d3      	ldr	r3, [r2, r3]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d011      	beq.n	8005d0a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	23a7      	movs	r3, #167	; 0xa7
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d10b      	bne.n	8005d0a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	23ad      	movs	r3, #173	; 0xad
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	58d3      	ldr	r3, [r2, r3]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	220b      	movs	r2, #11
 8005cfe:	18ba      	adds	r2, r7, r2
 8005d00:	7811      	ldrb	r1, [r2, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	0010      	movs	r0, r2
 8005d06:	4798      	blx	r3
 8005d08:	e001      	b.n	8005d0e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e000      	b.n	8005d10 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	0018      	movs	r0, r3
 8005d12:	46bd      	mov	sp, r7
 8005d14:	b006      	add	sp, #24
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	607a      	str	r2, [r7, #4]
 8005d22:	200b      	movs	r0, #11
 8005d24:	183b      	adds	r3, r7, r0
 8005d26:	1c0a      	adds	r2, r1, #0
 8005d28:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005d2a:	183b      	adds	r3, r7, r0
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d000      	beq.n	8005d34 <USBD_LL_DataInStage+0x1c>
 8005d32:	e08e      	b.n	8005e52 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3314      	adds	r3, #20
 8005d38:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	23a5      	movs	r3, #165	; 0xa5
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	58d3      	ldr	r3, [r2, r3]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d164      	bne.n	8005e10 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d915      	bls.n	8005d7e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	1ad2      	subs	r2, r2, r3
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f000 ffec 	bl	8006d48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	2300      	movs	r3, #0
 8005d74:	2200      	movs	r2, #0
 8005d76:	2100      	movs	r1, #0
 8005d78:	f001 fc2c 	bl	80075d4 <USBD_LL_PrepareReceive>
 8005d7c:	e059      	b.n	8005e32 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	0019      	movs	r1, r3
 8005d88:	0010      	movs	r0, r2
 8005d8a:	f7fa fa43 	bl	8000214 <__aeabi_uidivmod>
 8005d8e:	1e0b      	subs	r3, r1, #0
 8005d90:	d11f      	bne.n	8005dd2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d319      	bcc.n	8005dd2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	68f9      	ldr	r1, [r7, #12]
 8005da4:	23a6      	movs	r3, #166	; 0xa6
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d211      	bcs.n	8005dd2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	2100      	movs	r1, #0
 8005db4:	0018      	movs	r0, r3
 8005db6:	f000 ffc7 	bl	8006d48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	23a6      	movs	r3, #166	; 0xa6
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2100      	movs	r1, #0
 8005dcc:	f001 fc02 	bl	80075d4 <USBD_LL_PrepareReceive>
 8005dd0:	e02f      	b.n	8005e32 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	23ad      	movs	r3, #173	; 0xad
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	58d3      	ldr	r3, [r2, r3]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00d      	beq.n	8005dfc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	23a7      	movs	r3, #167	; 0xa7
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	d107      	bne.n	8005dfc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	23ad      	movs	r3, #173	; 0xad
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	58d3      	ldr	r3, [r2, r3]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	0010      	movs	r0, r2
 8005dfa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2180      	movs	r1, #128	; 0x80
 8005e00:	0018      	movs	r0, r3
 8005e02:	f001 fafe 	bl	8007402 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	0018      	movs	r0, r3
 8005e0a:	f000 ffd7 	bl	8006dbc <USBD_CtlReceiveStatus>
 8005e0e:	e010      	b.n	8005e32 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	23a5      	movs	r3, #165	; 0xa5
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	58d3      	ldr	r3, [r2, r3]
 8005e18:	2b04      	cmp	r3, #4
 8005e1a:	d005      	beq.n	8005e28 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	23a5      	movs	r3, #165	; 0xa5
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d104      	bne.n	8005e32 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2180      	movs	r1, #128	; 0x80
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f001 fae8 	bl	8007402 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	23a8      	movs	r3, #168	; 0xa8
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	5cd3      	ldrb	r3, [r2, r3]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d124      	bne.n	8005e88 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	0018      	movs	r0, r3
 8005e42:	f7ff fe43 	bl	8005acc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	23a8      	movs	r3, #168	; 0xa8
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	54d1      	strb	r1, [r2, r3]
 8005e50:	e01a      	b.n	8005e88 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	23ad      	movs	r3, #173	; 0xad
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	58d3      	ldr	r3, [r2, r3]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d011      	beq.n	8005e84 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	23a7      	movs	r3, #167	; 0xa7
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d10b      	bne.n	8005e84 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	23ad      	movs	r3, #173	; 0xad
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	58d3      	ldr	r3, [r2, r3]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	220b      	movs	r2, #11
 8005e78:	18ba      	adds	r2, r7, r2
 8005e7a:	7811      	ldrb	r1, [r2, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	0010      	movs	r0, r2
 8005e80:	4798      	blx	r3
 8005e82:	e001      	b.n	8005e88 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005e84:	2302      	movs	r3, #2
 8005e86:	e000      	b.n	8005e8a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	b006      	add	sp, #24
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b082      	sub	sp, #8
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	2340      	movs	r3, #64	; 0x40
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	f001 fa4c 	bl	800733e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	23ac      	movs	r3, #172	; 0xac
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	2101      	movs	r1, #1
 8005eae:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	23b2      	movs	r3, #178	; 0xb2
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	2140      	movs	r1, #64	; 0x40
 8005eb8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	2340      	movs	r3, #64	; 0x40
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	2180      	movs	r1, #128	; 0x80
 8005ec2:	f001 fa3c 	bl	800733e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2240      	movs	r2, #64	; 0x40
 8005ed0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	23a7      	movs	r3, #167	; 0xa7
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	2101      	movs	r1, #1
 8005eda:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	23a5      	movs	r3, #165	; 0xa5
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	23a9      	movs	r3, #169	; 0xa9
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	23ae      	movs	r3, #174	; 0xae
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	58d3      	ldr	r3, [r2, r3]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	23ad      	movs	r3, #173	; 0xad
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	58d3      	ldr	r3, [r2, r3]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	b2d9      	uxtb	r1, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	0018      	movs	r0, r3
 8005f16:	4790      	blx	r2
  }

  return USBD_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	b002      	add	sp, #8
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b082      	sub	sp, #8
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	000a      	movs	r2, r1
 8005f2c:	1cfb      	adds	r3, r7, #3
 8005f2e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	1cfa      	adds	r2, r7, #3
 8005f34:	7812      	ldrb	r2, [r2, #0]
 8005f36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	b002      	add	sp, #8
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	23a7      	movs	r3, #167	; 0xa7
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	5cd1      	ldrb	r1, [r2, r3]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a06      	ldr	r2, [pc, #24]	; (8005f70 <USBD_LL_Suspend+0x2c>)
 8005f58:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	23a7      	movs	r3, #167	; 0xa7
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	2104      	movs	r1, #4
 8005f62:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	0018      	movs	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b002      	add	sp, #8
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	0000029d 	.word	0x0000029d

08005f74 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	23a7      	movs	r3, #167	; 0xa7
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	5cd3      	ldrb	r3, [r2, r3]
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d106      	bne.n	8005f96 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a05      	ldr	r2, [pc, #20]	; (8005fa0 <USBD_LL_Resume+0x2c>)
 8005f8c:	5c99      	ldrb	r1, [r3, r2]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	23a7      	movs	r3, #167	; 0xa7
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	0018      	movs	r0, r3
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	b002      	add	sp, #8
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	0000029d 	.word	0x0000029d

08005fa4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	23a7      	movs	r3, #167	; 0xa7
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	5cd3      	ldrb	r3, [r2, r3]
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d10e      	bne.n	8005fd6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	23ad      	movs	r3, #173	; 0xad
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	58d3      	ldr	r3, [r2, r3]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d007      	beq.n	8005fd6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	23ad      	movs	r3, #173	; 0xad
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	58d3      	ldr	r3, [r2, r3]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	0010      	movs	r0, r2
 8005fd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	0018      	movs	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b002      	add	sp, #8
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fea:	230f      	movs	r3, #15
 8005fec:	18fb      	adds	r3, r7, r3
 8005fee:	2200      	movs	r2, #0
 8005ff0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	001a      	movs	r2, r3
 8005ff8:	2360      	movs	r3, #96	; 0x60
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	2b40      	cmp	r3, #64	; 0x40
 8005ffe:	d004      	beq.n	800600a <USBD_StdDevReq+0x2a>
 8006000:	d84f      	bhi.n	80060a2 <USBD_StdDevReq+0xc2>
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00b      	beq.n	800601e <USBD_StdDevReq+0x3e>
 8006006:	2b20      	cmp	r3, #32
 8006008:	d14b      	bne.n	80060a2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	23ad      	movs	r3, #173	; 0xad
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	58d3      	ldr	r3, [r2, r3]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	6839      	ldr	r1, [r7, #0]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	0010      	movs	r0, r2
 800601a:	4798      	blx	r3
      break;
 800601c:	e048      	b.n	80060b0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	785b      	ldrb	r3, [r3, #1]
 8006022:	2b09      	cmp	r3, #9
 8006024:	d835      	bhi.n	8006092 <USBD_StdDevReq+0xb2>
 8006026:	009a      	lsls	r2, r3, #2
 8006028:	4b25      	ldr	r3, [pc, #148]	; (80060c0 <USBD_StdDevReq+0xe0>)
 800602a:	18d3      	adds	r3, r2, r3
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	0011      	movs	r1, r2
 8006036:	0018      	movs	r0, r3
 8006038:	f000 fa52 	bl	80064e0 <USBD_GetDescriptor>
          break;
 800603c:	e030      	b.n	80060a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	0011      	movs	r1, r2
 8006044:	0018      	movs	r0, r3
 8006046:	f000 fbfd 	bl	8006844 <USBD_SetAddress>
          break;
 800604a:	e029      	b.n	80060a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	0011      	movs	r1, r2
 8006052:	0018      	movs	r0, r3
 8006054:	f000 fc4a 	bl	80068ec <USBD_SetConfig>
          break;
 8006058:	e022      	b.n	80060a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	0011      	movs	r1, r2
 8006060:	0018      	movs	r0, r3
 8006062:	f000 fce7 	bl	8006a34 <USBD_GetConfig>
          break;
 8006066:	e01b      	b.n	80060a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	0011      	movs	r1, r2
 800606e:	0018      	movs	r0, r3
 8006070:	f000 fd1b 	bl	8006aaa <USBD_GetStatus>
          break;
 8006074:	e014      	b.n	80060a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	0011      	movs	r1, r2
 800607c:	0018      	movs	r0, r3
 800607e:	f000 fd4e 	bl	8006b1e <USBD_SetFeature>
          break;
 8006082:	e00d      	b.n	80060a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	0011      	movs	r1, r2
 800608a:	0018      	movs	r0, r3
 800608c:	f000 fd5d 	bl	8006b4a <USBD_ClrFeature>
          break;
 8006090:	e006      	b.n	80060a0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	0011      	movs	r1, r2
 8006098:	0018      	movs	r0, r3
 800609a:	f000 fdb7 	bl	8006c0c <USBD_CtlError>
          break;
 800609e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80060a0:	e006      	b.n	80060b0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	0011      	movs	r1, r2
 80060a8:	0018      	movs	r0, r3
 80060aa:	f000 fdaf 	bl	8006c0c <USBD_CtlError>
      break;
 80060ae:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80060b0:	230f      	movs	r3, #15
 80060b2:	18fb      	adds	r3, r7, r3
 80060b4:	781b      	ldrb	r3, [r3, #0]
}
 80060b6:	0018      	movs	r0, r3
 80060b8:	46bd      	mov	sp, r7
 80060ba:	b004      	add	sp, #16
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	46c0      	nop			; (mov r8, r8)
 80060c0:	080077bc 	.word	0x080077bc

080060c4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80060c4:	b5b0      	push	{r4, r5, r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060ce:	230f      	movs	r3, #15
 80060d0:	18fb      	adds	r3, r7, r3
 80060d2:	2200      	movs	r2, #0
 80060d4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	001a      	movs	r2, r3
 80060dc:	2360      	movs	r3, #96	; 0x60
 80060de:	4013      	ands	r3, r2
 80060e0:	2b40      	cmp	r3, #64	; 0x40
 80060e2:	d004      	beq.n	80060ee <USBD_StdItfReq+0x2a>
 80060e4:	d839      	bhi.n	800615a <USBD_StdItfReq+0x96>
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <USBD_StdItfReq+0x2a>
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	d135      	bne.n	800615a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	23a7      	movs	r3, #167	; 0xa7
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	5cd3      	ldrb	r3, [r2, r3]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d825      	bhi.n	8006148 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	889b      	ldrh	r3, [r3, #4]
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b01      	cmp	r3, #1
 8006104:	d819      	bhi.n	800613a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	23ad      	movs	r3, #173	; 0xad
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	58d3      	ldr	r3, [r2, r3]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	250f      	movs	r5, #15
 8006112:	197c      	adds	r4, r7, r5
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	0010      	movs	r0, r2
 800611a:	4798      	blx	r3
 800611c:	0003      	movs	r3, r0
 800611e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	88db      	ldrh	r3, [r3, #6]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d116      	bne.n	8006156 <USBD_StdItfReq+0x92>
 8006128:	197b      	adds	r3, r7, r5
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d112      	bne.n	8006156 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	0018      	movs	r0, r3
 8006134:	f000 fe2e 	bl	8006d94 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006138:	e00d      	b.n	8006156 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	0011      	movs	r1, r2
 8006140:	0018      	movs	r0, r3
 8006142:	f000 fd63 	bl	8006c0c <USBD_CtlError>
          break;
 8006146:	e006      	b.n	8006156 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	0011      	movs	r1, r2
 800614e:	0018      	movs	r0, r3
 8006150:	f000 fd5c 	bl	8006c0c <USBD_CtlError>
          break;
 8006154:	e000      	b.n	8006158 <USBD_StdItfReq+0x94>
          break;
 8006156:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006158:	e006      	b.n	8006168 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	0011      	movs	r1, r2
 8006160:	0018      	movs	r0, r3
 8006162:	f000 fd53 	bl	8006c0c <USBD_CtlError>
      break;
 8006166:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	0018      	movs	r0, r3
 800616c:	46bd      	mov	sp, r7
 800616e:	b004      	add	sp, #16
 8006170:	bdb0      	pop	{r4, r5, r7, pc}

08006172 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006172:	b5b0      	push	{r4, r5, r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800617c:	230f      	movs	r3, #15
 800617e:	18fb      	adds	r3, r7, r3
 8006180:	2200      	movs	r2, #0
 8006182:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	889a      	ldrh	r2, [r3, #4]
 8006188:	230e      	movs	r3, #14
 800618a:	18fb      	adds	r3, r7, r3
 800618c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	001a      	movs	r2, r3
 8006194:	2360      	movs	r3, #96	; 0x60
 8006196:	4013      	ands	r3, r2
 8006198:	2b40      	cmp	r3, #64	; 0x40
 800619a:	d006      	beq.n	80061aa <USBD_StdEPReq+0x38>
 800619c:	d900      	bls.n	80061a0 <USBD_StdEPReq+0x2e>
 800619e:	e190      	b.n	80064c2 <USBD_StdEPReq+0x350>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00c      	beq.n	80061be <USBD_StdEPReq+0x4c>
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	d000      	beq.n	80061aa <USBD_StdEPReq+0x38>
 80061a8:	e18b      	b.n	80064c2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	23ad      	movs	r3, #173	; 0xad
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	58d3      	ldr	r3, [r2, r3]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	6839      	ldr	r1, [r7, #0]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	0010      	movs	r0, r2
 80061ba:	4798      	blx	r3
      break;
 80061bc:	e188      	b.n	80064d0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	001a      	movs	r2, r3
 80061c4:	2360      	movs	r3, #96	; 0x60
 80061c6:	4013      	ands	r3, r2
 80061c8:	2b20      	cmp	r3, #32
 80061ca:	d10f      	bne.n	80061ec <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	23ad      	movs	r3, #173	; 0xad
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	58d3      	ldr	r3, [r2, r3]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	250f      	movs	r5, #15
 80061d8:	197c      	adds	r4, r7, r5
 80061da:	6839      	ldr	r1, [r7, #0]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	0010      	movs	r0, r2
 80061e0:	4798      	blx	r3
 80061e2:	0003      	movs	r3, r0
 80061e4:	7023      	strb	r3, [r4, #0]

        return ret;
 80061e6:	197b      	adds	r3, r7, r5
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	e174      	b.n	80064d6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	785b      	ldrb	r3, [r3, #1]
 80061f0:	2b03      	cmp	r3, #3
 80061f2:	d007      	beq.n	8006204 <USBD_StdEPReq+0x92>
 80061f4:	dd00      	ble.n	80061f8 <USBD_StdEPReq+0x86>
 80061f6:	e15c      	b.n	80064b2 <USBD_StdEPReq+0x340>
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d100      	bne.n	80061fe <USBD_StdEPReq+0x8c>
 80061fc:	e092      	b.n	8006324 <USBD_StdEPReq+0x1b2>
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d04b      	beq.n	800629a <USBD_StdEPReq+0x128>
 8006202:	e156      	b.n	80064b2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	23a7      	movs	r3, #167	; 0xa7
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	5cd3      	ldrb	r3, [r2, r3]
 800620c:	2b02      	cmp	r3, #2
 800620e:	d002      	beq.n	8006216 <USBD_StdEPReq+0xa4>
 8006210:	2b03      	cmp	r3, #3
 8006212:	d01d      	beq.n	8006250 <USBD_StdEPReq+0xde>
 8006214:	e039      	b.n	800628a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006216:	220e      	movs	r2, #14
 8006218:	18bb      	adds	r3, r7, r2
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d010      	beq.n	8006242 <USBD_StdEPReq+0xd0>
 8006220:	18bb      	adds	r3, r7, r2
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b80      	cmp	r3, #128	; 0x80
 8006226:	d00c      	beq.n	8006242 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006228:	18bb      	adds	r3, r7, r2
 800622a:	781a      	ldrb	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	0011      	movs	r1, r2
 8006230:	0018      	movs	r0, r3
 8006232:	f001 f8e6 	bl	8007402 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2180      	movs	r1, #128	; 0x80
 800623a:	0018      	movs	r0, r3
 800623c:	f001 f8e1 	bl	8007402 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006240:	e02a      	b.n	8006298 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	0011      	movs	r1, r2
 8006248:	0018      	movs	r0, r3
 800624a:	f000 fcdf 	bl	8006c0c <USBD_CtlError>
              break;
 800624e:	e023      	b.n	8006298 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	885b      	ldrh	r3, [r3, #2]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d113      	bne.n	8006280 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8006258:	220e      	movs	r2, #14
 800625a:	18bb      	adds	r3, r7, r2
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00e      	beq.n	8006280 <USBD_StdEPReq+0x10e>
 8006262:	18bb      	adds	r3, r7, r2
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b80      	cmp	r3, #128	; 0x80
 8006268:	d00a      	beq.n	8006280 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	88db      	ldrh	r3, [r3, #6]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006272:	18bb      	adds	r3, r7, r2
 8006274:	781a      	ldrb	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	0011      	movs	r1, r2
 800627a:	0018      	movs	r0, r3
 800627c:	f001 f8c1 	bl	8007402 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	0018      	movs	r0, r3
 8006284:	f000 fd86 	bl	8006d94 <USBD_CtlSendStatus>

              break;
 8006288:	e006      	b.n	8006298 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	0011      	movs	r1, r2
 8006290:	0018      	movs	r0, r3
 8006292:	f000 fcbb 	bl	8006c0c <USBD_CtlError>
              break;
 8006296:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006298:	e112      	b.n	80064c0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	23a7      	movs	r3, #167	; 0xa7
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	5cd3      	ldrb	r3, [r2, r3]
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d002      	beq.n	80062ac <USBD_StdEPReq+0x13a>
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d01d      	beq.n	80062e6 <USBD_StdEPReq+0x174>
 80062aa:	e032      	b.n	8006312 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062ac:	220e      	movs	r2, #14
 80062ae:	18bb      	adds	r3, r7, r2
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d010      	beq.n	80062d8 <USBD_StdEPReq+0x166>
 80062b6:	18bb      	adds	r3, r7, r2
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b80      	cmp	r3, #128	; 0x80
 80062bc:	d00c      	beq.n	80062d8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80062be:	18bb      	adds	r3, r7, r2
 80062c0:	781a      	ldrb	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	0011      	movs	r1, r2
 80062c6:	0018      	movs	r0, r3
 80062c8:	f001 f89b 	bl	8007402 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2180      	movs	r1, #128	; 0x80
 80062d0:	0018      	movs	r0, r3
 80062d2:	f001 f896 	bl	8007402 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062d6:	e024      	b.n	8006322 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	0011      	movs	r1, r2
 80062de:	0018      	movs	r0, r3
 80062e0:	f000 fc94 	bl	8006c0c <USBD_CtlError>
              break;
 80062e4:	e01d      	b.n	8006322 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	885b      	ldrh	r3, [r3, #2]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d118      	bne.n	8006320 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80062ee:	210e      	movs	r1, #14
 80062f0:	187b      	adds	r3, r7, r1
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	227f      	movs	r2, #127	; 0x7f
 80062f6:	4013      	ands	r3, r2
 80062f8:	d006      	beq.n	8006308 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80062fa:	187b      	adds	r3, r7, r1
 80062fc:	781a      	ldrb	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	0011      	movs	r1, r2
 8006302:	0018      	movs	r0, r3
 8006304:	f001 f8a8 	bl	8007458 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	0018      	movs	r0, r3
 800630c:	f000 fd42 	bl	8006d94 <USBD_CtlSendStatus>
              }
              break;
 8006310:	e006      	b.n	8006320 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	0011      	movs	r1, r2
 8006318:	0018      	movs	r0, r3
 800631a:	f000 fc77 	bl	8006c0c <USBD_CtlError>
              break;
 800631e:	e000      	b.n	8006322 <USBD_StdEPReq+0x1b0>
              break;
 8006320:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006322:	e0cd      	b.n	80064c0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	23a7      	movs	r3, #167	; 0xa7
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	5cd3      	ldrb	r3, [r2, r3]
 800632c:	2b02      	cmp	r3, #2
 800632e:	d002      	beq.n	8006336 <USBD_StdEPReq+0x1c4>
 8006330:	2b03      	cmp	r3, #3
 8006332:	d03c      	beq.n	80063ae <USBD_StdEPReq+0x23c>
 8006334:	e0b5      	b.n	80064a2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006336:	220e      	movs	r2, #14
 8006338:	18bb      	adds	r3, r7, r2
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00a      	beq.n	8006356 <USBD_StdEPReq+0x1e4>
 8006340:	18bb      	adds	r3, r7, r2
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b80      	cmp	r3, #128	; 0x80
 8006346:	d006      	beq.n	8006356 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	0011      	movs	r1, r2
 800634e:	0018      	movs	r0, r3
 8006350:	f000 fc5c 	bl	8006c0c <USBD_CtlError>
                break;
 8006354:	e0ac      	b.n	80064b0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006356:	220e      	movs	r2, #14
 8006358:	18bb      	adds	r3, r7, r2
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	b25b      	sxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	da0c      	bge.n	800637c <USBD_StdEPReq+0x20a>
 8006362:	18bb      	adds	r3, r7, r2
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	227f      	movs	r2, #127	; 0x7f
 8006368:	401a      	ands	r2, r3
 800636a:	0013      	movs	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	189b      	adds	r3, r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	3310      	adds	r3, #16
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	18d3      	adds	r3, r2, r3
 8006378:	3304      	adds	r3, #4
 800637a:	e00d      	b.n	8006398 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800637c:	230e      	movs	r3, #14
 800637e:	18fb      	adds	r3, r7, r3
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	227f      	movs	r2, #127	; 0x7f
 8006384:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006386:	0013      	movs	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	189b      	adds	r3, r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	3351      	adds	r3, #81	; 0x51
 8006390:	33ff      	adds	r3, #255	; 0xff
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	18d3      	adds	r3, r2, r3
 8006396:	3304      	adds	r3, #4
 8006398:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80063a0:	68b9      	ldr	r1, [r7, #8]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2202      	movs	r2, #2
 80063a6:	0018      	movs	r0, r3
 80063a8:	f000 fcae 	bl	8006d08 <USBD_CtlSendData>
              break;
 80063ac:	e080      	b.n	80064b0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80063ae:	220e      	movs	r2, #14
 80063b0:	18bb      	adds	r3, r7, r2
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	b25b      	sxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	da14      	bge.n	80063e4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80063ba:	18bb      	adds	r3, r7, r2
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	220f      	movs	r2, #15
 80063c0:	401a      	ands	r2, r3
 80063c2:	6879      	ldr	r1, [r7, #4]
 80063c4:	0013      	movs	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	189b      	adds	r3, r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	18cb      	adds	r3, r1, r3
 80063ce:	3318      	adds	r3, #24
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d11e      	bne.n	8006414 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	0011      	movs	r1, r2
 80063dc:	0018      	movs	r0, r3
 80063de:	f000 fc15 	bl	8006c0c <USBD_CtlError>
                  break;
 80063e2:	e065      	b.n	80064b0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80063e4:	230e      	movs	r3, #14
 80063e6:	18fb      	adds	r3, r7, r3
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	220f      	movs	r2, #15
 80063ec:	401a      	ands	r2, r3
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	23ac      	movs	r3, #172	; 0xac
 80063f2:	0059      	lsls	r1, r3, #1
 80063f4:	0013      	movs	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	189b      	adds	r3, r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	18c3      	adds	r3, r0, r3
 80063fe:	185b      	adds	r3, r3, r1
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d106      	bne.n	8006414 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	0011      	movs	r1, r2
 800640c:	0018      	movs	r0, r3
 800640e:	f000 fbfd 	bl	8006c0c <USBD_CtlError>
                  break;
 8006412:	e04d      	b.n	80064b0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006414:	220e      	movs	r2, #14
 8006416:	18bb      	adds	r3, r7, r2
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	b25b      	sxtb	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	da0c      	bge.n	800643a <USBD_StdEPReq+0x2c8>
 8006420:	18bb      	adds	r3, r7, r2
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	227f      	movs	r2, #127	; 0x7f
 8006426:	401a      	ands	r2, r3
 8006428:	0013      	movs	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	189b      	adds	r3, r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	3310      	adds	r3, #16
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	18d3      	adds	r3, r2, r3
 8006436:	3304      	adds	r3, #4
 8006438:	e00d      	b.n	8006456 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800643a:	230e      	movs	r3, #14
 800643c:	18fb      	adds	r3, r7, r3
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	227f      	movs	r2, #127	; 0x7f
 8006442:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006444:	0013      	movs	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	189b      	adds	r3, r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	3351      	adds	r3, #81	; 0x51
 800644e:	33ff      	adds	r3, #255	; 0xff
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	18d3      	adds	r3, r2, r3
 8006454:	3304      	adds	r3, #4
 8006456:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006458:	220e      	movs	r2, #14
 800645a:	18bb      	adds	r3, r7, r2
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <USBD_StdEPReq+0x2f8>
 8006462:	18bb      	adds	r3, r7, r2
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2b80      	cmp	r3, #128	; 0x80
 8006468:	d103      	bne.n	8006472 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	e010      	b.n	8006494 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006472:	230e      	movs	r3, #14
 8006474:	18fb      	adds	r3, r7, r3
 8006476:	781a      	ldrb	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	0011      	movs	r1, r2
 800647c:	0018      	movs	r0, r3
 800647e:	f001 f816 	bl	80074ae <USBD_LL_IsStallEP>
 8006482:	1e03      	subs	r3, r0, #0
 8006484:	d003      	beq.n	800648e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2201      	movs	r2, #1
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	e002      	b.n	8006494 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2202      	movs	r2, #2
 800649a:	0018      	movs	r0, r3
 800649c:	f000 fc34 	bl	8006d08 <USBD_CtlSendData>
              break;
 80064a0:	e006      	b.n	80064b0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	0011      	movs	r1, r2
 80064a8:	0018      	movs	r0, r3
 80064aa:	f000 fbaf 	bl	8006c0c <USBD_CtlError>
              break;
 80064ae:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80064b0:	e006      	b.n	80064c0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	0011      	movs	r1, r2
 80064b8:	0018      	movs	r0, r3
 80064ba:	f000 fba7 	bl	8006c0c <USBD_CtlError>
          break;
 80064be:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80064c0:	e006      	b.n	80064d0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	0011      	movs	r1, r2
 80064c8:	0018      	movs	r0, r3
 80064ca:	f000 fb9f 	bl	8006c0c <USBD_CtlError>
      break;
 80064ce:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80064d0:	230f      	movs	r3, #15
 80064d2:	18fb      	adds	r3, r7, r3
 80064d4:	781b      	ldrb	r3, [r3, #0]
}
 80064d6:	0018      	movs	r0, r3
 80064d8:	46bd      	mov	sp, r7
 80064da:	b004      	add	sp, #16
 80064dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080064e0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064ea:	2308      	movs	r3, #8
 80064ec:	18fb      	adds	r3, r7, r3
 80064ee:	2200      	movs	r2, #0
 80064f0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80064f6:	230b      	movs	r3, #11
 80064f8:	18fb      	adds	r3, r7, r3
 80064fa:	2200      	movs	r2, #0
 80064fc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	885b      	ldrh	r3, [r3, #2]
 8006502:	0a1b      	lsrs	r3, r3, #8
 8006504:	b29b      	uxth	r3, r3
 8006506:	2b07      	cmp	r3, #7
 8006508:	d900      	bls.n	800650c <USBD_GetDescriptor+0x2c>
 800650a:	e159      	b.n	80067c0 <USBD_GetDescriptor+0x2e0>
 800650c:	009a      	lsls	r2, r3, #2
 800650e:	4bcb      	ldr	r3, [pc, #812]	; (800683c <USBD_GetDescriptor+0x35c>)
 8006510:	18d3      	adds	r3, r2, r3
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	23ac      	movs	r3, #172	; 0xac
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	58d3      	ldr	r3, [r2, r3]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	7c12      	ldrb	r2, [r2, #16]
 8006524:	2108      	movs	r1, #8
 8006526:	1879      	adds	r1, r7, r1
 8006528:	0010      	movs	r0, r2
 800652a:	4798      	blx	r3
 800652c:	0003      	movs	r3, r0
 800652e:	60fb      	str	r3, [r7, #12]
      break;
 8006530:	e153      	b.n	80067da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	7c1b      	ldrb	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10f      	bne.n	800655a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	23ad      	movs	r3, #173	; 0xad
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	58d3      	ldr	r3, [r2, r3]
 8006542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006544:	2208      	movs	r2, #8
 8006546:	18ba      	adds	r2, r7, r2
 8006548:	0010      	movs	r0, r2
 800654a:	4798      	blx	r3
 800654c:	0003      	movs	r3, r0
 800654e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3301      	adds	r3, #1
 8006554:	2202      	movs	r2, #2
 8006556:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006558:	e13f      	b.n	80067da <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	23ad      	movs	r3, #173	; 0xad
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	58d3      	ldr	r3, [r2, r3]
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	2208      	movs	r2, #8
 8006566:	18ba      	adds	r2, r7, r2
 8006568:	0010      	movs	r0, r2
 800656a:	4798      	blx	r3
 800656c:	0003      	movs	r3, r0
 800656e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3301      	adds	r3, #1
 8006574:	2202      	movs	r2, #2
 8006576:	701a      	strb	r2, [r3, #0]
      break;
 8006578:	e12f      	b.n	80067da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	885b      	ldrh	r3, [r3, #2]
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b05      	cmp	r3, #5
 8006582:	d900      	bls.n	8006586 <USBD_GetDescriptor+0xa6>
 8006584:	e0d0      	b.n	8006728 <USBD_GetDescriptor+0x248>
 8006586:	009a      	lsls	r2, r3, #2
 8006588:	4bad      	ldr	r3, [pc, #692]	; (8006840 <USBD_GetDescriptor+0x360>)
 800658a:	18d3      	adds	r3, r2, r3
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	23ac      	movs	r3, #172	; 0xac
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	58d3      	ldr	r3, [r2, r3]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00d      	beq.n	80065ba <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	23ac      	movs	r3, #172	; 0xac
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	58d3      	ldr	r3, [r2, r3]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	7c12      	ldrb	r2, [r2, #16]
 80065ac:	2108      	movs	r1, #8
 80065ae:	1879      	adds	r1, r7, r1
 80065b0:	0010      	movs	r0, r2
 80065b2:	4798      	blx	r3
 80065b4:	0003      	movs	r3, r0
 80065b6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065b8:	e0c3      	b.n	8006742 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	0011      	movs	r1, r2
 80065c0:	0018      	movs	r0, r3
 80065c2:	f000 fb23 	bl	8006c0c <USBD_CtlError>
            err++;
 80065c6:	210b      	movs	r1, #11
 80065c8:	187b      	adds	r3, r7, r1
 80065ca:	781a      	ldrb	r2, [r3, #0]
 80065cc:	187b      	adds	r3, r7, r1
 80065ce:	3201      	adds	r2, #1
 80065d0:	701a      	strb	r2, [r3, #0]
          break;
 80065d2:	e0b6      	b.n	8006742 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	23ac      	movs	r3, #172	; 0xac
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	58d3      	ldr	r3, [r2, r3]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00d      	beq.n	80065fe <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	23ac      	movs	r3, #172	; 0xac
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	58d3      	ldr	r3, [r2, r3]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	7c12      	ldrb	r2, [r2, #16]
 80065f0:	2108      	movs	r1, #8
 80065f2:	1879      	adds	r1, r7, r1
 80065f4:	0010      	movs	r0, r2
 80065f6:	4798      	blx	r3
 80065f8:	0003      	movs	r3, r0
 80065fa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065fc:	e0a1      	b.n	8006742 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	0011      	movs	r1, r2
 8006604:	0018      	movs	r0, r3
 8006606:	f000 fb01 	bl	8006c0c <USBD_CtlError>
            err++;
 800660a:	210b      	movs	r1, #11
 800660c:	187b      	adds	r3, r7, r1
 800660e:	781a      	ldrb	r2, [r3, #0]
 8006610:	187b      	adds	r3, r7, r1
 8006612:	3201      	adds	r2, #1
 8006614:	701a      	strb	r2, [r3, #0]
          break;
 8006616:	e094      	b.n	8006742 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	23ac      	movs	r3, #172	; 0xac
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	58d3      	ldr	r3, [r2, r3]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00d      	beq.n	8006642 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	23ac      	movs	r3, #172	; 0xac
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	58d3      	ldr	r3, [r2, r3]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	7c12      	ldrb	r2, [r2, #16]
 8006634:	2108      	movs	r1, #8
 8006636:	1879      	adds	r1, r7, r1
 8006638:	0010      	movs	r0, r2
 800663a:	4798      	blx	r3
 800663c:	0003      	movs	r3, r0
 800663e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006640:	e07f      	b.n	8006742 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	0011      	movs	r1, r2
 8006648:	0018      	movs	r0, r3
 800664a:	f000 fadf 	bl	8006c0c <USBD_CtlError>
            err++;
 800664e:	210b      	movs	r1, #11
 8006650:	187b      	adds	r3, r7, r1
 8006652:	781a      	ldrb	r2, [r3, #0]
 8006654:	187b      	adds	r3, r7, r1
 8006656:	3201      	adds	r2, #1
 8006658:	701a      	strb	r2, [r3, #0]
          break;
 800665a:	e072      	b.n	8006742 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	23ac      	movs	r3, #172	; 0xac
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	58d3      	ldr	r3, [r2, r3]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00d      	beq.n	8006686 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	23ac      	movs	r3, #172	; 0xac
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	58d3      	ldr	r3, [r2, r3]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	7c12      	ldrb	r2, [r2, #16]
 8006678:	2108      	movs	r1, #8
 800667a:	1879      	adds	r1, r7, r1
 800667c:	0010      	movs	r0, r2
 800667e:	4798      	blx	r3
 8006680:	0003      	movs	r3, r0
 8006682:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006684:	e05d      	b.n	8006742 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	0011      	movs	r1, r2
 800668c:	0018      	movs	r0, r3
 800668e:	f000 fabd 	bl	8006c0c <USBD_CtlError>
            err++;
 8006692:	210b      	movs	r1, #11
 8006694:	187b      	adds	r3, r7, r1
 8006696:	781a      	ldrb	r2, [r3, #0]
 8006698:	187b      	adds	r3, r7, r1
 800669a:	3201      	adds	r2, #1
 800669c:	701a      	strb	r2, [r3, #0]
          break;
 800669e:	e050      	b.n	8006742 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	23ac      	movs	r3, #172	; 0xac
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	58d3      	ldr	r3, [r2, r3]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00d      	beq.n	80066ca <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	23ac      	movs	r3, #172	; 0xac
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	58d3      	ldr	r3, [r2, r3]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	7c12      	ldrb	r2, [r2, #16]
 80066bc:	2108      	movs	r1, #8
 80066be:	1879      	adds	r1, r7, r1
 80066c0:	0010      	movs	r0, r2
 80066c2:	4798      	blx	r3
 80066c4:	0003      	movs	r3, r0
 80066c6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066c8:	e03b      	b.n	8006742 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	0011      	movs	r1, r2
 80066d0:	0018      	movs	r0, r3
 80066d2:	f000 fa9b 	bl	8006c0c <USBD_CtlError>
            err++;
 80066d6:	210b      	movs	r1, #11
 80066d8:	187b      	adds	r3, r7, r1
 80066da:	781a      	ldrb	r2, [r3, #0]
 80066dc:	187b      	adds	r3, r7, r1
 80066de:	3201      	adds	r2, #1
 80066e0:	701a      	strb	r2, [r3, #0]
          break;
 80066e2:	e02e      	b.n	8006742 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	23ac      	movs	r3, #172	; 0xac
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	58d3      	ldr	r3, [r2, r3]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00d      	beq.n	800670e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	23ac      	movs	r3, #172	; 0xac
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	58d3      	ldr	r3, [r2, r3]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	7c12      	ldrb	r2, [r2, #16]
 8006700:	2108      	movs	r1, #8
 8006702:	1879      	adds	r1, r7, r1
 8006704:	0010      	movs	r0, r2
 8006706:	4798      	blx	r3
 8006708:	0003      	movs	r3, r0
 800670a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800670c:	e019      	b.n	8006742 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	0011      	movs	r1, r2
 8006714:	0018      	movs	r0, r3
 8006716:	f000 fa79 	bl	8006c0c <USBD_CtlError>
            err++;
 800671a:	210b      	movs	r1, #11
 800671c:	187b      	adds	r3, r7, r1
 800671e:	781a      	ldrb	r2, [r3, #0]
 8006720:	187b      	adds	r3, r7, r1
 8006722:	3201      	adds	r2, #1
 8006724:	701a      	strb	r2, [r3, #0]
          break;
 8006726:	e00c      	b.n	8006742 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	0011      	movs	r1, r2
 800672e:	0018      	movs	r0, r3
 8006730:	f000 fa6c 	bl	8006c0c <USBD_CtlError>
          err++;
 8006734:	210b      	movs	r1, #11
 8006736:	187b      	adds	r3, r7, r1
 8006738:	781a      	ldrb	r2, [r3, #0]
 800673a:	187b      	adds	r3, r7, r1
 800673c:	3201      	adds	r2, #1
 800673e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006740:	e04b      	b.n	80067da <USBD_GetDescriptor+0x2fa>
 8006742:	e04a      	b.n	80067da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	7c1b      	ldrb	r3, [r3, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10b      	bne.n	8006764 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	23ad      	movs	r3, #173	; 0xad
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	58d3      	ldr	r3, [r2, r3]
 8006754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006756:	2208      	movs	r2, #8
 8006758:	18ba      	adds	r2, r7, r2
 800675a:	0010      	movs	r0, r2
 800675c:	4798      	blx	r3
 800675e:	0003      	movs	r3, r0
 8006760:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006762:	e03a      	b.n	80067da <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	0011      	movs	r1, r2
 800676a:	0018      	movs	r0, r3
 800676c:	f000 fa4e 	bl	8006c0c <USBD_CtlError>
        err++;
 8006770:	210b      	movs	r1, #11
 8006772:	187b      	adds	r3, r7, r1
 8006774:	781a      	ldrb	r2, [r3, #0]
 8006776:	187b      	adds	r3, r7, r1
 8006778:	3201      	adds	r2, #1
 800677a:	701a      	strb	r2, [r3, #0]
      break;
 800677c:	e02d      	b.n	80067da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	7c1b      	ldrb	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10f      	bne.n	80067a6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	23ad      	movs	r3, #173	; 0xad
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	58d3      	ldr	r3, [r2, r3]
 800678e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006790:	2208      	movs	r2, #8
 8006792:	18ba      	adds	r2, r7, r2
 8006794:	0010      	movs	r0, r2
 8006796:	4798      	blx	r3
 8006798:	0003      	movs	r3, r0
 800679a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	3301      	adds	r3, #1
 80067a0:	2207      	movs	r2, #7
 80067a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067a4:	e019      	b.n	80067da <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	0011      	movs	r1, r2
 80067ac:	0018      	movs	r0, r3
 80067ae:	f000 fa2d 	bl	8006c0c <USBD_CtlError>
        err++;
 80067b2:	210b      	movs	r1, #11
 80067b4:	187b      	adds	r3, r7, r1
 80067b6:	781a      	ldrb	r2, [r3, #0]
 80067b8:	187b      	adds	r3, r7, r1
 80067ba:	3201      	adds	r2, #1
 80067bc:	701a      	strb	r2, [r3, #0]
      break;
 80067be:	e00c      	b.n	80067da <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	0011      	movs	r1, r2
 80067c6:	0018      	movs	r0, r3
 80067c8:	f000 fa20 	bl	8006c0c <USBD_CtlError>
      err++;
 80067cc:	210b      	movs	r1, #11
 80067ce:	187b      	adds	r3, r7, r1
 80067d0:	781a      	ldrb	r2, [r3, #0]
 80067d2:	187b      	adds	r3, r7, r1
 80067d4:	3201      	adds	r2, #1
 80067d6:	701a      	strb	r2, [r3, #0]
      break;
 80067d8:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 80067da:	230b      	movs	r3, #11
 80067dc:	18fb      	adds	r3, r7, r3
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d127      	bne.n	8006834 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80067e4:	2108      	movs	r1, #8
 80067e6:	187b      	adds	r3, r7, r1
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d019      	beq.n	8006822 <USBD_GetDescriptor+0x342>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	88db      	ldrh	r3, [r3, #6]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d015      	beq.n	8006822 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	88da      	ldrh	r2, [r3, #6]
 80067fa:	187b      	adds	r3, r7, r1
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	1c18      	adds	r0, r3, #0
 8006800:	1c11      	adds	r1, r2, #0
 8006802:	b28a      	uxth	r2, r1
 8006804:	b283      	uxth	r3, r0
 8006806:	429a      	cmp	r2, r3
 8006808:	d900      	bls.n	800680c <USBD_GetDescriptor+0x32c>
 800680a:	1c01      	adds	r1, r0, #0
 800680c:	b28a      	uxth	r2, r1
 800680e:	2108      	movs	r1, #8
 8006810:	187b      	adds	r3, r7, r1
 8006812:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006814:	187b      	adds	r3, r7, r1
 8006816:	881a      	ldrh	r2, [r3, #0]
 8006818:	68f9      	ldr	r1, [r7, #12]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	0018      	movs	r0, r3
 800681e:	f000 fa73 	bl	8006d08 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	88db      	ldrh	r3, [r3, #6]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d105      	bne.n	8006836 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	0018      	movs	r0, r3
 800682e:	f000 fab1 	bl	8006d94 <USBD_CtlSendStatus>
 8006832:	e000      	b.n	8006836 <USBD_GetDescriptor+0x356>
    return;
 8006834:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006836:	46bd      	mov	sp, r7
 8006838:	b004      	add	sp, #16
 800683a:	bd80      	pop	{r7, pc}
 800683c:	080077e4 	.word	0x080077e4
 8006840:	08007804 	.word	0x08007804

08006844 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006844:	b590      	push	{r4, r7, lr}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	889b      	ldrh	r3, [r3, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d13d      	bne.n	80068d2 <USBD_SetAddress+0x8e>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	88db      	ldrh	r3, [r3, #6]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d139      	bne.n	80068d2 <USBD_SetAddress+0x8e>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	885b      	ldrh	r3, [r3, #2]
 8006862:	2b7f      	cmp	r3, #127	; 0x7f
 8006864:	d835      	bhi.n	80068d2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	885b      	ldrh	r3, [r3, #2]
 800686a:	b2da      	uxtb	r2, r3
 800686c:	230f      	movs	r3, #15
 800686e:	18fb      	adds	r3, r7, r3
 8006870:	217f      	movs	r1, #127	; 0x7f
 8006872:	400a      	ands	r2, r1
 8006874:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	23a7      	movs	r3, #167	; 0xa7
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	5cd3      	ldrb	r3, [r2, r3]
 800687e:	2b03      	cmp	r3, #3
 8006880:	d106      	bne.n	8006890 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	0011      	movs	r1, r2
 8006888:	0018      	movs	r0, r3
 800688a:	f000 f9bf 	bl	8006c0c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800688e:	e027      	b.n	80068e0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	240f      	movs	r4, #15
 8006894:	193a      	adds	r2, r7, r4
 8006896:	4914      	ldr	r1, [pc, #80]	; (80068e8 <USBD_SetAddress+0xa4>)
 8006898:	7812      	ldrb	r2, [r2, #0]
 800689a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800689c:	193b      	adds	r3, r7, r4
 800689e:	781a      	ldrb	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	0011      	movs	r1, r2
 80068a4:	0018      	movs	r0, r3
 80068a6:	f000 fe33 	bl	8007510 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	0018      	movs	r0, r3
 80068ae:	f000 fa71 	bl	8006d94 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068b2:	193b      	adds	r3, r7, r4
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d005      	beq.n	80068c6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	23a7      	movs	r3, #167	; 0xa7
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	2102      	movs	r1, #2
 80068c2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068c4:	e00c      	b.n	80068e0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	23a7      	movs	r3, #167	; 0xa7
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	2101      	movs	r1, #1
 80068ce:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d0:	e006      	b.n	80068e0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	0011      	movs	r1, r2
 80068d8:	0018      	movs	r0, r3
 80068da:	f000 f997 	bl	8006c0c <USBD_CtlError>
  }
}
 80068de:	46c0      	nop			; (mov r8, r8)
 80068e0:	46c0      	nop			; (mov r8, r8)
 80068e2:	46bd      	mov	sp, r7
 80068e4:	b005      	add	sp, #20
 80068e6:	bd90      	pop	{r4, r7, pc}
 80068e8:	0000029e 	.word	0x0000029e

080068ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	885b      	ldrh	r3, [r3, #2]
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	4b4c      	ldr	r3, [pc, #304]	; (8006a30 <USBD_SetConfig+0x144>)
 80068fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006900:	4b4b      	ldr	r3, [pc, #300]	; (8006a30 <USBD_SetConfig+0x144>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d906      	bls.n	8006916 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	0011      	movs	r1, r2
 800690e:	0018      	movs	r0, r3
 8006910:	f000 f97c 	bl	8006c0c <USBD_CtlError>
 8006914:	e088      	b.n	8006a28 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	23a7      	movs	r3, #167	; 0xa7
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	5cd3      	ldrb	r3, [r2, r3]
 800691e:	2b02      	cmp	r3, #2
 8006920:	d002      	beq.n	8006928 <USBD_SetConfig+0x3c>
 8006922:	2b03      	cmp	r3, #3
 8006924:	d029      	beq.n	800697a <USBD_SetConfig+0x8e>
 8006926:	e071      	b.n	8006a0c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006928:	4b41      	ldr	r3, [pc, #260]	; (8006a30 <USBD_SetConfig+0x144>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d01f      	beq.n	8006970 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8006930:	4b3f      	ldr	r3, [pc, #252]	; (8006a30 <USBD_SetConfig+0x144>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	001a      	movs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	23a7      	movs	r3, #167	; 0xa7
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	2103      	movs	r1, #3
 8006942:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006944:	4b3a      	ldr	r3, [pc, #232]	; (8006a30 <USBD_SetConfig+0x144>)
 8006946:	781a      	ldrb	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	0011      	movs	r1, r2
 800694c:	0018      	movs	r0, r3
 800694e:	f7ff f8c6 	bl	8005ade <USBD_SetClassConfig>
 8006952:	0003      	movs	r3, r0
 8006954:	2b02      	cmp	r3, #2
 8006956:	d106      	bne.n	8006966 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	0011      	movs	r1, r2
 800695e:	0018      	movs	r0, r3
 8006960:	f000 f954 	bl	8006c0c <USBD_CtlError>
            return;
 8006964:	e060      	b.n	8006a28 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	0018      	movs	r0, r3
 800696a:	f000 fa13 	bl	8006d94 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800696e:	e05b      	b.n	8006a28 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	0018      	movs	r0, r3
 8006974:	f000 fa0e 	bl	8006d94 <USBD_CtlSendStatus>
        break;
 8006978:	e056      	b.n	8006a28 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800697a:	4b2d      	ldr	r3, [pc, #180]	; (8006a30 <USBD_SetConfig+0x144>)
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d115      	bne.n	80069ae <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	23a7      	movs	r3, #167	; 0xa7
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	2102      	movs	r1, #2
 800698a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800698c:	4b28      	ldr	r3, [pc, #160]	; (8006a30 <USBD_SetConfig+0x144>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	001a      	movs	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006996:	4b26      	ldr	r3, [pc, #152]	; (8006a30 <USBD_SetConfig+0x144>)
 8006998:	781a      	ldrb	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	0011      	movs	r1, r2
 800699e:	0018      	movs	r0, r3
 80069a0:	f7ff f8c4 	bl	8005b2c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	0018      	movs	r0, r3
 80069a8:	f000 f9f4 	bl	8006d94 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80069ac:	e03c      	b.n	8006a28 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80069ae:	4b20      	ldr	r3, [pc, #128]	; (8006a30 <USBD_SetConfig+0x144>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	001a      	movs	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d022      	beq.n	8006a02 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	0011      	movs	r1, r2
 80069c6:	0018      	movs	r0, r3
 80069c8:	f7ff f8b0 	bl	8005b2c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80069cc:	4b18      	ldr	r3, [pc, #96]	; (8006a30 <USBD_SetConfig+0x144>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	001a      	movs	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80069d6:	4b16      	ldr	r3, [pc, #88]	; (8006a30 <USBD_SetConfig+0x144>)
 80069d8:	781a      	ldrb	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	0011      	movs	r1, r2
 80069de:	0018      	movs	r0, r3
 80069e0:	f7ff f87d 	bl	8005ade <USBD_SetClassConfig>
 80069e4:	0003      	movs	r3, r0
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d106      	bne.n	80069f8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	0011      	movs	r1, r2
 80069f0:	0018      	movs	r0, r3
 80069f2:	f000 f90b 	bl	8006c0c <USBD_CtlError>
            return;
 80069f6:	e017      	b.n	8006a28 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	0018      	movs	r0, r3
 80069fc:	f000 f9ca 	bl	8006d94 <USBD_CtlSendStatus>
        break;
 8006a00:	e012      	b.n	8006a28 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	0018      	movs	r0, r3
 8006a06:	f000 f9c5 	bl	8006d94 <USBD_CtlSendStatus>
        break;
 8006a0a:	e00d      	b.n	8006a28 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	0011      	movs	r1, r2
 8006a12:	0018      	movs	r0, r3
 8006a14:	f000 f8fa 	bl	8006c0c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006a18:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <USBD_SetConfig+0x144>)
 8006a1a:	781a      	ldrb	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	0011      	movs	r1, r2
 8006a20:	0018      	movs	r0, r3
 8006a22:	f7ff f883 	bl	8005b2c <USBD_ClrClassConfig>
        break;
 8006a26:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	b002      	add	sp, #8
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	46c0      	nop			; (mov r8, r8)
 8006a30:	20000180 	.word	0x20000180

08006a34 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	88db      	ldrh	r3, [r3, #6]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d006      	beq.n	8006a54 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	0011      	movs	r1, r2
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	f000 f8dd 	bl	8006c0c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a52:	e026      	b.n	8006aa2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	23a7      	movs	r3, #167	; 0xa7
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	5cd3      	ldrb	r3, [r2, r3]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	dc02      	bgt.n	8006a66 <USBD_GetConfig+0x32>
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	dc03      	bgt.n	8006a6c <USBD_GetConfig+0x38>
 8006a64:	e016      	b.n	8006a94 <USBD_GetConfig+0x60>
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	d00c      	beq.n	8006a84 <USBD_GetConfig+0x50>
 8006a6a:	e013      	b.n	8006a94 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	3308      	adds	r3, #8
 8006a76:	0019      	movs	r1, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	f000 f943 	bl	8006d08 <USBD_CtlSendData>
        break;
 8006a82:	e00e      	b.n	8006aa2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	1d19      	adds	r1, r3, #4
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	f000 f93b 	bl	8006d08 <USBD_CtlSendData>
        break;
 8006a92:	e006      	b.n	8006aa2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	0011      	movs	r1, r2
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	f000 f8b6 	bl	8006c0c <USBD_CtlError>
        break;
 8006aa0:	46c0      	nop			; (mov r8, r8)
}
 8006aa2:	46c0      	nop			; (mov r8, r8)
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	b002      	add	sp, #8
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b082      	sub	sp, #8
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	23a7      	movs	r3, #167	; 0xa7
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	5cd3      	ldrb	r3, [r2, r3]
 8006abc:	3b01      	subs	r3, #1
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d822      	bhi.n	8006b08 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	88db      	ldrh	r3, [r3, #6]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d006      	beq.n	8006ad8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	0011      	movs	r1, r2
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f000 f89b 	bl	8006c0c <USBD_CtlError>
        break;
 8006ad6:	e01e      	b.n	8006b16 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	23a9      	movs	r3, #169	; 0xa9
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	58d3      	ldr	r3, [r2, r3]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d005      	beq.n	8006af6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	2202      	movs	r2, #2
 8006af0:	431a      	orrs	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	330c      	adds	r3, #12
 8006afa:	0019      	movs	r1, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	0018      	movs	r0, r3
 8006b02:	f000 f901 	bl	8006d08 <USBD_CtlSendData>
      break;
 8006b06:	e006      	b.n	8006b16 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	0011      	movs	r1, r2
 8006b0e:	0018      	movs	r0, r3
 8006b10:	f000 f87c 	bl	8006c0c <USBD_CtlError>
      break;
 8006b14:	46c0      	nop			; (mov r8, r8)
  }
}
 8006b16:	46c0      	nop			; (mov r8, r8)
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	b002      	add	sp, #8
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b082      	sub	sp, #8
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	885b      	ldrh	r3, [r3, #2]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d108      	bne.n	8006b42 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	23a9      	movs	r3, #169	; 0xa9
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	2101      	movs	r1, #1
 8006b38:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	f000 f929 	bl	8006d94 <USBD_CtlSendStatus>
  }
}
 8006b42:	46c0      	nop			; (mov r8, r8)
 8006b44:	46bd      	mov	sp, r7
 8006b46:	b002      	add	sp, #8
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	23a7      	movs	r3, #167	; 0xa7
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	5cd3      	ldrb	r3, [r2, r3]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d80d      	bhi.n	8006b7e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	885b      	ldrh	r3, [r3, #2]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d110      	bne.n	8006b8c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	23a9      	movs	r3, #169	; 0xa9
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	2100      	movs	r1, #0
 8006b72:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	0018      	movs	r0, r3
 8006b78:	f000 f90c 	bl	8006d94 <USBD_CtlSendStatus>
      }
      break;
 8006b7c:	e006      	b.n	8006b8c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	0011      	movs	r1, r2
 8006b84:	0018      	movs	r0, r3
 8006b86:	f000 f841 	bl	8006c0c <USBD_CtlError>
      break;
 8006b8a:	e000      	b.n	8006b8e <USBD_ClrFeature+0x44>
      break;
 8006b8c:	46c0      	nop			; (mov r8, r8)
  }
}
 8006b8e:	46c0      	nop			; (mov r8, r8)
 8006b90:	46bd      	mov	sp, r7
 8006b92:	b002      	add	sp, #8
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781a      	ldrb	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	785a      	ldrb	r2, [r3, #1]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	3302      	adds	r3, #2
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	3303      	adds	r3, #3
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	021b      	lsls	r3, r3, #8
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	18d3      	adds	r3, r2, r3
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	3304      	adds	r3, #4
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	3305      	adds	r3, #5
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	021b      	lsls	r3, r3, #8
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	18d3      	adds	r3, r2, r3
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	3306      	adds	r3, #6
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	3307      	adds	r3, #7
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	021b      	lsls	r3, r3, #8
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	18d3      	adds	r3, r2, r3
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	80da      	strh	r2, [r3, #6]

}
 8006c04:	46c0      	nop			; (mov r8, r8)
 8006c06:	46bd      	mov	sp, r7
 8006c08:	b002      	add	sp, #8
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2180      	movs	r1, #128	; 0x80
 8006c1a:	0018      	movs	r0, r3
 8006c1c:	f000 fbf1 	bl	8007402 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2100      	movs	r1, #0
 8006c24:	0018      	movs	r0, r3
 8006c26:	f000 fbec 	bl	8007402 <USBD_LL_StallEP>
}
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	b002      	add	sp, #8
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c32:	b590      	push	{r4, r7, lr}
 8006c34:	b087      	sub	sp, #28
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c3e:	2417      	movs	r4, #23
 8006c40:	193b      	adds	r3, r7, r4
 8006c42:	2200      	movs	r2, #0
 8006c44:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d03c      	beq.n	8006cc6 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	0018      	movs	r0, r3
 8006c50:	f000 f83d 	bl	8006cce <USBD_GetLen>
 8006c54:	0003      	movs	r3, r0
 8006c56:	3301      	adds	r3, #1
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	18db      	adds	r3, r3, r3
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006c62:	193b      	adds	r3, r7, r4
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	193a      	adds	r2, r7, r4
 8006c68:	1c59      	adds	r1, r3, #1
 8006c6a:	7011      	strb	r1, [r2, #0]
 8006c6c:	001a      	movs	r2, r3
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	189b      	adds	r3, r3, r2
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	7812      	ldrb	r2, [r2, #0]
 8006c76:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006c78:	193b      	adds	r3, r7, r4
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	193a      	adds	r2, r7, r4
 8006c7e:	1c59      	adds	r1, r3, #1
 8006c80:	7011      	strb	r1, [r2, #0]
 8006c82:	001a      	movs	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	189b      	adds	r3, r3, r2
 8006c88:	2203      	movs	r2, #3
 8006c8a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006c8c:	e017      	b.n	8006cbe <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	60fa      	str	r2, [r7, #12]
 8006c94:	2417      	movs	r4, #23
 8006c96:	193a      	adds	r2, r7, r4
 8006c98:	7812      	ldrb	r2, [r2, #0]
 8006c9a:	1939      	adds	r1, r7, r4
 8006c9c:	1c50      	adds	r0, r2, #1
 8006c9e:	7008      	strb	r0, [r1, #0]
 8006ca0:	0011      	movs	r1, r2
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	1852      	adds	r2, r2, r1
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006caa:	193b      	adds	r3, r7, r4
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	193a      	adds	r2, r7, r4
 8006cb0:	1c59      	adds	r1, r3, #1
 8006cb2:	7011      	strb	r1, [r2, #0]
 8006cb4:	001a      	movs	r2, r3
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	189b      	adds	r3, r3, r2
 8006cba:	2200      	movs	r2, #0
 8006cbc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e3      	bne.n	8006c8e <USBD_GetString+0x5c>
    }
  }
}
 8006cc6:	46c0      	nop			; (mov r8, r8)
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	b007      	add	sp, #28
 8006ccc:	bd90      	pop	{r4, r7, pc}

08006cce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cd6:	230f      	movs	r3, #15
 8006cd8:	18fb      	adds	r3, r7, r3
 8006cda:	2200      	movs	r2, #0
 8006cdc:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8006cde:	e008      	b.n	8006cf2 <USBD_GetLen+0x24>
  {
    len++;
 8006ce0:	210f      	movs	r1, #15
 8006ce2:	187b      	adds	r3, r7, r1
 8006ce4:	781a      	ldrb	r2, [r3, #0]
 8006ce6:	187b      	adds	r3, r7, r1
 8006ce8:	3201      	adds	r2, #1
 8006cea:	701a      	strb	r2, [r3, #0]
    buf++;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1f2      	bne.n	8006ce0 <USBD_GetLen+0x12>
  }

  return len;
 8006cfa:	230f      	movs	r3, #15
 8006cfc:	18fb      	adds	r3, r7, r3
 8006cfe:	781b      	ldrb	r3, [r3, #0]
}
 8006d00:	0018      	movs	r0, r3
 8006d02:	46bd      	mov	sp, r7
 8006d04:	b004      	add	sp, #16
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	1dbb      	adds	r3, r7, #6
 8006d14:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	23a5      	movs	r3, #165	; 0xa5
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	2102      	movs	r1, #2
 8006d1e:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8006d20:	1dbb      	adds	r3, r7, #6
 8006d22:	881a      	ldrh	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006d28:	1dbb      	adds	r3, r7, #6
 8006d2a:	881a      	ldrh	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d30:	1dbb      	adds	r3, r7, #6
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	2100      	movs	r1, #0
 8006d3a:	f000 fc14 	bl	8007566 <USBD_LL_Transmit>

  return USBD_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	0018      	movs	r0, r3
 8006d42:	46bd      	mov	sp, r7
 8006d44:	b004      	add	sp, #16
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	1dbb      	adds	r3, r7, #6
 8006d54:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d56:	1dbb      	adds	r3, r7, #6
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	2100      	movs	r1, #0
 8006d60:	f000 fc01 	bl	8007566 <USBD_LL_Transmit>

  return USBD_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	0018      	movs	r0, r3
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	b004      	add	sp, #16
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b084      	sub	sp, #16
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	1dbb      	adds	r3, r7, #6
 8006d7a:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d7c:	1dbb      	adds	r3, r7, #6
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	2100      	movs	r1, #0
 8006d86:	f000 fc25 	bl	80075d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	b004      	add	sp, #16
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	23a5      	movs	r3, #165	; 0xa5
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	2104      	movs	r1, #4
 8006da4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	2300      	movs	r3, #0
 8006daa:	2200      	movs	r2, #0
 8006dac:	2100      	movs	r1, #0
 8006dae:	f000 fbda 	bl	8007566 <USBD_LL_Transmit>

  return USBD_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	0018      	movs	r0, r3
 8006db6:	46bd      	mov	sp, r7
 8006db8:	b002      	add	sp, #8
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	23a5      	movs	r3, #165	; 0xa5
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	2105      	movs	r1, #5
 8006dcc:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	f000 fbfd 	bl	80075d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	0018      	movs	r0, r3
 8006dde:	46bd      	mov	sp, r7
 8006de0:	b002      	add	sp, #8
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006de8:	490f      	ldr	r1, [pc, #60]	; (8006e28 <MX_USB_DEVICE_Init+0x44>)
 8006dea:	4b10      	ldr	r3, [pc, #64]	; (8006e2c <MX_USB_DEVICE_Init+0x48>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	0018      	movs	r0, r3
 8006df0:	f7fe fe0e 	bl	8005a10 <USBD_Init>
 8006df4:	1e03      	subs	r3, r0, #0
 8006df6:	d001      	beq.n	8006dfc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006df8:	f7f9 fc1e 	bl	8000638 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006dfc:	4a0c      	ldr	r2, [pc, #48]	; (8006e30 <MX_USB_DEVICE_Init+0x4c>)
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <MX_USB_DEVICE_Init+0x48>)
 8006e00:	0011      	movs	r1, r2
 8006e02:	0018      	movs	r0, r3
 8006e04:	f7fe fe35 	bl	8005a72 <USBD_RegisterClass>
 8006e08:	1e03      	subs	r3, r0, #0
 8006e0a:	d001      	beq.n	8006e10 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8006e0c:	f7f9 fc14 	bl	8000638 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e10:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <MX_USB_DEVICE_Init+0x48>)
 8006e12:	0018      	movs	r0, r3
 8006e14:	f7fe fe4d 	bl	8005ab2 <USBD_Start>
 8006e18:	1e03      	subs	r3, r0, #0
 8006e1a:	d001      	beq.n	8006e20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e1c:	f7f9 fc0c 	bl	8000638 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e20:	46c0      	nop			; (mov r8, r8)
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	46c0      	nop			; (mov r8, r8)
 8006e28:	20000108 	.word	0x20000108
 8006e2c:	20000184 	.word	0x20000184
 8006e30:	2000000c 	.word	0x2000000c

08006e34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	0002      	movs	r2, r0
 8006e3c:	6039      	str	r1, [r7, #0]
 8006e3e:	1dfb      	adds	r3, r7, #7
 8006e40:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2212      	movs	r2, #18
 8006e46:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e48:	4b02      	ldr	r3, [pc, #8]	; (8006e54 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	b002      	add	sp, #8
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	46c0      	nop			; (mov r8, r8)
 8006e54:	20000124 	.word	0x20000124

08006e58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	0002      	movs	r2, r0
 8006e60:	6039      	str	r1, [r7, #0]
 8006e62:	1dfb      	adds	r3, r7, #7
 8006e64:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2204      	movs	r2, #4
 8006e6a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e6c:	4b02      	ldr	r3, [pc, #8]	; (8006e78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e6e:	0018      	movs	r0, r3
 8006e70:	46bd      	mov	sp, r7
 8006e72:	b002      	add	sp, #8
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	20000138 	.word	0x20000138

08006e7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	0002      	movs	r2, r0
 8006e84:	6039      	str	r1, [r7, #0]
 8006e86:	1dfb      	adds	r3, r7, #7
 8006e88:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8006e8a:	1dfb      	adds	r3, r7, #7
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d106      	bne.n	8006ea0 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	4908      	ldr	r1, [pc, #32]	; (8006eb8 <USBD_FS_ProductStrDescriptor+0x3c>)
 8006e96:	4b09      	ldr	r3, [pc, #36]	; (8006ebc <USBD_FS_ProductStrDescriptor+0x40>)
 8006e98:	0018      	movs	r0, r3
 8006e9a:	f7ff feca 	bl	8006c32 <USBD_GetString>
 8006e9e:	e005      	b.n	8006eac <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	4905      	ldr	r1, [pc, #20]	; (8006eb8 <USBD_FS_ProductStrDescriptor+0x3c>)
 8006ea4:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <USBD_FS_ProductStrDescriptor+0x40>)
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f7ff fec3 	bl	8006c32 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006eac:	4b02      	ldr	r3, [pc, #8]	; (8006eb8 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8006eae:	0018      	movs	r0, r3
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	b002      	add	sp, #8
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	46c0      	nop			; (mov r8, r8)
 8006eb8:	20000448 	.word	0x20000448
 8006ebc:	08007758 	.word	0x08007758

08006ec0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	0002      	movs	r2, r0
 8006ec8:	6039      	str	r1, [r7, #0]
 8006eca:	1dfb      	adds	r3, r7, #7
 8006ecc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	4904      	ldr	r1, [pc, #16]	; (8006ee4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006ed2:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	f7ff feac 	bl	8006c32 <USBD_GetString>
  return USBD_StrDesc;
 8006eda:	4b02      	ldr	r3, [pc, #8]	; (8006ee4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8006edc:	0018      	movs	r0, r3
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	b002      	add	sp, #8
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	20000448 	.word	0x20000448
 8006ee8:	08007770 	.word	0x08007770

08006eec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	0002      	movs	r2, r0
 8006ef4:	6039      	str	r1, [r7, #0]
 8006ef6:	1dfb      	adds	r3, r7, #7
 8006ef8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	221a      	movs	r2, #26
 8006efe:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006f00:	f000 f84c 	bl	8006f9c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006f04:	4b02      	ldr	r3, [pc, #8]	; (8006f10 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8006f06:	0018      	movs	r0, r3
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	b002      	add	sp, #8
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	46c0      	nop			; (mov r8, r8)
 8006f10:	2000013c 	.word	0x2000013c

08006f14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	0002      	movs	r2, r0
 8006f1c:	6039      	str	r1, [r7, #0]
 8006f1e:	1dfb      	adds	r3, r7, #7
 8006f20:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8006f22:	1dfb      	adds	r3, r7, #7
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d106      	bne.n	8006f38 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	4908      	ldr	r1, [pc, #32]	; (8006f50 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8006f2e:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <USBD_FS_ConfigStrDescriptor+0x40>)
 8006f30:	0018      	movs	r0, r3
 8006f32:	f7ff fe7e 	bl	8006c32 <USBD_GetString>
 8006f36:	e005      	b.n	8006f44 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	4905      	ldr	r1, [pc, #20]	; (8006f50 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8006f3c:	4b05      	ldr	r3, [pc, #20]	; (8006f54 <USBD_FS_ConfigStrDescriptor+0x40>)
 8006f3e:	0018      	movs	r0, r3
 8006f40:	f7ff fe77 	bl	8006c32 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f44:	4b02      	ldr	r3, [pc, #8]	; (8006f50 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8006f46:	0018      	movs	r0, r3
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	b002      	add	sp, #8
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	46c0      	nop			; (mov r8, r8)
 8006f50:	20000448 	.word	0x20000448
 8006f54:	08007784 	.word	0x08007784

08006f58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	0002      	movs	r2, r0
 8006f60:	6039      	str	r1, [r7, #0]
 8006f62:	1dfb      	adds	r3, r7, #7
 8006f64:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8006f66:	1dfb      	adds	r3, r7, #7
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d106      	bne.n	8006f7c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	4908      	ldr	r1, [pc, #32]	; (8006f94 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8006f72:	4b09      	ldr	r3, [pc, #36]	; (8006f98 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8006f74:	0018      	movs	r0, r3
 8006f76:	f7ff fe5c 	bl	8006c32 <USBD_GetString>
 8006f7a:	e005      	b.n	8006f88 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	4905      	ldr	r1, [pc, #20]	; (8006f94 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8006f80:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8006f82:	0018      	movs	r0, r3
 8006f84:	f7ff fe55 	bl	8006c32 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f88:	4b02      	ldr	r3, [pc, #8]	; (8006f94 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	b002      	add	sp, #8
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	46c0      	nop			; (mov r8, r8)
 8006f94:	20000448 	.word	0x20000448
 8006f98:	08007790 	.word	0x08007790

08006f9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006fa2:	4b10      	ldr	r3, [pc, #64]	; (8006fe4 <Get_SerialNum+0x48>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006fa8:	4b0f      	ldr	r3, [pc, #60]	; (8006fe8 <Get_SerialNum+0x4c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006fae:	4b0f      	ldr	r3, [pc, #60]	; (8006fec <Get_SerialNum+0x50>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	18d3      	adds	r3, r2, r3
 8006fba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00b      	beq.n	8006fda <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006fc2:	490b      	ldr	r1, [pc, #44]	; (8006ff0 <Get_SerialNum+0x54>)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2208      	movs	r2, #8
 8006fc8:	0018      	movs	r0, r3
 8006fca:	f000 f815 	bl	8006ff8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006fce:	4909      	ldr	r1, [pc, #36]	; (8006ff4 <Get_SerialNum+0x58>)
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2204      	movs	r2, #4
 8006fd4:	0018      	movs	r0, r3
 8006fd6:	f000 f80f 	bl	8006ff8 <IntToUnicode>
  }
}
 8006fda:	46c0      	nop			; (mov r8, r8)
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	b004      	add	sp, #16
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	46c0      	nop			; (mov r8, r8)
 8006fe4:	1ff80050 	.word	0x1ff80050
 8006fe8:	1ff80054 	.word	0x1ff80054
 8006fec:	1ff80058 	.word	0x1ff80058
 8006ff0:	2000013e 	.word	0x2000013e
 8006ff4:	2000014e 	.word	0x2000014e

08006ff8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	1dfb      	adds	r3, r7, #7
 8007004:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8007006:	2117      	movs	r1, #23
 8007008:	187b      	adds	r3, r7, r1
 800700a:	2200      	movs	r2, #0
 800700c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800700e:	187b      	adds	r3, r7, r1
 8007010:	2200      	movs	r2, #0
 8007012:	701a      	strb	r2, [r3, #0]
 8007014:	e02f      	b.n	8007076 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	0f1b      	lsrs	r3, r3, #28
 800701a:	2b09      	cmp	r3, #9
 800701c:	d80d      	bhi.n	800703a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	0f1b      	lsrs	r3, r3, #28
 8007022:	b2da      	uxtb	r2, r3
 8007024:	2317      	movs	r3, #23
 8007026:	18fb      	adds	r3, r7, r3
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	0019      	movs	r1, r3
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	185b      	adds	r3, r3, r1
 8007032:	3230      	adds	r2, #48	; 0x30
 8007034:	b2d2      	uxtb	r2, r2
 8007036:	701a      	strb	r2, [r3, #0]
 8007038:	e00c      	b.n	8007054 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	0f1b      	lsrs	r3, r3, #28
 800703e:	b2da      	uxtb	r2, r3
 8007040:	2317      	movs	r3, #23
 8007042:	18fb      	adds	r3, r7, r3
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	0019      	movs	r1, r3
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	185b      	adds	r3, r3, r1
 800704e:	3237      	adds	r2, #55	; 0x37
 8007050:	b2d2      	uxtb	r2, r2
 8007052:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	011b      	lsls	r3, r3, #4
 8007058:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800705a:	2117      	movs	r1, #23
 800705c:	187b      	adds	r3, r7, r1
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	3301      	adds	r3, #1
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	18d3      	adds	r3, r2, r3
 8007068:	2200      	movs	r2, #0
 800706a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800706c:	187b      	adds	r3, r7, r1
 800706e:	781a      	ldrb	r2, [r3, #0]
 8007070:	187b      	adds	r3, r7, r1
 8007072:	3201      	adds	r2, #1
 8007074:	701a      	strb	r2, [r3, #0]
 8007076:	2317      	movs	r3, #23
 8007078:	18fa      	adds	r2, r7, r3
 800707a:	1dfb      	adds	r3, r7, #7
 800707c:	7812      	ldrb	r2, [r2, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d3c8      	bcc.n	8007016 <IntToUnicode+0x1e>
  }
}
 8007084:	46c0      	nop			; (mov r8, r8)
 8007086:	46c0      	nop			; (mov r8, r8)
 8007088:	46bd      	mov	sp, r7
 800708a:	b006      	add	sp, #24
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a0a      	ldr	r2, [pc, #40]	; (80070c8 <HAL_PCD_MspInit+0x38>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d10e      	bne.n	80070c0 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80070a2:	4b0a      	ldr	r3, [pc, #40]	; (80070cc <HAL_PCD_MspInit+0x3c>)
 80070a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070a6:	4b09      	ldr	r3, [pc, #36]	; (80070cc <HAL_PCD_MspInit+0x3c>)
 80070a8:	2180      	movs	r1, #128	; 0x80
 80070aa:	0409      	lsls	r1, r1, #16
 80070ac:	430a      	orrs	r2, r1
 80070ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80070b0:	2200      	movs	r2, #0
 80070b2:	2100      	movs	r1, #0
 80070b4:	201f      	movs	r0, #31
 80070b6:	f7f9 fc6d 	bl	8000994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80070ba:	201f      	movs	r0, #31
 80070bc:	f7f9 fc7f 	bl	80009be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80070c0:	46c0      	nop			; (mov r8, r8)
 80070c2:	46bd      	mov	sp, r7
 80070c4:	b002      	add	sp, #8
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	40005c00 	.word	0x40005c00
 80070cc:	40021000 	.word	0x40021000

080070d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	23bc      	movs	r3, #188	; 0xbc
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	58d2      	ldr	r2, [r2, r3]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	21ac      	movs	r1, #172	; 0xac
 80070e4:	0089      	lsls	r1, r1, #2
 80070e6:	468c      	mov	ip, r1
 80070e8:	4463      	add	r3, ip
 80070ea:	0019      	movs	r1, r3
 80070ec:	0010      	movs	r0, r2
 80070ee:	f7fe fd33 	bl	8005b58 <USBD_LL_SetupStage>
}
 80070f2:	46c0      	nop			; (mov r8, r8)
 80070f4:	46bd      	mov	sp, r7
 80070f6:	b002      	add	sp, #8
 80070f8:	bd80      	pop	{r7, pc}

080070fa <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070fa:	b590      	push	{r4, r7, lr}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	000a      	movs	r2, r1
 8007104:	1cfb      	adds	r3, r7, #3
 8007106:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	23bc      	movs	r3, #188	; 0xbc
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	58d4      	ldr	r4, [r2, r3]
 8007110:	1cfb      	adds	r3, r7, #3
 8007112:	781a      	ldrb	r2, [r3, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	23be      	movs	r3, #190	; 0xbe
 8007118:	0059      	lsls	r1, r3, #1
 800711a:	0013      	movs	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	189b      	adds	r3, r3, r2
 8007120:	00db      	lsls	r3, r3, #3
 8007122:	18c3      	adds	r3, r0, r3
 8007124:	185b      	adds	r3, r3, r1
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	1cfb      	adds	r3, r7, #3
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	0019      	movs	r1, r3
 800712e:	0020      	movs	r0, r4
 8007130:	f7fe fd70 	bl	8005c14 <USBD_LL_DataOutStage>
}
 8007134:	46c0      	nop			; (mov r8, r8)
 8007136:	46bd      	mov	sp, r7
 8007138:	b003      	add	sp, #12
 800713a:	bd90      	pop	{r4, r7, pc}

0800713c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	000a      	movs	r2, r1
 8007146:	1cfb      	adds	r3, r7, #3
 8007148:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	23bc      	movs	r3, #188	; 0xbc
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	58d0      	ldr	r0, [r2, r3]
 8007152:	1cfb      	adds	r3, r7, #3
 8007154:	781a      	ldrb	r2, [r3, #0]
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	0013      	movs	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	189b      	adds	r3, r3, r2
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	18cb      	adds	r3, r1, r3
 8007162:	333c      	adds	r3, #60	; 0x3c
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	1cfb      	adds	r3, r7, #3
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	0019      	movs	r1, r3
 800716c:	f7fe fdd4 	bl	8005d18 <USBD_LL_DataInStage>
}
 8007170:	46c0      	nop			; (mov r8, r8)
 8007172:	46bd      	mov	sp, r7
 8007174:	b002      	add	sp, #8
 8007176:	bd80      	pop	{r7, pc}

08007178 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	23bc      	movs	r3, #188	; 0xbc
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	58d3      	ldr	r3, [r2, r3]
 8007188:	0018      	movs	r0, r3
 800718a:	f7fe ff0b 	bl	8005fa4 <USBD_LL_SOF>
}
 800718e:	46c0      	nop			; (mov r8, r8)
 8007190:	46bd      	mov	sp, r7
 8007192:	b002      	add	sp, #8
 8007194:	bd80      	pop	{r7, pc}

08007196 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b084      	sub	sp, #16
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800719e:	230f      	movs	r3, #15
 80071a0:	18fb      	adds	r3, r7, r3
 80071a2:	2201      	movs	r2, #1
 80071a4:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d001      	beq.n	80071b2 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80071ae:	f7f9 fa43 	bl	8000638 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	23bc      	movs	r3, #188	; 0xbc
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	58d2      	ldr	r2, [r2, r3]
 80071ba:	230f      	movs	r3, #15
 80071bc:	18fb      	adds	r3, r7, r3
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	0019      	movs	r1, r3
 80071c2:	0010      	movs	r0, r2
 80071c4:	f7fe fead 	bl	8005f22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	23bc      	movs	r3, #188	; 0xbc
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	58d3      	ldr	r3, [r2, r3]
 80071d0:	0018      	movs	r0, r3
 80071d2:	f7fe fe5e 	bl	8005e92 <USBD_LL_Reset>
}
 80071d6:	46c0      	nop			; (mov r8, r8)
 80071d8:	46bd      	mov	sp, r7
 80071da:	b004      	add	sp, #16
 80071dc:	bd80      	pop	{r7, pc}
	...

080071e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	23bc      	movs	r3, #188	; 0xbc
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	58d3      	ldr	r3, [r2, r3]
 80071f0:	0018      	movs	r0, r3
 80071f2:	f7fe fea7 	bl	8005f44 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d005      	beq.n	800720a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071fe:	4b05      	ldr	r3, [pc, #20]	; (8007214 <HAL_PCD_SuspendCallback+0x34>)
 8007200:	691a      	ldr	r2, [r3, #16]
 8007202:	4b04      	ldr	r3, [pc, #16]	; (8007214 <HAL_PCD_SuspendCallback+0x34>)
 8007204:	2106      	movs	r1, #6
 8007206:	430a      	orrs	r2, r1
 8007208:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800720a:	46c0      	nop			; (mov r8, r8)
 800720c:	46bd      	mov	sp, r7
 800720e:	b002      	add	sp, #8
 8007210:	bd80      	pop	{r7, pc}
 8007212:	46c0      	nop			; (mov r8, r8)
 8007214:	e000ed00 	.word	0xe000ed00

08007218 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d007      	beq.n	8007238 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007228:	4b09      	ldr	r3, [pc, #36]	; (8007250 <HAL_PCD_ResumeCallback+0x38>)
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	4b08      	ldr	r3, [pc, #32]	; (8007250 <HAL_PCD_ResumeCallback+0x38>)
 800722e:	2106      	movs	r1, #6
 8007230:	438a      	bics	r2, r1
 8007232:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007234:	f000 fa1a 	bl	800766c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	23bc      	movs	r3, #188	; 0xbc
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	58d3      	ldr	r3, [r2, r3]
 8007240:	0018      	movs	r0, r3
 8007242:	f7fe fe97 	bl	8005f74 <USBD_LL_Resume>
}
 8007246:	46c0      	nop			; (mov r8, r8)
 8007248:	46bd      	mov	sp, r7
 800724a:	b002      	add	sp, #8
 800724c:	bd80      	pop	{r7, pc}
 800724e:	46c0      	nop			; (mov r8, r8)
 8007250:	e000ed00 	.word	0xe000ed00

08007254 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800725c:	4a23      	ldr	r2, [pc, #140]	; (80072ec <USBD_LL_Init+0x98>)
 800725e:	23bc      	movs	r3, #188	; 0xbc
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	23b0      	movs	r3, #176	; 0xb0
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	491f      	ldr	r1, [pc, #124]	; (80072ec <USBD_LL_Init+0x98>)
 800726e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007270:	4b1e      	ldr	r3, [pc, #120]	; (80072ec <USBD_LL_Init+0x98>)
 8007272:	4a1f      	ldr	r2, [pc, #124]	; (80072f0 <USBD_LL_Init+0x9c>)
 8007274:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007276:	4b1d      	ldr	r3, [pc, #116]	; (80072ec <USBD_LL_Init+0x98>)
 8007278:	2208      	movs	r2, #8
 800727a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800727c:	4b1b      	ldr	r3, [pc, #108]	; (80072ec <USBD_LL_Init+0x98>)
 800727e:	2202      	movs	r2, #2
 8007280:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007282:	4b1a      	ldr	r3, [pc, #104]	; (80072ec <USBD_LL_Init+0x98>)
 8007284:	2202      	movs	r2, #2
 8007286:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007288:	4b18      	ldr	r3, [pc, #96]	; (80072ec <USBD_LL_Init+0x98>)
 800728a:	2200      	movs	r2, #0
 800728c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800728e:	4b17      	ldr	r3, [pc, #92]	; (80072ec <USBD_LL_Init+0x98>)
 8007290:	2200      	movs	r2, #0
 8007292:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007294:	4b15      	ldr	r3, [pc, #84]	; (80072ec <USBD_LL_Init+0x98>)
 8007296:	2200      	movs	r2, #0
 8007298:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800729a:	4b14      	ldr	r3, [pc, #80]	; (80072ec <USBD_LL_Init+0x98>)
 800729c:	0018      	movs	r0, r3
 800729e:	f7f9 fbab 	bl	80009f8 <HAL_PCD_Init>
 80072a2:	1e03      	subs	r3, r0, #0
 80072a4:	d001      	beq.n	80072aa <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80072a6:	f7f9 f9c7 	bl	8000638 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	23b0      	movs	r3, #176	; 0xb0
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	58d0      	ldr	r0, [r2, r3]
 80072b2:	2318      	movs	r3, #24
 80072b4:	2200      	movs	r2, #0
 80072b6:	2100      	movs	r1, #0
 80072b8:	f7fb f952 	bl	8002560 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	23b0      	movs	r3, #176	; 0xb0
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	58d0      	ldr	r0, [r2, r3]
 80072c4:	2358      	movs	r3, #88	; 0x58
 80072c6:	2200      	movs	r2, #0
 80072c8:	2180      	movs	r1, #128	; 0x80
 80072ca:	f7fb f949 	bl	8002560 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	23b0      	movs	r3, #176	; 0xb0
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	58d0      	ldr	r0, [r2, r3]
 80072d6:	2380      	movs	r3, #128	; 0x80
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	2200      	movs	r2, #0
 80072dc:	2181      	movs	r1, #129	; 0x81
 80072de:	f7fb f93f 	bl	8002560 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	0018      	movs	r0, r3
 80072e6:	46bd      	mov	sp, r7
 80072e8:	b002      	add	sp, #8
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	20000648 	.word	0x20000648
 80072f0:	40005c00 	.word	0x40005c00

080072f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80072f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072fc:	210f      	movs	r1, #15
 80072fe:	187b      	adds	r3, r7, r1
 8007300:	2200      	movs	r2, #0
 8007302:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007304:	260e      	movs	r6, #14
 8007306:	19bb      	adds	r3, r7, r6
 8007308:	2200      	movs	r2, #0
 800730a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	23b0      	movs	r3, #176	; 0xb0
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	58d3      	ldr	r3, [r2, r3]
 8007314:	000d      	movs	r5, r1
 8007316:	187c      	adds	r4, r7, r1
 8007318:	0018      	movs	r0, r3
 800731a:	f7f9 fc6d 	bl	8000bf8 <HAL_PCD_Start>
 800731e:	0003      	movs	r3, r0
 8007320:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007322:	19bc      	adds	r4, r7, r6
 8007324:	197b      	adds	r3, r7, r5
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	0018      	movs	r0, r3
 800732a:	f000 f9a6 	bl	800767a <USBD_Get_USB_Status>
 800732e:	0003      	movs	r3, r0
 8007330:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007332:	19bb      	adds	r3, r7, r6
 8007334:	781b      	ldrb	r3, [r3, #0]
}
 8007336:	0018      	movs	r0, r3
 8007338:	46bd      	mov	sp, r7
 800733a:	b005      	add	sp, #20
 800733c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800733e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800733e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007340:	b085      	sub	sp, #20
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	000c      	movs	r4, r1
 8007348:	0010      	movs	r0, r2
 800734a:	0019      	movs	r1, r3
 800734c:	1cfb      	adds	r3, r7, #3
 800734e:	1c22      	adds	r2, r4, #0
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	1cbb      	adds	r3, r7, #2
 8007354:	1c02      	adds	r2, r0, #0
 8007356:	701a      	strb	r2, [r3, #0]
 8007358:	003b      	movs	r3, r7
 800735a:	1c0a      	adds	r2, r1, #0
 800735c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800735e:	260f      	movs	r6, #15
 8007360:	19bb      	adds	r3, r7, r6
 8007362:	2200      	movs	r2, #0
 8007364:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007366:	250e      	movs	r5, #14
 8007368:	197b      	adds	r3, r7, r5
 800736a:	2200      	movs	r2, #0
 800736c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	23b0      	movs	r3, #176	; 0xb0
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	58d0      	ldr	r0, [r2, r3]
 8007376:	19bc      	adds	r4, r7, r6
 8007378:	1cbb      	adds	r3, r7, #2
 800737a:	781d      	ldrb	r5, [r3, #0]
 800737c:	003b      	movs	r3, r7
 800737e:	881a      	ldrh	r2, [r3, #0]
 8007380:	1cfb      	adds	r3, r7, #3
 8007382:	7819      	ldrb	r1, [r3, #0]
 8007384:	002b      	movs	r3, r5
 8007386:	f7f9 fdcc 	bl	8000f22 <HAL_PCD_EP_Open>
 800738a:	0003      	movs	r3, r0
 800738c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800738e:	250e      	movs	r5, #14
 8007390:	197c      	adds	r4, r7, r5
 8007392:	19bb      	adds	r3, r7, r6
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	0018      	movs	r0, r3
 8007398:	f000 f96f 	bl	800767a <USBD_Get_USB_Status>
 800739c:	0003      	movs	r3, r0
 800739e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80073a0:	197b      	adds	r3, r7, r5
 80073a2:	781b      	ldrb	r3, [r3, #0]
}
 80073a4:	0018      	movs	r0, r3
 80073a6:	46bd      	mov	sp, r7
 80073a8:	b005      	add	sp, #20
 80073aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073ac <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	000a      	movs	r2, r1
 80073b6:	1cfb      	adds	r3, r7, #3
 80073b8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073ba:	210f      	movs	r1, #15
 80073bc:	187b      	adds	r3, r7, r1
 80073be:	2200      	movs	r2, #0
 80073c0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073c2:	260e      	movs	r6, #14
 80073c4:	19bb      	adds	r3, r7, r6
 80073c6:	2200      	movs	r2, #0
 80073c8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	23b0      	movs	r3, #176	; 0xb0
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	58d2      	ldr	r2, [r2, r3]
 80073d2:	000d      	movs	r5, r1
 80073d4:	187c      	adds	r4, r7, r1
 80073d6:	1cfb      	adds	r3, r7, #3
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	0019      	movs	r1, r3
 80073dc:	0010      	movs	r0, r2
 80073de:	f7f9 fe0f 	bl	8001000 <HAL_PCD_EP_Close>
 80073e2:	0003      	movs	r3, r0
 80073e4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073e6:	19bc      	adds	r4, r7, r6
 80073e8:	197b      	adds	r3, r7, r5
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	0018      	movs	r0, r3
 80073ee:	f000 f944 	bl	800767a <USBD_Get_USB_Status>
 80073f2:	0003      	movs	r3, r0
 80073f4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80073f6:	19bb      	adds	r3, r7, r6
 80073f8:	781b      	ldrb	r3, [r3, #0]
}
 80073fa:	0018      	movs	r0, r3
 80073fc:	46bd      	mov	sp, r7
 80073fe:	b005      	add	sp, #20
 8007400:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007402 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007402:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007404:	b085      	sub	sp, #20
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	000a      	movs	r2, r1
 800740c:	1cfb      	adds	r3, r7, #3
 800740e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007410:	210f      	movs	r1, #15
 8007412:	187b      	adds	r3, r7, r1
 8007414:	2200      	movs	r2, #0
 8007416:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007418:	260e      	movs	r6, #14
 800741a:	19bb      	adds	r3, r7, r6
 800741c:	2200      	movs	r2, #0
 800741e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	23b0      	movs	r3, #176	; 0xb0
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	58d2      	ldr	r2, [r2, r3]
 8007428:	000d      	movs	r5, r1
 800742a:	187c      	adds	r4, r7, r1
 800742c:	1cfb      	adds	r3, r7, #3
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	0019      	movs	r1, r3
 8007432:	0010      	movs	r0, r2
 8007434:	f7f9 fea8 	bl	8001188 <HAL_PCD_EP_SetStall>
 8007438:	0003      	movs	r3, r0
 800743a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800743c:	19bc      	adds	r4, r7, r6
 800743e:	197b      	adds	r3, r7, r5
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	0018      	movs	r0, r3
 8007444:	f000 f919 	bl	800767a <USBD_Get_USB_Status>
 8007448:	0003      	movs	r3, r0
 800744a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800744c:	19bb      	adds	r3, r7, r6
 800744e:	781b      	ldrb	r3, [r3, #0]
}
 8007450:	0018      	movs	r0, r3
 8007452:	46bd      	mov	sp, r7
 8007454:	b005      	add	sp, #20
 8007456:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007458 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	000a      	movs	r2, r1
 8007462:	1cfb      	adds	r3, r7, #3
 8007464:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007466:	210f      	movs	r1, #15
 8007468:	187b      	adds	r3, r7, r1
 800746a:	2200      	movs	r2, #0
 800746c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800746e:	260e      	movs	r6, #14
 8007470:	19bb      	adds	r3, r7, r6
 8007472:	2200      	movs	r2, #0
 8007474:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	23b0      	movs	r3, #176	; 0xb0
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	58d2      	ldr	r2, [r2, r3]
 800747e:	000d      	movs	r5, r1
 8007480:	187c      	adds	r4, r7, r1
 8007482:	1cfb      	adds	r3, r7, #3
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	0019      	movs	r1, r3
 8007488:	0010      	movs	r0, r2
 800748a:	f7f9 fed9 	bl	8001240 <HAL_PCD_EP_ClrStall>
 800748e:	0003      	movs	r3, r0
 8007490:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007492:	19bc      	adds	r4, r7, r6
 8007494:	197b      	adds	r3, r7, r5
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	0018      	movs	r0, r3
 800749a:	f000 f8ee 	bl	800767a <USBD_Get_USB_Status>
 800749e:	0003      	movs	r3, r0
 80074a0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80074a2:	19bb      	adds	r3, r7, r6
 80074a4:	781b      	ldrb	r3, [r3, #0]
}
 80074a6:	0018      	movs	r0, r3
 80074a8:	46bd      	mov	sp, r7
 80074aa:	b005      	add	sp, #20
 80074ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074ae <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	000a      	movs	r2, r1
 80074b8:	1cfb      	adds	r3, r7, #3
 80074ba:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	23b0      	movs	r3, #176	; 0xb0
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	58d3      	ldr	r3, [r2, r3]
 80074c4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80074c6:	1cfb      	adds	r3, r7, #3
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	b25b      	sxtb	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	da0d      	bge.n	80074ec <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80074d0:	1cfb      	adds	r3, r7, #3
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	227f      	movs	r2, #127	; 0x7f
 80074d6:	4013      	ands	r3, r2
 80074d8:	68f9      	ldr	r1, [r7, #12]
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	0013      	movs	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	189b      	adds	r3, r3, r2
 80074e2:	00db      	lsls	r3, r3, #3
 80074e4:	18cb      	adds	r3, r1, r3
 80074e6:	3302      	adds	r3, #2
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	e00d      	b.n	8007508 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80074ec:	1cfb      	adds	r3, r7, #3
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	227f      	movs	r2, #127	; 0x7f
 80074f2:	401a      	ands	r2, r3
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	23b5      	movs	r3, #181	; 0xb5
 80074f8:	0059      	lsls	r1, r3, #1
 80074fa:	0013      	movs	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	189b      	adds	r3, r3, r2
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	18c3      	adds	r3, r0, r3
 8007504:	185b      	adds	r3, r3, r1
 8007506:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007508:	0018      	movs	r0, r3
 800750a:	46bd      	mov	sp, r7
 800750c:	b004      	add	sp, #16
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	000a      	movs	r2, r1
 800751a:	1cfb      	adds	r3, r7, #3
 800751c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800751e:	210f      	movs	r1, #15
 8007520:	187b      	adds	r3, r7, r1
 8007522:	2200      	movs	r2, #0
 8007524:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007526:	260e      	movs	r6, #14
 8007528:	19bb      	adds	r3, r7, r6
 800752a:	2200      	movs	r2, #0
 800752c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	23b0      	movs	r3, #176	; 0xb0
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	58d2      	ldr	r2, [r2, r3]
 8007536:	000d      	movs	r5, r1
 8007538:	187c      	adds	r4, r7, r1
 800753a:	1cfb      	adds	r3, r7, #3
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	0019      	movs	r1, r3
 8007540:	0010      	movs	r0, r2
 8007542:	f7f9 fcc3 	bl	8000ecc <HAL_PCD_SetAddress>
 8007546:	0003      	movs	r3, r0
 8007548:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800754a:	19bc      	adds	r4, r7, r6
 800754c:	197b      	adds	r3, r7, r5
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	0018      	movs	r0, r3
 8007552:	f000 f892 	bl	800767a <USBD_Get_USB_Status>
 8007556:	0003      	movs	r3, r0
 8007558:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800755a:	19bb      	adds	r3, r7, r6
 800755c:	781b      	ldrb	r3, [r3, #0]
}
 800755e:	0018      	movs	r0, r3
 8007560:	46bd      	mov	sp, r7
 8007562:	b005      	add	sp, #20
 8007564:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007566 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007566:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007568:	b087      	sub	sp, #28
 800756a:	af00      	add	r7, sp, #0
 800756c:	60f8      	str	r0, [r7, #12]
 800756e:	0008      	movs	r0, r1
 8007570:	607a      	str	r2, [r7, #4]
 8007572:	0019      	movs	r1, r3
 8007574:	230b      	movs	r3, #11
 8007576:	18fb      	adds	r3, r7, r3
 8007578:	1c02      	adds	r2, r0, #0
 800757a:	701a      	strb	r2, [r3, #0]
 800757c:	2408      	movs	r4, #8
 800757e:	193b      	adds	r3, r7, r4
 8007580:	1c0a      	adds	r2, r1, #0
 8007582:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007584:	2117      	movs	r1, #23
 8007586:	187b      	adds	r3, r7, r1
 8007588:	2200      	movs	r2, #0
 800758a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800758c:	2516      	movs	r5, #22
 800758e:	197b      	adds	r3, r7, r5
 8007590:	2200      	movs	r2, #0
 8007592:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	23b0      	movs	r3, #176	; 0xb0
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	58d0      	ldr	r0, [r2, r3]
 800759c:	193b      	adds	r3, r7, r4
 800759e:	881d      	ldrh	r5, [r3, #0]
 80075a0:	000e      	movs	r6, r1
 80075a2:	187c      	adds	r4, r7, r1
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	230b      	movs	r3, #11
 80075a8:	18fb      	adds	r3, r7, r3
 80075aa:	7819      	ldrb	r1, [r3, #0]
 80075ac:	002b      	movs	r3, r5
 80075ae:	f7f9 fdaf 	bl	8001110 <HAL_PCD_EP_Transmit>
 80075b2:	0003      	movs	r3, r0
 80075b4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075b6:	2516      	movs	r5, #22
 80075b8:	197c      	adds	r4, r7, r5
 80075ba:	19bb      	adds	r3, r7, r6
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	0018      	movs	r0, r3
 80075c0:	f000 f85b 	bl	800767a <USBD_Get_USB_Status>
 80075c4:	0003      	movs	r3, r0
 80075c6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80075c8:	197b      	adds	r3, r7, r5
 80075ca:	781b      	ldrb	r3, [r3, #0]
}
 80075cc:	0018      	movs	r0, r3
 80075ce:	46bd      	mov	sp, r7
 80075d0:	b007      	add	sp, #28
 80075d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80075d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	0008      	movs	r0, r1
 80075de:	607a      	str	r2, [r7, #4]
 80075e0:	0019      	movs	r1, r3
 80075e2:	230b      	movs	r3, #11
 80075e4:	18fb      	adds	r3, r7, r3
 80075e6:	1c02      	adds	r2, r0, #0
 80075e8:	701a      	strb	r2, [r3, #0]
 80075ea:	2408      	movs	r4, #8
 80075ec:	193b      	adds	r3, r7, r4
 80075ee:	1c0a      	adds	r2, r1, #0
 80075f0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075f2:	2117      	movs	r1, #23
 80075f4:	187b      	adds	r3, r7, r1
 80075f6:	2200      	movs	r2, #0
 80075f8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075fa:	2516      	movs	r5, #22
 80075fc:	197b      	adds	r3, r7, r5
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	23b0      	movs	r3, #176	; 0xb0
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	58d0      	ldr	r0, [r2, r3]
 800760a:	193b      	adds	r3, r7, r4
 800760c:	881d      	ldrh	r5, [r3, #0]
 800760e:	000e      	movs	r6, r1
 8007610:	187c      	adds	r4, r7, r1
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	230b      	movs	r3, #11
 8007616:	18fb      	adds	r3, r7, r3
 8007618:	7819      	ldrb	r1, [r3, #0]
 800761a:	002b      	movs	r3, r5
 800761c:	f7f9 fd41 	bl	80010a2 <HAL_PCD_EP_Receive>
 8007620:	0003      	movs	r3, r0
 8007622:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007624:	2516      	movs	r5, #22
 8007626:	197c      	adds	r4, r7, r5
 8007628:	19bb      	adds	r3, r7, r6
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	0018      	movs	r0, r3
 800762e:	f000 f824 	bl	800767a <USBD_Get_USB_Status>
 8007632:	0003      	movs	r3, r0
 8007634:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007636:	197b      	adds	r3, r7, r5
 8007638:	781b      	ldrb	r3, [r3, #0]
}
 800763a:	0018      	movs	r0, r3
 800763c:	46bd      	mov	sp, r7
 800763e:	b007      	add	sp, #28
 8007640:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007644 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800764c:	4b02      	ldr	r3, [pc, #8]	; (8007658 <USBD_static_malloc+0x14>)
}
 800764e:	0018      	movs	r0, r3
 8007650:	46bd      	mov	sp, r7
 8007652:	b002      	add	sp, #8
 8007654:	bd80      	pop	{r7, pc}
 8007656:	46c0      	nop			; (mov r8, r8)
 8007658:	2000093c 	.word	0x2000093c

0800765c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]

}
 8007664:	46c0      	nop			; (mov r8, r8)
 8007666:	46bd      	mov	sp, r7
 8007668:	b002      	add	sp, #8
 800766a:	bd80      	pop	{r7, pc}

0800766c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007670:	f7f8 ff56 	bl	8000520 <SystemClock_Config>
}
 8007674:	46c0      	nop			; (mov r8, r8)
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	0002      	movs	r2, r0
 8007682:	1dfb      	adds	r3, r7, #7
 8007684:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007686:	230f      	movs	r3, #15
 8007688:	18fb      	adds	r3, r7, r3
 800768a:	2200      	movs	r2, #0
 800768c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800768e:	1dfb      	adds	r3, r7, #7
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	2b03      	cmp	r3, #3
 8007694:	d017      	beq.n	80076c6 <USBD_Get_USB_Status+0x4c>
 8007696:	dc1b      	bgt.n	80076d0 <USBD_Get_USB_Status+0x56>
 8007698:	2b02      	cmp	r3, #2
 800769a:	d00f      	beq.n	80076bc <USBD_Get_USB_Status+0x42>
 800769c:	dc18      	bgt.n	80076d0 <USBD_Get_USB_Status+0x56>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <USBD_Get_USB_Status+0x2e>
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d005      	beq.n	80076b2 <USBD_Get_USB_Status+0x38>
 80076a6:	e013      	b.n	80076d0 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80076a8:	230f      	movs	r3, #15
 80076aa:	18fb      	adds	r3, r7, r3
 80076ac:	2200      	movs	r2, #0
 80076ae:	701a      	strb	r2, [r3, #0]
    break;
 80076b0:	e013      	b.n	80076da <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80076b2:	230f      	movs	r3, #15
 80076b4:	18fb      	adds	r3, r7, r3
 80076b6:	2202      	movs	r2, #2
 80076b8:	701a      	strb	r2, [r3, #0]
    break;
 80076ba:	e00e      	b.n	80076da <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80076bc:	230f      	movs	r3, #15
 80076be:	18fb      	adds	r3, r7, r3
 80076c0:	2201      	movs	r2, #1
 80076c2:	701a      	strb	r2, [r3, #0]
    break;
 80076c4:	e009      	b.n	80076da <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80076c6:	230f      	movs	r3, #15
 80076c8:	18fb      	adds	r3, r7, r3
 80076ca:	2202      	movs	r2, #2
 80076cc:	701a      	strb	r2, [r3, #0]
    break;
 80076ce:	e004      	b.n	80076da <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80076d0:	230f      	movs	r3, #15
 80076d2:	18fb      	adds	r3, r7, r3
 80076d4:	2202      	movs	r2, #2
 80076d6:	701a      	strb	r2, [r3, #0]
    break;
 80076d8:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80076da:	230f      	movs	r3, #15
 80076dc:	18fb      	adds	r3, r7, r3
 80076de:	781b      	ldrb	r3, [r3, #0]
}
 80076e0:	0018      	movs	r0, r3
 80076e2:	46bd      	mov	sp, r7
 80076e4:	b004      	add	sp, #16
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <memset>:
 80076e8:	0003      	movs	r3, r0
 80076ea:	1882      	adds	r2, r0, r2
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d100      	bne.n	80076f2 <memset+0xa>
 80076f0:	4770      	bx	lr
 80076f2:	7019      	strb	r1, [r3, #0]
 80076f4:	3301      	adds	r3, #1
 80076f6:	e7f9      	b.n	80076ec <memset+0x4>

080076f8 <__libc_init_array>:
 80076f8:	b570      	push	{r4, r5, r6, lr}
 80076fa:	2600      	movs	r6, #0
 80076fc:	4c0c      	ldr	r4, [pc, #48]	; (8007730 <__libc_init_array+0x38>)
 80076fe:	4d0d      	ldr	r5, [pc, #52]	; (8007734 <__libc_init_array+0x3c>)
 8007700:	1b64      	subs	r4, r4, r5
 8007702:	10a4      	asrs	r4, r4, #2
 8007704:	42a6      	cmp	r6, r4
 8007706:	d109      	bne.n	800771c <__libc_init_array+0x24>
 8007708:	2600      	movs	r6, #0
 800770a:	f000 f819 	bl	8007740 <_init>
 800770e:	4c0a      	ldr	r4, [pc, #40]	; (8007738 <__libc_init_array+0x40>)
 8007710:	4d0a      	ldr	r5, [pc, #40]	; (800773c <__libc_init_array+0x44>)
 8007712:	1b64      	subs	r4, r4, r5
 8007714:	10a4      	asrs	r4, r4, #2
 8007716:	42a6      	cmp	r6, r4
 8007718:	d105      	bne.n	8007726 <__libc_init_array+0x2e>
 800771a:	bd70      	pop	{r4, r5, r6, pc}
 800771c:	00b3      	lsls	r3, r6, #2
 800771e:	58eb      	ldr	r3, [r5, r3]
 8007720:	4798      	blx	r3
 8007722:	3601      	adds	r6, #1
 8007724:	e7ee      	b.n	8007704 <__libc_init_array+0xc>
 8007726:	00b3      	lsls	r3, r6, #2
 8007728:	58eb      	ldr	r3, [r5, r3]
 800772a:	4798      	blx	r3
 800772c:	3601      	adds	r6, #1
 800772e:	e7f2      	b.n	8007716 <__libc_init_array+0x1e>
 8007730:	08007824 	.word	0x08007824
 8007734:	08007824 	.word	0x08007824
 8007738:	08007828 	.word	0x08007828
 800773c:	08007824 	.word	0x08007824

08007740 <_init>:
 8007740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007742:	46c0      	nop			; (mov r8, r8)
 8007744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007746:	bc08      	pop	{r3}
 8007748:	469e      	mov	lr, r3
 800774a:	4770      	bx	lr

0800774c <_fini>:
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774e:	46c0      	nop			; (mov r8, r8)
 8007750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007752:	bc08      	pop	{r3}
 8007754:	469e      	mov	lr, r3
 8007756:	4770      	bx	lr
