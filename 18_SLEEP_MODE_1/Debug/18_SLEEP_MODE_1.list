
18_SLEEP_MODE_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003874  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003934  08003934  00013934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a1c  08003a1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a1c  08003a1c  00013a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a24  08003a24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a24  08003a24  00013a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08003a38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08003a38  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a16c  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bfa  00000000  00000000  0002a1e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000858  00000000  00000000  0002bde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000665  00000000  00000000  0002c638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013852  00000000  00000000  0002cc9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b147  00000000  00000000  000404ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007729f  00000000  00000000  0004b636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c98  00000000  00000000  000c28d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000c4570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800391c 	.word	0x0800391c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800391c 	.word	0x0800391c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 HAL_Init();
 80004be:	f000 fa6f 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f869 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f90b 	bl	80006e0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004ca:	f000 f8d9 	bl	8000680 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart1, &Rx_data, 1);
 80004ce:	492c      	ldr	r1, [pc, #176]	; (8000580 <main+0xc8>)
 80004d0:	4b2c      	ldr	r3, [pc, #176]	; (8000584 <main+0xcc>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 ff13 	bl	8002300 <HAL_UART_Receive_IT>
    /* USER CODE BEGIN 3 */

//		str = "Going into SLEEP MODE\r\n";
//		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 1000);

		str = "Going into SLEEP MODE in 5 seconds\r\n";
 80004da:	4b2b      	ldr	r3, [pc, #172]	; (8000588 <main+0xd0>)
 80004dc:	4a2b      	ldr	r2, [pc, #172]	; (800058c <main+0xd4>)
 80004de:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 1000);
 80004e0:	4b29      	ldr	r3, [pc, #164]	; (8000588 <main+0xd0>)
 80004e2:	681c      	ldr	r4, [r3, #0]
 80004e4:	4b28      	ldr	r3, [pc, #160]	; (8000588 <main+0xd0>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	0018      	movs	r0, r3
 80004ea:	f7ff fe0d 	bl	8000108 <strlen>
 80004ee:	0003      	movs	r3, r0
 80004f0:	b29a      	uxth	r2, r3
 80004f2:	23fa      	movs	r3, #250	; 0xfa
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	4823      	ldr	r0, [pc, #140]	; (8000584 <main+0xcc>)
 80004f8:	0021      	movs	r1, r4
 80004fa:	f001 fe61 	bl	80021c0 <HAL_UART_Transmit>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80004fe:	23a0      	movs	r3, #160	; 0xa0
 8000500:	05db      	lsls	r3, r3, #23
 8000502:	2200      	movs	r2, #0
 8000504:	2120      	movs	r1, #32
 8000506:	0018      	movs	r0, r3
 8000508:	f000 fdd6 	bl	80010b8 <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 800050c:	4b20      	ldr	r3, [pc, #128]	; (8000590 <main+0xd8>)
 800050e:	0018      	movs	r0, r3
 8000510:	f000 fab6 	bl	8000a80 <HAL_Delay>

		/*    Suspend Tick increment to prevent wakeup by Systick interrupt.
		 Otherwise the Systick interrupt will wake up the device within 1ms (HAL time base)
		 */

		HAL_SuspendTick();
 8000514:	f000 fad8 	bl	8000ac8 <HAL_SuspendTick>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1); // Just to indicate that the sleep mode is activated
 8000518:	23a0      	movs	r3, #160	; 0xa0
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	2201      	movs	r2, #1
 800051e:	2120      	movs	r1, #32
 8000520:	0018      	movs	r0, r3
 8000522:	f000 fdc9 	bl	80010b8 <HAL_GPIO_WritePin>

		HAL_PWR_EnableSleepOnExit();	// it will execute the interrupt callback and go to sleep mode again
 8000526:	f000 fe73 	bl	8001210 <HAL_PWR_EnableSleepOnExit>

		/*	  Enter Sleep Mode , wake up is done once User push-button is pressed 		*/

		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800052a:	2101      	movs	r1, #1
 800052c:	2000      	movs	r0, #0
 800052e:	f000 fe17 	bl	8001160 <HAL_PWR_EnterSLEEPMode>
		HAL_ResumeTick();
 8000532:	f000 fad7 	bl	8000ae4 <HAL_ResumeTick>
//		HAL_ResumeTick();

//		str = "Wake UP by Push button pending IT\r\n";
//		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);

		str = "Wake UP from SLEEP\r\n";
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <main+0xd0>)
 8000538:	4a16      	ldr	r2, [pc, #88]	; (8000594 <main+0xdc>)
 800053a:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <main+0xd0>)
 800053e:	681c      	ldr	r4, [r3, #0]
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <main+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	0018      	movs	r0, r3
 8000546:	f7ff fddf 	bl	8000108 <strlen>
 800054a:	0003      	movs	r3, r0
 800054c:	b29a      	uxth	r2, r3
 800054e:	2301      	movs	r3, #1
 8000550:	425b      	negs	r3, r3
 8000552:	480c      	ldr	r0, [pc, #48]	; (8000584 <main+0xcc>)
 8000554:	0021      	movs	r1, r4
 8000556:	f001 fe33 	bl	80021c0 <HAL_UART_Transmit>

		for (int i = 0; i < 10; i++) {
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	e00b      	b.n	8000578 <main+0xc0>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000560:	23a0      	movs	r3, #160	; 0xa0
 8000562:	05db      	lsls	r3, r3, #23
 8000564:	2120      	movs	r1, #32
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fdc3 	bl	80010f2 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 800056c:	20c8      	movs	r0, #200	; 0xc8
 800056e:	f000 fa87 	bl	8000a80 <HAL_Delay>
		for (int i = 0; i < 10; i++) {
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	3301      	adds	r3, #1
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2b09      	cmp	r3, #9
 800057c:	ddf0      	ble.n	8000560 <main+0xa8>
		str = "Going into SLEEP MODE in 5 seconds\r\n";
 800057e:	e7ac      	b.n	80004da <main+0x22>
 8000580:	200000b4 	.word	0x200000b4
 8000584:	20000028 	.word	0x20000028
 8000588:	200000b0 	.word	0x200000b0
 800058c:	08003934 	.word	0x08003934
 8000590:	00001388 	.word	0x00001388
 8000594:	0800395c 	.word	0x0800395c

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b09d      	sub	sp, #116	; 0x74
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	2438      	movs	r4, #56	; 0x38
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	0018      	movs	r0, r3
 80005a4:	2338      	movs	r3, #56	; 0x38
 80005a6:	001a      	movs	r2, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	f003 f98b 	bl	80038c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ae:	2324      	movs	r3, #36	; 0x24
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	0018      	movs	r0, r3
 80005b4:	2314      	movs	r3, #20
 80005b6:	001a      	movs	r2, r3
 80005b8:	2100      	movs	r1, #0
 80005ba:	f003 f983 	bl	80038c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005be:	003b      	movs	r3, r7
 80005c0:	0018      	movs	r0, r3
 80005c2:	2324      	movs	r3, #36	; 0x24
 80005c4:	001a      	movs	r2, r3
 80005c6:	2100      	movs	r1, #0
 80005c8:	f003 f97c 	bl	80038c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	4b2a      	ldr	r3, [pc, #168]	; (8000678 <SystemClock_Config+0xe0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a2a      	ldr	r2, [pc, #168]	; (800067c <SystemClock_Config+0xe4>)
 80005d2:	401a      	ands	r2, r3
 80005d4:	4b28      	ldr	r3, [pc, #160]	; (8000678 <SystemClock_Config+0xe0>)
 80005d6:	2180      	movs	r1, #128	; 0x80
 80005d8:	0109      	lsls	r1, r1, #4
 80005da:	430a      	orrs	r2, r1
 80005dc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005de:	0021      	movs	r1, r4
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2202      	movs	r2, #2
 80005e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2201      	movs	r2, #1
 80005ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2210      	movs	r2, #16
 80005f0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2202      	movs	r2, #2
 80005f6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2280      	movs	r2, #128	; 0x80
 8000608:	0412      	lsls	r2, r2, #16
 800060a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	187b      	adds	r3, r7, r1
 800060e:	0018      	movs	r0, r3
 8000610:	f000 fe0c 	bl	800122c <HAL_RCC_OscConfig>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000618:	f000 f900 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	2124      	movs	r1, #36	; 0x24
 800061e:	187b      	adds	r3, r7, r1
 8000620:	220f      	movs	r2, #15
 8000622:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2203      	movs	r2, #3
 8000628:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	00d2      	lsls	r2, r2, #3
 8000636:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2280      	movs	r2, #128	; 0x80
 800063c:	00d2      	lsls	r2, r2, #3
 800063e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2100      	movs	r1, #0
 8000644:	0018      	movs	r0, r3
 8000646:	f001 f9b5 	bl	80019b4 <HAL_RCC_ClockConfig>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800064e:	f000 f8e5 	bl	800081c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000652:	003b      	movs	r3, r7
 8000654:	2201      	movs	r2, #1
 8000656:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000658:	003b      	movs	r3, r7
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065e:	003b      	movs	r3, r7
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fbcb 	bl	8001dfc <HAL_RCCEx_PeriphCLKConfig>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800066a:	f000 f8d7 	bl	800081c <Error_Handler>
  }
}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b01d      	add	sp, #116	; 0x74
 8000674:	bd90      	pop	{r4, r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	40007000 	.word	0x40007000
 800067c:	ffffe7ff 	.word	0xffffe7ff

08000680 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_USART1_UART_Init+0x58>)
 8000686:	4a15      	ldr	r2, [pc, #84]	; (80006dc <MX_USART1_UART_Init+0x5c>)
 8000688:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_USART1_UART_Init+0x58>)
 800068c:	22e1      	movs	r2, #225	; 0xe1
 800068e:	0252      	lsls	r2, r2, #9
 8000690:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART1_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_USART1_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART1_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART1_UART_Init+0x58>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART1_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART1_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART1_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART1_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <MX_USART1_UART_Init+0x58>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 fd27 	bl	8002118 <HAL_UART_Init>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ce:	f000 f8a5 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000028 	.word	0x20000028
 80006dc:	40013800 	.word	0x40013800

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	0018      	movs	r0, r3
 80006ea:	2314      	movs	r3, #20
 80006ec:	001a      	movs	r2, r3
 80006ee:	2100      	movs	r1, #0
 80006f0:	f003 f8e8 	bl	80038c4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_GPIO_Init+0x9c>)
 80006f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f8:	4b20      	ldr	r3, [pc, #128]	; (800077c <MX_GPIO_Init+0x9c>)
 80006fa:	2101      	movs	r1, #1
 80006fc:	430a      	orrs	r2, r1
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_GPIO_Init+0x9c>)
 8000702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000704:	2201      	movs	r2, #1
 8000706:	4013      	ands	r3, r2
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 800070c:	23a0      	movs	r3, #160	; 0xa0
 800070e:	05db      	lsls	r3, r3, #23
 8000710:	2200      	movs	r2, #0
 8000712:	2120      	movs	r1, #32
 8000714:	0018      	movs	r0, r3
 8000716:	f000 fccf 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_EXT_INT_Pin */
  GPIO_InitStruct.Pin = BSP_EXT_INT_Pin;
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2201      	movs	r2, #1
 800071e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2284      	movs	r2, #132	; 0x84
 8000724:	0392      	lsls	r2, r2, #14
 8000726:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BSP_EXT_INT_GPIO_Port, &GPIO_InitStruct);
 800072e:	1d3a      	adds	r2, r7, #4
 8000730:	23a0      	movs	r3, #160	; 0xa0
 8000732:	05db      	lsls	r3, r3, #23
 8000734:	0011      	movs	r1, r2
 8000736:	0018      	movs	r0, r3
 8000738:	f000 fb48 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2220      	movs	r2, #32
 8000740:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2201      	movs	r2, #1
 8000746:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 8000754:	1d3a      	adds	r2, r7, #4
 8000756:	23a0      	movs	r3, #160	; 0xa0
 8000758:	05db      	lsls	r3, r3, #23
 800075a:	0011      	movs	r1, r2
 800075c:	0018      	movs	r0, r3
 800075e:	f000 fb35 	bl	8000dcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2005      	movs	r0, #5
 8000768:	f000 fa76 	bl	8000c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800076c:	2005      	movs	r0, #5
 800076e:	f000 fa88 	bl	8000c82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b006      	add	sp, #24
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	40021000 	.word	0x40021000

08000780 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	0002      	movs	r2, r0
 8000788:	1dbb      	adds	r3, r7, #6
 800078a:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == BSP_EXT_INT_Pin) {
 800078c:	1dbb      	adds	r3, r7, #6
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d111      	bne.n	80007b8 <HAL_GPIO_EXTI_Callback+0x38>
		str = "woke up by external interrupt\r\n";
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_GPIO_EXTI_Callback+0x40>)
 8000796:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000798:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_GPIO_EXTI_Callback+0x40>)
 800079c:	681c      	ldr	r4, [r3, #0]
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <HAL_GPIO_EXTI_Callback+0x40>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	0018      	movs	r0, r3
 80007a4:	f7ff fcb0 	bl	8000108 <strlen>
 80007a8:	0003      	movs	r3, r0
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	2301      	movs	r3, #1
 80007ae:	425b      	negs	r3, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <HAL_GPIO_EXTI_Callback+0x48>)
 80007b2:	0021      	movs	r1, r4
 80007b4:	f001 fd04 	bl	80021c0 <HAL_UART_Transmit>
	}
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b003      	add	sp, #12
 80007be:	bd90      	pop	{r4, r7, pc}
 80007c0:	200000b0 	.word	0x200000b0
 80007c4:	08003974 	.word	0x08003974
 80007c8:	20000028 	.word	0x20000028

080007cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &Rx_data, 1);
 80007d4:	490d      	ldr	r1, [pc, #52]	; (800080c <HAL_UART_RxCpltCallback+0x40>)
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <HAL_UART_RxCpltCallback+0x44>)
 80007d8:	2201      	movs	r2, #1
 80007da:	0018      	movs	r0, r3
 80007dc:	f001 fd90 	bl	8002300 <HAL_UART_Receive_IT>
	str = "WakeUP from SLEEP by UART\r\n";
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <HAL_UART_RxCpltCallback+0x48>)
 80007e2:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <HAL_UART_RxCpltCallback+0x4c>)
 80007e4:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <HAL_UART_RxCpltCallback+0x48>)
 80007e8:	681c      	ldr	r4, [r3, #0]
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <HAL_UART_RxCpltCallback+0x48>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff fc8a 	bl	8000108 <strlen>
 80007f4:	0003      	movs	r3, r0
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	2301      	movs	r3, #1
 80007fa:	425b      	negs	r3, r3
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <HAL_UART_RxCpltCallback+0x44>)
 80007fe:	0021      	movs	r1, r4
 8000800:	f001 fcde 	bl	80021c0 <HAL_UART_Transmit>
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b003      	add	sp, #12
 800080a:	bd90      	pop	{r4, r7, pc}
 800080c:	200000b4 	.word	0x200000b4
 8000810:	20000028 	.word	0x20000028
 8000814:	200000b0 	.word	0x200000b0
 8000818:	08003994 	.word	0x08003994

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>
	...

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <HAL_MspInit+0x24>)
 800082e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_MspInit+0x24>)
 8000832:	2101      	movs	r1, #1
 8000834:	430a      	orrs	r2, r1
 8000836:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <HAL_MspInit+0x24>)
 800083a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <HAL_MspInit+0x24>)
 800083e:	2180      	movs	r1, #128	; 0x80
 8000840:	0549      	lsls	r1, r1, #21
 8000842:	430a      	orrs	r2, r1
 8000844:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000

08000850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b089      	sub	sp, #36	; 0x24
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	240c      	movs	r4, #12
 800085a:	193b      	adds	r3, r7, r4
 800085c:	0018      	movs	r0, r3
 800085e:	2314      	movs	r3, #20
 8000860:	001a      	movs	r2, r3
 8000862:	2100      	movs	r1, #0
 8000864:	f003 f82e 	bl	80038c4 <memset>
  if(huart->Instance==USART1)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <HAL_UART_MspInit+0x90>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d132      	bne.n	80008d8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <HAL_UART_MspInit+0x94>)
 8000874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <HAL_UART_MspInit+0x94>)
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	01c9      	lsls	r1, r1, #7
 800087c:	430a      	orrs	r2, r1
 800087e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <HAL_UART_MspInit+0x94>)
 8000882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <HAL_UART_MspInit+0x94>)
 8000886:	2101      	movs	r1, #1
 8000888:	430a      	orrs	r2, r1
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_UART_MspInit+0x94>)
 800088e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000890:	2201      	movs	r2, #1
 8000892:	4013      	ands	r3, r2
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_USART1_TX_Pin|BSP_USART1_RX_Pin;
 8000898:	193b      	adds	r3, r7, r4
 800089a:	22c0      	movs	r2, #192	; 0xc0
 800089c:	00d2      	lsls	r2, r2, #3
 800089e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	0021      	movs	r1, r4
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2202      	movs	r2, #2
 80008a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2203      	movs	r2, #3
 80008b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2204      	movs	r2, #4
 80008b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	187a      	adds	r2, r7, r1
 80008bc:	23a0      	movs	r3, #160	; 0xa0
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	0011      	movs	r1, r2
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fa82 	bl	8000dcc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2100      	movs	r1, #0
 80008cc:	201b      	movs	r0, #27
 80008ce:	f000 f9c3 	bl	8000c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008d2:	201b      	movs	r0, #27
 80008d4:	f000 f9d5 	bl	8000c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	b009      	add	sp, #36	; 0x24
 80008de:	bd90      	pop	{r4, r7, pc}
 80008e0:	40013800 	.word	0x40013800
 80008e4:	40021000 	.word	0x40021000

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ec:	e7fe      	b.n	80008ec <NMI_Handler+0x4>

080008ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler+0x4>

080008f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090c:	f000 f89c 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BSP_EXT_INT_Pin);
 800091a:	2001      	movs	r0, #1
 800091c:	f000 fc04 	bl	8001128 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <USART1_IRQHandler+0x14>)
 800092e:	0018      	movs	r0, r3
 8000930:	f001 fd44 	bl	80023bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	20000028 	.word	0x20000028

08000940 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800094e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000950:	f7ff fff6 	bl	8000940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	; (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <LoopForever+0xe>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	; (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097a:	f002 ffab 	bl	80038d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097e:	f7ff fd9b 	bl	80004b8 <main>

08000982 <LoopForever>:

LoopForever:
    b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   r0, =_estack
 8000984:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000990:	08003a2c 	.word	0x08003a2c
  ldr r2, =_sbss
 8000994:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000998:	200000bc 	.word	0x200000bc

0800099c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_COMP_IRQHandler>
	...

080009a0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_Init+0x3c>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_Init+0x3c>)
 80009b2:	2140      	movs	r1, #64	; 0x40
 80009b4:	430a      	orrs	r2, r1
 80009b6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 f811 	bl	80009e0 <HAL_InitTick>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d003      	beq.n	80009ca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	2201      	movs	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	e001      	b.n	80009ce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ca:	f7ff ff2d 	bl	8000828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
}
 80009d2:	0018      	movs	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	40022000 	.word	0x40022000

080009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_InitTick+0x5c>)
 80009ea:	681c      	ldr	r4, [r3, #0]
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <HAL_InitTick+0x60>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	0019      	movs	r1, r3
 80009f2:	23fa      	movs	r3, #250	; 0xfa
 80009f4:	0098      	lsls	r0, r3, #2
 80009f6:	f7ff fb8f 	bl	8000118 <__udivsi3>
 80009fa:	0003      	movs	r3, r0
 80009fc:	0019      	movs	r1, r3
 80009fe:	0020      	movs	r0, r4
 8000a00:	f7ff fb8a 	bl	8000118 <__udivsi3>
 8000a04:	0003      	movs	r3, r0
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 f94b 	bl	8000ca2 <HAL_SYSTICK_Config>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d001      	beq.n	8000a14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	e00f      	b.n	8000a34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d80b      	bhi.n	8000a32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	425b      	negs	r3, r3
 8000a20:	2200      	movs	r2, #0
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 f918 	bl	8000c58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_InitTick+0x64>)
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e000      	b.n	8000a34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b003      	add	sp, #12
 8000a3a:	bd90      	pop	{r4, r7, pc}
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000004 	.word	0x20000004

08000a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_IncTick+0x1c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	001a      	movs	r2, r3
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_IncTick+0x20>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	18d2      	adds	r2, r2, r3
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_IncTick+0x20>)
 8000a5a:	601a      	str	r2, [r3, #0]
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	20000008 	.word	0x20000008
 8000a68:	200000b8 	.word	0x200000b8

08000a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b02      	ldr	r3, [pc, #8]	; (8000a7c <HAL_GetTick+0x10>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	0018      	movs	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	200000b8 	.word	0x200000b8

08000a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a88:	f7ff fff0 	bl	8000a6c <HAL_GetTick>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3301      	adds	r3, #1
 8000a98:	d005      	beq.n	8000aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_Delay+0x44>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	001a      	movs	r2, r3
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	189b      	adds	r3, r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	f7ff ffe0 	bl	8000a6c <HAL_GetTick>
 8000aac:	0002      	movs	r2, r0
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d8f7      	bhi.n	8000aa8 <HAL_Delay+0x28>
  {
  }
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b004      	add	sp, #16
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	20000008 	.word	0x20000008

08000ac8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <HAL_SuspendTick+0x18>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <HAL_SuspendTick+0x18>)
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	438a      	bics	r2, r1
 8000ad6:	601a      	str	r2, [r3, #0]
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	e000e010 	.word	0xe000e010

08000ae4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <HAL_ResumeTick+0x18>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_ResumeTick+0x18>)
 8000aee:	2102      	movs	r1, #2
 8000af0:	430a      	orrs	r2, r1
 8000af2:	601a      	str	r2, [r3, #0]
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	e000e010 	.word	0xe000e010

08000b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	0002      	movs	r2, r0
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b7f      	cmp	r3, #127	; 0x7f
 8000b12:	d809      	bhi.n	8000b28 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	001a      	movs	r2, r3
 8000b1a:	231f      	movs	r3, #31
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <__NVIC_EnableIRQ+0x30>)
 8000b20:	2101      	movs	r1, #1
 8000b22:	4091      	lsls	r1, r2
 8000b24:	000a      	movs	r2, r1
 8000b26:	601a      	str	r2, [r3, #0]
  }
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b7f      	cmp	r3, #127	; 0x7f
 8000b48:	d828      	bhi.n	8000b9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4a:	4a2f      	ldr	r2, [pc, #188]	; (8000c08 <__NVIC_SetPriority+0xd4>)
 8000b4c:	1dfb      	adds	r3, r7, #7
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b25b      	sxtb	r3, r3
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	33c0      	adds	r3, #192	; 0xc0
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	589b      	ldr	r3, [r3, r2]
 8000b5a:	1dfa      	adds	r2, r7, #7
 8000b5c:	7812      	ldrb	r2, [r2, #0]
 8000b5e:	0011      	movs	r1, r2
 8000b60:	2203      	movs	r2, #3
 8000b62:	400a      	ands	r2, r1
 8000b64:	00d2      	lsls	r2, r2, #3
 8000b66:	21ff      	movs	r1, #255	; 0xff
 8000b68:	4091      	lsls	r1, r2
 8000b6a:	000a      	movs	r2, r1
 8000b6c:	43d2      	mvns	r2, r2
 8000b6e:	401a      	ands	r2, r3
 8000b70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	019b      	lsls	r3, r3, #6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	401a      	ands	r2, r3
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	0018      	movs	r0, r3
 8000b80:	2303      	movs	r3, #3
 8000b82:	4003      	ands	r3, r0
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b88:	481f      	ldr	r0, [pc, #124]	; (8000c08 <__NVIC_SetPriority+0xd4>)
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	089b      	lsrs	r3, r3, #2
 8000b92:	430a      	orrs	r2, r1
 8000b94:	33c0      	adds	r3, #192	; 0xc0
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b9a:	e031      	b.n	8000c00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b9c:	4a1b      	ldr	r2, [pc, #108]	; (8000c0c <__NVIC_SetPriority+0xd8>)
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	400b      	ands	r3, r1
 8000ba8:	3b08      	subs	r3, #8
 8000baa:	089b      	lsrs	r3, r3, #2
 8000bac:	3306      	adds	r3, #6
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	18d3      	adds	r3, r2, r3
 8000bb2:	3304      	adds	r3, #4
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	1dfa      	adds	r2, r7, #7
 8000bb8:	7812      	ldrb	r2, [r2, #0]
 8000bba:	0011      	movs	r1, r2
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	400a      	ands	r2, r1
 8000bc0:	00d2      	lsls	r2, r2, #3
 8000bc2:	21ff      	movs	r1, #255	; 0xff
 8000bc4:	4091      	lsls	r1, r2
 8000bc6:	000a      	movs	r2, r1
 8000bc8:	43d2      	mvns	r2, r2
 8000bca:	401a      	ands	r2, r3
 8000bcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	019b      	lsls	r3, r3, #6
 8000bd2:	22ff      	movs	r2, #255	; 0xff
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	0018      	movs	r0, r3
 8000bdc:	2303      	movs	r3, #3
 8000bde:	4003      	ands	r3, r0
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be4:	4809      	ldr	r0, [pc, #36]	; (8000c0c <__NVIC_SetPriority+0xd8>)
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	001c      	movs	r4, r3
 8000bec:	230f      	movs	r3, #15
 8000bee:	4023      	ands	r3, r4
 8000bf0:	3b08      	subs	r3, #8
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	3306      	adds	r3, #6
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	18c3      	adds	r3, r0, r3
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	601a      	str	r2, [r3, #0]
}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b003      	add	sp, #12
 8000c06:	bd90      	pop	{r4, r7, pc}
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	1e5a      	subs	r2, r3, #1
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	045b      	lsls	r3, r3, #17
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d301      	bcc.n	8000c28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c24:	2301      	movs	r3, #1
 8000c26:	e010      	b.n	8000c4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <SysTick_Config+0x44>)
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	3a01      	subs	r2, #1
 8000c2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c30:	2301      	movs	r3, #1
 8000c32:	425b      	negs	r3, r3
 8000c34:	2103      	movs	r1, #3
 8000c36:	0018      	movs	r0, r3
 8000c38:	f7ff ff7c 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <SysTick_Config+0x44>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <SysTick_Config+0x44>)
 8000c44:	2207      	movs	r2, #7
 8000c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b002      	add	sp, #8
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	e000e010 	.word	0xe000e010

08000c58 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	210f      	movs	r1, #15
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	1c02      	adds	r2, r0, #0
 8000c68:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	0011      	movs	r1, r2
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff ff5d 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b004      	add	sp, #16
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	0002      	movs	r2, r0
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	0018      	movs	r0, r3
 8000c96:	f7ff ff33 	bl	8000b00 <__NVIC_EnableIRQ>
}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b002      	add	sp, #8
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff ffaf 	bl	8000c10 <SysTick_Config>
 8000cb2:	0003      	movs	r3, r0
}
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2225      	movs	r2, #37	; 0x25
 8000cd0:	5c9b      	ldrb	r3, [r3, r2]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d008      	beq.n	8000cea <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2204      	movs	r2, #4
 8000cdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2224      	movs	r2, #36	; 0x24
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e024      	b.n	8000d34 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	210e      	movs	r1, #14
 8000cf6:	438a      	bics	r2, r1
 8000cf8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2101      	movs	r1, #1
 8000d06:	438a      	bics	r2, r1
 8000d08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	221c      	movs	r2, #28
 8000d10:	401a      	ands	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	2101      	movs	r1, #1
 8000d18:	4091      	lsls	r1, r2
 8000d1a:	000a      	movs	r2, r1
 8000d1c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2225      	movs	r2, #37	; 0x25
 8000d22:	2101      	movs	r1, #1
 8000d24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2224      	movs	r2, #36	; 0x24
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	5499      	strb	r1, [r3, r2]

    return status;
 8000d2e:	230f      	movs	r3, #15
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b004      	add	sp, #16
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d44:	210f      	movs	r1, #15
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2225      	movs	r2, #37	; 0x25
 8000d50:	5c9b      	ldrb	r3, [r3, r2]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d006      	beq.n	8000d66 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	e02a      	b.n	8000dbc <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	210e      	movs	r1, #14
 8000d72:	438a      	bics	r2, r1
 8000d74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2101      	movs	r1, #1
 8000d82:	438a      	bics	r2, r1
 8000d84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	221c      	movs	r2, #28
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	2101      	movs	r1, #1
 8000d94:	4091      	lsls	r1, r2
 8000d96:	000a      	movs	r2, r1
 8000d98:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2225      	movs	r2, #37	; 0x25
 8000d9e:	2101      	movs	r1, #1
 8000da0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2224      	movs	r2, #36	; 0x24
 8000da6:	2100      	movs	r1, #0
 8000da8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d004      	beq.n	8000dbc <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	0010      	movs	r0, r2
 8000dba:	4798      	blx	r3
    }
  }
  return status;
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	781b      	ldrb	r3, [r3, #0]
}
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b004      	add	sp, #16
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000de2:	e14f      	b.n	8001084 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2101      	movs	r1, #1
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	4091      	lsls	r1, r2
 8000dee:	000a      	movs	r2, r1
 8000df0:	4013      	ands	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d100      	bne.n	8000dfc <HAL_GPIO_Init+0x30>
 8000dfa:	e140      	b.n	800107e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2203      	movs	r2, #3
 8000e02:	4013      	ands	r3, r2
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d005      	beq.n	8000e14 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d130      	bne.n	8000e76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	409a      	lsls	r2, r3
 8000e22:	0013      	movs	r3, r2
 8000e24:	43da      	mvns	r2, r3
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68da      	ldr	r2, [r3, #12]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	409a      	lsls	r2, r3
 8000e36:	0013      	movs	r3, r2
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	43da      	mvns	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	2201      	movs	r2, #1
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d017      	beq.n	8000eb2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	409a      	lsls	r2, r3
 8000e90:	0013      	movs	r3, r2
 8000e92:	43da      	mvns	r2, r3
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	0013      	movs	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	4013      	ands	r3, r2
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d123      	bne.n	8000f06 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	0092      	lsls	r2, r2, #2
 8000ec8:	58d3      	ldr	r3, [r2, r3]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	2207      	movs	r2, #7
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	0013      	movs	r3, r2
 8000eda:	43da      	mvns	r2, r3
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	691a      	ldr	r2, [r3, #16]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	2107      	movs	r1, #7
 8000eea:	400b      	ands	r3, r1
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	0092      	lsls	r2, r2, #2
 8000f02:	6939      	ldr	r1, [r7, #16]
 8000f04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	409a      	lsls	r2, r3
 8000f14:	0013      	movs	r3, r2
 8000f16:	43da      	mvns	r2, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2203      	movs	r2, #3
 8000f24:	401a      	ands	r2, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	23c0      	movs	r3, #192	; 0xc0
 8000f40:	029b      	lsls	r3, r3, #10
 8000f42:	4013      	ands	r3, r2
 8000f44:	d100      	bne.n	8000f48 <HAL_GPIO_Init+0x17c>
 8000f46:	e09a      	b.n	800107e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f48:	4b54      	ldr	r3, [pc, #336]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8000f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f4c:	4b53      	ldr	r3, [pc, #332]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8000f4e:	2101      	movs	r1, #1
 8000f50:	430a      	orrs	r2, r1
 8000f52:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f54:	4a52      	ldr	r2, [pc, #328]	; (80010a0 <HAL_GPIO_Init+0x2d4>)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	589b      	ldr	r3, [r3, r2]
 8000f60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	2203      	movs	r2, #3
 8000f66:	4013      	ands	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	409a      	lsls	r2, r3
 8000f6e:	0013      	movs	r3, r2
 8000f70:	43da      	mvns	r2, r3
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	23a0      	movs	r3, #160	; 0xa0
 8000f7c:	05db      	lsls	r3, r3, #23
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d019      	beq.n	8000fb6 <HAL_GPIO_Init+0x1ea>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a47      	ldr	r2, [pc, #284]	; (80010a4 <HAL_GPIO_Init+0x2d8>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d013      	beq.n	8000fb2 <HAL_GPIO_Init+0x1e6>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a46      	ldr	r2, [pc, #280]	; (80010a8 <HAL_GPIO_Init+0x2dc>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00d      	beq.n	8000fae <HAL_GPIO_Init+0x1e2>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a45      	ldr	r2, [pc, #276]	; (80010ac <HAL_GPIO_Init+0x2e0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d007      	beq.n	8000faa <HAL_GPIO_Init+0x1de>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a44      	ldr	r2, [pc, #272]	; (80010b0 <HAL_GPIO_Init+0x2e4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_GPIO_Init+0x1da>
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	e008      	b.n	8000fb8 <HAL_GPIO_Init+0x1ec>
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x1ec>
 8000faa:	2303      	movs	r3, #3
 8000fac:	e004      	b.n	8000fb8 <HAL_GPIO_Init+0x1ec>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x1ec>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x1ec>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	2103      	movs	r1, #3
 8000fbc:	400a      	ands	r2, r1
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc8:	4935      	ldr	r1, [pc, #212]	; (80010a0 <HAL_GPIO_Init+0x2d4>)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd6:	4b37      	ldr	r3, [pc, #220]	; (80010b4 <HAL_GPIO_Init+0x2e8>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	035b      	lsls	r3, r3, #13
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ffa:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <HAL_GPIO_Init+0x2e8>)
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001000:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <HAL_GPIO_Init+0x2e8>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43da      	mvns	r2, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	039b      	lsls	r3, r3, #14
 8001018:	4013      	ands	r3, r2
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001024:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <HAL_GPIO_Init+0x2e8>)
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800102a:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <HAL_GPIO_Init+0x2e8>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	43da      	mvns	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	029b      	lsls	r3, r3, #10
 8001042:	4013      	ands	r3, r2
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_GPIO_Init+0x2e8>)
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_GPIO_Init+0x2e8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	43da      	mvns	r2, r3
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	025b      	lsls	r3, r3, #9
 800106c:	4013      	ands	r3, r2
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_GPIO_Init+0x2e8>)
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	40da      	lsrs	r2, r3
 800108c:	1e13      	subs	r3, r2, #0
 800108e:	d000      	beq.n	8001092 <HAL_GPIO_Init+0x2c6>
 8001090:	e6a8      	b.n	8000de4 <HAL_GPIO_Init+0x18>
  }
}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	b006      	add	sp, #24
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010000 	.word	0x40010000
 80010a4:	50000400 	.word	0x50000400
 80010a8:	50000800 	.word	0x50000800
 80010ac:	50000c00 	.word	0x50000c00
 80010b0:	50001c00 	.word	0x50001c00
 80010b4:	40010400 	.word	0x40010400

080010b8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	0008      	movs	r0, r1
 80010c2:	0011      	movs	r1, r2
 80010c4:	1cbb      	adds	r3, r7, #2
 80010c6:	1c02      	adds	r2, r0, #0
 80010c8:	801a      	strh	r2, [r3, #0]
 80010ca:	1c7b      	adds	r3, r7, #1
 80010cc:	1c0a      	adds	r2, r1, #0
 80010ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010d0:	1c7b      	adds	r3, r7, #1
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d004      	beq.n	80010e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010d8:	1cbb      	adds	r3, r7, #2
 80010da:	881a      	ldrh	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80010e0:	e003      	b.n	80010ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80010e2:	1cbb      	adds	r3, r7, #2
 80010e4:	881a      	ldrh	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b002      	add	sp, #8
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	000a      	movs	r2, r1
 80010fc:	1cbb      	adds	r3, r7, #2
 80010fe:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001106:	1cbb      	adds	r3, r7, #2
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4013      	ands	r3, r2
 800110e:	041a      	lsls	r2, r3, #16
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43db      	mvns	r3, r3
 8001114:	1cb9      	adds	r1, r7, #2
 8001116:	8809      	ldrh	r1, [r1, #0]
 8001118:	400b      	ands	r3, r1
 800111a:	431a      	orrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	619a      	str	r2, [r3, #24]
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	b004      	add	sp, #16
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	0002      	movs	r2, r0
 8001130:	1dbb      	adds	r3, r7, #6
 8001132:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	1dba      	adds	r2, r7, #6
 800113a:	8812      	ldrh	r2, [r2, #0]
 800113c:	4013      	ands	r3, r2
 800113e:	d008      	beq.n	8001152 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001142:	1dba      	adds	r2, r7, #6
 8001144:	8812      	ldrh	r2, [r2, #0]
 8001146:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001148:	1dbb      	adds	r3, r7, #6
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	0018      	movs	r0, r3
 800114e:	f7ff fb17 	bl	8000780 <HAL_GPIO_EXTI_Callback>
  }
}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b002      	add	sp, #8
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	40010400 	.word	0x40010400

08001160 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	000a      	movs	r2, r1
 800116a:	1cfb      	adds	r3, r7, #3
 800116c:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8001172:	4b23      	ldr	r3, [pc, #140]	; (8001200 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <HAL_PWR_EnterSLEEPMode+0xa4>)
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	2201      	movs	r2, #1
 8001184:	4013      	ands	r3, r2
 8001186:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d008      	beq.n	80011a0 <HAL_PWR_EnterSLEEPMode+0x40>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d005      	beq.n	80011a0 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800119a:	491b      	ldr	r1, [pc, #108]	; (8001208 <HAL_PWR_EnterSLEEPMode+0xa8>)
 800119c:	400a      	ands	r2, r1
 800119e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2203      	movs	r2, #3
 80011aa:	4393      	bics	r3, r2
 80011ac:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <HAL_PWR_EnterSLEEPMode+0xac>)
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_PWR_EnterSLEEPMode+0xac>)
 80011c2:	2104      	movs	r1, #4
 80011c4:	438a      	bics	r2, r1
 80011c6:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80011c8:	1cfb      	adds	r3, r7, #3
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80011d0:	bf30      	wfi
 80011d2:	e002      	b.n	80011da <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80011d4:	bf40      	sev
    __WFE();
 80011d6:	bf20      	wfe
    __WFE();
 80011d8:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d009      	beq.n	80011f4 <HAL_PWR_EnterSLEEPMode+0x94>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d006      	beq.n	80011f4 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80011ec:	2180      	movs	r1, #128	; 0x80
 80011ee:	0089      	lsls	r1, r1, #2
 80011f0:	430a      	orrs	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 80011f4:	46c0      	nop			; (mov r8, r8)

}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b006      	add	sp, #24
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	40007000 	.word	0x40007000
 8001204:	40010000 	.word	0x40010000
 8001208:	fffffdff 	.word	0xfffffdff
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <HAL_PWR_EnableSleepOnExit+0x18>)
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_PWR_EnableSleepOnExit+0x18>)
 800121a:	2102      	movs	r1, #2
 800121c:	430a      	orrs	r2, r1
 800121e:	611a      	str	r2, [r3, #16]
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800122c:	b5b0      	push	{r4, r5, r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	f000 fbaf 	bl	800199e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001240:	4bcf      	ldr	r3, [pc, #828]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	220c      	movs	r2, #12
 8001246:	4013      	ands	r3, r2
 8001248:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800124a:	4bcd      	ldr	r3, [pc, #820]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	025b      	lsls	r3, r3, #9
 8001252:	4013      	ands	r3, r2
 8001254:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2201      	movs	r2, #1
 800125c:	4013      	ands	r3, r2
 800125e:	d100      	bne.n	8001262 <HAL_RCC_OscConfig+0x36>
 8001260:	e07e      	b.n	8001360 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	2b08      	cmp	r3, #8
 8001266:	d007      	beq.n	8001278 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001268:	6a3b      	ldr	r3, [r7, #32]
 800126a:	2b0c      	cmp	r3, #12
 800126c:	d112      	bne.n	8001294 <HAL_RCC_OscConfig+0x68>
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	025b      	lsls	r3, r3, #9
 8001274:	429a      	cmp	r2, r3
 8001276:	d10d      	bne.n	8001294 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	4bc1      	ldr	r3, [pc, #772]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	029b      	lsls	r3, r3, #10
 8001280:	4013      	ands	r3, r2
 8001282:	d100      	bne.n	8001286 <HAL_RCC_OscConfig+0x5a>
 8001284:	e06b      	b.n	800135e <HAL_RCC_OscConfig+0x132>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d167      	bne.n	800135e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	f000 fb85 	bl	800199e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	025b      	lsls	r3, r3, #9
 800129c:	429a      	cmp	r2, r3
 800129e:	d107      	bne.n	80012b0 <HAL_RCC_OscConfig+0x84>
 80012a0:	4bb7      	ldr	r3, [pc, #732]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4bb6      	ldr	r3, [pc, #728]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80012a6:	2180      	movs	r1, #128	; 0x80
 80012a8:	0249      	lsls	r1, r1, #9
 80012aa:	430a      	orrs	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	e027      	b.n	8001300 <HAL_RCC_OscConfig+0xd4>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	23a0      	movs	r3, #160	; 0xa0
 80012b6:	02db      	lsls	r3, r3, #11
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d10e      	bne.n	80012da <HAL_RCC_OscConfig+0xae>
 80012bc:	4bb0      	ldr	r3, [pc, #704]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4baf      	ldr	r3, [pc, #700]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80012c2:	2180      	movs	r1, #128	; 0x80
 80012c4:	02c9      	lsls	r1, r1, #11
 80012c6:	430a      	orrs	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	4bad      	ldr	r3, [pc, #692]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4bac      	ldr	r3, [pc, #688]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80012d0:	2180      	movs	r1, #128	; 0x80
 80012d2:	0249      	lsls	r1, r1, #9
 80012d4:	430a      	orrs	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	e012      	b.n	8001300 <HAL_RCC_OscConfig+0xd4>
 80012da:	4ba9      	ldr	r3, [pc, #676]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4ba8      	ldr	r3, [pc, #672]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80012e0:	49a8      	ldr	r1, [pc, #672]	; (8001584 <HAL_RCC_OscConfig+0x358>)
 80012e2:	400a      	ands	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	4ba6      	ldr	r3, [pc, #664]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	025b      	lsls	r3, r3, #9
 80012ee:	4013      	ands	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4ba2      	ldr	r3, [pc, #648]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4ba1      	ldr	r3, [pc, #644]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80012fa:	49a3      	ldr	r1, [pc, #652]	; (8001588 <HAL_RCC_OscConfig+0x35c>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d015      	beq.n	8001334 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fbb0 	bl	8000a6c <HAL_GetTick>
 800130c:	0003      	movs	r3, r0
 800130e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001310:	e009      	b.n	8001326 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001312:	f7ff fbab 	bl	8000a6c <HAL_GetTick>
 8001316:	0002      	movs	r2, r0
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b64      	cmp	r3, #100	; 0x64
 800131e:	d902      	bls.n	8001326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	f000 fb3c 	bl	800199e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001326:	4b96      	ldr	r3, [pc, #600]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	029b      	lsls	r3, r3, #10
 800132e:	4013      	ands	r3, r2
 8001330:	d0ef      	beq.n	8001312 <HAL_RCC_OscConfig+0xe6>
 8001332:	e015      	b.n	8001360 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fb9a 	bl	8000a6c <HAL_GetTick>
 8001338:	0003      	movs	r3, r0
 800133a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800133e:	f7ff fb95 	bl	8000a6c <HAL_GetTick>
 8001342:	0002      	movs	r2, r0
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b64      	cmp	r3, #100	; 0x64
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e326      	b.n	800199e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001350:	4b8b      	ldr	r3, [pc, #556]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	029b      	lsls	r3, r3, #10
 8001358:	4013      	ands	r3, r2
 800135a:	d1f0      	bne.n	800133e <HAL_RCC_OscConfig+0x112>
 800135c:	e000      	b.n	8001360 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2202      	movs	r2, #2
 8001366:	4013      	ands	r3, r2
 8001368:	d100      	bne.n	800136c <HAL_RCC_OscConfig+0x140>
 800136a:	e08b      	b.n	8001484 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	2b04      	cmp	r3, #4
 8001376:	d005      	beq.n	8001384 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001378:	6a3b      	ldr	r3, [r7, #32]
 800137a:	2b0c      	cmp	r3, #12
 800137c:	d13e      	bne.n	80013fc <HAL_RCC_OscConfig+0x1d0>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d13b      	bne.n	80013fc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001384:	4b7e      	ldr	r3, [pc, #504]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2204      	movs	r2, #4
 800138a:	4013      	ands	r3, r2
 800138c:	d004      	beq.n	8001398 <HAL_RCC_OscConfig+0x16c>
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e302      	b.n	800199e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001398:	4b79      	ldr	r3, [pc, #484]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	4a7b      	ldr	r2, [pc, #492]	; (800158c <HAL_RCC_OscConfig+0x360>)
 800139e:	4013      	ands	r3, r2
 80013a0:	0019      	movs	r1, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	021a      	lsls	r2, r3, #8
 80013a8:	4b75      	ldr	r3, [pc, #468]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80013aa:	430a      	orrs	r2, r1
 80013ac:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013ae:	4b74      	ldr	r3, [pc, #464]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2209      	movs	r2, #9
 80013b4:	4393      	bics	r3, r2
 80013b6:	0019      	movs	r1, r3
 80013b8:	4b71      	ldr	r3, [pc, #452]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	430a      	orrs	r2, r1
 80013be:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013c0:	f000 fc40 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 80013c4:	0001      	movs	r1, r0
 80013c6:	4b6e      	ldr	r3, [pc, #440]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	220f      	movs	r2, #15
 80013ce:	4013      	ands	r3, r2
 80013d0:	4a6f      	ldr	r2, [pc, #444]	; (8001590 <HAL_RCC_OscConfig+0x364>)
 80013d2:	5cd3      	ldrb	r3, [r2, r3]
 80013d4:	000a      	movs	r2, r1
 80013d6:	40da      	lsrs	r2, r3
 80013d8:	4b6e      	ldr	r3, [pc, #440]	; (8001594 <HAL_RCC_OscConfig+0x368>)
 80013da:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80013dc:	4b6e      	ldr	r3, [pc, #440]	; (8001598 <HAL_RCC_OscConfig+0x36c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2513      	movs	r5, #19
 80013e2:	197c      	adds	r4, r7, r5
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff fafb 	bl	80009e0 <HAL_InitTick>
 80013ea:	0003      	movs	r3, r0
 80013ec:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80013ee:	197b      	adds	r3, r7, r5
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d046      	beq.n	8001484 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80013f6:	197b      	adds	r3, r7, r5
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	e2d0      	b.n	800199e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d027      	beq.n	8001452 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001402:	4b5f      	ldr	r3, [pc, #380]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2209      	movs	r2, #9
 8001408:	4393      	bics	r3, r2
 800140a:	0019      	movs	r1, r3
 800140c:	4b5c      	ldr	r3, [pc, #368]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	430a      	orrs	r2, r1
 8001412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fb2a 	bl	8000a6c <HAL_GetTick>
 8001418:	0003      	movs	r3, r0
 800141a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141e:	f7ff fb25 	bl	8000a6c <HAL_GetTick>
 8001422:	0002      	movs	r2, r0
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e2b6      	b.n	800199e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001430:	4b53      	ldr	r3, [pc, #332]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2204      	movs	r2, #4
 8001436:	4013      	ands	r3, r2
 8001438:	d0f1      	beq.n	800141e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143a:	4b51      	ldr	r3, [pc, #324]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4a53      	ldr	r2, [pc, #332]	; (800158c <HAL_RCC_OscConfig+0x360>)
 8001440:	4013      	ands	r3, r2
 8001442:	0019      	movs	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	021a      	lsls	r2, r3, #8
 800144a:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 800144c:	430a      	orrs	r2, r1
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	e018      	b.n	8001484 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001452:	4b4b      	ldr	r3, [pc, #300]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 8001458:	2101      	movs	r1, #1
 800145a:	438a      	bics	r2, r1
 800145c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145e:	f7ff fb05 	bl	8000a6c <HAL_GetTick>
 8001462:	0003      	movs	r3, r0
 8001464:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001468:	f7ff fb00 	bl	8000a6c <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e291      	b.n	800199e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800147a:	4b41      	ldr	r3, [pc, #260]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2204      	movs	r2, #4
 8001480:	4013      	ands	r3, r2
 8001482:	d1f1      	bne.n	8001468 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2210      	movs	r2, #16
 800148a:	4013      	ands	r3, r2
 800148c:	d100      	bne.n	8001490 <HAL_RCC_OscConfig+0x264>
 800148e:	e0a1      	b.n	80015d4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d140      	bne.n	8001518 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001496:	4b3a      	ldr	r3, [pc, #232]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4013      	ands	r3, r2
 80014a0:	d005      	beq.n	80014ae <HAL_RCC_OscConfig+0x282>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e277      	b.n	800199e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ae:	4b34      	ldr	r3, [pc, #208]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4a3a      	ldr	r2, [pc, #232]	; (800159c <HAL_RCC_OscConfig+0x370>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	0019      	movs	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014bc:	4b30      	ldr	r3, [pc, #192]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80014be:	430a      	orrs	r2, r1
 80014c0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	0a19      	lsrs	r1, r3, #8
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	061a      	lsls	r2, r3, #24
 80014d0:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80014d2:	430a      	orrs	r2, r1
 80014d4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	0b5b      	lsrs	r3, r3, #13
 80014dc:	3301      	adds	r3, #1
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	0212      	lsls	r2, r2, #8
 80014e2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014e4:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	091b      	lsrs	r3, r3, #4
 80014ea:	210f      	movs	r1, #15
 80014ec:	400b      	ands	r3, r1
 80014ee:	4928      	ldr	r1, [pc, #160]	; (8001590 <HAL_RCC_OscConfig+0x364>)
 80014f0:	5ccb      	ldrb	r3, [r1, r3]
 80014f2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <HAL_RCC_OscConfig+0x368>)
 80014f6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <HAL_RCC_OscConfig+0x36c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2513      	movs	r5, #19
 80014fe:	197c      	adds	r4, r7, r5
 8001500:	0018      	movs	r0, r3
 8001502:	f7ff fa6d 	bl	80009e0 <HAL_InitTick>
 8001506:	0003      	movs	r3, r0
 8001508:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800150a:	197b      	adds	r3, r7, r5
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d060      	beq.n	80015d4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001512:	197b      	adds	r3, r7, r5
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	e242      	b.n	800199e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d03f      	beq.n	80015a0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 8001526:	2180      	movs	r1, #128	; 0x80
 8001528:	0049      	lsls	r1, r1, #1
 800152a:	430a      	orrs	r2, r1
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff fa9d 	bl	8000a6c <HAL_GetTick>
 8001532:	0003      	movs	r3, r0
 8001534:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001538:	f7ff fa98 	bl	8000a6c <HAL_GetTick>
 800153c:	0002      	movs	r2, r0
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e229      	b.n	800199e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4013      	ands	r3, r2
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4a10      	ldr	r2, [pc, #64]	; (800159c <HAL_RCC_OscConfig+0x370>)
 800155c:	4013      	ands	r3, r2
 800155e:	0019      	movs	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 8001566:	430a      	orrs	r2, r1
 8001568:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	0a19      	lsrs	r1, r3, #8
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	061a      	lsls	r2, r3, #24
 8001578:	4b01      	ldr	r3, [pc, #4]	; (8001580 <HAL_RCC_OscConfig+0x354>)
 800157a:	430a      	orrs	r2, r1
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	e029      	b.n	80015d4 <HAL_RCC_OscConfig+0x3a8>
 8001580:	40021000 	.word	0x40021000
 8001584:	fffeffff 	.word	0xfffeffff
 8001588:	fffbffff 	.word	0xfffbffff
 800158c:	ffffe0ff 	.word	0xffffe0ff
 8001590:	080039b0 	.word	0x080039b0
 8001594:	20000000 	.word	0x20000000
 8001598:	20000004 	.word	0x20000004
 800159c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015a0:	4bbd      	ldr	r3, [pc, #756]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4bbc      	ldr	r3, [pc, #752]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 80015a6:	49bd      	ldr	r1, [pc, #756]	; (800189c <HAL_RCC_OscConfig+0x670>)
 80015a8:	400a      	ands	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fa5e 	bl	8000a6c <HAL_GetTick>
 80015b0:	0003      	movs	r3, r0
 80015b2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015b6:	f7ff fa59 	bl	8000a6c <HAL_GetTick>
 80015ba:	0002      	movs	r2, r0
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e1ea      	b.n	800199e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015c8:	4bb3      	ldr	r3, [pc, #716]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4013      	ands	r3, r2
 80015d2:	d1f0      	bne.n	80015b6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2208      	movs	r2, #8
 80015da:	4013      	ands	r3, r2
 80015dc:	d036      	beq.n	800164c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d019      	beq.n	800161a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e6:	4bac      	ldr	r3, [pc, #688]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 80015e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015ea:	4bab      	ldr	r3, [pc, #684]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 80015ec:	2101      	movs	r1, #1
 80015ee:	430a      	orrs	r2, r1
 80015f0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fa3b 	bl	8000a6c <HAL_GetTick>
 80015f6:	0003      	movs	r3, r0
 80015f8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fc:	f7ff fa36 	bl	8000a6c <HAL_GetTick>
 8001600:	0002      	movs	r2, r0
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e1c7      	b.n	800199e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800160e:	4ba2      	ldr	r3, [pc, #648]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 8001610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001612:	2202      	movs	r2, #2
 8001614:	4013      	ands	r3, r2
 8001616:	d0f1      	beq.n	80015fc <HAL_RCC_OscConfig+0x3d0>
 8001618:	e018      	b.n	800164c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800161a:	4b9f      	ldr	r3, [pc, #636]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 800161c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800161e:	4b9e      	ldr	r3, [pc, #632]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 8001620:	2101      	movs	r1, #1
 8001622:	438a      	bics	r2, r1
 8001624:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001626:	f7ff fa21 	bl	8000a6c <HAL_GetTick>
 800162a:	0003      	movs	r3, r0
 800162c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001630:	f7ff fa1c 	bl	8000a6c <HAL_GetTick>
 8001634:	0002      	movs	r2, r0
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e1ad      	b.n	800199e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001642:	4b95      	ldr	r3, [pc, #596]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 8001644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d1f1      	bne.n	8001630 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2204      	movs	r2, #4
 8001652:	4013      	ands	r3, r2
 8001654:	d100      	bne.n	8001658 <HAL_RCC_OscConfig+0x42c>
 8001656:	e0ae      	b.n	80017b6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001658:	2027      	movs	r0, #39	; 0x27
 800165a:	183b      	adds	r3, r7, r0
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001660:	4b8d      	ldr	r3, [pc, #564]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 8001662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	055b      	lsls	r3, r3, #21
 8001668:	4013      	ands	r3, r2
 800166a:	d109      	bne.n	8001680 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166c:	4b8a      	ldr	r3, [pc, #552]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 800166e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001670:	4b89      	ldr	r3, [pc, #548]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 8001672:	2180      	movs	r1, #128	; 0x80
 8001674:	0549      	lsls	r1, r1, #21
 8001676:	430a      	orrs	r2, r1
 8001678:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800167a:	183b      	adds	r3, r7, r0
 800167c:	2201      	movs	r2, #1
 800167e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001680:	4b87      	ldr	r3, [pc, #540]	; (80018a0 <HAL_RCC_OscConfig+0x674>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4013      	ands	r3, r2
 800168a:	d11a      	bne.n	80016c2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168c:	4b84      	ldr	r3, [pc, #528]	; (80018a0 <HAL_RCC_OscConfig+0x674>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b83      	ldr	r3, [pc, #524]	; (80018a0 <HAL_RCC_OscConfig+0x674>)
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	0049      	lsls	r1, r1, #1
 8001696:	430a      	orrs	r2, r1
 8001698:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169a:	f7ff f9e7 	bl	8000a6c <HAL_GetTick>
 800169e:	0003      	movs	r3, r0
 80016a0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a4:	f7ff f9e2 	bl	8000a6c <HAL_GetTick>
 80016a8:	0002      	movs	r2, r0
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	; 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e173      	b.n	800199e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b6:	4b7a      	ldr	r3, [pc, #488]	; (80018a0 <HAL_RCC_OscConfig+0x674>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4013      	ands	r3, r2
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d107      	bne.n	80016de <HAL_RCC_OscConfig+0x4b2>
 80016ce:	4b72      	ldr	r3, [pc, #456]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 80016d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016d2:	4b71      	ldr	r3, [pc, #452]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	0049      	lsls	r1, r1, #1
 80016d8:	430a      	orrs	r2, r1
 80016da:	651a      	str	r2, [r3, #80]	; 0x50
 80016dc:	e031      	b.n	8001742 <HAL_RCC_OscConfig+0x516>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0x4d4>
 80016e6:	4b6c      	ldr	r3, [pc, #432]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 80016e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ea:	4b6b      	ldr	r3, [pc, #428]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 80016ec:	496b      	ldr	r1, [pc, #428]	; (800189c <HAL_RCC_OscConfig+0x670>)
 80016ee:	400a      	ands	r2, r1
 80016f0:	651a      	str	r2, [r3, #80]	; 0x50
 80016f2:	4b69      	ldr	r3, [pc, #420]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 80016f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016f6:	4b68      	ldr	r3, [pc, #416]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 80016f8:	496a      	ldr	r1, [pc, #424]	; (80018a4 <HAL_RCC_OscConfig+0x678>)
 80016fa:	400a      	ands	r2, r1
 80016fc:	651a      	str	r2, [r3, #80]	; 0x50
 80016fe:	e020      	b.n	8001742 <HAL_RCC_OscConfig+0x516>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	23a0      	movs	r3, #160	; 0xa0
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	429a      	cmp	r2, r3
 800170a:	d10e      	bne.n	800172a <HAL_RCC_OscConfig+0x4fe>
 800170c:	4b62      	ldr	r3, [pc, #392]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 800170e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001710:	4b61      	ldr	r3, [pc, #388]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 8001712:	2180      	movs	r1, #128	; 0x80
 8001714:	00c9      	lsls	r1, r1, #3
 8001716:	430a      	orrs	r2, r1
 8001718:	651a      	str	r2, [r3, #80]	; 0x50
 800171a:	4b5f      	ldr	r3, [pc, #380]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 800171c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800171e:	4b5e      	ldr	r3, [pc, #376]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 8001720:	2180      	movs	r1, #128	; 0x80
 8001722:	0049      	lsls	r1, r1, #1
 8001724:	430a      	orrs	r2, r1
 8001726:	651a      	str	r2, [r3, #80]	; 0x50
 8001728:	e00b      	b.n	8001742 <HAL_RCC_OscConfig+0x516>
 800172a:	4b5b      	ldr	r3, [pc, #364]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 800172c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800172e:	4b5a      	ldr	r3, [pc, #360]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 8001730:	495a      	ldr	r1, [pc, #360]	; (800189c <HAL_RCC_OscConfig+0x670>)
 8001732:	400a      	ands	r2, r1
 8001734:	651a      	str	r2, [r3, #80]	; 0x50
 8001736:	4b58      	ldr	r3, [pc, #352]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 8001738:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800173a:	4b57      	ldr	r3, [pc, #348]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 800173c:	4959      	ldr	r1, [pc, #356]	; (80018a4 <HAL_RCC_OscConfig+0x678>)
 800173e:	400a      	ands	r2, r1
 8001740:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d015      	beq.n	8001776 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174a:	f7ff f98f 	bl	8000a6c <HAL_GetTick>
 800174e:	0003      	movs	r3, r0
 8001750:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001752:	e009      	b.n	8001768 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f7ff f98a 	bl	8000a6c <HAL_GetTick>
 8001758:	0002      	movs	r2, r0
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	4a52      	ldr	r2, [pc, #328]	; (80018a8 <HAL_RCC_OscConfig+0x67c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e11a      	b.n	800199e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001768:	4b4b      	ldr	r3, [pc, #300]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 800176a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4013      	ands	r3, r2
 8001772:	d0ef      	beq.n	8001754 <HAL_RCC_OscConfig+0x528>
 8001774:	e014      	b.n	80017a0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001776:	f7ff f979 	bl	8000a6c <HAL_GetTick>
 800177a:	0003      	movs	r3, r0
 800177c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800177e:	e009      	b.n	8001794 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001780:	f7ff f974 	bl	8000a6c <HAL_GetTick>
 8001784:	0002      	movs	r2, r0
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	4a47      	ldr	r2, [pc, #284]	; (80018a8 <HAL_RCC_OscConfig+0x67c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e104      	b.n	800199e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001794:	4b40      	ldr	r3, [pc, #256]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 8001796:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4013      	ands	r3, r2
 800179e:	d1ef      	bne.n	8001780 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017a0:	2327      	movs	r3, #39	; 0x27
 80017a2:	18fb      	adds	r3, r7, r3
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d105      	bne.n	80017b6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017aa:	4b3b      	ldr	r3, [pc, #236]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 80017ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017ae:	4b3a      	ldr	r3, [pc, #232]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 80017b0:	493e      	ldr	r1, [pc, #248]	; (80018ac <HAL_RCC_OscConfig+0x680>)
 80017b2:	400a      	ands	r2, r1
 80017b4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2220      	movs	r2, #32
 80017bc:	4013      	ands	r3, r2
 80017be:	d049      	beq.n	8001854 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d026      	beq.n	8001816 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017c8:	4b33      	ldr	r3, [pc, #204]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	4b32      	ldr	r3, [pc, #200]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 80017ce:	2101      	movs	r1, #1
 80017d0:	430a      	orrs	r2, r1
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	4b30      	ldr	r3, [pc, #192]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 80017d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d8:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 80017da:	2101      	movs	r1, #1
 80017dc:	430a      	orrs	r2, r1
 80017de:	635a      	str	r2, [r3, #52]	; 0x34
 80017e0:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <HAL_RCC_OscConfig+0x684>)
 80017e2:	6a1a      	ldr	r2, [r3, #32]
 80017e4:	4b32      	ldr	r3, [pc, #200]	; (80018b0 <HAL_RCC_OscConfig+0x684>)
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	0189      	lsls	r1, r1, #6
 80017ea:	430a      	orrs	r2, r1
 80017ec:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ee:	f7ff f93d 	bl	8000a6c <HAL_GetTick>
 80017f2:	0003      	movs	r3, r0
 80017f4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f8:	f7ff f938 	bl	8000a6c <HAL_GetTick>
 80017fc:	0002      	movs	r2, r0
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e0c9      	b.n	800199e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800180a:	4b23      	ldr	r3, [pc, #140]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2202      	movs	r2, #2
 8001810:	4013      	ands	r3, r2
 8001812:	d0f1      	beq.n	80017f8 <HAL_RCC_OscConfig+0x5cc>
 8001814:	e01e      	b.n	8001854 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 800181c:	2101      	movs	r1, #1
 800181e:	438a      	bics	r2, r1
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <HAL_RCC_OscConfig+0x684>)
 8001824:	6a1a      	ldr	r2, [r3, #32]
 8001826:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <HAL_RCC_OscConfig+0x684>)
 8001828:	4922      	ldr	r1, [pc, #136]	; (80018b4 <HAL_RCC_OscConfig+0x688>)
 800182a:	400a      	ands	r2, r1
 800182c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff f91d 	bl	8000a6c <HAL_GetTick>
 8001832:	0003      	movs	r3, r0
 8001834:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001838:	f7ff f918 	bl	8000a6c <HAL_GetTick>
 800183c:	0002      	movs	r2, r0
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e0a9      	b.n	800199e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2202      	movs	r2, #2
 8001850:	4013      	ands	r3, r2
 8001852:	d1f1      	bne.n	8001838 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	2b00      	cmp	r3, #0
 800185a:	d100      	bne.n	800185e <HAL_RCC_OscConfig+0x632>
 800185c:	e09e      	b.n	800199c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	2b0c      	cmp	r3, #12
 8001862:	d100      	bne.n	8001866 <HAL_RCC_OscConfig+0x63a>
 8001864:	e077      	b.n	8001956 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	2b02      	cmp	r3, #2
 800186c:	d158      	bne.n	8001920 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_RCC_OscConfig+0x66c>)
 8001874:	4910      	ldr	r1, [pc, #64]	; (80018b8 <HAL_RCC_OscConfig+0x68c>)
 8001876:	400a      	ands	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7ff f8f7 	bl	8000a6c <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001882:	e01b      	b.n	80018bc <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff f8f2 	bl	8000a6c <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d914      	bls.n	80018bc <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e083      	b.n	800199e <HAL_RCC_OscConfig+0x772>
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	40021000 	.word	0x40021000
 800189c:	fffffeff 	.word	0xfffffeff
 80018a0:	40007000 	.word	0x40007000
 80018a4:	fffffbff 	.word	0xfffffbff
 80018a8:	00001388 	.word	0x00001388
 80018ac:	efffffff 	.word	0xefffffff
 80018b0:	40010000 	.word	0x40010000
 80018b4:	ffffdfff 	.word	0xffffdfff
 80018b8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018bc:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <HAL_RCC_OscConfig+0x77c>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	049b      	lsls	r3, r3, #18
 80018c4:	4013      	ands	r3, r2
 80018c6:	d1dd      	bne.n	8001884 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c8:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <HAL_RCC_OscConfig+0x77c>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	4a37      	ldr	r2, [pc, #220]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	0019      	movs	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e0:	431a      	orrs	r2, r3
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <HAL_RCC_OscConfig+0x77c>)
 80018e4:	430a      	orrs	r2, r1
 80018e6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e8:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <HAL_RCC_OscConfig+0x77c>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <HAL_RCC_OscConfig+0x77c>)
 80018ee:	2180      	movs	r1, #128	; 0x80
 80018f0:	0449      	lsls	r1, r1, #17
 80018f2:	430a      	orrs	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f6:	f7ff f8b9 	bl	8000a6c <HAL_GetTick>
 80018fa:	0003      	movs	r3, r0
 80018fc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff f8b4 	bl	8000a6c <HAL_GetTick>
 8001904:	0002      	movs	r2, r0
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e045      	b.n	800199e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001912:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <HAL_RCC_OscConfig+0x77c>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	049b      	lsls	r3, r3, #18
 800191a:	4013      	ands	r3, r2
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x6d4>
 800191e:	e03d      	b.n	800199c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001920:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <HAL_RCC_OscConfig+0x77c>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_RCC_OscConfig+0x77c>)
 8001926:	4922      	ldr	r1, [pc, #136]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 8001928:	400a      	ands	r2, r1
 800192a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff f89e 	bl	8000a6c <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001936:	f7ff f899 	bl	8000a6c <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e02a      	b.n	800199e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_RCC_OscConfig+0x77c>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	049b      	lsls	r3, r3, #18
 8001950:	4013      	ands	r3, r2
 8001952:	d1f0      	bne.n	8001936 <HAL_RCC_OscConfig+0x70a>
 8001954:	e022      	b.n	800199c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195a:	2b01      	cmp	r3, #1
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e01d      	b.n	800199e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_RCC_OscConfig+0x77c>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001968:	69fa      	ldr	r2, [r7, #28]
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	025b      	lsls	r3, r3, #9
 800196e:	401a      	ands	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	429a      	cmp	r2, r3
 8001976:	d10f      	bne.n	8001998 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	23f0      	movs	r3, #240	; 0xf0
 800197c:	039b      	lsls	r3, r3, #14
 800197e:	401a      	ands	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001984:	429a      	cmp	r2, r3
 8001986:	d107      	bne.n	8001998 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	23c0      	movs	r3, #192	; 0xc0
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	401a      	ands	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b00a      	add	sp, #40	; 0x28
 80019a4:	bdb0      	pop	{r4, r5, r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	40021000 	.word	0x40021000
 80019ac:	ff02ffff 	.word	0xff02ffff
 80019b0:	feffffff 	.word	0xfeffffff

080019b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b4:	b5b0      	push	{r4, r5, r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e128      	b.n	8001c1a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c8:	4b96      	ldr	r3, [pc, #600]	; (8001c24 <HAL_RCC_ClockConfig+0x270>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d91e      	bls.n	8001a14 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d6:	4b93      	ldr	r3, [pc, #588]	; (8001c24 <HAL_RCC_ClockConfig+0x270>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2201      	movs	r2, #1
 80019dc:	4393      	bics	r3, r2
 80019de:	0019      	movs	r1, r3
 80019e0:	4b90      	ldr	r3, [pc, #576]	; (8001c24 <HAL_RCC_ClockConfig+0x270>)
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019e8:	f7ff f840 	bl	8000a6c <HAL_GetTick>
 80019ec:	0003      	movs	r3, r0
 80019ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f0:	e009      	b.n	8001a06 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f2:	f7ff f83b 	bl	8000a6c <HAL_GetTick>
 80019f6:	0002      	movs	r2, r0
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	4a8a      	ldr	r2, [pc, #552]	; (8001c28 <HAL_RCC_ClockConfig+0x274>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e109      	b.n	8001c1a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b87      	ldr	r3, [pc, #540]	; (8001c24 <HAL_RCC_ClockConfig+0x270>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d1ee      	bne.n	80019f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2202      	movs	r2, #2
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d009      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1e:	4b83      	ldr	r3, [pc, #524]	; (8001c2c <HAL_RCC_ClockConfig+0x278>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	22f0      	movs	r2, #240	; 0xf0
 8001a24:	4393      	bics	r3, r2
 8001a26:	0019      	movs	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	4b7f      	ldr	r3, [pc, #508]	; (8001c2c <HAL_RCC_ClockConfig+0x278>)
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2201      	movs	r2, #1
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d100      	bne.n	8001a3e <HAL_RCC_ClockConfig+0x8a>
 8001a3c:	e089      	b.n	8001b52 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a46:	4b79      	ldr	r3, [pc, #484]	; (8001c2c <HAL_RCC_ClockConfig+0x278>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	029b      	lsls	r3, r3, #10
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d120      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e0e1      	b.n	8001c1a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a5e:	4b73      	ldr	r3, [pc, #460]	; (8001c2c <HAL_RCC_ClockConfig+0x278>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	049b      	lsls	r3, r3, #18
 8001a66:	4013      	ands	r3, r2
 8001a68:	d114      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e0d5      	b.n	8001c1a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d106      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a76:	4b6d      	ldr	r3, [pc, #436]	; (8001c2c <HAL_RCC_ClockConfig+0x278>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d109      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0ca      	b.n	8001c1a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a84:	4b69      	ldr	r3, [pc, #420]	; (8001c2c <HAL_RCC_ClockConfig+0x278>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0c2      	b.n	8001c1a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a94:	4b65      	ldr	r3, [pc, #404]	; (8001c2c <HAL_RCC_ClockConfig+0x278>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2203      	movs	r2, #3
 8001a9a:	4393      	bics	r3, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	4b62      	ldr	r3, [pc, #392]	; (8001c2c <HAL_RCC_ClockConfig+0x278>)
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa8:	f7fe ffe0 	bl	8000a6c <HAL_GetTick>
 8001aac:	0003      	movs	r3, r0
 8001aae:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d111      	bne.n	8001adc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab8:	e009      	b.n	8001ace <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aba:	f7fe ffd7 	bl	8000a6c <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <HAL_RCC_ClockConfig+0x274>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e0a5      	b.n	8001c1a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ace:	4b57      	ldr	r3, [pc, #348]	; (8001c2c <HAL_RCC_ClockConfig+0x278>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d1ef      	bne.n	8001aba <HAL_RCC_ClockConfig+0x106>
 8001ada:	e03a      	b.n	8001b52 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d111      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae4:	e009      	b.n	8001afa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae6:	f7fe ffc1 	bl	8000a6c <HAL_GetTick>
 8001aea:	0002      	movs	r2, r0
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	4a4d      	ldr	r2, [pc, #308]	; (8001c28 <HAL_RCC_ClockConfig+0x274>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e08f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001afa:	4b4c      	ldr	r3, [pc, #304]	; (8001c2c <HAL_RCC_ClockConfig+0x278>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	220c      	movs	r2, #12
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d1ef      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0x132>
 8001b06:	e024      	b.n	8001b52 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d11b      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b10:	e009      	b.n	8001b26 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b12:	f7fe ffab 	bl	8000a6c <HAL_GetTick>
 8001b16:	0002      	movs	r2, r0
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	4a42      	ldr	r2, [pc, #264]	; (8001c28 <HAL_RCC_ClockConfig+0x274>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e079      	b.n	8001c1a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b26:	4b41      	ldr	r3, [pc, #260]	; (8001c2c <HAL_RCC_ClockConfig+0x278>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d1ef      	bne.n	8001b12 <HAL_RCC_ClockConfig+0x15e>
 8001b32:	e00e      	b.n	8001b52 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b34:	f7fe ff9a 	bl	8000a6c <HAL_GetTick>
 8001b38:	0002      	movs	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	4a3a      	ldr	r2, [pc, #232]	; (8001c28 <HAL_RCC_ClockConfig+0x274>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e068      	b.n	8001c1a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b48:	4b38      	ldr	r3, [pc, #224]	; (8001c2c <HAL_RCC_ClockConfig+0x278>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	220c      	movs	r2, #12
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b52:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <HAL_RCC_ClockConfig+0x270>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2201      	movs	r2, #1
 8001b58:	4013      	ands	r3, r2
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d21e      	bcs.n	8001b9e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b60:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <HAL_RCC_ClockConfig+0x270>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2201      	movs	r2, #1
 8001b66:	4393      	bics	r3, r2
 8001b68:	0019      	movs	r1, r3
 8001b6a:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <HAL_RCC_ClockConfig+0x270>)
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b72:	f7fe ff7b 	bl	8000a6c <HAL_GetTick>
 8001b76:	0003      	movs	r3, r0
 8001b78:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	e009      	b.n	8001b90 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7c:	f7fe ff76 	bl	8000a6c <HAL_GetTick>
 8001b80:	0002      	movs	r2, r0
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	4a28      	ldr	r2, [pc, #160]	; (8001c28 <HAL_RCC_ClockConfig+0x274>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e044      	b.n	8001c1a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b90:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <HAL_RCC_ClockConfig+0x270>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2201      	movs	r2, #1
 8001b96:	4013      	ands	r3, r2
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d1ee      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d009      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba8:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_RCC_ClockConfig+0x278>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4a20      	ldr	r2, [pc, #128]	; (8001c30 <HAL_RCC_ClockConfig+0x27c>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	0019      	movs	r1, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <HAL_RCC_ClockConfig+0x278>)
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2208      	movs	r2, #8
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d00a      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bc6:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_RCC_ClockConfig+0x278>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	4a1a      	ldr	r2, [pc, #104]	; (8001c34 <HAL_RCC_ClockConfig+0x280>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	0019      	movs	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	00da      	lsls	r2, r3, #3
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_RCC_ClockConfig+0x278>)
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bdc:	f000 f832 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8001be0:	0001      	movs	r1, r0
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_RCC_ClockConfig+0x278>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	220f      	movs	r2, #15
 8001bea:	4013      	ands	r3, r2
 8001bec:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <HAL_RCC_ClockConfig+0x284>)
 8001bee:	5cd3      	ldrb	r3, [r2, r3]
 8001bf0:	000a      	movs	r2, r1
 8001bf2:	40da      	lsrs	r2, r3
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <HAL_RCC_ClockConfig+0x288>)
 8001bf6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_RCC_ClockConfig+0x28c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	250b      	movs	r5, #11
 8001bfe:	197c      	adds	r4, r7, r5
 8001c00:	0018      	movs	r0, r3
 8001c02:	f7fe feed 	bl	80009e0 <HAL_InitTick>
 8001c06:	0003      	movs	r3, r0
 8001c08:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001c0a:	197b      	adds	r3, r7, r5
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001c12:	197b      	adds	r3, r7, r5
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b004      	add	sp, #16
 8001c20:	bdb0      	pop	{r4, r5, r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	40022000 	.word	0x40022000
 8001c28:	00001388 	.word	0x00001388
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	fffff8ff 	.word	0xfffff8ff
 8001c34:	ffffc7ff 	.word	0xffffc7ff
 8001c38:	080039b0 	.word	0x080039b0
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000004 	.word	0x20000004

08001c44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c44:	b5b0      	push	{r4, r5, r7, lr}
 8001c46:	b08e      	sub	sp, #56	; 0x38
 8001c48:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c4a:	4b4c      	ldr	r3, [pc, #304]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c52:	230c      	movs	r3, #12
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b0c      	cmp	r3, #12
 8001c58:	d014      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x40>
 8001c5a:	d900      	bls.n	8001c5e <HAL_RCC_GetSysClockFreq+0x1a>
 8001c5c:	e07b      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0x112>
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d002      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x24>
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d00b      	beq.n	8001c7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c66:	e076      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c68:	4b44      	ldr	r3, [pc, #272]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d002      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c72:	4b43      	ldr	r3, [pc, #268]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c76:	e07c      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001c78:	4b42      	ldr	r3, [pc, #264]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c7c:	e079      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c7e:	4b42      	ldr	r3, [pc, #264]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x144>)
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c82:	e076      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c86:	0c9a      	lsrs	r2, r3, #18
 8001c88:	230f      	movs	r3, #15
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	4b3f      	ldr	r3, [pc, #252]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x148>)
 8001c8e:	5c9b      	ldrb	r3, [r3, r2]
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c94:	0d9a      	lsrs	r2, r3, #22
 8001c96:	2303      	movs	r3, #3
 8001c98:	4013      	ands	r3, r2
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c9e:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x138>)
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	025b      	lsls	r3, r3, #9
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d01a      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	4a35      	ldr	r2, [pc, #212]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x144>)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	69b8      	ldr	r0, [r7, #24]
 8001cb8:	69f9      	ldr	r1, [r7, #28]
 8001cba:	f7fe fad9 	bl	8000270 <__aeabi_lmul>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	000b      	movs	r3, r1
 8001cc2:	0010      	movs	r0, r2
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f7fe faad 	bl	8000230 <__aeabi_uldivmod>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	000b      	movs	r3, r1
 8001cda:	0013      	movs	r3, r2
 8001cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8001cde:	e037      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ce0:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x138>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2210      	movs	r2, #16
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d01a      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4a23      	ldr	r2, [pc, #140]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	68b8      	ldr	r0, [r7, #8]
 8001cf8:	68f9      	ldr	r1, [r7, #12]
 8001cfa:	f7fe fab9 	bl	8000270 <__aeabi_lmul>
 8001cfe:	0002      	movs	r2, r0
 8001d00:	000b      	movs	r3, r1
 8001d02:	0010      	movs	r0, r2
 8001d04:	0019      	movs	r1, r3
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f7fe fa8d 	bl	8000230 <__aeabi_uldivmod>
 8001d16:	0002      	movs	r2, r0
 8001d18:	000b      	movs	r3, r1
 8001d1a:	0013      	movs	r3, r2
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d1e:	e017      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d22:	0018      	movs	r0, r3
 8001d24:	2300      	movs	r3, #0
 8001d26:	0019      	movs	r1, r3
 8001d28:	4a16      	ldr	r2, [pc, #88]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f7fe faa0 	bl	8000270 <__aeabi_lmul>
 8001d30:	0002      	movs	r2, r0
 8001d32:	000b      	movs	r3, r1
 8001d34:	0010      	movs	r0, r2
 8001d36:	0019      	movs	r1, r3
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	001c      	movs	r4, r3
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	001d      	movs	r5, r3
 8001d40:	0022      	movs	r2, r4
 8001d42:	002b      	movs	r3, r5
 8001d44:	f7fe fa74 	bl	8000230 <__aeabi_uldivmod>
 8001d48:	0002      	movs	r2, r0
 8001d4a:	000b      	movs	r3, r1
 8001d4c:	0013      	movs	r3, r2
 8001d4e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d54:	e00d      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x138>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	0b5b      	lsrs	r3, r3, #13
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	4013      	ands	r3, r2
 8001d60:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	3301      	adds	r3, #1
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	0212      	lsls	r2, r2, #8
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	0013      	movs	r3, r2
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d70:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b00e      	add	sp, #56	; 0x38
 8001d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	003d0900 	.word	0x003d0900
 8001d84:	00f42400 	.word	0x00f42400
 8001d88:	007a1200 	.word	0x007a1200
 8001d8c:	080039c8 	.word	0x080039c8

08001d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d94:	4b02      	ldr	r3, [pc, #8]	; (8001da0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	0018      	movs	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	20000000 	.word	0x20000000

08001da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001da8:	f7ff fff2 	bl	8001d90 <HAL_RCC_GetHCLKFreq>
 8001dac:	0001      	movs	r1, r0
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	2207      	movs	r2, #7
 8001db6:	4013      	ands	r3, r2
 8001db8:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dba:	5cd3      	ldrb	r3, [r2, r3]
 8001dbc:	40d9      	lsrs	r1, r3
 8001dbe:	000b      	movs	r3, r1
}
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	080039c0 	.word	0x080039c0

08001dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dd4:	f7ff ffdc 	bl	8001d90 <HAL_RCC_GetHCLKFreq>
 8001dd8:	0001      	movs	r1, r0
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	0adb      	lsrs	r3, r3, #11
 8001de0:	2207      	movs	r2, #7
 8001de2:	4013      	ands	r3, r2
 8001de4:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	40d9      	lsrs	r1, r3
 8001dea:	000b      	movs	r3, r1
}
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	40021000 	.word	0x40021000
 8001df8:	080039c0 	.word	0x080039c0

08001dfc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001e04:	2317      	movs	r3, #23
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2220      	movs	r2, #32
 8001e12:	4013      	ands	r3, r2
 8001e14:	d106      	bne.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d100      	bne.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001e22:	e104      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e24:	4bb1      	ldr	r3, [pc, #708]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	055b      	lsls	r3, r3, #21
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d10a      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e30:	4bae      	ldr	r3, [pc, #696]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e34:	4bad      	ldr	r3, [pc, #692]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	0549      	lsls	r1, r1, #21
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e3e:	2317      	movs	r3, #23
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e46:	4baa      	ldr	r3, [pc, #680]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d11a      	bne.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e52:	4ba7      	ldr	r3, [pc, #668]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	4ba6      	ldr	r3, [pc, #664]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	0049      	lsls	r1, r1, #1
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e60:	f7fe fe04 	bl	8000a6c <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e68:	e008      	b.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6a:	f7fe fdff 	bl	8000a6c <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b64      	cmp	r3, #100	; 0x64
 8001e76:	d901      	bls.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e133      	b.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7c:	4b9c      	ldr	r3, [pc, #624]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4013      	ands	r3, r2
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001e88:	4b98      	ldr	r3, [pc, #608]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	23c0      	movs	r3, #192	; 0xc0
 8001e8e:	039b      	lsls	r3, r3, #14
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	23c0      	movs	r3, #192	; 0xc0
 8001e9a:	039b      	lsls	r3, r3, #14
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d107      	bne.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	23c0      	movs	r3, #192	; 0xc0
 8001eaa:	039b      	lsls	r3, r3, #14
 8001eac:	4013      	ands	r3, r2
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d013      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	23c0      	movs	r3, #192	; 0xc0
 8001eba:	029b      	lsls	r3, r3, #10
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	23c0      	movs	r3, #192	; 0xc0
 8001ec0:	029b      	lsls	r3, r3, #10
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d10a      	bne.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001ec6:	4b89      	ldr	r3, [pc, #548]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	029b      	lsls	r3, r3, #10
 8001ece:	401a      	ands	r2, r3
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	029b      	lsls	r3, r3, #10
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d101      	bne.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e103      	b.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001edc:	4b83      	ldr	r3, [pc, #524]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ede:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ee0:	23c0      	movs	r3, #192	; 0xc0
 8001ee2:	029b      	lsls	r3, r3, #10
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d049      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	23c0      	movs	r3, #192	; 0xc0
 8001ef4:	029b      	lsls	r3, r3, #10
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d004      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2220      	movs	r2, #32
 8001f04:	4013      	ands	r3, r2
 8001f06:	d10d      	bne.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	23c0      	movs	r3, #192	; 0xc0
 8001f0e:	029b      	lsls	r3, r3, #10
 8001f10:	4013      	ands	r3, r2
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d034      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	4013      	ands	r3, r2
 8001f22:	d02e      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001f24:	4b71      	ldr	r3, [pc, #452]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f28:	4a72      	ldr	r2, [pc, #456]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f2e:	4b6f      	ldr	r3, [pc, #444]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f32:	4b6e      	ldr	r3, [pc, #440]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f34:	2180      	movs	r1, #128	; 0x80
 8001f36:	0309      	lsls	r1, r1, #12
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f3c:	4b6b      	ldr	r3, [pc, #428]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f40:	4b6a      	ldr	r3, [pc, #424]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f42:	496d      	ldr	r1, [pc, #436]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001f44:	400a      	ands	r2, r1
 8001f46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001f48:	4b68      	ldr	r3, [pc, #416]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4013      	ands	r3, r2
 8001f56:	d014      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7fe fd88 	bl	8000a6c <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f60:	e009      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7fe fd83 	bl	8000a6c <HAL_GetTick>
 8001f66:	0002      	movs	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	4a63      	ldr	r2, [pc, #396]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e0b6      	b.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f76:	4b5d      	ldr	r3, [pc, #372]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d0ef      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d01f      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	23c0      	movs	r3, #192	; 0xc0
 8001f94:	029b      	lsls	r3, r3, #10
 8001f96:	401a      	ands	r2, r3
 8001f98:	23c0      	movs	r3, #192	; 0xc0
 8001f9a:	029b      	lsls	r3, r3, #10
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d10c      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001fa0:	4b52      	ldr	r3, [pc, #328]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a56      	ldr	r2, [pc, #344]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	0019      	movs	r1, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	23c0      	movs	r3, #192	; 0xc0
 8001fb0:	039b      	lsls	r3, r3, #14
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	4b4d      	ldr	r3, [pc, #308]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	4b4c      	ldr	r3, [pc, #304]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fbc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	23c0      	movs	r3, #192	; 0xc0
 8001fc4:	029b      	lsls	r3, r3, #10
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	4b48      	ldr	r3, [pc, #288]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d01f      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	23c0      	movs	r3, #192	; 0xc0
 8001fde:	029b      	lsls	r3, r3, #10
 8001fe0:	401a      	ands	r2, r3
 8001fe2:	23c0      	movs	r3, #192	; 0xc0
 8001fe4:	029b      	lsls	r3, r3, #10
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001fea:	4b40      	ldr	r3, [pc, #256]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a44      	ldr	r2, [pc, #272]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	23c0      	movs	r3, #192	; 0xc0
 8001ffa:	039b      	lsls	r3, r3, #14
 8001ffc:	401a      	ands	r2, r3
 8001ffe:	4b3b      	ldr	r3, [pc, #236]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002000:	430a      	orrs	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	4b39      	ldr	r3, [pc, #228]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002006:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	23c0      	movs	r3, #192	; 0xc0
 800200e:	029b      	lsls	r3, r3, #10
 8002010:	401a      	ands	r2, r3
 8002012:	4b36      	ldr	r3, [pc, #216]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002014:	430a      	orrs	r2, r1
 8002016:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002018:	2317      	movs	r3, #23
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d105      	bne.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002022:	4b32      	ldr	r3, [pc, #200]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002026:	4b31      	ldr	r3, [pc, #196]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002028:	4936      	ldr	r1, [pc, #216]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800202a:	400a      	ands	r2, r1
 800202c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2201      	movs	r2, #1
 8002034:	4013      	ands	r3, r2
 8002036:	d009      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002038:	4b2c      	ldr	r3, [pc, #176]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800203a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203c:	2203      	movs	r2, #3
 800203e:	4393      	bics	r3, r2
 8002040:	0019      	movs	r1, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	4b29      	ldr	r3, [pc, #164]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002048:	430a      	orrs	r2, r1
 800204a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2202      	movs	r2, #2
 8002052:	4013      	ands	r3, r2
 8002054:	d009      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002056:	4b25      	ldr	r3, [pc, #148]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205a:	220c      	movs	r2, #12
 800205c:	4393      	bics	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	4b21      	ldr	r3, [pc, #132]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002066:	430a      	orrs	r2, r1
 8002068:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2204      	movs	r2, #4
 8002070:	4013      	ands	r3, r2
 8002072:	d009      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002074:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002078:	4a23      	ldr	r2, [pc, #140]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800207a:	4013      	ands	r3, r2
 800207c:	0019      	movs	r1, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002084:	430a      	orrs	r2, r1
 8002086:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2208      	movs	r2, #8
 800208e:	4013      	ands	r3, r2
 8002090:	d009      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	4a1d      	ldr	r2, [pc, #116]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002098:	4013      	ands	r3, r2
 800209a:	0019      	movs	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699a      	ldr	r2, [r3, #24]
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020a2:	430a      	orrs	r2, r1
 80020a4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2240      	movs	r2, #64	; 0x40
 80020ac:	4013      	ands	r3, r2
 80020ae:	d009      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b4:	4a16      	ldr	r2, [pc, #88]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1a      	ldr	r2, [r3, #32]
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020c0:	430a      	orrs	r2, r1
 80020c2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2280      	movs	r2, #128	; 0x80
 80020ca:	4013      	ands	r3, r2
 80020cc:	d009      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	4a10      	ldr	r2, [pc, #64]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69da      	ldr	r2, [r3, #28]
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020de:	430a      	orrs	r2, r1
 80020e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b006      	add	sp, #24
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40007000 	.word	0x40007000
 80020f4:	fffcffff 	.word	0xfffcffff
 80020f8:	fff7ffff 	.word	0xfff7ffff
 80020fc:	00001388 	.word	0x00001388
 8002100:	ffcfffff 	.word	0xffcfffff
 8002104:	efffffff 	.word	0xefffffff
 8002108:	fffff3ff 	.word	0xfffff3ff
 800210c:	ffffcfff 	.word	0xffffcfff
 8002110:	fbffffff 	.word	0xfbffffff
 8002114:	fff3ffff 	.word	0xfff3ffff

08002118 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e044      	b.n	80021b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800212e:	2b00      	cmp	r3, #0
 8002130:	d107      	bne.n	8002142 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2278      	movs	r2, #120	; 0x78
 8002136:	2100      	movs	r1, #0
 8002138:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	0018      	movs	r0, r3
 800213e:	f7fe fb87 	bl	8000850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2224      	movs	r2, #36	; 0x24
 8002146:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2101      	movs	r1, #1
 8002154:	438a      	bics	r2, r1
 8002156:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	0018      	movs	r0, r3
 800215c:	f000 fc2c 	bl	80029b8 <UART_SetConfig>
 8002160:	0003      	movs	r3, r0
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e024      	b.n	80021b4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	0018      	movs	r0, r3
 8002176:	f000 fea3 	bl	8002ec0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	490d      	ldr	r1, [pc, #52]	; (80021bc <HAL_UART_Init+0xa4>)
 8002186:	400a      	ands	r2, r1
 8002188:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	212a      	movs	r1, #42	; 0x2a
 8002196:	438a      	bics	r2, r1
 8002198:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2101      	movs	r1, #1
 80021a6:	430a      	orrs	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	0018      	movs	r0, r3
 80021ae:	f000 ff3b 	bl	8003028 <UART_CheckIdleState>
 80021b2:	0003      	movs	r3, r0
}
 80021b4:	0018      	movs	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b002      	add	sp, #8
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	ffffb7ff 	.word	0xffffb7ff

080021c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	; 0x28
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	1dbb      	adds	r3, r7, #6
 80021ce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	d000      	beq.n	80021da <HAL_UART_Transmit+0x1a>
 80021d8:	e08c      	b.n	80022f4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_UART_Transmit+0x28>
 80021e0:	1dbb      	adds	r3, r7, #6
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e084      	b.n	80022f6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	015b      	lsls	r3, r3, #5
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d109      	bne.n	800220c <HAL_UART_Transmit+0x4c>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2201      	movs	r2, #1
 8002204:	4013      	ands	r3, r2
 8002206:	d001      	beq.n	800220c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e074      	b.n	80022f6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2284      	movs	r2, #132	; 0x84
 8002210:	2100      	movs	r1, #0
 8002212:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2221      	movs	r2, #33	; 0x21
 8002218:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800221a:	f7fe fc27 	bl	8000a6c <HAL_GetTick>
 800221e:	0003      	movs	r3, r0
 8002220:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1dba      	adds	r2, r7, #6
 8002226:	2150      	movs	r1, #80	; 0x50
 8002228:	8812      	ldrh	r2, [r2, #0]
 800222a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	1dba      	adds	r2, r7, #6
 8002230:	2152      	movs	r1, #82	; 0x52
 8002232:	8812      	ldrh	r2, [r2, #0]
 8002234:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	015b      	lsls	r3, r3, #5
 800223e:	429a      	cmp	r2, r3
 8002240:	d108      	bne.n	8002254 <HAL_UART_Transmit+0x94>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d104      	bne.n	8002254 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	e003      	b.n	800225c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800225c:	e02f      	b.n	80022be <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	0013      	movs	r3, r2
 8002268:	2200      	movs	r2, #0
 800226a:	2180      	movs	r1, #128	; 0x80
 800226c:	f000 ff84 	bl	8003178 <UART_WaitOnFlagUntilTimeout>
 8002270:	1e03      	subs	r3, r0, #0
 8002272:	d004      	beq.n	800227e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e03b      	b.n	80022f6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10b      	bne.n	800229c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	001a      	movs	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	05d2      	lsls	r2, r2, #23
 8002290:	0dd2      	lsrs	r2, r2, #23
 8002292:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	3302      	adds	r3, #2
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	e007      	b.n	80022ac <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	781a      	ldrb	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3301      	adds	r3, #1
 80022aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2252      	movs	r2, #82	; 0x52
 80022b0:	5a9b      	ldrh	r3, [r3, r2]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b299      	uxth	r1, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2252      	movs	r2, #82	; 0x52
 80022bc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2252      	movs	r2, #82	; 0x52
 80022c2:	5a9b      	ldrh	r3, [r3, r2]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1c9      	bne.n	800225e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	0013      	movs	r3, r2
 80022d4:	2200      	movs	r2, #0
 80022d6:	2140      	movs	r1, #64	; 0x40
 80022d8:	f000 ff4e 	bl	8003178 <UART_WaitOnFlagUntilTimeout>
 80022dc:	1e03      	subs	r3, r0, #0
 80022de:	d004      	beq.n	80022ea <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2220      	movs	r2, #32
 80022e4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e005      	b.n	80022f6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2220      	movs	r2, #32
 80022ee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e000      	b.n	80022f6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80022f4:	2302      	movs	r3, #2
  }
}
 80022f6:	0018      	movs	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b008      	add	sp, #32
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	1dbb      	adds	r3, r7, #6
 800230c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2280      	movs	r2, #128	; 0x80
 8002312:	589b      	ldr	r3, [r3, r2]
 8002314:	2b20      	cmp	r3, #32
 8002316:	d14a      	bne.n	80023ae <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_UART_Receive_IT+0x26>
 800231e:	1dbb      	adds	r3, r7, #6
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e042      	b.n	80023b0 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	015b      	lsls	r3, r3, #5
 8002332:	429a      	cmp	r2, r3
 8002334:	d109      	bne.n	800234a <HAL_UART_Receive_IT+0x4a>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d105      	bne.n	800234a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2201      	movs	r2, #1
 8002342:	4013      	ands	r3, r2
 8002344:	d001      	beq.n	800234a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e032      	b.n	80023b0 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a18      	ldr	r2, [pc, #96]	; (80023b8 <HAL_UART_Receive_IT+0xb8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d020      	beq.n	800239c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	041b      	lsls	r3, r3, #16
 8002364:	4013      	ands	r3, r2
 8002366:	d019      	beq.n	800239c <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002368:	f3ef 8310 	mrs	r3, PRIMASK
 800236c:	613b      	str	r3, [r7, #16]
  return(result);
 800236e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	2301      	movs	r3, #1
 8002374:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f383 8810 	msr	PRIMASK, r3
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2180      	movs	r1, #128	; 0x80
 800238a:	04c9      	lsls	r1, r1, #19
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	f383 8810 	msr	PRIMASK, r3
}
 800239a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800239c:	1dbb      	adds	r3, r7, #6
 800239e:	881a      	ldrh	r2, [r3, #0]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f000 ff51 	bl	800324c <UART_Start_Receive_IT>
 80023aa:	0003      	movs	r3, r0
 80023ac:	e000      	b.n	80023b0 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80023ae:	2302      	movs	r3, #2
  }
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b008      	add	sp, #32
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40004800 	.word	0x40004800

080023bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b0ab      	sub	sp, #172	; 0xac
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	22a4      	movs	r2, #164	; 0xa4
 80023cc:	18b9      	adds	r1, r7, r2
 80023ce:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	20a0      	movs	r0, #160	; 0xa0
 80023d8:	1839      	adds	r1, r7, r0
 80023da:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	219c      	movs	r1, #156	; 0x9c
 80023e4:	1879      	adds	r1, r7, r1
 80023e6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80023e8:	0011      	movs	r1, r2
 80023ea:	18bb      	adds	r3, r7, r2
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a99      	ldr	r2, [pc, #612]	; (8002654 <HAL_UART_IRQHandler+0x298>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	2298      	movs	r2, #152	; 0x98
 80023f4:	18bc      	adds	r4, r7, r2
 80023f6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80023f8:	18bb      	adds	r3, r7, r2
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d114      	bne.n	800242a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002400:	187b      	adds	r3, r7, r1
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2220      	movs	r2, #32
 8002406:	4013      	ands	r3, r2
 8002408:	d00f      	beq.n	800242a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800240a:	183b      	adds	r3, r7, r0
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2220      	movs	r2, #32
 8002410:	4013      	ands	r3, r2
 8002412:	d00a      	beq.n	800242a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002418:	2b00      	cmp	r3, #0
 800241a:	d100      	bne.n	800241e <HAL_UART_IRQHandler+0x62>
 800241c:	e2a0      	b.n	8002960 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	0010      	movs	r0, r2
 8002426:	4798      	blx	r3
      }
      return;
 8002428:	e29a      	b.n	8002960 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800242a:	2398      	movs	r3, #152	; 0x98
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d100      	bne.n	8002436 <HAL_UART_IRQHandler+0x7a>
 8002434:	e114      	b.n	8002660 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002436:	239c      	movs	r3, #156	; 0x9c
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2201      	movs	r2, #1
 800243e:	4013      	ands	r3, r2
 8002440:	d106      	bne.n	8002450 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002442:	23a0      	movs	r3, #160	; 0xa0
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a83      	ldr	r2, [pc, #524]	; (8002658 <HAL_UART_IRQHandler+0x29c>)
 800244a:	4013      	ands	r3, r2
 800244c:	d100      	bne.n	8002450 <HAL_UART_IRQHandler+0x94>
 800244e:	e107      	b.n	8002660 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002450:	23a4      	movs	r3, #164	; 0xa4
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2201      	movs	r2, #1
 8002458:	4013      	ands	r3, r2
 800245a:	d012      	beq.n	8002482 <HAL_UART_IRQHandler+0xc6>
 800245c:	23a0      	movs	r3, #160	; 0xa0
 800245e:	18fb      	adds	r3, r7, r3
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4013      	ands	r3, r2
 8002468:	d00b      	beq.n	8002482 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2201      	movs	r2, #1
 8002470:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2284      	movs	r2, #132	; 0x84
 8002476:	589b      	ldr	r3, [r3, r2]
 8002478:	2201      	movs	r2, #1
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2184      	movs	r1, #132	; 0x84
 8002480:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002482:	23a4      	movs	r3, #164	; 0xa4
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2202      	movs	r2, #2
 800248a:	4013      	ands	r3, r2
 800248c:	d011      	beq.n	80024b2 <HAL_UART_IRQHandler+0xf6>
 800248e:	239c      	movs	r3, #156	; 0x9c
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2201      	movs	r2, #1
 8002496:	4013      	ands	r3, r2
 8002498:	d00b      	beq.n	80024b2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2202      	movs	r2, #2
 80024a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2284      	movs	r2, #132	; 0x84
 80024a6:	589b      	ldr	r3, [r3, r2]
 80024a8:	2204      	movs	r2, #4
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2184      	movs	r1, #132	; 0x84
 80024b0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024b2:	23a4      	movs	r3, #164	; 0xa4
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2204      	movs	r2, #4
 80024ba:	4013      	ands	r3, r2
 80024bc:	d011      	beq.n	80024e2 <HAL_UART_IRQHandler+0x126>
 80024be:	239c      	movs	r3, #156	; 0x9c
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2201      	movs	r2, #1
 80024c6:	4013      	ands	r3, r2
 80024c8:	d00b      	beq.n	80024e2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2204      	movs	r2, #4
 80024d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2284      	movs	r2, #132	; 0x84
 80024d6:	589b      	ldr	r3, [r3, r2]
 80024d8:	2202      	movs	r2, #2
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2184      	movs	r1, #132	; 0x84
 80024e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80024e2:	23a4      	movs	r3, #164	; 0xa4
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2208      	movs	r2, #8
 80024ea:	4013      	ands	r3, r2
 80024ec:	d017      	beq.n	800251e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80024ee:	23a0      	movs	r3, #160	; 0xa0
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2220      	movs	r2, #32
 80024f6:	4013      	ands	r3, r2
 80024f8:	d105      	bne.n	8002506 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80024fa:	239c      	movs	r3, #156	; 0x9c
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2201      	movs	r2, #1
 8002502:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002504:	d00b      	beq.n	800251e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2208      	movs	r2, #8
 800250c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2284      	movs	r2, #132	; 0x84
 8002512:	589b      	ldr	r3, [r3, r2]
 8002514:	2208      	movs	r2, #8
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2184      	movs	r1, #132	; 0x84
 800251c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800251e:	23a4      	movs	r3, #164	; 0xa4
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	4013      	ands	r3, r2
 800252a:	d013      	beq.n	8002554 <HAL_UART_IRQHandler+0x198>
 800252c:	23a0      	movs	r3, #160	; 0xa0
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	04db      	lsls	r3, r3, #19
 8002536:	4013      	ands	r3, r2
 8002538:	d00c      	beq.n	8002554 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2280      	movs	r2, #128	; 0x80
 8002540:	0112      	lsls	r2, r2, #4
 8002542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2284      	movs	r2, #132	; 0x84
 8002548:	589b      	ldr	r3, [r3, r2]
 800254a:	2220      	movs	r2, #32
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2184      	movs	r1, #132	; 0x84
 8002552:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2284      	movs	r2, #132	; 0x84
 8002558:	589b      	ldr	r3, [r3, r2]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d100      	bne.n	8002560 <HAL_UART_IRQHandler+0x1a4>
 800255e:	e201      	b.n	8002964 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002560:	23a4      	movs	r3, #164	; 0xa4
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2220      	movs	r2, #32
 8002568:	4013      	ands	r3, r2
 800256a:	d00e      	beq.n	800258a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800256c:	23a0      	movs	r3, #160	; 0xa0
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2220      	movs	r2, #32
 8002574:	4013      	ands	r3, r2
 8002576:	d008      	beq.n	800258a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800257c:	2b00      	cmp	r3, #0
 800257e:	d004      	beq.n	800258a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	0010      	movs	r0, r2
 8002588:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2284      	movs	r2, #132	; 0x84
 800258e:	589b      	ldr	r3, [r3, r2]
 8002590:	2194      	movs	r1, #148	; 0x94
 8002592:	187a      	adds	r2, r7, r1
 8002594:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2240      	movs	r2, #64	; 0x40
 800259e:	4013      	ands	r3, r2
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d004      	beq.n	80025ae <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80025a4:	187b      	adds	r3, r7, r1
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2228      	movs	r2, #40	; 0x28
 80025aa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025ac:	d047      	beq.n	800263e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	0018      	movs	r0, r3
 80025b2:	f000 ff15 	bl	80033e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2240      	movs	r2, #64	; 0x40
 80025be:	4013      	ands	r3, r2
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d137      	bne.n	8002634 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025c4:	f3ef 8310 	mrs	r3, PRIMASK
 80025c8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80025ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025cc:	2090      	movs	r0, #144	; 0x90
 80025ce:	183a      	adds	r2, r7, r0
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	2301      	movs	r3, #1
 80025d4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025d8:	f383 8810 	msr	PRIMASK, r3
}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2140      	movs	r1, #64	; 0x40
 80025ea:	438a      	bics	r2, r1
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	183b      	adds	r3, r7, r0
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025f6:	f383 8810 	msr	PRIMASK, r3
}
 80025fa:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002600:	2b00      	cmp	r3, #0
 8002602:	d012      	beq.n	800262a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002608:	4a14      	ldr	r2, [pc, #80]	; (800265c <HAL_UART_IRQHandler+0x2a0>)
 800260a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002610:	0018      	movs	r0, r3
 8002612:	f7fe fb93 	bl	8000d3c <HAL_DMA_Abort_IT>
 8002616:	1e03      	subs	r3, r0, #0
 8002618:	d01a      	beq.n	8002650 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002624:	0018      	movs	r0, r3
 8002626:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002628:	e012      	b.n	8002650 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	0018      	movs	r0, r3
 800262e:	f000 f9af 	bl	8002990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002632:	e00d      	b.n	8002650 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	0018      	movs	r0, r3
 8002638:	f000 f9aa 	bl	8002990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800263c:	e008      	b.n	8002650 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	0018      	movs	r0, r3
 8002642:	f000 f9a5 	bl	8002990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2284      	movs	r2, #132	; 0x84
 800264a:	2100      	movs	r1, #0
 800264c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800264e:	e189      	b.n	8002964 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002650:	46c0      	nop			; (mov r8, r8)
    return;
 8002652:	e187      	b.n	8002964 <HAL_UART_IRQHandler+0x5a8>
 8002654:	0000080f 	.word	0x0000080f
 8002658:	04000120 	.word	0x04000120
 800265c:	080034a9 	.word	0x080034a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002664:	2b01      	cmp	r3, #1
 8002666:	d000      	beq.n	800266a <HAL_UART_IRQHandler+0x2ae>
 8002668:	e13b      	b.n	80028e2 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800266a:	23a4      	movs	r3, #164	; 0xa4
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2210      	movs	r2, #16
 8002672:	4013      	ands	r3, r2
 8002674:	d100      	bne.n	8002678 <HAL_UART_IRQHandler+0x2bc>
 8002676:	e134      	b.n	80028e2 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002678:	23a0      	movs	r3, #160	; 0xa0
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2210      	movs	r2, #16
 8002680:	4013      	ands	r3, r2
 8002682:	d100      	bne.n	8002686 <HAL_UART_IRQHandler+0x2ca>
 8002684:	e12d      	b.n	80028e2 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2210      	movs	r2, #16
 800268c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2240      	movs	r2, #64	; 0x40
 8002696:	4013      	ands	r3, r2
 8002698:	2b40      	cmp	r3, #64	; 0x40
 800269a:	d000      	beq.n	800269e <HAL_UART_IRQHandler+0x2e2>
 800269c:	e0a1      	b.n	80027e2 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	217e      	movs	r1, #126	; 0x7e
 80026a8:	187b      	adds	r3, r7, r1
 80026aa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d100      	bne.n	80026b6 <HAL_UART_IRQHandler+0x2fa>
 80026b4:	e158      	b.n	8002968 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2258      	movs	r2, #88	; 0x58
 80026ba:	5a9b      	ldrh	r3, [r3, r2]
 80026bc:	187a      	adds	r2, r7, r1
 80026be:	8812      	ldrh	r2, [r2, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d300      	bcc.n	80026c6 <HAL_UART_IRQHandler+0x30a>
 80026c4:	e150      	b.n	8002968 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	187a      	adds	r2, r7, r1
 80026ca:	215a      	movs	r1, #90	; 0x5a
 80026cc:	8812      	ldrh	r2, [r2, #0]
 80026ce:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2220      	movs	r2, #32
 80026da:	4013      	ands	r3, r2
 80026dc:	d16f      	bne.n	80027be <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026de:	f3ef 8310 	mrs	r3, PRIMASK
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80026e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80026e8:	2301      	movs	r3, #1
 80026ea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ee:	f383 8810 	msr	PRIMASK, r3
}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	499e      	ldr	r1, [pc, #632]	; (8002978 <HAL_UART_IRQHandler+0x5bc>)
 8002700:	400a      	ands	r2, r1
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002706:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270a:	f383 8810 	msr	PRIMASK, r3
}
 800270e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002710:	f3ef 8310 	mrs	r3, PRIMASK
 8002714:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002718:	677b      	str	r3, [r7, #116]	; 0x74
 800271a:	2301      	movs	r3, #1
 800271c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800271e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002720:	f383 8810 	msr	PRIMASK, r3
}
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2101      	movs	r1, #1
 8002732:	438a      	bics	r2, r1
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002738:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800273a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800273c:	f383 8810 	msr	PRIMASK, r3
}
 8002740:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002742:	f3ef 8310 	mrs	r3, PRIMASK
 8002746:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002748:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800274a:	673b      	str	r3, [r7, #112]	; 0x70
 800274c:	2301      	movs	r3, #1
 800274e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002752:	f383 8810 	msr	PRIMASK, r3
}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2140      	movs	r1, #64	; 0x40
 8002764:	438a      	bics	r2, r1
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800276a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800276c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800276e:	f383 8810 	msr	PRIMASK, r3
}
 8002772:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2280      	movs	r2, #128	; 0x80
 8002778:	2120      	movs	r1, #32
 800277a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002782:	f3ef 8310 	mrs	r3, PRIMASK
 8002786:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002788:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800278a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800278c:	2301      	movs	r3, #1
 800278e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002792:	f383 8810 	msr	PRIMASK, r3
}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2110      	movs	r1, #16
 80027a4:	438a      	bics	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ae:	f383 8810 	msr	PRIMASK, r3
}
 80027b2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b8:	0018      	movs	r0, r3
 80027ba:	f7fe fa7f 	bl	8000cbc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2202      	movs	r2, #2
 80027c2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2258      	movs	r2, #88	; 0x58
 80027c8:	5a9a      	ldrh	r2, [r3, r2]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	215a      	movs	r1, #90	; 0x5a
 80027ce:	5a5b      	ldrh	r3, [r3, r1]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	0011      	movs	r1, r2
 80027da:	0018      	movs	r0, r3
 80027dc:	f000 f8e0 	bl	80029a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80027e0:	e0c2      	b.n	8002968 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2258      	movs	r2, #88	; 0x58
 80027e6:	5a99      	ldrh	r1, [r3, r2]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	225a      	movs	r2, #90	; 0x5a
 80027ec:	5a9b      	ldrh	r3, [r3, r2]
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	208e      	movs	r0, #142	; 0x8e
 80027f2:	183b      	adds	r3, r7, r0
 80027f4:	1a8a      	subs	r2, r1, r2
 80027f6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	225a      	movs	r2, #90	; 0x5a
 80027fc:	5a9b      	ldrh	r3, [r3, r2]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d100      	bne.n	8002806 <HAL_UART_IRQHandler+0x44a>
 8002804:	e0b2      	b.n	800296c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8002806:	183b      	adds	r3, r7, r0
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d100      	bne.n	8002810 <HAL_UART_IRQHandler+0x454>
 800280e:	e0ad      	b.n	800296c <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002810:	f3ef 8310 	mrs	r3, PRIMASK
 8002814:	60fb      	str	r3, [r7, #12]
  return(result);
 8002816:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002818:	2488      	movs	r4, #136	; 0x88
 800281a:	193a      	adds	r2, r7, r4
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	2301      	movs	r3, #1
 8002820:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f383 8810 	msr	PRIMASK, r3
}
 8002828:	46c0      	nop			; (mov r8, r8)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4951      	ldr	r1, [pc, #324]	; (800297c <HAL_UART_IRQHandler+0x5c0>)
 8002836:	400a      	ands	r2, r1
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	193b      	adds	r3, r7, r4
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f383 8810 	msr	PRIMASK, r3
}
 8002846:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002848:	f3ef 8310 	mrs	r3, PRIMASK
 800284c:	61bb      	str	r3, [r7, #24]
  return(result);
 800284e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002850:	2484      	movs	r4, #132	; 0x84
 8002852:	193a      	adds	r2, r7, r4
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	2301      	movs	r3, #1
 8002858:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f383 8810 	msr	PRIMASK, r3
}
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2101      	movs	r1, #1
 800286e:	438a      	bics	r2, r1
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	193b      	adds	r3, r7, r4
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	f383 8810 	msr	PRIMASK, r3
}
 800287e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2280      	movs	r2, #128	; 0x80
 8002884:	2120      	movs	r1, #32
 8002886:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002894:	f3ef 8310 	mrs	r3, PRIMASK
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800289c:	2480      	movs	r4, #128	; 0x80
 800289e:	193a      	adds	r2, r7, r4
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	2301      	movs	r3, #1
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	f383 8810 	msr	PRIMASK, r3
}
 80028ac:	46c0      	nop			; (mov r8, r8)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2110      	movs	r1, #16
 80028ba:	438a      	bics	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	193b      	adds	r3, r7, r4
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c6:	f383 8810 	msr	PRIMASK, r3
}
 80028ca:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028d2:	183b      	adds	r3, r7, r0
 80028d4:	881a      	ldrh	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	0011      	movs	r1, r2
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 f860 	bl	80029a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80028e0:	e044      	b.n	800296c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80028e2:	23a4      	movs	r3, #164	; 0xa4
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	035b      	lsls	r3, r3, #13
 80028ec:	4013      	ands	r3, r2
 80028ee:	d010      	beq.n	8002912 <HAL_UART_IRQHandler+0x556>
 80028f0:	239c      	movs	r3, #156	; 0x9c
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	03db      	lsls	r3, r3, #15
 80028fa:	4013      	ands	r3, r2
 80028fc:	d009      	beq.n	8002912 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2280      	movs	r2, #128	; 0x80
 8002904:	0352      	lsls	r2, r2, #13
 8002906:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	0018      	movs	r0, r3
 800290c:	f000 ffd2 	bl	80038b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002910:	e02f      	b.n	8002972 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002912:	23a4      	movs	r3, #164	; 0xa4
 8002914:	18fb      	adds	r3, r7, r3
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2280      	movs	r2, #128	; 0x80
 800291a:	4013      	ands	r3, r2
 800291c:	d00f      	beq.n	800293e <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800291e:	23a0      	movs	r3, #160	; 0xa0
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2280      	movs	r2, #128	; 0x80
 8002926:	4013      	ands	r3, r2
 8002928:	d009      	beq.n	800293e <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d01e      	beq.n	8002970 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	0010      	movs	r0, r2
 800293a:	4798      	blx	r3
    }
    return;
 800293c:	e018      	b.n	8002970 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800293e:	23a4      	movs	r3, #164	; 0xa4
 8002940:	18fb      	adds	r3, r7, r3
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2240      	movs	r2, #64	; 0x40
 8002946:	4013      	ands	r3, r2
 8002948:	d013      	beq.n	8002972 <HAL_UART_IRQHandler+0x5b6>
 800294a:	23a0      	movs	r3, #160	; 0xa0
 800294c:	18fb      	adds	r3, r7, r3
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2240      	movs	r2, #64	; 0x40
 8002952:	4013      	ands	r3, r2
 8002954:	d00d      	beq.n	8002972 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	0018      	movs	r0, r3
 800295a:	f000 fdbc 	bl	80034d6 <UART_EndTransmit_IT>
    return;
 800295e:	e008      	b.n	8002972 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002960:	46c0      	nop			; (mov r8, r8)
 8002962:	e006      	b.n	8002972 <HAL_UART_IRQHandler+0x5b6>
    return;
 8002964:	46c0      	nop			; (mov r8, r8)
 8002966:	e004      	b.n	8002972 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	e002      	b.n	8002972 <HAL_UART_IRQHandler+0x5b6>
      return;
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	e000      	b.n	8002972 <HAL_UART_IRQHandler+0x5b6>
    return;
 8002970:	46c0      	nop			; (mov r8, r8)
  }

}
 8002972:	46bd      	mov	sp, r7
 8002974:	b02b      	add	sp, #172	; 0xac
 8002976:	bd90      	pop	{r4, r7, pc}
 8002978:	fffffeff 	.word	0xfffffeff
 800297c:	fffffedf 	.word	0xfffffedf

08002980 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002988:	46c0      	nop			; (mov r8, r8)
 800298a:	46bd      	mov	sp, r7
 800298c:	b002      	add	sp, #8
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	b002      	add	sp, #8
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	000a      	movs	r2, r1
 80029aa:	1cbb      	adds	r3, r7, #2
 80029ac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b002      	add	sp, #8
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029b8:	b5b0      	push	{r4, r5, r7, lr}
 80029ba:	b08e      	sub	sp, #56	; 0x38
 80029bc:	af00      	add	r7, sp, #0
 80029be:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029c0:	231a      	movs	r3, #26
 80029c2:	2218      	movs	r2, #24
 80029c4:	189b      	adds	r3, r3, r2
 80029c6:	19db      	adds	r3, r3, r7
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	431a      	orrs	r2, r3
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4ac6      	ldr	r2, [pc, #792]	; (8002d04 <UART_SetConfig+0x34c>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	0019      	movs	r1, r3
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029f6:	430a      	orrs	r2, r1
 80029f8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4ac1      	ldr	r2, [pc, #772]	; (8002d08 <UART_SetConfig+0x350>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4abb      	ldr	r2, [pc, #748]	; (8002d0c <UART_SetConfig+0x354>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d004      	beq.n	8002a2c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	4ab7      	ldr	r2, [pc, #732]	; (8002d10 <UART_SetConfig+0x358>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4ab3      	ldr	r2, [pc, #716]	; (8002d14 <UART_SetConfig+0x35c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d131      	bne.n	8002ab0 <UART_SetConfig+0xf8>
 8002a4c:	4bb2      	ldr	r3, [pc, #712]	; (8002d18 <UART_SetConfig+0x360>)
 8002a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a50:	2203      	movs	r2, #3
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d01d      	beq.n	8002a94 <UART_SetConfig+0xdc>
 8002a58:	d823      	bhi.n	8002aa2 <UART_SetConfig+0xea>
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d00c      	beq.n	8002a78 <UART_SetConfig+0xc0>
 8002a5e:	d820      	bhi.n	8002aa2 <UART_SetConfig+0xea>
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <UART_SetConfig+0xb2>
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d00e      	beq.n	8002a86 <UART_SetConfig+0xce>
 8002a68:	e01b      	b.n	8002aa2 <UART_SetConfig+0xea>
 8002a6a:	231b      	movs	r3, #27
 8002a6c:	2218      	movs	r2, #24
 8002a6e:	189b      	adds	r3, r3, r2
 8002a70:	19db      	adds	r3, r3, r7
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]
 8002a76:	e09c      	b.n	8002bb2 <UART_SetConfig+0x1fa>
 8002a78:	231b      	movs	r3, #27
 8002a7a:	2218      	movs	r2, #24
 8002a7c:	189b      	adds	r3, r3, r2
 8002a7e:	19db      	adds	r3, r3, r7
 8002a80:	2202      	movs	r2, #2
 8002a82:	701a      	strb	r2, [r3, #0]
 8002a84:	e095      	b.n	8002bb2 <UART_SetConfig+0x1fa>
 8002a86:	231b      	movs	r3, #27
 8002a88:	2218      	movs	r2, #24
 8002a8a:	189b      	adds	r3, r3, r2
 8002a8c:	19db      	adds	r3, r3, r7
 8002a8e:	2204      	movs	r2, #4
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	e08e      	b.n	8002bb2 <UART_SetConfig+0x1fa>
 8002a94:	231b      	movs	r3, #27
 8002a96:	2218      	movs	r2, #24
 8002a98:	189b      	adds	r3, r3, r2
 8002a9a:	19db      	adds	r3, r3, r7
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	701a      	strb	r2, [r3, #0]
 8002aa0:	e087      	b.n	8002bb2 <UART_SetConfig+0x1fa>
 8002aa2:	231b      	movs	r3, #27
 8002aa4:	2218      	movs	r2, #24
 8002aa6:	189b      	adds	r3, r3, r2
 8002aa8:	19db      	adds	r3, r3, r7
 8002aaa:	2210      	movs	r2, #16
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	e080      	b.n	8002bb2 <UART_SetConfig+0x1fa>
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a99      	ldr	r2, [pc, #612]	; (8002d1c <UART_SetConfig+0x364>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d131      	bne.n	8002b1e <UART_SetConfig+0x166>
 8002aba:	4b97      	ldr	r3, [pc, #604]	; (8002d18 <UART_SetConfig+0x360>)
 8002abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abe:	220c      	movs	r2, #12
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b0c      	cmp	r3, #12
 8002ac4:	d01d      	beq.n	8002b02 <UART_SetConfig+0x14a>
 8002ac6:	d823      	bhi.n	8002b10 <UART_SetConfig+0x158>
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d00c      	beq.n	8002ae6 <UART_SetConfig+0x12e>
 8002acc:	d820      	bhi.n	8002b10 <UART_SetConfig+0x158>
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <UART_SetConfig+0x120>
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d00e      	beq.n	8002af4 <UART_SetConfig+0x13c>
 8002ad6:	e01b      	b.n	8002b10 <UART_SetConfig+0x158>
 8002ad8:	231b      	movs	r3, #27
 8002ada:	2218      	movs	r2, #24
 8002adc:	189b      	adds	r3, r3, r2
 8002ade:	19db      	adds	r3, r3, r7
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
 8002ae4:	e065      	b.n	8002bb2 <UART_SetConfig+0x1fa>
 8002ae6:	231b      	movs	r3, #27
 8002ae8:	2218      	movs	r2, #24
 8002aea:	189b      	adds	r3, r3, r2
 8002aec:	19db      	adds	r3, r3, r7
 8002aee:	2202      	movs	r2, #2
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	e05e      	b.n	8002bb2 <UART_SetConfig+0x1fa>
 8002af4:	231b      	movs	r3, #27
 8002af6:	2218      	movs	r2, #24
 8002af8:	189b      	adds	r3, r3, r2
 8002afa:	19db      	adds	r3, r3, r7
 8002afc:	2204      	movs	r2, #4
 8002afe:	701a      	strb	r2, [r3, #0]
 8002b00:	e057      	b.n	8002bb2 <UART_SetConfig+0x1fa>
 8002b02:	231b      	movs	r3, #27
 8002b04:	2218      	movs	r2, #24
 8002b06:	189b      	adds	r3, r3, r2
 8002b08:	19db      	adds	r3, r3, r7
 8002b0a:	2208      	movs	r2, #8
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	e050      	b.n	8002bb2 <UART_SetConfig+0x1fa>
 8002b10:	231b      	movs	r3, #27
 8002b12:	2218      	movs	r2, #24
 8002b14:	189b      	adds	r3, r3, r2
 8002b16:	19db      	adds	r3, r3, r7
 8002b18:	2210      	movs	r2, #16
 8002b1a:	701a      	strb	r2, [r3, #0]
 8002b1c:	e049      	b.n	8002bb2 <UART_SetConfig+0x1fa>
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a7a      	ldr	r2, [pc, #488]	; (8002d0c <UART_SetConfig+0x354>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d13e      	bne.n	8002ba6 <UART_SetConfig+0x1ee>
 8002b28:	4b7b      	ldr	r3, [pc, #492]	; (8002d18 <UART_SetConfig+0x360>)
 8002b2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b2c:	23c0      	movs	r3, #192	; 0xc0
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	4013      	ands	r3, r2
 8002b32:	22c0      	movs	r2, #192	; 0xc0
 8002b34:	0112      	lsls	r2, r2, #4
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d027      	beq.n	8002b8a <UART_SetConfig+0x1d2>
 8002b3a:	22c0      	movs	r2, #192	; 0xc0
 8002b3c:	0112      	lsls	r2, r2, #4
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d82a      	bhi.n	8002b98 <UART_SetConfig+0x1e0>
 8002b42:	2280      	movs	r2, #128	; 0x80
 8002b44:	0112      	lsls	r2, r2, #4
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d011      	beq.n	8002b6e <UART_SetConfig+0x1b6>
 8002b4a:	2280      	movs	r2, #128	; 0x80
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d822      	bhi.n	8002b98 <UART_SetConfig+0x1e0>
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d004      	beq.n	8002b60 <UART_SetConfig+0x1a8>
 8002b56:	2280      	movs	r2, #128	; 0x80
 8002b58:	00d2      	lsls	r2, r2, #3
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00e      	beq.n	8002b7c <UART_SetConfig+0x1c4>
 8002b5e:	e01b      	b.n	8002b98 <UART_SetConfig+0x1e0>
 8002b60:	231b      	movs	r3, #27
 8002b62:	2218      	movs	r2, #24
 8002b64:	189b      	adds	r3, r3, r2
 8002b66:	19db      	adds	r3, r3, r7
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
 8002b6c:	e021      	b.n	8002bb2 <UART_SetConfig+0x1fa>
 8002b6e:	231b      	movs	r3, #27
 8002b70:	2218      	movs	r2, #24
 8002b72:	189b      	adds	r3, r3, r2
 8002b74:	19db      	adds	r3, r3, r7
 8002b76:	2202      	movs	r2, #2
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	e01a      	b.n	8002bb2 <UART_SetConfig+0x1fa>
 8002b7c:	231b      	movs	r3, #27
 8002b7e:	2218      	movs	r2, #24
 8002b80:	189b      	adds	r3, r3, r2
 8002b82:	19db      	adds	r3, r3, r7
 8002b84:	2204      	movs	r2, #4
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	e013      	b.n	8002bb2 <UART_SetConfig+0x1fa>
 8002b8a:	231b      	movs	r3, #27
 8002b8c:	2218      	movs	r2, #24
 8002b8e:	189b      	adds	r3, r3, r2
 8002b90:	19db      	adds	r3, r3, r7
 8002b92:	2208      	movs	r2, #8
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	e00c      	b.n	8002bb2 <UART_SetConfig+0x1fa>
 8002b98:	231b      	movs	r3, #27
 8002b9a:	2218      	movs	r2, #24
 8002b9c:	189b      	adds	r3, r3, r2
 8002b9e:	19db      	adds	r3, r3, r7
 8002ba0:	2210      	movs	r2, #16
 8002ba2:	701a      	strb	r2, [r3, #0]
 8002ba4:	e005      	b.n	8002bb2 <UART_SetConfig+0x1fa>
 8002ba6:	231b      	movs	r3, #27
 8002ba8:	2218      	movs	r2, #24
 8002baa:	189b      	adds	r3, r3, r2
 8002bac:	19db      	adds	r3, r3, r7
 8002bae:	2210      	movs	r2, #16
 8002bb0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a55      	ldr	r2, [pc, #340]	; (8002d0c <UART_SetConfig+0x354>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d000      	beq.n	8002bbe <UART_SetConfig+0x206>
 8002bbc:	e084      	b.n	8002cc8 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bbe:	231b      	movs	r3, #27
 8002bc0:	2218      	movs	r2, #24
 8002bc2:	189b      	adds	r3, r3, r2
 8002bc4:	19db      	adds	r3, r3, r7
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d01d      	beq.n	8002c08 <UART_SetConfig+0x250>
 8002bcc:	dc20      	bgt.n	8002c10 <UART_SetConfig+0x258>
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d015      	beq.n	8002bfe <UART_SetConfig+0x246>
 8002bd2:	dc1d      	bgt.n	8002c10 <UART_SetConfig+0x258>
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <UART_SetConfig+0x226>
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d005      	beq.n	8002be8 <UART_SetConfig+0x230>
 8002bdc:	e018      	b.n	8002c10 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bde:	f7ff f8e1 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 8002be2:	0003      	movs	r3, r0
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002be6:	e01c      	b.n	8002c22 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002be8:	4b4b      	ldr	r3, [pc, #300]	; (8002d18 <UART_SetConfig+0x360>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2210      	movs	r2, #16
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d002      	beq.n	8002bf8 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002bf2:	4b4b      	ldr	r3, [pc, #300]	; (8002d20 <UART_SetConfig+0x368>)
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002bf6:	e014      	b.n	8002c22 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002bf8:	4b4a      	ldr	r3, [pc, #296]	; (8002d24 <UART_SetConfig+0x36c>)
 8002bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bfc:	e011      	b.n	8002c22 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bfe:	f7ff f821 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8002c02:	0003      	movs	r3, r0
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c06:	e00c      	b.n	8002c22 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c0e:	e008      	b.n	8002c22 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c14:	231a      	movs	r3, #26
 8002c16:	2218      	movs	r2, #24
 8002c18:	189b      	adds	r3, r3, r2
 8002c1a:	19db      	adds	r3, r3, r7
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
        break;
 8002c20:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d100      	bne.n	8002c2a <UART_SetConfig+0x272>
 8002c28:	e132      	b.n	8002e90 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	0013      	movs	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	189b      	adds	r3, r3, r2
 8002c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d305      	bcc.n	8002c46 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d906      	bls.n	8002c54 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002c46:	231a      	movs	r3, #26
 8002c48:	2218      	movs	r2, #24
 8002c4a:	189b      	adds	r3, r3, r2
 8002c4c:	19db      	adds	r3, r3, r7
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
 8002c52:	e11d      	b.n	8002e90 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	6939      	ldr	r1, [r7, #16]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	000b      	movs	r3, r1
 8002c62:	0e1b      	lsrs	r3, r3, #24
 8002c64:	0010      	movs	r0, r2
 8002c66:	0205      	lsls	r5, r0, #8
 8002c68:	431d      	orrs	r5, r3
 8002c6a:	000b      	movs	r3, r1
 8002c6c:	021c      	lsls	r4, r3, #8
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	68b8      	ldr	r0, [r7, #8]
 8002c7c:	68f9      	ldr	r1, [r7, #12]
 8002c7e:	1900      	adds	r0, r0, r4
 8002c80:	4169      	adcs	r1, r5
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f7fd face 	bl	8000230 <__aeabi_uldivmod>
 8002c94:	0002      	movs	r2, r0
 8002c96:	000b      	movs	r3, r1
 8002c98:	0013      	movs	r3, r2
 8002c9a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c9e:	23c0      	movs	r3, #192	; 0xc0
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d309      	bcc.n	8002cba <UART_SetConfig+0x302>
 8002ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	035b      	lsls	r3, r3, #13
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d204      	bcs.n	8002cba <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb6:	60da      	str	r2, [r3, #12]
 8002cb8:	e0ea      	b.n	8002e90 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002cba:	231a      	movs	r3, #26
 8002cbc:	2218      	movs	r2, #24
 8002cbe:	189b      	adds	r3, r3, r2
 8002cc0:	19db      	adds	r3, r3, r7
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e0e3      	b.n	8002e90 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	69da      	ldr	r2, [r3, #28]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d000      	beq.n	8002cd6 <UART_SetConfig+0x31e>
 8002cd4:	e085      	b.n	8002de2 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002cd6:	231b      	movs	r3, #27
 8002cd8:	2218      	movs	r2, #24
 8002cda:	189b      	adds	r3, r3, r2
 8002cdc:	19db      	adds	r3, r3, r7
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d837      	bhi.n	8002d54 <UART_SetConfig+0x39c>
 8002ce4:	009a      	lsls	r2, r3, #2
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <UART_SetConfig+0x370>)
 8002ce8:	18d3      	adds	r3, r2, r3
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cee:	f7ff f859 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 8002cf2:	0003      	movs	r3, r0
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cf6:	e036      	b.n	8002d66 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cf8:	f7ff f86a 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d00:	e031      	b.n	8002d66 <UART_SetConfig+0x3ae>
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	efff69f3 	.word	0xefff69f3
 8002d08:	ffffcfff 	.word	0xffffcfff
 8002d0c:	40004800 	.word	0x40004800
 8002d10:	fffff4ff 	.word	0xfffff4ff
 8002d14:	40013800 	.word	0x40013800
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40004400 	.word	0x40004400
 8002d20:	003d0900 	.word	0x003d0900
 8002d24:	00f42400 	.word	0x00f42400
 8002d28:	080039d4 	.word	0x080039d4
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d2c:	4b60      	ldr	r3, [pc, #384]	; (8002eb0 <UART_SetConfig+0x4f8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2210      	movs	r2, #16
 8002d32:	4013      	ands	r3, r2
 8002d34:	d002      	beq.n	8002d3c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d36:	4b5f      	ldr	r3, [pc, #380]	; (8002eb4 <UART_SetConfig+0x4fc>)
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d3a:	e014      	b.n	8002d66 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002d3c:	4b5e      	ldr	r3, [pc, #376]	; (8002eb8 <UART_SetConfig+0x500>)
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d40:	e011      	b.n	8002d66 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d42:	f7fe ff7f 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8002d46:	0003      	movs	r3, r0
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d4a:	e00c      	b.n	8002d66 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d52:	e008      	b.n	8002d66 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d58:	231a      	movs	r3, #26
 8002d5a:	2218      	movs	r2, #24
 8002d5c:	189b      	adds	r3, r3, r2
 8002d5e:	19db      	adds	r3, r3, r7
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
        break;
 8002d64:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d100      	bne.n	8002d6e <UART_SetConfig+0x3b6>
 8002d6c:	e090      	b.n	8002e90 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	005a      	lsls	r2, r3, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	085b      	lsrs	r3, r3, #1
 8002d78:	18d2      	adds	r2, r2, r3
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	0019      	movs	r1, r3
 8002d80:	0010      	movs	r0, r2
 8002d82:	f7fd f9c9 	bl	8000118 <__udivsi3>
 8002d86:	0003      	movs	r3, r0
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	2b0f      	cmp	r3, #15
 8002d8e:	d921      	bls.n	8002dd4 <UART_SetConfig+0x41c>
 8002d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	025b      	lsls	r3, r3, #9
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d21c      	bcs.n	8002dd4 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	200e      	movs	r0, #14
 8002da0:	2418      	movs	r4, #24
 8002da2:	1903      	adds	r3, r0, r4
 8002da4:	19db      	adds	r3, r3, r7
 8002da6:	210f      	movs	r1, #15
 8002da8:	438a      	bics	r2, r1
 8002daa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2207      	movs	r2, #7
 8002db4:	4013      	ands	r3, r2
 8002db6:	b299      	uxth	r1, r3
 8002db8:	1903      	adds	r3, r0, r4
 8002dba:	19db      	adds	r3, r3, r7
 8002dbc:	1902      	adds	r2, r0, r4
 8002dbe:	19d2      	adds	r2, r2, r7
 8002dc0:	8812      	ldrh	r2, [r2, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	1902      	adds	r2, r0, r4
 8002dcc:	19d2      	adds	r2, r2, r7
 8002dce:	8812      	ldrh	r2, [r2, #0]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	e05d      	b.n	8002e90 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002dd4:	231a      	movs	r3, #26
 8002dd6:	2218      	movs	r2, #24
 8002dd8:	189b      	adds	r3, r3, r2
 8002dda:	19db      	adds	r3, r3, r7
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	e056      	b.n	8002e90 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002de2:	231b      	movs	r3, #27
 8002de4:	2218      	movs	r2, #24
 8002de6:	189b      	adds	r3, r3, r2
 8002de8:	19db      	adds	r3, r3, r7
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d822      	bhi.n	8002e36 <UART_SetConfig+0x47e>
 8002df0:	009a      	lsls	r2, r3, #2
 8002df2:	4b32      	ldr	r3, [pc, #200]	; (8002ebc <UART_SetConfig+0x504>)
 8002df4:	18d3      	adds	r3, r2, r3
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dfa:	f7fe ffd3 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e02:	e021      	b.n	8002e48 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e04:	f7fe ffe4 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e0c:	e01c      	b.n	8002e48 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e0e:	4b28      	ldr	r3, [pc, #160]	; (8002eb0 <UART_SetConfig+0x4f8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2210      	movs	r2, #16
 8002e14:	4013      	ands	r3, r2
 8002e16:	d002      	beq.n	8002e1e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e18:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <UART_SetConfig+0x4fc>)
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e1c:	e014      	b.n	8002e48 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002e1e:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <UART_SetConfig+0x500>)
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e22:	e011      	b.n	8002e48 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e24:	f7fe ff0e 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e2c:	e00c      	b.n	8002e48 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e34:	e008      	b.n	8002e48 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e3a:	231a      	movs	r3, #26
 8002e3c:	2218      	movs	r2, #24
 8002e3e:	189b      	adds	r3, r3, r2
 8002e40:	19db      	adds	r3, r3, r7
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
        break;
 8002e46:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d020      	beq.n	8002e90 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	085a      	lsrs	r2, r3, #1
 8002e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e56:	18d2      	adds	r2, r2, r3
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	0010      	movs	r0, r2
 8002e60:	f7fd f95a 	bl	8000118 <__udivsi3>
 8002e64:	0003      	movs	r3, r0
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	2b0f      	cmp	r3, #15
 8002e6c:	d90a      	bls.n	8002e84 <UART_SetConfig+0x4cc>
 8002e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	025b      	lsls	r3, r3, #9
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d205      	bcs.n	8002e84 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	e005      	b.n	8002e90 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002e84:	231a      	movs	r3, #26
 8002e86:	2218      	movs	r2, #24
 8002e88:	189b      	adds	r3, r3, r2
 8002e8a:	19db      	adds	r3, r3, r7
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2200      	movs	r2, #0
 8002e94:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e9c:	231a      	movs	r3, #26
 8002e9e:	2218      	movs	r2, #24
 8002ea0:	189b      	adds	r3, r3, r2
 8002ea2:	19db      	adds	r3, r3, r7
 8002ea4:	781b      	ldrb	r3, [r3, #0]
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b00e      	add	sp, #56	; 0x38
 8002eac:	bdb0      	pop	{r4, r5, r7, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	003d0900 	.word	0x003d0900
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	080039f8 	.word	0x080039f8

08002ec0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	2201      	movs	r2, #1
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d00b      	beq.n	8002eea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	4a4a      	ldr	r2, [pc, #296]	; (8003004 <UART_AdvFeatureConfig+0x144>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	0019      	movs	r1, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	2202      	movs	r2, #2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d00b      	beq.n	8002f0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4a43      	ldr	r2, [pc, #268]	; (8003008 <UART_AdvFeatureConfig+0x148>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	0019      	movs	r1, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	2204      	movs	r2, #4
 8002f12:	4013      	ands	r3, r2
 8002f14:	d00b      	beq.n	8002f2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4a3b      	ldr	r2, [pc, #236]	; (800300c <UART_AdvFeatureConfig+0x14c>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	0019      	movs	r1, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	2208      	movs	r2, #8
 8002f34:	4013      	ands	r3, r2
 8002f36:	d00b      	beq.n	8002f50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4a34      	ldr	r2, [pc, #208]	; (8003010 <UART_AdvFeatureConfig+0x150>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	0019      	movs	r1, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	2210      	movs	r2, #16
 8002f56:	4013      	ands	r3, r2
 8002f58:	d00b      	beq.n	8002f72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4a2c      	ldr	r2, [pc, #176]	; (8003014 <UART_AdvFeatureConfig+0x154>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	0019      	movs	r1, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	2220      	movs	r2, #32
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d00b      	beq.n	8002f94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	4a25      	ldr	r2, [pc, #148]	; (8003018 <UART_AdvFeatureConfig+0x158>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	2240      	movs	r2, #64	; 0x40
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d01d      	beq.n	8002fda <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	4a1d      	ldr	r2, [pc, #116]	; (800301c <UART_AdvFeatureConfig+0x15c>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	0019      	movs	r1, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	035b      	lsls	r3, r3, #13
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d10b      	bne.n	8002fda <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a15      	ldr	r2, [pc, #84]	; (8003020 <UART_AdvFeatureConfig+0x160>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	0019      	movs	r1, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	2280      	movs	r2, #128	; 0x80
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d00b      	beq.n	8002ffc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	4a0e      	ldr	r2, [pc, #56]	; (8003024 <UART_AdvFeatureConfig+0x164>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	0019      	movs	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	605a      	str	r2, [r3, #4]
  }
}
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b002      	add	sp, #8
 8003002:	bd80      	pop	{r7, pc}
 8003004:	fffdffff 	.word	0xfffdffff
 8003008:	fffeffff 	.word	0xfffeffff
 800300c:	fffbffff 	.word	0xfffbffff
 8003010:	ffff7fff 	.word	0xffff7fff
 8003014:	ffffefff 	.word	0xffffefff
 8003018:	ffffdfff 	.word	0xffffdfff
 800301c:	ffefffff 	.word	0xffefffff
 8003020:	ff9fffff 	.word	0xff9fffff
 8003024:	fff7ffff 	.word	0xfff7ffff

08003028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b092      	sub	sp, #72	; 0x48
 800302c:	af02      	add	r7, sp, #8
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2284      	movs	r2, #132	; 0x84
 8003034:	2100      	movs	r1, #0
 8003036:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003038:	f7fd fd18 	bl	8000a6c <HAL_GetTick>
 800303c:	0003      	movs	r3, r0
 800303e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2208      	movs	r2, #8
 8003048:	4013      	ands	r3, r2
 800304a:	2b08      	cmp	r3, #8
 800304c:	d12c      	bne.n	80030a8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800304e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003050:	2280      	movs	r2, #128	; 0x80
 8003052:	0391      	lsls	r1, r2, #14
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4a46      	ldr	r2, [pc, #280]	; (8003170 <UART_CheckIdleState+0x148>)
 8003058:	9200      	str	r2, [sp, #0]
 800305a:	2200      	movs	r2, #0
 800305c:	f000 f88c 	bl	8003178 <UART_WaitOnFlagUntilTimeout>
 8003060:	1e03      	subs	r3, r0, #0
 8003062:	d021      	beq.n	80030a8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003064:	f3ef 8310 	mrs	r3, PRIMASK
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800306c:	63bb      	str	r3, [r7, #56]	; 0x38
 800306e:	2301      	movs	r3, #1
 8003070:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003074:	f383 8810 	msr	PRIMASK, r3
}
 8003078:	46c0      	nop			; (mov r8, r8)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2180      	movs	r1, #128	; 0x80
 8003086:	438a      	bics	r2, r1
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003090:	f383 8810 	msr	PRIMASK, r3
}
 8003094:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2278      	movs	r2, #120	; 0x78
 80030a0:	2100      	movs	r1, #0
 80030a2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e05f      	b.n	8003168 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2204      	movs	r2, #4
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d146      	bne.n	8003144 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b8:	2280      	movs	r2, #128	; 0x80
 80030ba:	03d1      	lsls	r1, r2, #15
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	4a2c      	ldr	r2, [pc, #176]	; (8003170 <UART_CheckIdleState+0x148>)
 80030c0:	9200      	str	r2, [sp, #0]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f000 f858 	bl	8003178 <UART_WaitOnFlagUntilTimeout>
 80030c8:	1e03      	subs	r3, r0, #0
 80030ca:	d03b      	beq.n	8003144 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030cc:	f3ef 8310 	mrs	r3, PRIMASK
 80030d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80030d2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030d4:	637b      	str	r3, [r7, #52]	; 0x34
 80030d6:	2301      	movs	r3, #1
 80030d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f383 8810 	msr	PRIMASK, r3
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4921      	ldr	r1, [pc, #132]	; (8003174 <UART_CheckIdleState+0x14c>)
 80030ee:	400a      	ands	r2, r1
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f383 8810 	msr	PRIMASK, r3
}
 80030fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003102:	61bb      	str	r3, [r7, #24]
  return(result);
 8003104:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003106:	633b      	str	r3, [r7, #48]	; 0x30
 8003108:	2301      	movs	r3, #1
 800310a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f383 8810 	msr	PRIMASK, r3
}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2101      	movs	r1, #1
 8003120:	438a      	bics	r2, r1
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	f383 8810 	msr	PRIMASK, r3
}
 800312e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2280      	movs	r2, #128	; 0x80
 8003134:	2120      	movs	r1, #32
 8003136:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2278      	movs	r2, #120	; 0x78
 800313c:	2100      	movs	r1, #0
 800313e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e011      	b.n	8003168 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2280      	movs	r2, #128	; 0x80
 800314e:	2120      	movs	r1, #32
 8003150:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2278      	movs	r2, #120	; 0x78
 8003162:	2100      	movs	r1, #0
 8003164:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	0018      	movs	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	b010      	add	sp, #64	; 0x40
 800316e:	bd80      	pop	{r7, pc}
 8003170:	01ffffff 	.word	0x01ffffff
 8003174:	fffffedf 	.word	0xfffffedf

08003178 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	1dfb      	adds	r3, r7, #7
 8003186:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003188:	e04b      	b.n	8003222 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	3301      	adds	r3, #1
 800318e:	d048      	beq.n	8003222 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003190:	f7fd fc6c 	bl	8000a6c <HAL_GetTick>
 8003194:	0002      	movs	r2, r0
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	429a      	cmp	r2, r3
 800319e:	d302      	bcc.n	80031a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e04b      	b.n	8003242 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2204      	movs	r2, #4
 80031b2:	4013      	ands	r3, r2
 80031b4:	d035      	beq.n	8003222 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	2208      	movs	r2, #8
 80031be:	4013      	ands	r3, r2
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d111      	bne.n	80031e8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2208      	movs	r2, #8
 80031ca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	0018      	movs	r0, r3
 80031d0:	f000 f906 	bl	80033e0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2284      	movs	r2, #132	; 0x84
 80031d8:	2108      	movs	r1, #8
 80031da:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2278      	movs	r2, #120	; 0x78
 80031e0:	2100      	movs	r1, #0
 80031e2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e02c      	b.n	8003242 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	69da      	ldr	r2, [r3, #28]
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	401a      	ands	r2, r3
 80031f4:	2380      	movs	r3, #128	; 0x80
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d112      	bne.n	8003222 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2280      	movs	r2, #128	; 0x80
 8003202:	0112      	lsls	r2, r2, #4
 8003204:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	0018      	movs	r0, r3
 800320a:	f000 f8e9 	bl	80033e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2284      	movs	r2, #132	; 0x84
 8003212:	2120      	movs	r1, #32
 8003214:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2278      	movs	r2, #120	; 0x78
 800321a:	2100      	movs	r1, #0
 800321c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e00f      	b.n	8003242 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	4013      	ands	r3, r2
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	425a      	negs	r2, r3
 8003232:	4153      	adcs	r3, r2
 8003234:	b2db      	uxtb	r3, r3
 8003236:	001a      	movs	r2, r3
 8003238:	1dfb      	adds	r3, r7, #7
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d0a4      	beq.n	800318a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b004      	add	sp, #16
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b090      	sub	sp, #64	; 0x40
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	1dbb      	adds	r3, r7, #6
 8003258:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	1dba      	adds	r2, r7, #6
 8003264:	2158      	movs	r1, #88	; 0x58
 8003266:	8812      	ldrh	r2, [r2, #0]
 8003268:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	1dba      	adds	r2, r7, #6
 800326e:	215a      	movs	r1, #90	; 0x5a
 8003270:	8812      	ldrh	r2, [r2, #0]
 8003272:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	015b      	lsls	r3, r3, #5
 8003282:	429a      	cmp	r2, r3
 8003284:	d10d      	bne.n	80032a2 <UART_Start_Receive_IT+0x56>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d104      	bne.n	8003298 <UART_Start_Receive_IT+0x4c>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	225c      	movs	r2, #92	; 0x5c
 8003292:	4950      	ldr	r1, [pc, #320]	; (80033d4 <UART_Start_Receive_IT+0x188>)
 8003294:	5299      	strh	r1, [r3, r2]
 8003296:	e02e      	b.n	80032f6 <UART_Start_Receive_IT+0xaa>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	225c      	movs	r2, #92	; 0x5c
 800329c:	21ff      	movs	r1, #255	; 0xff
 800329e:	5299      	strh	r1, [r3, r2]
 80032a0:	e029      	b.n	80032f6 <UART_Start_Receive_IT+0xaa>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10d      	bne.n	80032c6 <UART_Start_Receive_IT+0x7a>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d104      	bne.n	80032bc <UART_Start_Receive_IT+0x70>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	225c      	movs	r2, #92	; 0x5c
 80032b6:	21ff      	movs	r1, #255	; 0xff
 80032b8:	5299      	strh	r1, [r3, r2]
 80032ba:	e01c      	b.n	80032f6 <UART_Start_Receive_IT+0xaa>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	225c      	movs	r2, #92	; 0x5c
 80032c0:	217f      	movs	r1, #127	; 0x7f
 80032c2:	5299      	strh	r1, [r3, r2]
 80032c4:	e017      	b.n	80032f6 <UART_Start_Receive_IT+0xaa>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	2380      	movs	r3, #128	; 0x80
 80032cc:	055b      	lsls	r3, r3, #21
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d10d      	bne.n	80032ee <UART_Start_Receive_IT+0xa2>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d104      	bne.n	80032e4 <UART_Start_Receive_IT+0x98>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	225c      	movs	r2, #92	; 0x5c
 80032de:	217f      	movs	r1, #127	; 0x7f
 80032e0:	5299      	strh	r1, [r3, r2]
 80032e2:	e008      	b.n	80032f6 <UART_Start_Receive_IT+0xaa>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	225c      	movs	r2, #92	; 0x5c
 80032e8:	213f      	movs	r1, #63	; 0x3f
 80032ea:	5299      	strh	r1, [r3, r2]
 80032ec:	e003      	b.n	80032f6 <UART_Start_Receive_IT+0xaa>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	225c      	movs	r2, #92	; 0x5c
 80032f2:	2100      	movs	r1, #0
 80032f4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2284      	movs	r2, #132	; 0x84
 80032fa:	2100      	movs	r1, #0
 80032fc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2280      	movs	r2, #128	; 0x80
 8003302:	2122      	movs	r1, #34	; 0x22
 8003304:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003306:	f3ef 8310 	mrs	r3, PRIMASK
 800330a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800330c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800330e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003310:	2301      	movs	r3, #1
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003316:	f383 8810 	msr	PRIMASK, r3
}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2101      	movs	r1, #1
 8003328:	430a      	orrs	r2, r1
 800332a:	609a      	str	r2, [r3, #8]
 800332c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800332e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	f383 8810 	msr	PRIMASK, r3
}
 8003336:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	015b      	lsls	r3, r3, #5
 8003340:	429a      	cmp	r2, r3
 8003342:	d107      	bne.n	8003354 <UART_Start_Receive_IT+0x108>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d103      	bne.n	8003354 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4a22      	ldr	r2, [pc, #136]	; (80033d8 <UART_Start_Receive_IT+0x18c>)
 8003350:	669a      	str	r2, [r3, #104]	; 0x68
 8003352:	e002      	b.n	800335a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4a21      	ldr	r2, [pc, #132]	; (80033dc <UART_Start_Receive_IT+0x190>)
 8003358:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d019      	beq.n	8003396 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003362:	f3ef 8310 	mrs	r3, PRIMASK
 8003366:	61fb      	str	r3, [r7, #28]
  return(result);
 8003368:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800336a:	637b      	str	r3, [r7, #52]	; 0x34
 800336c:	2301      	movs	r3, #1
 800336e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	f383 8810 	msr	PRIMASK, r3
}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2190      	movs	r1, #144	; 0x90
 8003384:	0049      	lsls	r1, r1, #1
 8003386:	430a      	orrs	r2, r1
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	f383 8810 	msr	PRIMASK, r3
}
 8003394:	e018      	b.n	80033c8 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003396:	f3ef 8310 	mrs	r3, PRIMASK
 800339a:	613b      	str	r3, [r7, #16]
  return(result);
 800339c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800339e:	63bb      	str	r3, [r7, #56]	; 0x38
 80033a0:	2301      	movs	r3, #1
 80033a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f383 8810 	msr	PRIMASK, r3
}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2120      	movs	r1, #32
 80033b8:	430a      	orrs	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	f383 8810 	msr	PRIMASK, r3
}
 80033c6:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	0018      	movs	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b010      	add	sp, #64	; 0x40
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	000001ff 	.word	0x000001ff
 80033d8:	080036f1 	.word	0x080036f1
 80033dc:	0800352d 	.word	0x0800352d

080033e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08e      	sub	sp, #56	; 0x38
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e8:	f3ef 8310 	mrs	r3, PRIMASK
 80033ec:	617b      	str	r3, [r7, #20]
  return(result);
 80033ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f0:	637b      	str	r3, [r7, #52]	; 0x34
 80033f2:	2301      	movs	r3, #1
 80033f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	f383 8810 	msr	PRIMASK, r3
}
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4926      	ldr	r1, [pc, #152]	; (80034a4 <UART_EndRxTransfer+0xc4>)
 800340a:	400a      	ands	r2, r1
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003410:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f383 8810 	msr	PRIMASK, r3
}
 8003418:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800341a:	f3ef 8310 	mrs	r3, PRIMASK
 800341e:	623b      	str	r3, [r7, #32]
  return(result);
 8003420:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003422:	633b      	str	r3, [r7, #48]	; 0x30
 8003424:	2301      	movs	r3, #1
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	f383 8810 	msr	PRIMASK, r3
}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2101      	movs	r1, #1
 800343c:	438a      	bics	r2, r1
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003446:	f383 8810 	msr	PRIMASK, r3
}
 800344a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003450:	2b01      	cmp	r3, #1
 8003452:	d118      	bne.n	8003486 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003454:	f3ef 8310 	mrs	r3, PRIMASK
 8003458:	60bb      	str	r3, [r7, #8]
  return(result);
 800345a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800345e:	2301      	movs	r3, #1
 8003460:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f383 8810 	msr	PRIMASK, r3
}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2110      	movs	r1, #16
 8003476:	438a      	bics	r2, r1
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f383 8810 	msr	PRIMASK, r3
}
 8003484:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2280      	movs	r2, #128	; 0x80
 800348a:	2120      	movs	r1, #32
 800348c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	669a      	str	r2, [r3, #104]	; 0x68
}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	46bd      	mov	sp, r7
 800349e:	b00e      	add	sp, #56	; 0x38
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	fffffedf 	.word	0xfffffedf

080034a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	225a      	movs	r2, #90	; 0x5a
 80034ba:	2100      	movs	r1, #0
 80034bc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2252      	movs	r2, #82	; 0x52
 80034c2:	2100      	movs	r1, #0
 80034c4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7ff fa61 	bl	8002990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b004      	add	sp, #16
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034de:	f3ef 8310 	mrs	r3, PRIMASK
 80034e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80034e4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	2301      	movs	r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f383 8810 	msr	PRIMASK, r3
}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2140      	movs	r1, #64	; 0x40
 8003500:	438a      	bics	r2, r1
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f383 8810 	msr	PRIMASK, r3
}
 800350e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	0018      	movs	r0, r3
 8003520:	f7ff fa2e 	bl	8002980 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003524:	46c0      	nop			; (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b006      	add	sp, #24
 800352a:	bd80      	pop	{r7, pc}

0800352c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b094      	sub	sp, #80	; 0x50
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003534:	204e      	movs	r0, #78	; 0x4e
 8003536:	183b      	adds	r3, r7, r0
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	215c      	movs	r1, #92	; 0x5c
 800353c:	5a52      	ldrh	r2, [r2, r1]
 800353e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2280      	movs	r2, #128	; 0x80
 8003544:	589b      	ldr	r3, [r3, r2]
 8003546:	2b22      	cmp	r3, #34	; 0x22
 8003548:	d000      	beq.n	800354c <UART_RxISR_8BIT+0x20>
 800354a:	e0bf      	b.n	80036cc <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003552:	214c      	movs	r1, #76	; 0x4c
 8003554:	187b      	adds	r3, r7, r1
 8003556:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003558:	187b      	adds	r3, r7, r1
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	b2da      	uxtb	r2, r3
 800355e:	183b      	adds	r3, r7, r0
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	b2d9      	uxtb	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003568:	400a      	ands	r2, r1
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	225a      	movs	r2, #90	; 0x5a
 800357c:	5a9b      	ldrh	r3, [r3, r2]
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b299      	uxth	r1, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	225a      	movs	r2, #90	; 0x5a
 8003588:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	225a      	movs	r2, #90	; 0x5a
 800358e:	5a9b      	ldrh	r3, [r3, r2]
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d000      	beq.n	8003598 <UART_RxISR_8BIT+0x6c>
 8003596:	e0a1      	b.n	80036dc <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003598:	f3ef 8310 	mrs	r3, PRIMASK
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80035a2:	2301      	movs	r3, #1
 80035a4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	f383 8810 	msr	PRIMASK, r3
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	494a      	ldr	r1, [pc, #296]	; (80036e4 <UART_RxISR_8BIT+0x1b8>)
 80035ba:	400a      	ands	r2, r1
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c4:	f383 8810 	msr	PRIMASK, r3
}
 80035c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ca:	f3ef 8310 	mrs	r3, PRIMASK
 80035ce:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d2:	647b      	str	r3, [r7, #68]	; 0x44
 80035d4:	2301      	movs	r3, #1
 80035d6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035da:	f383 8810 	msr	PRIMASK, r3
}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2101      	movs	r1, #1
 80035ec:	438a      	bics	r2, r1
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f6:	f383 8810 	msr	PRIMASK, r3
}
 80035fa:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2280      	movs	r2, #128	; 0x80
 8003600:	2120      	movs	r1, #32
 8003602:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a34      	ldr	r2, [pc, #208]	; (80036e8 <UART_RxISR_8BIT+0x1bc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d01f      	beq.n	800365a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	041b      	lsls	r3, r3, #16
 8003624:	4013      	ands	r3, r2
 8003626:	d018      	beq.n	800365a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003628:	f3ef 8310 	mrs	r3, PRIMASK
 800362c:	61bb      	str	r3, [r7, #24]
  return(result);
 800362e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003630:	643b      	str	r3, [r7, #64]	; 0x40
 8003632:	2301      	movs	r3, #1
 8003634:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f383 8810 	msr	PRIMASK, r3
}
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4928      	ldr	r1, [pc, #160]	; (80036ec <UART_RxISR_8BIT+0x1c0>)
 800364a:	400a      	ands	r2, r1
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003650:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	f383 8810 	msr	PRIMASK, r3
}
 8003658:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365e:	2b01      	cmp	r3, #1
 8003660:	d12f      	bne.n	80036c2 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003668:	f3ef 8310 	mrs	r3, PRIMASK
 800366c:	60fb      	str	r3, [r7, #12]
  return(result);
 800366e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003672:	2301      	movs	r3, #1
 8003674:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f383 8810 	msr	PRIMASK, r3
}
 800367c:	46c0      	nop			; (mov r8, r8)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2110      	movs	r1, #16
 800368a:	438a      	bics	r2, r1
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003690:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f383 8810 	msr	PRIMASK, r3
}
 8003698:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	2210      	movs	r2, #16
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b10      	cmp	r3, #16
 80036a6:	d103      	bne.n	80036b0 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2210      	movs	r2, #16
 80036ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2258      	movs	r2, #88	; 0x58
 80036b4:	5a9a      	ldrh	r2, [r3, r2]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	0011      	movs	r1, r2
 80036ba:	0018      	movs	r0, r3
 80036bc:	f7ff f970 	bl	80029a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036c0:	e00c      	b.n	80036dc <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	0018      	movs	r0, r3
 80036c6:	f7fd f881 	bl	80007cc <HAL_UART_RxCpltCallback>
}
 80036ca:	e007      	b.n	80036dc <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2108      	movs	r1, #8
 80036d8:	430a      	orrs	r2, r1
 80036da:	619a      	str	r2, [r3, #24]
}
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b014      	add	sp, #80	; 0x50
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	fffffedf 	.word	0xfffffedf
 80036e8:	40004800 	.word	0x40004800
 80036ec:	fbffffff 	.word	0xfbffffff

080036f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b094      	sub	sp, #80	; 0x50
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80036f8:	204e      	movs	r0, #78	; 0x4e
 80036fa:	183b      	adds	r3, r7, r0
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	215c      	movs	r1, #92	; 0x5c
 8003700:	5a52      	ldrh	r2, [r2, r1]
 8003702:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2280      	movs	r2, #128	; 0x80
 8003708:	589b      	ldr	r3, [r3, r2]
 800370a:	2b22      	cmp	r3, #34	; 0x22
 800370c:	d000      	beq.n	8003710 <UART_RxISR_16BIT+0x20>
 800370e:	e0bf      	b.n	8003890 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003716:	214c      	movs	r1, #76	; 0x4c
 8003718:	187b      	adds	r3, r7, r1
 800371a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003720:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003722:	187b      	adds	r3, r7, r1
 8003724:	183a      	adds	r2, r7, r0
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	8812      	ldrh	r2, [r2, #0]
 800372a:	4013      	ands	r3, r2
 800372c:	b29a      	uxth	r2, r3
 800372e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003730:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003736:	1c9a      	adds	r2, r3, #2
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	225a      	movs	r2, #90	; 0x5a
 8003740:	5a9b      	ldrh	r3, [r3, r2]
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b299      	uxth	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	225a      	movs	r2, #90	; 0x5a
 800374c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	225a      	movs	r2, #90	; 0x5a
 8003752:	5a9b      	ldrh	r3, [r3, r2]
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d000      	beq.n	800375c <UART_RxISR_16BIT+0x6c>
 800375a:	e0a1      	b.n	80038a0 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800375c:	f3ef 8310 	mrs	r3, PRIMASK
 8003760:	623b      	str	r3, [r7, #32]
  return(result);
 8003762:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003764:	647b      	str	r3, [r7, #68]	; 0x44
 8003766:	2301      	movs	r3, #1
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	f383 8810 	msr	PRIMASK, r3
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	494a      	ldr	r1, [pc, #296]	; (80038a8 <UART_RxISR_16BIT+0x1b8>)
 800377e:	400a      	ands	r2, r1
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003784:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	f383 8810 	msr	PRIMASK, r3
}
 800378c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800378e:	f3ef 8310 	mrs	r3, PRIMASK
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003796:	643b      	str	r3, [r7, #64]	; 0x40
 8003798:	2301      	movs	r3, #1
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	f383 8810 	msr	PRIMASK, r3
}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2101      	movs	r1, #1
 80037b0:	438a      	bics	r2, r1
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ba:	f383 8810 	msr	PRIMASK, r3
}
 80037be:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2280      	movs	r2, #128	; 0x80
 80037c4:	2120      	movs	r1, #32
 80037c6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a34      	ldr	r2, [pc, #208]	; (80038ac <UART_RxISR_16BIT+0x1bc>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d01f      	beq.n	800381e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	041b      	lsls	r3, r3, #16
 80037e8:	4013      	ands	r3, r2
 80037ea:	d018      	beq.n	800381e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ec:	f3ef 8310 	mrs	r3, PRIMASK
 80037f0:	617b      	str	r3, [r7, #20]
  return(result);
 80037f2:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f6:	2301      	movs	r3, #1
 80037f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f383 8810 	msr	PRIMASK, r3
}
 8003800:	46c0      	nop			; (mov r8, r8)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4928      	ldr	r1, [pc, #160]	; (80038b0 <UART_RxISR_16BIT+0x1c0>)
 800380e:	400a      	ands	r2, r1
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003814:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f383 8810 	msr	PRIMASK, r3
}
 800381c:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003822:	2b01      	cmp	r3, #1
 8003824:	d12f      	bne.n	8003886 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800382c:	f3ef 8310 	mrs	r3, PRIMASK
 8003830:	60bb      	str	r3, [r7, #8]
  return(result);
 8003832:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003834:	63bb      	str	r3, [r7, #56]	; 0x38
 8003836:	2301      	movs	r3, #1
 8003838:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f383 8810 	msr	PRIMASK, r3
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2110      	movs	r1, #16
 800384e:	438a      	bics	r2, r1
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003854:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f383 8810 	msr	PRIMASK, r3
}
 800385c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	2210      	movs	r2, #16
 8003866:	4013      	ands	r3, r2
 8003868:	2b10      	cmp	r3, #16
 800386a:	d103      	bne.n	8003874 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2210      	movs	r2, #16
 8003872:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2258      	movs	r2, #88	; 0x58
 8003878:	5a9a      	ldrh	r2, [r3, r2]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	0011      	movs	r1, r2
 800387e:	0018      	movs	r0, r3
 8003880:	f7ff f88e 	bl	80029a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003884:	e00c      	b.n	80038a0 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	0018      	movs	r0, r3
 800388a:	f7fc ff9f 	bl	80007cc <HAL_UART_RxCpltCallback>
}
 800388e:	e007      	b.n	80038a0 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2108      	movs	r1, #8
 800389c:	430a      	orrs	r2, r1
 800389e:	619a      	str	r2, [r3, #24]
}
 80038a0:	46c0      	nop			; (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b014      	add	sp, #80	; 0x50
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	fffffedf 	.word	0xfffffedf
 80038ac:	40004800 	.word	0x40004800
 80038b0:	fbffffff 	.word	0xfbffffff

080038b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	b002      	add	sp, #8
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <memset>:
 80038c4:	0003      	movs	r3, r0
 80038c6:	1882      	adds	r2, r0, r2
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d100      	bne.n	80038ce <memset+0xa>
 80038cc:	4770      	bx	lr
 80038ce:	7019      	strb	r1, [r3, #0]
 80038d0:	3301      	adds	r3, #1
 80038d2:	e7f9      	b.n	80038c8 <memset+0x4>

080038d4 <__libc_init_array>:
 80038d4:	b570      	push	{r4, r5, r6, lr}
 80038d6:	2600      	movs	r6, #0
 80038d8:	4c0c      	ldr	r4, [pc, #48]	; (800390c <__libc_init_array+0x38>)
 80038da:	4d0d      	ldr	r5, [pc, #52]	; (8003910 <__libc_init_array+0x3c>)
 80038dc:	1b64      	subs	r4, r4, r5
 80038de:	10a4      	asrs	r4, r4, #2
 80038e0:	42a6      	cmp	r6, r4
 80038e2:	d109      	bne.n	80038f8 <__libc_init_array+0x24>
 80038e4:	2600      	movs	r6, #0
 80038e6:	f000 f819 	bl	800391c <_init>
 80038ea:	4c0a      	ldr	r4, [pc, #40]	; (8003914 <__libc_init_array+0x40>)
 80038ec:	4d0a      	ldr	r5, [pc, #40]	; (8003918 <__libc_init_array+0x44>)
 80038ee:	1b64      	subs	r4, r4, r5
 80038f0:	10a4      	asrs	r4, r4, #2
 80038f2:	42a6      	cmp	r6, r4
 80038f4:	d105      	bne.n	8003902 <__libc_init_array+0x2e>
 80038f6:	bd70      	pop	{r4, r5, r6, pc}
 80038f8:	00b3      	lsls	r3, r6, #2
 80038fa:	58eb      	ldr	r3, [r5, r3]
 80038fc:	4798      	blx	r3
 80038fe:	3601      	adds	r6, #1
 8003900:	e7ee      	b.n	80038e0 <__libc_init_array+0xc>
 8003902:	00b3      	lsls	r3, r6, #2
 8003904:	58eb      	ldr	r3, [r5, r3]
 8003906:	4798      	blx	r3
 8003908:	3601      	adds	r6, #1
 800390a:	e7f2      	b.n	80038f2 <__libc_init_array+0x1e>
 800390c:	08003a24 	.word	0x08003a24
 8003910:	08003a24 	.word	0x08003a24
 8003914:	08003a28 	.word	0x08003a28
 8003918:	08003a24 	.word	0x08003a24

0800391c <_init>:
 800391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003922:	bc08      	pop	{r3}
 8003924:	469e      	mov	lr, r3
 8003926:	4770      	bx	lr

08003928 <_fini>:
 8003928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392e:	bc08      	pop	{r3}
 8003930:	469e      	mov	lr, r3
 8003932:	4770      	bx	lr
