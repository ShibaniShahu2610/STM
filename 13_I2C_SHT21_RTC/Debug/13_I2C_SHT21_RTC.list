
13_I2C_SHT21_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008030  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080080f0  080080f0  000180f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800823c  0800823c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800823c  0800823c  0001823c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008244  08008244  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008244  08008244  00018244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008248  08008248  00018248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800824c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000068  080082b4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  080082b4  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e38e  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022e4  00000000  00000000  0002e461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d08  00000000  00000000  00030748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a1e  00000000  00000000  00031450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015a4a  00000000  00000000  00031e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001152b  00000000  00000000  000478b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080b1c  00000000  00000000  00058de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a04  00000000  00000000  000d9900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000dd304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080080d8 	.word	0x080080d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080080d8 	.word	0x080080d8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f84c 	bl	8000310 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__aeabi_f2uiz>:
 80002e0:	219e      	movs	r1, #158	; 0x9e
 80002e2:	b510      	push	{r4, lr}
 80002e4:	05c9      	lsls	r1, r1, #23
 80002e6:	1c04      	adds	r4, r0, #0
 80002e8:	f002 fbe6 	bl	8002ab8 <__aeabi_fcmpge>
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d103      	bne.n	80002f8 <__aeabi_f2uiz+0x18>
 80002f0:	1c20      	adds	r0, r4, #0
 80002f2:	f000 fd67 	bl	8000dc4 <__aeabi_f2iz>
 80002f6:	bd10      	pop	{r4, pc}
 80002f8:	219e      	movs	r1, #158	; 0x9e
 80002fa:	1c20      	adds	r0, r4, #0
 80002fc:	05c9      	lsls	r1, r1, #23
 80002fe:	f000 fbc1 	bl	8000a84 <__aeabi_fsub>
 8000302:	f000 fd5f 	bl	8000dc4 <__aeabi_f2iz>
 8000306:	2380      	movs	r3, #128	; 0x80
 8000308:	061b      	lsls	r3, r3, #24
 800030a:	469c      	mov	ip, r3
 800030c:	4460      	add	r0, ip
 800030e:	e7f2      	b.n	80002f6 <__aeabi_f2uiz+0x16>

08000310 <__udivmoddi4>:
 8000310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000312:	4657      	mov	r7, sl
 8000314:	464e      	mov	r6, r9
 8000316:	4645      	mov	r5, r8
 8000318:	46de      	mov	lr, fp
 800031a:	b5e0      	push	{r5, r6, r7, lr}
 800031c:	0004      	movs	r4, r0
 800031e:	000d      	movs	r5, r1
 8000320:	4692      	mov	sl, r2
 8000322:	4699      	mov	r9, r3
 8000324:	b083      	sub	sp, #12
 8000326:	428b      	cmp	r3, r1
 8000328:	d830      	bhi.n	800038c <__udivmoddi4+0x7c>
 800032a:	d02d      	beq.n	8000388 <__udivmoddi4+0x78>
 800032c:	4649      	mov	r1, r9
 800032e:	4650      	mov	r0, sl
 8000330:	f002 fbea 	bl	8002b08 <__clzdi2>
 8000334:	0029      	movs	r1, r5
 8000336:	0006      	movs	r6, r0
 8000338:	0020      	movs	r0, r4
 800033a:	f002 fbe5 	bl	8002b08 <__clzdi2>
 800033e:	1a33      	subs	r3, r6, r0
 8000340:	4698      	mov	r8, r3
 8000342:	3b20      	subs	r3, #32
 8000344:	d434      	bmi.n	80003b0 <__udivmoddi4+0xa0>
 8000346:	469b      	mov	fp, r3
 8000348:	4653      	mov	r3, sl
 800034a:	465a      	mov	r2, fp
 800034c:	4093      	lsls	r3, r2
 800034e:	4642      	mov	r2, r8
 8000350:	001f      	movs	r7, r3
 8000352:	4653      	mov	r3, sl
 8000354:	4093      	lsls	r3, r2
 8000356:	001e      	movs	r6, r3
 8000358:	42af      	cmp	r7, r5
 800035a:	d83b      	bhi.n	80003d4 <__udivmoddi4+0xc4>
 800035c:	42af      	cmp	r7, r5
 800035e:	d100      	bne.n	8000362 <__udivmoddi4+0x52>
 8000360:	e079      	b.n	8000456 <__udivmoddi4+0x146>
 8000362:	465b      	mov	r3, fp
 8000364:	1ba4      	subs	r4, r4, r6
 8000366:	41bd      	sbcs	r5, r7
 8000368:	2b00      	cmp	r3, #0
 800036a:	da00      	bge.n	800036e <__udivmoddi4+0x5e>
 800036c:	e076      	b.n	800045c <__udivmoddi4+0x14c>
 800036e:	2200      	movs	r2, #0
 8000370:	2300      	movs	r3, #0
 8000372:	9200      	str	r2, [sp, #0]
 8000374:	9301      	str	r3, [sp, #4]
 8000376:	2301      	movs	r3, #1
 8000378:	465a      	mov	r2, fp
 800037a:	4093      	lsls	r3, r2
 800037c:	9301      	str	r3, [sp, #4]
 800037e:	2301      	movs	r3, #1
 8000380:	4642      	mov	r2, r8
 8000382:	4093      	lsls	r3, r2
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	e029      	b.n	80003dc <__udivmoddi4+0xcc>
 8000388:	4282      	cmp	r2, r0
 800038a:	d9cf      	bls.n	800032c <__udivmoddi4+0x1c>
 800038c:	2200      	movs	r2, #0
 800038e:	2300      	movs	r3, #0
 8000390:	9200      	str	r2, [sp, #0]
 8000392:	9301      	str	r3, [sp, #4]
 8000394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <__udivmoddi4+0x8e>
 800039a:	601c      	str	r4, [r3, #0]
 800039c:	605d      	str	r5, [r3, #4]
 800039e:	9800      	ldr	r0, [sp, #0]
 80003a0:	9901      	ldr	r1, [sp, #4]
 80003a2:	b003      	add	sp, #12
 80003a4:	bcf0      	pop	{r4, r5, r6, r7}
 80003a6:	46bb      	mov	fp, r7
 80003a8:	46b2      	mov	sl, r6
 80003aa:	46a9      	mov	r9, r5
 80003ac:	46a0      	mov	r8, r4
 80003ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b0:	4642      	mov	r2, r8
 80003b2:	469b      	mov	fp, r3
 80003b4:	2320      	movs	r3, #32
 80003b6:	1a9b      	subs	r3, r3, r2
 80003b8:	4652      	mov	r2, sl
 80003ba:	40da      	lsrs	r2, r3
 80003bc:	4641      	mov	r1, r8
 80003be:	0013      	movs	r3, r2
 80003c0:	464a      	mov	r2, r9
 80003c2:	408a      	lsls	r2, r1
 80003c4:	0017      	movs	r7, r2
 80003c6:	4642      	mov	r2, r8
 80003c8:	431f      	orrs	r7, r3
 80003ca:	4653      	mov	r3, sl
 80003cc:	4093      	lsls	r3, r2
 80003ce:	001e      	movs	r6, r3
 80003d0:	42af      	cmp	r7, r5
 80003d2:	d9c3      	bls.n	800035c <__udivmoddi4+0x4c>
 80003d4:	2200      	movs	r2, #0
 80003d6:	2300      	movs	r3, #0
 80003d8:	9200      	str	r2, [sp, #0]
 80003da:	9301      	str	r3, [sp, #4]
 80003dc:	4643      	mov	r3, r8
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d0d8      	beq.n	8000394 <__udivmoddi4+0x84>
 80003e2:	07fb      	lsls	r3, r7, #31
 80003e4:	0872      	lsrs	r2, r6, #1
 80003e6:	431a      	orrs	r2, r3
 80003e8:	4646      	mov	r6, r8
 80003ea:	087b      	lsrs	r3, r7, #1
 80003ec:	e00e      	b.n	800040c <__udivmoddi4+0xfc>
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d101      	bne.n	80003f6 <__udivmoddi4+0xe6>
 80003f2:	42a2      	cmp	r2, r4
 80003f4:	d80c      	bhi.n	8000410 <__udivmoddi4+0x100>
 80003f6:	1aa4      	subs	r4, r4, r2
 80003f8:	419d      	sbcs	r5, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	1924      	adds	r4, r4, r4
 80003fe:	416d      	adcs	r5, r5
 8000400:	2100      	movs	r1, #0
 8000402:	3e01      	subs	r6, #1
 8000404:	1824      	adds	r4, r4, r0
 8000406:	414d      	adcs	r5, r1
 8000408:	2e00      	cmp	r6, #0
 800040a:	d006      	beq.n	800041a <__udivmoddi4+0x10a>
 800040c:	42ab      	cmp	r3, r5
 800040e:	d9ee      	bls.n	80003ee <__udivmoddi4+0xde>
 8000410:	3e01      	subs	r6, #1
 8000412:	1924      	adds	r4, r4, r4
 8000414:	416d      	adcs	r5, r5
 8000416:	2e00      	cmp	r6, #0
 8000418:	d1f8      	bne.n	800040c <__udivmoddi4+0xfc>
 800041a:	9800      	ldr	r0, [sp, #0]
 800041c:	9901      	ldr	r1, [sp, #4]
 800041e:	465b      	mov	r3, fp
 8000420:	1900      	adds	r0, r0, r4
 8000422:	4169      	adcs	r1, r5
 8000424:	2b00      	cmp	r3, #0
 8000426:	db24      	blt.n	8000472 <__udivmoddi4+0x162>
 8000428:	002b      	movs	r3, r5
 800042a:	465a      	mov	r2, fp
 800042c:	4644      	mov	r4, r8
 800042e:	40d3      	lsrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	db2a      	blt.n	8000494 <__udivmoddi4+0x184>
 800043e:	0026      	movs	r6, r4
 8000440:	409e      	lsls	r6, r3
 8000442:	0033      	movs	r3, r6
 8000444:	0026      	movs	r6, r4
 8000446:	4647      	mov	r7, r8
 8000448:	40be      	lsls	r6, r7
 800044a:	0032      	movs	r2, r6
 800044c:	1a80      	subs	r0, r0, r2
 800044e:	4199      	sbcs	r1, r3
 8000450:	9000      	str	r0, [sp, #0]
 8000452:	9101      	str	r1, [sp, #4]
 8000454:	e79e      	b.n	8000394 <__udivmoddi4+0x84>
 8000456:	42a3      	cmp	r3, r4
 8000458:	d8bc      	bhi.n	80003d4 <__udivmoddi4+0xc4>
 800045a:	e782      	b.n	8000362 <__udivmoddi4+0x52>
 800045c:	4642      	mov	r2, r8
 800045e:	2320      	movs	r3, #32
 8000460:	2100      	movs	r1, #0
 8000462:	1a9b      	subs	r3, r3, r2
 8000464:	2200      	movs	r2, #0
 8000466:	9100      	str	r1, [sp, #0]
 8000468:	9201      	str	r2, [sp, #4]
 800046a:	2201      	movs	r2, #1
 800046c:	40da      	lsrs	r2, r3
 800046e:	9201      	str	r2, [sp, #4]
 8000470:	e785      	b.n	800037e <__udivmoddi4+0x6e>
 8000472:	4642      	mov	r2, r8
 8000474:	2320      	movs	r3, #32
 8000476:	1a9b      	subs	r3, r3, r2
 8000478:	002a      	movs	r2, r5
 800047a:	4646      	mov	r6, r8
 800047c:	409a      	lsls	r2, r3
 800047e:	0023      	movs	r3, r4
 8000480:	40f3      	lsrs	r3, r6
 8000482:	4644      	mov	r4, r8
 8000484:	4313      	orrs	r3, r2
 8000486:	002a      	movs	r2, r5
 8000488:	40e2      	lsrs	r2, r4
 800048a:	001c      	movs	r4, r3
 800048c:	465b      	mov	r3, fp
 800048e:	0015      	movs	r5, r2
 8000490:	2b00      	cmp	r3, #0
 8000492:	dad4      	bge.n	800043e <__udivmoddi4+0x12e>
 8000494:	4642      	mov	r2, r8
 8000496:	002f      	movs	r7, r5
 8000498:	2320      	movs	r3, #32
 800049a:	0026      	movs	r6, r4
 800049c:	4097      	lsls	r7, r2
 800049e:	1a9b      	subs	r3, r3, r2
 80004a0:	40de      	lsrs	r6, r3
 80004a2:	003b      	movs	r3, r7
 80004a4:	4333      	orrs	r3, r6
 80004a6:	e7cd      	b.n	8000444 <__udivmoddi4+0x134>

080004a8 <__aeabi_fadd>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	4647      	mov	r7, r8
 80004ac:	46ce      	mov	lr, r9
 80004ae:	024a      	lsls	r2, r1, #9
 80004b0:	0243      	lsls	r3, r0, #9
 80004b2:	0045      	lsls	r5, r0, #1
 80004b4:	0fc4      	lsrs	r4, r0, #31
 80004b6:	0a50      	lsrs	r0, r2, #9
 80004b8:	4680      	mov	r8, r0
 80004ba:	0048      	lsls	r0, r1, #1
 80004bc:	0a5b      	lsrs	r3, r3, #9
 80004be:	0e00      	lsrs	r0, r0, #24
 80004c0:	0992      	lsrs	r2, r2, #6
 80004c2:	4694      	mov	ip, r2
 80004c4:	b580      	push	{r7, lr}
 80004c6:	001e      	movs	r6, r3
 80004c8:	4681      	mov	r9, r0
 80004ca:	0002      	movs	r2, r0
 80004cc:	0e2d      	lsrs	r5, r5, #24
 80004ce:	00df      	lsls	r7, r3, #3
 80004d0:	0fc9      	lsrs	r1, r1, #31
 80004d2:	428c      	cmp	r4, r1
 80004d4:	d024      	beq.n	8000520 <__aeabi_fadd+0x78>
 80004d6:	1a28      	subs	r0, r5, r0
 80004d8:	2800      	cmp	r0, #0
 80004da:	dd0e      	ble.n	80004fa <__aeabi_fadd+0x52>
 80004dc:	2a00      	cmp	r2, #0
 80004de:	d13e      	bne.n	800055e <__aeabi_fadd+0xb6>
 80004e0:	4662      	mov	r2, ip
 80004e2:	2a00      	cmp	r2, #0
 80004e4:	d100      	bne.n	80004e8 <__aeabi_fadd+0x40>
 80004e6:	e0fd      	b.n	80006e4 <__aeabi_fadd+0x23c>
 80004e8:	1e42      	subs	r2, r0, #1
 80004ea:	2801      	cmp	r0, #1
 80004ec:	d100      	bne.n	80004f0 <__aeabi_fadd+0x48>
 80004ee:	e137      	b.n	8000760 <__aeabi_fadd+0x2b8>
 80004f0:	28ff      	cmp	r0, #255	; 0xff
 80004f2:	d100      	bne.n	80004f6 <__aeabi_fadd+0x4e>
 80004f4:	e0a9      	b.n	800064a <__aeabi_fadd+0x1a2>
 80004f6:	0010      	movs	r0, r2
 80004f8:	e039      	b.n	800056e <__aeabi_fadd+0xc6>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	d063      	beq.n	80005c6 <__aeabi_fadd+0x11e>
 80004fe:	464b      	mov	r3, r9
 8000500:	1b52      	subs	r2, r2, r5
 8000502:	2d00      	cmp	r5, #0
 8000504:	d000      	beq.n	8000508 <__aeabi_fadd+0x60>
 8000506:	e0e0      	b.n	80006ca <__aeabi_fadd+0x222>
 8000508:	2f00      	cmp	r7, #0
 800050a:	d100      	bne.n	800050e <__aeabi_fadd+0x66>
 800050c:	e0ce      	b.n	80006ac <__aeabi_fadd+0x204>
 800050e:	1e53      	subs	r3, r2, #1
 8000510:	2a01      	cmp	r2, #1
 8000512:	d100      	bne.n	8000516 <__aeabi_fadd+0x6e>
 8000514:	e155      	b.n	80007c2 <__aeabi_fadd+0x31a>
 8000516:	2aff      	cmp	r2, #255	; 0xff
 8000518:	d100      	bne.n	800051c <__aeabi_fadd+0x74>
 800051a:	e094      	b.n	8000646 <__aeabi_fadd+0x19e>
 800051c:	001a      	movs	r2, r3
 800051e:	e0d9      	b.n	80006d4 <__aeabi_fadd+0x22c>
 8000520:	1a2a      	subs	r2, r5, r0
 8000522:	2a00      	cmp	r2, #0
 8000524:	dc00      	bgt.n	8000528 <__aeabi_fadd+0x80>
 8000526:	e099      	b.n	800065c <__aeabi_fadd+0x1b4>
 8000528:	2800      	cmp	r0, #0
 800052a:	d062      	beq.n	80005f2 <__aeabi_fadd+0x14a>
 800052c:	2dff      	cmp	r5, #255	; 0xff
 800052e:	d100      	bne.n	8000532 <__aeabi_fadd+0x8a>
 8000530:	e08b      	b.n	800064a <__aeabi_fadd+0x1a2>
 8000532:	2380      	movs	r3, #128	; 0x80
 8000534:	4661      	mov	r1, ip
 8000536:	04db      	lsls	r3, r3, #19
 8000538:	4319      	orrs	r1, r3
 800053a:	468c      	mov	ip, r1
 800053c:	2a1b      	cmp	r2, #27
 800053e:	dc00      	bgt.n	8000542 <__aeabi_fadd+0x9a>
 8000540:	e0d2      	b.n	80006e8 <__aeabi_fadd+0x240>
 8000542:	2301      	movs	r3, #1
 8000544:	19db      	adds	r3, r3, r7
 8000546:	015a      	lsls	r2, r3, #5
 8000548:	d56a      	bpl.n	8000620 <__aeabi_fadd+0x178>
 800054a:	3501      	adds	r5, #1
 800054c:	2dff      	cmp	r5, #255	; 0xff
 800054e:	d05b      	beq.n	8000608 <__aeabi_fadd+0x160>
 8000550:	2201      	movs	r2, #1
 8000552:	49a3      	ldr	r1, [pc, #652]	; (80007e0 <__aeabi_fadd+0x338>)
 8000554:	401a      	ands	r2, r3
 8000556:	085b      	lsrs	r3, r3, #1
 8000558:	400b      	ands	r3, r1
 800055a:	4313      	orrs	r3, r2
 800055c:	e01c      	b.n	8000598 <__aeabi_fadd+0xf0>
 800055e:	2dff      	cmp	r5, #255	; 0xff
 8000560:	d100      	bne.n	8000564 <__aeabi_fadd+0xbc>
 8000562:	e072      	b.n	800064a <__aeabi_fadd+0x1a2>
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	4662      	mov	r2, ip
 8000568:	04db      	lsls	r3, r3, #19
 800056a:	431a      	orrs	r2, r3
 800056c:	4694      	mov	ip, r2
 800056e:	281b      	cmp	r0, #27
 8000570:	dc00      	bgt.n	8000574 <__aeabi_fadd+0xcc>
 8000572:	e090      	b.n	8000696 <__aeabi_fadd+0x1ee>
 8000574:	2301      	movs	r3, #1
 8000576:	1afb      	subs	r3, r7, r3
 8000578:	015a      	lsls	r2, r3, #5
 800057a:	d551      	bpl.n	8000620 <__aeabi_fadd+0x178>
 800057c:	019b      	lsls	r3, r3, #6
 800057e:	099e      	lsrs	r6, r3, #6
 8000580:	0030      	movs	r0, r6
 8000582:	f002 faa3 	bl	8002acc <__clzsi2>
 8000586:	0033      	movs	r3, r6
 8000588:	3805      	subs	r0, #5
 800058a:	4083      	lsls	r3, r0
 800058c:	4285      	cmp	r5, r0
 800058e:	dc00      	bgt.n	8000592 <__aeabi_fadd+0xea>
 8000590:	e075      	b.n	800067e <__aeabi_fadd+0x1d6>
 8000592:	4a94      	ldr	r2, [pc, #592]	; (80007e4 <__aeabi_fadd+0x33c>)
 8000594:	1a2d      	subs	r5, r5, r0
 8000596:	4013      	ands	r3, r2
 8000598:	075a      	lsls	r2, r3, #29
 800059a:	d004      	beq.n	80005a6 <__aeabi_fadd+0xfe>
 800059c:	220f      	movs	r2, #15
 800059e:	401a      	ands	r2, r3
 80005a0:	2a04      	cmp	r2, #4
 80005a2:	d000      	beq.n	80005a6 <__aeabi_fadd+0xfe>
 80005a4:	3304      	adds	r3, #4
 80005a6:	015a      	lsls	r2, r3, #5
 80005a8:	d53c      	bpl.n	8000624 <__aeabi_fadd+0x17c>
 80005aa:	1c68      	adds	r0, r5, #1
 80005ac:	2dfe      	cmp	r5, #254	; 0xfe
 80005ae:	d02b      	beq.n	8000608 <__aeabi_fadd+0x160>
 80005b0:	019b      	lsls	r3, r3, #6
 80005b2:	0a5e      	lsrs	r6, r3, #9
 80005b4:	b2c0      	uxtb	r0, r0
 80005b6:	05c0      	lsls	r0, r0, #23
 80005b8:	4330      	orrs	r0, r6
 80005ba:	07e4      	lsls	r4, r4, #31
 80005bc:	4320      	orrs	r0, r4
 80005be:	bcc0      	pop	{r6, r7}
 80005c0:	46b9      	mov	r9, r7
 80005c2:	46b0      	mov	r8, r6
 80005c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005c6:	20fe      	movs	r0, #254	; 0xfe
 80005c8:	1c6a      	adds	r2, r5, #1
 80005ca:	4210      	tst	r0, r2
 80005cc:	d172      	bne.n	80006b4 <__aeabi_fadd+0x20c>
 80005ce:	2d00      	cmp	r5, #0
 80005d0:	d000      	beq.n	80005d4 <__aeabi_fadd+0x12c>
 80005d2:	e0ae      	b.n	8000732 <__aeabi_fadd+0x28a>
 80005d4:	2f00      	cmp	r7, #0
 80005d6:	d100      	bne.n	80005da <__aeabi_fadd+0x132>
 80005d8:	e0ec      	b.n	80007b4 <__aeabi_fadd+0x30c>
 80005da:	4663      	mov	r3, ip
 80005dc:	2000      	movs	r0, #0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0e9      	beq.n	80005b6 <__aeabi_fadd+0x10e>
 80005e2:	1afb      	subs	r3, r7, r3
 80005e4:	015a      	lsls	r2, r3, #5
 80005e6:	d400      	bmi.n	80005ea <__aeabi_fadd+0x142>
 80005e8:	e0f3      	b.n	80007d2 <__aeabi_fadd+0x32a>
 80005ea:	4663      	mov	r3, ip
 80005ec:	000c      	movs	r4, r1
 80005ee:	1bdb      	subs	r3, r3, r7
 80005f0:	e7d2      	b.n	8000598 <__aeabi_fadd+0xf0>
 80005f2:	4661      	mov	r1, ip
 80005f4:	2900      	cmp	r1, #0
 80005f6:	d05b      	beq.n	80006b0 <__aeabi_fadd+0x208>
 80005f8:	1e51      	subs	r1, r2, #1
 80005fa:	2a01      	cmp	r2, #1
 80005fc:	d100      	bne.n	8000600 <__aeabi_fadd+0x158>
 80005fe:	e0a7      	b.n	8000750 <__aeabi_fadd+0x2a8>
 8000600:	2aff      	cmp	r2, #255	; 0xff
 8000602:	d022      	beq.n	800064a <__aeabi_fadd+0x1a2>
 8000604:	000a      	movs	r2, r1
 8000606:	e799      	b.n	800053c <__aeabi_fadd+0x94>
 8000608:	20ff      	movs	r0, #255	; 0xff
 800060a:	2600      	movs	r6, #0
 800060c:	e7d3      	b.n	80005b6 <__aeabi_fadd+0x10e>
 800060e:	21fe      	movs	r1, #254	; 0xfe
 8000610:	1c6a      	adds	r2, r5, #1
 8000612:	4211      	tst	r1, r2
 8000614:	d073      	beq.n	80006fe <__aeabi_fadd+0x256>
 8000616:	2aff      	cmp	r2, #255	; 0xff
 8000618:	d0f6      	beq.n	8000608 <__aeabi_fadd+0x160>
 800061a:	0015      	movs	r5, r2
 800061c:	4467      	add	r7, ip
 800061e:	087b      	lsrs	r3, r7, #1
 8000620:	075a      	lsls	r2, r3, #29
 8000622:	d1bb      	bne.n	800059c <__aeabi_fadd+0xf4>
 8000624:	08db      	lsrs	r3, r3, #3
 8000626:	2dff      	cmp	r5, #255	; 0xff
 8000628:	d00f      	beq.n	800064a <__aeabi_fadd+0x1a2>
 800062a:	025b      	lsls	r3, r3, #9
 800062c:	0a5e      	lsrs	r6, r3, #9
 800062e:	b2e8      	uxtb	r0, r5
 8000630:	e7c1      	b.n	80005b6 <__aeabi_fadd+0x10e>
 8000632:	4662      	mov	r2, ip
 8000634:	2a00      	cmp	r2, #0
 8000636:	d008      	beq.n	800064a <__aeabi_fadd+0x1a2>
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	03d2      	lsls	r2, r2, #15
 800063c:	4213      	tst	r3, r2
 800063e:	d004      	beq.n	800064a <__aeabi_fadd+0x1a2>
 8000640:	4640      	mov	r0, r8
 8000642:	4210      	tst	r0, r2
 8000644:	d101      	bne.n	800064a <__aeabi_fadd+0x1a2>
 8000646:	000c      	movs	r4, r1
 8000648:	4643      	mov	r3, r8
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0dc      	beq.n	8000608 <__aeabi_fadd+0x160>
 800064e:	2680      	movs	r6, #128	; 0x80
 8000650:	03f6      	lsls	r6, r6, #15
 8000652:	431e      	orrs	r6, r3
 8000654:	0276      	lsls	r6, r6, #9
 8000656:	20ff      	movs	r0, #255	; 0xff
 8000658:	0a76      	lsrs	r6, r6, #9
 800065a:	e7ac      	b.n	80005b6 <__aeabi_fadd+0x10e>
 800065c:	2a00      	cmp	r2, #0
 800065e:	d0d6      	beq.n	800060e <__aeabi_fadd+0x166>
 8000660:	1b42      	subs	r2, r0, r5
 8000662:	2d00      	cmp	r5, #0
 8000664:	d05c      	beq.n	8000720 <__aeabi_fadd+0x278>
 8000666:	28ff      	cmp	r0, #255	; 0xff
 8000668:	d0ee      	beq.n	8000648 <__aeabi_fadd+0x1a0>
 800066a:	2380      	movs	r3, #128	; 0x80
 800066c:	04db      	lsls	r3, r3, #19
 800066e:	431f      	orrs	r7, r3
 8000670:	2a1b      	cmp	r2, #27
 8000672:	dc00      	bgt.n	8000676 <__aeabi_fadd+0x1ce>
 8000674:	e082      	b.n	800077c <__aeabi_fadd+0x2d4>
 8000676:	2301      	movs	r3, #1
 8000678:	464d      	mov	r5, r9
 800067a:	4463      	add	r3, ip
 800067c:	e763      	b.n	8000546 <__aeabi_fadd+0x9e>
 800067e:	2220      	movs	r2, #32
 8000680:	1b40      	subs	r0, r0, r5
 8000682:	3001      	adds	r0, #1
 8000684:	1a12      	subs	r2, r2, r0
 8000686:	0019      	movs	r1, r3
 8000688:	4093      	lsls	r3, r2
 800068a:	40c1      	lsrs	r1, r0
 800068c:	1e5a      	subs	r2, r3, #1
 800068e:	4193      	sbcs	r3, r2
 8000690:	2500      	movs	r5, #0
 8000692:	430b      	orrs	r3, r1
 8000694:	e780      	b.n	8000598 <__aeabi_fadd+0xf0>
 8000696:	2320      	movs	r3, #32
 8000698:	4661      	mov	r1, ip
 800069a:	1a1b      	subs	r3, r3, r0
 800069c:	4099      	lsls	r1, r3
 800069e:	4662      	mov	r2, ip
 80006a0:	000b      	movs	r3, r1
 80006a2:	40c2      	lsrs	r2, r0
 80006a4:	1e59      	subs	r1, r3, #1
 80006a6:	418b      	sbcs	r3, r1
 80006a8:	4313      	orrs	r3, r2
 80006aa:	e764      	b.n	8000576 <__aeabi_fadd+0xce>
 80006ac:	000c      	movs	r4, r1
 80006ae:	4643      	mov	r3, r8
 80006b0:	0015      	movs	r5, r2
 80006b2:	e7b8      	b.n	8000626 <__aeabi_fadd+0x17e>
 80006b4:	4663      	mov	r3, ip
 80006b6:	1afe      	subs	r6, r7, r3
 80006b8:	0173      	lsls	r3, r6, #5
 80006ba:	d445      	bmi.n	8000748 <__aeabi_fadd+0x2a0>
 80006bc:	2e00      	cmp	r6, #0
 80006be:	d000      	beq.n	80006c2 <__aeabi_fadd+0x21a>
 80006c0:	e75e      	b.n	8000580 <__aeabi_fadd+0xd8>
 80006c2:	2400      	movs	r4, #0
 80006c4:	2000      	movs	r0, #0
 80006c6:	2600      	movs	r6, #0
 80006c8:	e775      	b.n	80005b6 <__aeabi_fadd+0x10e>
 80006ca:	2bff      	cmp	r3, #255	; 0xff
 80006cc:	d0bb      	beq.n	8000646 <__aeabi_fadd+0x19e>
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	04db      	lsls	r3, r3, #19
 80006d2:	431f      	orrs	r7, r3
 80006d4:	2a1b      	cmp	r2, #27
 80006d6:	dd47      	ble.n	8000768 <__aeabi_fadd+0x2c0>
 80006d8:	2301      	movs	r3, #1
 80006da:	4662      	mov	r2, ip
 80006dc:	000c      	movs	r4, r1
 80006de:	464d      	mov	r5, r9
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	e749      	b.n	8000578 <__aeabi_fadd+0xd0>
 80006e4:	0005      	movs	r5, r0
 80006e6:	e79e      	b.n	8000626 <__aeabi_fadd+0x17e>
 80006e8:	4661      	mov	r1, ip
 80006ea:	2320      	movs	r3, #32
 80006ec:	40d1      	lsrs	r1, r2
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	4662      	mov	r2, ip
 80006f2:	409a      	lsls	r2, r3
 80006f4:	0013      	movs	r3, r2
 80006f6:	1e5a      	subs	r2, r3, #1
 80006f8:	4193      	sbcs	r3, r2
 80006fa:	430b      	orrs	r3, r1
 80006fc:	e722      	b.n	8000544 <__aeabi_fadd+0x9c>
 80006fe:	2d00      	cmp	r5, #0
 8000700:	d146      	bne.n	8000790 <__aeabi_fadd+0x2e8>
 8000702:	2f00      	cmp	r7, #0
 8000704:	d062      	beq.n	80007cc <__aeabi_fadd+0x324>
 8000706:	4663      	mov	r3, ip
 8000708:	2000      	movs	r0, #0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d100      	bne.n	8000710 <__aeabi_fadd+0x268>
 800070e:	e752      	b.n	80005b6 <__aeabi_fadd+0x10e>
 8000710:	003b      	movs	r3, r7
 8000712:	4463      	add	r3, ip
 8000714:	015a      	lsls	r2, r3, #5
 8000716:	d583      	bpl.n	8000620 <__aeabi_fadd+0x178>
 8000718:	4a32      	ldr	r2, [pc, #200]	; (80007e4 <__aeabi_fadd+0x33c>)
 800071a:	3501      	adds	r5, #1
 800071c:	4013      	ands	r3, r2
 800071e:	e77f      	b.n	8000620 <__aeabi_fadd+0x178>
 8000720:	2f00      	cmp	r7, #0
 8000722:	d0c4      	beq.n	80006ae <__aeabi_fadd+0x206>
 8000724:	1e53      	subs	r3, r2, #1
 8000726:	2a01      	cmp	r2, #1
 8000728:	d012      	beq.n	8000750 <__aeabi_fadd+0x2a8>
 800072a:	2aff      	cmp	r2, #255	; 0xff
 800072c:	d08c      	beq.n	8000648 <__aeabi_fadd+0x1a0>
 800072e:	001a      	movs	r2, r3
 8000730:	e79e      	b.n	8000670 <__aeabi_fadd+0x1c8>
 8000732:	2f00      	cmp	r7, #0
 8000734:	d000      	beq.n	8000738 <__aeabi_fadd+0x290>
 8000736:	e77c      	b.n	8000632 <__aeabi_fadd+0x18a>
 8000738:	4663      	mov	r3, ip
 800073a:	2b00      	cmp	r3, #0
 800073c:	d183      	bne.n	8000646 <__aeabi_fadd+0x19e>
 800073e:	2680      	movs	r6, #128	; 0x80
 8000740:	2400      	movs	r4, #0
 8000742:	20ff      	movs	r0, #255	; 0xff
 8000744:	03f6      	lsls	r6, r6, #15
 8000746:	e736      	b.n	80005b6 <__aeabi_fadd+0x10e>
 8000748:	4663      	mov	r3, ip
 800074a:	000c      	movs	r4, r1
 800074c:	1bde      	subs	r6, r3, r7
 800074e:	e717      	b.n	8000580 <__aeabi_fadd+0xd8>
 8000750:	003b      	movs	r3, r7
 8000752:	4463      	add	r3, ip
 8000754:	2501      	movs	r5, #1
 8000756:	015a      	lsls	r2, r3, #5
 8000758:	d400      	bmi.n	800075c <__aeabi_fadd+0x2b4>
 800075a:	e761      	b.n	8000620 <__aeabi_fadd+0x178>
 800075c:	2502      	movs	r5, #2
 800075e:	e6f7      	b.n	8000550 <__aeabi_fadd+0xa8>
 8000760:	4663      	mov	r3, ip
 8000762:	2501      	movs	r5, #1
 8000764:	1afb      	subs	r3, r7, r3
 8000766:	e707      	b.n	8000578 <__aeabi_fadd+0xd0>
 8000768:	2320      	movs	r3, #32
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	0038      	movs	r0, r7
 800076e:	409f      	lsls	r7, r3
 8000770:	003b      	movs	r3, r7
 8000772:	40d0      	lsrs	r0, r2
 8000774:	1e5a      	subs	r2, r3, #1
 8000776:	4193      	sbcs	r3, r2
 8000778:	4303      	orrs	r3, r0
 800077a:	e7ae      	b.n	80006da <__aeabi_fadd+0x232>
 800077c:	2320      	movs	r3, #32
 800077e:	1a9b      	subs	r3, r3, r2
 8000780:	0039      	movs	r1, r7
 8000782:	409f      	lsls	r7, r3
 8000784:	003b      	movs	r3, r7
 8000786:	40d1      	lsrs	r1, r2
 8000788:	1e5a      	subs	r2, r3, #1
 800078a:	4193      	sbcs	r3, r2
 800078c:	430b      	orrs	r3, r1
 800078e:	e773      	b.n	8000678 <__aeabi_fadd+0x1d0>
 8000790:	2f00      	cmp	r7, #0
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x2ee>
 8000794:	e758      	b.n	8000648 <__aeabi_fadd+0x1a0>
 8000796:	4662      	mov	r2, ip
 8000798:	2a00      	cmp	r2, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0x2f6>
 800079c:	e755      	b.n	800064a <__aeabi_fadd+0x1a2>
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	03d2      	lsls	r2, r2, #15
 80007a2:	4213      	tst	r3, r2
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fadd+0x300>
 80007a6:	e750      	b.n	800064a <__aeabi_fadd+0x1a2>
 80007a8:	4641      	mov	r1, r8
 80007aa:	4211      	tst	r1, r2
 80007ac:	d000      	beq.n	80007b0 <__aeabi_fadd+0x308>
 80007ae:	e74c      	b.n	800064a <__aeabi_fadd+0x1a2>
 80007b0:	4643      	mov	r3, r8
 80007b2:	e74a      	b.n	800064a <__aeabi_fadd+0x1a2>
 80007b4:	4663      	mov	r3, ip
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d083      	beq.n	80006c2 <__aeabi_fadd+0x21a>
 80007ba:	000c      	movs	r4, r1
 80007bc:	4646      	mov	r6, r8
 80007be:	2000      	movs	r0, #0
 80007c0:	e6f9      	b.n	80005b6 <__aeabi_fadd+0x10e>
 80007c2:	4663      	mov	r3, ip
 80007c4:	000c      	movs	r4, r1
 80007c6:	1bdb      	subs	r3, r3, r7
 80007c8:	3501      	adds	r5, #1
 80007ca:	e6d5      	b.n	8000578 <__aeabi_fadd+0xd0>
 80007cc:	4646      	mov	r6, r8
 80007ce:	2000      	movs	r0, #0
 80007d0:	e6f1      	b.n	80005b6 <__aeabi_fadd+0x10e>
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d000      	beq.n	80007d8 <__aeabi_fadd+0x330>
 80007d6:	e723      	b.n	8000620 <__aeabi_fadd+0x178>
 80007d8:	2400      	movs	r4, #0
 80007da:	2600      	movs	r6, #0
 80007dc:	e6eb      	b.n	80005b6 <__aeabi_fadd+0x10e>
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	7dffffff 	.word	0x7dffffff
 80007e4:	fbffffff 	.word	0xfbffffff

080007e8 <__aeabi_fmul>:
 80007e8:	0243      	lsls	r3, r0, #9
 80007ea:	0a5b      	lsrs	r3, r3, #9
 80007ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ee:	464f      	mov	r7, r9
 80007f0:	4646      	mov	r6, r8
 80007f2:	4699      	mov	r9, r3
 80007f4:	46d6      	mov	lr, sl
 80007f6:	0fc3      	lsrs	r3, r0, #31
 80007f8:	0045      	lsls	r5, r0, #1
 80007fa:	4698      	mov	r8, r3
 80007fc:	b5c0      	push	{r6, r7, lr}
 80007fe:	464b      	mov	r3, r9
 8000800:	1c0f      	adds	r7, r1, #0
 8000802:	0e2d      	lsrs	r5, r5, #24
 8000804:	d100      	bne.n	8000808 <__aeabi_fmul+0x20>
 8000806:	e0cb      	b.n	80009a0 <__aeabi_fmul+0x1b8>
 8000808:	2dff      	cmp	r5, #255	; 0xff
 800080a:	d100      	bne.n	800080e <__aeabi_fmul+0x26>
 800080c:	e0cf      	b.n	80009ae <__aeabi_fmul+0x1c6>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	04d2      	lsls	r2, r2, #19
 8000814:	431a      	orrs	r2, r3
 8000816:	2300      	movs	r3, #0
 8000818:	4691      	mov	r9, r2
 800081a:	2600      	movs	r6, #0
 800081c:	469a      	mov	sl, r3
 800081e:	3d7f      	subs	r5, #127	; 0x7f
 8000820:	027c      	lsls	r4, r7, #9
 8000822:	007b      	lsls	r3, r7, #1
 8000824:	0a64      	lsrs	r4, r4, #9
 8000826:	0e1b      	lsrs	r3, r3, #24
 8000828:	0fff      	lsrs	r7, r7, #31
 800082a:	2b00      	cmp	r3, #0
 800082c:	d100      	bne.n	8000830 <__aeabi_fmul+0x48>
 800082e:	e0a9      	b.n	8000984 <__aeabi_fmul+0x19c>
 8000830:	2bff      	cmp	r3, #255	; 0xff
 8000832:	d011      	beq.n	8000858 <__aeabi_fmul+0x70>
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	00e4      	lsls	r4, r4, #3
 8000838:	04d2      	lsls	r2, r2, #19
 800083a:	4314      	orrs	r4, r2
 800083c:	4642      	mov	r2, r8
 800083e:	3b7f      	subs	r3, #127	; 0x7f
 8000840:	195b      	adds	r3, r3, r5
 8000842:	407a      	eors	r2, r7
 8000844:	2000      	movs	r0, #0
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	1c5d      	adds	r5, r3, #1
 800084a:	2e0a      	cmp	r6, #10
 800084c:	dd13      	ble.n	8000876 <__aeabi_fmul+0x8e>
 800084e:	003a      	movs	r2, r7
 8000850:	2e0b      	cmp	r6, #11
 8000852:	d047      	beq.n	80008e4 <__aeabi_fmul+0xfc>
 8000854:	4647      	mov	r7, r8
 8000856:	e03f      	b.n	80008d8 <__aeabi_fmul+0xf0>
 8000858:	002b      	movs	r3, r5
 800085a:	33ff      	adds	r3, #255	; 0xff
 800085c:	2c00      	cmp	r4, #0
 800085e:	d11e      	bne.n	800089e <__aeabi_fmul+0xb6>
 8000860:	2202      	movs	r2, #2
 8000862:	4316      	orrs	r6, r2
 8000864:	4642      	mov	r2, r8
 8000866:	3501      	adds	r5, #1
 8000868:	407a      	eors	r2, r7
 800086a:	b2d2      	uxtb	r2, r2
 800086c:	35ff      	adds	r5, #255	; 0xff
 800086e:	2e0a      	cmp	r6, #10
 8000870:	dd00      	ble.n	8000874 <__aeabi_fmul+0x8c>
 8000872:	e0e4      	b.n	8000a3e <__aeabi_fmul+0x256>
 8000874:	2002      	movs	r0, #2
 8000876:	2e02      	cmp	r6, #2
 8000878:	dc1c      	bgt.n	80008b4 <__aeabi_fmul+0xcc>
 800087a:	3e01      	subs	r6, #1
 800087c:	2e01      	cmp	r6, #1
 800087e:	d842      	bhi.n	8000906 <__aeabi_fmul+0x11e>
 8000880:	2802      	cmp	r0, #2
 8000882:	d03d      	beq.n	8000900 <__aeabi_fmul+0x118>
 8000884:	2801      	cmp	r0, #1
 8000886:	d166      	bne.n	8000956 <__aeabi_fmul+0x16e>
 8000888:	2000      	movs	r0, #0
 800088a:	2100      	movs	r1, #0
 800088c:	05c0      	lsls	r0, r0, #23
 800088e:	4308      	orrs	r0, r1
 8000890:	07d2      	lsls	r2, r2, #31
 8000892:	4310      	orrs	r0, r2
 8000894:	bce0      	pop	{r5, r6, r7}
 8000896:	46ba      	mov	sl, r7
 8000898:	46b1      	mov	r9, r6
 800089a:	46a8      	mov	r8, r5
 800089c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800089e:	2203      	movs	r2, #3
 80008a0:	4316      	orrs	r6, r2
 80008a2:	4642      	mov	r2, r8
 80008a4:	3501      	adds	r5, #1
 80008a6:	407a      	eors	r2, r7
 80008a8:	b2d2      	uxtb	r2, r2
 80008aa:	35ff      	adds	r5, #255	; 0xff
 80008ac:	2e0a      	cmp	r6, #10
 80008ae:	dd00      	ble.n	80008b2 <__aeabi_fmul+0xca>
 80008b0:	e0e4      	b.n	8000a7c <__aeabi_fmul+0x294>
 80008b2:	2003      	movs	r0, #3
 80008b4:	2101      	movs	r1, #1
 80008b6:	40b1      	lsls	r1, r6
 80008b8:	26a6      	movs	r6, #166	; 0xa6
 80008ba:	00f6      	lsls	r6, r6, #3
 80008bc:	4231      	tst	r1, r6
 80008be:	d10a      	bne.n	80008d6 <__aeabi_fmul+0xee>
 80008c0:	2690      	movs	r6, #144	; 0x90
 80008c2:	00b6      	lsls	r6, r6, #2
 80008c4:	4231      	tst	r1, r6
 80008c6:	d116      	bne.n	80008f6 <__aeabi_fmul+0x10e>
 80008c8:	3eb9      	subs	r6, #185	; 0xb9
 80008ca:	3eff      	subs	r6, #255	; 0xff
 80008cc:	420e      	tst	r6, r1
 80008ce:	d01a      	beq.n	8000906 <__aeabi_fmul+0x11e>
 80008d0:	46a1      	mov	r9, r4
 80008d2:	4682      	mov	sl, r0
 80008d4:	e000      	b.n	80008d8 <__aeabi_fmul+0xf0>
 80008d6:	0017      	movs	r7, r2
 80008d8:	4653      	mov	r3, sl
 80008da:	003a      	movs	r2, r7
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d00f      	beq.n	8000900 <__aeabi_fmul+0x118>
 80008e0:	464c      	mov	r4, r9
 80008e2:	4650      	mov	r0, sl
 80008e4:	2803      	cmp	r0, #3
 80008e6:	d1cd      	bne.n	8000884 <__aeabi_fmul+0x9c>
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	03c9      	lsls	r1, r1, #15
 80008ec:	4321      	orrs	r1, r4
 80008ee:	0249      	lsls	r1, r1, #9
 80008f0:	20ff      	movs	r0, #255	; 0xff
 80008f2:	0a49      	lsrs	r1, r1, #9
 80008f4:	e7ca      	b.n	800088c <__aeabi_fmul+0xa4>
 80008f6:	2180      	movs	r1, #128	; 0x80
 80008f8:	2200      	movs	r2, #0
 80008fa:	20ff      	movs	r0, #255	; 0xff
 80008fc:	03c9      	lsls	r1, r1, #15
 80008fe:	e7c5      	b.n	800088c <__aeabi_fmul+0xa4>
 8000900:	20ff      	movs	r0, #255	; 0xff
 8000902:	2100      	movs	r1, #0
 8000904:	e7c2      	b.n	800088c <__aeabi_fmul+0xa4>
 8000906:	0c20      	lsrs	r0, r4, #16
 8000908:	4649      	mov	r1, r9
 800090a:	0424      	lsls	r4, r4, #16
 800090c:	0c24      	lsrs	r4, r4, #16
 800090e:	0027      	movs	r7, r4
 8000910:	0c0e      	lsrs	r6, r1, #16
 8000912:	0409      	lsls	r1, r1, #16
 8000914:	0c09      	lsrs	r1, r1, #16
 8000916:	4374      	muls	r4, r6
 8000918:	434f      	muls	r7, r1
 800091a:	4346      	muls	r6, r0
 800091c:	4348      	muls	r0, r1
 800091e:	0c39      	lsrs	r1, r7, #16
 8000920:	1900      	adds	r0, r0, r4
 8000922:	1809      	adds	r1, r1, r0
 8000924:	428c      	cmp	r4, r1
 8000926:	d903      	bls.n	8000930 <__aeabi_fmul+0x148>
 8000928:	2080      	movs	r0, #128	; 0x80
 800092a:	0240      	lsls	r0, r0, #9
 800092c:	4684      	mov	ip, r0
 800092e:	4466      	add	r6, ip
 8000930:	043f      	lsls	r7, r7, #16
 8000932:	0408      	lsls	r0, r1, #16
 8000934:	0c3f      	lsrs	r7, r7, #16
 8000936:	19c0      	adds	r0, r0, r7
 8000938:	0184      	lsls	r4, r0, #6
 800093a:	1e67      	subs	r7, r4, #1
 800093c:	41bc      	sbcs	r4, r7
 800093e:	0c09      	lsrs	r1, r1, #16
 8000940:	0e80      	lsrs	r0, r0, #26
 8000942:	1989      	adds	r1, r1, r6
 8000944:	4304      	orrs	r4, r0
 8000946:	0189      	lsls	r1, r1, #6
 8000948:	430c      	orrs	r4, r1
 800094a:	0109      	lsls	r1, r1, #4
 800094c:	d571      	bpl.n	8000a32 <__aeabi_fmul+0x24a>
 800094e:	2301      	movs	r3, #1
 8000950:	0861      	lsrs	r1, r4, #1
 8000952:	401c      	ands	r4, r3
 8000954:	430c      	orrs	r4, r1
 8000956:	002b      	movs	r3, r5
 8000958:	337f      	adds	r3, #127	; 0x7f
 800095a:	2b00      	cmp	r3, #0
 800095c:	dd51      	ble.n	8000a02 <__aeabi_fmul+0x21a>
 800095e:	0761      	lsls	r1, r4, #29
 8000960:	d004      	beq.n	800096c <__aeabi_fmul+0x184>
 8000962:	210f      	movs	r1, #15
 8000964:	4021      	ands	r1, r4
 8000966:	2904      	cmp	r1, #4
 8000968:	d000      	beq.n	800096c <__aeabi_fmul+0x184>
 800096a:	3404      	adds	r4, #4
 800096c:	0121      	lsls	r1, r4, #4
 800096e:	d503      	bpl.n	8000978 <__aeabi_fmul+0x190>
 8000970:	4b43      	ldr	r3, [pc, #268]	; (8000a80 <__aeabi_fmul+0x298>)
 8000972:	401c      	ands	r4, r3
 8000974:	002b      	movs	r3, r5
 8000976:	3380      	adds	r3, #128	; 0x80
 8000978:	2bfe      	cmp	r3, #254	; 0xfe
 800097a:	dcc1      	bgt.n	8000900 <__aeabi_fmul+0x118>
 800097c:	01a1      	lsls	r1, r4, #6
 800097e:	0a49      	lsrs	r1, r1, #9
 8000980:	b2d8      	uxtb	r0, r3
 8000982:	e783      	b.n	800088c <__aeabi_fmul+0xa4>
 8000984:	2c00      	cmp	r4, #0
 8000986:	d12c      	bne.n	80009e2 <__aeabi_fmul+0x1fa>
 8000988:	2301      	movs	r3, #1
 800098a:	4642      	mov	r2, r8
 800098c:	431e      	orrs	r6, r3
 800098e:	002b      	movs	r3, r5
 8000990:	407a      	eors	r2, r7
 8000992:	2001      	movs	r0, #1
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	1c5d      	adds	r5, r3, #1
 8000998:	2e0a      	cmp	r6, #10
 800099a:	dd00      	ble.n	800099e <__aeabi_fmul+0x1b6>
 800099c:	e757      	b.n	800084e <__aeabi_fmul+0x66>
 800099e:	e76a      	b.n	8000876 <__aeabi_fmul+0x8e>
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d110      	bne.n	80009c6 <__aeabi_fmul+0x1de>
 80009a4:	2301      	movs	r3, #1
 80009a6:	2604      	movs	r6, #4
 80009a8:	2500      	movs	r5, #0
 80009aa:	469a      	mov	sl, r3
 80009ac:	e738      	b.n	8000820 <__aeabi_fmul+0x38>
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d104      	bne.n	80009bc <__aeabi_fmul+0x1d4>
 80009b2:	2302      	movs	r3, #2
 80009b4:	2608      	movs	r6, #8
 80009b6:	25ff      	movs	r5, #255	; 0xff
 80009b8:	469a      	mov	sl, r3
 80009ba:	e731      	b.n	8000820 <__aeabi_fmul+0x38>
 80009bc:	2303      	movs	r3, #3
 80009be:	260c      	movs	r6, #12
 80009c0:	25ff      	movs	r5, #255	; 0xff
 80009c2:	469a      	mov	sl, r3
 80009c4:	e72c      	b.n	8000820 <__aeabi_fmul+0x38>
 80009c6:	4648      	mov	r0, r9
 80009c8:	f002 f880 	bl	8002acc <__clzsi2>
 80009cc:	464a      	mov	r2, r9
 80009ce:	1f43      	subs	r3, r0, #5
 80009d0:	2576      	movs	r5, #118	; 0x76
 80009d2:	409a      	lsls	r2, r3
 80009d4:	2300      	movs	r3, #0
 80009d6:	426d      	negs	r5, r5
 80009d8:	4691      	mov	r9, r2
 80009da:	2600      	movs	r6, #0
 80009dc:	469a      	mov	sl, r3
 80009de:	1a2d      	subs	r5, r5, r0
 80009e0:	e71e      	b.n	8000820 <__aeabi_fmul+0x38>
 80009e2:	0020      	movs	r0, r4
 80009e4:	f002 f872 	bl	8002acc <__clzsi2>
 80009e8:	4642      	mov	r2, r8
 80009ea:	1f43      	subs	r3, r0, #5
 80009ec:	409c      	lsls	r4, r3
 80009ee:	1a2b      	subs	r3, r5, r0
 80009f0:	3b76      	subs	r3, #118	; 0x76
 80009f2:	407a      	eors	r2, r7
 80009f4:	2000      	movs	r0, #0
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	1c5d      	adds	r5, r3, #1
 80009fa:	2e0a      	cmp	r6, #10
 80009fc:	dd00      	ble.n	8000a00 <__aeabi_fmul+0x218>
 80009fe:	e726      	b.n	800084e <__aeabi_fmul+0x66>
 8000a00:	e739      	b.n	8000876 <__aeabi_fmul+0x8e>
 8000a02:	2101      	movs	r1, #1
 8000a04:	1acb      	subs	r3, r1, r3
 8000a06:	2b1b      	cmp	r3, #27
 8000a08:	dd00      	ble.n	8000a0c <__aeabi_fmul+0x224>
 8000a0a:	e73d      	b.n	8000888 <__aeabi_fmul+0xa0>
 8000a0c:	359e      	adds	r5, #158	; 0x9e
 8000a0e:	0021      	movs	r1, r4
 8000a10:	40ac      	lsls	r4, r5
 8000a12:	40d9      	lsrs	r1, r3
 8000a14:	1e63      	subs	r3, r4, #1
 8000a16:	419c      	sbcs	r4, r3
 8000a18:	4321      	orrs	r1, r4
 8000a1a:	074b      	lsls	r3, r1, #29
 8000a1c:	d004      	beq.n	8000a28 <__aeabi_fmul+0x240>
 8000a1e:	230f      	movs	r3, #15
 8000a20:	400b      	ands	r3, r1
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	d000      	beq.n	8000a28 <__aeabi_fmul+0x240>
 8000a26:	3104      	adds	r1, #4
 8000a28:	014b      	lsls	r3, r1, #5
 8000a2a:	d504      	bpl.n	8000a36 <__aeabi_fmul+0x24e>
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	2100      	movs	r1, #0
 8000a30:	e72c      	b.n	800088c <__aeabi_fmul+0xa4>
 8000a32:	001d      	movs	r5, r3
 8000a34:	e78f      	b.n	8000956 <__aeabi_fmul+0x16e>
 8000a36:	0189      	lsls	r1, r1, #6
 8000a38:	2000      	movs	r0, #0
 8000a3a:	0a49      	lsrs	r1, r1, #9
 8000a3c:	e726      	b.n	800088c <__aeabi_fmul+0xa4>
 8000a3e:	2302      	movs	r3, #2
 8000a40:	2e0f      	cmp	r6, #15
 8000a42:	d10c      	bne.n	8000a5e <__aeabi_fmul+0x276>
 8000a44:	2180      	movs	r1, #128	; 0x80
 8000a46:	464b      	mov	r3, r9
 8000a48:	03c9      	lsls	r1, r1, #15
 8000a4a:	420b      	tst	r3, r1
 8000a4c:	d00d      	beq.n	8000a6a <__aeabi_fmul+0x282>
 8000a4e:	420c      	tst	r4, r1
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_fmul+0x282>
 8000a52:	4321      	orrs	r1, r4
 8000a54:	0249      	lsls	r1, r1, #9
 8000a56:	003a      	movs	r2, r7
 8000a58:	20ff      	movs	r0, #255	; 0xff
 8000a5a:	0a49      	lsrs	r1, r1, #9
 8000a5c:	e716      	b.n	800088c <__aeabi_fmul+0xa4>
 8000a5e:	2e0b      	cmp	r6, #11
 8000a60:	d000      	beq.n	8000a64 <__aeabi_fmul+0x27c>
 8000a62:	e6f7      	b.n	8000854 <__aeabi_fmul+0x6c>
 8000a64:	46a1      	mov	r9, r4
 8000a66:	469a      	mov	sl, r3
 8000a68:	e736      	b.n	80008d8 <__aeabi_fmul+0xf0>
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	464b      	mov	r3, r9
 8000a6e:	03c9      	lsls	r1, r1, #15
 8000a70:	4319      	orrs	r1, r3
 8000a72:	0249      	lsls	r1, r1, #9
 8000a74:	4642      	mov	r2, r8
 8000a76:	20ff      	movs	r0, #255	; 0xff
 8000a78:	0a49      	lsrs	r1, r1, #9
 8000a7a:	e707      	b.n	800088c <__aeabi_fmul+0xa4>
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	e7df      	b.n	8000a40 <__aeabi_fmul+0x258>
 8000a80:	f7ffffff 	.word	0xf7ffffff

08000a84 <__aeabi_fsub>:
 8000a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a86:	46c6      	mov	lr, r8
 8000a88:	0243      	lsls	r3, r0, #9
 8000a8a:	0a5b      	lsrs	r3, r3, #9
 8000a8c:	0045      	lsls	r5, r0, #1
 8000a8e:	00da      	lsls	r2, r3, #3
 8000a90:	0fc4      	lsrs	r4, r0, #31
 8000a92:	0248      	lsls	r0, r1, #9
 8000a94:	004f      	lsls	r7, r1, #1
 8000a96:	4694      	mov	ip, r2
 8000a98:	0a42      	lsrs	r2, r0, #9
 8000a9a:	001e      	movs	r6, r3
 8000a9c:	4690      	mov	r8, r2
 8000a9e:	b500      	push	{lr}
 8000aa0:	0e2d      	lsrs	r5, r5, #24
 8000aa2:	0e3f      	lsrs	r7, r7, #24
 8000aa4:	0fc9      	lsrs	r1, r1, #31
 8000aa6:	0980      	lsrs	r0, r0, #6
 8000aa8:	2fff      	cmp	r7, #255	; 0xff
 8000aaa:	d059      	beq.n	8000b60 <__aeabi_fsub+0xdc>
 8000aac:	2201      	movs	r2, #1
 8000aae:	4051      	eors	r1, r2
 8000ab0:	428c      	cmp	r4, r1
 8000ab2:	d039      	beq.n	8000b28 <__aeabi_fsub+0xa4>
 8000ab4:	1bea      	subs	r2, r5, r7
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	dd58      	ble.n	8000b6c <__aeabi_fsub+0xe8>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d068      	beq.n	8000b90 <__aeabi_fsub+0x10c>
 8000abe:	2dff      	cmp	r5, #255	; 0xff
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_fsub+0x40>
 8000ac2:	e0d1      	b.n	8000c68 <__aeabi_fsub+0x1e4>
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	04db      	lsls	r3, r3, #19
 8000ac8:	4318      	orrs	r0, r3
 8000aca:	2a1b      	cmp	r2, #27
 8000acc:	dc00      	bgt.n	8000ad0 <__aeabi_fsub+0x4c>
 8000ace:	e0e3      	b.n	8000c98 <__aeabi_fsub+0x214>
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	4662      	mov	r2, ip
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	015a      	lsls	r2, r3, #5
 8000ad8:	d400      	bmi.n	8000adc <__aeabi_fsub+0x58>
 8000ada:	e0ac      	b.n	8000c36 <__aeabi_fsub+0x1b2>
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	099e      	lsrs	r6, r3, #6
 8000ae0:	0030      	movs	r0, r6
 8000ae2:	f001 fff3 	bl	8002acc <__clzsi2>
 8000ae6:	0033      	movs	r3, r6
 8000ae8:	3805      	subs	r0, #5
 8000aea:	4083      	lsls	r3, r0
 8000aec:	4285      	cmp	r5, r0
 8000aee:	dc00      	bgt.n	8000af2 <__aeabi_fsub+0x6e>
 8000af0:	e0c6      	b.n	8000c80 <__aeabi_fsub+0x1fc>
 8000af2:	4ab2      	ldr	r2, [pc, #712]	; (8000dbc <__aeabi_fsub+0x338>)
 8000af4:	1a2d      	subs	r5, r5, r0
 8000af6:	4013      	ands	r3, r2
 8000af8:	075a      	lsls	r2, r3, #29
 8000afa:	d004      	beq.n	8000b06 <__aeabi_fsub+0x82>
 8000afc:	220f      	movs	r2, #15
 8000afe:	401a      	ands	r2, r3
 8000b00:	2a04      	cmp	r2, #4
 8000b02:	d000      	beq.n	8000b06 <__aeabi_fsub+0x82>
 8000b04:	3304      	adds	r3, #4
 8000b06:	015a      	lsls	r2, r3, #5
 8000b08:	d400      	bmi.n	8000b0c <__aeabi_fsub+0x88>
 8000b0a:	e097      	b.n	8000c3c <__aeabi_fsub+0x1b8>
 8000b0c:	1c6a      	adds	r2, r5, #1
 8000b0e:	2dfe      	cmp	r5, #254	; 0xfe
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fsub+0x90>
 8000b12:	e084      	b.n	8000c1e <__aeabi_fsub+0x19a>
 8000b14:	019b      	lsls	r3, r3, #6
 8000b16:	0a5e      	lsrs	r6, r3, #9
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	05d0      	lsls	r0, r2, #23
 8000b1c:	4330      	orrs	r0, r6
 8000b1e:	07e4      	lsls	r4, r4, #31
 8000b20:	4320      	orrs	r0, r4
 8000b22:	bc80      	pop	{r7}
 8000b24:	46b8      	mov	r8, r7
 8000b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b28:	1bea      	subs	r2, r5, r7
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	dd41      	ble.n	8000bb2 <__aeabi_fsub+0x12e>
 8000b2e:	2f00      	cmp	r7, #0
 8000b30:	d06b      	beq.n	8000c0a <__aeabi_fsub+0x186>
 8000b32:	2dff      	cmp	r5, #255	; 0xff
 8000b34:	d100      	bne.n	8000b38 <__aeabi_fsub+0xb4>
 8000b36:	e097      	b.n	8000c68 <__aeabi_fsub+0x1e4>
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	04db      	lsls	r3, r3, #19
 8000b3c:	4318      	orrs	r0, r3
 8000b3e:	2a1b      	cmp	r2, #27
 8000b40:	dc00      	bgt.n	8000b44 <__aeabi_fsub+0xc0>
 8000b42:	e0cc      	b.n	8000cde <__aeabi_fsub+0x25a>
 8000b44:	2301      	movs	r3, #1
 8000b46:	4463      	add	r3, ip
 8000b48:	015a      	lsls	r2, r3, #5
 8000b4a:	d574      	bpl.n	8000c36 <__aeabi_fsub+0x1b2>
 8000b4c:	3501      	adds	r5, #1
 8000b4e:	2dff      	cmp	r5, #255	; 0xff
 8000b50:	d065      	beq.n	8000c1e <__aeabi_fsub+0x19a>
 8000b52:	2201      	movs	r2, #1
 8000b54:	499a      	ldr	r1, [pc, #616]	; (8000dc0 <__aeabi_fsub+0x33c>)
 8000b56:	401a      	ands	r2, r3
 8000b58:	085b      	lsrs	r3, r3, #1
 8000b5a:	400b      	ands	r3, r1
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	e7cb      	b.n	8000af8 <__aeabi_fsub+0x74>
 8000b60:	2800      	cmp	r0, #0
 8000b62:	d01f      	beq.n	8000ba4 <__aeabi_fsub+0x120>
 8000b64:	428c      	cmp	r4, r1
 8000b66:	d022      	beq.n	8000bae <__aeabi_fsub+0x12a>
 8000b68:	002a      	movs	r2, r5
 8000b6a:	3aff      	subs	r2, #255	; 0xff
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	d035      	beq.n	8000bdc <__aeabi_fsub+0x158>
 8000b70:	1b7a      	subs	r2, r7, r5
 8000b72:	2d00      	cmp	r5, #0
 8000b74:	d000      	beq.n	8000b78 <__aeabi_fsub+0xf4>
 8000b76:	e099      	b.n	8000cac <__aeabi_fsub+0x228>
 8000b78:	4663      	mov	r3, ip
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_fsub+0xfc>
 8000b7e:	e0dd      	b.n	8000d3c <__aeabi_fsub+0x2b8>
 8000b80:	1e53      	subs	r3, r2, #1
 8000b82:	2a01      	cmp	r2, #1
 8000b84:	d100      	bne.n	8000b88 <__aeabi_fsub+0x104>
 8000b86:	e105      	b.n	8000d94 <__aeabi_fsub+0x310>
 8000b88:	2aff      	cmp	r2, #255	; 0xff
 8000b8a:	d06b      	beq.n	8000c64 <__aeabi_fsub+0x1e0>
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	e094      	b.n	8000cba <__aeabi_fsub+0x236>
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d073      	beq.n	8000c7c <__aeabi_fsub+0x1f8>
 8000b94:	1e51      	subs	r1, r2, #1
 8000b96:	2a01      	cmp	r2, #1
 8000b98:	d100      	bne.n	8000b9c <__aeabi_fsub+0x118>
 8000b9a:	e0df      	b.n	8000d5c <__aeabi_fsub+0x2d8>
 8000b9c:	2aff      	cmp	r2, #255	; 0xff
 8000b9e:	d063      	beq.n	8000c68 <__aeabi_fsub+0x1e4>
 8000ba0:	000a      	movs	r2, r1
 8000ba2:	e792      	b.n	8000aca <__aeabi_fsub+0x46>
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4051      	eors	r1, r2
 8000ba8:	42a1      	cmp	r1, r4
 8000baa:	d000      	beq.n	8000bae <__aeabi_fsub+0x12a>
 8000bac:	e782      	b.n	8000ab4 <__aeabi_fsub+0x30>
 8000bae:	002a      	movs	r2, r5
 8000bb0:	3aff      	subs	r2, #255	; 0xff
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	d036      	beq.n	8000c24 <__aeabi_fsub+0x1a0>
 8000bb6:	1b7a      	subs	r2, r7, r5
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	d100      	bne.n	8000bbe <__aeabi_fsub+0x13a>
 8000bbc:	e0aa      	b.n	8000d14 <__aeabi_fsub+0x290>
 8000bbe:	2fff      	cmp	r7, #255	; 0xff
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fsub+0x140>
 8000bc2:	e0da      	b.n	8000d7a <__aeabi_fsub+0x2f6>
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	4661      	mov	r1, ip
 8000bc8:	04db      	lsls	r3, r3, #19
 8000bca:	4319      	orrs	r1, r3
 8000bcc:	468c      	mov	ip, r1
 8000bce:	2a1b      	cmp	r2, #27
 8000bd0:	dc00      	bgt.n	8000bd4 <__aeabi_fsub+0x150>
 8000bd2:	e0d4      	b.n	8000d7e <__aeabi_fsub+0x2fa>
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	003d      	movs	r5, r7
 8000bd8:	181b      	adds	r3, r3, r0
 8000bda:	e7b5      	b.n	8000b48 <__aeabi_fsub+0xc4>
 8000bdc:	27fe      	movs	r7, #254	; 0xfe
 8000bde:	1c6a      	adds	r2, r5, #1
 8000be0:	4217      	tst	r7, r2
 8000be2:	d171      	bne.n	8000cc8 <__aeabi_fsub+0x244>
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d000      	beq.n	8000bea <__aeabi_fsub+0x166>
 8000be8:	e09e      	b.n	8000d28 <__aeabi_fsub+0x2a4>
 8000bea:	4663      	mov	r3, ip
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_fsub+0x16e>
 8000bf0:	e0d5      	b.n	8000d9e <__aeabi_fsub+0x31a>
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2800      	cmp	r0, #0
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_fsub+0x176>
 8000bf8:	e78f      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000bfa:	1a1b      	subs	r3, r3, r0
 8000bfc:	015e      	lsls	r6, r3, #5
 8000bfe:	d400      	bmi.n	8000c02 <__aeabi_fsub+0x17e>
 8000c00:	e0d6      	b.n	8000db0 <__aeabi_fsub+0x32c>
 8000c02:	4663      	mov	r3, ip
 8000c04:	000c      	movs	r4, r1
 8000c06:	1ac3      	subs	r3, r0, r3
 8000c08:	e776      	b.n	8000af8 <__aeabi_fsub+0x74>
 8000c0a:	2800      	cmp	r0, #0
 8000c0c:	d036      	beq.n	8000c7c <__aeabi_fsub+0x1f8>
 8000c0e:	1e51      	subs	r1, r2, #1
 8000c10:	2a01      	cmp	r2, #1
 8000c12:	d100      	bne.n	8000c16 <__aeabi_fsub+0x192>
 8000c14:	e09a      	b.n	8000d4c <__aeabi_fsub+0x2c8>
 8000c16:	2aff      	cmp	r2, #255	; 0xff
 8000c18:	d026      	beq.n	8000c68 <__aeabi_fsub+0x1e4>
 8000c1a:	000a      	movs	r2, r1
 8000c1c:	e78f      	b.n	8000b3e <__aeabi_fsub+0xba>
 8000c1e:	22ff      	movs	r2, #255	; 0xff
 8000c20:	2600      	movs	r6, #0
 8000c22:	e77a      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000c24:	27fe      	movs	r7, #254	; 0xfe
 8000c26:	1c6a      	adds	r2, r5, #1
 8000c28:	4217      	tst	r7, r2
 8000c2a:	d062      	beq.n	8000cf2 <__aeabi_fsub+0x26e>
 8000c2c:	2aff      	cmp	r2, #255	; 0xff
 8000c2e:	d0f6      	beq.n	8000c1e <__aeabi_fsub+0x19a>
 8000c30:	0015      	movs	r5, r2
 8000c32:	4460      	add	r0, ip
 8000c34:	0843      	lsrs	r3, r0, #1
 8000c36:	075a      	lsls	r2, r3, #29
 8000c38:	d000      	beq.n	8000c3c <__aeabi_fsub+0x1b8>
 8000c3a:	e75f      	b.n	8000afc <__aeabi_fsub+0x78>
 8000c3c:	08db      	lsrs	r3, r3, #3
 8000c3e:	2dff      	cmp	r5, #255	; 0xff
 8000c40:	d012      	beq.n	8000c68 <__aeabi_fsub+0x1e4>
 8000c42:	025b      	lsls	r3, r3, #9
 8000c44:	0a5e      	lsrs	r6, r3, #9
 8000c46:	b2ea      	uxtb	r2, r5
 8000c48:	e767      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000c4a:	4662      	mov	r2, ip
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_fsub+0x1ce>
 8000c50:	e093      	b.n	8000d7a <__aeabi_fsub+0x2f6>
 8000c52:	2800      	cmp	r0, #0
 8000c54:	d008      	beq.n	8000c68 <__aeabi_fsub+0x1e4>
 8000c56:	2280      	movs	r2, #128	; 0x80
 8000c58:	03d2      	lsls	r2, r2, #15
 8000c5a:	4213      	tst	r3, r2
 8000c5c:	d004      	beq.n	8000c68 <__aeabi_fsub+0x1e4>
 8000c5e:	4640      	mov	r0, r8
 8000c60:	4210      	tst	r0, r2
 8000c62:	d101      	bne.n	8000c68 <__aeabi_fsub+0x1e4>
 8000c64:	000c      	movs	r4, r1
 8000c66:	4643      	mov	r3, r8
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0d8      	beq.n	8000c1e <__aeabi_fsub+0x19a>
 8000c6c:	2680      	movs	r6, #128	; 0x80
 8000c6e:	03f6      	lsls	r6, r6, #15
 8000c70:	431e      	orrs	r6, r3
 8000c72:	0276      	lsls	r6, r6, #9
 8000c74:	22ff      	movs	r2, #255	; 0xff
 8000c76:	0a76      	lsrs	r6, r6, #9
 8000c78:	e74f      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	0015      	movs	r5, r2
 8000c7e:	e7de      	b.n	8000c3e <__aeabi_fsub+0x1ba>
 8000c80:	2220      	movs	r2, #32
 8000c82:	1b40      	subs	r0, r0, r5
 8000c84:	3001      	adds	r0, #1
 8000c86:	1a12      	subs	r2, r2, r0
 8000c88:	0019      	movs	r1, r3
 8000c8a:	4093      	lsls	r3, r2
 8000c8c:	40c1      	lsrs	r1, r0
 8000c8e:	1e5a      	subs	r2, r3, #1
 8000c90:	4193      	sbcs	r3, r2
 8000c92:	2500      	movs	r5, #0
 8000c94:	430b      	orrs	r3, r1
 8000c96:	e72f      	b.n	8000af8 <__aeabi_fsub+0x74>
 8000c98:	2320      	movs	r3, #32
 8000c9a:	1a9b      	subs	r3, r3, r2
 8000c9c:	0001      	movs	r1, r0
 8000c9e:	4098      	lsls	r0, r3
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	40d1      	lsrs	r1, r2
 8000ca4:	1e5a      	subs	r2, r3, #1
 8000ca6:	4193      	sbcs	r3, r2
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	e712      	b.n	8000ad2 <__aeabi_fsub+0x4e>
 8000cac:	2fff      	cmp	r7, #255	; 0xff
 8000cae:	d0d9      	beq.n	8000c64 <__aeabi_fsub+0x1e0>
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	4664      	mov	r4, ip
 8000cb4:	04db      	lsls	r3, r3, #19
 8000cb6:	431c      	orrs	r4, r3
 8000cb8:	46a4      	mov	ip, r4
 8000cba:	2a1b      	cmp	r2, #27
 8000cbc:	dd52      	ble.n	8000d64 <__aeabi_fsub+0x2e0>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	000c      	movs	r4, r1
 8000cc2:	003d      	movs	r5, r7
 8000cc4:	1ac3      	subs	r3, r0, r3
 8000cc6:	e706      	b.n	8000ad6 <__aeabi_fsub+0x52>
 8000cc8:	4663      	mov	r3, ip
 8000cca:	1a1e      	subs	r6, r3, r0
 8000ccc:	0173      	lsls	r3, r6, #5
 8000cce:	d439      	bmi.n	8000d44 <__aeabi_fsub+0x2c0>
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d000      	beq.n	8000cd6 <__aeabi_fsub+0x252>
 8000cd4:	e704      	b.n	8000ae0 <__aeabi_fsub+0x5c>
 8000cd6:	2400      	movs	r4, #0
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2600      	movs	r6, #0
 8000cdc:	e71d      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000cde:	2320      	movs	r3, #32
 8000ce0:	1a9b      	subs	r3, r3, r2
 8000ce2:	0001      	movs	r1, r0
 8000ce4:	4098      	lsls	r0, r3
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	40d1      	lsrs	r1, r2
 8000cea:	1e5a      	subs	r2, r3, #1
 8000cec:	4193      	sbcs	r3, r2
 8000cee:	430b      	orrs	r3, r1
 8000cf0:	e729      	b.n	8000b46 <__aeabi_fsub+0xc2>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	d1a9      	bne.n	8000c4a <__aeabi_fsub+0x1c6>
 8000cf6:	4663      	mov	r3, ip
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d056      	beq.n	8000daa <__aeabi_fsub+0x326>
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	d100      	bne.n	8000d04 <__aeabi_fsub+0x280>
 8000d02:	e70a      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000d04:	0003      	movs	r3, r0
 8000d06:	4463      	add	r3, ip
 8000d08:	015a      	lsls	r2, r3, #5
 8000d0a:	d594      	bpl.n	8000c36 <__aeabi_fsub+0x1b2>
 8000d0c:	4a2b      	ldr	r2, [pc, #172]	; (8000dbc <__aeabi_fsub+0x338>)
 8000d0e:	3501      	adds	r5, #1
 8000d10:	4013      	ands	r3, r2
 8000d12:	e790      	b.n	8000c36 <__aeabi_fsub+0x1b2>
 8000d14:	4663      	mov	r3, ip
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0af      	beq.n	8000c7a <__aeabi_fsub+0x1f6>
 8000d1a:	1e53      	subs	r3, r2, #1
 8000d1c:	2a01      	cmp	r2, #1
 8000d1e:	d015      	beq.n	8000d4c <__aeabi_fsub+0x2c8>
 8000d20:	2aff      	cmp	r2, #255	; 0xff
 8000d22:	d02a      	beq.n	8000d7a <__aeabi_fsub+0x2f6>
 8000d24:	001a      	movs	r2, r3
 8000d26:	e752      	b.n	8000bce <__aeabi_fsub+0x14a>
 8000d28:	4662      	mov	r2, ip
 8000d2a:	2a00      	cmp	r2, #0
 8000d2c:	d191      	bne.n	8000c52 <__aeabi_fsub+0x1ce>
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	d198      	bne.n	8000c64 <__aeabi_fsub+0x1e0>
 8000d32:	2680      	movs	r6, #128	; 0x80
 8000d34:	2400      	movs	r4, #0
 8000d36:	22ff      	movs	r2, #255	; 0xff
 8000d38:	03f6      	lsls	r6, r6, #15
 8000d3a:	e6ee      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000d3c:	000c      	movs	r4, r1
 8000d3e:	4643      	mov	r3, r8
 8000d40:	0015      	movs	r5, r2
 8000d42:	e77c      	b.n	8000c3e <__aeabi_fsub+0x1ba>
 8000d44:	4663      	mov	r3, ip
 8000d46:	000c      	movs	r4, r1
 8000d48:	1ac6      	subs	r6, r0, r3
 8000d4a:	e6c9      	b.n	8000ae0 <__aeabi_fsub+0x5c>
 8000d4c:	0003      	movs	r3, r0
 8000d4e:	4463      	add	r3, ip
 8000d50:	2501      	movs	r5, #1
 8000d52:	015a      	lsls	r2, r3, #5
 8000d54:	d400      	bmi.n	8000d58 <__aeabi_fsub+0x2d4>
 8000d56:	e76e      	b.n	8000c36 <__aeabi_fsub+0x1b2>
 8000d58:	2502      	movs	r5, #2
 8000d5a:	e6fa      	b.n	8000b52 <__aeabi_fsub+0xce>
 8000d5c:	4663      	mov	r3, ip
 8000d5e:	2501      	movs	r5, #1
 8000d60:	1a1b      	subs	r3, r3, r0
 8000d62:	e6b8      	b.n	8000ad6 <__aeabi_fsub+0x52>
 8000d64:	4664      	mov	r4, ip
 8000d66:	2320      	movs	r3, #32
 8000d68:	40d4      	lsrs	r4, r2
 8000d6a:	1a9b      	subs	r3, r3, r2
 8000d6c:	4662      	mov	r2, ip
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	0013      	movs	r3, r2
 8000d72:	1e5a      	subs	r2, r3, #1
 8000d74:	4193      	sbcs	r3, r2
 8000d76:	4323      	orrs	r3, r4
 8000d78:	e7a2      	b.n	8000cc0 <__aeabi_fsub+0x23c>
 8000d7a:	4643      	mov	r3, r8
 8000d7c:	e774      	b.n	8000c68 <__aeabi_fsub+0x1e4>
 8000d7e:	4661      	mov	r1, ip
 8000d80:	2320      	movs	r3, #32
 8000d82:	40d1      	lsrs	r1, r2
 8000d84:	1a9b      	subs	r3, r3, r2
 8000d86:	4662      	mov	r2, ip
 8000d88:	409a      	lsls	r2, r3
 8000d8a:	0013      	movs	r3, r2
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	4193      	sbcs	r3, r2
 8000d90:	430b      	orrs	r3, r1
 8000d92:	e720      	b.n	8000bd6 <__aeabi_fsub+0x152>
 8000d94:	4663      	mov	r3, ip
 8000d96:	000c      	movs	r4, r1
 8000d98:	2501      	movs	r5, #1
 8000d9a:	1ac3      	subs	r3, r0, r3
 8000d9c:	e69b      	b.n	8000ad6 <__aeabi_fsub+0x52>
 8000d9e:	2800      	cmp	r0, #0
 8000da0:	d099      	beq.n	8000cd6 <__aeabi_fsub+0x252>
 8000da2:	000c      	movs	r4, r1
 8000da4:	4646      	mov	r6, r8
 8000da6:	2200      	movs	r2, #0
 8000da8:	e6b7      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000daa:	4646      	mov	r6, r8
 8000dac:	2200      	movs	r2, #0
 8000dae:	e6b4      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d000      	beq.n	8000db6 <__aeabi_fsub+0x332>
 8000db4:	e73f      	b.n	8000c36 <__aeabi_fsub+0x1b2>
 8000db6:	2400      	movs	r4, #0
 8000db8:	2600      	movs	r6, #0
 8000dba:	e6ae      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000dbc:	fbffffff 	.word	0xfbffffff
 8000dc0:	7dffffff 	.word	0x7dffffff

08000dc4 <__aeabi_f2iz>:
 8000dc4:	0241      	lsls	r1, r0, #9
 8000dc6:	0042      	lsls	r2, r0, #1
 8000dc8:	0fc3      	lsrs	r3, r0, #31
 8000dca:	0a49      	lsrs	r1, r1, #9
 8000dcc:	2000      	movs	r0, #0
 8000dce:	0e12      	lsrs	r2, r2, #24
 8000dd0:	2a7e      	cmp	r2, #126	; 0x7e
 8000dd2:	dd03      	ble.n	8000ddc <__aeabi_f2iz+0x18>
 8000dd4:	2a9d      	cmp	r2, #157	; 0x9d
 8000dd6:	dd02      	ble.n	8000dde <__aeabi_f2iz+0x1a>
 8000dd8:	4a09      	ldr	r2, [pc, #36]	; (8000e00 <__aeabi_f2iz+0x3c>)
 8000dda:	1898      	adds	r0, r3, r2
 8000ddc:	4770      	bx	lr
 8000dde:	2080      	movs	r0, #128	; 0x80
 8000de0:	0400      	lsls	r0, r0, #16
 8000de2:	4301      	orrs	r1, r0
 8000de4:	2a95      	cmp	r2, #149	; 0x95
 8000de6:	dc07      	bgt.n	8000df8 <__aeabi_f2iz+0x34>
 8000de8:	2096      	movs	r0, #150	; 0x96
 8000dea:	1a82      	subs	r2, r0, r2
 8000dec:	40d1      	lsrs	r1, r2
 8000dee:	4248      	negs	r0, r1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1f3      	bne.n	8000ddc <__aeabi_f2iz+0x18>
 8000df4:	0008      	movs	r0, r1
 8000df6:	e7f1      	b.n	8000ddc <__aeabi_f2iz+0x18>
 8000df8:	3a96      	subs	r2, #150	; 0x96
 8000dfa:	4091      	lsls	r1, r2
 8000dfc:	e7f7      	b.n	8000dee <__aeabi_f2iz+0x2a>
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	7fffffff 	.word	0x7fffffff

08000e04 <__aeabi_i2f>:
 8000e04:	b570      	push	{r4, r5, r6, lr}
 8000e06:	2800      	cmp	r0, #0
 8000e08:	d013      	beq.n	8000e32 <__aeabi_i2f+0x2e>
 8000e0a:	17c3      	asrs	r3, r0, #31
 8000e0c:	18c5      	adds	r5, r0, r3
 8000e0e:	405d      	eors	r5, r3
 8000e10:	0fc4      	lsrs	r4, r0, #31
 8000e12:	0028      	movs	r0, r5
 8000e14:	f001 fe5a 	bl	8002acc <__clzsi2>
 8000e18:	239e      	movs	r3, #158	; 0x9e
 8000e1a:	0001      	movs	r1, r0
 8000e1c:	1a1b      	subs	r3, r3, r0
 8000e1e:	2b96      	cmp	r3, #150	; 0x96
 8000e20:	dc0f      	bgt.n	8000e42 <__aeabi_i2f+0x3e>
 8000e22:	2808      	cmp	r0, #8
 8000e24:	d031      	beq.n	8000e8a <__aeabi_i2f+0x86>
 8000e26:	3908      	subs	r1, #8
 8000e28:	408d      	lsls	r5, r1
 8000e2a:	026d      	lsls	r5, r5, #9
 8000e2c:	0a6d      	lsrs	r5, r5, #9
 8000e2e:	b2d8      	uxtb	r0, r3
 8000e30:	e002      	b.n	8000e38 <__aeabi_i2f+0x34>
 8000e32:	2400      	movs	r4, #0
 8000e34:	2000      	movs	r0, #0
 8000e36:	2500      	movs	r5, #0
 8000e38:	05c0      	lsls	r0, r0, #23
 8000e3a:	4328      	orrs	r0, r5
 8000e3c:	07e4      	lsls	r4, r4, #31
 8000e3e:	4320      	orrs	r0, r4
 8000e40:	bd70      	pop	{r4, r5, r6, pc}
 8000e42:	2b99      	cmp	r3, #153	; 0x99
 8000e44:	dd0c      	ble.n	8000e60 <__aeabi_i2f+0x5c>
 8000e46:	2205      	movs	r2, #5
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	0028      	movs	r0, r5
 8000e4c:	40d0      	lsrs	r0, r2
 8000e4e:	0002      	movs	r2, r0
 8000e50:	0008      	movs	r0, r1
 8000e52:	301b      	adds	r0, #27
 8000e54:	4085      	lsls	r5, r0
 8000e56:	0028      	movs	r0, r5
 8000e58:	1e45      	subs	r5, r0, #1
 8000e5a:	41a8      	sbcs	r0, r5
 8000e5c:	4302      	orrs	r2, r0
 8000e5e:	0015      	movs	r5, r2
 8000e60:	2905      	cmp	r1, #5
 8000e62:	dc16      	bgt.n	8000e92 <__aeabi_i2f+0x8e>
 8000e64:	002a      	movs	r2, r5
 8000e66:	480f      	ldr	r0, [pc, #60]	; (8000ea4 <__aeabi_i2f+0xa0>)
 8000e68:	4002      	ands	r2, r0
 8000e6a:	076e      	lsls	r6, r5, #29
 8000e6c:	d009      	beq.n	8000e82 <__aeabi_i2f+0x7e>
 8000e6e:	260f      	movs	r6, #15
 8000e70:	4035      	ands	r5, r6
 8000e72:	2d04      	cmp	r5, #4
 8000e74:	d005      	beq.n	8000e82 <__aeabi_i2f+0x7e>
 8000e76:	3204      	adds	r2, #4
 8000e78:	0155      	lsls	r5, r2, #5
 8000e7a:	d502      	bpl.n	8000e82 <__aeabi_i2f+0x7e>
 8000e7c:	239f      	movs	r3, #159	; 0x9f
 8000e7e:	4002      	ands	r2, r0
 8000e80:	1a5b      	subs	r3, r3, r1
 8000e82:	0192      	lsls	r2, r2, #6
 8000e84:	0a55      	lsrs	r5, r2, #9
 8000e86:	b2d8      	uxtb	r0, r3
 8000e88:	e7d6      	b.n	8000e38 <__aeabi_i2f+0x34>
 8000e8a:	026d      	lsls	r5, r5, #9
 8000e8c:	2096      	movs	r0, #150	; 0x96
 8000e8e:	0a6d      	lsrs	r5, r5, #9
 8000e90:	e7d2      	b.n	8000e38 <__aeabi_i2f+0x34>
 8000e92:	1f4a      	subs	r2, r1, #5
 8000e94:	4095      	lsls	r5, r2
 8000e96:	002a      	movs	r2, r5
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <__aeabi_i2f+0xa0>)
 8000e9a:	4002      	ands	r2, r0
 8000e9c:	076e      	lsls	r6, r5, #29
 8000e9e:	d0f0      	beq.n	8000e82 <__aeabi_i2f+0x7e>
 8000ea0:	e7e5      	b.n	8000e6e <__aeabi_i2f+0x6a>
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	fbffffff 	.word	0xfbffffff

08000ea8 <__aeabi_ui2f>:
 8000ea8:	b570      	push	{r4, r5, r6, lr}
 8000eaa:	1e04      	subs	r4, r0, #0
 8000eac:	d00e      	beq.n	8000ecc <__aeabi_ui2f+0x24>
 8000eae:	f001 fe0d 	bl	8002acc <__clzsi2>
 8000eb2:	239e      	movs	r3, #158	; 0x9e
 8000eb4:	0001      	movs	r1, r0
 8000eb6:	1a1b      	subs	r3, r3, r0
 8000eb8:	2b96      	cmp	r3, #150	; 0x96
 8000eba:	dc0c      	bgt.n	8000ed6 <__aeabi_ui2f+0x2e>
 8000ebc:	2808      	cmp	r0, #8
 8000ebe:	d02c      	beq.n	8000f1a <__aeabi_ui2f+0x72>
 8000ec0:	3908      	subs	r1, #8
 8000ec2:	408c      	lsls	r4, r1
 8000ec4:	0264      	lsls	r4, r4, #9
 8000ec6:	0a64      	lsrs	r4, r4, #9
 8000ec8:	b2d8      	uxtb	r0, r3
 8000eca:	e001      	b.n	8000ed0 <__aeabi_ui2f+0x28>
 8000ecc:	2000      	movs	r0, #0
 8000ece:	2400      	movs	r4, #0
 8000ed0:	05c0      	lsls	r0, r0, #23
 8000ed2:	4320      	orrs	r0, r4
 8000ed4:	bd70      	pop	{r4, r5, r6, pc}
 8000ed6:	2b99      	cmp	r3, #153	; 0x99
 8000ed8:	dd0a      	ble.n	8000ef0 <__aeabi_ui2f+0x48>
 8000eda:	0002      	movs	r2, r0
 8000edc:	0020      	movs	r0, r4
 8000ede:	321b      	adds	r2, #27
 8000ee0:	4090      	lsls	r0, r2
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	1e50      	subs	r0, r2, #1
 8000ee6:	4182      	sbcs	r2, r0
 8000ee8:	2005      	movs	r0, #5
 8000eea:	1a40      	subs	r0, r0, r1
 8000eec:	40c4      	lsrs	r4, r0
 8000eee:	4314      	orrs	r4, r2
 8000ef0:	2905      	cmp	r1, #5
 8000ef2:	dc16      	bgt.n	8000f22 <__aeabi_ui2f+0x7a>
 8000ef4:	0022      	movs	r2, r4
 8000ef6:	480f      	ldr	r0, [pc, #60]	; (8000f34 <__aeabi_ui2f+0x8c>)
 8000ef8:	4002      	ands	r2, r0
 8000efa:	0765      	lsls	r5, r4, #29
 8000efc:	d009      	beq.n	8000f12 <__aeabi_ui2f+0x6a>
 8000efe:	250f      	movs	r5, #15
 8000f00:	402c      	ands	r4, r5
 8000f02:	2c04      	cmp	r4, #4
 8000f04:	d005      	beq.n	8000f12 <__aeabi_ui2f+0x6a>
 8000f06:	3204      	adds	r2, #4
 8000f08:	0154      	lsls	r4, r2, #5
 8000f0a:	d502      	bpl.n	8000f12 <__aeabi_ui2f+0x6a>
 8000f0c:	239f      	movs	r3, #159	; 0x9f
 8000f0e:	4002      	ands	r2, r0
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	0192      	lsls	r2, r2, #6
 8000f14:	0a54      	lsrs	r4, r2, #9
 8000f16:	b2d8      	uxtb	r0, r3
 8000f18:	e7da      	b.n	8000ed0 <__aeabi_ui2f+0x28>
 8000f1a:	0264      	lsls	r4, r4, #9
 8000f1c:	2096      	movs	r0, #150	; 0x96
 8000f1e:	0a64      	lsrs	r4, r4, #9
 8000f20:	e7d6      	b.n	8000ed0 <__aeabi_ui2f+0x28>
 8000f22:	1f4a      	subs	r2, r1, #5
 8000f24:	4094      	lsls	r4, r2
 8000f26:	0022      	movs	r2, r4
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <__aeabi_ui2f+0x8c>)
 8000f2a:	4002      	ands	r2, r0
 8000f2c:	0765      	lsls	r5, r4, #29
 8000f2e:	d0f0      	beq.n	8000f12 <__aeabi_ui2f+0x6a>
 8000f30:	e7e5      	b.n	8000efe <__aeabi_ui2f+0x56>
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	fbffffff 	.word	0xfbffffff

08000f38 <__aeabi_dadd>:
 8000f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3a:	464f      	mov	r7, r9
 8000f3c:	4646      	mov	r6, r8
 8000f3e:	46d6      	mov	lr, sl
 8000f40:	0004      	movs	r4, r0
 8000f42:	b5c0      	push	{r6, r7, lr}
 8000f44:	001f      	movs	r7, r3
 8000f46:	030b      	lsls	r3, r1, #12
 8000f48:	0010      	movs	r0, r2
 8000f4a:	004e      	lsls	r6, r1, #1
 8000f4c:	0a5b      	lsrs	r3, r3, #9
 8000f4e:	0fcd      	lsrs	r5, r1, #31
 8000f50:	0f61      	lsrs	r1, r4, #29
 8000f52:	007a      	lsls	r2, r7, #1
 8000f54:	4319      	orrs	r1, r3
 8000f56:	00e3      	lsls	r3, r4, #3
 8000f58:	033c      	lsls	r4, r7, #12
 8000f5a:	0fff      	lsrs	r7, r7, #31
 8000f5c:	46bc      	mov	ip, r7
 8000f5e:	0a64      	lsrs	r4, r4, #9
 8000f60:	0f47      	lsrs	r7, r0, #29
 8000f62:	4327      	orrs	r7, r4
 8000f64:	0d76      	lsrs	r6, r6, #21
 8000f66:	0d52      	lsrs	r2, r2, #21
 8000f68:	00c0      	lsls	r0, r0, #3
 8000f6a:	46b9      	mov	r9, r7
 8000f6c:	4680      	mov	r8, r0
 8000f6e:	1ab7      	subs	r7, r6, r2
 8000f70:	4565      	cmp	r5, ip
 8000f72:	d100      	bne.n	8000f76 <__aeabi_dadd+0x3e>
 8000f74:	e09b      	b.n	80010ae <__aeabi_dadd+0x176>
 8000f76:	2f00      	cmp	r7, #0
 8000f78:	dc00      	bgt.n	8000f7c <__aeabi_dadd+0x44>
 8000f7a:	e084      	b.n	8001086 <__aeabi_dadd+0x14e>
 8000f7c:	2a00      	cmp	r2, #0
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dadd+0x4a>
 8000f80:	e0be      	b.n	8001100 <__aeabi_dadd+0x1c8>
 8000f82:	4ac8      	ldr	r2, [pc, #800]	; (80012a4 <__aeabi_dadd+0x36c>)
 8000f84:	4296      	cmp	r6, r2
 8000f86:	d100      	bne.n	8000f8a <__aeabi_dadd+0x52>
 8000f88:	e124      	b.n	80011d4 <__aeabi_dadd+0x29c>
 8000f8a:	2280      	movs	r2, #128	; 0x80
 8000f8c:	464c      	mov	r4, r9
 8000f8e:	0412      	lsls	r2, r2, #16
 8000f90:	4314      	orrs	r4, r2
 8000f92:	46a1      	mov	r9, r4
 8000f94:	2f38      	cmp	r7, #56	; 0x38
 8000f96:	dd00      	ble.n	8000f9a <__aeabi_dadd+0x62>
 8000f98:	e167      	b.n	800126a <__aeabi_dadd+0x332>
 8000f9a:	2f1f      	cmp	r7, #31
 8000f9c:	dd00      	ble.n	8000fa0 <__aeabi_dadd+0x68>
 8000f9e:	e1d6      	b.n	800134e <__aeabi_dadd+0x416>
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	464c      	mov	r4, r9
 8000fa4:	1bd2      	subs	r2, r2, r7
 8000fa6:	4094      	lsls	r4, r2
 8000fa8:	46a2      	mov	sl, r4
 8000faa:	4644      	mov	r4, r8
 8000fac:	40fc      	lsrs	r4, r7
 8000fae:	0020      	movs	r0, r4
 8000fb0:	4654      	mov	r4, sl
 8000fb2:	4304      	orrs	r4, r0
 8000fb4:	4640      	mov	r0, r8
 8000fb6:	4090      	lsls	r0, r2
 8000fb8:	1e42      	subs	r2, r0, #1
 8000fba:	4190      	sbcs	r0, r2
 8000fbc:	464a      	mov	r2, r9
 8000fbe:	40fa      	lsrs	r2, r7
 8000fc0:	4304      	orrs	r4, r0
 8000fc2:	1a89      	subs	r1, r1, r2
 8000fc4:	1b1c      	subs	r4, r3, r4
 8000fc6:	42a3      	cmp	r3, r4
 8000fc8:	4192      	sbcs	r2, r2
 8000fca:	4252      	negs	r2, r2
 8000fcc:	1a8b      	subs	r3, r1, r2
 8000fce:	469a      	mov	sl, r3
 8000fd0:	4653      	mov	r3, sl
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	d400      	bmi.n	8000fd8 <__aeabi_dadd+0xa0>
 8000fd6:	e0d4      	b.n	8001182 <__aeabi_dadd+0x24a>
 8000fd8:	4653      	mov	r3, sl
 8000fda:	025a      	lsls	r2, r3, #9
 8000fdc:	0a53      	lsrs	r3, r2, #9
 8000fde:	469a      	mov	sl, r3
 8000fe0:	4653      	mov	r3, sl
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dadd+0xb0>
 8000fe6:	e104      	b.n	80011f2 <__aeabi_dadd+0x2ba>
 8000fe8:	4650      	mov	r0, sl
 8000fea:	f001 fd6f 	bl	8002acc <__clzsi2>
 8000fee:	0003      	movs	r3, r0
 8000ff0:	3b08      	subs	r3, #8
 8000ff2:	2220      	movs	r2, #32
 8000ff4:	0020      	movs	r0, r4
 8000ff6:	1ad2      	subs	r2, r2, r3
 8000ff8:	4651      	mov	r1, sl
 8000ffa:	40d0      	lsrs	r0, r2
 8000ffc:	4099      	lsls	r1, r3
 8000ffe:	0002      	movs	r2, r0
 8001000:	409c      	lsls	r4, r3
 8001002:	430a      	orrs	r2, r1
 8001004:	42b3      	cmp	r3, r6
 8001006:	da00      	bge.n	800100a <__aeabi_dadd+0xd2>
 8001008:	e102      	b.n	8001210 <__aeabi_dadd+0x2d8>
 800100a:	1b9b      	subs	r3, r3, r6
 800100c:	1c59      	adds	r1, r3, #1
 800100e:	291f      	cmp	r1, #31
 8001010:	dd00      	ble.n	8001014 <__aeabi_dadd+0xdc>
 8001012:	e0a7      	b.n	8001164 <__aeabi_dadd+0x22c>
 8001014:	2320      	movs	r3, #32
 8001016:	0010      	movs	r0, r2
 8001018:	0026      	movs	r6, r4
 800101a:	1a5b      	subs	r3, r3, r1
 800101c:	409c      	lsls	r4, r3
 800101e:	4098      	lsls	r0, r3
 8001020:	40ce      	lsrs	r6, r1
 8001022:	40ca      	lsrs	r2, r1
 8001024:	1e63      	subs	r3, r4, #1
 8001026:	419c      	sbcs	r4, r3
 8001028:	4330      	orrs	r0, r6
 800102a:	4692      	mov	sl, r2
 800102c:	2600      	movs	r6, #0
 800102e:	4304      	orrs	r4, r0
 8001030:	0763      	lsls	r3, r4, #29
 8001032:	d009      	beq.n	8001048 <__aeabi_dadd+0x110>
 8001034:	230f      	movs	r3, #15
 8001036:	4023      	ands	r3, r4
 8001038:	2b04      	cmp	r3, #4
 800103a:	d005      	beq.n	8001048 <__aeabi_dadd+0x110>
 800103c:	1d23      	adds	r3, r4, #4
 800103e:	42a3      	cmp	r3, r4
 8001040:	41a4      	sbcs	r4, r4
 8001042:	4264      	negs	r4, r4
 8001044:	44a2      	add	sl, r4
 8001046:	001c      	movs	r4, r3
 8001048:	4653      	mov	r3, sl
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	d400      	bmi.n	8001050 <__aeabi_dadd+0x118>
 800104e:	e09b      	b.n	8001188 <__aeabi_dadd+0x250>
 8001050:	4b94      	ldr	r3, [pc, #592]	; (80012a4 <__aeabi_dadd+0x36c>)
 8001052:	3601      	adds	r6, #1
 8001054:	429e      	cmp	r6, r3
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x122>
 8001058:	e0b8      	b.n	80011cc <__aeabi_dadd+0x294>
 800105a:	4653      	mov	r3, sl
 800105c:	4992      	ldr	r1, [pc, #584]	; (80012a8 <__aeabi_dadd+0x370>)
 800105e:	08e4      	lsrs	r4, r4, #3
 8001060:	400b      	ands	r3, r1
 8001062:	0019      	movs	r1, r3
 8001064:	075b      	lsls	r3, r3, #29
 8001066:	4323      	orrs	r3, r4
 8001068:	0572      	lsls	r2, r6, #21
 800106a:	024c      	lsls	r4, r1, #9
 800106c:	0b24      	lsrs	r4, r4, #12
 800106e:	0d52      	lsrs	r2, r2, #21
 8001070:	0512      	lsls	r2, r2, #20
 8001072:	07ed      	lsls	r5, r5, #31
 8001074:	4322      	orrs	r2, r4
 8001076:	432a      	orrs	r2, r5
 8001078:	0018      	movs	r0, r3
 800107a:	0011      	movs	r1, r2
 800107c:	bce0      	pop	{r5, r6, r7}
 800107e:	46ba      	mov	sl, r7
 8001080:	46b1      	mov	r9, r6
 8001082:	46a8      	mov	r8, r5
 8001084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001086:	2f00      	cmp	r7, #0
 8001088:	d048      	beq.n	800111c <__aeabi_dadd+0x1e4>
 800108a:	1b97      	subs	r7, r2, r6
 800108c:	2e00      	cmp	r6, #0
 800108e:	d000      	beq.n	8001092 <__aeabi_dadd+0x15a>
 8001090:	e10e      	b.n	80012b0 <__aeabi_dadd+0x378>
 8001092:	000c      	movs	r4, r1
 8001094:	431c      	orrs	r4, r3
 8001096:	d100      	bne.n	800109a <__aeabi_dadd+0x162>
 8001098:	e1b7      	b.n	800140a <__aeabi_dadd+0x4d2>
 800109a:	1e7c      	subs	r4, r7, #1
 800109c:	2f01      	cmp	r7, #1
 800109e:	d100      	bne.n	80010a2 <__aeabi_dadd+0x16a>
 80010a0:	e226      	b.n	80014f0 <__aeabi_dadd+0x5b8>
 80010a2:	4d80      	ldr	r5, [pc, #512]	; (80012a4 <__aeabi_dadd+0x36c>)
 80010a4:	42af      	cmp	r7, r5
 80010a6:	d100      	bne.n	80010aa <__aeabi_dadd+0x172>
 80010a8:	e1d5      	b.n	8001456 <__aeabi_dadd+0x51e>
 80010aa:	0027      	movs	r7, r4
 80010ac:	e107      	b.n	80012be <__aeabi_dadd+0x386>
 80010ae:	2f00      	cmp	r7, #0
 80010b0:	dc00      	bgt.n	80010b4 <__aeabi_dadd+0x17c>
 80010b2:	e0b2      	b.n	800121a <__aeabi_dadd+0x2e2>
 80010b4:	2a00      	cmp	r2, #0
 80010b6:	d047      	beq.n	8001148 <__aeabi_dadd+0x210>
 80010b8:	4a7a      	ldr	r2, [pc, #488]	; (80012a4 <__aeabi_dadd+0x36c>)
 80010ba:	4296      	cmp	r6, r2
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dadd+0x188>
 80010be:	e089      	b.n	80011d4 <__aeabi_dadd+0x29c>
 80010c0:	2280      	movs	r2, #128	; 0x80
 80010c2:	464c      	mov	r4, r9
 80010c4:	0412      	lsls	r2, r2, #16
 80010c6:	4314      	orrs	r4, r2
 80010c8:	46a1      	mov	r9, r4
 80010ca:	2f38      	cmp	r7, #56	; 0x38
 80010cc:	dc6b      	bgt.n	80011a6 <__aeabi_dadd+0x26e>
 80010ce:	2f1f      	cmp	r7, #31
 80010d0:	dc00      	bgt.n	80010d4 <__aeabi_dadd+0x19c>
 80010d2:	e16e      	b.n	80013b2 <__aeabi_dadd+0x47a>
 80010d4:	003a      	movs	r2, r7
 80010d6:	4648      	mov	r0, r9
 80010d8:	3a20      	subs	r2, #32
 80010da:	40d0      	lsrs	r0, r2
 80010dc:	4684      	mov	ip, r0
 80010de:	2f20      	cmp	r7, #32
 80010e0:	d007      	beq.n	80010f2 <__aeabi_dadd+0x1ba>
 80010e2:	2240      	movs	r2, #64	; 0x40
 80010e4:	4648      	mov	r0, r9
 80010e6:	1bd2      	subs	r2, r2, r7
 80010e8:	4090      	lsls	r0, r2
 80010ea:	0002      	movs	r2, r0
 80010ec:	4640      	mov	r0, r8
 80010ee:	4310      	orrs	r0, r2
 80010f0:	4680      	mov	r8, r0
 80010f2:	4640      	mov	r0, r8
 80010f4:	1e42      	subs	r2, r0, #1
 80010f6:	4190      	sbcs	r0, r2
 80010f8:	4662      	mov	r2, ip
 80010fa:	0004      	movs	r4, r0
 80010fc:	4314      	orrs	r4, r2
 80010fe:	e057      	b.n	80011b0 <__aeabi_dadd+0x278>
 8001100:	464a      	mov	r2, r9
 8001102:	4302      	orrs	r2, r0
 8001104:	d100      	bne.n	8001108 <__aeabi_dadd+0x1d0>
 8001106:	e103      	b.n	8001310 <__aeabi_dadd+0x3d8>
 8001108:	1e7a      	subs	r2, r7, #1
 800110a:	2f01      	cmp	r7, #1
 800110c:	d100      	bne.n	8001110 <__aeabi_dadd+0x1d8>
 800110e:	e193      	b.n	8001438 <__aeabi_dadd+0x500>
 8001110:	4c64      	ldr	r4, [pc, #400]	; (80012a4 <__aeabi_dadd+0x36c>)
 8001112:	42a7      	cmp	r7, r4
 8001114:	d100      	bne.n	8001118 <__aeabi_dadd+0x1e0>
 8001116:	e18a      	b.n	800142e <__aeabi_dadd+0x4f6>
 8001118:	0017      	movs	r7, r2
 800111a:	e73b      	b.n	8000f94 <__aeabi_dadd+0x5c>
 800111c:	4c63      	ldr	r4, [pc, #396]	; (80012ac <__aeabi_dadd+0x374>)
 800111e:	1c72      	adds	r2, r6, #1
 8001120:	4222      	tst	r2, r4
 8001122:	d000      	beq.n	8001126 <__aeabi_dadd+0x1ee>
 8001124:	e0e0      	b.n	80012e8 <__aeabi_dadd+0x3b0>
 8001126:	000a      	movs	r2, r1
 8001128:	431a      	orrs	r2, r3
 800112a:	2e00      	cmp	r6, #0
 800112c:	d000      	beq.n	8001130 <__aeabi_dadd+0x1f8>
 800112e:	e174      	b.n	800141a <__aeabi_dadd+0x4e2>
 8001130:	2a00      	cmp	r2, #0
 8001132:	d100      	bne.n	8001136 <__aeabi_dadd+0x1fe>
 8001134:	e1d0      	b.n	80014d8 <__aeabi_dadd+0x5a0>
 8001136:	464a      	mov	r2, r9
 8001138:	4302      	orrs	r2, r0
 800113a:	d000      	beq.n	800113e <__aeabi_dadd+0x206>
 800113c:	e1e3      	b.n	8001506 <__aeabi_dadd+0x5ce>
 800113e:	074a      	lsls	r2, r1, #29
 8001140:	08db      	lsrs	r3, r3, #3
 8001142:	4313      	orrs	r3, r2
 8001144:	08c9      	lsrs	r1, r1, #3
 8001146:	e029      	b.n	800119c <__aeabi_dadd+0x264>
 8001148:	464a      	mov	r2, r9
 800114a:	4302      	orrs	r2, r0
 800114c:	d100      	bne.n	8001150 <__aeabi_dadd+0x218>
 800114e:	e17d      	b.n	800144c <__aeabi_dadd+0x514>
 8001150:	1e7a      	subs	r2, r7, #1
 8001152:	2f01      	cmp	r7, #1
 8001154:	d100      	bne.n	8001158 <__aeabi_dadd+0x220>
 8001156:	e0e0      	b.n	800131a <__aeabi_dadd+0x3e2>
 8001158:	4c52      	ldr	r4, [pc, #328]	; (80012a4 <__aeabi_dadd+0x36c>)
 800115a:	42a7      	cmp	r7, r4
 800115c:	d100      	bne.n	8001160 <__aeabi_dadd+0x228>
 800115e:	e166      	b.n	800142e <__aeabi_dadd+0x4f6>
 8001160:	0017      	movs	r7, r2
 8001162:	e7b2      	b.n	80010ca <__aeabi_dadd+0x192>
 8001164:	0010      	movs	r0, r2
 8001166:	3b1f      	subs	r3, #31
 8001168:	40d8      	lsrs	r0, r3
 800116a:	2920      	cmp	r1, #32
 800116c:	d003      	beq.n	8001176 <__aeabi_dadd+0x23e>
 800116e:	2340      	movs	r3, #64	; 0x40
 8001170:	1a5b      	subs	r3, r3, r1
 8001172:	409a      	lsls	r2, r3
 8001174:	4314      	orrs	r4, r2
 8001176:	1e63      	subs	r3, r4, #1
 8001178:	419c      	sbcs	r4, r3
 800117a:	2300      	movs	r3, #0
 800117c:	2600      	movs	r6, #0
 800117e:	469a      	mov	sl, r3
 8001180:	4304      	orrs	r4, r0
 8001182:	0763      	lsls	r3, r4, #29
 8001184:	d000      	beq.n	8001188 <__aeabi_dadd+0x250>
 8001186:	e755      	b.n	8001034 <__aeabi_dadd+0xfc>
 8001188:	4652      	mov	r2, sl
 800118a:	08e3      	lsrs	r3, r4, #3
 800118c:	0752      	lsls	r2, r2, #29
 800118e:	4313      	orrs	r3, r2
 8001190:	4652      	mov	r2, sl
 8001192:	0037      	movs	r7, r6
 8001194:	08d1      	lsrs	r1, r2, #3
 8001196:	4a43      	ldr	r2, [pc, #268]	; (80012a4 <__aeabi_dadd+0x36c>)
 8001198:	4297      	cmp	r7, r2
 800119a:	d01f      	beq.n	80011dc <__aeabi_dadd+0x2a4>
 800119c:	0309      	lsls	r1, r1, #12
 800119e:	057a      	lsls	r2, r7, #21
 80011a0:	0b0c      	lsrs	r4, r1, #12
 80011a2:	0d52      	lsrs	r2, r2, #21
 80011a4:	e764      	b.n	8001070 <__aeabi_dadd+0x138>
 80011a6:	4642      	mov	r2, r8
 80011a8:	464c      	mov	r4, r9
 80011aa:	4314      	orrs	r4, r2
 80011ac:	1e62      	subs	r2, r4, #1
 80011ae:	4194      	sbcs	r4, r2
 80011b0:	18e4      	adds	r4, r4, r3
 80011b2:	429c      	cmp	r4, r3
 80011b4:	4192      	sbcs	r2, r2
 80011b6:	4252      	negs	r2, r2
 80011b8:	4692      	mov	sl, r2
 80011ba:	448a      	add	sl, r1
 80011bc:	4653      	mov	r3, sl
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	d5df      	bpl.n	8001182 <__aeabi_dadd+0x24a>
 80011c2:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <__aeabi_dadd+0x36c>)
 80011c4:	3601      	adds	r6, #1
 80011c6:	429e      	cmp	r6, r3
 80011c8:	d000      	beq.n	80011cc <__aeabi_dadd+0x294>
 80011ca:	e0b3      	b.n	8001334 <__aeabi_dadd+0x3fc>
 80011cc:	0032      	movs	r2, r6
 80011ce:	2400      	movs	r4, #0
 80011d0:	2300      	movs	r3, #0
 80011d2:	e74d      	b.n	8001070 <__aeabi_dadd+0x138>
 80011d4:	074a      	lsls	r2, r1, #29
 80011d6:	08db      	lsrs	r3, r3, #3
 80011d8:	4313      	orrs	r3, r2
 80011da:	08c9      	lsrs	r1, r1, #3
 80011dc:	001a      	movs	r2, r3
 80011de:	430a      	orrs	r2, r1
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dadd+0x2ac>
 80011e2:	e200      	b.n	80015e6 <__aeabi_dadd+0x6ae>
 80011e4:	2480      	movs	r4, #128	; 0x80
 80011e6:	0324      	lsls	r4, r4, #12
 80011e8:	430c      	orrs	r4, r1
 80011ea:	0324      	lsls	r4, r4, #12
 80011ec:	4a2d      	ldr	r2, [pc, #180]	; (80012a4 <__aeabi_dadd+0x36c>)
 80011ee:	0b24      	lsrs	r4, r4, #12
 80011f0:	e73e      	b.n	8001070 <__aeabi_dadd+0x138>
 80011f2:	0020      	movs	r0, r4
 80011f4:	f001 fc6a 	bl	8002acc <__clzsi2>
 80011f8:	0003      	movs	r3, r0
 80011fa:	3318      	adds	r3, #24
 80011fc:	2b1f      	cmp	r3, #31
 80011fe:	dc00      	bgt.n	8001202 <__aeabi_dadd+0x2ca>
 8001200:	e6f7      	b.n	8000ff2 <__aeabi_dadd+0xba>
 8001202:	0022      	movs	r2, r4
 8001204:	3808      	subs	r0, #8
 8001206:	4082      	lsls	r2, r0
 8001208:	2400      	movs	r4, #0
 800120a:	42b3      	cmp	r3, r6
 800120c:	db00      	blt.n	8001210 <__aeabi_dadd+0x2d8>
 800120e:	e6fc      	b.n	800100a <__aeabi_dadd+0xd2>
 8001210:	1af6      	subs	r6, r6, r3
 8001212:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <__aeabi_dadd+0x370>)
 8001214:	401a      	ands	r2, r3
 8001216:	4692      	mov	sl, r2
 8001218:	e70a      	b.n	8001030 <__aeabi_dadd+0xf8>
 800121a:	2f00      	cmp	r7, #0
 800121c:	d02b      	beq.n	8001276 <__aeabi_dadd+0x33e>
 800121e:	1b97      	subs	r7, r2, r6
 8001220:	2e00      	cmp	r6, #0
 8001222:	d100      	bne.n	8001226 <__aeabi_dadd+0x2ee>
 8001224:	e0b8      	b.n	8001398 <__aeabi_dadd+0x460>
 8001226:	4c1f      	ldr	r4, [pc, #124]	; (80012a4 <__aeabi_dadd+0x36c>)
 8001228:	42a2      	cmp	r2, r4
 800122a:	d100      	bne.n	800122e <__aeabi_dadd+0x2f6>
 800122c:	e11c      	b.n	8001468 <__aeabi_dadd+0x530>
 800122e:	2480      	movs	r4, #128	; 0x80
 8001230:	0424      	lsls	r4, r4, #16
 8001232:	4321      	orrs	r1, r4
 8001234:	2f38      	cmp	r7, #56	; 0x38
 8001236:	dd00      	ble.n	800123a <__aeabi_dadd+0x302>
 8001238:	e11e      	b.n	8001478 <__aeabi_dadd+0x540>
 800123a:	2f1f      	cmp	r7, #31
 800123c:	dd00      	ble.n	8001240 <__aeabi_dadd+0x308>
 800123e:	e19e      	b.n	800157e <__aeabi_dadd+0x646>
 8001240:	2620      	movs	r6, #32
 8001242:	000c      	movs	r4, r1
 8001244:	1bf6      	subs	r6, r6, r7
 8001246:	0018      	movs	r0, r3
 8001248:	40b3      	lsls	r3, r6
 800124a:	40b4      	lsls	r4, r6
 800124c:	40f8      	lsrs	r0, r7
 800124e:	1e5e      	subs	r6, r3, #1
 8001250:	41b3      	sbcs	r3, r6
 8001252:	40f9      	lsrs	r1, r7
 8001254:	4304      	orrs	r4, r0
 8001256:	431c      	orrs	r4, r3
 8001258:	4489      	add	r9, r1
 800125a:	4444      	add	r4, r8
 800125c:	4544      	cmp	r4, r8
 800125e:	419b      	sbcs	r3, r3
 8001260:	425b      	negs	r3, r3
 8001262:	444b      	add	r3, r9
 8001264:	469a      	mov	sl, r3
 8001266:	0016      	movs	r6, r2
 8001268:	e7a8      	b.n	80011bc <__aeabi_dadd+0x284>
 800126a:	4642      	mov	r2, r8
 800126c:	464c      	mov	r4, r9
 800126e:	4314      	orrs	r4, r2
 8001270:	1e62      	subs	r2, r4, #1
 8001272:	4194      	sbcs	r4, r2
 8001274:	e6a6      	b.n	8000fc4 <__aeabi_dadd+0x8c>
 8001276:	4c0d      	ldr	r4, [pc, #52]	; (80012ac <__aeabi_dadd+0x374>)
 8001278:	1c72      	adds	r2, r6, #1
 800127a:	4222      	tst	r2, r4
 800127c:	d000      	beq.n	8001280 <__aeabi_dadd+0x348>
 800127e:	e0a8      	b.n	80013d2 <__aeabi_dadd+0x49a>
 8001280:	000a      	movs	r2, r1
 8001282:	431a      	orrs	r2, r3
 8001284:	2e00      	cmp	r6, #0
 8001286:	d000      	beq.n	800128a <__aeabi_dadd+0x352>
 8001288:	e10a      	b.n	80014a0 <__aeabi_dadd+0x568>
 800128a:	2a00      	cmp	r2, #0
 800128c:	d100      	bne.n	8001290 <__aeabi_dadd+0x358>
 800128e:	e15e      	b.n	800154e <__aeabi_dadd+0x616>
 8001290:	464a      	mov	r2, r9
 8001292:	4302      	orrs	r2, r0
 8001294:	d000      	beq.n	8001298 <__aeabi_dadd+0x360>
 8001296:	e161      	b.n	800155c <__aeabi_dadd+0x624>
 8001298:	074a      	lsls	r2, r1, #29
 800129a:	08db      	lsrs	r3, r3, #3
 800129c:	4313      	orrs	r3, r2
 800129e:	08c9      	lsrs	r1, r1, #3
 80012a0:	e77c      	b.n	800119c <__aeabi_dadd+0x264>
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	000007ff 	.word	0x000007ff
 80012a8:	ff7fffff 	.word	0xff7fffff
 80012ac:	000007fe 	.word	0x000007fe
 80012b0:	4ccf      	ldr	r4, [pc, #828]	; (80015f0 <__aeabi_dadd+0x6b8>)
 80012b2:	42a2      	cmp	r2, r4
 80012b4:	d100      	bne.n	80012b8 <__aeabi_dadd+0x380>
 80012b6:	e0ce      	b.n	8001456 <__aeabi_dadd+0x51e>
 80012b8:	2480      	movs	r4, #128	; 0x80
 80012ba:	0424      	lsls	r4, r4, #16
 80012bc:	4321      	orrs	r1, r4
 80012be:	2f38      	cmp	r7, #56	; 0x38
 80012c0:	dc5b      	bgt.n	800137a <__aeabi_dadd+0x442>
 80012c2:	2f1f      	cmp	r7, #31
 80012c4:	dd00      	ble.n	80012c8 <__aeabi_dadd+0x390>
 80012c6:	e0dc      	b.n	8001482 <__aeabi_dadd+0x54a>
 80012c8:	2520      	movs	r5, #32
 80012ca:	000c      	movs	r4, r1
 80012cc:	1bed      	subs	r5, r5, r7
 80012ce:	001e      	movs	r6, r3
 80012d0:	40ab      	lsls	r3, r5
 80012d2:	40ac      	lsls	r4, r5
 80012d4:	40fe      	lsrs	r6, r7
 80012d6:	1e5d      	subs	r5, r3, #1
 80012d8:	41ab      	sbcs	r3, r5
 80012da:	4334      	orrs	r4, r6
 80012dc:	40f9      	lsrs	r1, r7
 80012de:	431c      	orrs	r4, r3
 80012e0:	464b      	mov	r3, r9
 80012e2:	1a5b      	subs	r3, r3, r1
 80012e4:	4699      	mov	r9, r3
 80012e6:	e04c      	b.n	8001382 <__aeabi_dadd+0x44a>
 80012e8:	464a      	mov	r2, r9
 80012ea:	1a1c      	subs	r4, r3, r0
 80012ec:	1a88      	subs	r0, r1, r2
 80012ee:	42a3      	cmp	r3, r4
 80012f0:	4192      	sbcs	r2, r2
 80012f2:	4252      	negs	r2, r2
 80012f4:	4692      	mov	sl, r2
 80012f6:	0002      	movs	r2, r0
 80012f8:	4650      	mov	r0, sl
 80012fa:	1a12      	subs	r2, r2, r0
 80012fc:	4692      	mov	sl, r2
 80012fe:	0212      	lsls	r2, r2, #8
 8001300:	d478      	bmi.n	80013f4 <__aeabi_dadd+0x4bc>
 8001302:	4653      	mov	r3, sl
 8001304:	4323      	orrs	r3, r4
 8001306:	d000      	beq.n	800130a <__aeabi_dadd+0x3d2>
 8001308:	e66a      	b.n	8000fe0 <__aeabi_dadd+0xa8>
 800130a:	2100      	movs	r1, #0
 800130c:	2500      	movs	r5, #0
 800130e:	e745      	b.n	800119c <__aeabi_dadd+0x264>
 8001310:	074a      	lsls	r2, r1, #29
 8001312:	08db      	lsrs	r3, r3, #3
 8001314:	4313      	orrs	r3, r2
 8001316:	08c9      	lsrs	r1, r1, #3
 8001318:	e73d      	b.n	8001196 <__aeabi_dadd+0x25e>
 800131a:	181c      	adds	r4, r3, r0
 800131c:	429c      	cmp	r4, r3
 800131e:	419b      	sbcs	r3, r3
 8001320:	4449      	add	r1, r9
 8001322:	468a      	mov	sl, r1
 8001324:	425b      	negs	r3, r3
 8001326:	449a      	add	sl, r3
 8001328:	4653      	mov	r3, sl
 800132a:	2601      	movs	r6, #1
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	d400      	bmi.n	8001332 <__aeabi_dadd+0x3fa>
 8001330:	e727      	b.n	8001182 <__aeabi_dadd+0x24a>
 8001332:	2602      	movs	r6, #2
 8001334:	4652      	mov	r2, sl
 8001336:	4baf      	ldr	r3, [pc, #700]	; (80015f4 <__aeabi_dadd+0x6bc>)
 8001338:	2101      	movs	r1, #1
 800133a:	401a      	ands	r2, r3
 800133c:	0013      	movs	r3, r2
 800133e:	4021      	ands	r1, r4
 8001340:	0862      	lsrs	r2, r4, #1
 8001342:	430a      	orrs	r2, r1
 8001344:	07dc      	lsls	r4, r3, #31
 8001346:	085b      	lsrs	r3, r3, #1
 8001348:	469a      	mov	sl, r3
 800134a:	4314      	orrs	r4, r2
 800134c:	e670      	b.n	8001030 <__aeabi_dadd+0xf8>
 800134e:	003a      	movs	r2, r7
 8001350:	464c      	mov	r4, r9
 8001352:	3a20      	subs	r2, #32
 8001354:	40d4      	lsrs	r4, r2
 8001356:	46a4      	mov	ip, r4
 8001358:	2f20      	cmp	r7, #32
 800135a:	d007      	beq.n	800136c <__aeabi_dadd+0x434>
 800135c:	2240      	movs	r2, #64	; 0x40
 800135e:	4648      	mov	r0, r9
 8001360:	1bd2      	subs	r2, r2, r7
 8001362:	4090      	lsls	r0, r2
 8001364:	0002      	movs	r2, r0
 8001366:	4640      	mov	r0, r8
 8001368:	4310      	orrs	r0, r2
 800136a:	4680      	mov	r8, r0
 800136c:	4640      	mov	r0, r8
 800136e:	1e42      	subs	r2, r0, #1
 8001370:	4190      	sbcs	r0, r2
 8001372:	4662      	mov	r2, ip
 8001374:	0004      	movs	r4, r0
 8001376:	4314      	orrs	r4, r2
 8001378:	e624      	b.n	8000fc4 <__aeabi_dadd+0x8c>
 800137a:	4319      	orrs	r1, r3
 800137c:	000c      	movs	r4, r1
 800137e:	1e63      	subs	r3, r4, #1
 8001380:	419c      	sbcs	r4, r3
 8001382:	4643      	mov	r3, r8
 8001384:	1b1c      	subs	r4, r3, r4
 8001386:	45a0      	cmp	r8, r4
 8001388:	419b      	sbcs	r3, r3
 800138a:	4649      	mov	r1, r9
 800138c:	425b      	negs	r3, r3
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	469a      	mov	sl, r3
 8001392:	4665      	mov	r5, ip
 8001394:	0016      	movs	r6, r2
 8001396:	e61b      	b.n	8000fd0 <__aeabi_dadd+0x98>
 8001398:	000c      	movs	r4, r1
 800139a:	431c      	orrs	r4, r3
 800139c:	d100      	bne.n	80013a0 <__aeabi_dadd+0x468>
 800139e:	e0c7      	b.n	8001530 <__aeabi_dadd+0x5f8>
 80013a0:	1e7c      	subs	r4, r7, #1
 80013a2:	2f01      	cmp	r7, #1
 80013a4:	d100      	bne.n	80013a8 <__aeabi_dadd+0x470>
 80013a6:	e0f9      	b.n	800159c <__aeabi_dadd+0x664>
 80013a8:	4e91      	ldr	r6, [pc, #580]	; (80015f0 <__aeabi_dadd+0x6b8>)
 80013aa:	42b7      	cmp	r7, r6
 80013ac:	d05c      	beq.n	8001468 <__aeabi_dadd+0x530>
 80013ae:	0027      	movs	r7, r4
 80013b0:	e740      	b.n	8001234 <__aeabi_dadd+0x2fc>
 80013b2:	2220      	movs	r2, #32
 80013b4:	464c      	mov	r4, r9
 80013b6:	4640      	mov	r0, r8
 80013b8:	1bd2      	subs	r2, r2, r7
 80013ba:	4094      	lsls	r4, r2
 80013bc:	40f8      	lsrs	r0, r7
 80013be:	4304      	orrs	r4, r0
 80013c0:	4640      	mov	r0, r8
 80013c2:	4090      	lsls	r0, r2
 80013c4:	1e42      	subs	r2, r0, #1
 80013c6:	4190      	sbcs	r0, r2
 80013c8:	464a      	mov	r2, r9
 80013ca:	40fa      	lsrs	r2, r7
 80013cc:	4304      	orrs	r4, r0
 80013ce:	1889      	adds	r1, r1, r2
 80013d0:	e6ee      	b.n	80011b0 <__aeabi_dadd+0x278>
 80013d2:	4c87      	ldr	r4, [pc, #540]	; (80015f0 <__aeabi_dadd+0x6b8>)
 80013d4:	42a2      	cmp	r2, r4
 80013d6:	d100      	bne.n	80013da <__aeabi_dadd+0x4a2>
 80013d8:	e6f9      	b.n	80011ce <__aeabi_dadd+0x296>
 80013da:	1818      	adds	r0, r3, r0
 80013dc:	4298      	cmp	r0, r3
 80013de:	419b      	sbcs	r3, r3
 80013e0:	4449      	add	r1, r9
 80013e2:	425b      	negs	r3, r3
 80013e4:	18cb      	adds	r3, r1, r3
 80013e6:	07dc      	lsls	r4, r3, #31
 80013e8:	0840      	lsrs	r0, r0, #1
 80013ea:	085b      	lsrs	r3, r3, #1
 80013ec:	469a      	mov	sl, r3
 80013ee:	0016      	movs	r6, r2
 80013f0:	4304      	orrs	r4, r0
 80013f2:	e6c6      	b.n	8001182 <__aeabi_dadd+0x24a>
 80013f4:	4642      	mov	r2, r8
 80013f6:	1ad4      	subs	r4, r2, r3
 80013f8:	45a0      	cmp	r8, r4
 80013fa:	4180      	sbcs	r0, r0
 80013fc:	464b      	mov	r3, r9
 80013fe:	4240      	negs	r0, r0
 8001400:	1a59      	subs	r1, r3, r1
 8001402:	1a0b      	subs	r3, r1, r0
 8001404:	469a      	mov	sl, r3
 8001406:	4665      	mov	r5, ip
 8001408:	e5ea      	b.n	8000fe0 <__aeabi_dadd+0xa8>
 800140a:	464b      	mov	r3, r9
 800140c:	464a      	mov	r2, r9
 800140e:	08c0      	lsrs	r0, r0, #3
 8001410:	075b      	lsls	r3, r3, #29
 8001412:	4665      	mov	r5, ip
 8001414:	4303      	orrs	r3, r0
 8001416:	08d1      	lsrs	r1, r2, #3
 8001418:	e6bd      	b.n	8001196 <__aeabi_dadd+0x25e>
 800141a:	2a00      	cmp	r2, #0
 800141c:	d000      	beq.n	8001420 <__aeabi_dadd+0x4e8>
 800141e:	e08e      	b.n	800153e <__aeabi_dadd+0x606>
 8001420:	464b      	mov	r3, r9
 8001422:	4303      	orrs	r3, r0
 8001424:	d117      	bne.n	8001456 <__aeabi_dadd+0x51e>
 8001426:	2180      	movs	r1, #128	; 0x80
 8001428:	2500      	movs	r5, #0
 800142a:	0309      	lsls	r1, r1, #12
 800142c:	e6da      	b.n	80011e4 <__aeabi_dadd+0x2ac>
 800142e:	074a      	lsls	r2, r1, #29
 8001430:	08db      	lsrs	r3, r3, #3
 8001432:	4313      	orrs	r3, r2
 8001434:	08c9      	lsrs	r1, r1, #3
 8001436:	e6d1      	b.n	80011dc <__aeabi_dadd+0x2a4>
 8001438:	1a1c      	subs	r4, r3, r0
 800143a:	464a      	mov	r2, r9
 800143c:	42a3      	cmp	r3, r4
 800143e:	419b      	sbcs	r3, r3
 8001440:	1a89      	subs	r1, r1, r2
 8001442:	425b      	negs	r3, r3
 8001444:	1acb      	subs	r3, r1, r3
 8001446:	469a      	mov	sl, r3
 8001448:	2601      	movs	r6, #1
 800144a:	e5c1      	b.n	8000fd0 <__aeabi_dadd+0x98>
 800144c:	074a      	lsls	r2, r1, #29
 800144e:	08db      	lsrs	r3, r3, #3
 8001450:	4313      	orrs	r3, r2
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	e69f      	b.n	8001196 <__aeabi_dadd+0x25e>
 8001456:	4643      	mov	r3, r8
 8001458:	08d8      	lsrs	r0, r3, #3
 800145a:	464b      	mov	r3, r9
 800145c:	464a      	mov	r2, r9
 800145e:	075b      	lsls	r3, r3, #29
 8001460:	4665      	mov	r5, ip
 8001462:	4303      	orrs	r3, r0
 8001464:	08d1      	lsrs	r1, r2, #3
 8001466:	e6b9      	b.n	80011dc <__aeabi_dadd+0x2a4>
 8001468:	4643      	mov	r3, r8
 800146a:	08d8      	lsrs	r0, r3, #3
 800146c:	464b      	mov	r3, r9
 800146e:	464a      	mov	r2, r9
 8001470:	075b      	lsls	r3, r3, #29
 8001472:	4303      	orrs	r3, r0
 8001474:	08d1      	lsrs	r1, r2, #3
 8001476:	e6b1      	b.n	80011dc <__aeabi_dadd+0x2a4>
 8001478:	4319      	orrs	r1, r3
 800147a:	000c      	movs	r4, r1
 800147c:	1e63      	subs	r3, r4, #1
 800147e:	419c      	sbcs	r4, r3
 8001480:	e6eb      	b.n	800125a <__aeabi_dadd+0x322>
 8001482:	003c      	movs	r4, r7
 8001484:	000d      	movs	r5, r1
 8001486:	3c20      	subs	r4, #32
 8001488:	40e5      	lsrs	r5, r4
 800148a:	2f20      	cmp	r7, #32
 800148c:	d003      	beq.n	8001496 <__aeabi_dadd+0x55e>
 800148e:	2440      	movs	r4, #64	; 0x40
 8001490:	1be4      	subs	r4, r4, r7
 8001492:	40a1      	lsls	r1, r4
 8001494:	430b      	orrs	r3, r1
 8001496:	001c      	movs	r4, r3
 8001498:	1e63      	subs	r3, r4, #1
 800149a:	419c      	sbcs	r4, r3
 800149c:	432c      	orrs	r4, r5
 800149e:	e770      	b.n	8001382 <__aeabi_dadd+0x44a>
 80014a0:	2a00      	cmp	r2, #0
 80014a2:	d0e1      	beq.n	8001468 <__aeabi_dadd+0x530>
 80014a4:	464a      	mov	r2, r9
 80014a6:	4302      	orrs	r2, r0
 80014a8:	d0c1      	beq.n	800142e <__aeabi_dadd+0x4f6>
 80014aa:	074a      	lsls	r2, r1, #29
 80014ac:	08db      	lsrs	r3, r3, #3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	08c9      	lsrs	r1, r1, #3
 80014b4:	0312      	lsls	r2, r2, #12
 80014b6:	4211      	tst	r1, r2
 80014b8:	d008      	beq.n	80014cc <__aeabi_dadd+0x594>
 80014ba:	4648      	mov	r0, r9
 80014bc:	08c4      	lsrs	r4, r0, #3
 80014be:	4214      	tst	r4, r2
 80014c0:	d104      	bne.n	80014cc <__aeabi_dadd+0x594>
 80014c2:	4643      	mov	r3, r8
 80014c4:	0021      	movs	r1, r4
 80014c6:	08db      	lsrs	r3, r3, #3
 80014c8:	0742      	lsls	r2, r0, #29
 80014ca:	4313      	orrs	r3, r2
 80014cc:	0f5a      	lsrs	r2, r3, #29
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	0752      	lsls	r2, r2, #29
 80014d2:	08db      	lsrs	r3, r3, #3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	e681      	b.n	80011dc <__aeabi_dadd+0x2a4>
 80014d8:	464b      	mov	r3, r9
 80014da:	4303      	orrs	r3, r0
 80014dc:	d100      	bne.n	80014e0 <__aeabi_dadd+0x5a8>
 80014de:	e714      	b.n	800130a <__aeabi_dadd+0x3d2>
 80014e0:	464b      	mov	r3, r9
 80014e2:	464a      	mov	r2, r9
 80014e4:	08c0      	lsrs	r0, r0, #3
 80014e6:	075b      	lsls	r3, r3, #29
 80014e8:	4665      	mov	r5, ip
 80014ea:	4303      	orrs	r3, r0
 80014ec:	08d1      	lsrs	r1, r2, #3
 80014ee:	e655      	b.n	800119c <__aeabi_dadd+0x264>
 80014f0:	1ac4      	subs	r4, r0, r3
 80014f2:	45a0      	cmp	r8, r4
 80014f4:	4180      	sbcs	r0, r0
 80014f6:	464b      	mov	r3, r9
 80014f8:	4240      	negs	r0, r0
 80014fa:	1a59      	subs	r1, r3, r1
 80014fc:	1a0b      	subs	r3, r1, r0
 80014fe:	469a      	mov	sl, r3
 8001500:	4665      	mov	r5, ip
 8001502:	2601      	movs	r6, #1
 8001504:	e564      	b.n	8000fd0 <__aeabi_dadd+0x98>
 8001506:	1a1c      	subs	r4, r3, r0
 8001508:	464a      	mov	r2, r9
 800150a:	42a3      	cmp	r3, r4
 800150c:	4180      	sbcs	r0, r0
 800150e:	1a8a      	subs	r2, r1, r2
 8001510:	4240      	negs	r0, r0
 8001512:	1a12      	subs	r2, r2, r0
 8001514:	4692      	mov	sl, r2
 8001516:	0212      	lsls	r2, r2, #8
 8001518:	d549      	bpl.n	80015ae <__aeabi_dadd+0x676>
 800151a:	4642      	mov	r2, r8
 800151c:	1ad4      	subs	r4, r2, r3
 800151e:	45a0      	cmp	r8, r4
 8001520:	4180      	sbcs	r0, r0
 8001522:	464b      	mov	r3, r9
 8001524:	4240      	negs	r0, r0
 8001526:	1a59      	subs	r1, r3, r1
 8001528:	1a0b      	subs	r3, r1, r0
 800152a:	469a      	mov	sl, r3
 800152c:	4665      	mov	r5, ip
 800152e:	e57f      	b.n	8001030 <__aeabi_dadd+0xf8>
 8001530:	464b      	mov	r3, r9
 8001532:	464a      	mov	r2, r9
 8001534:	08c0      	lsrs	r0, r0, #3
 8001536:	075b      	lsls	r3, r3, #29
 8001538:	4303      	orrs	r3, r0
 800153a:	08d1      	lsrs	r1, r2, #3
 800153c:	e62b      	b.n	8001196 <__aeabi_dadd+0x25e>
 800153e:	464a      	mov	r2, r9
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	4302      	orrs	r2, r0
 8001544:	d138      	bne.n	80015b8 <__aeabi_dadd+0x680>
 8001546:	074a      	lsls	r2, r1, #29
 8001548:	4313      	orrs	r3, r2
 800154a:	08c9      	lsrs	r1, r1, #3
 800154c:	e646      	b.n	80011dc <__aeabi_dadd+0x2a4>
 800154e:	464b      	mov	r3, r9
 8001550:	464a      	mov	r2, r9
 8001552:	08c0      	lsrs	r0, r0, #3
 8001554:	075b      	lsls	r3, r3, #29
 8001556:	4303      	orrs	r3, r0
 8001558:	08d1      	lsrs	r1, r2, #3
 800155a:	e61f      	b.n	800119c <__aeabi_dadd+0x264>
 800155c:	181c      	adds	r4, r3, r0
 800155e:	429c      	cmp	r4, r3
 8001560:	419b      	sbcs	r3, r3
 8001562:	4449      	add	r1, r9
 8001564:	468a      	mov	sl, r1
 8001566:	425b      	negs	r3, r3
 8001568:	449a      	add	sl, r3
 800156a:	4653      	mov	r3, sl
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	d400      	bmi.n	8001572 <__aeabi_dadd+0x63a>
 8001570:	e607      	b.n	8001182 <__aeabi_dadd+0x24a>
 8001572:	4652      	mov	r2, sl
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <__aeabi_dadd+0x6bc>)
 8001576:	2601      	movs	r6, #1
 8001578:	401a      	ands	r2, r3
 800157a:	4692      	mov	sl, r2
 800157c:	e601      	b.n	8001182 <__aeabi_dadd+0x24a>
 800157e:	003c      	movs	r4, r7
 8001580:	000e      	movs	r6, r1
 8001582:	3c20      	subs	r4, #32
 8001584:	40e6      	lsrs	r6, r4
 8001586:	2f20      	cmp	r7, #32
 8001588:	d003      	beq.n	8001592 <__aeabi_dadd+0x65a>
 800158a:	2440      	movs	r4, #64	; 0x40
 800158c:	1be4      	subs	r4, r4, r7
 800158e:	40a1      	lsls	r1, r4
 8001590:	430b      	orrs	r3, r1
 8001592:	001c      	movs	r4, r3
 8001594:	1e63      	subs	r3, r4, #1
 8001596:	419c      	sbcs	r4, r3
 8001598:	4334      	orrs	r4, r6
 800159a:	e65e      	b.n	800125a <__aeabi_dadd+0x322>
 800159c:	4443      	add	r3, r8
 800159e:	4283      	cmp	r3, r0
 80015a0:	4180      	sbcs	r0, r0
 80015a2:	4449      	add	r1, r9
 80015a4:	468a      	mov	sl, r1
 80015a6:	4240      	negs	r0, r0
 80015a8:	001c      	movs	r4, r3
 80015aa:	4482      	add	sl, r0
 80015ac:	e6bc      	b.n	8001328 <__aeabi_dadd+0x3f0>
 80015ae:	4653      	mov	r3, sl
 80015b0:	4323      	orrs	r3, r4
 80015b2:	d100      	bne.n	80015b6 <__aeabi_dadd+0x67e>
 80015b4:	e6a9      	b.n	800130a <__aeabi_dadd+0x3d2>
 80015b6:	e5e4      	b.n	8001182 <__aeabi_dadd+0x24a>
 80015b8:	074a      	lsls	r2, r1, #29
 80015ba:	4313      	orrs	r3, r2
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	08c9      	lsrs	r1, r1, #3
 80015c0:	0312      	lsls	r2, r2, #12
 80015c2:	4211      	tst	r1, r2
 80015c4:	d009      	beq.n	80015da <__aeabi_dadd+0x6a2>
 80015c6:	4648      	mov	r0, r9
 80015c8:	08c4      	lsrs	r4, r0, #3
 80015ca:	4214      	tst	r4, r2
 80015cc:	d105      	bne.n	80015da <__aeabi_dadd+0x6a2>
 80015ce:	4643      	mov	r3, r8
 80015d0:	4665      	mov	r5, ip
 80015d2:	0021      	movs	r1, r4
 80015d4:	08db      	lsrs	r3, r3, #3
 80015d6:	0742      	lsls	r2, r0, #29
 80015d8:	4313      	orrs	r3, r2
 80015da:	0f5a      	lsrs	r2, r3, #29
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	08db      	lsrs	r3, r3, #3
 80015e0:	0752      	lsls	r2, r2, #29
 80015e2:	4313      	orrs	r3, r2
 80015e4:	e5fa      	b.n	80011dc <__aeabi_dadd+0x2a4>
 80015e6:	2300      	movs	r3, #0
 80015e8:	4a01      	ldr	r2, [pc, #4]	; (80015f0 <__aeabi_dadd+0x6b8>)
 80015ea:	001c      	movs	r4, r3
 80015ec:	e540      	b.n	8001070 <__aeabi_dadd+0x138>
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	000007ff 	.word	0x000007ff
 80015f4:	ff7fffff 	.word	0xff7fffff

080015f8 <__aeabi_ddiv>:
 80015f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fa:	4657      	mov	r7, sl
 80015fc:	464e      	mov	r6, r9
 80015fe:	4645      	mov	r5, r8
 8001600:	46de      	mov	lr, fp
 8001602:	b5e0      	push	{r5, r6, r7, lr}
 8001604:	030c      	lsls	r4, r1, #12
 8001606:	001f      	movs	r7, r3
 8001608:	004b      	lsls	r3, r1, #1
 800160a:	4681      	mov	r9, r0
 800160c:	4692      	mov	sl, r2
 800160e:	0005      	movs	r5, r0
 8001610:	b085      	sub	sp, #20
 8001612:	0b24      	lsrs	r4, r4, #12
 8001614:	0d5b      	lsrs	r3, r3, #21
 8001616:	0fce      	lsrs	r6, r1, #31
 8001618:	2b00      	cmp	r3, #0
 800161a:	d100      	bne.n	800161e <__aeabi_ddiv+0x26>
 800161c:	e152      	b.n	80018c4 <__aeabi_ddiv+0x2cc>
 800161e:	4ad2      	ldr	r2, [pc, #840]	; (8001968 <__aeabi_ddiv+0x370>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d100      	bne.n	8001626 <__aeabi_ddiv+0x2e>
 8001624:	e16e      	b.n	8001904 <__aeabi_ddiv+0x30c>
 8001626:	0f42      	lsrs	r2, r0, #29
 8001628:	00e4      	lsls	r4, r4, #3
 800162a:	4314      	orrs	r4, r2
 800162c:	2280      	movs	r2, #128	; 0x80
 800162e:	0412      	lsls	r2, r2, #16
 8001630:	4322      	orrs	r2, r4
 8001632:	4690      	mov	r8, r2
 8001634:	4acd      	ldr	r2, [pc, #820]	; (800196c <__aeabi_ddiv+0x374>)
 8001636:	00c5      	lsls	r5, r0, #3
 8001638:	4693      	mov	fp, r2
 800163a:	449b      	add	fp, r3
 800163c:	2300      	movs	r3, #0
 800163e:	4699      	mov	r9, r3
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	033c      	lsls	r4, r7, #12
 8001644:	007b      	lsls	r3, r7, #1
 8001646:	4650      	mov	r0, sl
 8001648:	0b24      	lsrs	r4, r4, #12
 800164a:	0d5b      	lsrs	r3, r3, #21
 800164c:	0fff      	lsrs	r7, r7, #31
 800164e:	2b00      	cmp	r3, #0
 8001650:	d100      	bne.n	8001654 <__aeabi_ddiv+0x5c>
 8001652:	e11a      	b.n	800188a <__aeabi_ddiv+0x292>
 8001654:	4ac4      	ldr	r2, [pc, #784]	; (8001968 <__aeabi_ddiv+0x370>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d100      	bne.n	800165c <__aeabi_ddiv+0x64>
 800165a:	e15e      	b.n	800191a <__aeabi_ddiv+0x322>
 800165c:	0f42      	lsrs	r2, r0, #29
 800165e:	00e4      	lsls	r4, r4, #3
 8001660:	4322      	orrs	r2, r4
 8001662:	2480      	movs	r4, #128	; 0x80
 8001664:	0424      	lsls	r4, r4, #16
 8001666:	4314      	orrs	r4, r2
 8001668:	4ac0      	ldr	r2, [pc, #768]	; (800196c <__aeabi_ddiv+0x374>)
 800166a:	00c1      	lsls	r1, r0, #3
 800166c:	4694      	mov	ip, r2
 800166e:	465a      	mov	r2, fp
 8001670:	4463      	add	r3, ip
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	469b      	mov	fp, r3
 8001676:	2000      	movs	r0, #0
 8001678:	0033      	movs	r3, r6
 800167a:	407b      	eors	r3, r7
 800167c:	469a      	mov	sl, r3
 800167e:	464b      	mov	r3, r9
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d827      	bhi.n	80016d4 <__aeabi_ddiv+0xdc>
 8001684:	4aba      	ldr	r2, [pc, #744]	; (8001970 <__aeabi_ddiv+0x378>)
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	58d3      	ldr	r3, [r2, r3]
 800168a:	469f      	mov	pc, r3
 800168c:	46b2      	mov	sl, r6
 800168e:	9b00      	ldr	r3, [sp, #0]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d016      	beq.n	80016c2 <__aeabi_ddiv+0xca>
 8001694:	2b03      	cmp	r3, #3
 8001696:	d100      	bne.n	800169a <__aeabi_ddiv+0xa2>
 8001698:	e287      	b.n	8001baa <__aeabi_ddiv+0x5b2>
 800169a:	2b01      	cmp	r3, #1
 800169c:	d000      	beq.n	80016a0 <__aeabi_ddiv+0xa8>
 800169e:	e0d5      	b.n	800184c <__aeabi_ddiv+0x254>
 80016a0:	2300      	movs	r3, #0
 80016a2:	2200      	movs	r2, #0
 80016a4:	2500      	movs	r5, #0
 80016a6:	051b      	lsls	r3, r3, #20
 80016a8:	4313      	orrs	r3, r2
 80016aa:	4652      	mov	r2, sl
 80016ac:	07d2      	lsls	r2, r2, #31
 80016ae:	4313      	orrs	r3, r2
 80016b0:	0028      	movs	r0, r5
 80016b2:	0019      	movs	r1, r3
 80016b4:	b005      	add	sp, #20
 80016b6:	bcf0      	pop	{r4, r5, r6, r7}
 80016b8:	46bb      	mov	fp, r7
 80016ba:	46b2      	mov	sl, r6
 80016bc:	46a9      	mov	r9, r5
 80016be:	46a0      	mov	r8, r4
 80016c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c2:	2200      	movs	r2, #0
 80016c4:	2500      	movs	r5, #0
 80016c6:	4ba8      	ldr	r3, [pc, #672]	; (8001968 <__aeabi_ddiv+0x370>)
 80016c8:	e7ed      	b.n	80016a6 <__aeabi_ddiv+0xae>
 80016ca:	46ba      	mov	sl, r7
 80016cc:	46a0      	mov	r8, r4
 80016ce:	000d      	movs	r5, r1
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	e7dc      	b.n	800168e <__aeabi_ddiv+0x96>
 80016d4:	4544      	cmp	r4, r8
 80016d6:	d200      	bcs.n	80016da <__aeabi_ddiv+0xe2>
 80016d8:	e1c4      	b.n	8001a64 <__aeabi_ddiv+0x46c>
 80016da:	d100      	bne.n	80016de <__aeabi_ddiv+0xe6>
 80016dc:	e1bf      	b.n	8001a5e <__aeabi_ddiv+0x466>
 80016de:	2301      	movs	r3, #1
 80016e0:	425b      	negs	r3, r3
 80016e2:	469c      	mov	ip, r3
 80016e4:	002e      	movs	r6, r5
 80016e6:	4640      	mov	r0, r8
 80016e8:	2500      	movs	r5, #0
 80016ea:	44e3      	add	fp, ip
 80016ec:	0223      	lsls	r3, r4, #8
 80016ee:	0e0c      	lsrs	r4, r1, #24
 80016f0:	431c      	orrs	r4, r3
 80016f2:	0c1b      	lsrs	r3, r3, #16
 80016f4:	4699      	mov	r9, r3
 80016f6:	0423      	lsls	r3, r4, #16
 80016f8:	020a      	lsls	r2, r1, #8
 80016fa:	0c1f      	lsrs	r7, r3, #16
 80016fc:	4649      	mov	r1, r9
 80016fe:	9200      	str	r2, [sp, #0]
 8001700:	9701      	str	r7, [sp, #4]
 8001702:	f7fe fd99 	bl	8000238 <__aeabi_uidivmod>
 8001706:	0002      	movs	r2, r0
 8001708:	437a      	muls	r2, r7
 800170a:	040b      	lsls	r3, r1, #16
 800170c:	0c31      	lsrs	r1, r6, #16
 800170e:	4680      	mov	r8, r0
 8001710:	4319      	orrs	r1, r3
 8001712:	428a      	cmp	r2, r1
 8001714:	d907      	bls.n	8001726 <__aeabi_ddiv+0x12e>
 8001716:	2301      	movs	r3, #1
 8001718:	425b      	negs	r3, r3
 800171a:	469c      	mov	ip, r3
 800171c:	1909      	adds	r1, r1, r4
 800171e:	44e0      	add	r8, ip
 8001720:	428c      	cmp	r4, r1
 8001722:	d800      	bhi.n	8001726 <__aeabi_ddiv+0x12e>
 8001724:	e201      	b.n	8001b2a <__aeabi_ddiv+0x532>
 8001726:	1a88      	subs	r0, r1, r2
 8001728:	4649      	mov	r1, r9
 800172a:	f7fe fd85 	bl	8000238 <__aeabi_uidivmod>
 800172e:	9a01      	ldr	r2, [sp, #4]
 8001730:	0436      	lsls	r6, r6, #16
 8001732:	4342      	muls	r2, r0
 8001734:	0409      	lsls	r1, r1, #16
 8001736:	0c36      	lsrs	r6, r6, #16
 8001738:	0003      	movs	r3, r0
 800173a:	430e      	orrs	r6, r1
 800173c:	42b2      	cmp	r2, r6
 800173e:	d904      	bls.n	800174a <__aeabi_ddiv+0x152>
 8001740:	1936      	adds	r6, r6, r4
 8001742:	3b01      	subs	r3, #1
 8001744:	42b4      	cmp	r4, r6
 8001746:	d800      	bhi.n	800174a <__aeabi_ddiv+0x152>
 8001748:	e1e9      	b.n	8001b1e <__aeabi_ddiv+0x526>
 800174a:	1ab0      	subs	r0, r6, r2
 800174c:	4642      	mov	r2, r8
 800174e:	9e00      	ldr	r6, [sp, #0]
 8001750:	0412      	lsls	r2, r2, #16
 8001752:	431a      	orrs	r2, r3
 8001754:	0c33      	lsrs	r3, r6, #16
 8001756:	001f      	movs	r7, r3
 8001758:	0c11      	lsrs	r1, r2, #16
 800175a:	4690      	mov	r8, r2
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	0413      	lsls	r3, r2, #16
 8001760:	0432      	lsls	r2, r6, #16
 8001762:	0c16      	lsrs	r6, r2, #16
 8001764:	0032      	movs	r2, r6
 8001766:	0c1b      	lsrs	r3, r3, #16
 8001768:	435a      	muls	r2, r3
 800176a:	9603      	str	r6, [sp, #12]
 800176c:	437b      	muls	r3, r7
 800176e:	434e      	muls	r6, r1
 8001770:	4379      	muls	r1, r7
 8001772:	0c17      	lsrs	r7, r2, #16
 8001774:	46bc      	mov	ip, r7
 8001776:	199b      	adds	r3, r3, r6
 8001778:	4463      	add	r3, ip
 800177a:	429e      	cmp	r6, r3
 800177c:	d903      	bls.n	8001786 <__aeabi_ddiv+0x18e>
 800177e:	2680      	movs	r6, #128	; 0x80
 8001780:	0276      	lsls	r6, r6, #9
 8001782:	46b4      	mov	ip, r6
 8001784:	4461      	add	r1, ip
 8001786:	0c1e      	lsrs	r6, r3, #16
 8001788:	1871      	adds	r1, r6, r1
 800178a:	0416      	lsls	r6, r2, #16
 800178c:	041b      	lsls	r3, r3, #16
 800178e:	0c36      	lsrs	r6, r6, #16
 8001790:	199e      	adds	r6, r3, r6
 8001792:	4288      	cmp	r0, r1
 8001794:	d302      	bcc.n	800179c <__aeabi_ddiv+0x1a4>
 8001796:	d112      	bne.n	80017be <__aeabi_ddiv+0x1c6>
 8001798:	42b5      	cmp	r5, r6
 800179a:	d210      	bcs.n	80017be <__aeabi_ddiv+0x1c6>
 800179c:	4643      	mov	r3, r8
 800179e:	1e5a      	subs	r2, r3, #1
 80017a0:	9b00      	ldr	r3, [sp, #0]
 80017a2:	469c      	mov	ip, r3
 80017a4:	4465      	add	r5, ip
 80017a6:	001f      	movs	r7, r3
 80017a8:	429d      	cmp	r5, r3
 80017aa:	419b      	sbcs	r3, r3
 80017ac:	425b      	negs	r3, r3
 80017ae:	191b      	adds	r3, r3, r4
 80017b0:	18c0      	adds	r0, r0, r3
 80017b2:	4284      	cmp	r4, r0
 80017b4:	d200      	bcs.n	80017b8 <__aeabi_ddiv+0x1c0>
 80017b6:	e19e      	b.n	8001af6 <__aeabi_ddiv+0x4fe>
 80017b8:	d100      	bne.n	80017bc <__aeabi_ddiv+0x1c4>
 80017ba:	e199      	b.n	8001af0 <__aeabi_ddiv+0x4f8>
 80017bc:	4690      	mov	r8, r2
 80017be:	1bae      	subs	r6, r5, r6
 80017c0:	42b5      	cmp	r5, r6
 80017c2:	41ad      	sbcs	r5, r5
 80017c4:	1a40      	subs	r0, r0, r1
 80017c6:	426d      	negs	r5, r5
 80017c8:	1b40      	subs	r0, r0, r5
 80017ca:	4284      	cmp	r4, r0
 80017cc:	d100      	bne.n	80017d0 <__aeabi_ddiv+0x1d8>
 80017ce:	e1d2      	b.n	8001b76 <__aeabi_ddiv+0x57e>
 80017d0:	4649      	mov	r1, r9
 80017d2:	f7fe fd31 	bl	8000238 <__aeabi_uidivmod>
 80017d6:	9a01      	ldr	r2, [sp, #4]
 80017d8:	040b      	lsls	r3, r1, #16
 80017da:	4342      	muls	r2, r0
 80017dc:	0c31      	lsrs	r1, r6, #16
 80017de:	0005      	movs	r5, r0
 80017e0:	4319      	orrs	r1, r3
 80017e2:	428a      	cmp	r2, r1
 80017e4:	d900      	bls.n	80017e8 <__aeabi_ddiv+0x1f0>
 80017e6:	e16c      	b.n	8001ac2 <__aeabi_ddiv+0x4ca>
 80017e8:	1a88      	subs	r0, r1, r2
 80017ea:	4649      	mov	r1, r9
 80017ec:	f7fe fd24 	bl	8000238 <__aeabi_uidivmod>
 80017f0:	9a01      	ldr	r2, [sp, #4]
 80017f2:	0436      	lsls	r6, r6, #16
 80017f4:	4342      	muls	r2, r0
 80017f6:	0409      	lsls	r1, r1, #16
 80017f8:	0c36      	lsrs	r6, r6, #16
 80017fa:	0003      	movs	r3, r0
 80017fc:	430e      	orrs	r6, r1
 80017fe:	42b2      	cmp	r2, r6
 8001800:	d900      	bls.n	8001804 <__aeabi_ddiv+0x20c>
 8001802:	e153      	b.n	8001aac <__aeabi_ddiv+0x4b4>
 8001804:	9803      	ldr	r0, [sp, #12]
 8001806:	1ab6      	subs	r6, r6, r2
 8001808:	0002      	movs	r2, r0
 800180a:	042d      	lsls	r5, r5, #16
 800180c:	431d      	orrs	r5, r3
 800180e:	9f02      	ldr	r7, [sp, #8]
 8001810:	042b      	lsls	r3, r5, #16
 8001812:	0c1b      	lsrs	r3, r3, #16
 8001814:	435a      	muls	r2, r3
 8001816:	437b      	muls	r3, r7
 8001818:	469c      	mov	ip, r3
 800181a:	0c29      	lsrs	r1, r5, #16
 800181c:	4348      	muls	r0, r1
 800181e:	0c13      	lsrs	r3, r2, #16
 8001820:	4484      	add	ip, r0
 8001822:	4463      	add	r3, ip
 8001824:	4379      	muls	r1, r7
 8001826:	4298      	cmp	r0, r3
 8001828:	d903      	bls.n	8001832 <__aeabi_ddiv+0x23a>
 800182a:	2080      	movs	r0, #128	; 0x80
 800182c:	0240      	lsls	r0, r0, #9
 800182e:	4684      	mov	ip, r0
 8001830:	4461      	add	r1, ip
 8001832:	0c18      	lsrs	r0, r3, #16
 8001834:	0412      	lsls	r2, r2, #16
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	0c12      	lsrs	r2, r2, #16
 800183a:	1840      	adds	r0, r0, r1
 800183c:	189b      	adds	r3, r3, r2
 800183e:	4286      	cmp	r6, r0
 8001840:	d200      	bcs.n	8001844 <__aeabi_ddiv+0x24c>
 8001842:	e100      	b.n	8001a46 <__aeabi_ddiv+0x44e>
 8001844:	d100      	bne.n	8001848 <__aeabi_ddiv+0x250>
 8001846:	e0fb      	b.n	8001a40 <__aeabi_ddiv+0x448>
 8001848:	2301      	movs	r3, #1
 800184a:	431d      	orrs	r5, r3
 800184c:	4b49      	ldr	r3, [pc, #292]	; (8001974 <__aeabi_ddiv+0x37c>)
 800184e:	445b      	add	r3, fp
 8001850:	2b00      	cmp	r3, #0
 8001852:	dc00      	bgt.n	8001856 <__aeabi_ddiv+0x25e>
 8001854:	e0aa      	b.n	80019ac <__aeabi_ddiv+0x3b4>
 8001856:	076a      	lsls	r2, r5, #29
 8001858:	d000      	beq.n	800185c <__aeabi_ddiv+0x264>
 800185a:	e13d      	b.n	8001ad8 <__aeabi_ddiv+0x4e0>
 800185c:	08e9      	lsrs	r1, r5, #3
 800185e:	4642      	mov	r2, r8
 8001860:	01d2      	lsls	r2, r2, #7
 8001862:	d506      	bpl.n	8001872 <__aeabi_ddiv+0x27a>
 8001864:	4642      	mov	r2, r8
 8001866:	4b44      	ldr	r3, [pc, #272]	; (8001978 <__aeabi_ddiv+0x380>)
 8001868:	401a      	ands	r2, r3
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	4690      	mov	r8, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	445b      	add	r3, fp
 8001872:	4a42      	ldr	r2, [pc, #264]	; (800197c <__aeabi_ddiv+0x384>)
 8001874:	4293      	cmp	r3, r2
 8001876:	dd00      	ble.n	800187a <__aeabi_ddiv+0x282>
 8001878:	e723      	b.n	80016c2 <__aeabi_ddiv+0xca>
 800187a:	4642      	mov	r2, r8
 800187c:	055b      	lsls	r3, r3, #21
 800187e:	0755      	lsls	r5, r2, #29
 8001880:	0252      	lsls	r2, r2, #9
 8001882:	430d      	orrs	r5, r1
 8001884:	0b12      	lsrs	r2, r2, #12
 8001886:	0d5b      	lsrs	r3, r3, #21
 8001888:	e70d      	b.n	80016a6 <__aeabi_ddiv+0xae>
 800188a:	4651      	mov	r1, sl
 800188c:	4321      	orrs	r1, r4
 800188e:	d100      	bne.n	8001892 <__aeabi_ddiv+0x29a>
 8001890:	e07c      	b.n	800198c <__aeabi_ddiv+0x394>
 8001892:	2c00      	cmp	r4, #0
 8001894:	d100      	bne.n	8001898 <__aeabi_ddiv+0x2a0>
 8001896:	e0fb      	b.n	8001a90 <__aeabi_ddiv+0x498>
 8001898:	0020      	movs	r0, r4
 800189a:	f001 f917 	bl	8002acc <__clzsi2>
 800189e:	0002      	movs	r2, r0
 80018a0:	3a0b      	subs	r2, #11
 80018a2:	231d      	movs	r3, #29
 80018a4:	1a9b      	subs	r3, r3, r2
 80018a6:	4652      	mov	r2, sl
 80018a8:	0001      	movs	r1, r0
 80018aa:	40da      	lsrs	r2, r3
 80018ac:	4653      	mov	r3, sl
 80018ae:	3908      	subs	r1, #8
 80018b0:	408b      	lsls	r3, r1
 80018b2:	408c      	lsls	r4, r1
 80018b4:	0019      	movs	r1, r3
 80018b6:	4314      	orrs	r4, r2
 80018b8:	4b31      	ldr	r3, [pc, #196]	; (8001980 <__aeabi_ddiv+0x388>)
 80018ba:	4458      	add	r0, fp
 80018bc:	469b      	mov	fp, r3
 80018be:	4483      	add	fp, r0
 80018c0:	2000      	movs	r0, #0
 80018c2:	e6d9      	b.n	8001678 <__aeabi_ddiv+0x80>
 80018c4:	0003      	movs	r3, r0
 80018c6:	4323      	orrs	r3, r4
 80018c8:	4698      	mov	r8, r3
 80018ca:	d044      	beq.n	8001956 <__aeabi_ddiv+0x35e>
 80018cc:	2c00      	cmp	r4, #0
 80018ce:	d100      	bne.n	80018d2 <__aeabi_ddiv+0x2da>
 80018d0:	e0cf      	b.n	8001a72 <__aeabi_ddiv+0x47a>
 80018d2:	0020      	movs	r0, r4
 80018d4:	f001 f8fa 	bl	8002acc <__clzsi2>
 80018d8:	0001      	movs	r1, r0
 80018da:	0002      	movs	r2, r0
 80018dc:	390b      	subs	r1, #11
 80018de:	231d      	movs	r3, #29
 80018e0:	1a5b      	subs	r3, r3, r1
 80018e2:	4649      	mov	r1, r9
 80018e4:	0010      	movs	r0, r2
 80018e6:	40d9      	lsrs	r1, r3
 80018e8:	3808      	subs	r0, #8
 80018ea:	4084      	lsls	r4, r0
 80018ec:	000b      	movs	r3, r1
 80018ee:	464d      	mov	r5, r9
 80018f0:	4323      	orrs	r3, r4
 80018f2:	4698      	mov	r8, r3
 80018f4:	4085      	lsls	r5, r0
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <__aeabi_ddiv+0x38c>)
 80018f8:	1a9b      	subs	r3, r3, r2
 80018fa:	469b      	mov	fp, r3
 80018fc:	2300      	movs	r3, #0
 80018fe:	4699      	mov	r9, r3
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	e69e      	b.n	8001642 <__aeabi_ddiv+0x4a>
 8001904:	0002      	movs	r2, r0
 8001906:	4322      	orrs	r2, r4
 8001908:	4690      	mov	r8, r2
 800190a:	d11d      	bne.n	8001948 <__aeabi_ddiv+0x350>
 800190c:	2208      	movs	r2, #8
 800190e:	469b      	mov	fp, r3
 8001910:	2302      	movs	r3, #2
 8001912:	2500      	movs	r5, #0
 8001914:	4691      	mov	r9, r2
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	e693      	b.n	8001642 <__aeabi_ddiv+0x4a>
 800191a:	4651      	mov	r1, sl
 800191c:	4321      	orrs	r1, r4
 800191e:	d109      	bne.n	8001934 <__aeabi_ddiv+0x33c>
 8001920:	2302      	movs	r3, #2
 8001922:	464a      	mov	r2, r9
 8001924:	431a      	orrs	r2, r3
 8001926:	4b18      	ldr	r3, [pc, #96]	; (8001988 <__aeabi_ddiv+0x390>)
 8001928:	4691      	mov	r9, r2
 800192a:	469c      	mov	ip, r3
 800192c:	2400      	movs	r4, #0
 800192e:	2002      	movs	r0, #2
 8001930:	44e3      	add	fp, ip
 8001932:	e6a1      	b.n	8001678 <__aeabi_ddiv+0x80>
 8001934:	2303      	movs	r3, #3
 8001936:	464a      	mov	r2, r9
 8001938:	431a      	orrs	r2, r3
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <__aeabi_ddiv+0x390>)
 800193c:	4691      	mov	r9, r2
 800193e:	469c      	mov	ip, r3
 8001940:	4651      	mov	r1, sl
 8001942:	2003      	movs	r0, #3
 8001944:	44e3      	add	fp, ip
 8001946:	e697      	b.n	8001678 <__aeabi_ddiv+0x80>
 8001948:	220c      	movs	r2, #12
 800194a:	469b      	mov	fp, r3
 800194c:	2303      	movs	r3, #3
 800194e:	46a0      	mov	r8, r4
 8001950:	4691      	mov	r9, r2
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	e675      	b.n	8001642 <__aeabi_ddiv+0x4a>
 8001956:	2304      	movs	r3, #4
 8001958:	4699      	mov	r9, r3
 800195a:	2300      	movs	r3, #0
 800195c:	469b      	mov	fp, r3
 800195e:	3301      	adds	r3, #1
 8001960:	2500      	movs	r5, #0
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	e66d      	b.n	8001642 <__aeabi_ddiv+0x4a>
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	000007ff 	.word	0x000007ff
 800196c:	fffffc01 	.word	0xfffffc01
 8001970:	0800815c 	.word	0x0800815c
 8001974:	000003ff 	.word	0x000003ff
 8001978:	feffffff 	.word	0xfeffffff
 800197c:	000007fe 	.word	0x000007fe
 8001980:	000003f3 	.word	0x000003f3
 8001984:	fffffc0d 	.word	0xfffffc0d
 8001988:	fffff801 	.word	0xfffff801
 800198c:	464a      	mov	r2, r9
 800198e:	2301      	movs	r3, #1
 8001990:	431a      	orrs	r2, r3
 8001992:	4691      	mov	r9, r2
 8001994:	2400      	movs	r4, #0
 8001996:	2001      	movs	r0, #1
 8001998:	e66e      	b.n	8001678 <__aeabi_ddiv+0x80>
 800199a:	2300      	movs	r3, #0
 800199c:	2280      	movs	r2, #128	; 0x80
 800199e:	469a      	mov	sl, r3
 80019a0:	2500      	movs	r5, #0
 80019a2:	4b88      	ldr	r3, [pc, #544]	; (8001bc4 <__aeabi_ddiv+0x5cc>)
 80019a4:	0312      	lsls	r2, r2, #12
 80019a6:	e67e      	b.n	80016a6 <__aeabi_ddiv+0xae>
 80019a8:	2501      	movs	r5, #1
 80019aa:	426d      	negs	r5, r5
 80019ac:	2201      	movs	r2, #1
 80019ae:	1ad2      	subs	r2, r2, r3
 80019b0:	2a38      	cmp	r2, #56	; 0x38
 80019b2:	dd00      	ble.n	80019b6 <__aeabi_ddiv+0x3be>
 80019b4:	e674      	b.n	80016a0 <__aeabi_ddiv+0xa8>
 80019b6:	2a1f      	cmp	r2, #31
 80019b8:	dc00      	bgt.n	80019bc <__aeabi_ddiv+0x3c4>
 80019ba:	e0bd      	b.n	8001b38 <__aeabi_ddiv+0x540>
 80019bc:	211f      	movs	r1, #31
 80019be:	4249      	negs	r1, r1
 80019c0:	1acb      	subs	r3, r1, r3
 80019c2:	4641      	mov	r1, r8
 80019c4:	40d9      	lsrs	r1, r3
 80019c6:	000b      	movs	r3, r1
 80019c8:	2a20      	cmp	r2, #32
 80019ca:	d004      	beq.n	80019d6 <__aeabi_ddiv+0x3de>
 80019cc:	4641      	mov	r1, r8
 80019ce:	4a7e      	ldr	r2, [pc, #504]	; (8001bc8 <__aeabi_ddiv+0x5d0>)
 80019d0:	445a      	add	r2, fp
 80019d2:	4091      	lsls	r1, r2
 80019d4:	430d      	orrs	r5, r1
 80019d6:	0029      	movs	r1, r5
 80019d8:	1e4a      	subs	r2, r1, #1
 80019da:	4191      	sbcs	r1, r2
 80019dc:	4319      	orrs	r1, r3
 80019de:	2307      	movs	r3, #7
 80019e0:	001d      	movs	r5, r3
 80019e2:	2200      	movs	r2, #0
 80019e4:	400d      	ands	r5, r1
 80019e6:	420b      	tst	r3, r1
 80019e8:	d100      	bne.n	80019ec <__aeabi_ddiv+0x3f4>
 80019ea:	e0d0      	b.n	8001b8e <__aeabi_ddiv+0x596>
 80019ec:	220f      	movs	r2, #15
 80019ee:	2300      	movs	r3, #0
 80019f0:	400a      	ands	r2, r1
 80019f2:	2a04      	cmp	r2, #4
 80019f4:	d100      	bne.n	80019f8 <__aeabi_ddiv+0x400>
 80019f6:	e0c7      	b.n	8001b88 <__aeabi_ddiv+0x590>
 80019f8:	1d0a      	adds	r2, r1, #4
 80019fa:	428a      	cmp	r2, r1
 80019fc:	4189      	sbcs	r1, r1
 80019fe:	4249      	negs	r1, r1
 8001a00:	185b      	adds	r3, r3, r1
 8001a02:	0011      	movs	r1, r2
 8001a04:	021a      	lsls	r2, r3, #8
 8001a06:	d400      	bmi.n	8001a0a <__aeabi_ddiv+0x412>
 8001a08:	e0be      	b.n	8001b88 <__aeabi_ddiv+0x590>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2500      	movs	r5, #0
 8001a10:	e649      	b.n	80016a6 <__aeabi_ddiv+0xae>
 8001a12:	2280      	movs	r2, #128	; 0x80
 8001a14:	4643      	mov	r3, r8
 8001a16:	0312      	lsls	r2, r2, #12
 8001a18:	4213      	tst	r3, r2
 8001a1a:	d008      	beq.n	8001a2e <__aeabi_ddiv+0x436>
 8001a1c:	4214      	tst	r4, r2
 8001a1e:	d106      	bne.n	8001a2e <__aeabi_ddiv+0x436>
 8001a20:	4322      	orrs	r2, r4
 8001a22:	0312      	lsls	r2, r2, #12
 8001a24:	46ba      	mov	sl, r7
 8001a26:	000d      	movs	r5, r1
 8001a28:	4b66      	ldr	r3, [pc, #408]	; (8001bc4 <__aeabi_ddiv+0x5cc>)
 8001a2a:	0b12      	lsrs	r2, r2, #12
 8001a2c:	e63b      	b.n	80016a6 <__aeabi_ddiv+0xae>
 8001a2e:	2280      	movs	r2, #128	; 0x80
 8001a30:	4643      	mov	r3, r8
 8001a32:	0312      	lsls	r2, r2, #12
 8001a34:	431a      	orrs	r2, r3
 8001a36:	0312      	lsls	r2, r2, #12
 8001a38:	46b2      	mov	sl, r6
 8001a3a:	4b62      	ldr	r3, [pc, #392]	; (8001bc4 <__aeabi_ddiv+0x5cc>)
 8001a3c:	0b12      	lsrs	r2, r2, #12
 8001a3e:	e632      	b.n	80016a6 <__aeabi_ddiv+0xae>
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d100      	bne.n	8001a46 <__aeabi_ddiv+0x44e>
 8001a44:	e702      	b.n	800184c <__aeabi_ddiv+0x254>
 8001a46:	19a6      	adds	r6, r4, r6
 8001a48:	1e6a      	subs	r2, r5, #1
 8001a4a:	42a6      	cmp	r6, r4
 8001a4c:	d200      	bcs.n	8001a50 <__aeabi_ddiv+0x458>
 8001a4e:	e089      	b.n	8001b64 <__aeabi_ddiv+0x56c>
 8001a50:	4286      	cmp	r6, r0
 8001a52:	d200      	bcs.n	8001a56 <__aeabi_ddiv+0x45e>
 8001a54:	e09f      	b.n	8001b96 <__aeabi_ddiv+0x59e>
 8001a56:	d100      	bne.n	8001a5a <__aeabi_ddiv+0x462>
 8001a58:	e0af      	b.n	8001bba <__aeabi_ddiv+0x5c2>
 8001a5a:	0015      	movs	r5, r2
 8001a5c:	e6f4      	b.n	8001848 <__aeabi_ddiv+0x250>
 8001a5e:	42a9      	cmp	r1, r5
 8001a60:	d900      	bls.n	8001a64 <__aeabi_ddiv+0x46c>
 8001a62:	e63c      	b.n	80016de <__aeabi_ddiv+0xe6>
 8001a64:	4643      	mov	r3, r8
 8001a66:	07de      	lsls	r6, r3, #31
 8001a68:	0858      	lsrs	r0, r3, #1
 8001a6a:	086b      	lsrs	r3, r5, #1
 8001a6c:	431e      	orrs	r6, r3
 8001a6e:	07ed      	lsls	r5, r5, #31
 8001a70:	e63c      	b.n	80016ec <__aeabi_ddiv+0xf4>
 8001a72:	f001 f82b 	bl	8002acc <__clzsi2>
 8001a76:	0001      	movs	r1, r0
 8001a78:	0002      	movs	r2, r0
 8001a7a:	3115      	adds	r1, #21
 8001a7c:	3220      	adds	r2, #32
 8001a7e:	291c      	cmp	r1, #28
 8001a80:	dc00      	bgt.n	8001a84 <__aeabi_ddiv+0x48c>
 8001a82:	e72c      	b.n	80018de <__aeabi_ddiv+0x2e6>
 8001a84:	464b      	mov	r3, r9
 8001a86:	3808      	subs	r0, #8
 8001a88:	4083      	lsls	r3, r0
 8001a8a:	2500      	movs	r5, #0
 8001a8c:	4698      	mov	r8, r3
 8001a8e:	e732      	b.n	80018f6 <__aeabi_ddiv+0x2fe>
 8001a90:	f001 f81c 	bl	8002acc <__clzsi2>
 8001a94:	0003      	movs	r3, r0
 8001a96:	001a      	movs	r2, r3
 8001a98:	3215      	adds	r2, #21
 8001a9a:	3020      	adds	r0, #32
 8001a9c:	2a1c      	cmp	r2, #28
 8001a9e:	dc00      	bgt.n	8001aa2 <__aeabi_ddiv+0x4aa>
 8001aa0:	e6ff      	b.n	80018a2 <__aeabi_ddiv+0x2aa>
 8001aa2:	4654      	mov	r4, sl
 8001aa4:	3b08      	subs	r3, #8
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	409c      	lsls	r4, r3
 8001aaa:	e705      	b.n	80018b8 <__aeabi_ddiv+0x2c0>
 8001aac:	1936      	adds	r6, r6, r4
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	42b4      	cmp	r4, r6
 8001ab2:	d900      	bls.n	8001ab6 <__aeabi_ddiv+0x4be>
 8001ab4:	e6a6      	b.n	8001804 <__aeabi_ddiv+0x20c>
 8001ab6:	42b2      	cmp	r2, r6
 8001ab8:	d800      	bhi.n	8001abc <__aeabi_ddiv+0x4c4>
 8001aba:	e6a3      	b.n	8001804 <__aeabi_ddiv+0x20c>
 8001abc:	1e83      	subs	r3, r0, #2
 8001abe:	1936      	adds	r6, r6, r4
 8001ac0:	e6a0      	b.n	8001804 <__aeabi_ddiv+0x20c>
 8001ac2:	1909      	adds	r1, r1, r4
 8001ac4:	3d01      	subs	r5, #1
 8001ac6:	428c      	cmp	r4, r1
 8001ac8:	d900      	bls.n	8001acc <__aeabi_ddiv+0x4d4>
 8001aca:	e68d      	b.n	80017e8 <__aeabi_ddiv+0x1f0>
 8001acc:	428a      	cmp	r2, r1
 8001ace:	d800      	bhi.n	8001ad2 <__aeabi_ddiv+0x4da>
 8001ad0:	e68a      	b.n	80017e8 <__aeabi_ddiv+0x1f0>
 8001ad2:	1e85      	subs	r5, r0, #2
 8001ad4:	1909      	adds	r1, r1, r4
 8001ad6:	e687      	b.n	80017e8 <__aeabi_ddiv+0x1f0>
 8001ad8:	220f      	movs	r2, #15
 8001ada:	402a      	ands	r2, r5
 8001adc:	2a04      	cmp	r2, #4
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_ddiv+0x4ea>
 8001ae0:	e6bc      	b.n	800185c <__aeabi_ddiv+0x264>
 8001ae2:	1d29      	adds	r1, r5, #4
 8001ae4:	42a9      	cmp	r1, r5
 8001ae6:	41ad      	sbcs	r5, r5
 8001ae8:	426d      	negs	r5, r5
 8001aea:	08c9      	lsrs	r1, r1, #3
 8001aec:	44a8      	add	r8, r5
 8001aee:	e6b6      	b.n	800185e <__aeabi_ddiv+0x266>
 8001af0:	42af      	cmp	r7, r5
 8001af2:	d900      	bls.n	8001af6 <__aeabi_ddiv+0x4fe>
 8001af4:	e662      	b.n	80017bc <__aeabi_ddiv+0x1c4>
 8001af6:	4281      	cmp	r1, r0
 8001af8:	d804      	bhi.n	8001b04 <__aeabi_ddiv+0x50c>
 8001afa:	d000      	beq.n	8001afe <__aeabi_ddiv+0x506>
 8001afc:	e65e      	b.n	80017bc <__aeabi_ddiv+0x1c4>
 8001afe:	42ae      	cmp	r6, r5
 8001b00:	d800      	bhi.n	8001b04 <__aeabi_ddiv+0x50c>
 8001b02:	e65b      	b.n	80017bc <__aeabi_ddiv+0x1c4>
 8001b04:	2302      	movs	r3, #2
 8001b06:	425b      	negs	r3, r3
 8001b08:	469c      	mov	ip, r3
 8001b0a:	9b00      	ldr	r3, [sp, #0]
 8001b0c:	44e0      	add	r8, ip
 8001b0e:	469c      	mov	ip, r3
 8001b10:	4465      	add	r5, ip
 8001b12:	429d      	cmp	r5, r3
 8001b14:	419b      	sbcs	r3, r3
 8001b16:	425b      	negs	r3, r3
 8001b18:	191b      	adds	r3, r3, r4
 8001b1a:	18c0      	adds	r0, r0, r3
 8001b1c:	e64f      	b.n	80017be <__aeabi_ddiv+0x1c6>
 8001b1e:	42b2      	cmp	r2, r6
 8001b20:	d800      	bhi.n	8001b24 <__aeabi_ddiv+0x52c>
 8001b22:	e612      	b.n	800174a <__aeabi_ddiv+0x152>
 8001b24:	1e83      	subs	r3, r0, #2
 8001b26:	1936      	adds	r6, r6, r4
 8001b28:	e60f      	b.n	800174a <__aeabi_ddiv+0x152>
 8001b2a:	428a      	cmp	r2, r1
 8001b2c:	d800      	bhi.n	8001b30 <__aeabi_ddiv+0x538>
 8001b2e:	e5fa      	b.n	8001726 <__aeabi_ddiv+0x12e>
 8001b30:	1e83      	subs	r3, r0, #2
 8001b32:	4698      	mov	r8, r3
 8001b34:	1909      	adds	r1, r1, r4
 8001b36:	e5f6      	b.n	8001726 <__aeabi_ddiv+0x12e>
 8001b38:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <__aeabi_ddiv+0x5d4>)
 8001b3a:	0028      	movs	r0, r5
 8001b3c:	445b      	add	r3, fp
 8001b3e:	4641      	mov	r1, r8
 8001b40:	409d      	lsls	r5, r3
 8001b42:	4099      	lsls	r1, r3
 8001b44:	40d0      	lsrs	r0, r2
 8001b46:	1e6b      	subs	r3, r5, #1
 8001b48:	419d      	sbcs	r5, r3
 8001b4a:	4643      	mov	r3, r8
 8001b4c:	4301      	orrs	r1, r0
 8001b4e:	4329      	orrs	r1, r5
 8001b50:	40d3      	lsrs	r3, r2
 8001b52:	074a      	lsls	r2, r1, #29
 8001b54:	d100      	bne.n	8001b58 <__aeabi_ddiv+0x560>
 8001b56:	e755      	b.n	8001a04 <__aeabi_ddiv+0x40c>
 8001b58:	220f      	movs	r2, #15
 8001b5a:	400a      	ands	r2, r1
 8001b5c:	2a04      	cmp	r2, #4
 8001b5e:	d000      	beq.n	8001b62 <__aeabi_ddiv+0x56a>
 8001b60:	e74a      	b.n	80019f8 <__aeabi_ddiv+0x400>
 8001b62:	e74f      	b.n	8001a04 <__aeabi_ddiv+0x40c>
 8001b64:	0015      	movs	r5, r2
 8001b66:	4286      	cmp	r6, r0
 8001b68:	d000      	beq.n	8001b6c <__aeabi_ddiv+0x574>
 8001b6a:	e66d      	b.n	8001848 <__aeabi_ddiv+0x250>
 8001b6c:	9a00      	ldr	r2, [sp, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d000      	beq.n	8001b74 <__aeabi_ddiv+0x57c>
 8001b72:	e669      	b.n	8001848 <__aeabi_ddiv+0x250>
 8001b74:	e66a      	b.n	800184c <__aeabi_ddiv+0x254>
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <__aeabi_ddiv+0x5d8>)
 8001b78:	445b      	add	r3, fp
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	dc00      	bgt.n	8001b80 <__aeabi_ddiv+0x588>
 8001b7e:	e713      	b.n	80019a8 <__aeabi_ddiv+0x3b0>
 8001b80:	2501      	movs	r5, #1
 8001b82:	2100      	movs	r1, #0
 8001b84:	44a8      	add	r8, r5
 8001b86:	e66a      	b.n	800185e <__aeabi_ddiv+0x266>
 8001b88:	075d      	lsls	r5, r3, #29
 8001b8a:	025b      	lsls	r3, r3, #9
 8001b8c:	0b1a      	lsrs	r2, r3, #12
 8001b8e:	08c9      	lsrs	r1, r1, #3
 8001b90:	2300      	movs	r3, #0
 8001b92:	430d      	orrs	r5, r1
 8001b94:	e587      	b.n	80016a6 <__aeabi_ddiv+0xae>
 8001b96:	9900      	ldr	r1, [sp, #0]
 8001b98:	3d02      	subs	r5, #2
 8001b9a:	004a      	lsls	r2, r1, #1
 8001b9c:	428a      	cmp	r2, r1
 8001b9e:	41bf      	sbcs	r7, r7
 8001ba0:	427f      	negs	r7, r7
 8001ba2:	193f      	adds	r7, r7, r4
 8001ba4:	19f6      	adds	r6, r6, r7
 8001ba6:	9200      	str	r2, [sp, #0]
 8001ba8:	e7dd      	b.n	8001b66 <__aeabi_ddiv+0x56e>
 8001baa:	2280      	movs	r2, #128	; 0x80
 8001bac:	4643      	mov	r3, r8
 8001bae:	0312      	lsls	r2, r2, #12
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	0312      	lsls	r2, r2, #12
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <__aeabi_ddiv+0x5cc>)
 8001bb6:	0b12      	lsrs	r2, r2, #12
 8001bb8:	e575      	b.n	80016a6 <__aeabi_ddiv+0xae>
 8001bba:	9900      	ldr	r1, [sp, #0]
 8001bbc:	4299      	cmp	r1, r3
 8001bbe:	d3ea      	bcc.n	8001b96 <__aeabi_ddiv+0x59e>
 8001bc0:	0015      	movs	r5, r2
 8001bc2:	e7d3      	b.n	8001b6c <__aeabi_ddiv+0x574>
 8001bc4:	000007ff 	.word	0x000007ff
 8001bc8:	0000043e 	.word	0x0000043e
 8001bcc:	0000041e 	.word	0x0000041e
 8001bd0:	000003ff 	.word	0x000003ff

08001bd4 <__aeabi_dmul>:
 8001bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bd6:	4645      	mov	r5, r8
 8001bd8:	46de      	mov	lr, fp
 8001bda:	4657      	mov	r7, sl
 8001bdc:	464e      	mov	r6, r9
 8001bde:	b5e0      	push	{r5, r6, r7, lr}
 8001be0:	001f      	movs	r7, r3
 8001be2:	030b      	lsls	r3, r1, #12
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	469b      	mov	fp, r3
 8001be8:	004d      	lsls	r5, r1, #1
 8001bea:	0fcb      	lsrs	r3, r1, #31
 8001bec:	0004      	movs	r4, r0
 8001bee:	4691      	mov	r9, r2
 8001bf0:	4698      	mov	r8, r3
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	0d6d      	lsrs	r5, r5, #21
 8001bf6:	d100      	bne.n	8001bfa <__aeabi_dmul+0x26>
 8001bf8:	e1cd      	b.n	8001f96 <__aeabi_dmul+0x3c2>
 8001bfa:	4bce      	ldr	r3, [pc, #824]	; (8001f34 <__aeabi_dmul+0x360>)
 8001bfc:	429d      	cmp	r5, r3
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dmul+0x2e>
 8001c00:	e1e9      	b.n	8001fd6 <__aeabi_dmul+0x402>
 8001c02:	465a      	mov	r2, fp
 8001c04:	0f43      	lsrs	r3, r0, #29
 8001c06:	00d2      	lsls	r2, r2, #3
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	2280      	movs	r2, #128	; 0x80
 8001c0c:	0412      	lsls	r2, r2, #16
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	00c3      	lsls	r3, r0, #3
 8001c12:	469a      	mov	sl, r3
 8001c14:	4bc8      	ldr	r3, [pc, #800]	; (8001f38 <__aeabi_dmul+0x364>)
 8001c16:	4693      	mov	fp, r2
 8001c18:	469c      	mov	ip, r3
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	2600      	movs	r6, #0
 8001c1e:	4465      	add	r5, ip
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	033c      	lsls	r4, r7, #12
 8001c24:	007b      	lsls	r3, r7, #1
 8001c26:	4648      	mov	r0, r9
 8001c28:	0b24      	lsrs	r4, r4, #12
 8001c2a:	0d5b      	lsrs	r3, r3, #21
 8001c2c:	0fff      	lsrs	r7, r7, #31
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dmul+0x60>
 8001c32:	e189      	b.n	8001f48 <__aeabi_dmul+0x374>
 8001c34:	4abf      	ldr	r2, [pc, #764]	; (8001f34 <__aeabi_dmul+0x360>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d019      	beq.n	8001c6e <__aeabi_dmul+0x9a>
 8001c3a:	0f42      	lsrs	r2, r0, #29
 8001c3c:	00e4      	lsls	r4, r4, #3
 8001c3e:	4322      	orrs	r2, r4
 8001c40:	2480      	movs	r4, #128	; 0x80
 8001c42:	0424      	lsls	r4, r4, #16
 8001c44:	4314      	orrs	r4, r2
 8001c46:	4abc      	ldr	r2, [pc, #752]	; (8001f38 <__aeabi_dmul+0x364>)
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4694      	mov	ip, r2
 8001c4c:	4642      	mov	r2, r8
 8001c4e:	4463      	add	r3, ip
 8001c50:	195b      	adds	r3, r3, r5
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	9b01      	ldr	r3, [sp, #4]
 8001c56:	407a      	eors	r2, r7
 8001c58:	3301      	adds	r3, #1
 8001c5a:	00c0      	lsls	r0, r0, #3
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	9302      	str	r3, [sp, #8]
 8001c60:	2e0a      	cmp	r6, #10
 8001c62:	dd1c      	ble.n	8001c9e <__aeabi_dmul+0xca>
 8001c64:	003a      	movs	r2, r7
 8001c66:	2e0b      	cmp	r6, #11
 8001c68:	d05e      	beq.n	8001d28 <__aeabi_dmul+0x154>
 8001c6a:	4647      	mov	r7, r8
 8001c6c:	e056      	b.n	8001d1c <__aeabi_dmul+0x148>
 8001c6e:	4649      	mov	r1, r9
 8001c70:	4bb0      	ldr	r3, [pc, #704]	; (8001f34 <__aeabi_dmul+0x360>)
 8001c72:	4321      	orrs	r1, r4
 8001c74:	18eb      	adds	r3, r5, r3
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	2900      	cmp	r1, #0
 8001c7a:	d12a      	bne.n	8001cd2 <__aeabi_dmul+0xfe>
 8001c7c:	2080      	movs	r0, #128	; 0x80
 8001c7e:	2202      	movs	r2, #2
 8001c80:	0100      	lsls	r0, r0, #4
 8001c82:	002b      	movs	r3, r5
 8001c84:	4684      	mov	ip, r0
 8001c86:	4316      	orrs	r6, r2
 8001c88:	4642      	mov	r2, r8
 8001c8a:	4463      	add	r3, ip
 8001c8c:	407a      	eors	r2, r7
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	9302      	str	r3, [sp, #8]
 8001c92:	2e0a      	cmp	r6, #10
 8001c94:	dd00      	ble.n	8001c98 <__aeabi_dmul+0xc4>
 8001c96:	e231      	b.n	80020fc <__aeabi_dmul+0x528>
 8001c98:	2000      	movs	r0, #0
 8001c9a:	2400      	movs	r4, #0
 8001c9c:	2102      	movs	r1, #2
 8001c9e:	2e02      	cmp	r6, #2
 8001ca0:	dc26      	bgt.n	8001cf0 <__aeabi_dmul+0x11c>
 8001ca2:	3e01      	subs	r6, #1
 8001ca4:	2e01      	cmp	r6, #1
 8001ca6:	d852      	bhi.n	8001d4e <__aeabi_dmul+0x17a>
 8001ca8:	2902      	cmp	r1, #2
 8001caa:	d04c      	beq.n	8001d46 <__aeabi_dmul+0x172>
 8001cac:	2901      	cmp	r1, #1
 8001cae:	d000      	beq.n	8001cb2 <__aeabi_dmul+0xde>
 8001cb0:	e118      	b.n	8001ee4 <__aeabi_dmul+0x310>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	2400      	movs	r4, #0
 8001cb6:	2500      	movs	r5, #0
 8001cb8:	051b      	lsls	r3, r3, #20
 8001cba:	4323      	orrs	r3, r4
 8001cbc:	07d2      	lsls	r2, r2, #31
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	0028      	movs	r0, r5
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	b007      	add	sp, #28
 8001cc6:	bcf0      	pop	{r4, r5, r6, r7}
 8001cc8:	46bb      	mov	fp, r7
 8001cca:	46b2      	mov	sl, r6
 8001ccc:	46a9      	mov	r9, r5
 8001cce:	46a0      	mov	r8, r4
 8001cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd2:	2180      	movs	r1, #128	; 0x80
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	0109      	lsls	r1, r1, #4
 8001cd8:	002b      	movs	r3, r5
 8001cda:	468c      	mov	ip, r1
 8001cdc:	4316      	orrs	r6, r2
 8001cde:	4642      	mov	r2, r8
 8001ce0:	4463      	add	r3, ip
 8001ce2:	407a      	eors	r2, r7
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	2e0a      	cmp	r6, #10
 8001cea:	dd00      	ble.n	8001cee <__aeabi_dmul+0x11a>
 8001cec:	e228      	b.n	8002140 <__aeabi_dmul+0x56c>
 8001cee:	2103      	movs	r1, #3
 8001cf0:	2501      	movs	r5, #1
 8001cf2:	40b5      	lsls	r5, r6
 8001cf4:	46ac      	mov	ip, r5
 8001cf6:	26a6      	movs	r6, #166	; 0xa6
 8001cf8:	4663      	mov	r3, ip
 8001cfa:	00f6      	lsls	r6, r6, #3
 8001cfc:	4035      	ands	r5, r6
 8001cfe:	4233      	tst	r3, r6
 8001d00:	d10b      	bne.n	8001d1a <__aeabi_dmul+0x146>
 8001d02:	2690      	movs	r6, #144	; 0x90
 8001d04:	00b6      	lsls	r6, r6, #2
 8001d06:	4233      	tst	r3, r6
 8001d08:	d118      	bne.n	8001d3c <__aeabi_dmul+0x168>
 8001d0a:	3eb9      	subs	r6, #185	; 0xb9
 8001d0c:	3eff      	subs	r6, #255	; 0xff
 8001d0e:	421e      	tst	r6, r3
 8001d10:	d01d      	beq.n	8001d4e <__aeabi_dmul+0x17a>
 8001d12:	46a3      	mov	fp, r4
 8001d14:	4682      	mov	sl, r0
 8001d16:	9100      	str	r1, [sp, #0]
 8001d18:	e000      	b.n	8001d1c <__aeabi_dmul+0x148>
 8001d1a:	0017      	movs	r7, r2
 8001d1c:	9900      	ldr	r1, [sp, #0]
 8001d1e:	003a      	movs	r2, r7
 8001d20:	2902      	cmp	r1, #2
 8001d22:	d010      	beq.n	8001d46 <__aeabi_dmul+0x172>
 8001d24:	465c      	mov	r4, fp
 8001d26:	4650      	mov	r0, sl
 8001d28:	2903      	cmp	r1, #3
 8001d2a:	d1bf      	bne.n	8001cac <__aeabi_dmul+0xd8>
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	031b      	lsls	r3, r3, #12
 8001d30:	431c      	orrs	r4, r3
 8001d32:	0324      	lsls	r4, r4, #12
 8001d34:	0005      	movs	r5, r0
 8001d36:	4b7f      	ldr	r3, [pc, #508]	; (8001f34 <__aeabi_dmul+0x360>)
 8001d38:	0b24      	lsrs	r4, r4, #12
 8001d3a:	e7bd      	b.n	8001cb8 <__aeabi_dmul+0xe4>
 8001d3c:	2480      	movs	r4, #128	; 0x80
 8001d3e:	2200      	movs	r2, #0
 8001d40:	4b7c      	ldr	r3, [pc, #496]	; (8001f34 <__aeabi_dmul+0x360>)
 8001d42:	0324      	lsls	r4, r4, #12
 8001d44:	e7b8      	b.n	8001cb8 <__aeabi_dmul+0xe4>
 8001d46:	2400      	movs	r4, #0
 8001d48:	2500      	movs	r5, #0
 8001d4a:	4b7a      	ldr	r3, [pc, #488]	; (8001f34 <__aeabi_dmul+0x360>)
 8001d4c:	e7b4      	b.n	8001cb8 <__aeabi_dmul+0xe4>
 8001d4e:	4653      	mov	r3, sl
 8001d50:	041e      	lsls	r6, r3, #16
 8001d52:	0c36      	lsrs	r6, r6, #16
 8001d54:	0c1f      	lsrs	r7, r3, #16
 8001d56:	0033      	movs	r3, r6
 8001d58:	0c01      	lsrs	r1, r0, #16
 8001d5a:	0400      	lsls	r0, r0, #16
 8001d5c:	0c00      	lsrs	r0, r0, #16
 8001d5e:	4343      	muls	r3, r0
 8001d60:	4698      	mov	r8, r3
 8001d62:	0003      	movs	r3, r0
 8001d64:	437b      	muls	r3, r7
 8001d66:	4699      	mov	r9, r3
 8001d68:	0033      	movs	r3, r6
 8001d6a:	434b      	muls	r3, r1
 8001d6c:	469c      	mov	ip, r3
 8001d6e:	4643      	mov	r3, r8
 8001d70:	000d      	movs	r5, r1
 8001d72:	0c1b      	lsrs	r3, r3, #16
 8001d74:	469a      	mov	sl, r3
 8001d76:	437d      	muls	r5, r7
 8001d78:	44cc      	add	ip, r9
 8001d7a:	44d4      	add	ip, sl
 8001d7c:	9500      	str	r5, [sp, #0]
 8001d7e:	45e1      	cmp	r9, ip
 8001d80:	d904      	bls.n	8001d8c <__aeabi_dmul+0x1b8>
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	025b      	lsls	r3, r3, #9
 8001d86:	4699      	mov	r9, r3
 8001d88:	444d      	add	r5, r9
 8001d8a:	9500      	str	r5, [sp, #0]
 8001d8c:	4663      	mov	r3, ip
 8001d8e:	0c1b      	lsrs	r3, r3, #16
 8001d90:	001d      	movs	r5, r3
 8001d92:	4663      	mov	r3, ip
 8001d94:	041b      	lsls	r3, r3, #16
 8001d96:	469c      	mov	ip, r3
 8001d98:	4643      	mov	r3, r8
 8001d9a:	041b      	lsls	r3, r3, #16
 8001d9c:	0c1b      	lsrs	r3, r3, #16
 8001d9e:	4698      	mov	r8, r3
 8001da0:	4663      	mov	r3, ip
 8001da2:	4443      	add	r3, r8
 8001da4:	9303      	str	r3, [sp, #12]
 8001da6:	0c23      	lsrs	r3, r4, #16
 8001da8:	4698      	mov	r8, r3
 8001daa:	0033      	movs	r3, r6
 8001dac:	0424      	lsls	r4, r4, #16
 8001dae:	0c24      	lsrs	r4, r4, #16
 8001db0:	4363      	muls	r3, r4
 8001db2:	469c      	mov	ip, r3
 8001db4:	0023      	movs	r3, r4
 8001db6:	437b      	muls	r3, r7
 8001db8:	4699      	mov	r9, r3
 8001dba:	4643      	mov	r3, r8
 8001dbc:	435e      	muls	r6, r3
 8001dbe:	435f      	muls	r7, r3
 8001dc0:	444e      	add	r6, r9
 8001dc2:	4663      	mov	r3, ip
 8001dc4:	46b2      	mov	sl, r6
 8001dc6:	0c1e      	lsrs	r6, r3, #16
 8001dc8:	4456      	add	r6, sl
 8001dca:	45b1      	cmp	r9, r6
 8001dcc:	d903      	bls.n	8001dd6 <__aeabi_dmul+0x202>
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	025b      	lsls	r3, r3, #9
 8001dd2:	4699      	mov	r9, r3
 8001dd4:	444f      	add	r7, r9
 8001dd6:	0c33      	lsrs	r3, r6, #16
 8001dd8:	4699      	mov	r9, r3
 8001dda:	003b      	movs	r3, r7
 8001ddc:	444b      	add	r3, r9
 8001dde:	9305      	str	r3, [sp, #20]
 8001de0:	4663      	mov	r3, ip
 8001de2:	46ac      	mov	ip, r5
 8001de4:	041f      	lsls	r7, r3, #16
 8001de6:	0c3f      	lsrs	r7, r7, #16
 8001de8:	0436      	lsls	r6, r6, #16
 8001dea:	19f6      	adds	r6, r6, r7
 8001dec:	44b4      	add	ip, r6
 8001dee:	4663      	mov	r3, ip
 8001df0:	9304      	str	r3, [sp, #16]
 8001df2:	465b      	mov	r3, fp
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	469c      	mov	ip, r3
 8001df8:	465b      	mov	r3, fp
 8001dfa:	041f      	lsls	r7, r3, #16
 8001dfc:	0c3f      	lsrs	r7, r7, #16
 8001dfe:	003b      	movs	r3, r7
 8001e00:	4343      	muls	r3, r0
 8001e02:	4699      	mov	r9, r3
 8001e04:	4663      	mov	r3, ip
 8001e06:	4343      	muls	r3, r0
 8001e08:	469a      	mov	sl, r3
 8001e0a:	464b      	mov	r3, r9
 8001e0c:	4660      	mov	r0, ip
 8001e0e:	0c1b      	lsrs	r3, r3, #16
 8001e10:	469b      	mov	fp, r3
 8001e12:	4348      	muls	r0, r1
 8001e14:	4379      	muls	r1, r7
 8001e16:	4451      	add	r1, sl
 8001e18:	4459      	add	r1, fp
 8001e1a:	458a      	cmp	sl, r1
 8001e1c:	d903      	bls.n	8001e26 <__aeabi_dmul+0x252>
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	025b      	lsls	r3, r3, #9
 8001e22:	469a      	mov	sl, r3
 8001e24:	4450      	add	r0, sl
 8001e26:	0c0b      	lsrs	r3, r1, #16
 8001e28:	469a      	mov	sl, r3
 8001e2a:	464b      	mov	r3, r9
 8001e2c:	041b      	lsls	r3, r3, #16
 8001e2e:	0c1b      	lsrs	r3, r3, #16
 8001e30:	4699      	mov	r9, r3
 8001e32:	003b      	movs	r3, r7
 8001e34:	4363      	muls	r3, r4
 8001e36:	0409      	lsls	r1, r1, #16
 8001e38:	4645      	mov	r5, r8
 8001e3a:	4449      	add	r1, r9
 8001e3c:	4699      	mov	r9, r3
 8001e3e:	4663      	mov	r3, ip
 8001e40:	435c      	muls	r4, r3
 8001e42:	436b      	muls	r3, r5
 8001e44:	469c      	mov	ip, r3
 8001e46:	464b      	mov	r3, r9
 8001e48:	0c1b      	lsrs	r3, r3, #16
 8001e4a:	4698      	mov	r8, r3
 8001e4c:	436f      	muls	r7, r5
 8001e4e:	193f      	adds	r7, r7, r4
 8001e50:	4447      	add	r7, r8
 8001e52:	4450      	add	r0, sl
 8001e54:	42bc      	cmp	r4, r7
 8001e56:	d903      	bls.n	8001e60 <__aeabi_dmul+0x28c>
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	025b      	lsls	r3, r3, #9
 8001e5c:	4698      	mov	r8, r3
 8001e5e:	44c4      	add	ip, r8
 8001e60:	9b04      	ldr	r3, [sp, #16]
 8001e62:	9d00      	ldr	r5, [sp, #0]
 8001e64:	4698      	mov	r8, r3
 8001e66:	4445      	add	r5, r8
 8001e68:	42b5      	cmp	r5, r6
 8001e6a:	41b6      	sbcs	r6, r6
 8001e6c:	4273      	negs	r3, r6
 8001e6e:	4698      	mov	r8, r3
 8001e70:	464b      	mov	r3, r9
 8001e72:	041e      	lsls	r6, r3, #16
 8001e74:	9b05      	ldr	r3, [sp, #20]
 8001e76:	043c      	lsls	r4, r7, #16
 8001e78:	4699      	mov	r9, r3
 8001e7a:	0c36      	lsrs	r6, r6, #16
 8001e7c:	19a4      	adds	r4, r4, r6
 8001e7e:	444c      	add	r4, r9
 8001e80:	46a1      	mov	r9, r4
 8001e82:	4683      	mov	fp, r0
 8001e84:	186e      	adds	r6, r5, r1
 8001e86:	44c1      	add	r9, r8
 8001e88:	428e      	cmp	r6, r1
 8001e8a:	4189      	sbcs	r1, r1
 8001e8c:	44cb      	add	fp, r9
 8001e8e:	465d      	mov	r5, fp
 8001e90:	4249      	negs	r1, r1
 8001e92:	186d      	adds	r5, r5, r1
 8001e94:	429c      	cmp	r4, r3
 8001e96:	41a4      	sbcs	r4, r4
 8001e98:	45c1      	cmp	r9, r8
 8001e9a:	419b      	sbcs	r3, r3
 8001e9c:	4583      	cmp	fp, r0
 8001e9e:	4180      	sbcs	r0, r0
 8001ea0:	428d      	cmp	r5, r1
 8001ea2:	4189      	sbcs	r1, r1
 8001ea4:	425b      	negs	r3, r3
 8001ea6:	4264      	negs	r4, r4
 8001ea8:	431c      	orrs	r4, r3
 8001eaa:	4240      	negs	r0, r0
 8001eac:	9b03      	ldr	r3, [sp, #12]
 8001eae:	4249      	negs	r1, r1
 8001eb0:	4301      	orrs	r1, r0
 8001eb2:	0270      	lsls	r0, r6, #9
 8001eb4:	0c3f      	lsrs	r7, r7, #16
 8001eb6:	4318      	orrs	r0, r3
 8001eb8:	19e4      	adds	r4, r4, r7
 8001eba:	1e47      	subs	r7, r0, #1
 8001ebc:	41b8      	sbcs	r0, r7
 8001ebe:	1864      	adds	r4, r4, r1
 8001ec0:	4464      	add	r4, ip
 8001ec2:	0df6      	lsrs	r6, r6, #23
 8001ec4:	0261      	lsls	r1, r4, #9
 8001ec6:	4330      	orrs	r0, r6
 8001ec8:	0dec      	lsrs	r4, r5, #23
 8001eca:	026e      	lsls	r6, r5, #9
 8001ecc:	430c      	orrs	r4, r1
 8001ece:	4330      	orrs	r0, r6
 8001ed0:	01c9      	lsls	r1, r1, #7
 8001ed2:	d400      	bmi.n	8001ed6 <__aeabi_dmul+0x302>
 8001ed4:	e0f1      	b.n	80020ba <__aeabi_dmul+0x4e6>
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	0843      	lsrs	r3, r0, #1
 8001eda:	4001      	ands	r1, r0
 8001edc:	430b      	orrs	r3, r1
 8001ede:	07e0      	lsls	r0, r4, #31
 8001ee0:	4318      	orrs	r0, r3
 8001ee2:	0864      	lsrs	r4, r4, #1
 8001ee4:	4915      	ldr	r1, [pc, #84]	; (8001f3c <__aeabi_dmul+0x368>)
 8001ee6:	9b02      	ldr	r3, [sp, #8]
 8001ee8:	468c      	mov	ip, r1
 8001eea:	4463      	add	r3, ip
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	dc00      	bgt.n	8001ef2 <__aeabi_dmul+0x31e>
 8001ef0:	e097      	b.n	8002022 <__aeabi_dmul+0x44e>
 8001ef2:	0741      	lsls	r1, r0, #29
 8001ef4:	d009      	beq.n	8001f0a <__aeabi_dmul+0x336>
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	4001      	ands	r1, r0
 8001efa:	2904      	cmp	r1, #4
 8001efc:	d005      	beq.n	8001f0a <__aeabi_dmul+0x336>
 8001efe:	1d01      	adds	r1, r0, #4
 8001f00:	4281      	cmp	r1, r0
 8001f02:	4180      	sbcs	r0, r0
 8001f04:	4240      	negs	r0, r0
 8001f06:	1824      	adds	r4, r4, r0
 8001f08:	0008      	movs	r0, r1
 8001f0a:	01e1      	lsls	r1, r4, #7
 8001f0c:	d506      	bpl.n	8001f1c <__aeabi_dmul+0x348>
 8001f0e:	2180      	movs	r1, #128	; 0x80
 8001f10:	00c9      	lsls	r1, r1, #3
 8001f12:	468c      	mov	ip, r1
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <__aeabi_dmul+0x36c>)
 8001f16:	401c      	ands	r4, r3
 8001f18:	9b02      	ldr	r3, [sp, #8]
 8001f1a:	4463      	add	r3, ip
 8001f1c:	4909      	ldr	r1, [pc, #36]	; (8001f44 <__aeabi_dmul+0x370>)
 8001f1e:	428b      	cmp	r3, r1
 8001f20:	dd00      	ble.n	8001f24 <__aeabi_dmul+0x350>
 8001f22:	e710      	b.n	8001d46 <__aeabi_dmul+0x172>
 8001f24:	0761      	lsls	r1, r4, #29
 8001f26:	08c5      	lsrs	r5, r0, #3
 8001f28:	0264      	lsls	r4, r4, #9
 8001f2a:	055b      	lsls	r3, r3, #21
 8001f2c:	430d      	orrs	r5, r1
 8001f2e:	0b24      	lsrs	r4, r4, #12
 8001f30:	0d5b      	lsrs	r3, r3, #21
 8001f32:	e6c1      	b.n	8001cb8 <__aeabi_dmul+0xe4>
 8001f34:	000007ff 	.word	0x000007ff
 8001f38:	fffffc01 	.word	0xfffffc01
 8001f3c:	000003ff 	.word	0x000003ff
 8001f40:	feffffff 	.word	0xfeffffff
 8001f44:	000007fe 	.word	0x000007fe
 8001f48:	464b      	mov	r3, r9
 8001f4a:	4323      	orrs	r3, r4
 8001f4c:	d059      	beq.n	8002002 <__aeabi_dmul+0x42e>
 8001f4e:	2c00      	cmp	r4, #0
 8001f50:	d100      	bne.n	8001f54 <__aeabi_dmul+0x380>
 8001f52:	e0a3      	b.n	800209c <__aeabi_dmul+0x4c8>
 8001f54:	0020      	movs	r0, r4
 8001f56:	f000 fdb9 	bl	8002acc <__clzsi2>
 8001f5a:	0001      	movs	r1, r0
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	390b      	subs	r1, #11
 8001f60:	221d      	movs	r2, #29
 8001f62:	1a52      	subs	r2, r2, r1
 8001f64:	4649      	mov	r1, r9
 8001f66:	0018      	movs	r0, r3
 8001f68:	40d1      	lsrs	r1, r2
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	3808      	subs	r0, #8
 8001f6e:	4082      	lsls	r2, r0
 8001f70:	4084      	lsls	r4, r0
 8001f72:	0010      	movs	r0, r2
 8001f74:	430c      	orrs	r4, r1
 8001f76:	4a74      	ldr	r2, [pc, #464]	; (8002148 <__aeabi_dmul+0x574>)
 8001f78:	1aeb      	subs	r3, r5, r3
 8001f7a:	4694      	mov	ip, r2
 8001f7c:	4642      	mov	r2, r8
 8001f7e:	4463      	add	r3, ip
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	9b01      	ldr	r3, [sp, #4]
 8001f84:	407a      	eors	r2, r7
 8001f86:	3301      	adds	r3, #1
 8001f88:	2100      	movs	r1, #0
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	9302      	str	r3, [sp, #8]
 8001f8e:	2e0a      	cmp	r6, #10
 8001f90:	dd00      	ble.n	8001f94 <__aeabi_dmul+0x3c0>
 8001f92:	e667      	b.n	8001c64 <__aeabi_dmul+0x90>
 8001f94:	e683      	b.n	8001c9e <__aeabi_dmul+0xca>
 8001f96:	465b      	mov	r3, fp
 8001f98:	4303      	orrs	r3, r0
 8001f9a:	469a      	mov	sl, r3
 8001f9c:	d02a      	beq.n	8001ff4 <__aeabi_dmul+0x420>
 8001f9e:	465b      	mov	r3, fp
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d06d      	beq.n	8002080 <__aeabi_dmul+0x4ac>
 8001fa4:	4658      	mov	r0, fp
 8001fa6:	f000 fd91 	bl	8002acc <__clzsi2>
 8001faa:	0001      	movs	r1, r0
 8001fac:	0003      	movs	r3, r0
 8001fae:	390b      	subs	r1, #11
 8001fb0:	221d      	movs	r2, #29
 8001fb2:	1a52      	subs	r2, r2, r1
 8001fb4:	0021      	movs	r1, r4
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	465d      	mov	r5, fp
 8001fba:	40d1      	lsrs	r1, r2
 8001fbc:	3808      	subs	r0, #8
 8001fbe:	4085      	lsls	r5, r0
 8001fc0:	000a      	movs	r2, r1
 8001fc2:	4084      	lsls	r4, r0
 8001fc4:	432a      	orrs	r2, r5
 8001fc6:	4693      	mov	fp, r2
 8001fc8:	46a2      	mov	sl, r4
 8001fca:	4d5f      	ldr	r5, [pc, #380]	; (8002148 <__aeabi_dmul+0x574>)
 8001fcc:	2600      	movs	r6, #0
 8001fce:	1aed      	subs	r5, r5, r3
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	e625      	b.n	8001c22 <__aeabi_dmul+0x4e>
 8001fd6:	465b      	mov	r3, fp
 8001fd8:	4303      	orrs	r3, r0
 8001fda:	469a      	mov	sl, r3
 8001fdc:	d105      	bne.n	8001fea <__aeabi_dmul+0x416>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	469b      	mov	fp, r3
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	2608      	movs	r6, #8
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	e61b      	b.n	8001c22 <__aeabi_dmul+0x4e>
 8001fea:	2303      	movs	r3, #3
 8001fec:	4682      	mov	sl, r0
 8001fee:	260c      	movs	r6, #12
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	e616      	b.n	8001c22 <__aeabi_dmul+0x4e>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	469b      	mov	fp, r3
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	2604      	movs	r6, #4
 8001ffc:	2500      	movs	r5, #0
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	e60f      	b.n	8001c22 <__aeabi_dmul+0x4e>
 8002002:	4642      	mov	r2, r8
 8002004:	3301      	adds	r3, #1
 8002006:	9501      	str	r5, [sp, #4]
 8002008:	431e      	orrs	r6, r3
 800200a:	9b01      	ldr	r3, [sp, #4]
 800200c:	407a      	eors	r2, r7
 800200e:	3301      	adds	r3, #1
 8002010:	2400      	movs	r4, #0
 8002012:	2000      	movs	r0, #0
 8002014:	2101      	movs	r1, #1
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	9302      	str	r3, [sp, #8]
 800201a:	2e0a      	cmp	r6, #10
 800201c:	dd00      	ble.n	8002020 <__aeabi_dmul+0x44c>
 800201e:	e621      	b.n	8001c64 <__aeabi_dmul+0x90>
 8002020:	e63d      	b.n	8001c9e <__aeabi_dmul+0xca>
 8002022:	2101      	movs	r1, #1
 8002024:	1ac9      	subs	r1, r1, r3
 8002026:	2938      	cmp	r1, #56	; 0x38
 8002028:	dd00      	ble.n	800202c <__aeabi_dmul+0x458>
 800202a:	e642      	b.n	8001cb2 <__aeabi_dmul+0xde>
 800202c:	291f      	cmp	r1, #31
 800202e:	dd47      	ble.n	80020c0 <__aeabi_dmul+0x4ec>
 8002030:	261f      	movs	r6, #31
 8002032:	0025      	movs	r5, r4
 8002034:	4276      	negs	r6, r6
 8002036:	1af3      	subs	r3, r6, r3
 8002038:	40dd      	lsrs	r5, r3
 800203a:	002b      	movs	r3, r5
 800203c:	2920      	cmp	r1, #32
 800203e:	d005      	beq.n	800204c <__aeabi_dmul+0x478>
 8002040:	4942      	ldr	r1, [pc, #264]	; (800214c <__aeabi_dmul+0x578>)
 8002042:	9d02      	ldr	r5, [sp, #8]
 8002044:	468c      	mov	ip, r1
 8002046:	4465      	add	r5, ip
 8002048:	40ac      	lsls	r4, r5
 800204a:	4320      	orrs	r0, r4
 800204c:	1e41      	subs	r1, r0, #1
 800204e:	4188      	sbcs	r0, r1
 8002050:	4318      	orrs	r0, r3
 8002052:	2307      	movs	r3, #7
 8002054:	001d      	movs	r5, r3
 8002056:	2400      	movs	r4, #0
 8002058:	4005      	ands	r5, r0
 800205a:	4203      	tst	r3, r0
 800205c:	d04a      	beq.n	80020f4 <__aeabi_dmul+0x520>
 800205e:	230f      	movs	r3, #15
 8002060:	2400      	movs	r4, #0
 8002062:	4003      	ands	r3, r0
 8002064:	2b04      	cmp	r3, #4
 8002066:	d042      	beq.n	80020ee <__aeabi_dmul+0x51a>
 8002068:	1d03      	adds	r3, r0, #4
 800206a:	4283      	cmp	r3, r0
 800206c:	4180      	sbcs	r0, r0
 800206e:	4240      	negs	r0, r0
 8002070:	1824      	adds	r4, r4, r0
 8002072:	0018      	movs	r0, r3
 8002074:	0223      	lsls	r3, r4, #8
 8002076:	d53a      	bpl.n	80020ee <__aeabi_dmul+0x51a>
 8002078:	2301      	movs	r3, #1
 800207a:	2400      	movs	r4, #0
 800207c:	2500      	movs	r5, #0
 800207e:	e61b      	b.n	8001cb8 <__aeabi_dmul+0xe4>
 8002080:	f000 fd24 	bl	8002acc <__clzsi2>
 8002084:	0001      	movs	r1, r0
 8002086:	0003      	movs	r3, r0
 8002088:	3115      	adds	r1, #21
 800208a:	3320      	adds	r3, #32
 800208c:	291c      	cmp	r1, #28
 800208e:	dd8f      	ble.n	8001fb0 <__aeabi_dmul+0x3dc>
 8002090:	3808      	subs	r0, #8
 8002092:	2200      	movs	r2, #0
 8002094:	4084      	lsls	r4, r0
 8002096:	4692      	mov	sl, r2
 8002098:	46a3      	mov	fp, r4
 800209a:	e796      	b.n	8001fca <__aeabi_dmul+0x3f6>
 800209c:	f000 fd16 	bl	8002acc <__clzsi2>
 80020a0:	0001      	movs	r1, r0
 80020a2:	0003      	movs	r3, r0
 80020a4:	3115      	adds	r1, #21
 80020a6:	3320      	adds	r3, #32
 80020a8:	291c      	cmp	r1, #28
 80020aa:	dc00      	bgt.n	80020ae <__aeabi_dmul+0x4da>
 80020ac:	e758      	b.n	8001f60 <__aeabi_dmul+0x38c>
 80020ae:	0002      	movs	r2, r0
 80020b0:	464c      	mov	r4, r9
 80020b2:	3a08      	subs	r2, #8
 80020b4:	2000      	movs	r0, #0
 80020b6:	4094      	lsls	r4, r2
 80020b8:	e75d      	b.n	8001f76 <__aeabi_dmul+0x3a2>
 80020ba:	9b01      	ldr	r3, [sp, #4]
 80020bc:	9302      	str	r3, [sp, #8]
 80020be:	e711      	b.n	8001ee4 <__aeabi_dmul+0x310>
 80020c0:	4b23      	ldr	r3, [pc, #140]	; (8002150 <__aeabi_dmul+0x57c>)
 80020c2:	0026      	movs	r6, r4
 80020c4:	469c      	mov	ip, r3
 80020c6:	0003      	movs	r3, r0
 80020c8:	9d02      	ldr	r5, [sp, #8]
 80020ca:	40cb      	lsrs	r3, r1
 80020cc:	4465      	add	r5, ip
 80020ce:	40ae      	lsls	r6, r5
 80020d0:	431e      	orrs	r6, r3
 80020d2:	0003      	movs	r3, r0
 80020d4:	40ab      	lsls	r3, r5
 80020d6:	1e58      	subs	r0, r3, #1
 80020d8:	4183      	sbcs	r3, r0
 80020da:	0030      	movs	r0, r6
 80020dc:	4318      	orrs	r0, r3
 80020de:	40cc      	lsrs	r4, r1
 80020e0:	0743      	lsls	r3, r0, #29
 80020e2:	d0c7      	beq.n	8002074 <__aeabi_dmul+0x4a0>
 80020e4:	230f      	movs	r3, #15
 80020e6:	4003      	ands	r3, r0
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d1bd      	bne.n	8002068 <__aeabi_dmul+0x494>
 80020ec:	e7c2      	b.n	8002074 <__aeabi_dmul+0x4a0>
 80020ee:	0765      	lsls	r5, r4, #29
 80020f0:	0264      	lsls	r4, r4, #9
 80020f2:	0b24      	lsrs	r4, r4, #12
 80020f4:	08c0      	lsrs	r0, r0, #3
 80020f6:	2300      	movs	r3, #0
 80020f8:	4305      	orrs	r5, r0
 80020fa:	e5dd      	b.n	8001cb8 <__aeabi_dmul+0xe4>
 80020fc:	2500      	movs	r5, #0
 80020fe:	2302      	movs	r3, #2
 8002100:	2e0f      	cmp	r6, #15
 8002102:	d10c      	bne.n	800211e <__aeabi_dmul+0x54a>
 8002104:	2480      	movs	r4, #128	; 0x80
 8002106:	465b      	mov	r3, fp
 8002108:	0324      	lsls	r4, r4, #12
 800210a:	4223      	tst	r3, r4
 800210c:	d00e      	beq.n	800212c <__aeabi_dmul+0x558>
 800210e:	4221      	tst	r1, r4
 8002110:	d10c      	bne.n	800212c <__aeabi_dmul+0x558>
 8002112:	430c      	orrs	r4, r1
 8002114:	0324      	lsls	r4, r4, #12
 8002116:	003a      	movs	r2, r7
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <__aeabi_dmul+0x580>)
 800211a:	0b24      	lsrs	r4, r4, #12
 800211c:	e5cc      	b.n	8001cb8 <__aeabi_dmul+0xe4>
 800211e:	2e0b      	cmp	r6, #11
 8002120:	d000      	beq.n	8002124 <__aeabi_dmul+0x550>
 8002122:	e5a2      	b.n	8001c6a <__aeabi_dmul+0x96>
 8002124:	468b      	mov	fp, r1
 8002126:	46aa      	mov	sl, r5
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	e5f7      	b.n	8001d1c <__aeabi_dmul+0x148>
 800212c:	2480      	movs	r4, #128	; 0x80
 800212e:	465b      	mov	r3, fp
 8002130:	0324      	lsls	r4, r4, #12
 8002132:	431c      	orrs	r4, r3
 8002134:	0324      	lsls	r4, r4, #12
 8002136:	4642      	mov	r2, r8
 8002138:	4655      	mov	r5, sl
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <__aeabi_dmul+0x580>)
 800213c:	0b24      	lsrs	r4, r4, #12
 800213e:	e5bb      	b.n	8001cb8 <__aeabi_dmul+0xe4>
 8002140:	464d      	mov	r5, r9
 8002142:	0021      	movs	r1, r4
 8002144:	2303      	movs	r3, #3
 8002146:	e7db      	b.n	8002100 <__aeabi_dmul+0x52c>
 8002148:	fffffc0d 	.word	0xfffffc0d
 800214c:	0000043e 	.word	0x0000043e
 8002150:	0000041e 	.word	0x0000041e
 8002154:	000007ff 	.word	0x000007ff

08002158 <__aeabi_dsub>:
 8002158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215a:	4657      	mov	r7, sl
 800215c:	464e      	mov	r6, r9
 800215e:	4645      	mov	r5, r8
 8002160:	46de      	mov	lr, fp
 8002162:	b5e0      	push	{r5, r6, r7, lr}
 8002164:	000d      	movs	r5, r1
 8002166:	0004      	movs	r4, r0
 8002168:	0019      	movs	r1, r3
 800216a:	0010      	movs	r0, r2
 800216c:	032b      	lsls	r3, r5, #12
 800216e:	0a5b      	lsrs	r3, r3, #9
 8002170:	0f62      	lsrs	r2, r4, #29
 8002172:	431a      	orrs	r2, r3
 8002174:	00e3      	lsls	r3, r4, #3
 8002176:	030c      	lsls	r4, r1, #12
 8002178:	0a64      	lsrs	r4, r4, #9
 800217a:	0f47      	lsrs	r7, r0, #29
 800217c:	4327      	orrs	r7, r4
 800217e:	4cd0      	ldr	r4, [pc, #832]	; (80024c0 <__aeabi_dsub+0x368>)
 8002180:	006e      	lsls	r6, r5, #1
 8002182:	4691      	mov	r9, r2
 8002184:	b083      	sub	sp, #12
 8002186:	004a      	lsls	r2, r1, #1
 8002188:	00c0      	lsls	r0, r0, #3
 800218a:	4698      	mov	r8, r3
 800218c:	46a2      	mov	sl, r4
 800218e:	0d76      	lsrs	r6, r6, #21
 8002190:	0fed      	lsrs	r5, r5, #31
 8002192:	0d52      	lsrs	r2, r2, #21
 8002194:	0fc9      	lsrs	r1, r1, #31
 8002196:	9001      	str	r0, [sp, #4]
 8002198:	42a2      	cmp	r2, r4
 800219a:	d100      	bne.n	800219e <__aeabi_dsub+0x46>
 800219c:	e0b9      	b.n	8002312 <__aeabi_dsub+0x1ba>
 800219e:	2401      	movs	r4, #1
 80021a0:	4061      	eors	r1, r4
 80021a2:	468b      	mov	fp, r1
 80021a4:	428d      	cmp	r5, r1
 80021a6:	d100      	bne.n	80021aa <__aeabi_dsub+0x52>
 80021a8:	e08d      	b.n	80022c6 <__aeabi_dsub+0x16e>
 80021aa:	1ab4      	subs	r4, r6, r2
 80021ac:	46a4      	mov	ip, r4
 80021ae:	2c00      	cmp	r4, #0
 80021b0:	dc00      	bgt.n	80021b4 <__aeabi_dsub+0x5c>
 80021b2:	e0b7      	b.n	8002324 <__aeabi_dsub+0x1cc>
 80021b4:	2a00      	cmp	r2, #0
 80021b6:	d100      	bne.n	80021ba <__aeabi_dsub+0x62>
 80021b8:	e0cb      	b.n	8002352 <__aeabi_dsub+0x1fa>
 80021ba:	4ac1      	ldr	r2, [pc, #772]	; (80024c0 <__aeabi_dsub+0x368>)
 80021bc:	4296      	cmp	r6, r2
 80021be:	d100      	bne.n	80021c2 <__aeabi_dsub+0x6a>
 80021c0:	e186      	b.n	80024d0 <__aeabi_dsub+0x378>
 80021c2:	2280      	movs	r2, #128	; 0x80
 80021c4:	0412      	lsls	r2, r2, #16
 80021c6:	4317      	orrs	r7, r2
 80021c8:	4662      	mov	r2, ip
 80021ca:	2a38      	cmp	r2, #56	; 0x38
 80021cc:	dd00      	ble.n	80021d0 <__aeabi_dsub+0x78>
 80021ce:	e1a4      	b.n	800251a <__aeabi_dsub+0x3c2>
 80021d0:	2a1f      	cmp	r2, #31
 80021d2:	dd00      	ble.n	80021d6 <__aeabi_dsub+0x7e>
 80021d4:	e21d      	b.n	8002612 <__aeabi_dsub+0x4ba>
 80021d6:	4661      	mov	r1, ip
 80021d8:	2220      	movs	r2, #32
 80021da:	003c      	movs	r4, r7
 80021dc:	1a52      	subs	r2, r2, r1
 80021de:	0001      	movs	r1, r0
 80021e0:	4090      	lsls	r0, r2
 80021e2:	4094      	lsls	r4, r2
 80021e4:	1e42      	subs	r2, r0, #1
 80021e6:	4190      	sbcs	r0, r2
 80021e8:	4662      	mov	r2, ip
 80021ea:	46a0      	mov	r8, r4
 80021ec:	4664      	mov	r4, ip
 80021ee:	40d7      	lsrs	r7, r2
 80021f0:	464a      	mov	r2, r9
 80021f2:	40e1      	lsrs	r1, r4
 80021f4:	4644      	mov	r4, r8
 80021f6:	1bd2      	subs	r2, r2, r7
 80021f8:	4691      	mov	r9, r2
 80021fa:	430c      	orrs	r4, r1
 80021fc:	4304      	orrs	r4, r0
 80021fe:	1b1c      	subs	r4, r3, r4
 8002200:	42a3      	cmp	r3, r4
 8002202:	4192      	sbcs	r2, r2
 8002204:	464b      	mov	r3, r9
 8002206:	4252      	negs	r2, r2
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	469a      	mov	sl, r3
 800220c:	4653      	mov	r3, sl
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	d400      	bmi.n	8002214 <__aeabi_dsub+0xbc>
 8002212:	e12b      	b.n	800246c <__aeabi_dsub+0x314>
 8002214:	4653      	mov	r3, sl
 8002216:	025a      	lsls	r2, r3, #9
 8002218:	0a53      	lsrs	r3, r2, #9
 800221a:	469a      	mov	sl, r3
 800221c:	4653      	mov	r3, sl
 800221e:	2b00      	cmp	r3, #0
 8002220:	d100      	bne.n	8002224 <__aeabi_dsub+0xcc>
 8002222:	e166      	b.n	80024f2 <__aeabi_dsub+0x39a>
 8002224:	4650      	mov	r0, sl
 8002226:	f000 fc51 	bl	8002acc <__clzsi2>
 800222a:	0003      	movs	r3, r0
 800222c:	3b08      	subs	r3, #8
 800222e:	2220      	movs	r2, #32
 8002230:	0020      	movs	r0, r4
 8002232:	1ad2      	subs	r2, r2, r3
 8002234:	4651      	mov	r1, sl
 8002236:	40d0      	lsrs	r0, r2
 8002238:	4099      	lsls	r1, r3
 800223a:	0002      	movs	r2, r0
 800223c:	409c      	lsls	r4, r3
 800223e:	430a      	orrs	r2, r1
 8002240:	429e      	cmp	r6, r3
 8002242:	dd00      	ble.n	8002246 <__aeabi_dsub+0xee>
 8002244:	e164      	b.n	8002510 <__aeabi_dsub+0x3b8>
 8002246:	1b9b      	subs	r3, r3, r6
 8002248:	1c59      	adds	r1, r3, #1
 800224a:	291f      	cmp	r1, #31
 800224c:	dd00      	ble.n	8002250 <__aeabi_dsub+0xf8>
 800224e:	e0fe      	b.n	800244e <__aeabi_dsub+0x2f6>
 8002250:	2320      	movs	r3, #32
 8002252:	0010      	movs	r0, r2
 8002254:	0026      	movs	r6, r4
 8002256:	1a5b      	subs	r3, r3, r1
 8002258:	409c      	lsls	r4, r3
 800225a:	4098      	lsls	r0, r3
 800225c:	40ce      	lsrs	r6, r1
 800225e:	40ca      	lsrs	r2, r1
 8002260:	1e63      	subs	r3, r4, #1
 8002262:	419c      	sbcs	r4, r3
 8002264:	4330      	orrs	r0, r6
 8002266:	4692      	mov	sl, r2
 8002268:	2600      	movs	r6, #0
 800226a:	4304      	orrs	r4, r0
 800226c:	0763      	lsls	r3, r4, #29
 800226e:	d009      	beq.n	8002284 <__aeabi_dsub+0x12c>
 8002270:	230f      	movs	r3, #15
 8002272:	4023      	ands	r3, r4
 8002274:	2b04      	cmp	r3, #4
 8002276:	d005      	beq.n	8002284 <__aeabi_dsub+0x12c>
 8002278:	1d23      	adds	r3, r4, #4
 800227a:	42a3      	cmp	r3, r4
 800227c:	41a4      	sbcs	r4, r4
 800227e:	4264      	negs	r4, r4
 8002280:	44a2      	add	sl, r4
 8002282:	001c      	movs	r4, r3
 8002284:	4653      	mov	r3, sl
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	d400      	bmi.n	800228c <__aeabi_dsub+0x134>
 800228a:	e0f2      	b.n	8002472 <__aeabi_dsub+0x31a>
 800228c:	4b8c      	ldr	r3, [pc, #560]	; (80024c0 <__aeabi_dsub+0x368>)
 800228e:	3601      	adds	r6, #1
 8002290:	429e      	cmp	r6, r3
 8002292:	d100      	bne.n	8002296 <__aeabi_dsub+0x13e>
 8002294:	e10f      	b.n	80024b6 <__aeabi_dsub+0x35e>
 8002296:	4653      	mov	r3, sl
 8002298:	498a      	ldr	r1, [pc, #552]	; (80024c4 <__aeabi_dsub+0x36c>)
 800229a:	08e4      	lsrs	r4, r4, #3
 800229c:	400b      	ands	r3, r1
 800229e:	0019      	movs	r1, r3
 80022a0:	075b      	lsls	r3, r3, #29
 80022a2:	4323      	orrs	r3, r4
 80022a4:	0572      	lsls	r2, r6, #21
 80022a6:	024c      	lsls	r4, r1, #9
 80022a8:	0b24      	lsrs	r4, r4, #12
 80022aa:	0d52      	lsrs	r2, r2, #21
 80022ac:	0512      	lsls	r2, r2, #20
 80022ae:	4322      	orrs	r2, r4
 80022b0:	07ed      	lsls	r5, r5, #31
 80022b2:	432a      	orrs	r2, r5
 80022b4:	0018      	movs	r0, r3
 80022b6:	0011      	movs	r1, r2
 80022b8:	b003      	add	sp, #12
 80022ba:	bcf0      	pop	{r4, r5, r6, r7}
 80022bc:	46bb      	mov	fp, r7
 80022be:	46b2      	mov	sl, r6
 80022c0:	46a9      	mov	r9, r5
 80022c2:	46a0      	mov	r8, r4
 80022c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022c6:	1ab4      	subs	r4, r6, r2
 80022c8:	46a4      	mov	ip, r4
 80022ca:	2c00      	cmp	r4, #0
 80022cc:	dd59      	ble.n	8002382 <__aeabi_dsub+0x22a>
 80022ce:	2a00      	cmp	r2, #0
 80022d0:	d100      	bne.n	80022d4 <__aeabi_dsub+0x17c>
 80022d2:	e0b0      	b.n	8002436 <__aeabi_dsub+0x2de>
 80022d4:	4556      	cmp	r6, sl
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x182>
 80022d8:	e0fa      	b.n	80024d0 <__aeabi_dsub+0x378>
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	0412      	lsls	r2, r2, #16
 80022de:	4317      	orrs	r7, r2
 80022e0:	4662      	mov	r2, ip
 80022e2:	2a38      	cmp	r2, #56	; 0x38
 80022e4:	dd00      	ble.n	80022e8 <__aeabi_dsub+0x190>
 80022e6:	e0d4      	b.n	8002492 <__aeabi_dsub+0x33a>
 80022e8:	2a1f      	cmp	r2, #31
 80022ea:	dc00      	bgt.n	80022ee <__aeabi_dsub+0x196>
 80022ec:	e1c0      	b.n	8002670 <__aeabi_dsub+0x518>
 80022ee:	0039      	movs	r1, r7
 80022f0:	3a20      	subs	r2, #32
 80022f2:	40d1      	lsrs	r1, r2
 80022f4:	4662      	mov	r2, ip
 80022f6:	2a20      	cmp	r2, #32
 80022f8:	d006      	beq.n	8002308 <__aeabi_dsub+0x1b0>
 80022fa:	4664      	mov	r4, ip
 80022fc:	2240      	movs	r2, #64	; 0x40
 80022fe:	1b12      	subs	r2, r2, r4
 8002300:	003c      	movs	r4, r7
 8002302:	4094      	lsls	r4, r2
 8002304:	4304      	orrs	r4, r0
 8002306:	9401      	str	r4, [sp, #4]
 8002308:	9c01      	ldr	r4, [sp, #4]
 800230a:	1e62      	subs	r2, r4, #1
 800230c:	4194      	sbcs	r4, r2
 800230e:	430c      	orrs	r4, r1
 8002310:	e0c3      	b.n	800249a <__aeabi_dsub+0x342>
 8002312:	003c      	movs	r4, r7
 8002314:	4304      	orrs	r4, r0
 8002316:	d02b      	beq.n	8002370 <__aeabi_dsub+0x218>
 8002318:	468b      	mov	fp, r1
 800231a:	428d      	cmp	r5, r1
 800231c:	d02e      	beq.n	800237c <__aeabi_dsub+0x224>
 800231e:	4c6a      	ldr	r4, [pc, #424]	; (80024c8 <__aeabi_dsub+0x370>)
 8002320:	46a4      	mov	ip, r4
 8002322:	44b4      	add	ip, r6
 8002324:	4664      	mov	r4, ip
 8002326:	2c00      	cmp	r4, #0
 8002328:	d05f      	beq.n	80023ea <__aeabi_dsub+0x292>
 800232a:	1b94      	subs	r4, r2, r6
 800232c:	46a4      	mov	ip, r4
 800232e:	2e00      	cmp	r6, #0
 8002330:	d000      	beq.n	8002334 <__aeabi_dsub+0x1dc>
 8002332:	e120      	b.n	8002576 <__aeabi_dsub+0x41e>
 8002334:	464c      	mov	r4, r9
 8002336:	431c      	orrs	r4, r3
 8002338:	d100      	bne.n	800233c <__aeabi_dsub+0x1e4>
 800233a:	e1c7      	b.n	80026cc <__aeabi_dsub+0x574>
 800233c:	4661      	mov	r1, ip
 800233e:	1e4c      	subs	r4, r1, #1
 8002340:	2901      	cmp	r1, #1
 8002342:	d100      	bne.n	8002346 <__aeabi_dsub+0x1ee>
 8002344:	e223      	b.n	800278e <__aeabi_dsub+0x636>
 8002346:	4d5e      	ldr	r5, [pc, #376]	; (80024c0 <__aeabi_dsub+0x368>)
 8002348:	45ac      	cmp	ip, r5
 800234a:	d100      	bne.n	800234e <__aeabi_dsub+0x1f6>
 800234c:	e1d8      	b.n	8002700 <__aeabi_dsub+0x5a8>
 800234e:	46a4      	mov	ip, r4
 8002350:	e11a      	b.n	8002588 <__aeabi_dsub+0x430>
 8002352:	003a      	movs	r2, r7
 8002354:	4302      	orrs	r2, r0
 8002356:	d100      	bne.n	800235a <__aeabi_dsub+0x202>
 8002358:	e0e4      	b.n	8002524 <__aeabi_dsub+0x3cc>
 800235a:	0022      	movs	r2, r4
 800235c:	3a01      	subs	r2, #1
 800235e:	2c01      	cmp	r4, #1
 8002360:	d100      	bne.n	8002364 <__aeabi_dsub+0x20c>
 8002362:	e1c3      	b.n	80026ec <__aeabi_dsub+0x594>
 8002364:	4956      	ldr	r1, [pc, #344]	; (80024c0 <__aeabi_dsub+0x368>)
 8002366:	428c      	cmp	r4, r1
 8002368:	d100      	bne.n	800236c <__aeabi_dsub+0x214>
 800236a:	e0b1      	b.n	80024d0 <__aeabi_dsub+0x378>
 800236c:	4694      	mov	ip, r2
 800236e:	e72b      	b.n	80021c8 <__aeabi_dsub+0x70>
 8002370:	2401      	movs	r4, #1
 8002372:	4061      	eors	r1, r4
 8002374:	468b      	mov	fp, r1
 8002376:	428d      	cmp	r5, r1
 8002378:	d000      	beq.n	800237c <__aeabi_dsub+0x224>
 800237a:	e716      	b.n	80021aa <__aeabi_dsub+0x52>
 800237c:	4952      	ldr	r1, [pc, #328]	; (80024c8 <__aeabi_dsub+0x370>)
 800237e:	468c      	mov	ip, r1
 8002380:	44b4      	add	ip, r6
 8002382:	4664      	mov	r4, ip
 8002384:	2c00      	cmp	r4, #0
 8002386:	d100      	bne.n	800238a <__aeabi_dsub+0x232>
 8002388:	e0d3      	b.n	8002532 <__aeabi_dsub+0x3da>
 800238a:	1b91      	subs	r1, r2, r6
 800238c:	468c      	mov	ip, r1
 800238e:	2e00      	cmp	r6, #0
 8002390:	d100      	bne.n	8002394 <__aeabi_dsub+0x23c>
 8002392:	e15e      	b.n	8002652 <__aeabi_dsub+0x4fa>
 8002394:	494a      	ldr	r1, [pc, #296]	; (80024c0 <__aeabi_dsub+0x368>)
 8002396:	428a      	cmp	r2, r1
 8002398:	d100      	bne.n	800239c <__aeabi_dsub+0x244>
 800239a:	e1be      	b.n	800271a <__aeabi_dsub+0x5c2>
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	464c      	mov	r4, r9
 80023a0:	0409      	lsls	r1, r1, #16
 80023a2:	430c      	orrs	r4, r1
 80023a4:	46a1      	mov	r9, r4
 80023a6:	4661      	mov	r1, ip
 80023a8:	2938      	cmp	r1, #56	; 0x38
 80023aa:	dd00      	ble.n	80023ae <__aeabi_dsub+0x256>
 80023ac:	e1ba      	b.n	8002724 <__aeabi_dsub+0x5cc>
 80023ae:	291f      	cmp	r1, #31
 80023b0:	dd00      	ble.n	80023b4 <__aeabi_dsub+0x25c>
 80023b2:	e227      	b.n	8002804 <__aeabi_dsub+0x6ac>
 80023b4:	2420      	movs	r4, #32
 80023b6:	1a64      	subs	r4, r4, r1
 80023b8:	4649      	mov	r1, r9
 80023ba:	40a1      	lsls	r1, r4
 80023bc:	001e      	movs	r6, r3
 80023be:	4688      	mov	r8, r1
 80023c0:	4661      	mov	r1, ip
 80023c2:	40a3      	lsls	r3, r4
 80023c4:	40ce      	lsrs	r6, r1
 80023c6:	4641      	mov	r1, r8
 80023c8:	1e5c      	subs	r4, r3, #1
 80023ca:	41a3      	sbcs	r3, r4
 80023cc:	4331      	orrs	r1, r6
 80023ce:	4319      	orrs	r1, r3
 80023d0:	000c      	movs	r4, r1
 80023d2:	4663      	mov	r3, ip
 80023d4:	4649      	mov	r1, r9
 80023d6:	40d9      	lsrs	r1, r3
 80023d8:	187f      	adds	r7, r7, r1
 80023da:	1824      	adds	r4, r4, r0
 80023dc:	4284      	cmp	r4, r0
 80023de:	419b      	sbcs	r3, r3
 80023e0:	425b      	negs	r3, r3
 80023e2:	469a      	mov	sl, r3
 80023e4:	0016      	movs	r6, r2
 80023e6:	44ba      	add	sl, r7
 80023e8:	e05d      	b.n	80024a6 <__aeabi_dsub+0x34e>
 80023ea:	4c38      	ldr	r4, [pc, #224]	; (80024cc <__aeabi_dsub+0x374>)
 80023ec:	1c72      	adds	r2, r6, #1
 80023ee:	4222      	tst	r2, r4
 80023f0:	d000      	beq.n	80023f4 <__aeabi_dsub+0x29c>
 80023f2:	e0df      	b.n	80025b4 <__aeabi_dsub+0x45c>
 80023f4:	464a      	mov	r2, r9
 80023f6:	431a      	orrs	r2, r3
 80023f8:	2e00      	cmp	r6, #0
 80023fa:	d000      	beq.n	80023fe <__aeabi_dsub+0x2a6>
 80023fc:	e15c      	b.n	80026b8 <__aeabi_dsub+0x560>
 80023fe:	2a00      	cmp	r2, #0
 8002400:	d100      	bne.n	8002404 <__aeabi_dsub+0x2ac>
 8002402:	e1cf      	b.n	80027a4 <__aeabi_dsub+0x64c>
 8002404:	003a      	movs	r2, r7
 8002406:	4302      	orrs	r2, r0
 8002408:	d100      	bne.n	800240c <__aeabi_dsub+0x2b4>
 800240a:	e17f      	b.n	800270c <__aeabi_dsub+0x5b4>
 800240c:	1a1c      	subs	r4, r3, r0
 800240e:	464a      	mov	r2, r9
 8002410:	42a3      	cmp	r3, r4
 8002412:	4189      	sbcs	r1, r1
 8002414:	1bd2      	subs	r2, r2, r7
 8002416:	4249      	negs	r1, r1
 8002418:	1a52      	subs	r2, r2, r1
 800241a:	4692      	mov	sl, r2
 800241c:	0212      	lsls	r2, r2, #8
 800241e:	d400      	bmi.n	8002422 <__aeabi_dsub+0x2ca>
 8002420:	e20a      	b.n	8002838 <__aeabi_dsub+0x6e0>
 8002422:	1ac4      	subs	r4, r0, r3
 8002424:	42a0      	cmp	r0, r4
 8002426:	4180      	sbcs	r0, r0
 8002428:	464b      	mov	r3, r9
 800242a:	4240      	negs	r0, r0
 800242c:	1aff      	subs	r7, r7, r3
 800242e:	1a3b      	subs	r3, r7, r0
 8002430:	469a      	mov	sl, r3
 8002432:	465d      	mov	r5, fp
 8002434:	e71a      	b.n	800226c <__aeabi_dsub+0x114>
 8002436:	003a      	movs	r2, r7
 8002438:	4302      	orrs	r2, r0
 800243a:	d073      	beq.n	8002524 <__aeabi_dsub+0x3cc>
 800243c:	0022      	movs	r2, r4
 800243e:	3a01      	subs	r2, #1
 8002440:	2c01      	cmp	r4, #1
 8002442:	d100      	bne.n	8002446 <__aeabi_dsub+0x2ee>
 8002444:	e0cb      	b.n	80025de <__aeabi_dsub+0x486>
 8002446:	4554      	cmp	r4, sl
 8002448:	d042      	beq.n	80024d0 <__aeabi_dsub+0x378>
 800244a:	4694      	mov	ip, r2
 800244c:	e748      	b.n	80022e0 <__aeabi_dsub+0x188>
 800244e:	0010      	movs	r0, r2
 8002450:	3b1f      	subs	r3, #31
 8002452:	40d8      	lsrs	r0, r3
 8002454:	2920      	cmp	r1, #32
 8002456:	d003      	beq.n	8002460 <__aeabi_dsub+0x308>
 8002458:	2340      	movs	r3, #64	; 0x40
 800245a:	1a5b      	subs	r3, r3, r1
 800245c:	409a      	lsls	r2, r3
 800245e:	4314      	orrs	r4, r2
 8002460:	1e63      	subs	r3, r4, #1
 8002462:	419c      	sbcs	r4, r3
 8002464:	2300      	movs	r3, #0
 8002466:	2600      	movs	r6, #0
 8002468:	469a      	mov	sl, r3
 800246a:	4304      	orrs	r4, r0
 800246c:	0763      	lsls	r3, r4, #29
 800246e:	d000      	beq.n	8002472 <__aeabi_dsub+0x31a>
 8002470:	e6fe      	b.n	8002270 <__aeabi_dsub+0x118>
 8002472:	4652      	mov	r2, sl
 8002474:	08e3      	lsrs	r3, r4, #3
 8002476:	0752      	lsls	r2, r2, #29
 8002478:	4313      	orrs	r3, r2
 800247a:	4652      	mov	r2, sl
 800247c:	46b4      	mov	ip, r6
 800247e:	08d2      	lsrs	r2, r2, #3
 8002480:	490f      	ldr	r1, [pc, #60]	; (80024c0 <__aeabi_dsub+0x368>)
 8002482:	458c      	cmp	ip, r1
 8002484:	d02a      	beq.n	80024dc <__aeabi_dsub+0x384>
 8002486:	0312      	lsls	r2, r2, #12
 8002488:	0b14      	lsrs	r4, r2, #12
 800248a:	4662      	mov	r2, ip
 800248c:	0552      	lsls	r2, r2, #21
 800248e:	0d52      	lsrs	r2, r2, #21
 8002490:	e70c      	b.n	80022ac <__aeabi_dsub+0x154>
 8002492:	003c      	movs	r4, r7
 8002494:	4304      	orrs	r4, r0
 8002496:	1e62      	subs	r2, r4, #1
 8002498:	4194      	sbcs	r4, r2
 800249a:	18e4      	adds	r4, r4, r3
 800249c:	429c      	cmp	r4, r3
 800249e:	4192      	sbcs	r2, r2
 80024a0:	4252      	negs	r2, r2
 80024a2:	444a      	add	r2, r9
 80024a4:	4692      	mov	sl, r2
 80024a6:	4653      	mov	r3, sl
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	d5df      	bpl.n	800246c <__aeabi_dsub+0x314>
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <__aeabi_dsub+0x368>)
 80024ae:	3601      	adds	r6, #1
 80024b0:	429e      	cmp	r6, r3
 80024b2:	d000      	beq.n	80024b6 <__aeabi_dsub+0x35e>
 80024b4:	e0a0      	b.n	80025f8 <__aeabi_dsub+0x4a0>
 80024b6:	0032      	movs	r2, r6
 80024b8:	2400      	movs	r4, #0
 80024ba:	2300      	movs	r3, #0
 80024bc:	e6f6      	b.n	80022ac <__aeabi_dsub+0x154>
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	000007ff 	.word	0x000007ff
 80024c4:	ff7fffff 	.word	0xff7fffff
 80024c8:	fffff801 	.word	0xfffff801
 80024cc:	000007fe 	.word	0x000007fe
 80024d0:	08db      	lsrs	r3, r3, #3
 80024d2:	464a      	mov	r2, r9
 80024d4:	0752      	lsls	r2, r2, #29
 80024d6:	4313      	orrs	r3, r2
 80024d8:	464a      	mov	r2, r9
 80024da:	08d2      	lsrs	r2, r2, #3
 80024dc:	0019      	movs	r1, r3
 80024de:	4311      	orrs	r1, r2
 80024e0:	d100      	bne.n	80024e4 <__aeabi_dsub+0x38c>
 80024e2:	e1b5      	b.n	8002850 <__aeabi_dsub+0x6f8>
 80024e4:	2480      	movs	r4, #128	; 0x80
 80024e6:	0324      	lsls	r4, r4, #12
 80024e8:	4314      	orrs	r4, r2
 80024ea:	0324      	lsls	r4, r4, #12
 80024ec:	4ad5      	ldr	r2, [pc, #852]	; (8002844 <__aeabi_dsub+0x6ec>)
 80024ee:	0b24      	lsrs	r4, r4, #12
 80024f0:	e6dc      	b.n	80022ac <__aeabi_dsub+0x154>
 80024f2:	0020      	movs	r0, r4
 80024f4:	f000 faea 	bl	8002acc <__clzsi2>
 80024f8:	0003      	movs	r3, r0
 80024fa:	3318      	adds	r3, #24
 80024fc:	2b1f      	cmp	r3, #31
 80024fe:	dc00      	bgt.n	8002502 <__aeabi_dsub+0x3aa>
 8002500:	e695      	b.n	800222e <__aeabi_dsub+0xd6>
 8002502:	0022      	movs	r2, r4
 8002504:	3808      	subs	r0, #8
 8002506:	4082      	lsls	r2, r0
 8002508:	2400      	movs	r4, #0
 800250a:	429e      	cmp	r6, r3
 800250c:	dc00      	bgt.n	8002510 <__aeabi_dsub+0x3b8>
 800250e:	e69a      	b.n	8002246 <__aeabi_dsub+0xee>
 8002510:	1af6      	subs	r6, r6, r3
 8002512:	4bcd      	ldr	r3, [pc, #820]	; (8002848 <__aeabi_dsub+0x6f0>)
 8002514:	401a      	ands	r2, r3
 8002516:	4692      	mov	sl, r2
 8002518:	e6a8      	b.n	800226c <__aeabi_dsub+0x114>
 800251a:	003c      	movs	r4, r7
 800251c:	4304      	orrs	r4, r0
 800251e:	1e62      	subs	r2, r4, #1
 8002520:	4194      	sbcs	r4, r2
 8002522:	e66c      	b.n	80021fe <__aeabi_dsub+0xa6>
 8002524:	464a      	mov	r2, r9
 8002526:	08db      	lsrs	r3, r3, #3
 8002528:	0752      	lsls	r2, r2, #29
 800252a:	4313      	orrs	r3, r2
 800252c:	464a      	mov	r2, r9
 800252e:	08d2      	lsrs	r2, r2, #3
 8002530:	e7a6      	b.n	8002480 <__aeabi_dsub+0x328>
 8002532:	4cc6      	ldr	r4, [pc, #792]	; (800284c <__aeabi_dsub+0x6f4>)
 8002534:	1c72      	adds	r2, r6, #1
 8002536:	4222      	tst	r2, r4
 8002538:	d000      	beq.n	800253c <__aeabi_dsub+0x3e4>
 800253a:	e0ac      	b.n	8002696 <__aeabi_dsub+0x53e>
 800253c:	464a      	mov	r2, r9
 800253e:	431a      	orrs	r2, r3
 8002540:	2e00      	cmp	r6, #0
 8002542:	d000      	beq.n	8002546 <__aeabi_dsub+0x3ee>
 8002544:	e105      	b.n	8002752 <__aeabi_dsub+0x5fa>
 8002546:	2a00      	cmp	r2, #0
 8002548:	d100      	bne.n	800254c <__aeabi_dsub+0x3f4>
 800254a:	e156      	b.n	80027fa <__aeabi_dsub+0x6a2>
 800254c:	003a      	movs	r2, r7
 800254e:	4302      	orrs	r2, r0
 8002550:	d100      	bne.n	8002554 <__aeabi_dsub+0x3fc>
 8002552:	e0db      	b.n	800270c <__aeabi_dsub+0x5b4>
 8002554:	181c      	adds	r4, r3, r0
 8002556:	429c      	cmp	r4, r3
 8002558:	419b      	sbcs	r3, r3
 800255a:	444f      	add	r7, r9
 800255c:	46ba      	mov	sl, r7
 800255e:	425b      	negs	r3, r3
 8002560:	449a      	add	sl, r3
 8002562:	4653      	mov	r3, sl
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	d400      	bmi.n	800256a <__aeabi_dsub+0x412>
 8002568:	e780      	b.n	800246c <__aeabi_dsub+0x314>
 800256a:	4652      	mov	r2, sl
 800256c:	4bb6      	ldr	r3, [pc, #728]	; (8002848 <__aeabi_dsub+0x6f0>)
 800256e:	2601      	movs	r6, #1
 8002570:	401a      	ands	r2, r3
 8002572:	4692      	mov	sl, r2
 8002574:	e77a      	b.n	800246c <__aeabi_dsub+0x314>
 8002576:	4cb3      	ldr	r4, [pc, #716]	; (8002844 <__aeabi_dsub+0x6ec>)
 8002578:	42a2      	cmp	r2, r4
 800257a:	d100      	bne.n	800257e <__aeabi_dsub+0x426>
 800257c:	e0c0      	b.n	8002700 <__aeabi_dsub+0x5a8>
 800257e:	2480      	movs	r4, #128	; 0x80
 8002580:	464d      	mov	r5, r9
 8002582:	0424      	lsls	r4, r4, #16
 8002584:	4325      	orrs	r5, r4
 8002586:	46a9      	mov	r9, r5
 8002588:	4664      	mov	r4, ip
 800258a:	2c38      	cmp	r4, #56	; 0x38
 800258c:	dc53      	bgt.n	8002636 <__aeabi_dsub+0x4de>
 800258e:	4661      	mov	r1, ip
 8002590:	2c1f      	cmp	r4, #31
 8002592:	dd00      	ble.n	8002596 <__aeabi_dsub+0x43e>
 8002594:	e0cd      	b.n	8002732 <__aeabi_dsub+0x5da>
 8002596:	2520      	movs	r5, #32
 8002598:	001e      	movs	r6, r3
 800259a:	1b2d      	subs	r5, r5, r4
 800259c:	464c      	mov	r4, r9
 800259e:	40ab      	lsls	r3, r5
 80025a0:	40ac      	lsls	r4, r5
 80025a2:	40ce      	lsrs	r6, r1
 80025a4:	1e5d      	subs	r5, r3, #1
 80025a6:	41ab      	sbcs	r3, r5
 80025a8:	4334      	orrs	r4, r6
 80025aa:	4323      	orrs	r3, r4
 80025ac:	464c      	mov	r4, r9
 80025ae:	40cc      	lsrs	r4, r1
 80025b0:	1b3f      	subs	r7, r7, r4
 80025b2:	e045      	b.n	8002640 <__aeabi_dsub+0x4e8>
 80025b4:	464a      	mov	r2, r9
 80025b6:	1a1c      	subs	r4, r3, r0
 80025b8:	1bd1      	subs	r1, r2, r7
 80025ba:	42a3      	cmp	r3, r4
 80025bc:	4192      	sbcs	r2, r2
 80025be:	4252      	negs	r2, r2
 80025c0:	4692      	mov	sl, r2
 80025c2:	000a      	movs	r2, r1
 80025c4:	4651      	mov	r1, sl
 80025c6:	1a52      	subs	r2, r2, r1
 80025c8:	4692      	mov	sl, r2
 80025ca:	0212      	lsls	r2, r2, #8
 80025cc:	d500      	bpl.n	80025d0 <__aeabi_dsub+0x478>
 80025ce:	e083      	b.n	80026d8 <__aeabi_dsub+0x580>
 80025d0:	4653      	mov	r3, sl
 80025d2:	4323      	orrs	r3, r4
 80025d4:	d000      	beq.n	80025d8 <__aeabi_dsub+0x480>
 80025d6:	e621      	b.n	800221c <__aeabi_dsub+0xc4>
 80025d8:	2200      	movs	r2, #0
 80025da:	2500      	movs	r5, #0
 80025dc:	e753      	b.n	8002486 <__aeabi_dsub+0x32e>
 80025de:	181c      	adds	r4, r3, r0
 80025e0:	429c      	cmp	r4, r3
 80025e2:	419b      	sbcs	r3, r3
 80025e4:	444f      	add	r7, r9
 80025e6:	46ba      	mov	sl, r7
 80025e8:	425b      	negs	r3, r3
 80025ea:	449a      	add	sl, r3
 80025ec:	4653      	mov	r3, sl
 80025ee:	2601      	movs	r6, #1
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	d400      	bmi.n	80025f6 <__aeabi_dsub+0x49e>
 80025f4:	e73a      	b.n	800246c <__aeabi_dsub+0x314>
 80025f6:	2602      	movs	r6, #2
 80025f8:	4652      	mov	r2, sl
 80025fa:	4b93      	ldr	r3, [pc, #588]	; (8002848 <__aeabi_dsub+0x6f0>)
 80025fc:	2101      	movs	r1, #1
 80025fe:	401a      	ands	r2, r3
 8002600:	0013      	movs	r3, r2
 8002602:	4021      	ands	r1, r4
 8002604:	0862      	lsrs	r2, r4, #1
 8002606:	430a      	orrs	r2, r1
 8002608:	07dc      	lsls	r4, r3, #31
 800260a:	085b      	lsrs	r3, r3, #1
 800260c:	469a      	mov	sl, r3
 800260e:	4314      	orrs	r4, r2
 8002610:	e62c      	b.n	800226c <__aeabi_dsub+0x114>
 8002612:	0039      	movs	r1, r7
 8002614:	3a20      	subs	r2, #32
 8002616:	40d1      	lsrs	r1, r2
 8002618:	4662      	mov	r2, ip
 800261a:	2a20      	cmp	r2, #32
 800261c:	d006      	beq.n	800262c <__aeabi_dsub+0x4d4>
 800261e:	4664      	mov	r4, ip
 8002620:	2240      	movs	r2, #64	; 0x40
 8002622:	1b12      	subs	r2, r2, r4
 8002624:	003c      	movs	r4, r7
 8002626:	4094      	lsls	r4, r2
 8002628:	4304      	orrs	r4, r0
 800262a:	9401      	str	r4, [sp, #4]
 800262c:	9c01      	ldr	r4, [sp, #4]
 800262e:	1e62      	subs	r2, r4, #1
 8002630:	4194      	sbcs	r4, r2
 8002632:	430c      	orrs	r4, r1
 8002634:	e5e3      	b.n	80021fe <__aeabi_dsub+0xa6>
 8002636:	4649      	mov	r1, r9
 8002638:	4319      	orrs	r1, r3
 800263a:	000b      	movs	r3, r1
 800263c:	1e5c      	subs	r4, r3, #1
 800263e:	41a3      	sbcs	r3, r4
 8002640:	1ac4      	subs	r4, r0, r3
 8002642:	42a0      	cmp	r0, r4
 8002644:	419b      	sbcs	r3, r3
 8002646:	425b      	negs	r3, r3
 8002648:	1afb      	subs	r3, r7, r3
 800264a:	469a      	mov	sl, r3
 800264c:	465d      	mov	r5, fp
 800264e:	0016      	movs	r6, r2
 8002650:	e5dc      	b.n	800220c <__aeabi_dsub+0xb4>
 8002652:	4649      	mov	r1, r9
 8002654:	4319      	orrs	r1, r3
 8002656:	d100      	bne.n	800265a <__aeabi_dsub+0x502>
 8002658:	e0ae      	b.n	80027b8 <__aeabi_dsub+0x660>
 800265a:	4661      	mov	r1, ip
 800265c:	4664      	mov	r4, ip
 800265e:	3901      	subs	r1, #1
 8002660:	2c01      	cmp	r4, #1
 8002662:	d100      	bne.n	8002666 <__aeabi_dsub+0x50e>
 8002664:	e0e0      	b.n	8002828 <__aeabi_dsub+0x6d0>
 8002666:	4c77      	ldr	r4, [pc, #476]	; (8002844 <__aeabi_dsub+0x6ec>)
 8002668:	45a4      	cmp	ip, r4
 800266a:	d056      	beq.n	800271a <__aeabi_dsub+0x5c2>
 800266c:	468c      	mov	ip, r1
 800266e:	e69a      	b.n	80023a6 <__aeabi_dsub+0x24e>
 8002670:	4661      	mov	r1, ip
 8002672:	2220      	movs	r2, #32
 8002674:	003c      	movs	r4, r7
 8002676:	1a52      	subs	r2, r2, r1
 8002678:	4094      	lsls	r4, r2
 800267a:	0001      	movs	r1, r0
 800267c:	4090      	lsls	r0, r2
 800267e:	46a0      	mov	r8, r4
 8002680:	4664      	mov	r4, ip
 8002682:	1e42      	subs	r2, r0, #1
 8002684:	4190      	sbcs	r0, r2
 8002686:	4662      	mov	r2, ip
 8002688:	40e1      	lsrs	r1, r4
 800268a:	4644      	mov	r4, r8
 800268c:	40d7      	lsrs	r7, r2
 800268e:	430c      	orrs	r4, r1
 8002690:	4304      	orrs	r4, r0
 8002692:	44b9      	add	r9, r7
 8002694:	e701      	b.n	800249a <__aeabi_dsub+0x342>
 8002696:	496b      	ldr	r1, [pc, #428]	; (8002844 <__aeabi_dsub+0x6ec>)
 8002698:	428a      	cmp	r2, r1
 800269a:	d100      	bne.n	800269e <__aeabi_dsub+0x546>
 800269c:	e70c      	b.n	80024b8 <__aeabi_dsub+0x360>
 800269e:	1818      	adds	r0, r3, r0
 80026a0:	4298      	cmp	r0, r3
 80026a2:	419b      	sbcs	r3, r3
 80026a4:	444f      	add	r7, r9
 80026a6:	425b      	negs	r3, r3
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	07dc      	lsls	r4, r3, #31
 80026ac:	0840      	lsrs	r0, r0, #1
 80026ae:	085b      	lsrs	r3, r3, #1
 80026b0:	469a      	mov	sl, r3
 80026b2:	0016      	movs	r6, r2
 80026b4:	4304      	orrs	r4, r0
 80026b6:	e6d9      	b.n	800246c <__aeabi_dsub+0x314>
 80026b8:	2a00      	cmp	r2, #0
 80026ba:	d000      	beq.n	80026be <__aeabi_dsub+0x566>
 80026bc:	e081      	b.n	80027c2 <__aeabi_dsub+0x66a>
 80026be:	003b      	movs	r3, r7
 80026c0:	4303      	orrs	r3, r0
 80026c2:	d11d      	bne.n	8002700 <__aeabi_dsub+0x5a8>
 80026c4:	2280      	movs	r2, #128	; 0x80
 80026c6:	2500      	movs	r5, #0
 80026c8:	0312      	lsls	r2, r2, #12
 80026ca:	e70b      	b.n	80024e4 <__aeabi_dsub+0x38c>
 80026cc:	08c0      	lsrs	r0, r0, #3
 80026ce:	077b      	lsls	r3, r7, #29
 80026d0:	465d      	mov	r5, fp
 80026d2:	4303      	orrs	r3, r0
 80026d4:	08fa      	lsrs	r2, r7, #3
 80026d6:	e6d3      	b.n	8002480 <__aeabi_dsub+0x328>
 80026d8:	1ac4      	subs	r4, r0, r3
 80026da:	42a0      	cmp	r0, r4
 80026dc:	4180      	sbcs	r0, r0
 80026de:	464b      	mov	r3, r9
 80026e0:	4240      	negs	r0, r0
 80026e2:	1aff      	subs	r7, r7, r3
 80026e4:	1a3b      	subs	r3, r7, r0
 80026e6:	469a      	mov	sl, r3
 80026e8:	465d      	mov	r5, fp
 80026ea:	e597      	b.n	800221c <__aeabi_dsub+0xc4>
 80026ec:	1a1c      	subs	r4, r3, r0
 80026ee:	464a      	mov	r2, r9
 80026f0:	42a3      	cmp	r3, r4
 80026f2:	419b      	sbcs	r3, r3
 80026f4:	1bd7      	subs	r7, r2, r7
 80026f6:	425b      	negs	r3, r3
 80026f8:	1afb      	subs	r3, r7, r3
 80026fa:	469a      	mov	sl, r3
 80026fc:	2601      	movs	r6, #1
 80026fe:	e585      	b.n	800220c <__aeabi_dsub+0xb4>
 8002700:	08c0      	lsrs	r0, r0, #3
 8002702:	077b      	lsls	r3, r7, #29
 8002704:	465d      	mov	r5, fp
 8002706:	4303      	orrs	r3, r0
 8002708:	08fa      	lsrs	r2, r7, #3
 800270a:	e6e7      	b.n	80024dc <__aeabi_dsub+0x384>
 800270c:	464a      	mov	r2, r9
 800270e:	08db      	lsrs	r3, r3, #3
 8002710:	0752      	lsls	r2, r2, #29
 8002712:	4313      	orrs	r3, r2
 8002714:	464a      	mov	r2, r9
 8002716:	08d2      	lsrs	r2, r2, #3
 8002718:	e6b5      	b.n	8002486 <__aeabi_dsub+0x32e>
 800271a:	08c0      	lsrs	r0, r0, #3
 800271c:	077b      	lsls	r3, r7, #29
 800271e:	4303      	orrs	r3, r0
 8002720:	08fa      	lsrs	r2, r7, #3
 8002722:	e6db      	b.n	80024dc <__aeabi_dsub+0x384>
 8002724:	4649      	mov	r1, r9
 8002726:	4319      	orrs	r1, r3
 8002728:	000b      	movs	r3, r1
 800272a:	1e59      	subs	r1, r3, #1
 800272c:	418b      	sbcs	r3, r1
 800272e:	001c      	movs	r4, r3
 8002730:	e653      	b.n	80023da <__aeabi_dsub+0x282>
 8002732:	464d      	mov	r5, r9
 8002734:	3c20      	subs	r4, #32
 8002736:	40e5      	lsrs	r5, r4
 8002738:	2920      	cmp	r1, #32
 800273a:	d005      	beq.n	8002748 <__aeabi_dsub+0x5f0>
 800273c:	2440      	movs	r4, #64	; 0x40
 800273e:	1a64      	subs	r4, r4, r1
 8002740:	4649      	mov	r1, r9
 8002742:	40a1      	lsls	r1, r4
 8002744:	430b      	orrs	r3, r1
 8002746:	4698      	mov	r8, r3
 8002748:	4643      	mov	r3, r8
 800274a:	1e5c      	subs	r4, r3, #1
 800274c:	41a3      	sbcs	r3, r4
 800274e:	432b      	orrs	r3, r5
 8002750:	e776      	b.n	8002640 <__aeabi_dsub+0x4e8>
 8002752:	2a00      	cmp	r2, #0
 8002754:	d0e1      	beq.n	800271a <__aeabi_dsub+0x5c2>
 8002756:	003a      	movs	r2, r7
 8002758:	08db      	lsrs	r3, r3, #3
 800275a:	4302      	orrs	r2, r0
 800275c:	d100      	bne.n	8002760 <__aeabi_dsub+0x608>
 800275e:	e6b8      	b.n	80024d2 <__aeabi_dsub+0x37a>
 8002760:	464a      	mov	r2, r9
 8002762:	0752      	lsls	r2, r2, #29
 8002764:	2480      	movs	r4, #128	; 0x80
 8002766:	4313      	orrs	r3, r2
 8002768:	464a      	mov	r2, r9
 800276a:	0324      	lsls	r4, r4, #12
 800276c:	08d2      	lsrs	r2, r2, #3
 800276e:	4222      	tst	r2, r4
 8002770:	d007      	beq.n	8002782 <__aeabi_dsub+0x62a>
 8002772:	08fe      	lsrs	r6, r7, #3
 8002774:	4226      	tst	r6, r4
 8002776:	d104      	bne.n	8002782 <__aeabi_dsub+0x62a>
 8002778:	465d      	mov	r5, fp
 800277a:	0032      	movs	r2, r6
 800277c:	08c3      	lsrs	r3, r0, #3
 800277e:	077f      	lsls	r7, r7, #29
 8002780:	433b      	orrs	r3, r7
 8002782:	0f59      	lsrs	r1, r3, #29
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	0749      	lsls	r1, r1, #29
 8002788:	08db      	lsrs	r3, r3, #3
 800278a:	430b      	orrs	r3, r1
 800278c:	e6a6      	b.n	80024dc <__aeabi_dsub+0x384>
 800278e:	1ac4      	subs	r4, r0, r3
 8002790:	42a0      	cmp	r0, r4
 8002792:	4180      	sbcs	r0, r0
 8002794:	464b      	mov	r3, r9
 8002796:	4240      	negs	r0, r0
 8002798:	1aff      	subs	r7, r7, r3
 800279a:	1a3b      	subs	r3, r7, r0
 800279c:	469a      	mov	sl, r3
 800279e:	465d      	mov	r5, fp
 80027a0:	2601      	movs	r6, #1
 80027a2:	e533      	b.n	800220c <__aeabi_dsub+0xb4>
 80027a4:	003b      	movs	r3, r7
 80027a6:	4303      	orrs	r3, r0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x654>
 80027aa:	e715      	b.n	80025d8 <__aeabi_dsub+0x480>
 80027ac:	08c0      	lsrs	r0, r0, #3
 80027ae:	077b      	lsls	r3, r7, #29
 80027b0:	465d      	mov	r5, fp
 80027b2:	4303      	orrs	r3, r0
 80027b4:	08fa      	lsrs	r2, r7, #3
 80027b6:	e666      	b.n	8002486 <__aeabi_dsub+0x32e>
 80027b8:	08c0      	lsrs	r0, r0, #3
 80027ba:	077b      	lsls	r3, r7, #29
 80027bc:	4303      	orrs	r3, r0
 80027be:	08fa      	lsrs	r2, r7, #3
 80027c0:	e65e      	b.n	8002480 <__aeabi_dsub+0x328>
 80027c2:	003a      	movs	r2, r7
 80027c4:	08db      	lsrs	r3, r3, #3
 80027c6:	4302      	orrs	r2, r0
 80027c8:	d100      	bne.n	80027cc <__aeabi_dsub+0x674>
 80027ca:	e682      	b.n	80024d2 <__aeabi_dsub+0x37a>
 80027cc:	464a      	mov	r2, r9
 80027ce:	0752      	lsls	r2, r2, #29
 80027d0:	2480      	movs	r4, #128	; 0x80
 80027d2:	4313      	orrs	r3, r2
 80027d4:	464a      	mov	r2, r9
 80027d6:	0324      	lsls	r4, r4, #12
 80027d8:	08d2      	lsrs	r2, r2, #3
 80027da:	4222      	tst	r2, r4
 80027dc:	d007      	beq.n	80027ee <__aeabi_dsub+0x696>
 80027de:	08fe      	lsrs	r6, r7, #3
 80027e0:	4226      	tst	r6, r4
 80027e2:	d104      	bne.n	80027ee <__aeabi_dsub+0x696>
 80027e4:	465d      	mov	r5, fp
 80027e6:	0032      	movs	r2, r6
 80027e8:	08c3      	lsrs	r3, r0, #3
 80027ea:	077f      	lsls	r7, r7, #29
 80027ec:	433b      	orrs	r3, r7
 80027ee:	0f59      	lsrs	r1, r3, #29
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	08db      	lsrs	r3, r3, #3
 80027f4:	0749      	lsls	r1, r1, #29
 80027f6:	430b      	orrs	r3, r1
 80027f8:	e670      	b.n	80024dc <__aeabi_dsub+0x384>
 80027fa:	08c0      	lsrs	r0, r0, #3
 80027fc:	077b      	lsls	r3, r7, #29
 80027fe:	4303      	orrs	r3, r0
 8002800:	08fa      	lsrs	r2, r7, #3
 8002802:	e640      	b.n	8002486 <__aeabi_dsub+0x32e>
 8002804:	464c      	mov	r4, r9
 8002806:	3920      	subs	r1, #32
 8002808:	40cc      	lsrs	r4, r1
 800280a:	4661      	mov	r1, ip
 800280c:	2920      	cmp	r1, #32
 800280e:	d006      	beq.n	800281e <__aeabi_dsub+0x6c6>
 8002810:	4666      	mov	r6, ip
 8002812:	2140      	movs	r1, #64	; 0x40
 8002814:	1b89      	subs	r1, r1, r6
 8002816:	464e      	mov	r6, r9
 8002818:	408e      	lsls	r6, r1
 800281a:	4333      	orrs	r3, r6
 800281c:	4698      	mov	r8, r3
 800281e:	4643      	mov	r3, r8
 8002820:	1e59      	subs	r1, r3, #1
 8002822:	418b      	sbcs	r3, r1
 8002824:	431c      	orrs	r4, r3
 8002826:	e5d8      	b.n	80023da <__aeabi_dsub+0x282>
 8002828:	181c      	adds	r4, r3, r0
 800282a:	4284      	cmp	r4, r0
 800282c:	4180      	sbcs	r0, r0
 800282e:	444f      	add	r7, r9
 8002830:	46ba      	mov	sl, r7
 8002832:	4240      	negs	r0, r0
 8002834:	4482      	add	sl, r0
 8002836:	e6d9      	b.n	80025ec <__aeabi_dsub+0x494>
 8002838:	4653      	mov	r3, sl
 800283a:	4323      	orrs	r3, r4
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x6e8>
 800283e:	e6cb      	b.n	80025d8 <__aeabi_dsub+0x480>
 8002840:	e614      	b.n	800246c <__aeabi_dsub+0x314>
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	000007ff 	.word	0x000007ff
 8002848:	ff7fffff 	.word	0xff7fffff
 800284c:	000007fe 	.word	0x000007fe
 8002850:	2300      	movs	r3, #0
 8002852:	4a01      	ldr	r2, [pc, #4]	; (8002858 <__aeabi_dsub+0x700>)
 8002854:	001c      	movs	r4, r3
 8002856:	e529      	b.n	80022ac <__aeabi_dsub+0x154>
 8002858:	000007ff 	.word	0x000007ff

0800285c <__aeabi_i2d>:
 800285c:	b570      	push	{r4, r5, r6, lr}
 800285e:	2800      	cmp	r0, #0
 8002860:	d016      	beq.n	8002890 <__aeabi_i2d+0x34>
 8002862:	17c3      	asrs	r3, r0, #31
 8002864:	18c5      	adds	r5, r0, r3
 8002866:	405d      	eors	r5, r3
 8002868:	0fc4      	lsrs	r4, r0, #31
 800286a:	0028      	movs	r0, r5
 800286c:	f000 f92e 	bl	8002acc <__clzsi2>
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <__aeabi_i2d+0x5c>)
 8002872:	1a1b      	subs	r3, r3, r0
 8002874:	280a      	cmp	r0, #10
 8002876:	dc16      	bgt.n	80028a6 <__aeabi_i2d+0x4a>
 8002878:	0002      	movs	r2, r0
 800287a:	002e      	movs	r6, r5
 800287c:	3215      	adds	r2, #21
 800287e:	4096      	lsls	r6, r2
 8002880:	220b      	movs	r2, #11
 8002882:	1a12      	subs	r2, r2, r0
 8002884:	40d5      	lsrs	r5, r2
 8002886:	055b      	lsls	r3, r3, #21
 8002888:	032d      	lsls	r5, r5, #12
 800288a:	0b2d      	lsrs	r5, r5, #12
 800288c:	0d5b      	lsrs	r3, r3, #21
 800288e:	e003      	b.n	8002898 <__aeabi_i2d+0x3c>
 8002890:	2400      	movs	r4, #0
 8002892:	2300      	movs	r3, #0
 8002894:	2500      	movs	r5, #0
 8002896:	2600      	movs	r6, #0
 8002898:	051b      	lsls	r3, r3, #20
 800289a:	432b      	orrs	r3, r5
 800289c:	07e4      	lsls	r4, r4, #31
 800289e:	4323      	orrs	r3, r4
 80028a0:	0030      	movs	r0, r6
 80028a2:	0019      	movs	r1, r3
 80028a4:	bd70      	pop	{r4, r5, r6, pc}
 80028a6:	380b      	subs	r0, #11
 80028a8:	4085      	lsls	r5, r0
 80028aa:	055b      	lsls	r3, r3, #21
 80028ac:	032d      	lsls	r5, r5, #12
 80028ae:	2600      	movs	r6, #0
 80028b0:	0b2d      	lsrs	r5, r5, #12
 80028b2:	0d5b      	lsrs	r3, r3, #21
 80028b4:	e7f0      	b.n	8002898 <__aeabi_i2d+0x3c>
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	0000041e 	.word	0x0000041e

080028bc <__aeabi_f2d>:
 80028bc:	b570      	push	{r4, r5, r6, lr}
 80028be:	0242      	lsls	r2, r0, #9
 80028c0:	0043      	lsls	r3, r0, #1
 80028c2:	0fc4      	lsrs	r4, r0, #31
 80028c4:	20fe      	movs	r0, #254	; 0xfe
 80028c6:	0e1b      	lsrs	r3, r3, #24
 80028c8:	1c59      	adds	r1, r3, #1
 80028ca:	0a55      	lsrs	r5, r2, #9
 80028cc:	4208      	tst	r0, r1
 80028ce:	d00c      	beq.n	80028ea <__aeabi_f2d+0x2e>
 80028d0:	21e0      	movs	r1, #224	; 0xe0
 80028d2:	0089      	lsls	r1, r1, #2
 80028d4:	468c      	mov	ip, r1
 80028d6:	076d      	lsls	r5, r5, #29
 80028d8:	0b12      	lsrs	r2, r2, #12
 80028da:	4463      	add	r3, ip
 80028dc:	051b      	lsls	r3, r3, #20
 80028de:	4313      	orrs	r3, r2
 80028e0:	07e4      	lsls	r4, r4, #31
 80028e2:	4323      	orrs	r3, r4
 80028e4:	0028      	movs	r0, r5
 80028e6:	0019      	movs	r1, r3
 80028e8:	bd70      	pop	{r4, r5, r6, pc}
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d114      	bne.n	8002918 <__aeabi_f2d+0x5c>
 80028ee:	2d00      	cmp	r5, #0
 80028f0:	d01b      	beq.n	800292a <__aeabi_f2d+0x6e>
 80028f2:	0028      	movs	r0, r5
 80028f4:	f000 f8ea 	bl	8002acc <__clzsi2>
 80028f8:	280a      	cmp	r0, #10
 80028fa:	dc1c      	bgt.n	8002936 <__aeabi_f2d+0x7a>
 80028fc:	230b      	movs	r3, #11
 80028fe:	002a      	movs	r2, r5
 8002900:	1a1b      	subs	r3, r3, r0
 8002902:	40da      	lsrs	r2, r3
 8002904:	0003      	movs	r3, r0
 8002906:	3315      	adds	r3, #21
 8002908:	409d      	lsls	r5, r3
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <__aeabi_f2d+0x88>)
 800290c:	0312      	lsls	r2, r2, #12
 800290e:	1a1b      	subs	r3, r3, r0
 8002910:	055b      	lsls	r3, r3, #21
 8002912:	0b12      	lsrs	r2, r2, #12
 8002914:	0d5b      	lsrs	r3, r3, #21
 8002916:	e7e1      	b.n	80028dc <__aeabi_f2d+0x20>
 8002918:	2d00      	cmp	r5, #0
 800291a:	d009      	beq.n	8002930 <__aeabi_f2d+0x74>
 800291c:	0b13      	lsrs	r3, r2, #12
 800291e:	2280      	movs	r2, #128	; 0x80
 8002920:	0312      	lsls	r2, r2, #12
 8002922:	431a      	orrs	r2, r3
 8002924:	076d      	lsls	r5, r5, #29
 8002926:	4b08      	ldr	r3, [pc, #32]	; (8002948 <__aeabi_f2d+0x8c>)
 8002928:	e7d8      	b.n	80028dc <__aeabi_f2d+0x20>
 800292a:	2300      	movs	r3, #0
 800292c:	2200      	movs	r2, #0
 800292e:	e7d5      	b.n	80028dc <__aeabi_f2d+0x20>
 8002930:	2200      	movs	r2, #0
 8002932:	4b05      	ldr	r3, [pc, #20]	; (8002948 <__aeabi_f2d+0x8c>)
 8002934:	e7d2      	b.n	80028dc <__aeabi_f2d+0x20>
 8002936:	0003      	movs	r3, r0
 8002938:	002a      	movs	r2, r5
 800293a:	3b0b      	subs	r3, #11
 800293c:	409a      	lsls	r2, r3
 800293e:	2500      	movs	r5, #0
 8002940:	e7e3      	b.n	800290a <__aeabi_f2d+0x4e>
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	00000389 	.word	0x00000389
 8002948:	000007ff 	.word	0x000007ff

0800294c <__aeabi_d2f>:
 800294c:	0002      	movs	r2, r0
 800294e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002950:	004b      	lsls	r3, r1, #1
 8002952:	030d      	lsls	r5, r1, #12
 8002954:	0f40      	lsrs	r0, r0, #29
 8002956:	0d5b      	lsrs	r3, r3, #21
 8002958:	0fcc      	lsrs	r4, r1, #31
 800295a:	0a6d      	lsrs	r5, r5, #9
 800295c:	493a      	ldr	r1, [pc, #232]	; (8002a48 <__aeabi_d2f+0xfc>)
 800295e:	4305      	orrs	r5, r0
 8002960:	1c58      	adds	r0, r3, #1
 8002962:	00d7      	lsls	r7, r2, #3
 8002964:	4208      	tst	r0, r1
 8002966:	d00a      	beq.n	800297e <__aeabi_d2f+0x32>
 8002968:	4938      	ldr	r1, [pc, #224]	; (8002a4c <__aeabi_d2f+0x100>)
 800296a:	1859      	adds	r1, r3, r1
 800296c:	29fe      	cmp	r1, #254	; 0xfe
 800296e:	dd16      	ble.n	800299e <__aeabi_d2f+0x52>
 8002970:	20ff      	movs	r0, #255	; 0xff
 8002972:	2200      	movs	r2, #0
 8002974:	05c0      	lsls	r0, r0, #23
 8002976:	4310      	orrs	r0, r2
 8002978:	07e4      	lsls	r4, r4, #31
 800297a:	4320      	orrs	r0, r4
 800297c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <__aeabi_d2f+0x44>
 8002982:	433d      	orrs	r5, r7
 8002984:	d026      	beq.n	80029d4 <__aeabi_d2f+0x88>
 8002986:	2205      	movs	r2, #5
 8002988:	0192      	lsls	r2, r2, #6
 800298a:	0a52      	lsrs	r2, r2, #9
 800298c:	b2d8      	uxtb	r0, r3
 800298e:	e7f1      	b.n	8002974 <__aeabi_d2f+0x28>
 8002990:	432f      	orrs	r7, r5
 8002992:	d0ed      	beq.n	8002970 <__aeabi_d2f+0x24>
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	03d2      	lsls	r2, r2, #15
 8002998:	20ff      	movs	r0, #255	; 0xff
 800299a:	432a      	orrs	r2, r5
 800299c:	e7ea      	b.n	8002974 <__aeabi_d2f+0x28>
 800299e:	2900      	cmp	r1, #0
 80029a0:	dd1b      	ble.n	80029da <__aeabi_d2f+0x8e>
 80029a2:	0192      	lsls	r2, r2, #6
 80029a4:	1e50      	subs	r0, r2, #1
 80029a6:	4182      	sbcs	r2, r0
 80029a8:	00ed      	lsls	r5, r5, #3
 80029aa:	0f7f      	lsrs	r7, r7, #29
 80029ac:	432a      	orrs	r2, r5
 80029ae:	433a      	orrs	r2, r7
 80029b0:	0753      	lsls	r3, r2, #29
 80029b2:	d047      	beq.n	8002a44 <__aeabi_d2f+0xf8>
 80029b4:	230f      	movs	r3, #15
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d000      	beq.n	80029be <__aeabi_d2f+0x72>
 80029bc:	3204      	adds	r2, #4
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	04db      	lsls	r3, r3, #19
 80029c2:	4013      	ands	r3, r2
 80029c4:	d03e      	beq.n	8002a44 <__aeabi_d2f+0xf8>
 80029c6:	1c48      	adds	r0, r1, #1
 80029c8:	29fe      	cmp	r1, #254	; 0xfe
 80029ca:	d0d1      	beq.n	8002970 <__aeabi_d2f+0x24>
 80029cc:	0192      	lsls	r2, r2, #6
 80029ce:	0a52      	lsrs	r2, r2, #9
 80029d0:	b2c0      	uxtb	r0, r0
 80029d2:	e7cf      	b.n	8002974 <__aeabi_d2f+0x28>
 80029d4:	2000      	movs	r0, #0
 80029d6:	2200      	movs	r2, #0
 80029d8:	e7cc      	b.n	8002974 <__aeabi_d2f+0x28>
 80029da:	000a      	movs	r2, r1
 80029dc:	3217      	adds	r2, #23
 80029de:	db2f      	blt.n	8002a40 <__aeabi_d2f+0xf4>
 80029e0:	2680      	movs	r6, #128	; 0x80
 80029e2:	0436      	lsls	r6, r6, #16
 80029e4:	432e      	orrs	r6, r5
 80029e6:	251e      	movs	r5, #30
 80029e8:	1a6d      	subs	r5, r5, r1
 80029ea:	2d1f      	cmp	r5, #31
 80029ec:	dd11      	ble.n	8002a12 <__aeabi_d2f+0xc6>
 80029ee:	2202      	movs	r2, #2
 80029f0:	4252      	negs	r2, r2
 80029f2:	1a52      	subs	r2, r2, r1
 80029f4:	0031      	movs	r1, r6
 80029f6:	40d1      	lsrs	r1, r2
 80029f8:	2d20      	cmp	r5, #32
 80029fa:	d004      	beq.n	8002a06 <__aeabi_d2f+0xba>
 80029fc:	4a14      	ldr	r2, [pc, #80]	; (8002a50 <__aeabi_d2f+0x104>)
 80029fe:	4694      	mov	ip, r2
 8002a00:	4463      	add	r3, ip
 8002a02:	409e      	lsls	r6, r3
 8002a04:	4337      	orrs	r7, r6
 8002a06:	003a      	movs	r2, r7
 8002a08:	1e53      	subs	r3, r2, #1
 8002a0a:	419a      	sbcs	r2, r3
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	2100      	movs	r1, #0
 8002a10:	e7ce      	b.n	80029b0 <__aeabi_d2f+0x64>
 8002a12:	4a10      	ldr	r2, [pc, #64]	; (8002a54 <__aeabi_d2f+0x108>)
 8002a14:	0038      	movs	r0, r7
 8002a16:	4694      	mov	ip, r2
 8002a18:	4463      	add	r3, ip
 8002a1a:	4098      	lsls	r0, r3
 8002a1c:	003a      	movs	r2, r7
 8002a1e:	1e41      	subs	r1, r0, #1
 8002a20:	4188      	sbcs	r0, r1
 8002a22:	409e      	lsls	r6, r3
 8002a24:	40ea      	lsrs	r2, r5
 8002a26:	4330      	orrs	r0, r6
 8002a28:	4302      	orrs	r2, r0
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	0753      	lsls	r3, r2, #29
 8002a2e:	d1c1      	bne.n	80029b4 <__aeabi_d2f+0x68>
 8002a30:	2180      	movs	r1, #128	; 0x80
 8002a32:	0013      	movs	r3, r2
 8002a34:	04c9      	lsls	r1, r1, #19
 8002a36:	2001      	movs	r0, #1
 8002a38:	400b      	ands	r3, r1
 8002a3a:	420a      	tst	r2, r1
 8002a3c:	d1c6      	bne.n	80029cc <__aeabi_d2f+0x80>
 8002a3e:	e7a3      	b.n	8002988 <__aeabi_d2f+0x3c>
 8002a40:	2300      	movs	r3, #0
 8002a42:	e7a0      	b.n	8002986 <__aeabi_d2f+0x3a>
 8002a44:	000b      	movs	r3, r1
 8002a46:	e79f      	b.n	8002988 <__aeabi_d2f+0x3c>
 8002a48:	000007fe 	.word	0x000007fe
 8002a4c:	fffffc80 	.word	0xfffffc80
 8002a50:	fffffca2 	.word	0xfffffca2
 8002a54:	fffffc82 	.word	0xfffffc82

08002a58 <__aeabi_cfrcmple>:
 8002a58:	4684      	mov	ip, r0
 8002a5a:	0008      	movs	r0, r1
 8002a5c:	4661      	mov	r1, ip
 8002a5e:	e7ff      	b.n	8002a60 <__aeabi_cfcmpeq>

08002a60 <__aeabi_cfcmpeq>:
 8002a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002a62:	f000 f8c9 	bl	8002bf8 <__lesf2>
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d401      	bmi.n	8002a6e <__aeabi_cfcmpeq+0xe>
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	42c8      	cmn	r0, r1
 8002a6e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002a70 <__aeabi_fcmpeq>:
 8002a70:	b510      	push	{r4, lr}
 8002a72:	f000 f855 	bl	8002b20 <__eqsf2>
 8002a76:	4240      	negs	r0, r0
 8002a78:	3001      	adds	r0, #1
 8002a7a:	bd10      	pop	{r4, pc}

08002a7c <__aeabi_fcmplt>:
 8002a7c:	b510      	push	{r4, lr}
 8002a7e:	f000 f8bb 	bl	8002bf8 <__lesf2>
 8002a82:	2800      	cmp	r0, #0
 8002a84:	db01      	blt.n	8002a8a <__aeabi_fcmplt+0xe>
 8002a86:	2000      	movs	r0, #0
 8002a88:	bd10      	pop	{r4, pc}
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	bd10      	pop	{r4, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)

08002a90 <__aeabi_fcmple>:
 8002a90:	b510      	push	{r4, lr}
 8002a92:	f000 f8b1 	bl	8002bf8 <__lesf2>
 8002a96:	2800      	cmp	r0, #0
 8002a98:	dd01      	ble.n	8002a9e <__aeabi_fcmple+0xe>
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	bd10      	pop	{r4, pc}
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	bd10      	pop	{r4, pc}
 8002aa2:	46c0      	nop			; (mov r8, r8)

08002aa4 <__aeabi_fcmpgt>:
 8002aa4:	b510      	push	{r4, lr}
 8002aa6:	f000 f861 	bl	8002b6c <__gesf2>
 8002aaa:	2800      	cmp	r0, #0
 8002aac:	dc01      	bgt.n	8002ab2 <__aeabi_fcmpgt+0xe>
 8002aae:	2000      	movs	r0, #0
 8002ab0:	bd10      	pop	{r4, pc}
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	bd10      	pop	{r4, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)

08002ab8 <__aeabi_fcmpge>:
 8002ab8:	b510      	push	{r4, lr}
 8002aba:	f000 f857 	bl	8002b6c <__gesf2>
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	da01      	bge.n	8002ac6 <__aeabi_fcmpge+0xe>
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	bd10      	pop	{r4, pc}
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	bd10      	pop	{r4, pc}
 8002aca:	46c0      	nop			; (mov r8, r8)

08002acc <__clzsi2>:
 8002acc:	211c      	movs	r1, #28
 8002ace:	2301      	movs	r3, #1
 8002ad0:	041b      	lsls	r3, r3, #16
 8002ad2:	4298      	cmp	r0, r3
 8002ad4:	d301      	bcc.n	8002ada <__clzsi2+0xe>
 8002ad6:	0c00      	lsrs	r0, r0, #16
 8002ad8:	3910      	subs	r1, #16
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	4298      	cmp	r0, r3
 8002ade:	d301      	bcc.n	8002ae4 <__clzsi2+0x18>
 8002ae0:	0a00      	lsrs	r0, r0, #8
 8002ae2:	3908      	subs	r1, #8
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	4298      	cmp	r0, r3
 8002ae8:	d301      	bcc.n	8002aee <__clzsi2+0x22>
 8002aea:	0900      	lsrs	r0, r0, #4
 8002aec:	3904      	subs	r1, #4
 8002aee:	a202      	add	r2, pc, #8	; (adr r2, 8002af8 <__clzsi2+0x2c>)
 8002af0:	5c10      	ldrb	r0, [r2, r0]
 8002af2:	1840      	adds	r0, r0, r1
 8002af4:	4770      	bx	lr
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	02020304 	.word	0x02020304
 8002afc:	01010101 	.word	0x01010101
	...

08002b08 <__clzdi2>:
 8002b08:	b510      	push	{r4, lr}
 8002b0a:	2900      	cmp	r1, #0
 8002b0c:	d103      	bne.n	8002b16 <__clzdi2+0xe>
 8002b0e:	f7ff ffdd 	bl	8002acc <__clzsi2>
 8002b12:	3020      	adds	r0, #32
 8002b14:	e002      	b.n	8002b1c <__clzdi2+0x14>
 8002b16:	0008      	movs	r0, r1
 8002b18:	f7ff ffd8 	bl	8002acc <__clzsi2>
 8002b1c:	bd10      	pop	{r4, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)

08002b20 <__eqsf2>:
 8002b20:	b570      	push	{r4, r5, r6, lr}
 8002b22:	0042      	lsls	r2, r0, #1
 8002b24:	0245      	lsls	r5, r0, #9
 8002b26:	024e      	lsls	r6, r1, #9
 8002b28:	004c      	lsls	r4, r1, #1
 8002b2a:	0fc3      	lsrs	r3, r0, #31
 8002b2c:	0a6d      	lsrs	r5, r5, #9
 8002b2e:	2001      	movs	r0, #1
 8002b30:	0e12      	lsrs	r2, r2, #24
 8002b32:	0a76      	lsrs	r6, r6, #9
 8002b34:	0e24      	lsrs	r4, r4, #24
 8002b36:	0fc9      	lsrs	r1, r1, #31
 8002b38:	2aff      	cmp	r2, #255	; 0xff
 8002b3a:	d006      	beq.n	8002b4a <__eqsf2+0x2a>
 8002b3c:	2cff      	cmp	r4, #255	; 0xff
 8002b3e:	d003      	beq.n	8002b48 <__eqsf2+0x28>
 8002b40:	42a2      	cmp	r2, r4
 8002b42:	d101      	bne.n	8002b48 <__eqsf2+0x28>
 8002b44:	42b5      	cmp	r5, r6
 8002b46:	d006      	beq.n	8002b56 <__eqsf2+0x36>
 8002b48:	bd70      	pop	{r4, r5, r6, pc}
 8002b4a:	2d00      	cmp	r5, #0
 8002b4c:	d1fc      	bne.n	8002b48 <__eqsf2+0x28>
 8002b4e:	2cff      	cmp	r4, #255	; 0xff
 8002b50:	d1fa      	bne.n	8002b48 <__eqsf2+0x28>
 8002b52:	2e00      	cmp	r6, #0
 8002b54:	d1f8      	bne.n	8002b48 <__eqsf2+0x28>
 8002b56:	428b      	cmp	r3, r1
 8002b58:	d006      	beq.n	8002b68 <__eqsf2+0x48>
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	2a00      	cmp	r2, #0
 8002b5e:	d1f3      	bne.n	8002b48 <__eqsf2+0x28>
 8002b60:	0028      	movs	r0, r5
 8002b62:	1e43      	subs	r3, r0, #1
 8002b64:	4198      	sbcs	r0, r3
 8002b66:	e7ef      	b.n	8002b48 <__eqsf2+0x28>
 8002b68:	2000      	movs	r0, #0
 8002b6a:	e7ed      	b.n	8002b48 <__eqsf2+0x28>

08002b6c <__gesf2>:
 8002b6c:	b570      	push	{r4, r5, r6, lr}
 8002b6e:	0042      	lsls	r2, r0, #1
 8002b70:	0245      	lsls	r5, r0, #9
 8002b72:	024e      	lsls	r6, r1, #9
 8002b74:	004c      	lsls	r4, r1, #1
 8002b76:	0fc3      	lsrs	r3, r0, #31
 8002b78:	0a6d      	lsrs	r5, r5, #9
 8002b7a:	0e12      	lsrs	r2, r2, #24
 8002b7c:	0a76      	lsrs	r6, r6, #9
 8002b7e:	0e24      	lsrs	r4, r4, #24
 8002b80:	0fc8      	lsrs	r0, r1, #31
 8002b82:	2aff      	cmp	r2, #255	; 0xff
 8002b84:	d01b      	beq.n	8002bbe <__gesf2+0x52>
 8002b86:	2cff      	cmp	r4, #255	; 0xff
 8002b88:	d00e      	beq.n	8002ba8 <__gesf2+0x3c>
 8002b8a:	2a00      	cmp	r2, #0
 8002b8c:	d11b      	bne.n	8002bc6 <__gesf2+0x5a>
 8002b8e:	2c00      	cmp	r4, #0
 8002b90:	d101      	bne.n	8002b96 <__gesf2+0x2a>
 8002b92:	2e00      	cmp	r6, #0
 8002b94:	d01c      	beq.n	8002bd0 <__gesf2+0x64>
 8002b96:	2d00      	cmp	r5, #0
 8002b98:	d00c      	beq.n	8002bb4 <__gesf2+0x48>
 8002b9a:	4283      	cmp	r3, r0
 8002b9c:	d01c      	beq.n	8002bd8 <__gesf2+0x6c>
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	1e58      	subs	r0, r3, #1
 8002ba2:	4008      	ands	r0, r1
 8002ba4:	3801      	subs	r0, #1
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
 8002ba8:	2e00      	cmp	r6, #0
 8002baa:	d122      	bne.n	8002bf2 <__gesf2+0x86>
 8002bac:	2a00      	cmp	r2, #0
 8002bae:	d1f4      	bne.n	8002b9a <__gesf2+0x2e>
 8002bb0:	2d00      	cmp	r5, #0
 8002bb2:	d1f2      	bne.n	8002b9a <__gesf2+0x2e>
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	d1f6      	bne.n	8002ba6 <__gesf2+0x3a>
 8002bb8:	2001      	movs	r0, #1
 8002bba:	4240      	negs	r0, r0
 8002bbc:	e7f3      	b.n	8002ba6 <__gesf2+0x3a>
 8002bbe:	2d00      	cmp	r5, #0
 8002bc0:	d117      	bne.n	8002bf2 <__gesf2+0x86>
 8002bc2:	2cff      	cmp	r4, #255	; 0xff
 8002bc4:	d0f0      	beq.n	8002ba8 <__gesf2+0x3c>
 8002bc6:	2c00      	cmp	r4, #0
 8002bc8:	d1e7      	bne.n	8002b9a <__gesf2+0x2e>
 8002bca:	2e00      	cmp	r6, #0
 8002bcc:	d1e5      	bne.n	8002b9a <__gesf2+0x2e>
 8002bce:	e7e6      	b.n	8002b9e <__gesf2+0x32>
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	2d00      	cmp	r5, #0
 8002bd4:	d0e7      	beq.n	8002ba6 <__gesf2+0x3a>
 8002bd6:	e7e2      	b.n	8002b9e <__gesf2+0x32>
 8002bd8:	42a2      	cmp	r2, r4
 8002bda:	dc05      	bgt.n	8002be8 <__gesf2+0x7c>
 8002bdc:	dbea      	blt.n	8002bb4 <__gesf2+0x48>
 8002bde:	42b5      	cmp	r5, r6
 8002be0:	d802      	bhi.n	8002be8 <__gesf2+0x7c>
 8002be2:	d3e7      	bcc.n	8002bb4 <__gesf2+0x48>
 8002be4:	2000      	movs	r0, #0
 8002be6:	e7de      	b.n	8002ba6 <__gesf2+0x3a>
 8002be8:	4243      	negs	r3, r0
 8002bea:	4158      	adcs	r0, r3
 8002bec:	0040      	lsls	r0, r0, #1
 8002bee:	3801      	subs	r0, #1
 8002bf0:	e7d9      	b.n	8002ba6 <__gesf2+0x3a>
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	4240      	negs	r0, r0
 8002bf6:	e7d6      	b.n	8002ba6 <__gesf2+0x3a>

08002bf8 <__lesf2>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	0042      	lsls	r2, r0, #1
 8002bfc:	0245      	lsls	r5, r0, #9
 8002bfe:	024e      	lsls	r6, r1, #9
 8002c00:	004c      	lsls	r4, r1, #1
 8002c02:	0fc3      	lsrs	r3, r0, #31
 8002c04:	0a6d      	lsrs	r5, r5, #9
 8002c06:	0e12      	lsrs	r2, r2, #24
 8002c08:	0a76      	lsrs	r6, r6, #9
 8002c0a:	0e24      	lsrs	r4, r4, #24
 8002c0c:	0fc8      	lsrs	r0, r1, #31
 8002c0e:	2aff      	cmp	r2, #255	; 0xff
 8002c10:	d00b      	beq.n	8002c2a <__lesf2+0x32>
 8002c12:	2cff      	cmp	r4, #255	; 0xff
 8002c14:	d00d      	beq.n	8002c32 <__lesf2+0x3a>
 8002c16:	2a00      	cmp	r2, #0
 8002c18:	d11f      	bne.n	8002c5a <__lesf2+0x62>
 8002c1a:	2c00      	cmp	r4, #0
 8002c1c:	d116      	bne.n	8002c4c <__lesf2+0x54>
 8002c1e:	2e00      	cmp	r6, #0
 8002c20:	d114      	bne.n	8002c4c <__lesf2+0x54>
 8002c22:	2000      	movs	r0, #0
 8002c24:	2d00      	cmp	r5, #0
 8002c26:	d010      	beq.n	8002c4a <__lesf2+0x52>
 8002c28:	e009      	b.n	8002c3e <__lesf2+0x46>
 8002c2a:	2d00      	cmp	r5, #0
 8002c2c:	d10c      	bne.n	8002c48 <__lesf2+0x50>
 8002c2e:	2cff      	cmp	r4, #255	; 0xff
 8002c30:	d113      	bne.n	8002c5a <__lesf2+0x62>
 8002c32:	2e00      	cmp	r6, #0
 8002c34:	d108      	bne.n	8002c48 <__lesf2+0x50>
 8002c36:	2a00      	cmp	r2, #0
 8002c38:	d008      	beq.n	8002c4c <__lesf2+0x54>
 8002c3a:	4283      	cmp	r3, r0
 8002c3c:	d012      	beq.n	8002c64 <__lesf2+0x6c>
 8002c3e:	2102      	movs	r1, #2
 8002c40:	1e58      	subs	r0, r3, #1
 8002c42:	4008      	ands	r0, r1
 8002c44:	3801      	subs	r0, #1
 8002c46:	e000      	b.n	8002c4a <__lesf2+0x52>
 8002c48:	2002      	movs	r0, #2
 8002c4a:	bd70      	pop	{r4, r5, r6, pc}
 8002c4c:	2d00      	cmp	r5, #0
 8002c4e:	d1f4      	bne.n	8002c3a <__lesf2+0x42>
 8002c50:	2800      	cmp	r0, #0
 8002c52:	d1fa      	bne.n	8002c4a <__lesf2+0x52>
 8002c54:	2001      	movs	r0, #1
 8002c56:	4240      	negs	r0, r0
 8002c58:	e7f7      	b.n	8002c4a <__lesf2+0x52>
 8002c5a:	2c00      	cmp	r4, #0
 8002c5c:	d1ed      	bne.n	8002c3a <__lesf2+0x42>
 8002c5e:	2e00      	cmp	r6, #0
 8002c60:	d1eb      	bne.n	8002c3a <__lesf2+0x42>
 8002c62:	e7ec      	b.n	8002c3e <__lesf2+0x46>
 8002c64:	42a2      	cmp	r2, r4
 8002c66:	dc05      	bgt.n	8002c74 <__lesf2+0x7c>
 8002c68:	dbf2      	blt.n	8002c50 <__lesf2+0x58>
 8002c6a:	42b5      	cmp	r5, r6
 8002c6c:	d802      	bhi.n	8002c74 <__lesf2+0x7c>
 8002c6e:	d3ef      	bcc.n	8002c50 <__lesf2+0x58>
 8002c70:	2000      	movs	r0, #0
 8002c72:	e7ea      	b.n	8002c4a <__lesf2+0x52>
 8002c74:	4243      	negs	r3, r0
 8002c76:	4158      	adcs	r0, r3
 8002c78:	0040      	lsls	r0, r0, #1
 8002c7a:	3801      	subs	r0, #1
 8002c7c:	e7e5      	b.n	8002c4a <__lesf2+0x52>
 8002c7e:	46c0      	nop			; (mov r8, r8)

08002c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c80:	b590      	push	{r4, r7, lr}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c86:	f000 fdc1 	bl	800380c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c8a:	f000 f859 	bl	8002d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c8e:	f000 f9eb 	bl	8003068 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002c92:	f000 f8d1 	bl	8002e38 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002c96:	f000 f9b7 	bl	8003008 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002c9a:	f000 f90d 	bl	8002eb8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  SHT2x_Init(&hi2c1);
 8002c9e:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <main+0x9c>)
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f000 fc6b 	bl	800357c <SHT2x_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_RTC_GetDate(&hrtc, &sDate,  RTC_FORMAT_BIN);
 8002ca6:	491e      	ldr	r1, [pc, #120]	; (8002d20 <main+0xa0>)
 8002ca8:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <main+0xa4>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	0018      	movs	r0, r3
 8002cae:	f003 f837 	bl	8005d20 <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002cb2:	491d      	ldr	r1, [pc, #116]	; (8002d28 <main+0xa8>)
 8002cb4:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <main+0xa4>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f002 ff3f 	bl	8005b3c <HAL_RTC_GetTime>

	  sprintf(date, "Date : %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 8002cbe:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <main+0xa0>)
 8002cc0:	789b      	ldrb	r3, [r3, #2]
 8002cc2:	001a      	movs	r2, r3
 8002cc4:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <main+0xa0>)
 8002cc6:	785b      	ldrb	r3, [r3, #1]
 8002cc8:	001c      	movs	r4, r3
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <main+0xa0>)
 8002ccc:	78db      	ldrb	r3, [r3, #3]
 8002cce:	4917      	ldr	r1, [pc, #92]	; (8002d2c <main+0xac>)
 8002cd0:	4817      	ldr	r0, [pc, #92]	; (8002d30 <main+0xb0>)
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	0023      	movs	r3, r4
 8002cd6:	f004 fad7 	bl	8007288 <siprintf>
	  sprintf(time, "Time : %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <main+0xa8>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	001a      	movs	r2, r3
 8002ce0:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <main+0xa8>)
 8002ce2:	785b      	ldrb	r3, [r3, #1]
 8002ce4:	001c      	movs	r4, r3
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <main+0xa8>)
 8002ce8:	789b      	ldrb	r3, [r3, #2]
 8002cea:	4912      	ldr	r1, [pc, #72]	; (8002d34 <main+0xb4>)
 8002cec:	4812      	ldr	r0, [pc, #72]	; (8002d38 <main+0xb8>)
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	0023      	movs	r3, r4
 8002cf2:	f004 fac9 	bl	8007288 <siprintf>

	  HAL_UART_Transmit(&huart1, (uint8_t *)date, sizeof(date), 100);
 8002cf6:	490e      	ldr	r1, [pc, #56]	; (8002d30 <main+0xb0>)
 8002cf8:	4810      	ldr	r0, [pc, #64]	; (8002d3c <main+0xbc>)
 8002cfa:	2364      	movs	r3, #100	; 0x64
 8002cfc:	2214      	movs	r2, #20
 8002cfe:	f003 fc51 	bl	80065a4 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t *)time, sizeof(time), 100);
 8002d02:	490d      	ldr	r1, [pc, #52]	; (8002d38 <main+0xb8>)
 8002d04:	480d      	ldr	r0, [pc, #52]	; (8002d3c <main+0xbc>)
 8002d06:	2364      	movs	r3, #100	; 0x64
 8002d08:	2214      	movs	r2, #20
 8002d0a:	f003 fc4b 	bl	80065a4 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8002d0e:	23fa      	movs	r3, #250	; 0xfa
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 fdea 	bl	80038ec <HAL_Delay>
	  HAL_RTC_GetDate(&hrtc, &sDate,  RTC_FORMAT_BIN);
 8002d18:	e7c5      	b.n	8002ca6 <main+0x26>
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	20000084 	.word	0x20000084
 8002d20:	200001c0 	.word	0x200001c0
 8002d24:	200000d8 	.word	0x200000d8
 8002d28:	200001ac 	.word	0x200001ac
 8002d2c:	080080f0 	.word	0x080080f0
 8002d30:	20000184 	.word	0x20000184
 8002d34:	08008108 	.word	0x08008108
 8002d38:	20000198 	.word	0x20000198
 8002d3c:	200000fc 	.word	0x200000fc

08002d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b09d      	sub	sp, #116	; 0x74
 8002d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d46:	2438      	movs	r4, #56	; 0x38
 8002d48:	193b      	adds	r3, r7, r4
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	2338      	movs	r3, #56	; 0x38
 8002d4e:	001a      	movs	r2, r3
 8002d50:	2100      	movs	r1, #0
 8002d52:	f004 fbab 	bl	80074ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d56:	2324      	movs	r3, #36	; 0x24
 8002d58:	18fb      	adds	r3, r7, r3
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	2314      	movs	r3, #20
 8002d5e:	001a      	movs	r2, r3
 8002d60:	2100      	movs	r1, #0
 8002d62:	f004 fba3 	bl	80074ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d66:	003b      	movs	r3, r7
 8002d68:	0018      	movs	r0, r3
 8002d6a:	2324      	movs	r3, #36	; 0x24
 8002d6c:	001a      	movs	r2, r3
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f004 fb9c 	bl	80074ac <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d74:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <SystemClock_Config+0xf0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a2e      	ldr	r2, [pc, #184]	; (8002e34 <SystemClock_Config+0xf4>)
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	4b2c      	ldr	r3, [pc, #176]	; (8002e30 <SystemClock_Config+0xf0>)
 8002d7e:	2180      	movs	r1, #128	; 0x80
 8002d80:	0109      	lsls	r1, r1, #4
 8002d82:	430a      	orrs	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002d86:	0021      	movs	r1, r4
 8002d88:	187b      	adds	r3, r7, r1
 8002d8a:	220a      	movs	r2, #10
 8002d8c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	2201      	movs	r2, #1
 8002d92:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	2210      	movs	r2, #16
 8002d98:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002da0:	187b      	adds	r3, r7, r1
 8002da2:	2202      	movs	r2, #2
 8002da4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002da6:	187b      	adds	r3, r7, r1
 8002da8:	2200      	movs	r2, #0
 8002daa:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8002dac:	187b      	adds	r3, r7, r1
 8002dae:	2200      	movs	r2, #0
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8002db2:	187b      	adds	r3, r7, r1
 8002db4:	2280      	movs	r2, #128	; 0x80
 8002db6:	0412      	lsls	r2, r2, #16
 8002db8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dba:	187b      	adds	r3, r7, r1
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f001 fe01 	bl	80049c4 <HAL_RCC_OscConfig>
 8002dc2:	1e03      	subs	r3, r0, #0
 8002dc4:	d001      	beq.n	8002dca <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002dc6:	f000 fa23 	bl	8003210 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dca:	2124      	movs	r1, #36	; 0x24
 8002dcc:	187b      	adds	r3, r7, r1
 8002dce:	220f      	movs	r2, #15
 8002dd0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dd2:	187b      	adds	r3, r7, r1
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dd8:	187b      	adds	r3, r7, r1
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002dde:	187b      	adds	r3, r7, r1
 8002de0:	2200      	movs	r2, #0
 8002de2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002de4:	187b      	adds	r3, r7, r1
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002dea:	187b      	adds	r3, r7, r1
 8002dec:	2100      	movs	r1, #0
 8002dee:	0018      	movs	r0, r3
 8002df0:	f002 f9ac 	bl	800514c <HAL_RCC_ClockConfig>
 8002df4:	1e03      	subs	r3, r0, #0
 8002df6:	d001      	beq.n	8002dfc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002df8:	f000 fa0a 	bl	8003210 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8002dfc:	003b      	movs	r3, r7
 8002dfe:	2229      	movs	r2, #41	; 0x29
 8002e00:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e02:	003b      	movs	r3, r7
 8002e04:	2200      	movs	r2, #0
 8002e06:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002e08:	003b      	movs	r3, r7
 8002e0a:	2280      	movs	r2, #128	; 0x80
 8002e0c:	0192      	lsls	r2, r2, #6
 8002e0e:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002e10:	003b      	movs	r3, r7
 8002e12:	2280      	movs	r2, #128	; 0x80
 8002e14:	0292      	lsls	r2, r2, #10
 8002e16:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e18:	003b      	movs	r3, r7
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f002 fbba 	bl	8005594 <HAL_RCCEx_PeriphCLKConfig>
 8002e20:	1e03      	subs	r3, r0, #0
 8002e22:	d001      	beq.n	8002e28 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8002e24:	f000 f9f4 	bl	8003210 <Error_Handler>
  }
}
 8002e28:	46c0      	nop			; (mov r8, r8)
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b01d      	add	sp, #116	; 0x74
 8002e2e:	bd90      	pop	{r4, r7, pc}
 8002e30:	40007000 	.word	0x40007000
 8002e34:	ffffe7ff 	.word	0xffffe7ff

08002e38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <MX_I2C1_Init+0x74>)
 8002e3e:	4a1c      	ldr	r2, [pc, #112]	; (8002eb0 <MX_I2C1_Init+0x78>)
 8002e40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002e42:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <MX_I2C1_Init+0x74>)
 8002e44:	4a1b      	ldr	r2, [pc, #108]	; (8002eb4 <MX_I2C1_Init+0x7c>)
 8002e46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e48:	4b18      	ldr	r3, [pc, #96]	; (8002eac <MX_I2C1_Init+0x74>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e4e:	4b17      	ldr	r3, [pc, #92]	; (8002eac <MX_I2C1_Init+0x74>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e54:	4b15      	ldr	r3, [pc, #84]	; (8002eac <MX_I2C1_Init+0x74>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e5a:	4b14      	ldr	r3, [pc, #80]	; (8002eac <MX_I2C1_Init+0x74>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e60:	4b12      	ldr	r3, [pc, #72]	; (8002eac <MX_I2C1_Init+0x74>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e66:	4b11      	ldr	r3, [pc, #68]	; (8002eac <MX_I2C1_Init+0x74>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <MX_I2C1_Init+0x74>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <MX_I2C1_Init+0x74>)
 8002e74:	0018      	movs	r0, r3
 8002e76:	f000 ffb1 	bl	8003ddc <HAL_I2C_Init>
 8002e7a:	1e03      	subs	r3, r0, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e7e:	f000 f9c7 	bl	8003210 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <MX_I2C1_Init+0x74>)
 8002e84:	2100      	movs	r1, #0
 8002e86:	0018      	movs	r0, r3
 8002e88:	f001 fd04 	bl	8004894 <HAL_I2CEx_ConfigAnalogFilter>
 8002e8c:	1e03      	subs	r3, r0, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e90:	f000 f9be 	bl	8003210 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <MX_I2C1_Init+0x74>)
 8002e96:	2100      	movs	r1, #0
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f001 fd47 	bl	800492c <HAL_I2CEx_ConfigDigitalFilter>
 8002e9e:	1e03      	subs	r3, r0, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002ea2:	f000 f9b5 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000084 	.word	0x20000084
 8002eb0:	40005400 	.word	0x40005400
 8002eb4:	00303d5b 	.word	0x00303d5b

08002eb8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b090      	sub	sp, #64	; 0x40
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002ebe:	232c      	movs	r3, #44	; 0x2c
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	2314      	movs	r3, #20
 8002ec6:	001a      	movs	r2, r3
 8002ec8:	2100      	movs	r1, #0
 8002eca:	f004 faef 	bl	80074ac <memset>
  RTC_DateTypeDef sDate = {0};
 8002ece:	2328      	movs	r3, #40	; 0x28
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002ed6:	003b      	movs	r3, r7
 8002ed8:	0018      	movs	r0, r3
 8002eda:	2328      	movs	r3, #40	; 0x28
 8002edc:	001a      	movs	r2, r3
 8002ede:	2100      	movs	r1, #0
 8002ee0:	f004 fae4 	bl	80074ac <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002ee4:	4b45      	ldr	r3, [pc, #276]	; (8002ffc <MX_RTC_Init+0x144>)
 8002ee6:	4a46      	ldr	r2, [pc, #280]	; (8003000 <MX_RTC_Init+0x148>)
 8002ee8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002eea:	4b44      	ldr	r3, [pc, #272]	; (8002ffc <MX_RTC_Init+0x144>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002ef0:	4b42      	ldr	r3, [pc, #264]	; (8002ffc <MX_RTC_Init+0x144>)
 8002ef2:	227f      	movs	r2, #127	; 0x7f
 8002ef4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002ef6:	4b41      	ldr	r3, [pc, #260]	; (8002ffc <MX_RTC_Init+0x144>)
 8002ef8:	22ff      	movs	r2, #255	; 0xff
 8002efa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002efc:	4b3f      	ldr	r3, [pc, #252]	; (8002ffc <MX_RTC_Init+0x144>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002f02:	4b3e      	ldr	r3, [pc, #248]	; (8002ffc <MX_RTC_Init+0x144>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002f08:	4b3c      	ldr	r3, [pc, #240]	; (8002ffc <MX_RTC_Init+0x144>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002f0e:	4b3b      	ldr	r3, [pc, #236]	; (8002ffc <MX_RTC_Init+0x144>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002f14:	4b39      	ldr	r3, [pc, #228]	; (8002ffc <MX_RTC_Init+0x144>)
 8002f16:	0018      	movs	r0, r3
 8002f18:	f002 fcca 	bl	80058b0 <HAL_RTC_Init>
 8002f1c:	1e03      	subs	r3, r0, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8002f20:	f000 f976 	bl	8003210 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x5;
 8002f24:	212c      	movs	r1, #44	; 0x2c
 8002f26:	187b      	adds	r3, r7, r1
 8002f28:	2205      	movs	r2, #5
 8002f2a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x1;
 8002f2c:	187b      	adds	r3, r7, r1
 8002f2e:	2201      	movs	r2, #1
 8002f30:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x1;
 8002f32:	187b      	adds	r3, r7, r1
 8002f34:	2201      	movs	r2, #1
 8002f36:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002f38:	187b      	adds	r3, r7, r1
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002f3e:	187b      	adds	r3, r7, r1
 8002f40:	2200      	movs	r2, #0
 8002f42:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002f44:	1879      	adds	r1, r7, r1
 8002f46:	4b2d      	ldr	r3, [pc, #180]	; (8002ffc <MX_RTC_Init+0x144>)
 8002f48:	2201      	movs	r2, #1
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f002 fd4c 	bl	80059e8 <HAL_RTC_SetTime>
 8002f50:	1e03      	subs	r3, r0, #0
 8002f52:	d001      	beq.n	8002f58 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8002f54:	f000 f95c 	bl	8003210 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002f58:	2128      	movs	r1, #40	; 0x28
 8002f5a:	187b      	adds	r3, r7, r1
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8002f60:	187b      	adds	r3, r7, r1
 8002f62:	2204      	movs	r2, #4
 8002f64:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002f66:	187b      	adds	r3, r7, r1
 8002f68:	2201      	movs	r2, #1
 8002f6a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x24;
 8002f6c:	187b      	adds	r3, r7, r1
 8002f6e:	2224      	movs	r2, #36	; 0x24
 8002f70:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002f72:	1879      	adds	r1, r7, r1
 8002f74:	4b21      	ldr	r3, [pc, #132]	; (8002ffc <MX_RTC_Init+0x144>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f002 fe3d 	bl	8005bf8 <HAL_RTC_SetDate>
 8002f7e:	1e03      	subs	r3, r0, #0
 8002f80:	d001      	beq.n	8002f86 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8002f82:	f000 f945 	bl	8003210 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x5;
 8002f86:	003b      	movs	r3, r7
 8002f88:	2205      	movs	r2, #5
 8002f8a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8002f8c:	003b      	movs	r3, r7
 8002f8e:	2201      	movs	r2, #1
 8002f90:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 8002f92:	003b      	movs	r3, r7
 8002f94:	2210      	movs	r2, #16
 8002f96:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002f98:	003b      	movs	r3, r7
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002f9e:	003b      	movs	r3, r7
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002fa4:	003b      	movs	r3, r7
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_HOURS|RTC_ALARMMASK_MINUTES;
 8002faa:	003b      	movs	r3, r7
 8002fac:	4a15      	ldr	r2, [pc, #84]	; (8003004 <MX_RTC_Init+0x14c>)
 8002fae:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002fb0:	003b      	movs	r3, r7
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002fb6:	003b      	movs	r3, r7
 8002fb8:	2200      	movs	r2, #0
 8002fba:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002fbc:	003b      	movs	r3, r7
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002fc4:	003b      	movs	r3, r7
 8002fc6:	2280      	movs	r2, #128	; 0x80
 8002fc8:	0052      	lsls	r2, r2, #1
 8002fca:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002fcc:	0039      	movs	r1, r7
 8002fce:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <MX_RTC_Init+0x144>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f002 fef4 	bl	8005dc0 <HAL_RTC_SetAlarm_IT>
 8002fd8:	1e03      	subs	r3, r0, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8002fdc:	f000 f918 	bl	8003210 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <MX_RTC_Init+0x144>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f003 f970 	bl	80062cc <HAL_RTCEx_SetWakeUpTimer_IT>
 8002fec:	1e03      	subs	r3, r0, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_RTC_Init+0x13c>
  {
    Error_Handler();
 8002ff0:	f000 f90e 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b010      	add	sp, #64	; 0x40
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	200000d8 	.word	0x200000d8
 8003000:	40002800 	.word	0x40002800
 8003004:	00808000 	.word	0x00808000

08003008 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800300c:	4b14      	ldr	r3, [pc, #80]	; (8003060 <MX_USART1_UART_Init+0x58>)
 800300e:	4a15      	ldr	r2, [pc, #84]	; (8003064 <MX_USART1_UART_Init+0x5c>)
 8003010:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003012:	4b13      	ldr	r3, [pc, #76]	; (8003060 <MX_USART1_UART_Init+0x58>)
 8003014:	22e1      	movs	r2, #225	; 0xe1
 8003016:	0252      	lsls	r2, r2, #9
 8003018:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800301a:	4b11      	ldr	r3, [pc, #68]	; (8003060 <MX_USART1_UART_Init+0x58>)
 800301c:	2200      	movs	r2, #0
 800301e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003020:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <MX_USART1_UART_Init+0x58>)
 8003022:	2200      	movs	r2, #0
 8003024:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003026:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <MX_USART1_UART_Init+0x58>)
 8003028:	2200      	movs	r2, #0
 800302a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <MX_USART1_UART_Init+0x58>)
 800302e:	220c      	movs	r2, #12
 8003030:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003032:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <MX_USART1_UART_Init+0x58>)
 8003034:	2200      	movs	r2, #0
 8003036:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003038:	4b09      	ldr	r3, [pc, #36]	; (8003060 <MX_USART1_UART_Init+0x58>)
 800303a:	2200      	movs	r2, #0
 800303c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800303e:	4b08      	ldr	r3, [pc, #32]	; (8003060 <MX_USART1_UART_Init+0x58>)
 8003040:	2200      	movs	r2, #0
 8003042:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <MX_USART1_UART_Init+0x58>)
 8003046:	2200      	movs	r2, #0
 8003048:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <MX_USART1_UART_Init+0x58>)
 800304c:	0018      	movs	r0, r3
 800304e:	f003 fa55 	bl	80064fc <HAL_UART_Init>
 8003052:	1e03      	subs	r3, r0, #0
 8003054:	d001      	beq.n	800305a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003056:	f000 f8db 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	200000fc 	.word	0x200000fc
 8003064:	40013800 	.word	0x40013800

08003068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <MX_GPIO_Init+0x70>)
 8003070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003072:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <MX_GPIO_Init+0x70>)
 8003074:	2104      	movs	r1, #4
 8003076:	430a      	orrs	r2, r1
 8003078:	62da      	str	r2, [r3, #44]	; 0x2c
 800307a:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <MX_GPIO_Init+0x70>)
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	2204      	movs	r2, #4
 8003080:	4013      	ands	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003086:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <MX_GPIO_Init+0x70>)
 8003088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308a:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <MX_GPIO_Init+0x70>)
 800308c:	2180      	movs	r1, #128	; 0x80
 800308e:	430a      	orrs	r2, r1
 8003090:	62da      	str	r2, [r3, #44]	; 0x2c
 8003092:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <MX_GPIO_Init+0x70>)
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003096:	2280      	movs	r2, #128	; 0x80
 8003098:	4013      	ands	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800309e:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <MX_GPIO_Init+0x70>)
 80030a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a2:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <MX_GPIO_Init+0x70>)
 80030a4:	2101      	movs	r1, #1
 80030a6:	430a      	orrs	r2, r1
 80030a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80030aa:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <MX_GPIO_Init+0x70>)
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	2201      	movs	r2, #1
 80030b0:	4013      	ands	r3, r2
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <MX_GPIO_Init+0x70>)
 80030b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ba:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <MX_GPIO_Init+0x70>)
 80030bc:	2102      	movs	r1, #2
 80030be:	430a      	orrs	r2, r1
 80030c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80030c2:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <MX_GPIO_Init+0x70>)
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	2202      	movs	r2, #2
 80030c8:	4013      	ands	r3, r2
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b004      	add	sp, #16
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	40021000 	.word	0x40021000

080030dc <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80030dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030de:	46de      	mov	lr, fp
 80030e0:	4657      	mov	r7, sl
 80030e2:	464e      	mov	r6, r9
 80030e4:	4645      	mov	r5, r8
 80030e6:	b5e0      	push	{r5, r6, r7, lr}
 80030e8:	b0bf      	sub	sp, #252	; 0xfc
 80030ea:	af06      	add	r7, sp, #24
 80030ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
//  UNUSED(hrtc);
	printf("Alarm ON\r\n");
 80030ee:	4b45      	ldr	r3, [pc, #276]	; (8003204 <HAL_RTC_AlarmAEventCallback+0x128>)
 80030f0:	0018      	movs	r0, r3
 80030f2:	f004 f8bf 	bl	8007274 <puts>
	uint8_t buffer[200] = {0};
 80030f6:	2408      	movs	r4, #8
 80030f8:	193b      	adds	r3, r7, r4
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	3304      	adds	r3, #4
 8003100:	22c4      	movs	r2, #196	; 0xc4
 8003102:	2100      	movs	r1, #0
 8003104:	0018      	movs	r0, r3
 8003106:	f004 f9d1 	bl	80074ac <memset>
		  float celsius = SHT2x_GetTemperature(1);
 800310a:	2001      	movs	r0, #1
 800310c:	f000 fa78 	bl	8003600 <SHT2x_GetTemperature>
 8003110:	1c03      	adds	r3, r0, #0
 8003112:	24dc      	movs	r4, #220	; 0xdc
 8003114:	1939      	adds	r1, r7, r4
 8003116:	600b      	str	r3, [r1, #0]
		  float fahrenheit = SHT2x_CelsiusToFahrenheit(celsius);
 8003118:	193b      	adds	r3, r7, r4
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	1c18      	adds	r0, r3, #0
 800311e:	f000 faef 	bl	8003700 <SHT2x_CelsiusToFahrenheit>
 8003122:	1c03      	adds	r3, r0, #0
 8003124:	25d8      	movs	r5, #216	; 0xd8
 8003126:	1979      	adds	r1, r7, r5
 8003128:	600b      	str	r3, [r1, #0]
		  float kelvin = SHT2x_CelsiusToKelvin(celsius);
 800312a:	193b      	adds	r3, r7, r4
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	1c18      	adds	r0, r3, #0
 8003130:	f000 fb0a 	bl	8003748 <SHT2x_CelsiusToKelvin>
 8003134:	1c03      	adds	r3, r0, #0
 8003136:	26d4      	movs	r6, #212	; 0xd4
 8003138:	19b9      	adds	r1, r7, r6
 800313a:	600b      	str	r3, [r1, #0]
		  float RH = SHT2x_GetRelativeHumidity(1);
 800313c:	2001      	movs	r0, #1
 800313e:	f000 faa1 	bl	8003684 <SHT2x_GetRelativeHumidity>
 8003142:	1c03      	adds	r3, r0, #0
 8003144:	21d0      	movs	r1, #208	; 0xd0
 8003146:	1878      	adds	r0, r7, r1
 8003148:	6003      	str	r3, [r0, #0]

		  sprintf(buffer, "%d.%dºC, %d.%dºF, %d.%d K, %d.%d%% RH\n",
 800314a:	193b      	adds	r3, r7, r4
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	1c18      	adds	r0, r3, #0
 8003150:	f000 fb0a 	bl	8003768 <SHT2x_GetInteger>
 8003154:	4682      	mov	sl, r0
 8003156:	193b      	adds	r3, r7, r4
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2101      	movs	r1, #1
 800315c:	1c18      	adds	r0, r3, #0
 800315e:	f000 fb0f 	bl	8003780 <SHT2x_GetDecimal>
 8003162:	4683      	mov	fp, r0
 8003164:	197b      	adds	r3, r7, r5
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	1c18      	adds	r0, r3, #0
 800316a:	f000 fafd 	bl	8003768 <SHT2x_GetInteger>
 800316e:	0004      	movs	r4, r0
 8003170:	197b      	adds	r3, r7, r5
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2101      	movs	r1, #1
 8003176:	1c18      	adds	r0, r3, #0
 8003178:	f000 fb02 	bl	8003780 <SHT2x_GetDecimal>
 800317c:	0005      	movs	r5, r0
 800317e:	19b8      	adds	r0, r7, r6
 8003180:	6803      	ldr	r3, [r0, #0]
 8003182:	1c18      	adds	r0, r3, #0
 8003184:	f000 faf0 	bl	8003768 <SHT2x_GetInteger>
 8003188:	0006      	movs	r6, r0
 800318a:	23d4      	movs	r3, #212	; 0xd4
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2101      	movs	r1, #1
 8003192:	1c18      	adds	r0, r3, #0
 8003194:	f000 faf4 	bl	8003780 <SHT2x_GetDecimal>
 8003198:	4680      	mov	r8, r0
 800319a:	21d0      	movs	r1, #208	; 0xd0
 800319c:	187b      	adds	r3, r7, r1
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	1c18      	adds	r0, r3, #0
 80031a2:	f000 fae1 	bl	8003768 <SHT2x_GetInteger>
 80031a6:	4681      	mov	r9, r0
 80031a8:	21d0      	movs	r1, #208	; 0xd0
 80031aa:	187b      	adds	r3, r7, r1
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2101      	movs	r1, #1
 80031b0:	1c18      	adds	r0, r3, #0
 80031b2:	f000 fae5 	bl	8003780 <SHT2x_GetDecimal>
 80031b6:	0003      	movs	r3, r0
 80031b8:	4913      	ldr	r1, [pc, #76]	; (8003208 <HAL_RTC_AlarmAEventCallback+0x12c>)
 80031ba:	2208      	movs	r2, #8
 80031bc:	18b8      	adds	r0, r7, r2
 80031be:	9305      	str	r3, [sp, #20]
 80031c0:	464b      	mov	r3, r9
 80031c2:	9304      	str	r3, [sp, #16]
 80031c4:	4643      	mov	r3, r8
 80031c6:	9303      	str	r3, [sp, #12]
 80031c8:	9602      	str	r6, [sp, #8]
 80031ca:	9501      	str	r5, [sp, #4]
 80031cc:	9400      	str	r4, [sp, #0]
 80031ce:	465b      	mov	r3, fp
 80031d0:	4652      	mov	r2, sl
 80031d2:	f004 f859 	bl	8007288 <siprintf>
				  SHT2x_GetInteger(celsius), SHT2x_GetDecimal(celsius,1),
				  SHT2x_GetInteger(fahrenheit), SHT2x_GetDecimal(fahrenheit,1),
				  SHT2x_GetInteger(kelvin), SHT2x_GetDecimal(kelvin,1),
				  SHT2x_GetInteger(RH), SHT2x_GetDecimal(RH,1));
		  HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 500);
 80031d6:	2408      	movs	r4, #8
 80031d8:	193b      	adds	r3, r7, r4
 80031da:	0018      	movs	r0, r3
 80031dc:	f7fc ff94 	bl	8000108 <strlen>
 80031e0:	0003      	movs	r3, r0
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	23fa      	movs	r3, #250	; 0xfa
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	1939      	adds	r1, r7, r4
 80031ea:	4808      	ldr	r0, [pc, #32]	; (800320c <HAL_RTC_AlarmAEventCallback+0x130>)
 80031ec:	f003 f9da 	bl	80065a4 <HAL_UART_Transmit>

}
 80031f0:	46c0      	nop			; (mov r8, r8)
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b039      	add	sp, #228	; 0xe4
 80031f6:	bcf0      	pop	{r4, r5, r6, r7}
 80031f8:	46bb      	mov	fp, r7
 80031fa:	46b2      	mov	sl, r6
 80031fc:	46a9      	mov	r9, r5
 80031fe:	46a0      	mov	r8, r4
 8003200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	08008120 	.word	0x08008120
 8003208:	0800812c 	.word	0x0800812c
 800320c:	200000fc 	.word	0x200000fc

08003210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003214:	b672      	cpsid	i
}
 8003216:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003218:	e7fe      	b.n	8003218 <Error_Handler+0x8>
	...

0800321c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003220:	4b07      	ldr	r3, [pc, #28]	; (8003240 <HAL_MspInit+0x24>)
 8003222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_MspInit+0x24>)
 8003226:	2101      	movs	r1, #1
 8003228:	430a      	orrs	r2, r1
 800322a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800322c:	4b04      	ldr	r3, [pc, #16]	; (8003240 <HAL_MspInit+0x24>)
 800322e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003230:	4b03      	ldr	r3, [pc, #12]	; (8003240 <HAL_MspInit+0x24>)
 8003232:	2180      	movs	r1, #128	; 0x80
 8003234:	0549      	lsls	r1, r1, #21
 8003236:	430a      	orrs	r2, r1
 8003238:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40021000 	.word	0x40021000

08003244 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b089      	sub	sp, #36	; 0x24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324c:	240c      	movs	r4, #12
 800324e:	193b      	adds	r3, r7, r4
 8003250:	0018      	movs	r0, r3
 8003252:	2314      	movs	r3, #20
 8003254:	001a      	movs	r2, r3
 8003256:	2100      	movs	r1, #0
 8003258:	f004 f928 	bl	80074ac <memset>
  if(hi2c->Instance==I2C1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a17      	ldr	r2, [pc, #92]	; (80032c0 <HAL_I2C_MspInit+0x7c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d128      	bne.n	80032b8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003266:	4b17      	ldr	r3, [pc, #92]	; (80032c4 <HAL_I2C_MspInit+0x80>)
 8003268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326a:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <HAL_I2C_MspInit+0x80>)
 800326c:	2102      	movs	r1, #2
 800326e:	430a      	orrs	r2, r1
 8003270:	62da      	str	r2, [r3, #44]	; 0x2c
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <HAL_I2C_MspInit+0x80>)
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	2202      	movs	r2, #2
 8003278:	4013      	ands	r3, r2
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BSP_I2C1_SCL_Pin|BSP_I2C1_SDA_Pin;
 800327e:	0021      	movs	r1, r4
 8003280:	187b      	adds	r3, r7, r1
 8003282:	22c0      	movs	r2, #192	; 0xc0
 8003284:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003286:	187b      	adds	r3, r7, r1
 8003288:	2212      	movs	r2, #18
 800328a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328c:	187b      	adds	r3, r7, r1
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003292:	187b      	adds	r3, r7, r1
 8003294:	2203      	movs	r2, #3
 8003296:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003298:	187b      	adds	r3, r7, r1
 800329a:	2201      	movs	r2, #1
 800329c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800329e:	187b      	adds	r3, r7, r1
 80032a0:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <HAL_I2C_MspInit+0x84>)
 80032a2:	0019      	movs	r1, r3
 80032a4:	0010      	movs	r0, r2
 80032a6:	f000 fc23 	bl	8003af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_I2C_MspInit+0x80>)
 80032ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ae:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_I2C_MspInit+0x80>)
 80032b0:	2180      	movs	r1, #128	; 0x80
 80032b2:	0389      	lsls	r1, r1, #14
 80032b4:	430a      	orrs	r2, r1
 80032b6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b009      	add	sp, #36	; 0x24
 80032be:	bd90      	pop	{r4, r7, pc}
 80032c0:	40005400 	.word	0x40005400
 80032c4:	40021000 	.word	0x40021000
 80032c8:	50000400 	.word	0x50000400

080032cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <HAL_RTC_MspInit+0x38>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d10e      	bne.n	80032fc <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80032de:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <HAL_RTC_MspInit+0x3c>)
 80032e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <HAL_RTC_MspInit+0x3c>)
 80032e4:	2180      	movs	r1, #128	; 0x80
 80032e6:	02c9      	lsls	r1, r1, #11
 80032e8:	430a      	orrs	r2, r1
 80032ea:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80032ec:	2200      	movs	r2, #0
 80032ee:	2100      	movs	r1, #0
 80032f0:	2002      	movs	r0, #2
 80032f2:	f000 fbcb 	bl	8003a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80032f6:	2002      	movs	r0, #2
 80032f8:	f000 fbdd 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80032fc:	46c0      	nop			; (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40002800 	.word	0x40002800
 8003308:	40021000 	.word	0x40021000

0800330c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800330c:	b590      	push	{r4, r7, lr}
 800330e:	b089      	sub	sp, #36	; 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	240c      	movs	r4, #12
 8003316:	193b      	adds	r3, r7, r4
 8003318:	0018      	movs	r0, r3
 800331a:	2314      	movs	r3, #20
 800331c:	001a      	movs	r2, r3
 800331e:	2100      	movs	r1, #0
 8003320:	f004 f8c4 	bl	80074ac <memset>
  if(huart->Instance==USART1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a18      	ldr	r2, [pc, #96]	; (800338c <HAL_UART_MspInit+0x80>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d12a      	bne.n	8003384 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800332e:	4b18      	ldr	r3, [pc, #96]	; (8003390 <HAL_UART_MspInit+0x84>)
 8003330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003332:	4b17      	ldr	r3, [pc, #92]	; (8003390 <HAL_UART_MspInit+0x84>)
 8003334:	2180      	movs	r1, #128	; 0x80
 8003336:	01c9      	lsls	r1, r1, #7
 8003338:	430a      	orrs	r2, r1
 800333a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800333c:	4b14      	ldr	r3, [pc, #80]	; (8003390 <HAL_UART_MspInit+0x84>)
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	4b13      	ldr	r3, [pc, #76]	; (8003390 <HAL_UART_MspInit+0x84>)
 8003342:	2101      	movs	r1, #1
 8003344:	430a      	orrs	r2, r1
 8003346:	62da      	str	r2, [r3, #44]	; 0x2c
 8003348:	4b11      	ldr	r3, [pc, #68]	; (8003390 <HAL_UART_MspInit+0x84>)
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	2201      	movs	r2, #1
 800334e:	4013      	ands	r3, r2
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_USART1_TX_Pin|BSP_USART1_RX_Pin;
 8003354:	193b      	adds	r3, r7, r4
 8003356:	22c0      	movs	r2, #192	; 0xc0
 8003358:	00d2      	lsls	r2, r2, #3
 800335a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335c:	0021      	movs	r1, r4
 800335e:	187b      	adds	r3, r7, r1
 8003360:	2202      	movs	r2, #2
 8003362:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	187b      	adds	r3, r7, r1
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800336a:	187b      	adds	r3, r7, r1
 800336c:	2203      	movs	r2, #3
 800336e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003370:	187b      	adds	r3, r7, r1
 8003372:	2204      	movs	r2, #4
 8003374:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003376:	187a      	adds	r2, r7, r1
 8003378:	23a0      	movs	r3, #160	; 0xa0
 800337a:	05db      	lsls	r3, r3, #23
 800337c:	0011      	movs	r1, r2
 800337e:	0018      	movs	r0, r3
 8003380:	f000 fbb6 	bl	8003af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003384:	46c0      	nop			; (mov r8, r8)
 8003386:	46bd      	mov	sp, r7
 8003388:	b009      	add	sp, #36	; 0x24
 800338a:	bd90      	pop	{r4, r7, pc}
 800338c:	40013800 	.word	0x40013800
 8003390:	40021000 	.word	0x40021000

08003394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003398:	e7fe      	b.n	8003398 <NMI_Handler+0x4>

0800339a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800339e:	e7fe      	b.n	800339e <HardFault_Handler+0x4>

080033a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80033a4:	46c0      	nop			; (mov r8, r8)
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033b8:	f000 fa7c 	bl	80038b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033bc:	46c0      	nop			; (mov r8, r8)
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <RTC_IRQHandler+0x1c>)
 80033ca:	0018      	movs	r0, r3
 80033cc:	f002 fe5a 	bl	8006084 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <RTC_IRQHandler+0x1c>)
 80033d2:	0018      	movs	r0, r3
 80033d4:	f003 f852 	bl	800647c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	200000d8 	.word	0x200000d8

080033e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	e00a      	b.n	800340c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033f6:	e000      	b.n	80033fa <_read+0x16>
 80033f8:	bf00      	nop
 80033fa:	0001      	movs	r1, r0
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	60ba      	str	r2, [r7, #8]
 8003402:	b2ca      	uxtb	r2, r1
 8003404:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	3301      	adds	r3, #1
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	429a      	cmp	r2, r3
 8003412:	dbf0      	blt.n	80033f6 <_read+0x12>
  }

  return len;
 8003414:	687b      	ldr	r3, [r7, #4]
}
 8003416:	0018      	movs	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	b006      	add	sp, #24
 800341c:	bd80      	pop	{r7, pc}

0800341e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b086      	sub	sp, #24
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	e009      	b.n	8003444 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	60ba      	str	r2, [r7, #8]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	0018      	movs	r0, r3
 800343a:	e000      	b.n	800343e <_write+0x20>
 800343c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	3301      	adds	r3, #1
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	dbf1      	blt.n	8003430 <_write+0x12>
  }
  return len;
 800344c:	687b      	ldr	r3, [r7, #4]
}
 800344e:	0018      	movs	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	b006      	add	sp, #24
 8003454:	bd80      	pop	{r7, pc}

08003456 <_close>:

int _close(int file)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800345e:	2301      	movs	r3, #1
 8003460:	425b      	negs	r3, r3
}
 8003462:	0018      	movs	r0, r3
 8003464:	46bd      	mov	sp, r7
 8003466:	b002      	add	sp, #8
 8003468:	bd80      	pop	{r7, pc}

0800346a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2280      	movs	r2, #128	; 0x80
 8003478:	0192      	lsls	r2, r2, #6
 800347a:	605a      	str	r2, [r3, #4]
  return 0;
 800347c:	2300      	movs	r3, #0
}
 800347e:	0018      	movs	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	b002      	add	sp, #8
 8003484:	bd80      	pop	{r7, pc}

08003486 <_isatty>:

int _isatty(int file)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800348e:	2301      	movs	r3, #1
}
 8003490:	0018      	movs	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	b002      	add	sp, #8
 8003496:	bd80      	pop	{r7, pc}

08003498 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	0018      	movs	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b004      	add	sp, #16
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034b8:	4a14      	ldr	r2, [pc, #80]	; (800350c <_sbrk+0x5c>)
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <_sbrk+0x60>)
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034c4:	4b13      	ldr	r3, [pc, #76]	; (8003514 <_sbrk+0x64>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d102      	bne.n	80034d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <_sbrk+0x64>)
 80034ce:	4a12      	ldr	r2, [pc, #72]	; (8003518 <_sbrk+0x68>)
 80034d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <_sbrk+0x64>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	18d3      	adds	r3, r2, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d207      	bcs.n	80034f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034e0:	f004 f83a 	bl	8007558 <__errno>
 80034e4:	0003      	movs	r3, r0
 80034e6:	220c      	movs	r2, #12
 80034e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034ea:	2301      	movs	r3, #1
 80034ec:	425b      	negs	r3, r3
 80034ee:	e009      	b.n	8003504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034f0:	4b08      	ldr	r3, [pc, #32]	; (8003514 <_sbrk+0x64>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <_sbrk+0x64>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	18d2      	adds	r2, r2, r3
 80034fe:	4b05      	ldr	r3, [pc, #20]	; (8003514 <_sbrk+0x64>)
 8003500:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003502:	68fb      	ldr	r3, [r7, #12]
}
 8003504:	0018      	movs	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	b006      	add	sp, #24
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20002000 	.word	0x20002000
 8003510:	00000400 	.word	0x00000400
 8003514:	200001c4 	.word	0x200001c4
 8003518:	20000320 	.word	0x20000320

0800351c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003528:	480d      	ldr	r0, [pc, #52]	; (8003560 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800352a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800352c:	f7ff fff6 	bl	800351c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003530:	480c      	ldr	r0, [pc, #48]	; (8003564 <LoopForever+0x6>)
  ldr r1, =_edata
 8003532:	490d      	ldr	r1, [pc, #52]	; (8003568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003534:	4a0d      	ldr	r2, [pc, #52]	; (800356c <LoopForever+0xe>)
  movs r3, #0
 8003536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003538:	e002      	b.n	8003540 <LoopCopyDataInit>

0800353a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800353a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800353c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800353e:	3304      	adds	r3, #4

08003540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003544:	d3f9      	bcc.n	800353a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003546:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003548:	4c0a      	ldr	r4, [pc, #40]	; (8003574 <LoopForever+0x16>)
  movs r3, #0
 800354a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800354c:	e001      	b.n	8003552 <LoopFillZerobss>

0800354e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800354e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003550:	3204      	adds	r2, #4

08003552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003554:	d3fb      	bcc.n	800354e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003556:	f004 f805 	bl	8007564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800355a:	f7ff fb91 	bl	8002c80 <main>

0800355e <LoopForever>:

LoopForever:
    b LoopForever
 800355e:	e7fe      	b.n	800355e <LoopForever>
  ldr   r0, =_estack
 8003560:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003568:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800356c:	0800824c 	.word	0x0800824c
  ldr r2, =_sbss
 8003570:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003574:	2000031c 	.word	0x2000031c

08003578 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003578:	e7fe      	b.n	8003578 <ADC1_COMP_IRQHandler>
	...

0800357c <SHT2x_Init>:
	
/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 8003584:	4b03      	ldr	r3, [pc, #12]	; (8003594 <SHT2x_Init+0x18>)
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	601a      	str	r2, [r3, #0]
}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	46bd      	mov	sp, r7
 800358e:	b002      	add	sp, #8
 8003590:	bd80      	pop	{r7, pc}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	200001c8 	.word	0x200001c8

08003598 <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b087      	sub	sp, #28
 800359c:	af02      	add	r7, sp, #8
 800359e:	0002      	movs	r2, r0
 80035a0:	1dfb      	adds	r3, r7, #7
 80035a2:	701a      	strb	r2, [r3, #0]
	uint8_t val[3] = { 0 };
 80035a4:	240c      	movs	r4, #12
 80035a6:	193b      	adds	r3, r7, r4
 80035a8:	4a13      	ldr	r2, [pc, #76]	; (80035f8 <SHT2x_GetRaw+0x60>)
 80035aa:	8812      	ldrh	r2, [r2, #0]
 80035ac:	801a      	strh	r2, [r3, #0]
 80035ae:	2202      	movs	r2, #2
 80035b0:	2100      	movs	r1, #0
 80035b2:	5499      	strb	r1, [r3, r2]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <SHT2x_GetRaw+0x64>)
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	1dfa      	adds	r2, r7, #7
 80035ba:	23fa      	movs	r3, #250	; 0xfa
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	2301      	movs	r3, #1
 80035c2:	2180      	movs	r1, #128	; 0x80
 80035c4:	f000 fca0 	bl	8003f08 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 80035c8:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <SHT2x_GetRaw+0x64>)
 80035ca:	6818      	ldr	r0, [r3, #0]
 80035cc:	193a      	adds	r2, r7, r4
 80035ce:	23fa      	movs	r3, #250	; 0xfa
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	2303      	movs	r3, #3
 80035d6:	2180      	movs	r1, #128	; 0x80
 80035d8:	f000 fd9e 	bl	8004118 <HAL_I2C_Master_Receive>
	return val[0] << 8 | val[1];
 80035dc:	193b      	adds	r3, r7, r4
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	021b      	lsls	r3, r3, #8
 80035e2:	b21a      	sxth	r2, r3
 80035e4:	193b      	adds	r3, r7, r4
 80035e6:	785b      	ldrb	r3, [r3, #1]
 80035e8:	b21b      	sxth	r3, r3
 80035ea:	4313      	orrs	r3, r2
 80035ec:	b21b      	sxth	r3, r3
 80035ee:	b29b      	uxth	r3, r3
}
 80035f0:	0018      	movs	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b005      	add	sp, #20
 80035f6:	bd90      	pop	{r4, r7, pc}
 80035f8:	08008158 	.word	0x08008158
 80035fc:	200001c8 	.word	0x200001c8

08003600 <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	0002      	movs	r2, r0
 8003608:	1dfb      	adds	r3, r7, #7
 800360a:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 800360c:	1dfb      	adds	r3, r7, #7
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <SHT2x_GetTemperature+0x18>
 8003614:	22e3      	movs	r2, #227	; 0xe3
 8003616:	e000      	b.n	800361a <SHT2x_GetTemperature+0x1a>
 8003618:	22f3      	movs	r2, #243	; 0xf3
 800361a:	210f      	movs	r1, #15
 800361c:	187b      	adds	r3, r7, r1
 800361e:	701a      	strb	r2, [r3, #0]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 8003620:	187b      	adds	r3, r7, r1
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	0018      	movs	r0, r3
 8003626:	f7ff ffb7 	bl	8003598 <SHT2x_GetRaw>
 800362a:	0003      	movs	r3, r0
 800362c:	0018      	movs	r0, r3
 800362e:	f7ff f915 	bl	800285c <__aeabi_i2d>
 8003632:	2200      	movs	r2, #0
 8003634:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <SHT2x_GetTemperature+0x70>)
 8003636:	f7fd ffdf 	bl	80015f8 <__aeabi_ddiv>
 800363a:	0002      	movs	r2, r0
 800363c:	000b      	movs	r3, r1
 800363e:	0010      	movs	r0, r2
 8003640:	0019      	movs	r1, r3
 8003642:	4a0c      	ldr	r2, [pc, #48]	; (8003674 <SHT2x_GetTemperature+0x74>)
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <SHT2x_GetTemperature+0x78>)
 8003646:	f7fe fac5 	bl	8001bd4 <__aeabi_dmul>
 800364a:	0002      	movs	r2, r0
 800364c:	000b      	movs	r3, r1
 800364e:	0010      	movs	r0, r2
 8003650:	0019      	movs	r1, r3
 8003652:	4a0a      	ldr	r2, [pc, #40]	; (800367c <SHT2x_GetTemperature+0x7c>)
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <SHT2x_GetTemperature+0x80>)
 8003656:	f7fe fd7f 	bl	8002158 <__aeabi_dsub>
 800365a:	0002      	movs	r2, r0
 800365c:	000b      	movs	r3, r1
 800365e:	0010      	movs	r0, r2
 8003660:	0019      	movs	r1, r3
 8003662:	f7ff f973 	bl	800294c <__aeabi_d2f>
 8003666:	1c03      	adds	r3, r0, #0
}
 8003668:	1c18      	adds	r0, r3, #0
 800366a:	46bd      	mov	sp, r7
 800366c:	b004      	add	sp, #16
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40f00000 	.word	0x40f00000
 8003674:	3d70a3d7 	.word	0x3d70a3d7
 8003678:	4065f70a 	.word	0x4065f70a
 800367c:	cccccccd 	.word	0xcccccccd
 8003680:	40476ccc 	.word	0x40476ccc

08003684 <SHT2x_GetRelativeHumidity>:
/**
 * @brief Measures and gets the current relative humidity.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point relative humidity value.
 */
float SHT2x_GetRelativeHumidity(uint8_t hold) {
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	0002      	movs	r2, r0
 800368c:	1dfb      	adds	r3, r7, #7
 800368e:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = (hold ? SHT2x_READ_RH_HOLD : SHT2x_READ_RH_NOHOLD);
 8003690:	1dfb      	adds	r3, r7, #7
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <SHT2x_GetRelativeHumidity+0x18>
 8003698:	22e5      	movs	r2, #229	; 0xe5
 800369a:	e000      	b.n	800369e <SHT2x_GetRelativeHumidity+0x1a>
 800369c:	22f5      	movs	r2, #245	; 0xf5
 800369e:	210f      	movs	r1, #15
 80036a0:	187b      	adds	r3, r7, r1
 80036a2:	701a      	strb	r2, [r3, #0]
	return -6 + 125.00 * (SHT2x_GetRaw(cmd) / 65536.0);
 80036a4:	187b      	adds	r3, r7, r1
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	0018      	movs	r0, r3
 80036aa:	f7ff ff75 	bl	8003598 <SHT2x_GetRaw>
 80036ae:	0003      	movs	r3, r0
 80036b0:	0018      	movs	r0, r3
 80036b2:	f7ff f8d3 	bl	800285c <__aeabi_i2d>
 80036b6:	2200      	movs	r2, #0
 80036b8:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <SHT2x_GetRelativeHumidity+0x70>)
 80036ba:	f7fd ff9d 	bl	80015f8 <__aeabi_ddiv>
 80036be:	0002      	movs	r2, r0
 80036c0:	000b      	movs	r3, r1
 80036c2:	0010      	movs	r0, r2
 80036c4:	0019      	movs	r1, r3
 80036c6:	2200      	movs	r2, #0
 80036c8:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <SHT2x_GetRelativeHumidity+0x74>)
 80036ca:	f7fe fa83 	bl	8001bd4 <__aeabi_dmul>
 80036ce:	0002      	movs	r2, r0
 80036d0:	000b      	movs	r3, r1
 80036d2:	0010      	movs	r0, r2
 80036d4:	0019      	movs	r1, r3
 80036d6:	2200      	movs	r2, #0
 80036d8:	4b08      	ldr	r3, [pc, #32]	; (80036fc <SHT2x_GetRelativeHumidity+0x78>)
 80036da:	f7fe fd3d 	bl	8002158 <__aeabi_dsub>
 80036de:	0002      	movs	r2, r0
 80036e0:	000b      	movs	r3, r1
 80036e2:	0010      	movs	r0, r2
 80036e4:	0019      	movs	r1, r3
 80036e6:	f7ff f931 	bl	800294c <__aeabi_d2f>
 80036ea:	1c03      	adds	r3, r0, #0
}
 80036ec:	1c18      	adds	r0, r3, #0
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b004      	add	sp, #16
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40f00000 	.word	0x40f00000
 80036f8:	405f4000 	.word	0x405f4000
 80036fc:	40180000 	.word	0x40180000

08003700 <SHT2x_CelsiusToFahrenheit>:
/**
 * @brief Converts degrees Celsius to degrees Fahrenheit.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in degrees Fahrenheit.
 */
float SHT2x_CelsiusToFahrenheit(float celsius) {
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	return (9.0 / 5.0) * celsius + 32;
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff f8d7 	bl	80028bc <__aeabi_f2d>
 800370e:	4a0b      	ldr	r2, [pc, #44]	; (800373c <SHT2x_CelsiusToFahrenheit+0x3c>)
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <SHT2x_CelsiusToFahrenheit+0x40>)
 8003712:	f7fe fa5f 	bl	8001bd4 <__aeabi_dmul>
 8003716:	0002      	movs	r2, r0
 8003718:	000b      	movs	r3, r1
 800371a:	0010      	movs	r0, r2
 800371c:	0019      	movs	r1, r3
 800371e:	2200      	movs	r2, #0
 8003720:	4b08      	ldr	r3, [pc, #32]	; (8003744 <SHT2x_CelsiusToFahrenheit+0x44>)
 8003722:	f7fd fc09 	bl	8000f38 <__aeabi_dadd>
 8003726:	0002      	movs	r2, r0
 8003728:	000b      	movs	r3, r1
 800372a:	0010      	movs	r0, r2
 800372c:	0019      	movs	r1, r3
 800372e:	f7ff f90d 	bl	800294c <__aeabi_d2f>
 8003732:	1c03      	adds	r3, r0, #0
}
 8003734:	1c18      	adds	r0, r3, #0
 8003736:	46bd      	mov	sp, r7
 8003738:	b002      	add	sp, #8
 800373a:	bd80      	pop	{r7, pc}
 800373c:	cccccccd 	.word	0xcccccccd
 8003740:	3ffccccc 	.word	0x3ffccccc
 8003744:	40400000 	.word	0x40400000

08003748 <SHT2x_CelsiusToKelvin>:
/**
 * @brief Converts degrees Celsius to Kelvin.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in Kelvin.
 */
float SHT2x_CelsiusToKelvin(float celsius) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
	return celsius + 273;
 8003750:	4904      	ldr	r1, [pc, #16]	; (8003764 <SHT2x_CelsiusToKelvin+0x1c>)
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fc fea8 	bl	80004a8 <__aeabi_fadd>
 8003758:	1c03      	adds	r3, r0, #0
}
 800375a:	1c18      	adds	r0, r3, #0
 800375c:	46bd      	mov	sp, r7
 800375e:	b002      	add	sp, #8
 8003760:	bd80      	pop	{r7, pc}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	43888000 	.word	0x43888000

08003768 <SHT2x_GetInteger>:
 * @brief Gets the integer part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Integer part of floating point number.
 */
int32_t SHT2x_GetInteger(float num) {
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
	return num / 1;
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7fd fb27 	bl	8000dc4 <__aeabi_f2iz>
 8003776:	0003      	movs	r3, r0
}
 8003778:	0018      	movs	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	b002      	add	sp, #8
 800377e:	bd80      	pop	{r7, pc}

08003780 <SHT2x_GetDecimal>:
 * @brief Gets the decimal part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Decimal part of floating point number.
 */
uint32_t SHT2x_GetDecimal(float num, int digits) {
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
	float postDec = num - SHT2x_GetInteger(num);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	1c18      	adds	r0, r3, #0
 800378e:	f7ff ffeb 	bl	8003768 <SHT2x_GetInteger>
 8003792:	0003      	movs	r3, r0
 8003794:	0018      	movs	r0, r3
 8003796:	f7fd fb35 	bl	8000e04 <__aeabi_i2f>
 800379a:	1c03      	adds	r3, r0, #0
 800379c:	1c19      	adds	r1, r3, #0
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd f970 	bl	8000a84 <__aeabi_fsub>
 80037a4:	1c03      	adds	r3, r0, #0
 80037a6:	60fb      	str	r3, [r7, #12]
	return postDec * SHT2x_Ipow(10, digits);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	0019      	movs	r1, r3
 80037ac:	200a      	movs	r0, #10
 80037ae:	f000 f812 	bl	80037d6 <SHT2x_Ipow>
 80037b2:	0003      	movs	r3, r0
 80037b4:	0018      	movs	r0, r3
 80037b6:	f7fd fb77 	bl	8000ea8 <__aeabi_ui2f>
 80037ba:	1c03      	adds	r3, r0, #0
 80037bc:	68f9      	ldr	r1, [r7, #12]
 80037be:	1c18      	adds	r0, r3, #0
 80037c0:	f7fd f812 	bl	80007e8 <__aeabi_fmul>
 80037c4:	1c03      	adds	r3, r0, #0
 80037c6:	1c18      	adds	r0, r3, #0
 80037c8:	f7fc fd8a 	bl	80002e0 <__aeabi_f2uiz>
 80037cc:	0003      	movs	r3, r0
}
 80037ce:	0018      	movs	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b004      	add	sp, #16
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <SHT2x_Ipow>:
 * @brief Integer equivalent of pow() in math.h.
 * @param base Base.
 * @param power Power.
 * @return
 */
uint32_t SHT2x_Ipow(uint32_t base, uint32_t power) {
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]
	uint32_t temp = base;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 80037e4:	2301      	movs	r3, #1
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	e006      	b.n	80037f8 <SHT2x_Ipow+0x22>
		temp *= base;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4353      	muls	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	3301      	adds	r3, #1
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d3f4      	bcc.n	80037ea <SHT2x_Ipow+0x14>
	return temp;
 8003800:	68fb      	ldr	r3, [r7, #12]
}
 8003802:	0018      	movs	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	b004      	add	sp, #16
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003812:	1dfb      	adds	r3, r7, #7
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_Init+0x3c>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <HAL_Init+0x3c>)
 800381e:	2140      	movs	r1, #64	; 0x40
 8003820:	430a      	orrs	r2, r1
 8003822:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003824:	2000      	movs	r0, #0
 8003826:	f000 f811 	bl	800384c <HAL_InitTick>
 800382a:	1e03      	subs	r3, r0, #0
 800382c:	d003      	beq.n	8003836 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	2201      	movs	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e001      	b.n	800383a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003836:	f7ff fcf1 	bl	800321c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800383a:	1dfb      	adds	r3, r7, #7
 800383c:	781b      	ldrb	r3, [r3, #0]
}
 800383e:	0018      	movs	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	b002      	add	sp, #8
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	40022000 	.word	0x40022000

0800384c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800384c:	b590      	push	{r4, r7, lr}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003854:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <HAL_InitTick+0x5c>)
 8003856:	681c      	ldr	r4, [r3, #0]
 8003858:	4b14      	ldr	r3, [pc, #80]	; (80038ac <HAL_InitTick+0x60>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	0019      	movs	r1, r3
 800385e:	23fa      	movs	r3, #250	; 0xfa
 8003860:	0098      	lsls	r0, r3, #2
 8003862:	f7fc fc63 	bl	800012c <__udivsi3>
 8003866:	0003      	movs	r3, r0
 8003868:	0019      	movs	r1, r3
 800386a:	0020      	movs	r0, r4
 800386c:	f7fc fc5e 	bl	800012c <__udivsi3>
 8003870:	0003      	movs	r3, r0
 8003872:	0018      	movs	r0, r3
 8003874:	f000 f92f 	bl	8003ad6 <HAL_SYSTICK_Config>
 8003878:	1e03      	subs	r3, r0, #0
 800387a:	d001      	beq.n	8003880 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e00f      	b.n	80038a0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b03      	cmp	r3, #3
 8003884:	d80b      	bhi.n	800389e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	2301      	movs	r3, #1
 800388a:	425b      	negs	r3, r3
 800388c:	2200      	movs	r2, #0
 800388e:	0018      	movs	r0, r3
 8003890:	f000 f8fc 	bl	8003a8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003894:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <HAL_InitTick+0x64>)
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	e000      	b.n	80038a0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
}
 80038a0:	0018      	movs	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b003      	add	sp, #12
 80038a6:	bd90      	pop	{r4, r7, pc}
 80038a8:	20000000 	.word	0x20000000
 80038ac:	20000008 	.word	0x20000008
 80038b0:	20000004 	.word	0x20000004

080038b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_IncTick+0x1c>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	001a      	movs	r2, r3
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_IncTick+0x20>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	18d2      	adds	r2, r2, r3
 80038c4:	4b03      	ldr	r3, [pc, #12]	; (80038d4 <HAL_IncTick+0x20>)
 80038c6:	601a      	str	r2, [r3, #0]
}
 80038c8:	46c0      	nop			; (mov r8, r8)
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	20000008 	.word	0x20000008
 80038d4:	200001cc 	.word	0x200001cc

080038d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  return uwTick;
 80038dc:	4b02      	ldr	r3, [pc, #8]	; (80038e8 <HAL_GetTick+0x10>)
 80038de:	681b      	ldr	r3, [r3, #0]
}
 80038e0:	0018      	movs	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	200001cc 	.word	0x200001cc

080038ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038f4:	f7ff fff0 	bl	80038d8 <HAL_GetTick>
 80038f8:	0003      	movs	r3, r0
 80038fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	3301      	adds	r3, #1
 8003904:	d005      	beq.n	8003912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003906:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <HAL_Delay+0x44>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	001a      	movs	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	189b      	adds	r3, r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	f7ff ffe0 	bl	80038d8 <HAL_GetTick>
 8003918:	0002      	movs	r2, r0
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	429a      	cmp	r2, r3
 8003922:	d8f7      	bhi.n	8003914 <HAL_Delay+0x28>
  {
  }
}
 8003924:	46c0      	nop			; (mov r8, r8)
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	b004      	add	sp, #16
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	20000008 	.word	0x20000008

08003934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	0002      	movs	r2, r0
 800393c:	1dfb      	adds	r3, r7, #7
 800393e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003940:	1dfb      	adds	r3, r7, #7
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b7f      	cmp	r3, #127	; 0x7f
 8003946:	d809      	bhi.n	800395c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003948:	1dfb      	adds	r3, r7, #7
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	001a      	movs	r2, r3
 800394e:	231f      	movs	r3, #31
 8003950:	401a      	ands	r2, r3
 8003952:	4b04      	ldr	r3, [pc, #16]	; (8003964 <__NVIC_EnableIRQ+0x30>)
 8003954:	2101      	movs	r1, #1
 8003956:	4091      	lsls	r1, r2
 8003958:	000a      	movs	r2, r1
 800395a:	601a      	str	r2, [r3, #0]
  }
}
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	46bd      	mov	sp, r7
 8003960:	b002      	add	sp, #8
 8003962:	bd80      	pop	{r7, pc}
 8003964:	e000e100 	.word	0xe000e100

08003968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	0002      	movs	r2, r0
 8003970:	6039      	str	r1, [r7, #0]
 8003972:	1dfb      	adds	r3, r7, #7
 8003974:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003976:	1dfb      	adds	r3, r7, #7
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b7f      	cmp	r3, #127	; 0x7f
 800397c:	d828      	bhi.n	80039d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800397e:	4a2f      	ldr	r2, [pc, #188]	; (8003a3c <__NVIC_SetPriority+0xd4>)
 8003980:	1dfb      	adds	r3, r7, #7
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	b25b      	sxtb	r3, r3
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	33c0      	adds	r3, #192	; 0xc0
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	589b      	ldr	r3, [r3, r2]
 800398e:	1dfa      	adds	r2, r7, #7
 8003990:	7812      	ldrb	r2, [r2, #0]
 8003992:	0011      	movs	r1, r2
 8003994:	2203      	movs	r2, #3
 8003996:	400a      	ands	r2, r1
 8003998:	00d2      	lsls	r2, r2, #3
 800399a:	21ff      	movs	r1, #255	; 0xff
 800399c:	4091      	lsls	r1, r2
 800399e:	000a      	movs	r2, r1
 80039a0:	43d2      	mvns	r2, r2
 80039a2:	401a      	ands	r2, r3
 80039a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	019b      	lsls	r3, r3, #6
 80039aa:	22ff      	movs	r2, #255	; 0xff
 80039ac:	401a      	ands	r2, r3
 80039ae:	1dfb      	adds	r3, r7, #7
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	0018      	movs	r0, r3
 80039b4:	2303      	movs	r3, #3
 80039b6:	4003      	ands	r3, r0
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039bc:	481f      	ldr	r0, [pc, #124]	; (8003a3c <__NVIC_SetPriority+0xd4>)
 80039be:	1dfb      	adds	r3, r7, #7
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	b25b      	sxtb	r3, r3
 80039c4:	089b      	lsrs	r3, r3, #2
 80039c6:	430a      	orrs	r2, r1
 80039c8:	33c0      	adds	r3, #192	; 0xc0
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80039ce:	e031      	b.n	8003a34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039d0:	4a1b      	ldr	r2, [pc, #108]	; (8003a40 <__NVIC_SetPriority+0xd8>)
 80039d2:	1dfb      	adds	r3, r7, #7
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	0019      	movs	r1, r3
 80039d8:	230f      	movs	r3, #15
 80039da:	400b      	ands	r3, r1
 80039dc:	3b08      	subs	r3, #8
 80039de:	089b      	lsrs	r3, r3, #2
 80039e0:	3306      	adds	r3, #6
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	18d3      	adds	r3, r2, r3
 80039e6:	3304      	adds	r3, #4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	1dfa      	adds	r2, r7, #7
 80039ec:	7812      	ldrb	r2, [r2, #0]
 80039ee:	0011      	movs	r1, r2
 80039f0:	2203      	movs	r2, #3
 80039f2:	400a      	ands	r2, r1
 80039f4:	00d2      	lsls	r2, r2, #3
 80039f6:	21ff      	movs	r1, #255	; 0xff
 80039f8:	4091      	lsls	r1, r2
 80039fa:	000a      	movs	r2, r1
 80039fc:	43d2      	mvns	r2, r2
 80039fe:	401a      	ands	r2, r3
 8003a00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	019b      	lsls	r3, r3, #6
 8003a06:	22ff      	movs	r2, #255	; 0xff
 8003a08:	401a      	ands	r2, r3
 8003a0a:	1dfb      	adds	r3, r7, #7
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	0018      	movs	r0, r3
 8003a10:	2303      	movs	r3, #3
 8003a12:	4003      	ands	r3, r0
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a18:	4809      	ldr	r0, [pc, #36]	; (8003a40 <__NVIC_SetPriority+0xd8>)
 8003a1a:	1dfb      	adds	r3, r7, #7
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	001c      	movs	r4, r3
 8003a20:	230f      	movs	r3, #15
 8003a22:	4023      	ands	r3, r4
 8003a24:	3b08      	subs	r3, #8
 8003a26:	089b      	lsrs	r3, r3, #2
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	3306      	adds	r3, #6
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	18c3      	adds	r3, r0, r3
 8003a30:	3304      	adds	r3, #4
 8003a32:	601a      	str	r2, [r3, #0]
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b003      	add	sp, #12
 8003a3a:	bd90      	pop	{r4, r7, pc}
 8003a3c:	e000e100 	.word	0xe000e100
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	1e5a      	subs	r2, r3, #1
 8003a50:	2380      	movs	r3, #128	; 0x80
 8003a52:	045b      	lsls	r3, r3, #17
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d301      	bcc.n	8003a5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e010      	b.n	8003a7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <SysTick_Config+0x44>)
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	3a01      	subs	r2, #1
 8003a62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a64:	2301      	movs	r3, #1
 8003a66:	425b      	negs	r3, r3
 8003a68:	2103      	movs	r1, #3
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f7ff ff7c 	bl	8003968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <SysTick_Config+0x44>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a76:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <SysTick_Config+0x44>)
 8003a78:	2207      	movs	r2, #7
 8003a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	0018      	movs	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b002      	add	sp, #8
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	e000e010 	.word	0xe000e010

08003a8c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	210f      	movs	r1, #15
 8003a98:	187b      	adds	r3, r7, r1
 8003a9a:	1c02      	adds	r2, r0, #0
 8003a9c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	187b      	adds	r3, r7, r1
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	b25b      	sxtb	r3, r3
 8003aa6:	0011      	movs	r1, r2
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f7ff ff5d 	bl	8003968 <__NVIC_SetPriority>
}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	b004      	add	sp, #16
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	0002      	movs	r2, r0
 8003abe:	1dfb      	adds	r3, r7, #7
 8003ac0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac2:	1dfb      	adds	r3, r7, #7
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	b25b      	sxtb	r3, r3
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f7ff ff33 	bl	8003934 <__NVIC_EnableIRQ>
}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b002      	add	sp, #8
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f7ff ffaf 	bl	8003a44 <SysTick_Config>
 8003ae6:	0003      	movs	r3, r0
}
 8003ae8:	0018      	movs	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b002      	add	sp, #8
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003b06:	e14f      	b.n	8003da8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4091      	lsls	r1, r2
 8003b12:	000a      	movs	r2, r1
 8003b14:	4013      	ands	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d100      	bne.n	8003b20 <HAL_GPIO_Init+0x30>
 8003b1e:	e140      	b.n	8003da2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2203      	movs	r2, #3
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d005      	beq.n	8003b38 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2203      	movs	r2, #3
 8003b32:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d130      	bne.n	8003b9a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	2203      	movs	r2, #3
 8003b44:	409a      	lsls	r2, r3
 8003b46:	0013      	movs	r3, r2
 8003b48:	43da      	mvns	r2, r3
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	0013      	movs	r3, r2
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b6e:	2201      	movs	r2, #1
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	409a      	lsls	r2, r3
 8003b74:	0013      	movs	r3, r2
 8003b76:	43da      	mvns	r2, r3
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	091b      	lsrs	r3, r3, #4
 8003b84:	2201      	movs	r2, #1
 8003b86:	401a      	ands	r2, r3
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	0013      	movs	r3, r2
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d017      	beq.n	8003bd6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	0013      	movs	r3, r2
 8003bb6:	43da      	mvns	r2, r3
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	0013      	movs	r3, r2
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2203      	movs	r2, #3
 8003bdc:	4013      	ands	r3, r2
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d123      	bne.n	8003c2a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	08da      	lsrs	r2, r3, #3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3208      	adds	r2, #8
 8003bea:	0092      	lsls	r2, r2, #2
 8003bec:	58d3      	ldr	r3, [r2, r3]
 8003bee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2207      	movs	r2, #7
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	220f      	movs	r2, #15
 8003bfa:	409a      	lsls	r2, r3
 8003bfc:	0013      	movs	r3, r2
 8003bfe:	43da      	mvns	r2, r3
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4013      	ands	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2107      	movs	r1, #7
 8003c0e:	400b      	ands	r3, r1
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	409a      	lsls	r2, r3
 8003c14:	0013      	movs	r3, r2
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	08da      	lsrs	r2, r3, #3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3208      	adds	r2, #8
 8003c24:	0092      	lsls	r2, r2, #2
 8003c26:	6939      	ldr	r1, [r7, #16]
 8003c28:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	2203      	movs	r2, #3
 8003c36:	409a      	lsls	r2, r3
 8003c38:	0013      	movs	r3, r2
 8003c3a:	43da      	mvns	r2, r3
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2203      	movs	r2, #3
 8003c48:	401a      	ands	r2, r3
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	409a      	lsls	r2, r3
 8003c50:	0013      	movs	r3, r2
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	23c0      	movs	r3, #192	; 0xc0
 8003c64:	029b      	lsls	r3, r3, #10
 8003c66:	4013      	ands	r3, r2
 8003c68:	d100      	bne.n	8003c6c <HAL_GPIO_Init+0x17c>
 8003c6a:	e09a      	b.n	8003da2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c6c:	4b54      	ldr	r3, [pc, #336]	; (8003dc0 <HAL_GPIO_Init+0x2d0>)
 8003c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c70:	4b53      	ldr	r3, [pc, #332]	; (8003dc0 <HAL_GPIO_Init+0x2d0>)
 8003c72:	2101      	movs	r1, #1
 8003c74:	430a      	orrs	r2, r1
 8003c76:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c78:	4a52      	ldr	r2, [pc, #328]	; (8003dc4 <HAL_GPIO_Init+0x2d4>)
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	089b      	lsrs	r3, r3, #2
 8003c7e:	3302      	adds	r3, #2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	589b      	ldr	r3, [r3, r2]
 8003c84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2203      	movs	r2, #3
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	220f      	movs	r2, #15
 8003c90:	409a      	lsls	r2, r3
 8003c92:	0013      	movs	r3, r2
 8003c94:	43da      	mvns	r2, r3
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	23a0      	movs	r3, #160	; 0xa0
 8003ca0:	05db      	lsls	r3, r3, #23
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d019      	beq.n	8003cda <HAL_GPIO_Init+0x1ea>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a47      	ldr	r2, [pc, #284]	; (8003dc8 <HAL_GPIO_Init+0x2d8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d013      	beq.n	8003cd6 <HAL_GPIO_Init+0x1e6>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a46      	ldr	r2, [pc, #280]	; (8003dcc <HAL_GPIO_Init+0x2dc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00d      	beq.n	8003cd2 <HAL_GPIO_Init+0x1e2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a45      	ldr	r2, [pc, #276]	; (8003dd0 <HAL_GPIO_Init+0x2e0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d007      	beq.n	8003cce <HAL_GPIO_Init+0x1de>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a44      	ldr	r2, [pc, #272]	; (8003dd4 <HAL_GPIO_Init+0x2e4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d101      	bne.n	8003cca <HAL_GPIO_Init+0x1da>
 8003cc6:	2305      	movs	r3, #5
 8003cc8:	e008      	b.n	8003cdc <HAL_GPIO_Init+0x1ec>
 8003cca:	2306      	movs	r3, #6
 8003ccc:	e006      	b.n	8003cdc <HAL_GPIO_Init+0x1ec>
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e004      	b.n	8003cdc <HAL_GPIO_Init+0x1ec>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e002      	b.n	8003cdc <HAL_GPIO_Init+0x1ec>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <HAL_GPIO_Init+0x1ec>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	2103      	movs	r1, #3
 8003ce0:	400a      	ands	r2, r1
 8003ce2:	0092      	lsls	r2, r2, #2
 8003ce4:	4093      	lsls	r3, r2
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cec:	4935      	ldr	r1, [pc, #212]	; (8003dc4 <HAL_GPIO_Init+0x2d4>)
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	089b      	lsrs	r3, r3, #2
 8003cf2:	3302      	adds	r3, #2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cfa:	4b37      	ldr	r3, [pc, #220]	; (8003dd8 <HAL_GPIO_Init+0x2e8>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	43da      	mvns	r2, r3
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	4013      	ands	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	035b      	lsls	r3, r3, #13
 8003d12:	4013      	ands	r3, r2
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003d1e:	4b2e      	ldr	r3, [pc, #184]	; (8003dd8 <HAL_GPIO_Init+0x2e8>)
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003d24:	4b2c      	ldr	r3, [pc, #176]	; (8003dd8 <HAL_GPIO_Init+0x2e8>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	43da      	mvns	r2, r3
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4013      	ands	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	2380      	movs	r3, #128	; 0x80
 8003d3a:	039b      	lsls	r3, r3, #14
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d003      	beq.n	8003d48 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d48:	4b23      	ldr	r3, [pc, #140]	; (8003dd8 <HAL_GPIO_Init+0x2e8>)
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003d4e:	4b22      	ldr	r3, [pc, #136]	; (8003dd8 <HAL_GPIO_Init+0x2e8>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	43da      	mvns	r2, r3
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	2380      	movs	r3, #128	; 0x80
 8003d64:	029b      	lsls	r3, r3, #10
 8003d66:	4013      	ands	r3, r2
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003d72:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <HAL_GPIO_Init+0x2e8>)
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d78:	4b17      	ldr	r3, [pc, #92]	; (8003dd8 <HAL_GPIO_Init+0x2e8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	43da      	mvns	r2, r3
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4013      	ands	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	2380      	movs	r3, #128	; 0x80
 8003d8e:	025b      	lsls	r3, r3, #9
 8003d90:	4013      	ands	r3, r2
 8003d92:	d003      	beq.n	8003d9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003d9c:	4b0e      	ldr	r3, [pc, #56]	; (8003dd8 <HAL_GPIO_Init+0x2e8>)
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	3301      	adds	r3, #1
 8003da6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	40da      	lsrs	r2, r3
 8003db0:	1e13      	subs	r3, r2, #0
 8003db2:	d000      	beq.n	8003db6 <HAL_GPIO_Init+0x2c6>
 8003db4:	e6a8      	b.n	8003b08 <HAL_GPIO_Init+0x18>
  }
}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	46c0      	nop			; (mov r8, r8)
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	b006      	add	sp, #24
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40010000 	.word	0x40010000
 8003dc8:	50000400 	.word	0x50000400
 8003dcc:	50000800 	.word	0x50000800
 8003dd0:	50000c00 	.word	0x50000c00
 8003dd4:	50001c00 	.word	0x50001c00
 8003dd8:	40010400 	.word	0x40010400

08003ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e082      	b.n	8003ef4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2241      	movs	r2, #65	; 0x41
 8003df2:	5c9b      	ldrb	r3, [r3, r2]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d107      	bne.n	8003e0a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2240      	movs	r2, #64	; 0x40
 8003dfe:	2100      	movs	r1, #0
 8003e00:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	0018      	movs	r0, r3
 8003e06:	f7ff fa1d 	bl	8003244 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2241      	movs	r2, #65	; 0x41
 8003e0e:	2124      	movs	r1, #36	; 0x24
 8003e10:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	438a      	bics	r2, r1
 8003e20:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4934      	ldr	r1, [pc, #208]	; (8003efc <HAL_I2C_Init+0x120>)
 8003e2c:	400a      	ands	r2, r1
 8003e2e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4931      	ldr	r1, [pc, #196]	; (8003f00 <HAL_I2C_Init+0x124>)
 8003e3c:	400a      	ands	r2, r1
 8003e3e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d108      	bne.n	8003e5a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2180      	movs	r1, #128	; 0x80
 8003e52:	0209      	lsls	r1, r1, #8
 8003e54:	430a      	orrs	r2, r1
 8003e56:	609a      	str	r2, [r3, #8]
 8003e58:	e007      	b.n	8003e6a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2184      	movs	r1, #132	; 0x84
 8003e64:	0209      	lsls	r1, r1, #8
 8003e66:	430a      	orrs	r2, r1
 8003e68:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d104      	bne.n	8003e7c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2280      	movs	r2, #128	; 0x80
 8003e78:	0112      	lsls	r2, r2, #4
 8003e7a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	491f      	ldr	r1, [pc, #124]	; (8003f04 <HAL_I2C_Init+0x128>)
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	491a      	ldr	r1, [pc, #104]	; (8003f00 <HAL_I2C_Init+0x124>)
 8003e98:	400a      	ands	r2, r1
 8003e9a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69d9      	ldr	r1, [r3, #28]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1a      	ldr	r2, [r3, #32]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2241      	movs	r2, #65	; 0x41
 8003ee0:	2120      	movs	r1, #32
 8003ee2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2242      	movs	r2, #66	; 0x42
 8003eee:	2100      	movs	r1, #0
 8003ef0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b002      	add	sp, #8
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	f0ffffff 	.word	0xf0ffffff
 8003f00:	ffff7fff 	.word	0xffff7fff
 8003f04:	02008000 	.word	0x02008000

08003f08 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b089      	sub	sp, #36	; 0x24
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	0008      	movs	r0, r1
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	0019      	movs	r1, r3
 8003f16:	230a      	movs	r3, #10
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	1c02      	adds	r2, r0, #0
 8003f1c:	801a      	strh	r2, [r3, #0]
 8003f1e:	2308      	movs	r3, #8
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	1c0a      	adds	r2, r1, #0
 8003f24:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2241      	movs	r2, #65	; 0x41
 8003f2a:	5c9b      	ldrb	r3, [r3, r2]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b20      	cmp	r3, #32
 8003f30:	d000      	beq.n	8003f34 <HAL_I2C_Master_Transmit+0x2c>
 8003f32:	e0e7      	b.n	8004104 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2240      	movs	r2, #64	; 0x40
 8003f38:	5c9b      	ldrb	r3, [r3, r2]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_I2C_Master_Transmit+0x3a>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e0e1      	b.n	8004106 <HAL_I2C_Master_Transmit+0x1fe>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2240      	movs	r2, #64	; 0x40
 8003f46:	2101      	movs	r1, #1
 8003f48:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f4a:	f7ff fcc5 	bl	80038d8 <HAL_GetTick>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f52:	2380      	movs	r3, #128	; 0x80
 8003f54:	0219      	lsls	r1, r3, #8
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	2319      	movs	r3, #25
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f000 fa04 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 8003f64:	1e03      	subs	r3, r0, #0
 8003f66:	d001      	beq.n	8003f6c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0cc      	b.n	8004106 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2241      	movs	r2, #65	; 0x41
 8003f70:	2121      	movs	r1, #33	; 0x21
 8003f72:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2242      	movs	r2, #66	; 0x42
 8003f78:	2110      	movs	r1, #16
 8003f7a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	18ba      	adds	r2, r7, r2
 8003f8e:	8812      	ldrh	r2, [r2, #0]
 8003f90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2bff      	cmp	r3, #255	; 0xff
 8003fa0:	d911      	bls.n	8003fc6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	22ff      	movs	r2, #255	; 0xff
 8003fa6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	2380      	movs	r3, #128	; 0x80
 8003fb0:	045c      	lsls	r4, r3, #17
 8003fb2:	230a      	movs	r3, #10
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	8819      	ldrh	r1, [r3, #0]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	4b55      	ldr	r3, [pc, #340]	; (8004110 <HAL_I2C_Master_Transmit+0x208>)
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	0023      	movs	r3, r4
 8003fc0:	f000 fc2e 	bl	8004820 <I2C_TransferConfig>
 8003fc4:	e075      	b.n	80040b2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	049c      	lsls	r4, r3, #18
 8003fda:	230a      	movs	r3, #10
 8003fdc:	18fb      	adds	r3, r7, r3
 8003fde:	8819      	ldrh	r1, [r3, #0]
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	4b4b      	ldr	r3, [pc, #300]	; (8004110 <HAL_I2C_Master_Transmit+0x208>)
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	0023      	movs	r3, r4
 8003fe8:	f000 fc1a 	bl	8004820 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003fec:	e061      	b.n	80040b2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f000 fa07 	bl	8004408 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ffa:	1e03      	subs	r3, r0, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e081      	b.n	8004106 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	781a      	ldrb	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	1c5a      	adds	r2, r3, #1
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d03a      	beq.n	80040b2 <HAL_I2C_Master_Transmit+0x1aa>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004040:	2b00      	cmp	r3, #0
 8004042:	d136      	bne.n	80040b2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	0013      	movs	r3, r2
 800404e:	2200      	movs	r2, #0
 8004050:	2180      	movs	r1, #128	; 0x80
 8004052:	f000 f98b 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 8004056:	1e03      	subs	r3, r0, #0
 8004058:	d001      	beq.n	800405e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e053      	b.n	8004106 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004062:	b29b      	uxth	r3, r3
 8004064:	2bff      	cmp	r3, #255	; 0xff
 8004066:	d911      	bls.n	800408c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	22ff      	movs	r2, #255	; 0xff
 800406c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004072:	b2da      	uxtb	r2, r3
 8004074:	2380      	movs	r3, #128	; 0x80
 8004076:	045c      	lsls	r4, r3, #17
 8004078:	230a      	movs	r3, #10
 800407a:	18fb      	adds	r3, r7, r3
 800407c:	8819      	ldrh	r1, [r3, #0]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	2300      	movs	r3, #0
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	0023      	movs	r3, r4
 8004086:	f000 fbcb 	bl	8004820 <I2C_TransferConfig>
 800408a:	e012      	b.n	80040b2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409a:	b2da      	uxtb	r2, r3
 800409c:	2380      	movs	r3, #128	; 0x80
 800409e:	049c      	lsls	r4, r3, #18
 80040a0:	230a      	movs	r3, #10
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	8819      	ldrh	r1, [r3, #0]
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	2300      	movs	r3, #0
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	0023      	movs	r3, r4
 80040ae:	f000 fbb7 	bl	8004820 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d198      	bne.n	8003fee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	0018      	movs	r0, r3
 80040c4:	f000 f9e6 	bl	8004494 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040c8:	1e03      	subs	r3, r0, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e01a      	b.n	8004106 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2220      	movs	r2, #32
 80040d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	490c      	ldr	r1, [pc, #48]	; (8004114 <HAL_I2C_Master_Transmit+0x20c>)
 80040e4:	400a      	ands	r2, r1
 80040e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2241      	movs	r2, #65	; 0x41
 80040ec:	2120      	movs	r1, #32
 80040ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2242      	movs	r2, #66	; 0x42
 80040f4:	2100      	movs	r1, #0
 80040f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2240      	movs	r2, #64	; 0x40
 80040fc:	2100      	movs	r1, #0
 80040fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	e000      	b.n	8004106 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004104:	2302      	movs	r3, #2
  }
}
 8004106:	0018      	movs	r0, r3
 8004108:	46bd      	mov	sp, r7
 800410a:	b007      	add	sp, #28
 800410c:	bd90      	pop	{r4, r7, pc}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	80002000 	.word	0x80002000
 8004114:	fe00e800 	.word	0xfe00e800

08004118 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b089      	sub	sp, #36	; 0x24
 800411c:	af02      	add	r7, sp, #8
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	0008      	movs	r0, r1
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	0019      	movs	r1, r3
 8004126:	230a      	movs	r3, #10
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	1c02      	adds	r2, r0, #0
 800412c:	801a      	strh	r2, [r3, #0]
 800412e:	2308      	movs	r3, #8
 8004130:	18fb      	adds	r3, r7, r3
 8004132:	1c0a      	adds	r2, r1, #0
 8004134:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2241      	movs	r2, #65	; 0x41
 800413a:	5c9b      	ldrb	r3, [r3, r2]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b20      	cmp	r3, #32
 8004140:	d000      	beq.n	8004144 <HAL_I2C_Master_Receive+0x2c>
 8004142:	e0e8      	b.n	8004316 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2240      	movs	r2, #64	; 0x40
 8004148:	5c9b      	ldrb	r3, [r3, r2]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_I2C_Master_Receive+0x3a>
 800414e:	2302      	movs	r3, #2
 8004150:	e0e2      	b.n	8004318 <HAL_I2C_Master_Receive+0x200>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2240      	movs	r2, #64	; 0x40
 8004156:	2101      	movs	r1, #1
 8004158:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800415a:	f7ff fbbd 	bl	80038d8 <HAL_GetTick>
 800415e:	0003      	movs	r3, r0
 8004160:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004162:	2380      	movs	r3, #128	; 0x80
 8004164:	0219      	lsls	r1, r3, #8
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	2319      	movs	r3, #25
 800416e:	2201      	movs	r2, #1
 8004170:	f000 f8fc 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 8004174:	1e03      	subs	r3, r0, #0
 8004176:	d001      	beq.n	800417c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e0cd      	b.n	8004318 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2241      	movs	r2, #65	; 0x41
 8004180:	2122      	movs	r1, #34	; 0x22
 8004182:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2242      	movs	r2, #66	; 0x42
 8004188:	2110      	movs	r1, #16
 800418a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2208      	movs	r2, #8
 800419c:	18ba      	adds	r2, r7, r2
 800419e:	8812      	ldrh	r2, [r2, #0]
 80041a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2bff      	cmp	r3, #255	; 0xff
 80041b0:	d911      	bls.n	80041d6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	22ff      	movs	r2, #255	; 0xff
 80041b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	2380      	movs	r3, #128	; 0x80
 80041c0:	045c      	lsls	r4, r3, #17
 80041c2:	230a      	movs	r3, #10
 80041c4:	18fb      	adds	r3, r7, r3
 80041c6:	8819      	ldrh	r1, [r3, #0]
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	4b55      	ldr	r3, [pc, #340]	; (8004320 <HAL_I2C_Master_Receive+0x208>)
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	0023      	movs	r3, r4
 80041d0:	f000 fb26 	bl	8004820 <I2C_TransferConfig>
 80041d4:	e076      	b.n	80042c4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	2380      	movs	r3, #128	; 0x80
 80041e8:	049c      	lsls	r4, r3, #18
 80041ea:	230a      	movs	r3, #10
 80041ec:	18fb      	adds	r3, r7, r3
 80041ee:	8819      	ldrh	r1, [r3, #0]
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	4b4b      	ldr	r3, [pc, #300]	; (8004320 <HAL_I2C_Master_Receive+0x208>)
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	0023      	movs	r3, r4
 80041f8:	f000 fb12 	bl	8004820 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80041fc:	e062      	b.n	80042c4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	0018      	movs	r0, r3
 8004206:	f000 f989 	bl	800451c <I2C_WaitOnRXNEFlagUntilTimeout>
 800420a:	1e03      	subs	r3, r0, #0
 800420c:	d001      	beq.n	8004212 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e082      	b.n	8004318 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d03a      	beq.n	80042c4 <HAL_I2C_Master_Receive+0x1ac>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004252:	2b00      	cmp	r3, #0
 8004254:	d136      	bne.n	80042c4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	0013      	movs	r3, r2
 8004260:	2200      	movs	r2, #0
 8004262:	2180      	movs	r1, #128	; 0x80
 8004264:	f000 f882 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 8004268:	1e03      	subs	r3, r0, #0
 800426a:	d001      	beq.n	8004270 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e053      	b.n	8004318 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	2bff      	cmp	r3, #255	; 0xff
 8004278:	d911      	bls.n	800429e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	22ff      	movs	r2, #255	; 0xff
 800427e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004284:	b2da      	uxtb	r2, r3
 8004286:	2380      	movs	r3, #128	; 0x80
 8004288:	045c      	lsls	r4, r3, #17
 800428a:	230a      	movs	r3, #10
 800428c:	18fb      	adds	r3, r7, r3
 800428e:	8819      	ldrh	r1, [r3, #0]
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	2300      	movs	r3, #0
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	0023      	movs	r3, r4
 8004298:	f000 fac2 	bl	8004820 <I2C_TransferConfig>
 800429c:	e012      	b.n	80042c4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	049c      	lsls	r4, r3, #18
 80042b2:	230a      	movs	r3, #10
 80042b4:	18fb      	adds	r3, r7, r3
 80042b6:	8819      	ldrh	r1, [r3, #0]
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	2300      	movs	r3, #0
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	0023      	movs	r3, r4
 80042c0:	f000 faae 	bl	8004820 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d197      	bne.n	80041fe <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	0018      	movs	r0, r3
 80042d6:	f000 f8dd 	bl	8004494 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042da:	1e03      	subs	r3, r0, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e01a      	b.n	8004318 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2220      	movs	r2, #32
 80042e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	490b      	ldr	r1, [pc, #44]	; (8004324 <HAL_I2C_Master_Receive+0x20c>)
 80042f6:	400a      	ands	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2241      	movs	r2, #65	; 0x41
 80042fe:	2120      	movs	r1, #32
 8004300:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2242      	movs	r2, #66	; 0x42
 8004306:	2100      	movs	r1, #0
 8004308:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2240      	movs	r2, #64	; 0x40
 800430e:	2100      	movs	r1, #0
 8004310:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	e000      	b.n	8004318 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004316:	2302      	movs	r3, #2
  }
}
 8004318:	0018      	movs	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	b007      	add	sp, #28
 800431e:	bd90      	pop	{r4, r7, pc}
 8004320:	80002400 	.word	0x80002400
 8004324:	fe00e800 	.word	0xfe00e800

08004328 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	2202      	movs	r2, #2
 8004338:	4013      	ands	r3, r2
 800433a:	2b02      	cmp	r3, #2
 800433c:	d103      	bne.n	8004346 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2200      	movs	r2, #0
 8004344:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	2201      	movs	r2, #1
 800434e:	4013      	ands	r3, r2
 8004350:	2b01      	cmp	r3, #1
 8004352:	d007      	beq.n	8004364 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699a      	ldr	r2, [r3, #24]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2101      	movs	r1, #1
 8004360:	430a      	orrs	r2, r1
 8004362:	619a      	str	r2, [r3, #24]
  }
}
 8004364:	46c0      	nop			; (mov r8, r8)
 8004366:	46bd      	mov	sp, r7
 8004368:	b002      	add	sp, #8
 800436a:	bd80      	pop	{r7, pc}

0800436c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	1dfb      	adds	r3, r7, #7
 800437a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800437c:	e030      	b.n	80043e0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	3301      	adds	r3, #1
 8004382:	d02d      	beq.n	80043e0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004384:	f7ff faa8 	bl	80038d8 <HAL_GetTick>
 8004388:	0002      	movs	r2, r0
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d302      	bcc.n	800439a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d122      	bne.n	80043e0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	4013      	ands	r3, r2
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	425a      	negs	r2, r3
 80043aa:	4153      	adcs	r3, r2
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	001a      	movs	r2, r3
 80043b0:	1dfb      	adds	r3, r7, #7
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d113      	bne.n	80043e0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043bc:	2220      	movs	r2, #32
 80043be:	431a      	orrs	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2241      	movs	r2, #65	; 0x41
 80043c8:	2120      	movs	r1, #32
 80043ca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2242      	movs	r2, #66	; 0x42
 80043d0:	2100      	movs	r1, #0
 80043d2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2240      	movs	r2, #64	; 0x40
 80043d8:	2100      	movs	r1, #0
 80043da:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e00f      	b.n	8004400 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	4013      	ands	r3, r2
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	425a      	negs	r2, r3
 80043f0:	4153      	adcs	r3, r2
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	001a      	movs	r2, r3
 80043f6:	1dfb      	adds	r3, r7, #7
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d0bf      	beq.n	800437e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	0018      	movs	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	b004      	add	sp, #16
 8004406:	bd80      	pop	{r7, pc}

08004408 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004414:	e032      	b.n	800447c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	0018      	movs	r0, r3
 800441e:	f000 f8ff 	bl	8004620 <I2C_IsErrorOccurred>
 8004422:	1e03      	subs	r3, r0, #0
 8004424:	d001      	beq.n	800442a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e030      	b.n	800448c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	3301      	adds	r3, #1
 800442e:	d025      	beq.n	800447c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004430:	f7ff fa52 	bl	80038d8 <HAL_GetTick>
 8004434:	0002      	movs	r2, r0
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	429a      	cmp	r2, r3
 800443e:	d302      	bcc.n	8004446 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d11a      	bne.n	800447c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	2202      	movs	r2, #2
 800444e:	4013      	ands	r3, r2
 8004450:	2b02      	cmp	r3, #2
 8004452:	d013      	beq.n	800447c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004458:	2220      	movs	r2, #32
 800445a:	431a      	orrs	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2241      	movs	r2, #65	; 0x41
 8004464:	2120      	movs	r1, #32
 8004466:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2242      	movs	r2, #66	; 0x42
 800446c:	2100      	movs	r1, #0
 800446e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2240      	movs	r2, #64	; 0x40
 8004474:	2100      	movs	r1, #0
 8004476:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e007      	b.n	800448c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	2202      	movs	r2, #2
 8004484:	4013      	ands	r3, r2
 8004486:	2b02      	cmp	r3, #2
 8004488:	d1c5      	bne.n	8004416 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	0018      	movs	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	b004      	add	sp, #16
 8004492:	bd80      	pop	{r7, pc}

08004494 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044a0:	e02f      	b.n	8004502 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	0018      	movs	r0, r3
 80044aa:	f000 f8b9 	bl	8004620 <I2C_IsErrorOccurred>
 80044ae:	1e03      	subs	r3, r0, #0
 80044b0:	d001      	beq.n	80044b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e02d      	b.n	8004512 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b6:	f7ff fa0f 	bl	80038d8 <HAL_GetTick>
 80044ba:	0002      	movs	r2, r0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d302      	bcc.n	80044cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d11a      	bne.n	8004502 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	2220      	movs	r2, #32
 80044d4:	4013      	ands	r3, r2
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d013      	beq.n	8004502 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	2220      	movs	r2, #32
 80044e0:	431a      	orrs	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2241      	movs	r2, #65	; 0x41
 80044ea:	2120      	movs	r1, #32
 80044ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2242      	movs	r2, #66	; 0x42
 80044f2:	2100      	movs	r1, #0
 80044f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2240      	movs	r2, #64	; 0x40
 80044fa:	2100      	movs	r1, #0
 80044fc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e007      	b.n	8004512 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	2220      	movs	r2, #32
 800450a:	4013      	ands	r3, r2
 800450c:	2b20      	cmp	r3, #32
 800450e:	d1c8      	bne.n	80044a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	0018      	movs	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	b004      	add	sp, #16
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004528:	e06b      	b.n	8004602 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	0018      	movs	r0, r3
 8004532:	f000 f875 	bl	8004620 <I2C_IsErrorOccurred>
 8004536:	1e03      	subs	r3, r0, #0
 8004538:	d001      	beq.n	800453e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e069      	b.n	8004612 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2220      	movs	r2, #32
 8004546:	4013      	ands	r3, r2
 8004548:	2b20      	cmp	r3, #32
 800454a:	d138      	bne.n	80045be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	2204      	movs	r2, #4
 8004554:	4013      	ands	r3, r2
 8004556:	2b04      	cmp	r3, #4
 8004558:	d105      	bne.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	e055      	b.n	8004612 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	2210      	movs	r2, #16
 800456e:	4013      	ands	r3, r2
 8004570:	2b10      	cmp	r3, #16
 8004572:	d107      	bne.n	8004584 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2210      	movs	r2, #16
 800457a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2204      	movs	r2, #4
 8004580:	645a      	str	r2, [r3, #68]	; 0x44
 8004582:	e002      	b.n	800458a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2220      	movs	r2, #32
 8004590:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	491f      	ldr	r1, [pc, #124]	; (800461c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800459e:	400a      	ands	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2241      	movs	r2, #65	; 0x41
 80045a6:	2120      	movs	r1, #32
 80045a8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2242      	movs	r2, #66	; 0x42
 80045ae:	2100      	movs	r1, #0
 80045b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2240      	movs	r2, #64	; 0x40
 80045b6:	2100      	movs	r1, #0
 80045b8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e029      	b.n	8004612 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045be:	f7ff f98b 	bl	80038d8 <HAL_GetTick>
 80045c2:	0002      	movs	r2, r0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d302      	bcc.n	80045d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d116      	bne.n	8004602 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	2204      	movs	r2, #4
 80045dc:	4013      	ands	r3, r2
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d00f      	beq.n	8004602 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	2220      	movs	r2, #32
 80045e8:	431a      	orrs	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2241      	movs	r2, #65	; 0x41
 80045f2:	2120      	movs	r1, #32
 80045f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2240      	movs	r2, #64	; 0x40
 80045fa:	2100      	movs	r1, #0
 80045fc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e007      	b.n	8004612 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	2204      	movs	r2, #4
 800460a:	4013      	ands	r3, r2
 800460c:	2b04      	cmp	r3, #4
 800460e:	d18c      	bne.n	800452a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	0018      	movs	r0, r3
 8004614:	46bd      	mov	sp, r7
 8004616:	b004      	add	sp, #16
 8004618:	bd80      	pop	{r7, pc}
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	fe00e800 	.word	0xfe00e800

08004620 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b08b      	sub	sp, #44	; 0x2c
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800462c:	2327      	movs	r3, #39	; 0x27
 800462e:	18fb      	adds	r3, r7, r3
 8004630:	2200      	movs	r2, #0
 8004632:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	2210      	movs	r2, #16
 8004648:	4013      	ands	r3, r2
 800464a:	d100      	bne.n	800464e <I2C_IsErrorOccurred+0x2e>
 800464c:	e082      	b.n	8004754 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2210      	movs	r2, #16
 8004654:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004656:	e060      	b.n	800471a <I2C_IsErrorOccurred+0xfa>
 8004658:	2427      	movs	r4, #39	; 0x27
 800465a:	193b      	adds	r3, r7, r4
 800465c:	193a      	adds	r2, r7, r4
 800465e:	7812      	ldrb	r2, [r2, #0]
 8004660:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	3301      	adds	r3, #1
 8004666:	d058      	beq.n	800471a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004668:	f7ff f936 	bl	80038d8 <HAL_GetTick>
 800466c:	0002      	movs	r2, r0
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	429a      	cmp	r2, r3
 8004676:	d306      	bcc.n	8004686 <I2C_IsErrorOccurred+0x66>
 8004678:	193b      	adds	r3, r7, r4
 800467a:	193a      	adds	r2, r7, r4
 800467c:	7812      	ldrb	r2, [r2, #0]
 800467e:	701a      	strb	r2, [r3, #0]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d149      	bne.n	800471a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	2380      	movs	r3, #128	; 0x80
 800468e:	01db      	lsls	r3, r3, #7
 8004690:	4013      	ands	r3, r2
 8004692:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004694:	2013      	movs	r0, #19
 8004696:	183b      	adds	r3, r7, r0
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	2142      	movs	r1, #66	; 0x42
 800469c:	5c52      	ldrb	r2, [r2, r1]
 800469e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	2380      	movs	r3, #128	; 0x80
 80046a8:	021b      	lsls	r3, r3, #8
 80046aa:	401a      	ands	r2, r3
 80046ac:	2380      	movs	r3, #128	; 0x80
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d126      	bne.n	8004702 <I2C_IsErrorOccurred+0xe2>
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	01db      	lsls	r3, r3, #7
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d021      	beq.n	8004702 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80046be:	183b      	adds	r3, r7, r0
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	d01d      	beq.n	8004702 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2180      	movs	r1, #128	; 0x80
 80046d2:	01c9      	lsls	r1, r1, #7
 80046d4:	430a      	orrs	r2, r1
 80046d6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80046d8:	f7ff f8fe 	bl	80038d8 <HAL_GetTick>
 80046dc:	0003      	movs	r3, r0
 80046de:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046e0:	e00f      	b.n	8004702 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046e2:	f7ff f8f9 	bl	80038d8 <HAL_GetTick>
 80046e6:	0002      	movs	r2, r0
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b19      	cmp	r3, #25
 80046ee:	d908      	bls.n	8004702 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	2220      	movs	r2, #32
 80046f4:	4313      	orrs	r3, r2
 80046f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80046f8:	2327      	movs	r3, #39	; 0x27
 80046fa:	18fb      	adds	r3, r7, r3
 80046fc:	2201      	movs	r2, #1
 80046fe:	701a      	strb	r2, [r3, #0]

              break;
 8004700:	e00b      	b.n	800471a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	2220      	movs	r2, #32
 800470a:	4013      	ands	r3, r2
 800470c:	2127      	movs	r1, #39	; 0x27
 800470e:	187a      	adds	r2, r7, r1
 8004710:	1879      	adds	r1, r7, r1
 8004712:	7809      	ldrb	r1, [r1, #0]
 8004714:	7011      	strb	r1, [r2, #0]
 8004716:	2b20      	cmp	r3, #32
 8004718:	d1e3      	bne.n	80046e2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	2220      	movs	r2, #32
 8004722:	4013      	ands	r3, r2
 8004724:	2b20      	cmp	r3, #32
 8004726:	d004      	beq.n	8004732 <I2C_IsErrorOccurred+0x112>
 8004728:	2327      	movs	r3, #39	; 0x27
 800472a:	18fb      	adds	r3, r7, r3
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d092      	beq.n	8004658 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004732:	2327      	movs	r3, #39	; 0x27
 8004734:	18fb      	adds	r3, r7, r3
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d103      	bne.n	8004744 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2220      	movs	r2, #32
 8004742:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	2204      	movs	r2, #4
 8004748:	4313      	orrs	r3, r2
 800474a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800474c:	2327      	movs	r3, #39	; 0x27
 800474e:	18fb      	adds	r3, r7, r3
 8004750:	2201      	movs	r2, #1
 8004752:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	2380      	movs	r3, #128	; 0x80
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	4013      	ands	r3, r2
 8004764:	d00c      	beq.n	8004780 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	2201      	movs	r2, #1
 800476a:	4313      	orrs	r3, r2
 800476c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2280      	movs	r2, #128	; 0x80
 8004774:	0052      	lsls	r2, r2, #1
 8004776:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004778:	2327      	movs	r3, #39	; 0x27
 800477a:	18fb      	adds	r3, r7, r3
 800477c:	2201      	movs	r2, #1
 800477e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	2380      	movs	r3, #128	; 0x80
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	4013      	ands	r3, r2
 8004788:	d00c      	beq.n	80047a4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	2208      	movs	r2, #8
 800478e:	4313      	orrs	r3, r2
 8004790:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2280      	movs	r2, #128	; 0x80
 8004798:	00d2      	lsls	r2, r2, #3
 800479a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800479c:	2327      	movs	r3, #39	; 0x27
 800479e:	18fb      	adds	r3, r7, r3
 80047a0:	2201      	movs	r2, #1
 80047a2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	2380      	movs	r3, #128	; 0x80
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4013      	ands	r3, r2
 80047ac:	d00c      	beq.n	80047c8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	2202      	movs	r2, #2
 80047b2:	4313      	orrs	r3, r2
 80047b4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2280      	movs	r2, #128	; 0x80
 80047bc:	0092      	lsls	r2, r2, #2
 80047be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047c0:	2327      	movs	r3, #39	; 0x27
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	2201      	movs	r2, #1
 80047c6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80047c8:	2327      	movs	r3, #39	; 0x27
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d01d      	beq.n	800480e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	0018      	movs	r0, r3
 80047d6:	f7ff fda7 	bl	8004328 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	490d      	ldr	r1, [pc, #52]	; (800481c <I2C_IsErrorOccurred+0x1fc>)
 80047e6:	400a      	ands	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2241      	movs	r2, #65	; 0x41
 80047fa:	2120      	movs	r1, #32
 80047fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2242      	movs	r2, #66	; 0x42
 8004802:	2100      	movs	r1, #0
 8004804:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2240      	movs	r2, #64	; 0x40
 800480a:	2100      	movs	r1, #0
 800480c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800480e:	2327      	movs	r3, #39	; 0x27
 8004810:	18fb      	adds	r3, r7, r3
 8004812:	781b      	ldrb	r3, [r3, #0]
}
 8004814:	0018      	movs	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	b00b      	add	sp, #44	; 0x2c
 800481a:	bd90      	pop	{r4, r7, pc}
 800481c:	fe00e800 	.word	0xfe00e800

08004820 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004820:	b590      	push	{r4, r7, lr}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	0008      	movs	r0, r1
 800482a:	0011      	movs	r1, r2
 800482c:	607b      	str	r3, [r7, #4]
 800482e:	240a      	movs	r4, #10
 8004830:	193b      	adds	r3, r7, r4
 8004832:	1c02      	adds	r2, r0, #0
 8004834:	801a      	strh	r2, [r3, #0]
 8004836:	2009      	movs	r0, #9
 8004838:	183b      	adds	r3, r7, r0
 800483a:	1c0a      	adds	r2, r1, #0
 800483c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800483e:	193b      	adds	r3, r7, r4
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	059b      	lsls	r3, r3, #22
 8004844:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004846:	183b      	adds	r3, r7, r0
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	0419      	lsls	r1, r3, #16
 800484c:	23ff      	movs	r3, #255	; 0xff
 800484e:	041b      	lsls	r3, r3, #16
 8004850:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004852:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	4313      	orrs	r3, r2
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	085b      	lsrs	r3, r3, #1
 8004860:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800486a:	0d51      	lsrs	r1, r2, #21
 800486c:	2280      	movs	r2, #128	; 0x80
 800486e:	00d2      	lsls	r2, r2, #3
 8004870:	400a      	ands	r2, r1
 8004872:	4907      	ldr	r1, [pc, #28]	; (8004890 <I2C_TransferConfig+0x70>)
 8004874:	430a      	orrs	r2, r1
 8004876:	43d2      	mvns	r2, r2
 8004878:	401a      	ands	r2, r3
 800487a:	0011      	movs	r1, r2
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	46bd      	mov	sp, r7
 800488a:	b007      	add	sp, #28
 800488c:	bd90      	pop	{r4, r7, pc}
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	03ff63ff 	.word	0x03ff63ff

08004894 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2241      	movs	r2, #65	; 0x41
 80048a2:	5c9b      	ldrb	r3, [r3, r2]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b20      	cmp	r3, #32
 80048a8:	d138      	bne.n	800491c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2240      	movs	r2, #64	; 0x40
 80048ae:	5c9b      	ldrb	r3, [r3, r2]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e032      	b.n	800491e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2240      	movs	r2, #64	; 0x40
 80048bc:	2101      	movs	r1, #1
 80048be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2241      	movs	r2, #65	; 0x41
 80048c4:	2124      	movs	r1, #36	; 0x24
 80048c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2101      	movs	r1, #1
 80048d4:	438a      	bics	r2, r1
 80048d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4911      	ldr	r1, [pc, #68]	; (8004928 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80048e4:	400a      	ands	r2, r1
 80048e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6819      	ldr	r1, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2101      	movs	r1, #1
 8004904:	430a      	orrs	r2, r1
 8004906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2241      	movs	r2, #65	; 0x41
 800490c:	2120      	movs	r1, #32
 800490e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2240      	movs	r2, #64	; 0x40
 8004914:	2100      	movs	r1, #0
 8004916:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004918:	2300      	movs	r3, #0
 800491a:	e000      	b.n	800491e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800491c:	2302      	movs	r3, #2
  }
}
 800491e:	0018      	movs	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	b002      	add	sp, #8
 8004924:	bd80      	pop	{r7, pc}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	ffffefff 	.word	0xffffefff

0800492c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2241      	movs	r2, #65	; 0x41
 800493a:	5c9b      	ldrb	r3, [r3, r2]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b20      	cmp	r3, #32
 8004940:	d139      	bne.n	80049b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2240      	movs	r2, #64	; 0x40
 8004946:	5c9b      	ldrb	r3, [r3, r2]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800494c:	2302      	movs	r3, #2
 800494e:	e033      	b.n	80049b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2240      	movs	r2, #64	; 0x40
 8004954:	2101      	movs	r1, #1
 8004956:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2241      	movs	r2, #65	; 0x41
 800495c:	2124      	movs	r1, #36	; 0x24
 800495e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2101      	movs	r1, #1
 800496c:	438a      	bics	r2, r1
 800496e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4a11      	ldr	r2, [pc, #68]	; (80049c0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800497c:	4013      	ands	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	021b      	lsls	r3, r3, #8
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2101      	movs	r1, #1
 800499e:	430a      	orrs	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2241      	movs	r2, #65	; 0x41
 80049a6:	2120      	movs	r1, #32
 80049a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2240      	movs	r2, #64	; 0x40
 80049ae:	2100      	movs	r1, #0
 80049b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e000      	b.n	80049b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049b6:	2302      	movs	r3, #2
  }
}
 80049b8:	0018      	movs	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b004      	add	sp, #16
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	fffff0ff 	.word	0xfffff0ff

080049c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c4:	b5b0      	push	{r4, r5, r7, lr}
 80049c6:	b08a      	sub	sp, #40	; 0x28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d102      	bne.n	80049d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f000 fbaf 	bl	8005136 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049d8:	4bcf      	ldr	r3, [pc, #828]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	220c      	movs	r2, #12
 80049de:	4013      	ands	r3, r2
 80049e0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049e2:	4bcd      	ldr	r3, [pc, #820]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	2380      	movs	r3, #128	; 0x80
 80049e8:	025b      	lsls	r3, r3, #9
 80049ea:	4013      	ands	r3, r2
 80049ec:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2201      	movs	r2, #1
 80049f4:	4013      	ands	r3, r2
 80049f6:	d100      	bne.n	80049fa <HAL_RCC_OscConfig+0x36>
 80049f8:	e07e      	b.n	8004af8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d007      	beq.n	8004a10 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	2b0c      	cmp	r3, #12
 8004a04:	d112      	bne.n	8004a2c <HAL_RCC_OscConfig+0x68>
 8004a06:	69fa      	ldr	r2, [r7, #28]
 8004a08:	2380      	movs	r3, #128	; 0x80
 8004a0a:	025b      	lsls	r3, r3, #9
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d10d      	bne.n	8004a2c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a10:	4bc1      	ldr	r3, [pc, #772]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	029b      	lsls	r3, r3, #10
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d100      	bne.n	8004a1e <HAL_RCC_OscConfig+0x5a>
 8004a1c:	e06b      	b.n	8004af6 <HAL_RCC_OscConfig+0x132>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d167      	bne.n	8004af6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f000 fb85 	bl	8005136 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	2380      	movs	r3, #128	; 0x80
 8004a32:	025b      	lsls	r3, r3, #9
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d107      	bne.n	8004a48 <HAL_RCC_OscConfig+0x84>
 8004a38:	4bb7      	ldr	r3, [pc, #732]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	4bb6      	ldr	r3, [pc, #728]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004a3e:	2180      	movs	r1, #128	; 0x80
 8004a40:	0249      	lsls	r1, r1, #9
 8004a42:	430a      	orrs	r2, r1
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	e027      	b.n	8004a98 <HAL_RCC_OscConfig+0xd4>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	23a0      	movs	r3, #160	; 0xa0
 8004a4e:	02db      	lsls	r3, r3, #11
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d10e      	bne.n	8004a72 <HAL_RCC_OscConfig+0xae>
 8004a54:	4bb0      	ldr	r3, [pc, #704]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	4baf      	ldr	r3, [pc, #700]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004a5a:	2180      	movs	r1, #128	; 0x80
 8004a5c:	02c9      	lsls	r1, r1, #11
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	4bad      	ldr	r3, [pc, #692]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4bac      	ldr	r3, [pc, #688]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004a68:	2180      	movs	r1, #128	; 0x80
 8004a6a:	0249      	lsls	r1, r1, #9
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	e012      	b.n	8004a98 <HAL_RCC_OscConfig+0xd4>
 8004a72:	4ba9      	ldr	r3, [pc, #676]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	4ba8      	ldr	r3, [pc, #672]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004a78:	49a8      	ldr	r1, [pc, #672]	; (8004d1c <HAL_RCC_OscConfig+0x358>)
 8004a7a:	400a      	ands	r2, r1
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	4ba6      	ldr	r3, [pc, #664]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	2380      	movs	r3, #128	; 0x80
 8004a84:	025b      	lsls	r3, r3, #9
 8004a86:	4013      	ands	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4ba2      	ldr	r3, [pc, #648]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4ba1      	ldr	r3, [pc, #644]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004a92:	49a3      	ldr	r1, [pc, #652]	; (8004d20 <HAL_RCC_OscConfig+0x35c>)
 8004a94:	400a      	ands	r2, r1
 8004a96:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d015      	beq.n	8004acc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa0:	f7fe ff1a 	bl	80038d8 <HAL_GetTick>
 8004aa4:	0003      	movs	r3, r0
 8004aa6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004aa8:	e009      	b.n	8004abe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aaa:	f7fe ff15 	bl	80038d8 <HAL_GetTick>
 8004aae:	0002      	movs	r2, r0
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b64      	cmp	r3, #100	; 0x64
 8004ab6:	d902      	bls.n	8004abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	f000 fb3c 	bl	8005136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004abe:	4b96      	ldr	r3, [pc, #600]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	2380      	movs	r3, #128	; 0x80
 8004ac4:	029b      	lsls	r3, r3, #10
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d0ef      	beq.n	8004aaa <HAL_RCC_OscConfig+0xe6>
 8004aca:	e015      	b.n	8004af8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fe ff04 	bl	80038d8 <HAL_GetTick>
 8004ad0:	0003      	movs	r3, r0
 8004ad2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ad6:	f7fe feff 	bl	80038d8 <HAL_GetTick>
 8004ada:	0002      	movs	r2, r0
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b64      	cmp	r3, #100	; 0x64
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e326      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ae8:	4b8b      	ldr	r3, [pc, #556]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	029b      	lsls	r3, r3, #10
 8004af0:	4013      	ands	r3, r2
 8004af2:	d1f0      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x112>
 8004af4:	e000      	b.n	8004af8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2202      	movs	r2, #2
 8004afe:	4013      	ands	r3, r2
 8004b00:	d100      	bne.n	8004b04 <HAL_RCC_OscConfig+0x140>
 8004b02:	e08b      	b.n	8004c1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d005      	beq.n	8004b1c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	2b0c      	cmp	r3, #12
 8004b14:	d13e      	bne.n	8004b94 <HAL_RCC_OscConfig+0x1d0>
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d13b      	bne.n	8004b94 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004b1c:	4b7e      	ldr	r3, [pc, #504]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2204      	movs	r2, #4
 8004b22:	4013      	ands	r3, r2
 8004b24:	d004      	beq.n	8004b30 <HAL_RCC_OscConfig+0x16c>
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e302      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b30:	4b79      	ldr	r3, [pc, #484]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	4a7b      	ldr	r2, [pc, #492]	; (8004d24 <HAL_RCC_OscConfig+0x360>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	0019      	movs	r1, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	021a      	lsls	r2, r3, #8
 8004b40:	4b75      	ldr	r3, [pc, #468]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004b46:	4b74      	ldr	r3, [pc, #464]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2209      	movs	r2, #9
 8004b4c:	4393      	bics	r3, r2
 8004b4e:	0019      	movs	r1, r3
 8004b50:	4b71      	ldr	r3, [pc, #452]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b58:	f000 fc40 	bl	80053dc <HAL_RCC_GetSysClockFreq>
 8004b5c:	0001      	movs	r1, r0
 8004b5e:	4b6e      	ldr	r3, [pc, #440]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	091b      	lsrs	r3, r3, #4
 8004b64:	220f      	movs	r2, #15
 8004b66:	4013      	ands	r3, r2
 8004b68:	4a6f      	ldr	r2, [pc, #444]	; (8004d28 <HAL_RCC_OscConfig+0x364>)
 8004b6a:	5cd3      	ldrb	r3, [r2, r3]
 8004b6c:	000a      	movs	r2, r1
 8004b6e:	40da      	lsrs	r2, r3
 8004b70:	4b6e      	ldr	r3, [pc, #440]	; (8004d2c <HAL_RCC_OscConfig+0x368>)
 8004b72:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004b74:	4b6e      	ldr	r3, [pc, #440]	; (8004d30 <HAL_RCC_OscConfig+0x36c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2513      	movs	r5, #19
 8004b7a:	197c      	adds	r4, r7, r5
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f7fe fe65 	bl	800384c <HAL_InitTick>
 8004b82:	0003      	movs	r3, r0
 8004b84:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004b86:	197b      	adds	r3, r7, r5
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d046      	beq.n	8004c1c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8004b8e:	197b      	adds	r3, r7, r5
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	e2d0      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d027      	beq.n	8004bea <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004b9a:	4b5f      	ldr	r3, [pc, #380]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2209      	movs	r2, #9
 8004ba0:	4393      	bics	r3, r2
 8004ba2:	0019      	movs	r1, r3
 8004ba4:	4b5c      	ldr	r3, [pc, #368]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bac:	f7fe fe94 	bl	80038d8 <HAL_GetTick>
 8004bb0:	0003      	movs	r3, r0
 8004bb2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bb6:	f7fe fe8f 	bl	80038d8 <HAL_GetTick>
 8004bba:	0002      	movs	r2, r0
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e2b6      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bc8:	4b53      	ldr	r3, [pc, #332]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2204      	movs	r2, #4
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d0f1      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd2:	4b51      	ldr	r3, [pc, #324]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	4a53      	ldr	r2, [pc, #332]	; (8004d24 <HAL_RCC_OscConfig+0x360>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	0019      	movs	r1, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	021a      	lsls	r2, r3, #8
 8004be2:	4b4d      	ldr	r3, [pc, #308]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004be4:	430a      	orrs	r2, r1
 8004be6:	605a      	str	r2, [r3, #4]
 8004be8:	e018      	b.n	8004c1c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bea:	4b4b      	ldr	r3, [pc, #300]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4b4a      	ldr	r3, [pc, #296]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	438a      	bics	r2, r1
 8004bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf6:	f7fe fe6f 	bl	80038d8 <HAL_GetTick>
 8004bfa:	0003      	movs	r3, r0
 8004bfc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c00:	f7fe fe6a 	bl	80038d8 <HAL_GetTick>
 8004c04:	0002      	movs	r2, r0
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e291      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c12:	4b41      	ldr	r3, [pc, #260]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2204      	movs	r2, #4
 8004c18:	4013      	ands	r3, r2
 8004c1a:	d1f1      	bne.n	8004c00 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2210      	movs	r2, #16
 8004c22:	4013      	ands	r3, r2
 8004c24:	d100      	bne.n	8004c28 <HAL_RCC_OscConfig+0x264>
 8004c26:	e0a1      	b.n	8004d6c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d140      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c2e:	4b3a      	ldr	r3, [pc, #232]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	2380      	movs	r3, #128	; 0x80
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4013      	ands	r3, r2
 8004c38:	d005      	beq.n	8004c46 <HAL_RCC_OscConfig+0x282>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e277      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c46:	4b34      	ldr	r3, [pc, #208]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4a3a      	ldr	r2, [pc, #232]	; (8004d34 <HAL_RCC_OscConfig+0x370>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	0019      	movs	r1, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c54:	4b30      	ldr	r3, [pc, #192]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004c56:	430a      	orrs	r2, r1
 8004c58:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c5a:	4b2f      	ldr	r3, [pc, #188]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	0a19      	lsrs	r1, r3, #8
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	061a      	lsls	r2, r3, #24
 8004c68:	4b2b      	ldr	r3, [pc, #172]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	0b5b      	lsrs	r3, r3, #13
 8004c74:	3301      	adds	r3, #1
 8004c76:	2280      	movs	r2, #128	; 0x80
 8004c78:	0212      	lsls	r2, r2, #8
 8004c7a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004c7c:	4b26      	ldr	r3, [pc, #152]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	091b      	lsrs	r3, r3, #4
 8004c82:	210f      	movs	r1, #15
 8004c84:	400b      	ands	r3, r1
 8004c86:	4928      	ldr	r1, [pc, #160]	; (8004d28 <HAL_RCC_OscConfig+0x364>)
 8004c88:	5ccb      	ldrb	r3, [r1, r3]
 8004c8a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004c8c:	4b27      	ldr	r3, [pc, #156]	; (8004d2c <HAL_RCC_OscConfig+0x368>)
 8004c8e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004c90:	4b27      	ldr	r3, [pc, #156]	; (8004d30 <HAL_RCC_OscConfig+0x36c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2513      	movs	r5, #19
 8004c96:	197c      	adds	r4, r7, r5
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f7fe fdd7 	bl	800384c <HAL_InitTick>
 8004c9e:	0003      	movs	r3, r0
 8004ca0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004ca2:	197b      	adds	r3, r7, r5
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d060      	beq.n	8004d6c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8004caa:	197b      	adds	r3, r7, r5
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	e242      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d03f      	beq.n	8004d38 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cb8:	4b17      	ldr	r3, [pc, #92]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	4b16      	ldr	r3, [pc, #88]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004cbe:	2180      	movs	r1, #128	; 0x80
 8004cc0:	0049      	lsls	r1, r1, #1
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc6:	f7fe fe07 	bl	80038d8 <HAL_GetTick>
 8004cca:	0003      	movs	r3, r0
 8004ccc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cd0:	f7fe fe02 	bl	80038d8 <HAL_GetTick>
 8004cd4:	0002      	movs	r2, r0
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e229      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004ce2:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	2380      	movs	r3, #128	; 0x80
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4013      	ands	r3, r2
 8004cec:	d0f0      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cee:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	4a10      	ldr	r2, [pc, #64]	; (8004d34 <HAL_RCC_OscConfig+0x370>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	0019      	movs	r1, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cfc:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d02:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	0a19      	lsrs	r1, r3, #8
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	061a      	lsls	r2, r3, #24
 8004d10:	4b01      	ldr	r3, [pc, #4]	; (8004d18 <HAL_RCC_OscConfig+0x354>)
 8004d12:	430a      	orrs	r2, r1
 8004d14:	605a      	str	r2, [r3, #4]
 8004d16:	e029      	b.n	8004d6c <HAL_RCC_OscConfig+0x3a8>
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	fffeffff 	.word	0xfffeffff
 8004d20:	fffbffff 	.word	0xfffbffff
 8004d24:	ffffe0ff 	.word	0xffffe0ff
 8004d28:	0800819c 	.word	0x0800819c
 8004d2c:	20000000 	.word	0x20000000
 8004d30:	20000004 	.word	0x20000004
 8004d34:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d38:	4bbd      	ldr	r3, [pc, #756]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	4bbc      	ldr	r3, [pc, #752]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004d3e:	49bd      	ldr	r1, [pc, #756]	; (8005034 <HAL_RCC_OscConfig+0x670>)
 8004d40:	400a      	ands	r2, r1
 8004d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fe fdc8 	bl	80038d8 <HAL_GetTick>
 8004d48:	0003      	movs	r3, r0
 8004d4a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d4e:	f7fe fdc3 	bl	80038d8 <HAL_GetTick>
 8004d52:	0002      	movs	r2, r0
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e1ea      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d60:	4bb3      	ldr	r3, [pc, #716]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	2380      	movs	r3, #128	; 0x80
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d1f0      	bne.n	8004d4e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2208      	movs	r2, #8
 8004d72:	4013      	ands	r3, r2
 8004d74:	d036      	beq.n	8004de4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d019      	beq.n	8004db2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d7e:	4bac      	ldr	r3, [pc, #688]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004d80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d82:	4bab      	ldr	r3, [pc, #684]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004d84:	2101      	movs	r1, #1
 8004d86:	430a      	orrs	r2, r1
 8004d88:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d8a:	f7fe fda5 	bl	80038d8 <HAL_GetTick>
 8004d8e:	0003      	movs	r3, r0
 8004d90:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d94:	f7fe fda0 	bl	80038d8 <HAL_GetTick>
 8004d98:	0002      	movs	r2, r0
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e1c7      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004da6:	4ba2      	ldr	r3, [pc, #648]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004daa:	2202      	movs	r2, #2
 8004dac:	4013      	ands	r3, r2
 8004dae:	d0f1      	beq.n	8004d94 <HAL_RCC_OscConfig+0x3d0>
 8004db0:	e018      	b.n	8004de4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004db2:	4b9f      	ldr	r3, [pc, #636]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004db4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004db6:	4b9e      	ldr	r3, [pc, #632]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004db8:	2101      	movs	r1, #1
 8004dba:	438a      	bics	r2, r1
 8004dbc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dbe:	f7fe fd8b 	bl	80038d8 <HAL_GetTick>
 8004dc2:	0003      	movs	r3, r0
 8004dc4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dc8:	f7fe fd86 	bl	80038d8 <HAL_GetTick>
 8004dcc:	0002      	movs	r2, r0
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e1ad      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dda:	4b95      	ldr	r3, [pc, #596]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dde:	2202      	movs	r2, #2
 8004de0:	4013      	ands	r3, r2
 8004de2:	d1f1      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2204      	movs	r2, #4
 8004dea:	4013      	ands	r3, r2
 8004dec:	d100      	bne.n	8004df0 <HAL_RCC_OscConfig+0x42c>
 8004dee:	e0ae      	b.n	8004f4e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004df0:	2027      	movs	r0, #39	; 0x27
 8004df2:	183b      	adds	r3, r7, r0
 8004df4:	2200      	movs	r2, #0
 8004df6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df8:	4b8d      	ldr	r3, [pc, #564]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dfc:	2380      	movs	r3, #128	; 0x80
 8004dfe:	055b      	lsls	r3, r3, #21
 8004e00:	4013      	ands	r3, r2
 8004e02:	d109      	bne.n	8004e18 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e04:	4b8a      	ldr	r3, [pc, #552]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e08:	4b89      	ldr	r3, [pc, #548]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004e0a:	2180      	movs	r1, #128	; 0x80
 8004e0c:	0549      	lsls	r1, r1, #21
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004e12:	183b      	adds	r3, r7, r0
 8004e14:	2201      	movs	r2, #1
 8004e16:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e18:	4b87      	ldr	r3, [pc, #540]	; (8005038 <HAL_RCC_OscConfig+0x674>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	2380      	movs	r3, #128	; 0x80
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	4013      	ands	r3, r2
 8004e22:	d11a      	bne.n	8004e5a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e24:	4b84      	ldr	r3, [pc, #528]	; (8005038 <HAL_RCC_OscConfig+0x674>)
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	4b83      	ldr	r3, [pc, #524]	; (8005038 <HAL_RCC_OscConfig+0x674>)
 8004e2a:	2180      	movs	r1, #128	; 0x80
 8004e2c:	0049      	lsls	r1, r1, #1
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e32:	f7fe fd51 	bl	80038d8 <HAL_GetTick>
 8004e36:	0003      	movs	r3, r0
 8004e38:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3c:	f7fe fd4c 	bl	80038d8 <HAL_GetTick>
 8004e40:	0002      	movs	r2, r0
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b64      	cmp	r3, #100	; 0x64
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e173      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4e:	4b7a      	ldr	r3, [pc, #488]	; (8005038 <HAL_RCC_OscConfig+0x674>)
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	4013      	ands	r3, r2
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	2380      	movs	r3, #128	; 0x80
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d107      	bne.n	8004e76 <HAL_RCC_OscConfig+0x4b2>
 8004e66:	4b72      	ldr	r3, [pc, #456]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004e68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e6a:	4b71      	ldr	r3, [pc, #452]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004e6c:	2180      	movs	r1, #128	; 0x80
 8004e6e:	0049      	lsls	r1, r1, #1
 8004e70:	430a      	orrs	r2, r1
 8004e72:	651a      	str	r2, [r3, #80]	; 0x50
 8004e74:	e031      	b.n	8004eda <HAL_RCC_OscConfig+0x516>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10c      	bne.n	8004e98 <HAL_RCC_OscConfig+0x4d4>
 8004e7e:	4b6c      	ldr	r3, [pc, #432]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004e80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e82:	4b6b      	ldr	r3, [pc, #428]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004e84:	496b      	ldr	r1, [pc, #428]	; (8005034 <HAL_RCC_OscConfig+0x670>)
 8004e86:	400a      	ands	r2, r1
 8004e88:	651a      	str	r2, [r3, #80]	; 0x50
 8004e8a:	4b69      	ldr	r3, [pc, #420]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004e8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e8e:	4b68      	ldr	r3, [pc, #416]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004e90:	496a      	ldr	r1, [pc, #424]	; (800503c <HAL_RCC_OscConfig+0x678>)
 8004e92:	400a      	ands	r2, r1
 8004e94:	651a      	str	r2, [r3, #80]	; 0x50
 8004e96:	e020      	b.n	8004eda <HAL_RCC_OscConfig+0x516>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	23a0      	movs	r3, #160	; 0xa0
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d10e      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x4fe>
 8004ea4:	4b62      	ldr	r3, [pc, #392]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004ea6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ea8:	4b61      	ldr	r3, [pc, #388]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004eaa:	2180      	movs	r1, #128	; 0x80
 8004eac:	00c9      	lsls	r1, r1, #3
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	651a      	str	r2, [r3, #80]	; 0x50
 8004eb2:	4b5f      	ldr	r3, [pc, #380]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004eb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004eb6:	4b5e      	ldr	r3, [pc, #376]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004eb8:	2180      	movs	r1, #128	; 0x80
 8004eba:	0049      	lsls	r1, r1, #1
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	651a      	str	r2, [r3, #80]	; 0x50
 8004ec0:	e00b      	b.n	8004eda <HAL_RCC_OscConfig+0x516>
 8004ec2:	4b5b      	ldr	r3, [pc, #364]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004ec4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ec6:	4b5a      	ldr	r3, [pc, #360]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004ec8:	495a      	ldr	r1, [pc, #360]	; (8005034 <HAL_RCC_OscConfig+0x670>)
 8004eca:	400a      	ands	r2, r1
 8004ecc:	651a      	str	r2, [r3, #80]	; 0x50
 8004ece:	4b58      	ldr	r3, [pc, #352]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004ed0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ed2:	4b57      	ldr	r3, [pc, #348]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004ed4:	4959      	ldr	r1, [pc, #356]	; (800503c <HAL_RCC_OscConfig+0x678>)
 8004ed6:	400a      	ands	r2, r1
 8004ed8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d015      	beq.n	8004f0e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee2:	f7fe fcf9 	bl	80038d8 <HAL_GetTick>
 8004ee6:	0003      	movs	r3, r0
 8004ee8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eea:	e009      	b.n	8004f00 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eec:	f7fe fcf4 	bl	80038d8 <HAL_GetTick>
 8004ef0:	0002      	movs	r2, r0
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	4a52      	ldr	r2, [pc, #328]	; (8005040 <HAL_RCC_OscConfig+0x67c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e11a      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f00:	4b4b      	ldr	r3, [pc, #300]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004f02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f04:	2380      	movs	r3, #128	; 0x80
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d0ef      	beq.n	8004eec <HAL_RCC_OscConfig+0x528>
 8004f0c:	e014      	b.n	8004f38 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f0e:	f7fe fce3 	bl	80038d8 <HAL_GetTick>
 8004f12:	0003      	movs	r3, r0
 8004f14:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f16:	e009      	b.n	8004f2c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f18:	f7fe fcde 	bl	80038d8 <HAL_GetTick>
 8004f1c:	0002      	movs	r2, r0
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	4a47      	ldr	r2, [pc, #284]	; (8005040 <HAL_RCC_OscConfig+0x67c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e104      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f2c:	4b40      	ldr	r3, [pc, #256]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004f2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4013      	ands	r3, r2
 8004f36:	d1ef      	bne.n	8004f18 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f38:	2327      	movs	r3, #39	; 0x27
 8004f3a:	18fb      	adds	r3, r7, r3
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d105      	bne.n	8004f4e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f42:	4b3b      	ldr	r3, [pc, #236]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f46:	4b3a      	ldr	r3, [pc, #232]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004f48:	493e      	ldr	r1, [pc, #248]	; (8005044 <HAL_RCC_OscConfig+0x680>)
 8004f4a:	400a      	ands	r2, r1
 8004f4c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2220      	movs	r2, #32
 8004f54:	4013      	ands	r3, r2
 8004f56:	d049      	beq.n	8004fec <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d026      	beq.n	8004fae <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004f60:	4b33      	ldr	r3, [pc, #204]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	4b32      	ldr	r3, [pc, #200]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004f66:	2101      	movs	r1, #1
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	609a      	str	r2, [r3, #8]
 8004f6c:	4b30      	ldr	r3, [pc, #192]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f70:	4b2f      	ldr	r3, [pc, #188]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004f72:	2101      	movs	r1, #1
 8004f74:	430a      	orrs	r2, r1
 8004f76:	635a      	str	r2, [r3, #52]	; 0x34
 8004f78:	4b33      	ldr	r3, [pc, #204]	; (8005048 <HAL_RCC_OscConfig+0x684>)
 8004f7a:	6a1a      	ldr	r2, [r3, #32]
 8004f7c:	4b32      	ldr	r3, [pc, #200]	; (8005048 <HAL_RCC_OscConfig+0x684>)
 8004f7e:	2180      	movs	r1, #128	; 0x80
 8004f80:	0189      	lsls	r1, r1, #6
 8004f82:	430a      	orrs	r2, r1
 8004f84:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f86:	f7fe fca7 	bl	80038d8 <HAL_GetTick>
 8004f8a:	0003      	movs	r3, r0
 8004f8c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f90:	f7fe fca2 	bl	80038d8 <HAL_GetTick>
 8004f94:	0002      	movs	r2, r0
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e0c9      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fa2:	4b23      	ldr	r3, [pc, #140]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	4013      	ands	r3, r2
 8004faa:	d0f1      	beq.n	8004f90 <HAL_RCC_OscConfig+0x5cc>
 8004fac:	e01e      	b.n	8004fec <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004fae:	4b20      	ldr	r3, [pc, #128]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	4b1f      	ldr	r3, [pc, #124]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	438a      	bics	r2, r1
 8004fb8:	609a      	str	r2, [r3, #8]
 8004fba:	4b23      	ldr	r3, [pc, #140]	; (8005048 <HAL_RCC_OscConfig+0x684>)
 8004fbc:	6a1a      	ldr	r2, [r3, #32]
 8004fbe:	4b22      	ldr	r3, [pc, #136]	; (8005048 <HAL_RCC_OscConfig+0x684>)
 8004fc0:	4922      	ldr	r1, [pc, #136]	; (800504c <HAL_RCC_OscConfig+0x688>)
 8004fc2:	400a      	ands	r2, r1
 8004fc4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc6:	f7fe fc87 	bl	80038d8 <HAL_GetTick>
 8004fca:	0003      	movs	r3, r0
 8004fcc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fd0:	f7fe fc82 	bl	80038d8 <HAL_GetTick>
 8004fd4:	0002      	movs	r2, r0
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e0a9      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fe2:	4b13      	ldr	r3, [pc, #76]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	4013      	ands	r3, r2
 8004fea:	d1f1      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d100      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x632>
 8004ff4:	e09e      	b.n	8005134 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	2b0c      	cmp	r3, #12
 8004ffa:	d100      	bne.n	8004ffe <HAL_RCC_OscConfig+0x63a>
 8004ffc:	e077      	b.n	80050ee <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005002:	2b02      	cmp	r3, #2
 8005004:	d158      	bne.n	80050b8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005006:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4b09      	ldr	r3, [pc, #36]	; (8005030 <HAL_RCC_OscConfig+0x66c>)
 800500c:	4910      	ldr	r1, [pc, #64]	; (8005050 <HAL_RCC_OscConfig+0x68c>)
 800500e:	400a      	ands	r2, r1
 8005010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005012:	f7fe fc61 	bl	80038d8 <HAL_GetTick>
 8005016:	0003      	movs	r3, r0
 8005018:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800501a:	e01b      	b.n	8005054 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800501c:	f7fe fc5c 	bl	80038d8 <HAL_GetTick>
 8005020:	0002      	movs	r2, r0
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d914      	bls.n	8005054 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e083      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
 800502e:	46c0      	nop			; (mov r8, r8)
 8005030:	40021000 	.word	0x40021000
 8005034:	fffffeff 	.word	0xfffffeff
 8005038:	40007000 	.word	0x40007000
 800503c:	fffffbff 	.word	0xfffffbff
 8005040:	00001388 	.word	0x00001388
 8005044:	efffffff 	.word	0xefffffff
 8005048:	40010000 	.word	0x40010000
 800504c:	ffffdfff 	.word	0xffffdfff
 8005050:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005054:	4b3a      	ldr	r3, [pc, #232]	; (8005140 <HAL_RCC_OscConfig+0x77c>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	049b      	lsls	r3, r3, #18
 800505c:	4013      	ands	r3, r2
 800505e:	d1dd      	bne.n	800501c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005060:	4b37      	ldr	r3, [pc, #220]	; (8005140 <HAL_RCC_OscConfig+0x77c>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4a37      	ldr	r2, [pc, #220]	; (8005144 <HAL_RCC_OscConfig+0x780>)
 8005066:	4013      	ands	r3, r2
 8005068:	0019      	movs	r1, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005078:	431a      	orrs	r2, r3
 800507a:	4b31      	ldr	r3, [pc, #196]	; (8005140 <HAL_RCC_OscConfig+0x77c>)
 800507c:	430a      	orrs	r2, r1
 800507e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005080:	4b2f      	ldr	r3, [pc, #188]	; (8005140 <HAL_RCC_OscConfig+0x77c>)
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	4b2e      	ldr	r3, [pc, #184]	; (8005140 <HAL_RCC_OscConfig+0x77c>)
 8005086:	2180      	movs	r1, #128	; 0x80
 8005088:	0449      	lsls	r1, r1, #17
 800508a:	430a      	orrs	r2, r1
 800508c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508e:	f7fe fc23 	bl	80038d8 <HAL_GetTick>
 8005092:	0003      	movs	r3, r0
 8005094:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005098:	f7fe fc1e 	bl	80038d8 <HAL_GetTick>
 800509c:	0002      	movs	r2, r0
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e045      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80050aa:	4b25      	ldr	r3, [pc, #148]	; (8005140 <HAL_RCC_OscConfig+0x77c>)
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	2380      	movs	r3, #128	; 0x80
 80050b0:	049b      	lsls	r3, r3, #18
 80050b2:	4013      	ands	r3, r2
 80050b4:	d0f0      	beq.n	8005098 <HAL_RCC_OscConfig+0x6d4>
 80050b6:	e03d      	b.n	8005134 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b8:	4b21      	ldr	r3, [pc, #132]	; (8005140 <HAL_RCC_OscConfig+0x77c>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	4b20      	ldr	r3, [pc, #128]	; (8005140 <HAL_RCC_OscConfig+0x77c>)
 80050be:	4922      	ldr	r1, [pc, #136]	; (8005148 <HAL_RCC_OscConfig+0x784>)
 80050c0:	400a      	ands	r2, r1
 80050c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c4:	f7fe fc08 	bl	80038d8 <HAL_GetTick>
 80050c8:	0003      	movs	r3, r0
 80050ca:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050cc:	e008      	b.n	80050e0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ce:	f7fe fc03 	bl	80038d8 <HAL_GetTick>
 80050d2:	0002      	movs	r2, r0
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e02a      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050e0:	4b17      	ldr	r3, [pc, #92]	; (8005140 <HAL_RCC_OscConfig+0x77c>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	2380      	movs	r3, #128	; 0x80
 80050e6:	049b      	lsls	r3, r3, #18
 80050e8:	4013      	ands	r3, r2
 80050ea:	d1f0      	bne.n	80050ce <HAL_RCC_OscConfig+0x70a>
 80050ec:	e022      	b.n	8005134 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d101      	bne.n	80050fa <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e01d      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80050fa:	4b11      	ldr	r3, [pc, #68]	; (8005140 <HAL_RCC_OscConfig+0x77c>)
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005100:	69fa      	ldr	r2, [r7, #28]
 8005102:	2380      	movs	r3, #128	; 0x80
 8005104:	025b      	lsls	r3, r3, #9
 8005106:	401a      	ands	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	429a      	cmp	r2, r3
 800510e:	d10f      	bne.n	8005130 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	23f0      	movs	r3, #240	; 0xf0
 8005114:	039b      	lsls	r3, r3, #14
 8005116:	401a      	ands	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800511c:	429a      	cmp	r2, r3
 800511e:	d107      	bne.n	8005130 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005120:	69fa      	ldr	r2, [r7, #28]
 8005122:	23c0      	movs	r3, #192	; 0xc0
 8005124:	041b      	lsls	r3, r3, #16
 8005126:	401a      	ands	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800512c:	429a      	cmp	r2, r3
 800512e:	d001      	beq.n	8005134 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e000      	b.n	8005136 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	0018      	movs	r0, r3
 8005138:	46bd      	mov	sp, r7
 800513a:	b00a      	add	sp, #40	; 0x28
 800513c:	bdb0      	pop	{r4, r5, r7, pc}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	40021000 	.word	0x40021000
 8005144:	ff02ffff 	.word	0xff02ffff
 8005148:	feffffff 	.word	0xfeffffff

0800514c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800514c:	b5b0      	push	{r4, r5, r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e128      	b.n	80053b2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005160:	4b96      	ldr	r3, [pc, #600]	; (80053bc <HAL_RCC_ClockConfig+0x270>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2201      	movs	r2, #1
 8005166:	4013      	ands	r3, r2
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d91e      	bls.n	80051ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516e:	4b93      	ldr	r3, [pc, #588]	; (80053bc <HAL_RCC_ClockConfig+0x270>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2201      	movs	r2, #1
 8005174:	4393      	bics	r3, r2
 8005176:	0019      	movs	r1, r3
 8005178:	4b90      	ldr	r3, [pc, #576]	; (80053bc <HAL_RCC_ClockConfig+0x270>)
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005180:	f7fe fbaa 	bl	80038d8 <HAL_GetTick>
 8005184:	0003      	movs	r3, r0
 8005186:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005188:	e009      	b.n	800519e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800518a:	f7fe fba5 	bl	80038d8 <HAL_GetTick>
 800518e:	0002      	movs	r2, r0
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	4a8a      	ldr	r2, [pc, #552]	; (80053c0 <HAL_RCC_ClockConfig+0x274>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d901      	bls.n	800519e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e109      	b.n	80053b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800519e:	4b87      	ldr	r3, [pc, #540]	; (80053bc <HAL_RCC_ClockConfig+0x270>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2201      	movs	r2, #1
 80051a4:	4013      	ands	r3, r2
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d1ee      	bne.n	800518a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2202      	movs	r2, #2
 80051b2:	4013      	ands	r3, r2
 80051b4:	d009      	beq.n	80051ca <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b6:	4b83      	ldr	r3, [pc, #524]	; (80053c4 <HAL_RCC_ClockConfig+0x278>)
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	22f0      	movs	r2, #240	; 0xf0
 80051bc:	4393      	bics	r3, r2
 80051be:	0019      	movs	r1, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	4b7f      	ldr	r3, [pc, #508]	; (80053c4 <HAL_RCC_ClockConfig+0x278>)
 80051c6:	430a      	orrs	r2, r1
 80051c8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2201      	movs	r2, #1
 80051d0:	4013      	ands	r3, r2
 80051d2:	d100      	bne.n	80051d6 <HAL_RCC_ClockConfig+0x8a>
 80051d4:	e089      	b.n	80052ea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d107      	bne.n	80051ee <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051de:	4b79      	ldr	r3, [pc, #484]	; (80053c4 <HAL_RCC_ClockConfig+0x278>)
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	2380      	movs	r3, #128	; 0x80
 80051e4:	029b      	lsls	r3, r3, #10
 80051e6:	4013      	ands	r3, r2
 80051e8:	d120      	bne.n	800522c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e0e1      	b.n	80053b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d107      	bne.n	8005206 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051f6:	4b73      	ldr	r3, [pc, #460]	; (80053c4 <HAL_RCC_ClockConfig+0x278>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	2380      	movs	r3, #128	; 0x80
 80051fc:	049b      	lsls	r3, r3, #18
 80051fe:	4013      	ands	r3, r2
 8005200:	d114      	bne.n	800522c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e0d5      	b.n	80053b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d106      	bne.n	800521c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800520e:	4b6d      	ldr	r3, [pc, #436]	; (80053c4 <HAL_RCC_ClockConfig+0x278>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2204      	movs	r2, #4
 8005214:	4013      	ands	r3, r2
 8005216:	d109      	bne.n	800522c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e0ca      	b.n	80053b2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800521c:	4b69      	ldr	r3, [pc, #420]	; (80053c4 <HAL_RCC_ClockConfig+0x278>)
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	2380      	movs	r3, #128	; 0x80
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4013      	ands	r3, r2
 8005226:	d101      	bne.n	800522c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e0c2      	b.n	80053b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800522c:	4b65      	ldr	r3, [pc, #404]	; (80053c4 <HAL_RCC_ClockConfig+0x278>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	2203      	movs	r2, #3
 8005232:	4393      	bics	r3, r2
 8005234:	0019      	movs	r1, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	4b62      	ldr	r3, [pc, #392]	; (80053c4 <HAL_RCC_ClockConfig+0x278>)
 800523c:	430a      	orrs	r2, r1
 800523e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005240:	f7fe fb4a 	bl	80038d8 <HAL_GetTick>
 8005244:	0003      	movs	r3, r0
 8005246:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d111      	bne.n	8005274 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005250:	e009      	b.n	8005266 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005252:	f7fe fb41 	bl	80038d8 <HAL_GetTick>
 8005256:	0002      	movs	r2, r0
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	4a58      	ldr	r2, [pc, #352]	; (80053c0 <HAL_RCC_ClockConfig+0x274>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e0a5      	b.n	80053b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005266:	4b57      	ldr	r3, [pc, #348]	; (80053c4 <HAL_RCC_ClockConfig+0x278>)
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	220c      	movs	r2, #12
 800526c:	4013      	ands	r3, r2
 800526e:	2b08      	cmp	r3, #8
 8005270:	d1ef      	bne.n	8005252 <HAL_RCC_ClockConfig+0x106>
 8005272:	e03a      	b.n	80052ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b03      	cmp	r3, #3
 800527a:	d111      	bne.n	80052a0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800527c:	e009      	b.n	8005292 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800527e:	f7fe fb2b 	bl	80038d8 <HAL_GetTick>
 8005282:	0002      	movs	r2, r0
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	4a4d      	ldr	r2, [pc, #308]	; (80053c0 <HAL_RCC_ClockConfig+0x274>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e08f      	b.n	80053b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005292:	4b4c      	ldr	r3, [pc, #304]	; (80053c4 <HAL_RCC_ClockConfig+0x278>)
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	220c      	movs	r2, #12
 8005298:	4013      	ands	r3, r2
 800529a:	2b0c      	cmp	r3, #12
 800529c:	d1ef      	bne.n	800527e <HAL_RCC_ClockConfig+0x132>
 800529e:	e024      	b.n	80052ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d11b      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80052a8:	e009      	b.n	80052be <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052aa:	f7fe fb15 	bl	80038d8 <HAL_GetTick>
 80052ae:	0002      	movs	r2, r0
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	4a42      	ldr	r2, [pc, #264]	; (80053c0 <HAL_RCC_ClockConfig+0x274>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e079      	b.n	80053b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80052be:	4b41      	ldr	r3, [pc, #260]	; (80053c4 <HAL_RCC_ClockConfig+0x278>)
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	220c      	movs	r2, #12
 80052c4:	4013      	ands	r3, r2
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d1ef      	bne.n	80052aa <HAL_RCC_ClockConfig+0x15e>
 80052ca:	e00e      	b.n	80052ea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052cc:	f7fe fb04 	bl	80038d8 <HAL_GetTick>
 80052d0:	0002      	movs	r2, r0
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	4a3a      	ldr	r2, [pc, #232]	; (80053c0 <HAL_RCC_ClockConfig+0x274>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e068      	b.n	80053b2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80052e0:	4b38      	ldr	r3, [pc, #224]	; (80053c4 <HAL_RCC_ClockConfig+0x278>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	220c      	movs	r2, #12
 80052e6:	4013      	ands	r3, r2
 80052e8:	d1f0      	bne.n	80052cc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052ea:	4b34      	ldr	r3, [pc, #208]	; (80053bc <HAL_RCC_ClockConfig+0x270>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2201      	movs	r2, #1
 80052f0:	4013      	ands	r3, r2
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d21e      	bcs.n	8005336 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f8:	4b30      	ldr	r3, [pc, #192]	; (80053bc <HAL_RCC_ClockConfig+0x270>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2201      	movs	r2, #1
 80052fe:	4393      	bics	r3, r2
 8005300:	0019      	movs	r1, r3
 8005302:	4b2e      	ldr	r3, [pc, #184]	; (80053bc <HAL_RCC_ClockConfig+0x270>)
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800530a:	f7fe fae5 	bl	80038d8 <HAL_GetTick>
 800530e:	0003      	movs	r3, r0
 8005310:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005312:	e009      	b.n	8005328 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005314:	f7fe fae0 	bl	80038d8 <HAL_GetTick>
 8005318:	0002      	movs	r2, r0
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	4a28      	ldr	r2, [pc, #160]	; (80053c0 <HAL_RCC_ClockConfig+0x274>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e044      	b.n	80053b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005328:	4b24      	ldr	r3, [pc, #144]	; (80053bc <HAL_RCC_ClockConfig+0x270>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2201      	movs	r2, #1
 800532e:	4013      	ands	r3, r2
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d1ee      	bne.n	8005314 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2204      	movs	r2, #4
 800533c:	4013      	ands	r3, r2
 800533e:	d009      	beq.n	8005354 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005340:	4b20      	ldr	r3, [pc, #128]	; (80053c4 <HAL_RCC_ClockConfig+0x278>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	4a20      	ldr	r2, [pc, #128]	; (80053c8 <HAL_RCC_ClockConfig+0x27c>)
 8005346:	4013      	ands	r3, r2
 8005348:	0019      	movs	r1, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	4b1d      	ldr	r3, [pc, #116]	; (80053c4 <HAL_RCC_ClockConfig+0x278>)
 8005350:	430a      	orrs	r2, r1
 8005352:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2208      	movs	r2, #8
 800535a:	4013      	ands	r3, r2
 800535c:	d00a      	beq.n	8005374 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800535e:	4b19      	ldr	r3, [pc, #100]	; (80053c4 <HAL_RCC_ClockConfig+0x278>)
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	4a1a      	ldr	r2, [pc, #104]	; (80053cc <HAL_RCC_ClockConfig+0x280>)
 8005364:	4013      	ands	r3, r2
 8005366:	0019      	movs	r1, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	00da      	lsls	r2, r3, #3
 800536e:	4b15      	ldr	r3, [pc, #84]	; (80053c4 <HAL_RCC_ClockConfig+0x278>)
 8005370:	430a      	orrs	r2, r1
 8005372:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005374:	f000 f832 	bl	80053dc <HAL_RCC_GetSysClockFreq>
 8005378:	0001      	movs	r1, r0
 800537a:	4b12      	ldr	r3, [pc, #72]	; (80053c4 <HAL_RCC_ClockConfig+0x278>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	091b      	lsrs	r3, r3, #4
 8005380:	220f      	movs	r2, #15
 8005382:	4013      	ands	r3, r2
 8005384:	4a12      	ldr	r2, [pc, #72]	; (80053d0 <HAL_RCC_ClockConfig+0x284>)
 8005386:	5cd3      	ldrb	r3, [r2, r3]
 8005388:	000a      	movs	r2, r1
 800538a:	40da      	lsrs	r2, r3
 800538c:	4b11      	ldr	r3, [pc, #68]	; (80053d4 <HAL_RCC_ClockConfig+0x288>)
 800538e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005390:	4b11      	ldr	r3, [pc, #68]	; (80053d8 <HAL_RCC_ClockConfig+0x28c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	250b      	movs	r5, #11
 8005396:	197c      	adds	r4, r7, r5
 8005398:	0018      	movs	r0, r3
 800539a:	f7fe fa57 	bl	800384c <HAL_InitTick>
 800539e:	0003      	movs	r3, r0
 80053a0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80053a2:	197b      	adds	r3, r7, r5
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80053aa:	197b      	adds	r3, r7, r5
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	e000      	b.n	80053b2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	0018      	movs	r0, r3
 80053b4:	46bd      	mov	sp, r7
 80053b6:	b004      	add	sp, #16
 80053b8:	bdb0      	pop	{r4, r5, r7, pc}
 80053ba:	46c0      	nop			; (mov r8, r8)
 80053bc:	40022000 	.word	0x40022000
 80053c0:	00001388 	.word	0x00001388
 80053c4:	40021000 	.word	0x40021000
 80053c8:	fffff8ff 	.word	0xfffff8ff
 80053cc:	ffffc7ff 	.word	0xffffc7ff
 80053d0:	0800819c 	.word	0x0800819c
 80053d4:	20000000 	.word	0x20000000
 80053d8:	20000004 	.word	0x20000004

080053dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053dc:	b5b0      	push	{r4, r5, r7, lr}
 80053de:	b08e      	sub	sp, #56	; 0x38
 80053e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80053e2:	4b4c      	ldr	r3, [pc, #304]	; (8005514 <HAL_RCC_GetSysClockFreq+0x138>)
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ea:	230c      	movs	r3, #12
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b0c      	cmp	r3, #12
 80053f0:	d014      	beq.n	800541c <HAL_RCC_GetSysClockFreq+0x40>
 80053f2:	d900      	bls.n	80053f6 <HAL_RCC_GetSysClockFreq+0x1a>
 80053f4:	e07b      	b.n	80054ee <HAL_RCC_GetSysClockFreq+0x112>
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d002      	beq.n	8005400 <HAL_RCC_GetSysClockFreq+0x24>
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d00b      	beq.n	8005416 <HAL_RCC_GetSysClockFreq+0x3a>
 80053fe:	e076      	b.n	80054ee <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005400:	4b44      	ldr	r3, [pc, #272]	; (8005514 <HAL_RCC_GetSysClockFreq+0x138>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2210      	movs	r2, #16
 8005406:	4013      	ands	r3, r2
 8005408:	d002      	beq.n	8005410 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800540a:	4b43      	ldr	r3, [pc, #268]	; (8005518 <HAL_RCC_GetSysClockFreq+0x13c>)
 800540c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800540e:	e07c      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005410:	4b42      	ldr	r3, [pc, #264]	; (800551c <HAL_RCC_GetSysClockFreq+0x140>)
 8005412:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005414:	e079      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005416:	4b42      	ldr	r3, [pc, #264]	; (8005520 <HAL_RCC_GetSysClockFreq+0x144>)
 8005418:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800541a:	e076      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800541c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541e:	0c9a      	lsrs	r2, r3, #18
 8005420:	230f      	movs	r3, #15
 8005422:	401a      	ands	r2, r3
 8005424:	4b3f      	ldr	r3, [pc, #252]	; (8005524 <HAL_RCC_GetSysClockFreq+0x148>)
 8005426:	5c9b      	ldrb	r3, [r3, r2]
 8005428:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542c:	0d9a      	lsrs	r2, r3, #22
 800542e:	2303      	movs	r3, #3
 8005430:	4013      	ands	r3, r2
 8005432:	3301      	adds	r3, #1
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005436:	4b37      	ldr	r3, [pc, #220]	; (8005514 <HAL_RCC_GetSysClockFreq+0x138>)
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	2380      	movs	r3, #128	; 0x80
 800543c:	025b      	lsls	r3, r3, #9
 800543e:	4013      	ands	r3, r2
 8005440:	d01a      	beq.n	8005478 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	61bb      	str	r3, [r7, #24]
 8005446:	2300      	movs	r3, #0
 8005448:	61fb      	str	r3, [r7, #28]
 800544a:	4a35      	ldr	r2, [pc, #212]	; (8005520 <HAL_RCC_GetSysClockFreq+0x144>)
 800544c:	2300      	movs	r3, #0
 800544e:	69b8      	ldr	r0, [r7, #24]
 8005450:	69f9      	ldr	r1, [r7, #28]
 8005452:	f7fa ff17 	bl	8000284 <__aeabi_lmul>
 8005456:	0002      	movs	r2, r0
 8005458:	000b      	movs	r3, r1
 800545a:	0010      	movs	r0, r2
 800545c:	0019      	movs	r1, r3
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	2300      	movs	r3, #0
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f7fa feeb 	bl	8000244 <__aeabi_uldivmod>
 800546e:	0002      	movs	r2, r0
 8005470:	000b      	movs	r3, r1
 8005472:	0013      	movs	r3, r2
 8005474:	637b      	str	r3, [r7, #52]	; 0x34
 8005476:	e037      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005478:	4b26      	ldr	r3, [pc, #152]	; (8005514 <HAL_RCC_GetSysClockFreq+0x138>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2210      	movs	r2, #16
 800547e:	4013      	ands	r3, r2
 8005480:	d01a      	beq.n	80054b8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	2300      	movs	r3, #0
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	4a23      	ldr	r2, [pc, #140]	; (8005518 <HAL_RCC_GetSysClockFreq+0x13c>)
 800548c:	2300      	movs	r3, #0
 800548e:	68b8      	ldr	r0, [r7, #8]
 8005490:	68f9      	ldr	r1, [r7, #12]
 8005492:	f7fa fef7 	bl	8000284 <__aeabi_lmul>
 8005496:	0002      	movs	r2, r0
 8005498:	000b      	movs	r3, r1
 800549a:	0010      	movs	r0, r2
 800549c:	0019      	movs	r1, r3
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	603b      	str	r3, [r7, #0]
 80054a2:	2300      	movs	r3, #0
 80054a4:	607b      	str	r3, [r7, #4]
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f7fa fecb 	bl	8000244 <__aeabi_uldivmod>
 80054ae:	0002      	movs	r2, r0
 80054b0:	000b      	movs	r3, r1
 80054b2:	0013      	movs	r3, r2
 80054b4:	637b      	str	r3, [r7, #52]	; 0x34
 80054b6:	e017      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	0018      	movs	r0, r3
 80054bc:	2300      	movs	r3, #0
 80054be:	0019      	movs	r1, r3
 80054c0:	4a16      	ldr	r2, [pc, #88]	; (800551c <HAL_RCC_GetSysClockFreq+0x140>)
 80054c2:	2300      	movs	r3, #0
 80054c4:	f7fa fede 	bl	8000284 <__aeabi_lmul>
 80054c8:	0002      	movs	r2, r0
 80054ca:	000b      	movs	r3, r1
 80054cc:	0010      	movs	r0, r2
 80054ce:	0019      	movs	r1, r3
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	001c      	movs	r4, r3
 80054d4:	2300      	movs	r3, #0
 80054d6:	001d      	movs	r5, r3
 80054d8:	0022      	movs	r2, r4
 80054da:	002b      	movs	r3, r5
 80054dc:	f7fa feb2 	bl	8000244 <__aeabi_uldivmod>
 80054e0:	0002      	movs	r2, r0
 80054e2:	000b      	movs	r3, r1
 80054e4:	0013      	movs	r3, r2
 80054e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80054e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80054ec:	e00d      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80054ee:	4b09      	ldr	r3, [pc, #36]	; (8005514 <HAL_RCC_GetSysClockFreq+0x138>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	0b5b      	lsrs	r3, r3, #13
 80054f4:	2207      	movs	r2, #7
 80054f6:	4013      	ands	r3, r2
 80054f8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	3301      	adds	r3, #1
 80054fe:	2280      	movs	r2, #128	; 0x80
 8005500:	0212      	lsls	r2, r2, #8
 8005502:	409a      	lsls	r2, r3
 8005504:	0013      	movs	r3, r2
 8005506:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005508:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800550c:	0018      	movs	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	b00e      	add	sp, #56	; 0x38
 8005512:	bdb0      	pop	{r4, r5, r7, pc}
 8005514:	40021000 	.word	0x40021000
 8005518:	003d0900 	.word	0x003d0900
 800551c:	00f42400 	.word	0x00f42400
 8005520:	007a1200 	.word	0x007a1200
 8005524:	080081b4 	.word	0x080081b4

08005528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800552c:	4b02      	ldr	r3, [pc, #8]	; (8005538 <HAL_RCC_GetHCLKFreq+0x10>)
 800552e:	681b      	ldr	r3, [r3, #0]
}
 8005530:	0018      	movs	r0, r3
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	46c0      	nop			; (mov r8, r8)
 8005538:	20000000 	.word	0x20000000

0800553c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005540:	f7ff fff2 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 8005544:	0001      	movs	r1, r0
 8005546:	4b06      	ldr	r3, [pc, #24]	; (8005560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	0a1b      	lsrs	r3, r3, #8
 800554c:	2207      	movs	r2, #7
 800554e:	4013      	ands	r3, r2
 8005550:	4a04      	ldr	r2, [pc, #16]	; (8005564 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005552:	5cd3      	ldrb	r3, [r2, r3]
 8005554:	40d9      	lsrs	r1, r3
 8005556:	000b      	movs	r3, r1
}
 8005558:	0018      	movs	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	40021000 	.word	0x40021000
 8005564:	080081ac 	.word	0x080081ac

08005568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800556c:	f7ff ffdc 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 8005570:	0001      	movs	r1, r0
 8005572:	4b06      	ldr	r3, [pc, #24]	; (800558c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	0adb      	lsrs	r3, r3, #11
 8005578:	2207      	movs	r2, #7
 800557a:	4013      	ands	r3, r2
 800557c:	4a04      	ldr	r2, [pc, #16]	; (8005590 <HAL_RCC_GetPCLK2Freq+0x28>)
 800557e:	5cd3      	ldrb	r3, [r2, r3]
 8005580:	40d9      	lsrs	r1, r3
 8005582:	000b      	movs	r3, r1
}
 8005584:	0018      	movs	r0, r3
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	46c0      	nop			; (mov r8, r8)
 800558c:	40021000 	.word	0x40021000
 8005590:	080081ac 	.word	0x080081ac

08005594 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800559c:	2317      	movs	r3, #23
 800559e:	18fb      	adds	r3, r7, r3
 80055a0:	2200      	movs	r2, #0
 80055a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2220      	movs	r2, #32
 80055aa:	4013      	ands	r3, r2
 80055ac:	d106      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	2380      	movs	r3, #128	; 0x80
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	4013      	ands	r3, r2
 80055b8:	d100      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80055ba:	e104      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055bc:	4bb1      	ldr	r3, [pc, #708]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	055b      	lsls	r3, r3, #21
 80055c4:	4013      	ands	r3, r2
 80055c6:	d10a      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055c8:	4bae      	ldr	r3, [pc, #696]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055cc:	4bad      	ldr	r3, [pc, #692]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055ce:	2180      	movs	r1, #128	; 0x80
 80055d0:	0549      	lsls	r1, r1, #21
 80055d2:	430a      	orrs	r2, r1
 80055d4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80055d6:	2317      	movs	r3, #23
 80055d8:	18fb      	adds	r3, r7, r3
 80055da:	2201      	movs	r2, #1
 80055dc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055de:	4baa      	ldr	r3, [pc, #680]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	2380      	movs	r3, #128	; 0x80
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	4013      	ands	r3, r2
 80055e8:	d11a      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055ea:	4ba7      	ldr	r3, [pc, #668]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4ba6      	ldr	r3, [pc, #664]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055f0:	2180      	movs	r1, #128	; 0x80
 80055f2:	0049      	lsls	r1, r1, #1
 80055f4:	430a      	orrs	r2, r1
 80055f6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055f8:	f7fe f96e 	bl	80038d8 <HAL_GetTick>
 80055fc:	0003      	movs	r3, r0
 80055fe:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005600:	e008      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005602:	f7fe f969 	bl	80038d8 <HAL_GetTick>
 8005606:	0002      	movs	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b64      	cmp	r3, #100	; 0x64
 800560e:	d901      	bls.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e133      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005614:	4b9c      	ldr	r3, [pc, #624]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	2380      	movs	r3, #128	; 0x80
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	4013      	ands	r3, r2
 800561e:	d0f0      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005620:	4b98      	ldr	r3, [pc, #608]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	23c0      	movs	r3, #192	; 0xc0
 8005626:	039b      	lsls	r3, r3, #14
 8005628:	4013      	ands	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	23c0      	movs	r3, #192	; 0xc0
 8005632:	039b      	lsls	r3, r3, #14
 8005634:	4013      	ands	r3, r2
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	429a      	cmp	r2, r3
 800563a:	d107      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	23c0      	movs	r3, #192	; 0xc0
 8005642:	039b      	lsls	r3, r3, #14
 8005644:	4013      	ands	r3, r2
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	429a      	cmp	r2, r3
 800564a:	d013      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	23c0      	movs	r3, #192	; 0xc0
 8005652:	029b      	lsls	r3, r3, #10
 8005654:	401a      	ands	r2, r3
 8005656:	23c0      	movs	r3, #192	; 0xc0
 8005658:	029b      	lsls	r3, r3, #10
 800565a:	429a      	cmp	r2, r3
 800565c:	d10a      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800565e:	4b89      	ldr	r3, [pc, #548]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	2380      	movs	r3, #128	; 0x80
 8005664:	029b      	lsls	r3, r3, #10
 8005666:	401a      	ands	r2, r3
 8005668:	2380      	movs	r3, #128	; 0x80
 800566a:	029b      	lsls	r3, r3, #10
 800566c:	429a      	cmp	r2, r3
 800566e:	d101      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e103      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005674:	4b83      	ldr	r3, [pc, #524]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005676:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005678:	23c0      	movs	r3, #192	; 0xc0
 800567a:	029b      	lsls	r3, r3, #10
 800567c:	4013      	ands	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d049      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	23c0      	movs	r3, #192	; 0xc0
 800568c:	029b      	lsls	r3, r3, #10
 800568e:	4013      	ands	r3, r2
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	429a      	cmp	r2, r3
 8005694:	d004      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2220      	movs	r2, #32
 800569c:	4013      	ands	r3, r2
 800569e:	d10d      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	23c0      	movs	r3, #192	; 0xc0
 80056a6:	029b      	lsls	r3, r3, #10
 80056a8:	4013      	ands	r3, r2
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d034      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	2380      	movs	r3, #128	; 0x80
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	4013      	ands	r3, r2
 80056ba:	d02e      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80056bc:	4b71      	ldr	r3, [pc, #452]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c0:	4a72      	ldr	r2, [pc, #456]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80056c2:	4013      	ands	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056c6:	4b6f      	ldr	r3, [pc, #444]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056ca:	4b6e      	ldr	r3, [pc, #440]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056cc:	2180      	movs	r1, #128	; 0x80
 80056ce:	0309      	lsls	r1, r1, #12
 80056d0:	430a      	orrs	r2, r1
 80056d2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056d4:	4b6b      	ldr	r3, [pc, #428]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056d8:	4b6a      	ldr	r3, [pc, #424]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056da:	496d      	ldr	r1, [pc, #436]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80056dc:	400a      	ands	r2, r1
 80056de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80056e0:	4b68      	ldr	r3, [pc, #416]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	2380      	movs	r3, #128	; 0x80
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	4013      	ands	r3, r2
 80056ee:	d014      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f0:	f7fe f8f2 	bl	80038d8 <HAL_GetTick>
 80056f4:	0003      	movs	r3, r0
 80056f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056f8:	e009      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056fa:	f7fe f8ed 	bl	80038d8 <HAL_GetTick>
 80056fe:	0002      	movs	r2, r0
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	4a63      	ldr	r2, [pc, #396]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e0b6      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800570e:	4b5d      	ldr	r3, [pc, #372]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005712:	2380      	movs	r3, #128	; 0x80
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4013      	ands	r3, r2
 8005718:	d0ef      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	2380      	movs	r3, #128	; 0x80
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	4013      	ands	r3, r2
 8005724:	d01f      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	23c0      	movs	r3, #192	; 0xc0
 800572c:	029b      	lsls	r3, r3, #10
 800572e:	401a      	ands	r2, r3
 8005730:	23c0      	movs	r3, #192	; 0xc0
 8005732:	029b      	lsls	r3, r3, #10
 8005734:	429a      	cmp	r2, r3
 8005736:	d10c      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005738:	4b52      	ldr	r3, [pc, #328]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a56      	ldr	r2, [pc, #344]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800573e:	4013      	ands	r3, r2
 8005740:	0019      	movs	r1, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	23c0      	movs	r3, #192	; 0xc0
 8005748:	039b      	lsls	r3, r3, #14
 800574a:	401a      	ands	r2, r3
 800574c:	4b4d      	ldr	r3, [pc, #308]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800574e:	430a      	orrs	r2, r1
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	4b4c      	ldr	r3, [pc, #304]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005754:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	23c0      	movs	r3, #192	; 0xc0
 800575c:	029b      	lsls	r3, r3, #10
 800575e:	401a      	ands	r2, r3
 8005760:	4b48      	ldr	r3, [pc, #288]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005762:	430a      	orrs	r2, r1
 8005764:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2220      	movs	r2, #32
 800576c:	4013      	ands	r3, r2
 800576e:	d01f      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	23c0      	movs	r3, #192	; 0xc0
 8005776:	029b      	lsls	r3, r3, #10
 8005778:	401a      	ands	r2, r3
 800577a:	23c0      	movs	r3, #192	; 0xc0
 800577c:	029b      	lsls	r3, r3, #10
 800577e:	429a      	cmp	r2, r3
 8005780:	d10c      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005782:	4b40      	ldr	r3, [pc, #256]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a44      	ldr	r2, [pc, #272]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005788:	4013      	ands	r3, r2
 800578a:	0019      	movs	r1, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	23c0      	movs	r3, #192	; 0xc0
 8005792:	039b      	lsls	r3, r3, #14
 8005794:	401a      	ands	r2, r3
 8005796:	4b3b      	ldr	r3, [pc, #236]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005798:	430a      	orrs	r2, r1
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	4b39      	ldr	r3, [pc, #228]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800579e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	23c0      	movs	r3, #192	; 0xc0
 80057a6:	029b      	lsls	r3, r3, #10
 80057a8:	401a      	ands	r2, r3
 80057aa:	4b36      	ldr	r3, [pc, #216]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057ac:	430a      	orrs	r2, r1
 80057ae:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057b0:	2317      	movs	r3, #23
 80057b2:	18fb      	adds	r3, r7, r3
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d105      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ba:	4b32      	ldr	r3, [pc, #200]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057be:	4b31      	ldr	r3, [pc, #196]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057c0:	4936      	ldr	r1, [pc, #216]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80057c2:	400a      	ands	r2, r1
 80057c4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2201      	movs	r2, #1
 80057cc:	4013      	ands	r3, r2
 80057ce:	d009      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057d0:	4b2c      	ldr	r3, [pc, #176]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d4:	2203      	movs	r2, #3
 80057d6:	4393      	bics	r3, r2
 80057d8:	0019      	movs	r1, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	4b29      	ldr	r3, [pc, #164]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057e0:	430a      	orrs	r2, r1
 80057e2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2202      	movs	r2, #2
 80057ea:	4013      	ands	r3, r2
 80057ec:	d009      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057ee:	4b25      	ldr	r3, [pc, #148]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f2:	220c      	movs	r2, #12
 80057f4:	4393      	bics	r3, r2
 80057f6:	0019      	movs	r1, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	4b21      	ldr	r3, [pc, #132]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057fe:	430a      	orrs	r2, r1
 8005800:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2204      	movs	r2, #4
 8005808:	4013      	ands	r3, r2
 800580a:	d009      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800580c:	4b1d      	ldr	r3, [pc, #116]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800580e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005810:	4a23      	ldr	r2, [pc, #140]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8005812:	4013      	ands	r3, r2
 8005814:	0019      	movs	r1, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	695a      	ldr	r2, [r3, #20]
 800581a:	4b1a      	ldr	r3, [pc, #104]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800581c:	430a      	orrs	r2, r1
 800581e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2208      	movs	r2, #8
 8005826:	4013      	ands	r3, r2
 8005828:	d009      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800582a:	4b16      	ldr	r3, [pc, #88]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800582c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582e:	4a1d      	ldr	r2, [pc, #116]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005830:	4013      	ands	r3, r2
 8005832:	0019      	movs	r1, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	699a      	ldr	r2, [r3, #24]
 8005838:	4b12      	ldr	r3, [pc, #72]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800583a:	430a      	orrs	r2, r1
 800583c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2240      	movs	r2, #64	; 0x40
 8005844:	4013      	ands	r3, r2
 8005846:	d009      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005848:	4b0e      	ldr	r3, [pc, #56]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800584a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800584c:	4a16      	ldr	r2, [pc, #88]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800584e:	4013      	ands	r3, r2
 8005850:	0019      	movs	r1, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1a      	ldr	r2, [r3, #32]
 8005856:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005858:	430a      	orrs	r2, r1
 800585a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2280      	movs	r2, #128	; 0x80
 8005862:	4013      	ands	r3, r2
 8005864:	d009      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005866:	4b07      	ldr	r3, [pc, #28]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586a:	4a10      	ldr	r2, [pc, #64]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800586c:	4013      	ands	r3, r2
 800586e:	0019      	movs	r1, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	69da      	ldr	r2, [r3, #28]
 8005874:	4b03      	ldr	r3, [pc, #12]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005876:	430a      	orrs	r2, r1
 8005878:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	0018      	movs	r0, r3
 800587e:	46bd      	mov	sp, r7
 8005880:	b006      	add	sp, #24
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40021000 	.word	0x40021000
 8005888:	40007000 	.word	0x40007000
 800588c:	fffcffff 	.word	0xfffcffff
 8005890:	fff7ffff 	.word	0xfff7ffff
 8005894:	00001388 	.word	0x00001388
 8005898:	ffcfffff 	.word	0xffcfffff
 800589c:	efffffff 	.word	0xefffffff
 80058a0:	fffff3ff 	.word	0xfffff3ff
 80058a4:	ffffcfff 	.word	0xffffcfff
 80058a8:	fbffffff 	.word	0xfbffffff
 80058ac:	fff3ffff 	.word	0xfff3ffff

080058b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80058b0:	b5b0      	push	{r4, r5, r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80058b8:	230f      	movs	r3, #15
 80058ba:	18fb      	adds	r3, r7, r3
 80058bc:	2201      	movs	r2, #1
 80058be:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e088      	b.n	80059dc <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2221      	movs	r2, #33	; 0x21
 80058ce:	5c9b      	ldrb	r3, [r3, r2]
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d107      	bne.n	80058e6 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2220      	movs	r2, #32
 80058da:	2100      	movs	r1, #0
 80058dc:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	0018      	movs	r0, r3
 80058e2:	f7fd fcf3 	bl	80032cc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2221      	movs	r2, #33	; 0x21
 80058ea:	2102      	movs	r1, #2
 80058ec:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	2210      	movs	r2, #16
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b10      	cmp	r3, #16
 80058fa:	d05f      	beq.n	80059bc <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	22ca      	movs	r2, #202	; 0xca
 8005902:	625a      	str	r2, [r3, #36]	; 0x24
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2253      	movs	r2, #83	; 0x53
 800590a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800590c:	250f      	movs	r5, #15
 800590e:	197c      	adds	r4, r7, r5
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	0018      	movs	r0, r3
 8005914:	f000 fc2c 	bl	8006170 <RTC_EnterInitMode>
 8005918:	0003      	movs	r3, r0
 800591a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800591c:	0028      	movs	r0, r5
 800591e:	183b      	adds	r3, r7, r0
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d12c      	bne.n	8005980 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	492c      	ldr	r1, [pc, #176]	; (80059e4 <HAL_RTC_Init+0x134>)
 8005932:	400a      	ands	r2, r1
 8005934:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6899      	ldr	r1, [r3, #8]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	431a      	orrs	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	68d2      	ldr	r2, [r2, #12]
 800595c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6919      	ldr	r1, [r3, #16]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	041a      	lsls	r2, r3, #16
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005972:	183c      	adds	r4, r7, r0
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	0018      	movs	r0, r3
 8005978:	f000 fc3e 	bl	80061f8 <RTC_ExitInitMode>
 800597c:	0003      	movs	r3, r0
 800597e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8005980:	230f      	movs	r3, #15
 8005982:	18fb      	adds	r3, r7, r3
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d113      	bne.n	80059b2 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2103      	movs	r1, #3
 8005996:	438a      	bics	r2, r1
 8005998:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	22ff      	movs	r2, #255	; 0xff
 80059b8:	625a      	str	r2, [r3, #36]	; 0x24
 80059ba:	e003      	b.n	80059c4 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80059bc:	230f      	movs	r3, #15
 80059be:	18fb      	adds	r3, r7, r3
 80059c0:	2200      	movs	r2, #0
 80059c2:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80059c4:	230f      	movs	r3, #15
 80059c6:	18fb      	adds	r3, r7, r3
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d103      	bne.n	80059d6 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2221      	movs	r2, #33	; 0x21
 80059d2:	2101      	movs	r1, #1
 80059d4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80059d6:	230f      	movs	r3, #15
 80059d8:	18fb      	adds	r3, r7, r3
 80059da:	781b      	ldrb	r3, [r3, #0]
}
 80059dc:	0018      	movs	r0, r3
 80059de:	46bd      	mov	sp, r7
 80059e0:	b004      	add	sp, #16
 80059e2:	bdb0      	pop	{r4, r5, r7, pc}
 80059e4:	ff8fffbf 	.word	0xff8fffbf

080059e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059e8:	b5b0      	push	{r4, r5, r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2220      	movs	r2, #32
 80059fc:	5c9b      	ldrb	r3, [r3, r2]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <HAL_RTC_SetTime+0x1e>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e092      	b.n	8005b2c <HAL_RTC_SetTime+0x144>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2221      	movs	r2, #33	; 0x21
 8005a12:	2102      	movs	r1, #2
 8005a14:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d125      	bne.n	8005a68 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	2240      	movs	r2, #64	; 0x40
 8005a24:	4013      	ands	r3, r2
 8005a26:	d102      	bne.n	8005a2e <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	0018      	movs	r0, r3
 8005a34:	f000 fc0a 	bl	800624c <RTC_ByteToBcd2>
 8005a38:	0003      	movs	r3, r0
 8005a3a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	0018      	movs	r0, r3
 8005a42:	f000 fc03 	bl	800624c <RTC_ByteToBcd2>
 8005a46:	0003      	movs	r3, r0
 8005a48:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a4a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	789b      	ldrb	r3, [r3, #2]
 8005a50:	0018      	movs	r0, r3
 8005a52:	f000 fbfb 	bl	800624c <RTC_ByteToBcd2>
 8005a56:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a58:	0022      	movs	r2, r4
 8005a5a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	78db      	ldrb	r3, [r3, #3]
 8005a60:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
 8005a66:	e017      	b.n	8005a98 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	2240      	movs	r2, #64	; 0x40
 8005a70:	4013      	ands	r3, r2
 8005a72:	d102      	bne.n	8005a7a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2200      	movs	r2, #0
 8005a78:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	785b      	ldrb	r3, [r3, #1]
 8005a84:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a86:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a8c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	78db      	ldrb	r3, [r3, #3]
 8005a92:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	22ca      	movs	r2, #202	; 0xca
 8005a9e:	625a      	str	r2, [r3, #36]	; 0x24
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2253      	movs	r2, #83	; 0x53
 8005aa6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005aa8:	2513      	movs	r5, #19
 8005aaa:	197c      	adds	r4, r7, r5
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	0018      	movs	r0, r3
 8005ab0:	f000 fb5e 	bl	8006170 <RTC_EnterInitMode>
 8005ab4:	0003      	movs	r3, r0
 8005ab6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8005ab8:	0028      	movs	r0, r5
 8005aba:	183b      	adds	r3, r7, r0
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d120      	bne.n	8005b04 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	491a      	ldr	r1, [pc, #104]	; (8005b34 <HAL_RTC_SetTime+0x14c>)
 8005aca:	400a      	ands	r2, r1
 8005acc:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4917      	ldr	r1, [pc, #92]	; (8005b38 <HAL_RTC_SetTime+0x150>)
 8005ada:	400a      	ands	r2, r1
 8005adc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6899      	ldr	r1, [r3, #8]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	431a      	orrs	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005af6:	183c      	adds	r4, r7, r0
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	0018      	movs	r0, r3
 8005afc:	f000 fb7c 	bl	80061f8 <RTC_ExitInitMode>
 8005b00:	0003      	movs	r3, r0
 8005b02:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8005b04:	2313      	movs	r3, #19
 8005b06:	18fb      	adds	r3, r7, r3
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d103      	bne.n	8005b16 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2221      	movs	r2, #33	; 0x21
 8005b12:	2101      	movs	r1, #1
 8005b14:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	22ff      	movs	r2, #255	; 0xff
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2220      	movs	r2, #32
 8005b22:	2100      	movs	r1, #0
 8005b24:	5499      	strb	r1, [r3, r2]

  return status;
 8005b26:	2313      	movs	r3, #19
 8005b28:	18fb      	adds	r3, r7, r3
 8005b2a:	781b      	ldrb	r3, [r3, #0]
}
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	b006      	add	sp, #24
 8005b32:	bdb0      	pop	{r4, r5, r7, pc}
 8005b34:	007f7f7f 	.word	0x007f7f7f
 8005b38:	fffbffff 	.word	0xfffbffff

08005b3c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	045b      	lsls	r3, r3, #17
 8005b5e:	0c5a      	lsrs	r2, r3, #17
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a22      	ldr	r2, [pc, #136]	; (8005bf4 <HAL_RTC_GetTime+0xb8>)
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	0c1b      	lsrs	r3, r3, #16
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	223f      	movs	r2, #63	; 0x3f
 8005b78:	4013      	ands	r3, r2
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	0a1b      	lsrs	r3, r3, #8
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	227f      	movs	r2, #127	; 0x7f
 8005b88:	4013      	ands	r3, r2
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	227f      	movs	r2, #127	; 0x7f
 8005b96:	4013      	ands	r3, r2
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	0d9b      	lsrs	r3, r3, #22
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d11a      	bne.n	8005bea <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	0018      	movs	r0, r3
 8005bba:	f000 fb68 	bl	800628e <RTC_Bcd2ToByte>
 8005bbe:	0003      	movs	r3, r0
 8005bc0:	001a      	movs	r2, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	785b      	ldrb	r3, [r3, #1]
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f000 fb5f 	bl	800628e <RTC_Bcd2ToByte>
 8005bd0:	0003      	movs	r3, r0
 8005bd2:	001a      	movs	r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	789b      	ldrb	r3, [r3, #2]
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f000 fb56 	bl	800628e <RTC_Bcd2ToByte>
 8005be2:	0003      	movs	r3, r0
 8005be4:	001a      	movs	r2, r3
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	0018      	movs	r0, r3
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	b006      	add	sp, #24
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	007f7f7f 	.word	0x007f7f7f

08005bf8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005bf8:	b5b0      	push	{r4, r5, r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	5c9b      	ldrb	r3, [r3, r2]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d101      	bne.n	8005c16 <HAL_RTC_SetDate+0x1e>
 8005c12:	2302      	movs	r3, #2
 8005c14:	e07e      	b.n	8005d14 <HAL_RTC_SetDate+0x11c>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2221      	movs	r2, #33	; 0x21
 8005c22:	2102      	movs	r1, #2
 8005c24:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10e      	bne.n	8005c4a <HAL_RTC_SetDate+0x52>
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	785b      	ldrb	r3, [r3, #1]
 8005c30:	001a      	movs	r2, r3
 8005c32:	2310      	movs	r3, #16
 8005c34:	4013      	ands	r3, r2
 8005c36:	d008      	beq.n	8005c4a <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	785b      	ldrb	r3, [r3, #1]
 8005c3c:	2210      	movs	r2, #16
 8005c3e:	4393      	bics	r3, r2
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	330a      	adds	r3, #10
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d11c      	bne.n	8005c8a <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	78db      	ldrb	r3, [r3, #3]
 8005c54:	0018      	movs	r0, r3
 8005c56:	f000 faf9 	bl	800624c <RTC_ByteToBcd2>
 8005c5a:	0003      	movs	r3, r0
 8005c5c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	0018      	movs	r0, r3
 8005c64:	f000 faf2 	bl	800624c <RTC_ByteToBcd2>
 8005c68:	0003      	movs	r3, r0
 8005c6a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c6c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	789b      	ldrb	r3, [r3, #2]
 8005c72:	0018      	movs	r0, r3
 8005c74:	f000 faea 	bl	800624c <RTC_ByteToBcd2>
 8005c78:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c7a:	0022      	movs	r2, r4
 8005c7c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	e00e      	b.n	8005ca8 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	78db      	ldrb	r3, [r3, #3]
 8005c8e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	785b      	ldrb	r3, [r3, #1]
 8005c94:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c96:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c9c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	22ca      	movs	r2, #202	; 0xca
 8005cae:	625a      	str	r2, [r3, #36]	; 0x24
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2253      	movs	r2, #83	; 0x53
 8005cb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005cb8:	2513      	movs	r5, #19
 8005cba:	197c      	adds	r4, r7, r5
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	f000 fa56 	bl	8006170 <RTC_EnterInitMode>
 8005cc4:	0003      	movs	r3, r0
 8005cc6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8005cc8:	0028      	movs	r0, r5
 8005cca:	183b      	adds	r3, r7, r0
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10c      	bne.n	8005cec <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4910      	ldr	r1, [pc, #64]	; (8005d1c <HAL_RTC_SetDate+0x124>)
 8005cda:	400a      	ands	r2, r1
 8005cdc:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005cde:	183c      	adds	r4, r7, r0
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	f000 fa88 	bl	80061f8 <RTC_ExitInitMode>
 8005ce8:	0003      	movs	r3, r0
 8005cea:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8005cec:	2313      	movs	r3, #19
 8005cee:	18fb      	adds	r3, r7, r3
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d103      	bne.n	8005cfe <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2221      	movs	r2, #33	; 0x21
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	22ff      	movs	r2, #255	; 0xff
 8005d04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	5499      	strb	r1, [r3, r2]

  return status;
 8005d0e:	2313      	movs	r3, #19
 8005d10:	18fb      	adds	r3, r7, r3
 8005d12:	781b      	ldrb	r3, [r3, #0]
}
 8005d14:	0018      	movs	r0, r3
 8005d16:	46bd      	mov	sp, r7
 8005d18:	b006      	add	sp, #24
 8005d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8005d1c:	00ffff3f 	.word	0x00ffff3f

08005d20 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	4a21      	ldr	r2, [pc, #132]	; (8005dbc <HAL_RTC_GetDate+0x9c>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	0c1b      	lsrs	r3, r3, #16
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	0a1b      	lsrs	r3, r3, #8
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	221f      	movs	r2, #31
 8005d4e:	4013      	ands	r3, r2
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	223f      	movs	r2, #63	; 0x3f
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	0b5b      	lsrs	r3, r3, #13
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2207      	movs	r2, #7
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d11a      	bne.n	8005db0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	78db      	ldrb	r3, [r3, #3]
 8005d7e:	0018      	movs	r0, r3
 8005d80:	f000 fa85 	bl	800628e <RTC_Bcd2ToByte>
 8005d84:	0003      	movs	r3, r0
 8005d86:	001a      	movs	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	785b      	ldrb	r3, [r3, #1]
 8005d90:	0018      	movs	r0, r3
 8005d92:	f000 fa7c 	bl	800628e <RTC_Bcd2ToByte>
 8005d96:	0003      	movs	r3, r0
 8005d98:	001a      	movs	r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	789b      	ldrb	r3, [r3, #2]
 8005da2:	0018      	movs	r0, r3
 8005da4:	f000 fa73 	bl	800628e <RTC_Bcd2ToByte>
 8005da8:	0003      	movs	r3, r0
 8005daa:	001a      	movs	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	0018      	movs	r0, r3
 8005db4:	46bd      	mov	sp, r7
 8005db6:	b006      	add	sp, #24
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	00ffff3f 	.word	0x00ffff3f

08005dc0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005dc0:	b590      	push	{r4, r7, lr}
 8005dc2:	b089      	sub	sp, #36	; 0x24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005dcc:	4ba7      	ldr	r3, [pc, #668]	; (800606c <HAL_RTC_SetAlarm_IT+0x2ac>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	22fa      	movs	r2, #250	; 0xfa
 8005dd2:	01d1      	lsls	r1, r2, #7
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	f7fa f9a9 	bl	800012c <__udivsi3>
 8005dda:	0003      	movs	r3, r0
 8005ddc:	001a      	movs	r2, r3
 8005dde:	0013      	movs	r3, r2
 8005de0:	015b      	lsls	r3, r3, #5
 8005de2:	1a9b      	subs	r3, r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	189b      	adds	r3, r3, r2
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2220      	movs	r2, #32
 8005df8:	5c9b      	ldrb	r3, [r3, r2]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d101      	bne.n	8005e02 <HAL_RTC_SetAlarm_IT+0x42>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e130      	b.n	8006064 <HAL_RTC_SetAlarm_IT+0x2a4>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2220      	movs	r2, #32
 8005e06:	2101      	movs	r1, #1
 8005e08:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2221      	movs	r2, #33	; 0x21
 8005e0e:	2102      	movs	r1, #2
 8005e10:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d136      	bne.n	8005e86 <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	2240      	movs	r2, #64	; 0x40
 8005e20:	4013      	ands	r3, r2
 8005e22:	d102      	bne.n	8005e2a <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2200      	movs	r2, #0
 8005e28:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	0018      	movs	r0, r3
 8005e30:	f000 fa0c 	bl	800624c <RTC_ByteToBcd2>
 8005e34:	0003      	movs	r3, r0
 8005e36:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	f000 fa05 	bl	800624c <RTC_ByteToBcd2>
 8005e42:	0003      	movs	r3, r0
 8005e44:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005e46:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	789b      	ldrb	r3, [r3, #2]
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f000 f9fd 	bl	800624c <RTC_ByteToBcd2>
 8005e52:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005e54:	0022      	movs	r2, r4
 8005e56:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	78db      	ldrb	r3, [r3, #3]
 8005e5c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2220      	movs	r2, #32
 8005e66:	5c9b      	ldrb	r3, [r3, r2]
 8005e68:	0018      	movs	r0, r3
 8005e6a:	f000 f9ef 	bl	800624c <RTC_ByteToBcd2>
 8005e6e:	0003      	movs	r3, r0
 8005e70:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005e72:	0022      	movs	r2, r4
 8005e74:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005e7a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61fb      	str	r3, [r7, #28]
 8005e84:	e022      	b.n	8005ecc <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	2240      	movs	r2, #64	; 0x40
 8005e8e:	4013      	ands	r3, r2
 8005e90:	d102      	bne.n	8005e98 <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2200      	movs	r2, #0
 8005e96:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	785b      	ldrb	r3, [r3, #1]
 8005ea2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005ea4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005eaa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	78db      	ldrb	r3, [r3, #3]
 8005eb0:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005eb2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2120      	movs	r1, #32
 8005eb8:	5c5b      	ldrb	r3, [r3, r1]
 8005eba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005ebc:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005ec2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	22ca      	movs	r2, #202	; 0xca
 8005ede:	625a      	str	r2, [r3, #36]	; 0x24
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2253      	movs	r2, #83	; 0x53
 8005ee6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eec:	2380      	movs	r3, #128	; 0x80
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d146      	bne.n	8005f82 <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	495c      	ldr	r1, [pc, #368]	; (8006070 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8005f00:	400a      	ands	r2, r1
 8005f02:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	22ff      	movs	r2, #255	; 0xff
 8005f0c:	401a      	ands	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4958      	ldr	r1, [pc, #352]	; (8006074 <HAL_RTC_SetAlarm_IT+0x2b4>)
 8005f14:	430a      	orrs	r2, r1
 8005f16:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10d      	bne.n	8005f40 <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	22ff      	movs	r2, #255	; 0xff
 8005f2a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2221      	movs	r2, #33	; 0x21
 8005f30:	2103      	movs	r1, #3
 8005f32:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2220      	movs	r2, #32
 8005f38:	2100      	movs	r1, #0
 8005f3a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e091      	b.n	8006064 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	4013      	ands	r3, r2
 8005f4a:	d0e5      	beq.n	8005f18 <HAL_RTC_SetAlarm_IT+0x158>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2180      	movs	r1, #128	; 0x80
 8005f68:	0049      	lsls	r1, r1, #1
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2180      	movs	r1, #128	; 0x80
 8005f7a:	0149      	lsls	r1, r1, #5
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	609a      	str	r2, [r3, #8]
 8005f80:	e055      	b.n	800602e <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	493a      	ldr	r1, [pc, #232]	; (8006078 <HAL_RTC_SetAlarm_IT+0x2b8>)
 8005f8e:	400a      	ands	r2, r1
 8005f90:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	22ff      	movs	r2, #255	; 0xff
 8005f9a:	401a      	ands	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4936      	ldr	r1, [pc, #216]	; (800607c <HAL_RTC_SetAlarm_IT+0x2bc>)
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005fa6:	4b31      	ldr	r3, [pc, #196]	; (800606c <HAL_RTC_SetAlarm_IT+0x2ac>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	22fa      	movs	r2, #250	; 0xfa
 8005fac:	01d1      	lsls	r1, r2, #7
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f7fa f8bc 	bl	800012c <__udivsi3>
 8005fb4:	0003      	movs	r3, r0
 8005fb6:	001a      	movs	r2, r3
 8005fb8:	0013      	movs	r3, r2
 8005fba:	015b      	lsls	r3, r3, #5
 8005fbc:	1a9b      	subs	r3, r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	189b      	adds	r3, r3, r2
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10d      	bne.n	8005fee <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	22ff      	movs	r2, #255	; 0xff
 8005fd8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2221      	movs	r2, #33	; 0x21
 8005fde:	2103      	movs	r1, #3
 8005fe0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e03a      	b.n	8006064 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	d0e5      	beq.n	8005fc6 <HAL_RTC_SetAlarm_IT+0x206>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2180      	movs	r1, #128	; 0x80
 8006016:	0089      	lsls	r1, r1, #2
 8006018:	430a      	orrs	r2, r1
 800601a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2180      	movs	r1, #128	; 0x80
 8006028:	0189      	lsls	r1, r1, #6
 800602a:	430a      	orrs	r2, r1
 800602c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800602e:	4b14      	ldr	r3, [pc, #80]	; (8006080 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	4b13      	ldr	r3, [pc, #76]	; (8006080 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8006034:	2180      	movs	r1, #128	; 0x80
 8006036:	0289      	lsls	r1, r1, #10
 8006038:	430a      	orrs	r2, r1
 800603a:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800603c:	4b10      	ldr	r3, [pc, #64]	; (8006080 <HAL_RTC_SetAlarm_IT+0x2c0>)
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	4b0f      	ldr	r3, [pc, #60]	; (8006080 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8006042:	2180      	movs	r1, #128	; 0x80
 8006044:	0289      	lsls	r1, r1, #10
 8006046:	430a      	orrs	r2, r1
 8006048:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	22ff      	movs	r2, #255	; 0xff
 8006050:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2221      	movs	r2, #33	; 0x21
 8006056:	2101      	movs	r1, #1
 8006058:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2220      	movs	r2, #32
 800605e:	2100      	movs	r1, #0
 8006060:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	0018      	movs	r0, r3
 8006066:	46bd      	mov	sp, r7
 8006068:	b009      	add	sp, #36	; 0x24
 800606a:	bd90      	pop	{r4, r7, pc}
 800606c:	20000000 	.word	0x20000000
 8006070:	fffffeff 	.word	0xfffffeff
 8006074:	fffffe7f 	.word	0xfffffe7f
 8006078:	fffffdff 	.word	0xfffffdff
 800607c:	fffffd7f 	.word	0xfffffd7f
 8006080:	40010400 	.word	0x40010400

08006084 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800608c:	4b21      	ldr	r3, [pc, #132]	; (8006114 <HAL_RTC_AlarmIRQHandler+0x90>)
 800608e:	2280      	movs	r2, #128	; 0x80
 8006090:	0292      	lsls	r2, r2, #10
 8006092:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	2380      	movs	r3, #128	; 0x80
 800609c:	015b      	lsls	r3, r3, #5
 800609e:	4013      	ands	r3, r2
 80060a0:	d014      	beq.n	80060cc <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	2380      	movs	r3, #128	; 0x80
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	4013      	ands	r3, r2
 80060ae:	d00d      	beq.n	80060cc <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	22ff      	movs	r2, #255	; 0xff
 80060b8:	401a      	ands	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4916      	ldr	r1, [pc, #88]	; (8006118 <HAL_RTC_AlarmIRQHandler+0x94>)
 80060c0:	430a      	orrs	r2, r1
 80060c2:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	0018      	movs	r0, r3
 80060c8:	f7fd f808 	bl	80030dc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	2380      	movs	r3, #128	; 0x80
 80060d4:	019b      	lsls	r3, r3, #6
 80060d6:	4013      	ands	r3, r2
 80060d8:	d014      	beq.n	8006104 <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	2380      	movs	r3, #128	; 0x80
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4013      	ands	r3, r2
 80060e6:	d00d      	beq.n	8006104 <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	22ff      	movs	r2, #255	; 0xff
 80060f0:	401a      	ands	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4909      	ldr	r1, [pc, #36]	; (800611c <HAL_RTC_AlarmIRQHandler+0x98>)
 80060f8:	430a      	orrs	r2, r1
 80060fa:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	0018      	movs	r0, r3
 8006100:	f000 f9f4 	bl	80064ec <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2221      	movs	r2, #33	; 0x21
 8006108:	2101      	movs	r1, #1
 800610a:	5499      	strb	r1, [r3, r2]
}
 800610c:	46c0      	nop			; (mov r8, r8)
 800610e:	46bd      	mov	sp, r7
 8006110:	b002      	add	sp, #8
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40010400 	.word	0x40010400
 8006118:	fffffe7f 	.word	0xfffffe7f
 800611c:	fffffd7f 	.word	0xfffffd7f

08006120 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006128:	2300      	movs	r3, #0
 800612a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a0e      	ldr	r2, [pc, #56]	; (800616c <HAL_RTC_WaitForSynchro+0x4c>)
 8006132:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006134:	f7fd fbd0 	bl	80038d8 <HAL_GetTick>
 8006138:	0003      	movs	r3, r0
 800613a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800613c:	e00a      	b.n	8006154 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800613e:	f7fd fbcb 	bl	80038d8 <HAL_GetTick>
 8006142:	0002      	movs	r2, r0
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	1ad2      	subs	r2, r2, r3
 8006148:	23fa      	movs	r3, #250	; 0xfa
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	429a      	cmp	r2, r3
 800614e:	d901      	bls.n	8006154 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e006      	b.n	8006162 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	2220      	movs	r2, #32
 800615c:	4013      	ands	r3, r2
 800615e:	d0ee      	beq.n	800613e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	0018      	movs	r0, r3
 8006164:	46bd      	mov	sp, r7
 8006166:	b004      	add	sp, #16
 8006168:	bd80      	pop	{r7, pc}
 800616a:	46c0      	nop			; (mov r8, r8)
 800616c:	00017f5f 	.word	0x00017f5f

08006170 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800617c:	230f      	movs	r3, #15
 800617e:	18fb      	adds	r3, r7, r3
 8006180:	2200      	movs	r2, #0
 8006182:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	2240      	movs	r2, #64	; 0x40
 800618c:	4013      	ands	r3, r2
 800618e:	d12c      	bne.n	80061ea <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2180      	movs	r1, #128	; 0x80
 800619c:	430a      	orrs	r2, r1
 800619e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061a0:	f7fd fb9a 	bl	80038d8 <HAL_GetTick>
 80061a4:	0003      	movs	r3, r0
 80061a6:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80061a8:	e014      	b.n	80061d4 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061aa:	f7fd fb95 	bl	80038d8 <HAL_GetTick>
 80061ae:	0002      	movs	r2, r0
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	1ad2      	subs	r2, r2, r3
 80061b4:	200f      	movs	r0, #15
 80061b6:	183b      	adds	r3, r7, r0
 80061b8:	1839      	adds	r1, r7, r0
 80061ba:	7809      	ldrb	r1, [r1, #0]
 80061bc:	7019      	strb	r1, [r3, #0]
 80061be:	23fa      	movs	r3, #250	; 0xfa
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d906      	bls.n	80061d4 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2221      	movs	r2, #33	; 0x21
 80061ca:	2104      	movs	r1, #4
 80061cc:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80061ce:	183b      	adds	r3, r7, r0
 80061d0:	2201      	movs	r2, #1
 80061d2:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	2240      	movs	r2, #64	; 0x40
 80061dc:	4013      	ands	r3, r2
 80061de:	d104      	bne.n	80061ea <RTC_EnterInitMode+0x7a>
 80061e0:	230f      	movs	r3, #15
 80061e2:	18fb      	adds	r3, r7, r3
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d1df      	bne.n	80061aa <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80061ea:	230f      	movs	r3, #15
 80061ec:	18fb      	adds	r3, r7, r3
 80061ee:	781b      	ldrb	r3, [r3, #0]
}
 80061f0:	0018      	movs	r0, r3
 80061f2:	46bd      	mov	sp, r7
 80061f4:	b004      	add	sp, #16
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80061f8:	b590      	push	{r4, r7, lr}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006200:	240f      	movs	r4, #15
 8006202:	193b      	adds	r3, r7, r4
 8006204:	2200      	movs	r2, #0
 8006206:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2180      	movs	r1, #128	; 0x80
 8006214:	438a      	bics	r2, r1
 8006216:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	2220      	movs	r2, #32
 8006220:	4013      	ands	r3, r2
 8006222:	d10c      	bne.n	800623e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	0018      	movs	r0, r3
 8006228:	f7ff ff7a 	bl	8006120 <HAL_RTC_WaitForSynchro>
 800622c:	1e03      	subs	r3, r0, #0
 800622e:	d006      	beq.n	800623e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2221      	movs	r2, #33	; 0x21
 8006234:	2104      	movs	r1, #4
 8006236:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8006238:	193b      	adds	r3, r7, r4
 800623a:	2201      	movs	r2, #1
 800623c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800623e:	230f      	movs	r3, #15
 8006240:	18fb      	adds	r3, r7, r3
 8006242:	781b      	ldrb	r3, [r3, #0]
}
 8006244:	0018      	movs	r0, r3
 8006246:	46bd      	mov	sp, r7
 8006248:	b005      	add	sp, #20
 800624a:	bd90      	pop	{r4, r7, pc}

0800624c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	0002      	movs	r2, r0
 8006254:	1dfb      	adds	r3, r7, #7
 8006256:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800625c:	e007      	b.n	800626e <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3301      	adds	r3, #1
 8006262:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006264:	1dfb      	adds	r3, r7, #7
 8006266:	1dfa      	adds	r2, r7, #7
 8006268:	7812      	ldrb	r2, [r2, #0]
 800626a:	3a0a      	subs	r2, #10
 800626c:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 800626e:	1dfb      	adds	r3, r7, #7
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b09      	cmp	r3, #9
 8006274:	d8f3      	bhi.n	800625e <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	b2db      	uxtb	r3, r3
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	b2da      	uxtb	r2, r3
 800627e:	1dfb      	adds	r3, r7, #7
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	4313      	orrs	r3, r2
 8006284:	b2db      	uxtb	r3, r3
}
 8006286:	0018      	movs	r0, r3
 8006288:	46bd      	mov	sp, r7
 800628a:	b004      	add	sp, #16
 800628c:	bd80      	pop	{r7, pc}

0800628e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b084      	sub	sp, #16
 8006292:	af00      	add	r7, sp, #0
 8006294:	0002      	movs	r2, r0
 8006296:	1dfb      	adds	r3, r7, #7
 8006298:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800629e:	1dfb      	adds	r3, r7, #7
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	091b      	lsrs	r3, r3, #4
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	001a      	movs	r2, r3
 80062a8:	0013      	movs	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	189b      	adds	r3, r3, r2
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	1dfb      	adds	r3, r7, #7
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	210f      	movs	r1, #15
 80062bc:	400b      	ands	r3, r1
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	18d3      	adds	r3, r2, r3
 80062c2:	b2db      	uxtb	r3, r3
}
 80062c4:	0018      	movs	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	b004      	add	sp, #16
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80062d8:	4b64      	ldr	r3, [pc, #400]	; (800646c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	22fa      	movs	r2, #250	; 0xfa
 80062de:	01d1      	lsls	r1, r2, #7
 80062e0:	0018      	movs	r0, r3
 80062e2:	f7f9 ff23 	bl	800012c <__udivsi3>
 80062e6:	0003      	movs	r3, r0
 80062e8:	001a      	movs	r2, r3
 80062ea:	0013      	movs	r3, r2
 80062ec:	015b      	lsls	r3, r3, #5
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	189b      	adds	r3, r3, r2
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2220      	movs	r2, #32
 80062fc:	5c9b      	ldrb	r3, [r3, r2]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d101      	bne.n	8006306 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8006302:	2302      	movs	r3, #2
 8006304:	e0ad      	b.n	8006462 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2220      	movs	r2, #32
 800630a:	2101      	movs	r1, #1
 800630c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2221      	movs	r2, #33	; 0x21
 8006312:	2102      	movs	r1, #2
 8006314:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	22ca      	movs	r2, #202	; 0xca
 800631c:	625a      	str	r2, [r3, #36]	; 0x24
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2253      	movs	r2, #83	; 0x53
 8006324:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	2380      	movs	r3, #128	; 0x80
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	4013      	ands	r3, r2
 8006332:	d019      	beq.n	8006368 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	3b01      	subs	r3, #1
 8006338:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10d      	bne.n	800635c <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	22ff      	movs	r2, #255	; 0xff
 8006346:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2221      	movs	r2, #33	; 0x21
 800634c:	2103      	movs	r1, #3
 800634e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2220      	movs	r2, #32
 8006354:	2100      	movs	r1, #0
 8006356:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e082      	b.n	8006462 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	2204      	movs	r2, #4
 8006364:	4013      	ands	r3, r2
 8006366:	d1e5      	bne.n	8006334 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689a      	ldr	r2, [r3, #8]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	493f      	ldr	r1, [pc, #252]	; (8006470 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8006374:	400a      	ands	r2, r1
 8006376:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	22ff      	movs	r2, #255	; 0xff
 8006380:	401a      	ands	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	493b      	ldr	r1, [pc, #236]	; (8006474 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8006388:	430a      	orrs	r2, r1
 800638a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800638c:	4b37      	ldr	r3, [pc, #220]	; (800646c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	22fa      	movs	r2, #250	; 0xfa
 8006392:	01d1      	lsls	r1, r2, #7
 8006394:	0018      	movs	r0, r3
 8006396:	f7f9 fec9 	bl	800012c <__udivsi3>
 800639a:	0003      	movs	r3, r0
 800639c:	001a      	movs	r2, r3
 800639e:	0013      	movs	r3, r2
 80063a0:	015b      	lsls	r3, r3, #5
 80063a2:	1a9b      	subs	r3, r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	189b      	adds	r3, r3, r2
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10d      	bne.n	80063d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	22ff      	movs	r2, #255	; 0xff
 80063be:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2221      	movs	r2, #33	; 0x21
 80063c4:	2103      	movs	r1, #3
 80063c6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2220      	movs	r2, #32
 80063cc:	2100      	movs	r1, #0
 80063ce:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e046      	b.n	8006462 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	2204      	movs	r2, #4
 80063dc:	4013      	ands	r3, r2
 80063de:	d0e5      	beq.n	80063ac <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2107      	movs	r1, #7
 80063ec:	438a      	bics	r2, r1
 80063ee:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6899      	ldr	r1, [r3, #8]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006408:	4b1b      	ldr	r3, [pc, #108]	; (8006478 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	4b1a      	ldr	r3, [pc, #104]	; (8006478 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800640e:	2180      	movs	r1, #128	; 0x80
 8006410:	0349      	lsls	r1, r1, #13
 8006412:	430a      	orrs	r2, r1
 8006414:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006416:	4b18      	ldr	r3, [pc, #96]	; (8006478 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	4b17      	ldr	r3, [pc, #92]	; (8006478 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800641c:	2180      	movs	r1, #128	; 0x80
 800641e:	0349      	lsls	r1, r1, #13
 8006420:	430a      	orrs	r2, r1
 8006422:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689a      	ldr	r2, [r3, #8]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2180      	movs	r1, #128	; 0x80
 8006430:	01c9      	lsls	r1, r1, #7
 8006432:	430a      	orrs	r2, r1
 8006434:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2180      	movs	r1, #128	; 0x80
 8006442:	00c9      	lsls	r1, r1, #3
 8006444:	430a      	orrs	r2, r1
 8006446:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	22ff      	movs	r2, #255	; 0xff
 800644e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2221      	movs	r2, #33	; 0x21
 8006454:	2101      	movs	r1, #1
 8006456:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2220      	movs	r2, #32
 800645c:	2100      	movs	r1, #0
 800645e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	0018      	movs	r0, r3
 8006464:	46bd      	mov	sp, r7
 8006466:	b006      	add	sp, #24
 8006468:	bd80      	pop	{r7, pc}
 800646a:	46c0      	nop			; (mov r8, r8)
 800646c:	20000000 	.word	0x20000000
 8006470:	fffffbff 	.word	0xfffffbff
 8006474:	fffffb7f 	.word	0xfffffb7f
 8006478:	40010400 	.word	0x40010400

0800647c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006484:	4b13      	ldr	r3, [pc, #76]	; (80064d4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8006486:	2280      	movs	r2, #128	; 0x80
 8006488:	0352      	lsls	r2, r2, #13
 800648a:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	2380      	movs	r3, #128	; 0x80
 8006494:	01db      	lsls	r3, r3, #7
 8006496:	4013      	ands	r3, r2
 8006498:	d014      	beq.n	80064c4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68da      	ldr	r2, [r3, #12]
 80064a0:	2380      	movs	r3, #128	; 0x80
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	4013      	ands	r3, r2
 80064a6:	d00d      	beq.n	80064c4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	22ff      	movs	r2, #255	; 0xff
 80064b0:	401a      	ands	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4908      	ldr	r1, [pc, #32]	; (80064d8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80064b8:	430a      	orrs	r2, r1
 80064ba:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	0018      	movs	r0, r3
 80064c0:	f000 f80c 	bl	80064dc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2221      	movs	r2, #33	; 0x21
 80064c8:	2101      	movs	r1, #1
 80064ca:	5499      	strb	r1, [r3, r2]
}
 80064cc:	46c0      	nop			; (mov r8, r8)
 80064ce:	46bd      	mov	sp, r7
 80064d0:	b002      	add	sp, #8
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	40010400 	.word	0x40010400
 80064d8:	fffffb7f 	.word	0xfffffb7f

080064dc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80064e4:	46c0      	nop			; (mov r8, r8)
 80064e6:	46bd      	mov	sp, r7
 80064e8:	b002      	add	sp, #8
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80064f4:	46c0      	nop			; (mov r8, r8)
 80064f6:	46bd      	mov	sp, r7
 80064f8:	b002      	add	sp, #8
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e044      	b.n	8006598 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006512:	2b00      	cmp	r3, #0
 8006514:	d107      	bne.n	8006526 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2278      	movs	r2, #120	; 0x78
 800651a:	2100      	movs	r1, #0
 800651c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	0018      	movs	r0, r3
 8006522:	f7fc fef3 	bl	800330c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2224      	movs	r2, #36	; 0x24
 800652a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2101      	movs	r1, #1
 8006538:	438a      	bics	r2, r1
 800653a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	0018      	movs	r0, r3
 8006540:	f000 f8d0 	bl	80066e4 <UART_SetConfig>
 8006544:	0003      	movs	r3, r0
 8006546:	2b01      	cmp	r3, #1
 8006548:	d101      	bne.n	800654e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e024      	b.n	8006598 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	0018      	movs	r0, r3
 800655a:	f000 fb47 	bl	8006bec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	490d      	ldr	r1, [pc, #52]	; (80065a0 <HAL_UART_Init+0xa4>)
 800656a:	400a      	ands	r2, r1
 800656c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	212a      	movs	r1, #42	; 0x2a
 800657a:	438a      	bics	r2, r1
 800657c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2101      	movs	r1, #1
 800658a:	430a      	orrs	r2, r1
 800658c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	0018      	movs	r0, r3
 8006592:	f000 fbdf 	bl	8006d54 <UART_CheckIdleState>
 8006596:	0003      	movs	r3, r0
}
 8006598:	0018      	movs	r0, r3
 800659a:	46bd      	mov	sp, r7
 800659c:	b002      	add	sp, #8
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	ffffb7ff 	.word	0xffffb7ff

080065a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b08a      	sub	sp, #40	; 0x28
 80065a8:	af02      	add	r7, sp, #8
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	603b      	str	r3, [r7, #0]
 80065b0:	1dbb      	adds	r3, r7, #6
 80065b2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d000      	beq.n	80065be <HAL_UART_Transmit+0x1a>
 80065bc:	e08c      	b.n	80066d8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <HAL_UART_Transmit+0x28>
 80065c4:	1dbb      	adds	r3, r7, #6
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e084      	b.n	80066da <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	2380      	movs	r3, #128	; 0x80
 80065d6:	015b      	lsls	r3, r3, #5
 80065d8:	429a      	cmp	r2, r3
 80065da:	d109      	bne.n	80065f0 <HAL_UART_Transmit+0x4c>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d105      	bne.n	80065f0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2201      	movs	r2, #1
 80065e8:	4013      	ands	r3, r2
 80065ea:	d001      	beq.n	80065f0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e074      	b.n	80066da <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2284      	movs	r2, #132	; 0x84
 80065f4:	2100      	movs	r1, #0
 80065f6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2221      	movs	r2, #33	; 0x21
 80065fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065fe:	f7fd f96b 	bl	80038d8 <HAL_GetTick>
 8006602:	0003      	movs	r3, r0
 8006604:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	1dba      	adds	r2, r7, #6
 800660a:	2150      	movs	r1, #80	; 0x50
 800660c:	8812      	ldrh	r2, [r2, #0]
 800660e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	1dba      	adds	r2, r7, #6
 8006614:	2152      	movs	r1, #82	; 0x52
 8006616:	8812      	ldrh	r2, [r2, #0]
 8006618:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	689a      	ldr	r2, [r3, #8]
 800661e:	2380      	movs	r3, #128	; 0x80
 8006620:	015b      	lsls	r3, r3, #5
 8006622:	429a      	cmp	r2, r3
 8006624:	d108      	bne.n	8006638 <HAL_UART_Transmit+0x94>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d104      	bne.n	8006638 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800662e:	2300      	movs	r3, #0
 8006630:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	e003      	b.n	8006640 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800663c:	2300      	movs	r3, #0
 800663e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006640:	e02f      	b.n	80066a2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	0013      	movs	r3, r2
 800664c:	2200      	movs	r2, #0
 800664e:	2180      	movs	r1, #128	; 0x80
 8006650:	f000 fc28 	bl	8006ea4 <UART_WaitOnFlagUntilTimeout>
 8006654:	1e03      	subs	r3, r0, #0
 8006656:	d004      	beq.n	8006662 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2220      	movs	r2, #32
 800665c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e03b      	b.n	80066da <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10b      	bne.n	8006680 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	001a      	movs	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	05d2      	lsls	r2, r2, #23
 8006674:	0dd2      	lsrs	r2, r2, #23
 8006676:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	3302      	adds	r3, #2
 800667c:	61bb      	str	r3, [r7, #24]
 800667e:	e007      	b.n	8006690 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	781a      	ldrb	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	3301      	adds	r3, #1
 800668e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2252      	movs	r2, #82	; 0x52
 8006694:	5a9b      	ldrh	r3, [r3, r2]
 8006696:	b29b      	uxth	r3, r3
 8006698:	3b01      	subs	r3, #1
 800669a:	b299      	uxth	r1, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2252      	movs	r2, #82	; 0x52
 80066a0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2252      	movs	r2, #82	; 0x52
 80066a6:	5a9b      	ldrh	r3, [r3, r2]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1c9      	bne.n	8006642 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	0013      	movs	r3, r2
 80066b8:	2200      	movs	r2, #0
 80066ba:	2140      	movs	r1, #64	; 0x40
 80066bc:	f000 fbf2 	bl	8006ea4 <UART_WaitOnFlagUntilTimeout>
 80066c0:	1e03      	subs	r3, r0, #0
 80066c2:	d004      	beq.n	80066ce <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2220      	movs	r2, #32
 80066c8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e005      	b.n	80066da <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2220      	movs	r2, #32
 80066d2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	e000      	b.n	80066da <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80066d8:	2302      	movs	r3, #2
  }
}
 80066da:	0018      	movs	r0, r3
 80066dc:	46bd      	mov	sp, r7
 80066de:	b008      	add	sp, #32
 80066e0:	bd80      	pop	{r7, pc}
	...

080066e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066e4:	b5b0      	push	{r4, r5, r7, lr}
 80066e6:	b08e      	sub	sp, #56	; 0x38
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066ec:	231a      	movs	r3, #26
 80066ee:	2218      	movs	r2, #24
 80066f0:	189b      	adds	r3, r3, r2
 80066f2:	19db      	adds	r3, r3, r7
 80066f4:	2200      	movs	r2, #0
 80066f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	431a      	orrs	r2, r3
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	431a      	orrs	r2, r3
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	4313      	orrs	r3, r2
 800670e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4ac6      	ldr	r2, [pc, #792]	; (8006a30 <UART_SetConfig+0x34c>)
 8006718:	4013      	ands	r3, r2
 800671a:	0019      	movs	r1, r3
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006722:	430a      	orrs	r2, r1
 8006724:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	4ac1      	ldr	r2, [pc, #772]	; (8006a34 <UART_SetConfig+0x350>)
 800672e:	4013      	ands	r3, r2
 8006730:	0019      	movs	r1, r3
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4abb      	ldr	r2, [pc, #748]	; (8006a38 <UART_SetConfig+0x354>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d004      	beq.n	8006758 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006754:	4313      	orrs	r3, r2
 8006756:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	4ab7      	ldr	r2, [pc, #732]	; (8006a3c <UART_SetConfig+0x358>)
 8006760:	4013      	ands	r3, r2
 8006762:	0019      	movs	r1, r3
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800676a:	430a      	orrs	r2, r1
 800676c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4ab3      	ldr	r2, [pc, #716]	; (8006a40 <UART_SetConfig+0x35c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d131      	bne.n	80067dc <UART_SetConfig+0xf8>
 8006778:	4bb2      	ldr	r3, [pc, #712]	; (8006a44 <UART_SetConfig+0x360>)
 800677a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677c:	2203      	movs	r2, #3
 800677e:	4013      	ands	r3, r2
 8006780:	2b03      	cmp	r3, #3
 8006782:	d01d      	beq.n	80067c0 <UART_SetConfig+0xdc>
 8006784:	d823      	bhi.n	80067ce <UART_SetConfig+0xea>
 8006786:	2b02      	cmp	r3, #2
 8006788:	d00c      	beq.n	80067a4 <UART_SetConfig+0xc0>
 800678a:	d820      	bhi.n	80067ce <UART_SetConfig+0xea>
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <UART_SetConfig+0xb2>
 8006790:	2b01      	cmp	r3, #1
 8006792:	d00e      	beq.n	80067b2 <UART_SetConfig+0xce>
 8006794:	e01b      	b.n	80067ce <UART_SetConfig+0xea>
 8006796:	231b      	movs	r3, #27
 8006798:	2218      	movs	r2, #24
 800679a:	189b      	adds	r3, r3, r2
 800679c:	19db      	adds	r3, r3, r7
 800679e:	2201      	movs	r2, #1
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	e09c      	b.n	80068de <UART_SetConfig+0x1fa>
 80067a4:	231b      	movs	r3, #27
 80067a6:	2218      	movs	r2, #24
 80067a8:	189b      	adds	r3, r3, r2
 80067aa:	19db      	adds	r3, r3, r7
 80067ac:	2202      	movs	r2, #2
 80067ae:	701a      	strb	r2, [r3, #0]
 80067b0:	e095      	b.n	80068de <UART_SetConfig+0x1fa>
 80067b2:	231b      	movs	r3, #27
 80067b4:	2218      	movs	r2, #24
 80067b6:	189b      	adds	r3, r3, r2
 80067b8:	19db      	adds	r3, r3, r7
 80067ba:	2204      	movs	r2, #4
 80067bc:	701a      	strb	r2, [r3, #0]
 80067be:	e08e      	b.n	80068de <UART_SetConfig+0x1fa>
 80067c0:	231b      	movs	r3, #27
 80067c2:	2218      	movs	r2, #24
 80067c4:	189b      	adds	r3, r3, r2
 80067c6:	19db      	adds	r3, r3, r7
 80067c8:	2208      	movs	r2, #8
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	e087      	b.n	80068de <UART_SetConfig+0x1fa>
 80067ce:	231b      	movs	r3, #27
 80067d0:	2218      	movs	r2, #24
 80067d2:	189b      	adds	r3, r3, r2
 80067d4:	19db      	adds	r3, r3, r7
 80067d6:	2210      	movs	r2, #16
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	e080      	b.n	80068de <UART_SetConfig+0x1fa>
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a99      	ldr	r2, [pc, #612]	; (8006a48 <UART_SetConfig+0x364>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d131      	bne.n	800684a <UART_SetConfig+0x166>
 80067e6:	4b97      	ldr	r3, [pc, #604]	; (8006a44 <UART_SetConfig+0x360>)
 80067e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ea:	220c      	movs	r2, #12
 80067ec:	4013      	ands	r3, r2
 80067ee:	2b0c      	cmp	r3, #12
 80067f0:	d01d      	beq.n	800682e <UART_SetConfig+0x14a>
 80067f2:	d823      	bhi.n	800683c <UART_SetConfig+0x158>
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	d00c      	beq.n	8006812 <UART_SetConfig+0x12e>
 80067f8:	d820      	bhi.n	800683c <UART_SetConfig+0x158>
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <UART_SetConfig+0x120>
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d00e      	beq.n	8006820 <UART_SetConfig+0x13c>
 8006802:	e01b      	b.n	800683c <UART_SetConfig+0x158>
 8006804:	231b      	movs	r3, #27
 8006806:	2218      	movs	r2, #24
 8006808:	189b      	adds	r3, r3, r2
 800680a:	19db      	adds	r3, r3, r7
 800680c:	2200      	movs	r2, #0
 800680e:	701a      	strb	r2, [r3, #0]
 8006810:	e065      	b.n	80068de <UART_SetConfig+0x1fa>
 8006812:	231b      	movs	r3, #27
 8006814:	2218      	movs	r2, #24
 8006816:	189b      	adds	r3, r3, r2
 8006818:	19db      	adds	r3, r3, r7
 800681a:	2202      	movs	r2, #2
 800681c:	701a      	strb	r2, [r3, #0]
 800681e:	e05e      	b.n	80068de <UART_SetConfig+0x1fa>
 8006820:	231b      	movs	r3, #27
 8006822:	2218      	movs	r2, #24
 8006824:	189b      	adds	r3, r3, r2
 8006826:	19db      	adds	r3, r3, r7
 8006828:	2204      	movs	r2, #4
 800682a:	701a      	strb	r2, [r3, #0]
 800682c:	e057      	b.n	80068de <UART_SetConfig+0x1fa>
 800682e:	231b      	movs	r3, #27
 8006830:	2218      	movs	r2, #24
 8006832:	189b      	adds	r3, r3, r2
 8006834:	19db      	adds	r3, r3, r7
 8006836:	2208      	movs	r2, #8
 8006838:	701a      	strb	r2, [r3, #0]
 800683a:	e050      	b.n	80068de <UART_SetConfig+0x1fa>
 800683c:	231b      	movs	r3, #27
 800683e:	2218      	movs	r2, #24
 8006840:	189b      	adds	r3, r3, r2
 8006842:	19db      	adds	r3, r3, r7
 8006844:	2210      	movs	r2, #16
 8006846:	701a      	strb	r2, [r3, #0]
 8006848:	e049      	b.n	80068de <UART_SetConfig+0x1fa>
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a7a      	ldr	r2, [pc, #488]	; (8006a38 <UART_SetConfig+0x354>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d13e      	bne.n	80068d2 <UART_SetConfig+0x1ee>
 8006854:	4b7b      	ldr	r3, [pc, #492]	; (8006a44 <UART_SetConfig+0x360>)
 8006856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006858:	23c0      	movs	r3, #192	; 0xc0
 800685a:	011b      	lsls	r3, r3, #4
 800685c:	4013      	ands	r3, r2
 800685e:	22c0      	movs	r2, #192	; 0xc0
 8006860:	0112      	lsls	r2, r2, #4
 8006862:	4293      	cmp	r3, r2
 8006864:	d027      	beq.n	80068b6 <UART_SetConfig+0x1d2>
 8006866:	22c0      	movs	r2, #192	; 0xc0
 8006868:	0112      	lsls	r2, r2, #4
 800686a:	4293      	cmp	r3, r2
 800686c:	d82a      	bhi.n	80068c4 <UART_SetConfig+0x1e0>
 800686e:	2280      	movs	r2, #128	; 0x80
 8006870:	0112      	lsls	r2, r2, #4
 8006872:	4293      	cmp	r3, r2
 8006874:	d011      	beq.n	800689a <UART_SetConfig+0x1b6>
 8006876:	2280      	movs	r2, #128	; 0x80
 8006878:	0112      	lsls	r2, r2, #4
 800687a:	4293      	cmp	r3, r2
 800687c:	d822      	bhi.n	80068c4 <UART_SetConfig+0x1e0>
 800687e:	2b00      	cmp	r3, #0
 8006880:	d004      	beq.n	800688c <UART_SetConfig+0x1a8>
 8006882:	2280      	movs	r2, #128	; 0x80
 8006884:	00d2      	lsls	r2, r2, #3
 8006886:	4293      	cmp	r3, r2
 8006888:	d00e      	beq.n	80068a8 <UART_SetConfig+0x1c4>
 800688a:	e01b      	b.n	80068c4 <UART_SetConfig+0x1e0>
 800688c:	231b      	movs	r3, #27
 800688e:	2218      	movs	r2, #24
 8006890:	189b      	adds	r3, r3, r2
 8006892:	19db      	adds	r3, r3, r7
 8006894:	2200      	movs	r2, #0
 8006896:	701a      	strb	r2, [r3, #0]
 8006898:	e021      	b.n	80068de <UART_SetConfig+0x1fa>
 800689a:	231b      	movs	r3, #27
 800689c:	2218      	movs	r2, #24
 800689e:	189b      	adds	r3, r3, r2
 80068a0:	19db      	adds	r3, r3, r7
 80068a2:	2202      	movs	r2, #2
 80068a4:	701a      	strb	r2, [r3, #0]
 80068a6:	e01a      	b.n	80068de <UART_SetConfig+0x1fa>
 80068a8:	231b      	movs	r3, #27
 80068aa:	2218      	movs	r2, #24
 80068ac:	189b      	adds	r3, r3, r2
 80068ae:	19db      	adds	r3, r3, r7
 80068b0:	2204      	movs	r2, #4
 80068b2:	701a      	strb	r2, [r3, #0]
 80068b4:	e013      	b.n	80068de <UART_SetConfig+0x1fa>
 80068b6:	231b      	movs	r3, #27
 80068b8:	2218      	movs	r2, #24
 80068ba:	189b      	adds	r3, r3, r2
 80068bc:	19db      	adds	r3, r3, r7
 80068be:	2208      	movs	r2, #8
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	e00c      	b.n	80068de <UART_SetConfig+0x1fa>
 80068c4:	231b      	movs	r3, #27
 80068c6:	2218      	movs	r2, #24
 80068c8:	189b      	adds	r3, r3, r2
 80068ca:	19db      	adds	r3, r3, r7
 80068cc:	2210      	movs	r2, #16
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	e005      	b.n	80068de <UART_SetConfig+0x1fa>
 80068d2:	231b      	movs	r3, #27
 80068d4:	2218      	movs	r2, #24
 80068d6:	189b      	adds	r3, r3, r2
 80068d8:	19db      	adds	r3, r3, r7
 80068da:	2210      	movs	r2, #16
 80068dc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a55      	ldr	r2, [pc, #340]	; (8006a38 <UART_SetConfig+0x354>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d000      	beq.n	80068ea <UART_SetConfig+0x206>
 80068e8:	e084      	b.n	80069f4 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068ea:	231b      	movs	r3, #27
 80068ec:	2218      	movs	r2, #24
 80068ee:	189b      	adds	r3, r3, r2
 80068f0:	19db      	adds	r3, r3, r7
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d01d      	beq.n	8006934 <UART_SetConfig+0x250>
 80068f8:	dc20      	bgt.n	800693c <UART_SetConfig+0x258>
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d015      	beq.n	800692a <UART_SetConfig+0x246>
 80068fe:	dc1d      	bgt.n	800693c <UART_SetConfig+0x258>
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <UART_SetConfig+0x226>
 8006904:	2b02      	cmp	r3, #2
 8006906:	d005      	beq.n	8006914 <UART_SetConfig+0x230>
 8006908:	e018      	b.n	800693c <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800690a:	f7fe fe17 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 800690e:	0003      	movs	r3, r0
 8006910:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006912:	e01c      	b.n	800694e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006914:	4b4b      	ldr	r3, [pc, #300]	; (8006a44 <UART_SetConfig+0x360>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2210      	movs	r2, #16
 800691a:	4013      	ands	r3, r2
 800691c:	d002      	beq.n	8006924 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800691e:	4b4b      	ldr	r3, [pc, #300]	; (8006a4c <UART_SetConfig+0x368>)
 8006920:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006922:	e014      	b.n	800694e <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8006924:	4b4a      	ldr	r3, [pc, #296]	; (8006a50 <UART_SetConfig+0x36c>)
 8006926:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006928:	e011      	b.n	800694e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800692a:	f7fe fd57 	bl	80053dc <HAL_RCC_GetSysClockFreq>
 800692e:	0003      	movs	r3, r0
 8006930:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006932:	e00c      	b.n	800694e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006934:	2380      	movs	r3, #128	; 0x80
 8006936:	021b      	lsls	r3, r3, #8
 8006938:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800693a:	e008      	b.n	800694e <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006940:	231a      	movs	r3, #26
 8006942:	2218      	movs	r2, #24
 8006944:	189b      	adds	r3, r3, r2
 8006946:	19db      	adds	r3, r3, r7
 8006948:	2201      	movs	r2, #1
 800694a:	701a      	strb	r2, [r3, #0]
        break;
 800694c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006950:	2b00      	cmp	r3, #0
 8006952:	d100      	bne.n	8006956 <UART_SetConfig+0x272>
 8006954:	e132      	b.n	8006bbc <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	0013      	movs	r3, r2
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	189b      	adds	r3, r3, r2
 8006960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006962:	429a      	cmp	r2, r3
 8006964:	d305      	bcc.n	8006972 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800696c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800696e:	429a      	cmp	r2, r3
 8006970:	d906      	bls.n	8006980 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8006972:	231a      	movs	r3, #26
 8006974:	2218      	movs	r2, #24
 8006976:	189b      	adds	r3, r3, r2
 8006978:	19db      	adds	r3, r3, r7
 800697a:	2201      	movs	r2, #1
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	e11d      	b.n	8006bbc <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	2300      	movs	r3, #0
 8006986:	617b      	str	r3, [r7, #20]
 8006988:	6939      	ldr	r1, [r7, #16]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	000b      	movs	r3, r1
 800698e:	0e1b      	lsrs	r3, r3, #24
 8006990:	0010      	movs	r0, r2
 8006992:	0205      	lsls	r5, r0, #8
 8006994:	431d      	orrs	r5, r3
 8006996:	000b      	movs	r3, r1
 8006998:	021c      	lsls	r4, r3, #8
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	085b      	lsrs	r3, r3, #1
 80069a0:	60bb      	str	r3, [r7, #8]
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	68b8      	ldr	r0, [r7, #8]
 80069a8:	68f9      	ldr	r1, [r7, #12]
 80069aa:	1900      	adds	r0, r0, r4
 80069ac:	4169      	adcs	r1, r5
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	603b      	str	r3, [r7, #0]
 80069b4:	2300      	movs	r3, #0
 80069b6:	607b      	str	r3, [r7, #4]
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f7f9 fc42 	bl	8000244 <__aeabi_uldivmod>
 80069c0:	0002      	movs	r2, r0
 80069c2:	000b      	movs	r3, r1
 80069c4:	0013      	movs	r3, r2
 80069c6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069ca:	23c0      	movs	r3, #192	; 0xc0
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d309      	bcc.n	80069e6 <UART_SetConfig+0x302>
 80069d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069d4:	2380      	movs	r3, #128	; 0x80
 80069d6:	035b      	lsls	r3, r3, #13
 80069d8:	429a      	cmp	r2, r3
 80069da:	d204      	bcs.n	80069e6 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069e2:	60da      	str	r2, [r3, #12]
 80069e4:	e0ea      	b.n	8006bbc <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80069e6:	231a      	movs	r3, #26
 80069e8:	2218      	movs	r2, #24
 80069ea:	189b      	adds	r3, r3, r2
 80069ec:	19db      	adds	r3, r3, r7
 80069ee:	2201      	movs	r2, #1
 80069f0:	701a      	strb	r2, [r3, #0]
 80069f2:	e0e3      	b.n	8006bbc <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	69da      	ldr	r2, [r3, #28]
 80069f8:	2380      	movs	r3, #128	; 0x80
 80069fa:	021b      	lsls	r3, r3, #8
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d000      	beq.n	8006a02 <UART_SetConfig+0x31e>
 8006a00:	e085      	b.n	8006b0e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8006a02:	231b      	movs	r3, #27
 8006a04:	2218      	movs	r2, #24
 8006a06:	189b      	adds	r3, r3, r2
 8006a08:	19db      	adds	r3, r3, r7
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d837      	bhi.n	8006a80 <UART_SetConfig+0x39c>
 8006a10:	009a      	lsls	r2, r3, #2
 8006a12:	4b10      	ldr	r3, [pc, #64]	; (8006a54 <UART_SetConfig+0x370>)
 8006a14:	18d3      	adds	r3, r2, r3
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a1a:	f7fe fd8f 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 8006a1e:	0003      	movs	r3, r0
 8006a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a22:	e036      	b.n	8006a92 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a24:	f7fe fda0 	bl	8005568 <HAL_RCC_GetPCLK2Freq>
 8006a28:	0003      	movs	r3, r0
 8006a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a2c:	e031      	b.n	8006a92 <UART_SetConfig+0x3ae>
 8006a2e:	46c0      	nop			; (mov r8, r8)
 8006a30:	efff69f3 	.word	0xefff69f3
 8006a34:	ffffcfff 	.word	0xffffcfff
 8006a38:	40004800 	.word	0x40004800
 8006a3c:	fffff4ff 	.word	0xfffff4ff
 8006a40:	40013800 	.word	0x40013800
 8006a44:	40021000 	.word	0x40021000
 8006a48:	40004400 	.word	0x40004400
 8006a4c:	003d0900 	.word	0x003d0900
 8006a50:	00f42400 	.word	0x00f42400
 8006a54:	080081c0 	.word	0x080081c0
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a58:	4b60      	ldr	r3, [pc, #384]	; (8006bdc <UART_SetConfig+0x4f8>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2210      	movs	r2, #16
 8006a5e:	4013      	ands	r3, r2
 8006a60:	d002      	beq.n	8006a68 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006a62:	4b5f      	ldr	r3, [pc, #380]	; (8006be0 <UART_SetConfig+0x4fc>)
 8006a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a66:	e014      	b.n	8006a92 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8006a68:	4b5e      	ldr	r3, [pc, #376]	; (8006be4 <UART_SetConfig+0x500>)
 8006a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a6c:	e011      	b.n	8006a92 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a6e:	f7fe fcb5 	bl	80053dc <HAL_RCC_GetSysClockFreq>
 8006a72:	0003      	movs	r3, r0
 8006a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a76:	e00c      	b.n	8006a92 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a78:	2380      	movs	r3, #128	; 0x80
 8006a7a:	021b      	lsls	r3, r3, #8
 8006a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a7e:	e008      	b.n	8006a92 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006a84:	231a      	movs	r3, #26
 8006a86:	2218      	movs	r2, #24
 8006a88:	189b      	adds	r3, r3, r2
 8006a8a:	19db      	adds	r3, r3, r7
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	701a      	strb	r2, [r3, #0]
        break;
 8006a90:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d100      	bne.n	8006a9a <UART_SetConfig+0x3b6>
 8006a98:	e090      	b.n	8006bbc <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9c:	005a      	lsls	r2, r3, #1
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	18d2      	adds	r2, r2, r3
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	0019      	movs	r1, r3
 8006aac:	0010      	movs	r0, r2
 8006aae:	f7f9 fb3d 	bl	800012c <__udivsi3>
 8006ab2:	0003      	movs	r3, r0
 8006ab4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab8:	2b0f      	cmp	r3, #15
 8006aba:	d921      	bls.n	8006b00 <UART_SetConfig+0x41c>
 8006abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006abe:	2380      	movs	r3, #128	; 0x80
 8006ac0:	025b      	lsls	r3, r3, #9
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d21c      	bcs.n	8006b00 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	200e      	movs	r0, #14
 8006acc:	2418      	movs	r4, #24
 8006ace:	1903      	adds	r3, r0, r4
 8006ad0:	19db      	adds	r3, r3, r7
 8006ad2:	210f      	movs	r1, #15
 8006ad4:	438a      	bics	r2, r1
 8006ad6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	085b      	lsrs	r3, r3, #1
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	2207      	movs	r2, #7
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	b299      	uxth	r1, r3
 8006ae4:	1903      	adds	r3, r0, r4
 8006ae6:	19db      	adds	r3, r3, r7
 8006ae8:	1902      	adds	r2, r0, r4
 8006aea:	19d2      	adds	r2, r2, r7
 8006aec:	8812      	ldrh	r2, [r2, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	1902      	adds	r2, r0, r4
 8006af8:	19d2      	adds	r2, r2, r7
 8006afa:	8812      	ldrh	r2, [r2, #0]
 8006afc:	60da      	str	r2, [r3, #12]
 8006afe:	e05d      	b.n	8006bbc <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8006b00:	231a      	movs	r3, #26
 8006b02:	2218      	movs	r2, #24
 8006b04:	189b      	adds	r3, r3, r2
 8006b06:	19db      	adds	r3, r3, r7
 8006b08:	2201      	movs	r2, #1
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	e056      	b.n	8006bbc <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b0e:	231b      	movs	r3, #27
 8006b10:	2218      	movs	r2, #24
 8006b12:	189b      	adds	r3, r3, r2
 8006b14:	19db      	adds	r3, r3, r7
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	d822      	bhi.n	8006b62 <UART_SetConfig+0x47e>
 8006b1c:	009a      	lsls	r2, r3, #2
 8006b1e:	4b32      	ldr	r3, [pc, #200]	; (8006be8 <UART_SetConfig+0x504>)
 8006b20:	18d3      	adds	r3, r2, r3
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b26:	f7fe fd09 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 8006b2a:	0003      	movs	r3, r0
 8006b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b2e:	e021      	b.n	8006b74 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b30:	f7fe fd1a 	bl	8005568 <HAL_RCC_GetPCLK2Freq>
 8006b34:	0003      	movs	r3, r0
 8006b36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b38:	e01c      	b.n	8006b74 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b3a:	4b28      	ldr	r3, [pc, #160]	; (8006bdc <UART_SetConfig+0x4f8>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2210      	movs	r2, #16
 8006b40:	4013      	ands	r3, r2
 8006b42:	d002      	beq.n	8006b4a <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006b44:	4b26      	ldr	r3, [pc, #152]	; (8006be0 <UART_SetConfig+0x4fc>)
 8006b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b48:	e014      	b.n	8006b74 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8006b4a:	4b26      	ldr	r3, [pc, #152]	; (8006be4 <UART_SetConfig+0x500>)
 8006b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b4e:	e011      	b.n	8006b74 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b50:	f7fe fc44 	bl	80053dc <HAL_RCC_GetSysClockFreq>
 8006b54:	0003      	movs	r3, r0
 8006b56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b58:	e00c      	b.n	8006b74 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b5a:	2380      	movs	r3, #128	; 0x80
 8006b5c:	021b      	lsls	r3, r3, #8
 8006b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b60:	e008      	b.n	8006b74 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006b66:	231a      	movs	r3, #26
 8006b68:	2218      	movs	r2, #24
 8006b6a:	189b      	adds	r3, r3, r2
 8006b6c:	19db      	adds	r3, r3, r7
 8006b6e:	2201      	movs	r2, #1
 8006b70:	701a      	strb	r2, [r3, #0]
        break;
 8006b72:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d020      	beq.n	8006bbc <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	085a      	lsrs	r2, r3, #1
 8006b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b82:	18d2      	adds	r2, r2, r3
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	0019      	movs	r1, r3
 8006b8a:	0010      	movs	r0, r2
 8006b8c:	f7f9 face 	bl	800012c <__udivsi3>
 8006b90:	0003      	movs	r3, r0
 8006b92:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	2b0f      	cmp	r3, #15
 8006b98:	d90a      	bls.n	8006bb0 <UART_SetConfig+0x4cc>
 8006b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b9c:	2380      	movs	r3, #128	; 0x80
 8006b9e:	025b      	lsls	r3, r3, #9
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d205      	bcs.n	8006bb0 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	60da      	str	r2, [r3, #12]
 8006bae:	e005      	b.n	8006bbc <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8006bb0:	231a      	movs	r3, #26
 8006bb2:	2218      	movs	r2, #24
 8006bb4:	189b      	adds	r3, r3, r2
 8006bb6:	19db      	adds	r3, r3, r7
 8006bb8:	2201      	movs	r2, #1
 8006bba:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006bc8:	231a      	movs	r3, #26
 8006bca:	2218      	movs	r2, #24
 8006bcc:	189b      	adds	r3, r3, r2
 8006bce:	19db      	adds	r3, r3, r7
 8006bd0:	781b      	ldrb	r3, [r3, #0]
}
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	b00e      	add	sp, #56	; 0x38
 8006bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8006bda:	46c0      	nop			; (mov r8, r8)
 8006bdc:	40021000 	.word	0x40021000
 8006be0:	003d0900 	.word	0x003d0900
 8006be4:	00f42400 	.word	0x00f42400
 8006be8:	080081e4 	.word	0x080081e4

08006bec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	d00b      	beq.n	8006c16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	4a4a      	ldr	r2, [pc, #296]	; (8006d30 <UART_AdvFeatureConfig+0x144>)
 8006c06:	4013      	ands	r3, r2
 8006c08:	0019      	movs	r1, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	d00b      	beq.n	8006c38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	4a43      	ldr	r2, [pc, #268]	; (8006d34 <UART_AdvFeatureConfig+0x148>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	0019      	movs	r1, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	2204      	movs	r2, #4
 8006c3e:	4013      	ands	r3, r2
 8006c40:	d00b      	beq.n	8006c5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	4a3b      	ldr	r2, [pc, #236]	; (8006d38 <UART_AdvFeatureConfig+0x14c>)
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	0019      	movs	r1, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	2208      	movs	r2, #8
 8006c60:	4013      	ands	r3, r2
 8006c62:	d00b      	beq.n	8006c7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	4a34      	ldr	r2, [pc, #208]	; (8006d3c <UART_AdvFeatureConfig+0x150>)
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	0019      	movs	r1, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	2210      	movs	r2, #16
 8006c82:	4013      	ands	r3, r2
 8006c84:	d00b      	beq.n	8006c9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	4a2c      	ldr	r2, [pc, #176]	; (8006d40 <UART_AdvFeatureConfig+0x154>)
 8006c8e:	4013      	ands	r3, r2
 8006c90:	0019      	movs	r1, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	d00b      	beq.n	8006cc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	4a25      	ldr	r2, [pc, #148]	; (8006d44 <UART_AdvFeatureConfig+0x158>)
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	0019      	movs	r1, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	2240      	movs	r2, #64	; 0x40
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	d01d      	beq.n	8006d06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	4a1d      	ldr	r2, [pc, #116]	; (8006d48 <UART_AdvFeatureConfig+0x15c>)
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	0019      	movs	r1, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ce6:	2380      	movs	r3, #128	; 0x80
 8006ce8:	035b      	lsls	r3, r3, #13
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d10b      	bne.n	8006d06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	4a15      	ldr	r2, [pc, #84]	; (8006d4c <UART_AdvFeatureConfig+0x160>)
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	0019      	movs	r1, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0a:	2280      	movs	r2, #128	; 0x80
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	d00b      	beq.n	8006d28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	4a0e      	ldr	r2, [pc, #56]	; (8006d50 <UART_AdvFeatureConfig+0x164>)
 8006d18:	4013      	ands	r3, r2
 8006d1a:	0019      	movs	r1, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	605a      	str	r2, [r3, #4]
  }
}
 8006d28:	46c0      	nop			; (mov r8, r8)
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	b002      	add	sp, #8
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	fffdffff 	.word	0xfffdffff
 8006d34:	fffeffff 	.word	0xfffeffff
 8006d38:	fffbffff 	.word	0xfffbffff
 8006d3c:	ffff7fff 	.word	0xffff7fff
 8006d40:	ffffefff 	.word	0xffffefff
 8006d44:	ffffdfff 	.word	0xffffdfff
 8006d48:	ffefffff 	.word	0xffefffff
 8006d4c:	ff9fffff 	.word	0xff9fffff
 8006d50:	fff7ffff 	.word	0xfff7ffff

08006d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b092      	sub	sp, #72	; 0x48
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2284      	movs	r2, #132	; 0x84
 8006d60:	2100      	movs	r1, #0
 8006d62:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d64:	f7fc fdb8 	bl	80038d8 <HAL_GetTick>
 8006d68:	0003      	movs	r3, r0
 8006d6a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2208      	movs	r2, #8
 8006d74:	4013      	ands	r3, r2
 8006d76:	2b08      	cmp	r3, #8
 8006d78:	d12c      	bne.n	8006dd4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d7c:	2280      	movs	r2, #128	; 0x80
 8006d7e:	0391      	lsls	r1, r2, #14
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	4a46      	ldr	r2, [pc, #280]	; (8006e9c <UART_CheckIdleState+0x148>)
 8006d84:	9200      	str	r2, [sp, #0]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f000 f88c 	bl	8006ea4 <UART_WaitOnFlagUntilTimeout>
 8006d8c:	1e03      	subs	r3, r0, #0
 8006d8e:	d021      	beq.n	8006dd4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d90:	f3ef 8310 	mrs	r3, PRIMASK
 8006d94:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d98:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da0:	f383 8810 	msr	PRIMASK, r3
}
 8006da4:	46c0      	nop			; (mov r8, r8)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2180      	movs	r1, #128	; 0x80
 8006db2:	438a      	bics	r2, r1
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	f383 8810 	msr	PRIMASK, r3
}
 8006dc0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2278      	movs	r2, #120	; 0x78
 8006dcc:	2100      	movs	r1, #0
 8006dce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e05f      	b.n	8006e94 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2204      	movs	r2, #4
 8006ddc:	4013      	ands	r3, r2
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d146      	bne.n	8006e70 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de4:	2280      	movs	r2, #128	; 0x80
 8006de6:	03d1      	lsls	r1, r2, #15
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	4a2c      	ldr	r2, [pc, #176]	; (8006e9c <UART_CheckIdleState+0x148>)
 8006dec:	9200      	str	r2, [sp, #0]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f000 f858 	bl	8006ea4 <UART_WaitOnFlagUntilTimeout>
 8006df4:	1e03      	subs	r3, r0, #0
 8006df6:	d03b      	beq.n	8006e70 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006df8:	f3ef 8310 	mrs	r3, PRIMASK
 8006dfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e00:	637b      	str	r3, [r7, #52]	; 0x34
 8006e02:	2301      	movs	r3, #1
 8006e04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f383 8810 	msr	PRIMASK, r3
}
 8006e0c:	46c0      	nop			; (mov r8, r8)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4921      	ldr	r1, [pc, #132]	; (8006ea0 <UART_CheckIdleState+0x14c>)
 8006e1a:	400a      	ands	r2, r1
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f383 8810 	msr	PRIMASK, r3
}
 8006e28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e30:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e32:	633b      	str	r3, [r7, #48]	; 0x30
 8006e34:	2301      	movs	r3, #1
 8006e36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	f383 8810 	msr	PRIMASK, r3
}
 8006e3e:	46c0      	nop			; (mov r8, r8)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	438a      	bics	r2, r1
 8006e4e:	609a      	str	r2, [r3, #8]
 8006e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	f383 8810 	msr	PRIMASK, r3
}
 8006e5a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2280      	movs	r2, #128	; 0x80
 8006e60:	2120      	movs	r1, #32
 8006e62:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2278      	movs	r2, #120	; 0x78
 8006e68:	2100      	movs	r1, #0
 8006e6a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e011      	b.n	8006e94 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2220      	movs	r2, #32
 8006e74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2280      	movs	r2, #128	; 0x80
 8006e7a:	2120      	movs	r1, #32
 8006e7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2278      	movs	r2, #120	; 0x78
 8006e8e:	2100      	movs	r1, #0
 8006e90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	0018      	movs	r0, r3
 8006e96:	46bd      	mov	sp, r7
 8006e98:	b010      	add	sp, #64	; 0x40
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	01ffffff 	.word	0x01ffffff
 8006ea0:	fffffedf 	.word	0xfffffedf

08006ea4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	603b      	str	r3, [r7, #0]
 8006eb0:	1dfb      	adds	r3, r7, #7
 8006eb2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb4:	e04b      	b.n	8006f4e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	d048      	beq.n	8006f4e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ebc:	f7fc fd0c 	bl	80038d8 <HAL_GetTick>
 8006ec0:	0002      	movs	r2, r0
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d302      	bcc.n	8006ed2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e04b      	b.n	8006f6e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2204      	movs	r2, #4
 8006ede:	4013      	ands	r3, r2
 8006ee0:	d035      	beq.n	8006f4e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	2208      	movs	r2, #8
 8006eea:	4013      	ands	r3, r2
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	d111      	bne.n	8006f14 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2208      	movs	r2, #8
 8006ef6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	0018      	movs	r0, r3
 8006efc:	f000 f83c 	bl	8006f78 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2284      	movs	r2, #132	; 0x84
 8006f04:	2108      	movs	r1, #8
 8006f06:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2278      	movs	r2, #120	; 0x78
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e02c      	b.n	8006f6e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69da      	ldr	r2, [r3, #28]
 8006f1a:	2380      	movs	r3, #128	; 0x80
 8006f1c:	011b      	lsls	r3, r3, #4
 8006f1e:	401a      	ands	r2, r3
 8006f20:	2380      	movs	r3, #128	; 0x80
 8006f22:	011b      	lsls	r3, r3, #4
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d112      	bne.n	8006f4e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2280      	movs	r2, #128	; 0x80
 8006f2e:	0112      	lsls	r2, r2, #4
 8006f30:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	0018      	movs	r0, r3
 8006f36:	f000 f81f 	bl	8006f78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2284      	movs	r2, #132	; 0x84
 8006f3e:	2120      	movs	r1, #32
 8006f40:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2278      	movs	r2, #120	; 0x78
 8006f46:	2100      	movs	r1, #0
 8006f48:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e00f      	b.n	8006f6e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	69db      	ldr	r3, [r3, #28]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	4013      	ands	r3, r2
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	425a      	negs	r2, r3
 8006f5e:	4153      	adcs	r3, r2
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	001a      	movs	r2, r3
 8006f64:	1dfb      	adds	r3, r7, #7
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d0a4      	beq.n	8006eb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	0018      	movs	r0, r3
 8006f70:	46bd      	mov	sp, r7
 8006f72:	b004      	add	sp, #16
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b08e      	sub	sp, #56	; 0x38
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f80:	f3ef 8310 	mrs	r3, PRIMASK
 8006f84:	617b      	str	r3, [r7, #20]
  return(result);
 8006f86:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f88:	637b      	str	r3, [r7, #52]	; 0x34
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	f383 8810 	msr	PRIMASK, r3
}
 8006f94:	46c0      	nop			; (mov r8, r8)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4926      	ldr	r1, [pc, #152]	; (800703c <UART_EndRxTransfer+0xc4>)
 8006fa2:	400a      	ands	r2, r1
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	f383 8810 	msr	PRIMASK, r3
}
 8006fb0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8006fb6:	623b      	str	r3, [r7, #32]
  return(result);
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fba:	633b      	str	r3, [r7, #48]	; 0x30
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc2:	f383 8810 	msr	PRIMASK, r3
}
 8006fc6:	46c0      	nop			; (mov r8, r8)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689a      	ldr	r2, [r3, #8]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	438a      	bics	r2, r1
 8006fd6:	609a      	str	r2, [r3, #8]
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fda:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	f383 8810 	msr	PRIMASK, r3
}
 8006fe2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d118      	bne.n	800701e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fec:	f3ef 8310 	mrs	r3, PRIMASK
 8006ff0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ff2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f383 8810 	msr	PRIMASK, r3
}
 8007000:	46c0      	nop			; (mov r8, r8)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2110      	movs	r1, #16
 800700e:	438a      	bics	r2, r1
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	f383 8810 	msr	PRIMASK, r3
}
 800701c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2280      	movs	r2, #128	; 0x80
 8007022:	2120      	movs	r1, #32
 8007024:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007032:	46c0      	nop			; (mov r8, r8)
 8007034:	46bd      	mov	sp, r7
 8007036:	b00e      	add	sp, #56	; 0x38
 8007038:	bd80      	pop	{r7, pc}
 800703a:	46c0      	nop			; (mov r8, r8)
 800703c:	fffffedf 	.word	0xfffffedf

08007040 <std>:
 8007040:	2300      	movs	r3, #0
 8007042:	b510      	push	{r4, lr}
 8007044:	0004      	movs	r4, r0
 8007046:	6003      	str	r3, [r0, #0]
 8007048:	6043      	str	r3, [r0, #4]
 800704a:	6083      	str	r3, [r0, #8]
 800704c:	8181      	strh	r1, [r0, #12]
 800704e:	6643      	str	r3, [r0, #100]	; 0x64
 8007050:	81c2      	strh	r2, [r0, #14]
 8007052:	6103      	str	r3, [r0, #16]
 8007054:	6143      	str	r3, [r0, #20]
 8007056:	6183      	str	r3, [r0, #24]
 8007058:	0019      	movs	r1, r3
 800705a:	2208      	movs	r2, #8
 800705c:	305c      	adds	r0, #92	; 0x5c
 800705e:	f000 fa25 	bl	80074ac <memset>
 8007062:	4b0b      	ldr	r3, [pc, #44]	; (8007090 <std+0x50>)
 8007064:	6224      	str	r4, [r4, #32]
 8007066:	6263      	str	r3, [r4, #36]	; 0x24
 8007068:	4b0a      	ldr	r3, [pc, #40]	; (8007094 <std+0x54>)
 800706a:	62a3      	str	r3, [r4, #40]	; 0x28
 800706c:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <std+0x58>)
 800706e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007070:	4b0a      	ldr	r3, [pc, #40]	; (800709c <std+0x5c>)
 8007072:	6323      	str	r3, [r4, #48]	; 0x30
 8007074:	4b0a      	ldr	r3, [pc, #40]	; (80070a0 <std+0x60>)
 8007076:	429c      	cmp	r4, r3
 8007078:	d005      	beq.n	8007086 <std+0x46>
 800707a:	4b0a      	ldr	r3, [pc, #40]	; (80070a4 <std+0x64>)
 800707c:	429c      	cmp	r4, r3
 800707e:	d002      	beq.n	8007086 <std+0x46>
 8007080:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <std+0x68>)
 8007082:	429c      	cmp	r4, r3
 8007084:	d103      	bne.n	800708e <std+0x4e>
 8007086:	0020      	movs	r0, r4
 8007088:	3058      	adds	r0, #88	; 0x58
 800708a:	f000 fa8f 	bl	80075ac <__retarget_lock_init_recursive>
 800708e:	bd10      	pop	{r4, pc}
 8007090:	080072c9 	.word	0x080072c9
 8007094:	080072f1 	.word	0x080072f1
 8007098:	08007329 	.word	0x08007329
 800709c:	08007355 	.word	0x08007355
 80070a0:	200001d0 	.word	0x200001d0
 80070a4:	20000238 	.word	0x20000238
 80070a8:	200002a0 	.word	0x200002a0

080070ac <stdio_exit_handler>:
 80070ac:	b510      	push	{r4, lr}
 80070ae:	4a03      	ldr	r2, [pc, #12]	; (80070bc <stdio_exit_handler+0x10>)
 80070b0:	4903      	ldr	r1, [pc, #12]	; (80070c0 <stdio_exit_handler+0x14>)
 80070b2:	4804      	ldr	r0, [pc, #16]	; (80070c4 <stdio_exit_handler+0x18>)
 80070b4:	f000 f86c 	bl	8007190 <_fwalk_sglue>
 80070b8:	bd10      	pop	{r4, pc}
 80070ba:	46c0      	nop			; (mov r8, r8)
 80070bc:	2000000c 	.word	0x2000000c
 80070c0:	08007e89 	.word	0x08007e89
 80070c4:	20000018 	.word	0x20000018

080070c8 <cleanup_stdio>:
 80070c8:	6841      	ldr	r1, [r0, #4]
 80070ca:	4b0b      	ldr	r3, [pc, #44]	; (80070f8 <cleanup_stdio+0x30>)
 80070cc:	b510      	push	{r4, lr}
 80070ce:	0004      	movs	r4, r0
 80070d0:	4299      	cmp	r1, r3
 80070d2:	d001      	beq.n	80070d8 <cleanup_stdio+0x10>
 80070d4:	f000 fed8 	bl	8007e88 <_fflush_r>
 80070d8:	68a1      	ldr	r1, [r4, #8]
 80070da:	4b08      	ldr	r3, [pc, #32]	; (80070fc <cleanup_stdio+0x34>)
 80070dc:	4299      	cmp	r1, r3
 80070de:	d002      	beq.n	80070e6 <cleanup_stdio+0x1e>
 80070e0:	0020      	movs	r0, r4
 80070e2:	f000 fed1 	bl	8007e88 <_fflush_r>
 80070e6:	68e1      	ldr	r1, [r4, #12]
 80070e8:	4b05      	ldr	r3, [pc, #20]	; (8007100 <cleanup_stdio+0x38>)
 80070ea:	4299      	cmp	r1, r3
 80070ec:	d002      	beq.n	80070f4 <cleanup_stdio+0x2c>
 80070ee:	0020      	movs	r0, r4
 80070f0:	f000 feca 	bl	8007e88 <_fflush_r>
 80070f4:	bd10      	pop	{r4, pc}
 80070f6:	46c0      	nop			; (mov r8, r8)
 80070f8:	200001d0 	.word	0x200001d0
 80070fc:	20000238 	.word	0x20000238
 8007100:	200002a0 	.word	0x200002a0

08007104 <global_stdio_init.part.0>:
 8007104:	b510      	push	{r4, lr}
 8007106:	4b09      	ldr	r3, [pc, #36]	; (800712c <global_stdio_init.part.0+0x28>)
 8007108:	4a09      	ldr	r2, [pc, #36]	; (8007130 <global_stdio_init.part.0+0x2c>)
 800710a:	2104      	movs	r1, #4
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	4809      	ldr	r0, [pc, #36]	; (8007134 <global_stdio_init.part.0+0x30>)
 8007110:	2200      	movs	r2, #0
 8007112:	f7ff ff95 	bl	8007040 <std>
 8007116:	2201      	movs	r2, #1
 8007118:	2109      	movs	r1, #9
 800711a:	4807      	ldr	r0, [pc, #28]	; (8007138 <global_stdio_init.part.0+0x34>)
 800711c:	f7ff ff90 	bl	8007040 <std>
 8007120:	2202      	movs	r2, #2
 8007122:	2112      	movs	r1, #18
 8007124:	4805      	ldr	r0, [pc, #20]	; (800713c <global_stdio_init.part.0+0x38>)
 8007126:	f7ff ff8b 	bl	8007040 <std>
 800712a:	bd10      	pop	{r4, pc}
 800712c:	20000308 	.word	0x20000308
 8007130:	080070ad 	.word	0x080070ad
 8007134:	200001d0 	.word	0x200001d0
 8007138:	20000238 	.word	0x20000238
 800713c:	200002a0 	.word	0x200002a0

08007140 <__sfp_lock_acquire>:
 8007140:	b510      	push	{r4, lr}
 8007142:	4802      	ldr	r0, [pc, #8]	; (800714c <__sfp_lock_acquire+0xc>)
 8007144:	f000 fa33 	bl	80075ae <__retarget_lock_acquire_recursive>
 8007148:	bd10      	pop	{r4, pc}
 800714a:	46c0      	nop			; (mov r8, r8)
 800714c:	20000311 	.word	0x20000311

08007150 <__sfp_lock_release>:
 8007150:	b510      	push	{r4, lr}
 8007152:	4802      	ldr	r0, [pc, #8]	; (800715c <__sfp_lock_release+0xc>)
 8007154:	f000 fa2c 	bl	80075b0 <__retarget_lock_release_recursive>
 8007158:	bd10      	pop	{r4, pc}
 800715a:	46c0      	nop			; (mov r8, r8)
 800715c:	20000311 	.word	0x20000311

08007160 <__sinit>:
 8007160:	b510      	push	{r4, lr}
 8007162:	0004      	movs	r4, r0
 8007164:	f7ff ffec 	bl	8007140 <__sfp_lock_acquire>
 8007168:	6a23      	ldr	r3, [r4, #32]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <__sinit+0x14>
 800716e:	f7ff ffef 	bl	8007150 <__sfp_lock_release>
 8007172:	bd10      	pop	{r4, pc}
 8007174:	4b04      	ldr	r3, [pc, #16]	; (8007188 <__sinit+0x28>)
 8007176:	6223      	str	r3, [r4, #32]
 8007178:	4b04      	ldr	r3, [pc, #16]	; (800718c <__sinit+0x2c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1f6      	bne.n	800716e <__sinit+0xe>
 8007180:	f7ff ffc0 	bl	8007104 <global_stdio_init.part.0>
 8007184:	e7f3      	b.n	800716e <__sinit+0xe>
 8007186:	46c0      	nop			; (mov r8, r8)
 8007188:	080070c9 	.word	0x080070c9
 800718c:	20000308 	.word	0x20000308

08007190 <_fwalk_sglue>:
 8007190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007192:	0014      	movs	r4, r2
 8007194:	2600      	movs	r6, #0
 8007196:	9000      	str	r0, [sp, #0]
 8007198:	9101      	str	r1, [sp, #4]
 800719a:	68a5      	ldr	r5, [r4, #8]
 800719c:	6867      	ldr	r7, [r4, #4]
 800719e:	3f01      	subs	r7, #1
 80071a0:	d504      	bpl.n	80071ac <_fwalk_sglue+0x1c>
 80071a2:	6824      	ldr	r4, [r4, #0]
 80071a4:	2c00      	cmp	r4, #0
 80071a6:	d1f8      	bne.n	800719a <_fwalk_sglue+0xa>
 80071a8:	0030      	movs	r0, r6
 80071aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071ac:	89ab      	ldrh	r3, [r5, #12]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d908      	bls.n	80071c4 <_fwalk_sglue+0x34>
 80071b2:	220e      	movs	r2, #14
 80071b4:	5eab      	ldrsh	r3, [r5, r2]
 80071b6:	3301      	adds	r3, #1
 80071b8:	d004      	beq.n	80071c4 <_fwalk_sglue+0x34>
 80071ba:	0029      	movs	r1, r5
 80071bc:	9800      	ldr	r0, [sp, #0]
 80071be:	9b01      	ldr	r3, [sp, #4]
 80071c0:	4798      	blx	r3
 80071c2:	4306      	orrs	r6, r0
 80071c4:	3568      	adds	r5, #104	; 0x68
 80071c6:	e7ea      	b.n	800719e <_fwalk_sglue+0xe>

080071c8 <_puts_r>:
 80071c8:	6a03      	ldr	r3, [r0, #32]
 80071ca:	b570      	push	{r4, r5, r6, lr}
 80071cc:	0005      	movs	r5, r0
 80071ce:	000e      	movs	r6, r1
 80071d0:	6884      	ldr	r4, [r0, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <_puts_r+0x12>
 80071d6:	f7ff ffc3 	bl	8007160 <__sinit>
 80071da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071dc:	07db      	lsls	r3, r3, #31
 80071de:	d405      	bmi.n	80071ec <_puts_r+0x24>
 80071e0:	89a3      	ldrh	r3, [r4, #12]
 80071e2:	059b      	lsls	r3, r3, #22
 80071e4:	d402      	bmi.n	80071ec <_puts_r+0x24>
 80071e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071e8:	f000 f9e1 	bl	80075ae <__retarget_lock_acquire_recursive>
 80071ec:	89a3      	ldrh	r3, [r4, #12]
 80071ee:	071b      	lsls	r3, r3, #28
 80071f0:	d502      	bpl.n	80071f8 <_puts_r+0x30>
 80071f2:	6923      	ldr	r3, [r4, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d11f      	bne.n	8007238 <_puts_r+0x70>
 80071f8:	0021      	movs	r1, r4
 80071fa:	0028      	movs	r0, r5
 80071fc:	f000 f8f2 	bl	80073e4 <__swsetup_r>
 8007200:	2800      	cmp	r0, #0
 8007202:	d019      	beq.n	8007238 <_puts_r+0x70>
 8007204:	2501      	movs	r5, #1
 8007206:	426d      	negs	r5, r5
 8007208:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800720a:	07db      	lsls	r3, r3, #31
 800720c:	d405      	bmi.n	800721a <_puts_r+0x52>
 800720e:	89a3      	ldrh	r3, [r4, #12]
 8007210:	059b      	lsls	r3, r3, #22
 8007212:	d402      	bmi.n	800721a <_puts_r+0x52>
 8007214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007216:	f000 f9cb 	bl	80075b0 <__retarget_lock_release_recursive>
 800721a:	0028      	movs	r0, r5
 800721c:	bd70      	pop	{r4, r5, r6, pc}
 800721e:	3601      	adds	r6, #1
 8007220:	60a3      	str	r3, [r4, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	da04      	bge.n	8007230 <_puts_r+0x68>
 8007226:	69a2      	ldr	r2, [r4, #24]
 8007228:	429a      	cmp	r2, r3
 800722a:	dc16      	bgt.n	800725a <_puts_r+0x92>
 800722c:	290a      	cmp	r1, #10
 800722e:	d014      	beq.n	800725a <_puts_r+0x92>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	6022      	str	r2, [r4, #0]
 8007236:	7019      	strb	r1, [r3, #0]
 8007238:	68a3      	ldr	r3, [r4, #8]
 800723a:	7831      	ldrb	r1, [r6, #0]
 800723c:	3b01      	subs	r3, #1
 800723e:	2900      	cmp	r1, #0
 8007240:	d1ed      	bne.n	800721e <_puts_r+0x56>
 8007242:	60a3      	str	r3, [r4, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	da0f      	bge.n	8007268 <_puts_r+0xa0>
 8007248:	0028      	movs	r0, r5
 800724a:	0022      	movs	r2, r4
 800724c:	310a      	adds	r1, #10
 800724e:	f000 f887 	bl	8007360 <__swbuf_r>
 8007252:	250a      	movs	r5, #10
 8007254:	3001      	adds	r0, #1
 8007256:	d1d7      	bne.n	8007208 <_puts_r+0x40>
 8007258:	e7d4      	b.n	8007204 <_puts_r+0x3c>
 800725a:	0022      	movs	r2, r4
 800725c:	0028      	movs	r0, r5
 800725e:	f000 f87f 	bl	8007360 <__swbuf_r>
 8007262:	3001      	adds	r0, #1
 8007264:	d1e8      	bne.n	8007238 <_puts_r+0x70>
 8007266:	e7cd      	b.n	8007204 <_puts_r+0x3c>
 8007268:	250a      	movs	r5, #10
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	6022      	str	r2, [r4, #0]
 8007270:	701d      	strb	r5, [r3, #0]
 8007272:	e7c9      	b.n	8007208 <_puts_r+0x40>

08007274 <puts>:
 8007274:	b510      	push	{r4, lr}
 8007276:	4b03      	ldr	r3, [pc, #12]	; (8007284 <puts+0x10>)
 8007278:	0001      	movs	r1, r0
 800727a:	6818      	ldr	r0, [r3, #0]
 800727c:	f7ff ffa4 	bl	80071c8 <_puts_r>
 8007280:	bd10      	pop	{r4, pc}
 8007282:	46c0      	nop			; (mov r8, r8)
 8007284:	20000064 	.word	0x20000064

08007288 <siprintf>:
 8007288:	b40e      	push	{r1, r2, r3}
 800728a:	b500      	push	{lr}
 800728c:	490b      	ldr	r1, [pc, #44]	; (80072bc <siprintf+0x34>)
 800728e:	b09c      	sub	sp, #112	; 0x70
 8007290:	ab1d      	add	r3, sp, #116	; 0x74
 8007292:	9002      	str	r0, [sp, #8]
 8007294:	9006      	str	r0, [sp, #24]
 8007296:	9107      	str	r1, [sp, #28]
 8007298:	9104      	str	r1, [sp, #16]
 800729a:	4809      	ldr	r0, [pc, #36]	; (80072c0 <siprintf+0x38>)
 800729c:	4909      	ldr	r1, [pc, #36]	; (80072c4 <siprintf+0x3c>)
 800729e:	cb04      	ldmia	r3!, {r2}
 80072a0:	9105      	str	r1, [sp, #20]
 80072a2:	6800      	ldr	r0, [r0, #0]
 80072a4:	a902      	add	r1, sp, #8
 80072a6:	9301      	str	r3, [sp, #4]
 80072a8:	f000 fae4 	bl	8007874 <_svfiprintf_r>
 80072ac:	2200      	movs	r2, #0
 80072ae:	9b02      	ldr	r3, [sp, #8]
 80072b0:	701a      	strb	r2, [r3, #0]
 80072b2:	b01c      	add	sp, #112	; 0x70
 80072b4:	bc08      	pop	{r3}
 80072b6:	b003      	add	sp, #12
 80072b8:	4718      	bx	r3
 80072ba:	46c0      	nop			; (mov r8, r8)
 80072bc:	7fffffff 	.word	0x7fffffff
 80072c0:	20000064 	.word	0x20000064
 80072c4:	ffff0208 	.word	0xffff0208

080072c8 <__sread>:
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	000c      	movs	r4, r1
 80072cc:	250e      	movs	r5, #14
 80072ce:	5f49      	ldrsh	r1, [r1, r5]
 80072d0:	f000 f91a 	bl	8007508 <_read_r>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	db03      	blt.n	80072e0 <__sread+0x18>
 80072d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80072da:	181b      	adds	r3, r3, r0
 80072dc:	6563      	str	r3, [r4, #84]	; 0x54
 80072de:	bd70      	pop	{r4, r5, r6, pc}
 80072e0:	89a3      	ldrh	r3, [r4, #12]
 80072e2:	4a02      	ldr	r2, [pc, #8]	; (80072ec <__sread+0x24>)
 80072e4:	4013      	ands	r3, r2
 80072e6:	81a3      	strh	r3, [r4, #12]
 80072e8:	e7f9      	b.n	80072de <__sread+0x16>
 80072ea:	46c0      	nop			; (mov r8, r8)
 80072ec:	ffffefff 	.word	0xffffefff

080072f0 <__swrite>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	001f      	movs	r7, r3
 80072f4:	898b      	ldrh	r3, [r1, #12]
 80072f6:	0005      	movs	r5, r0
 80072f8:	000c      	movs	r4, r1
 80072fa:	0016      	movs	r6, r2
 80072fc:	05db      	lsls	r3, r3, #23
 80072fe:	d505      	bpl.n	800730c <__swrite+0x1c>
 8007300:	230e      	movs	r3, #14
 8007302:	5ec9      	ldrsh	r1, [r1, r3]
 8007304:	2200      	movs	r2, #0
 8007306:	2302      	movs	r3, #2
 8007308:	f000 f8ea 	bl	80074e0 <_lseek_r>
 800730c:	89a3      	ldrh	r3, [r4, #12]
 800730e:	4a05      	ldr	r2, [pc, #20]	; (8007324 <__swrite+0x34>)
 8007310:	0028      	movs	r0, r5
 8007312:	4013      	ands	r3, r2
 8007314:	81a3      	strh	r3, [r4, #12]
 8007316:	0032      	movs	r2, r6
 8007318:	230e      	movs	r3, #14
 800731a:	5ee1      	ldrsh	r1, [r4, r3]
 800731c:	003b      	movs	r3, r7
 800731e:	f000 f907 	bl	8007530 <_write_r>
 8007322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007324:	ffffefff 	.word	0xffffefff

08007328 <__sseek>:
 8007328:	b570      	push	{r4, r5, r6, lr}
 800732a:	000c      	movs	r4, r1
 800732c:	250e      	movs	r5, #14
 800732e:	5f49      	ldrsh	r1, [r1, r5]
 8007330:	f000 f8d6 	bl	80074e0 <_lseek_r>
 8007334:	89a3      	ldrh	r3, [r4, #12]
 8007336:	1c42      	adds	r2, r0, #1
 8007338:	d103      	bne.n	8007342 <__sseek+0x1a>
 800733a:	4a05      	ldr	r2, [pc, #20]	; (8007350 <__sseek+0x28>)
 800733c:	4013      	ands	r3, r2
 800733e:	81a3      	strh	r3, [r4, #12]
 8007340:	bd70      	pop	{r4, r5, r6, pc}
 8007342:	2280      	movs	r2, #128	; 0x80
 8007344:	0152      	lsls	r2, r2, #5
 8007346:	4313      	orrs	r3, r2
 8007348:	81a3      	strh	r3, [r4, #12]
 800734a:	6560      	str	r0, [r4, #84]	; 0x54
 800734c:	e7f8      	b.n	8007340 <__sseek+0x18>
 800734e:	46c0      	nop			; (mov r8, r8)
 8007350:	ffffefff 	.word	0xffffefff

08007354 <__sclose>:
 8007354:	b510      	push	{r4, lr}
 8007356:	230e      	movs	r3, #14
 8007358:	5ec9      	ldrsh	r1, [r1, r3]
 800735a:	f000 f8af 	bl	80074bc <_close_r>
 800735e:	bd10      	pop	{r4, pc}

08007360 <__swbuf_r>:
 8007360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007362:	0006      	movs	r6, r0
 8007364:	000d      	movs	r5, r1
 8007366:	0014      	movs	r4, r2
 8007368:	2800      	cmp	r0, #0
 800736a:	d004      	beq.n	8007376 <__swbuf_r+0x16>
 800736c:	6a03      	ldr	r3, [r0, #32]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <__swbuf_r+0x16>
 8007372:	f7ff fef5 	bl	8007160 <__sinit>
 8007376:	69a3      	ldr	r3, [r4, #24]
 8007378:	60a3      	str	r3, [r4, #8]
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	071b      	lsls	r3, r3, #28
 800737e:	d528      	bpl.n	80073d2 <__swbuf_r+0x72>
 8007380:	6923      	ldr	r3, [r4, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d025      	beq.n	80073d2 <__swbuf_r+0x72>
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	6820      	ldr	r0, [r4, #0]
 800738a:	b2ef      	uxtb	r7, r5
 800738c:	1ac0      	subs	r0, r0, r3
 800738e:	6963      	ldr	r3, [r4, #20]
 8007390:	b2ed      	uxtb	r5, r5
 8007392:	4283      	cmp	r3, r0
 8007394:	dc05      	bgt.n	80073a2 <__swbuf_r+0x42>
 8007396:	0021      	movs	r1, r4
 8007398:	0030      	movs	r0, r6
 800739a:	f000 fd75 	bl	8007e88 <_fflush_r>
 800739e:	2800      	cmp	r0, #0
 80073a0:	d11d      	bne.n	80073de <__swbuf_r+0x7e>
 80073a2:	68a3      	ldr	r3, [r4, #8]
 80073a4:	3001      	adds	r0, #1
 80073a6:	3b01      	subs	r3, #1
 80073a8:	60a3      	str	r3, [r4, #8]
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	6022      	str	r2, [r4, #0]
 80073b0:	701f      	strb	r7, [r3, #0]
 80073b2:	6963      	ldr	r3, [r4, #20]
 80073b4:	4283      	cmp	r3, r0
 80073b6:	d004      	beq.n	80073c2 <__swbuf_r+0x62>
 80073b8:	89a3      	ldrh	r3, [r4, #12]
 80073ba:	07db      	lsls	r3, r3, #31
 80073bc:	d507      	bpl.n	80073ce <__swbuf_r+0x6e>
 80073be:	2d0a      	cmp	r5, #10
 80073c0:	d105      	bne.n	80073ce <__swbuf_r+0x6e>
 80073c2:	0021      	movs	r1, r4
 80073c4:	0030      	movs	r0, r6
 80073c6:	f000 fd5f 	bl	8007e88 <_fflush_r>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d107      	bne.n	80073de <__swbuf_r+0x7e>
 80073ce:	0028      	movs	r0, r5
 80073d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073d2:	0021      	movs	r1, r4
 80073d4:	0030      	movs	r0, r6
 80073d6:	f000 f805 	bl	80073e4 <__swsetup_r>
 80073da:	2800      	cmp	r0, #0
 80073dc:	d0d3      	beq.n	8007386 <__swbuf_r+0x26>
 80073de:	2501      	movs	r5, #1
 80073e0:	426d      	negs	r5, r5
 80073e2:	e7f4      	b.n	80073ce <__swbuf_r+0x6e>

080073e4 <__swsetup_r>:
 80073e4:	4b30      	ldr	r3, [pc, #192]	; (80074a8 <__swsetup_r+0xc4>)
 80073e6:	b570      	push	{r4, r5, r6, lr}
 80073e8:	0005      	movs	r5, r0
 80073ea:	6818      	ldr	r0, [r3, #0]
 80073ec:	000c      	movs	r4, r1
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d004      	beq.n	80073fc <__swsetup_r+0x18>
 80073f2:	6a03      	ldr	r3, [r0, #32]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <__swsetup_r+0x18>
 80073f8:	f7ff feb2 	bl	8007160 <__sinit>
 80073fc:	230c      	movs	r3, #12
 80073fe:	5ee2      	ldrsh	r2, [r4, r3]
 8007400:	b293      	uxth	r3, r2
 8007402:	0711      	lsls	r1, r2, #28
 8007404:	d423      	bmi.n	800744e <__swsetup_r+0x6a>
 8007406:	06d9      	lsls	r1, r3, #27
 8007408:	d407      	bmi.n	800741a <__swsetup_r+0x36>
 800740a:	2309      	movs	r3, #9
 800740c:	2001      	movs	r0, #1
 800740e:	602b      	str	r3, [r5, #0]
 8007410:	3337      	adds	r3, #55	; 0x37
 8007412:	4313      	orrs	r3, r2
 8007414:	81a3      	strh	r3, [r4, #12]
 8007416:	4240      	negs	r0, r0
 8007418:	bd70      	pop	{r4, r5, r6, pc}
 800741a:	075b      	lsls	r3, r3, #29
 800741c:	d513      	bpl.n	8007446 <__swsetup_r+0x62>
 800741e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007420:	2900      	cmp	r1, #0
 8007422:	d008      	beq.n	8007436 <__swsetup_r+0x52>
 8007424:	0023      	movs	r3, r4
 8007426:	3344      	adds	r3, #68	; 0x44
 8007428:	4299      	cmp	r1, r3
 800742a:	d002      	beq.n	8007432 <__swsetup_r+0x4e>
 800742c:	0028      	movs	r0, r5
 800742e:	f000 f8c1 	bl	80075b4 <_free_r>
 8007432:	2300      	movs	r3, #0
 8007434:	6363      	str	r3, [r4, #52]	; 0x34
 8007436:	2224      	movs	r2, #36	; 0x24
 8007438:	89a3      	ldrh	r3, [r4, #12]
 800743a:	4393      	bics	r3, r2
 800743c:	81a3      	strh	r3, [r4, #12]
 800743e:	2300      	movs	r3, #0
 8007440:	6063      	str	r3, [r4, #4]
 8007442:	6923      	ldr	r3, [r4, #16]
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	2308      	movs	r3, #8
 8007448:	89a2      	ldrh	r2, [r4, #12]
 800744a:	4313      	orrs	r3, r2
 800744c:	81a3      	strh	r3, [r4, #12]
 800744e:	6923      	ldr	r3, [r4, #16]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10b      	bne.n	800746c <__swsetup_r+0x88>
 8007454:	21a0      	movs	r1, #160	; 0xa0
 8007456:	2280      	movs	r2, #128	; 0x80
 8007458:	89a3      	ldrh	r3, [r4, #12]
 800745a:	0089      	lsls	r1, r1, #2
 800745c:	0092      	lsls	r2, r2, #2
 800745e:	400b      	ands	r3, r1
 8007460:	4293      	cmp	r3, r2
 8007462:	d003      	beq.n	800746c <__swsetup_r+0x88>
 8007464:	0021      	movs	r1, r4
 8007466:	0028      	movs	r0, r5
 8007468:	f000 fd62 	bl	8007f30 <__smakebuf_r>
 800746c:	220c      	movs	r2, #12
 800746e:	5ea3      	ldrsh	r3, [r4, r2]
 8007470:	2001      	movs	r0, #1
 8007472:	001a      	movs	r2, r3
 8007474:	b299      	uxth	r1, r3
 8007476:	4002      	ands	r2, r0
 8007478:	4203      	tst	r3, r0
 800747a:	d00f      	beq.n	800749c <__swsetup_r+0xb8>
 800747c:	2200      	movs	r2, #0
 800747e:	60a2      	str	r2, [r4, #8]
 8007480:	6962      	ldr	r2, [r4, #20]
 8007482:	4252      	negs	r2, r2
 8007484:	61a2      	str	r2, [r4, #24]
 8007486:	2000      	movs	r0, #0
 8007488:	6922      	ldr	r2, [r4, #16]
 800748a:	4282      	cmp	r2, r0
 800748c:	d1c4      	bne.n	8007418 <__swsetup_r+0x34>
 800748e:	0609      	lsls	r1, r1, #24
 8007490:	d5c2      	bpl.n	8007418 <__swsetup_r+0x34>
 8007492:	2240      	movs	r2, #64	; 0x40
 8007494:	4313      	orrs	r3, r2
 8007496:	81a3      	strh	r3, [r4, #12]
 8007498:	3801      	subs	r0, #1
 800749a:	e7bd      	b.n	8007418 <__swsetup_r+0x34>
 800749c:	0788      	lsls	r0, r1, #30
 800749e:	d400      	bmi.n	80074a2 <__swsetup_r+0xbe>
 80074a0:	6962      	ldr	r2, [r4, #20]
 80074a2:	60a2      	str	r2, [r4, #8]
 80074a4:	e7ef      	b.n	8007486 <__swsetup_r+0xa2>
 80074a6:	46c0      	nop			; (mov r8, r8)
 80074a8:	20000064 	.word	0x20000064

080074ac <memset>:
 80074ac:	0003      	movs	r3, r0
 80074ae:	1882      	adds	r2, r0, r2
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d100      	bne.n	80074b6 <memset+0xa>
 80074b4:	4770      	bx	lr
 80074b6:	7019      	strb	r1, [r3, #0]
 80074b8:	3301      	adds	r3, #1
 80074ba:	e7f9      	b.n	80074b0 <memset+0x4>

080074bc <_close_r>:
 80074bc:	2300      	movs	r3, #0
 80074be:	b570      	push	{r4, r5, r6, lr}
 80074c0:	4d06      	ldr	r5, [pc, #24]	; (80074dc <_close_r+0x20>)
 80074c2:	0004      	movs	r4, r0
 80074c4:	0008      	movs	r0, r1
 80074c6:	602b      	str	r3, [r5, #0]
 80074c8:	f7fb ffc5 	bl	8003456 <_close>
 80074cc:	1c43      	adds	r3, r0, #1
 80074ce:	d103      	bne.n	80074d8 <_close_r+0x1c>
 80074d0:	682b      	ldr	r3, [r5, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d000      	beq.n	80074d8 <_close_r+0x1c>
 80074d6:	6023      	str	r3, [r4, #0]
 80074d8:	bd70      	pop	{r4, r5, r6, pc}
 80074da:	46c0      	nop			; (mov r8, r8)
 80074dc:	2000030c 	.word	0x2000030c

080074e0 <_lseek_r>:
 80074e0:	b570      	push	{r4, r5, r6, lr}
 80074e2:	0004      	movs	r4, r0
 80074e4:	0008      	movs	r0, r1
 80074e6:	0011      	movs	r1, r2
 80074e8:	001a      	movs	r2, r3
 80074ea:	2300      	movs	r3, #0
 80074ec:	4d05      	ldr	r5, [pc, #20]	; (8007504 <_lseek_r+0x24>)
 80074ee:	602b      	str	r3, [r5, #0]
 80074f0:	f7fb ffd2 	bl	8003498 <_lseek>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	d103      	bne.n	8007500 <_lseek_r+0x20>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d000      	beq.n	8007500 <_lseek_r+0x20>
 80074fe:	6023      	str	r3, [r4, #0]
 8007500:	bd70      	pop	{r4, r5, r6, pc}
 8007502:	46c0      	nop			; (mov r8, r8)
 8007504:	2000030c 	.word	0x2000030c

08007508 <_read_r>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	0004      	movs	r4, r0
 800750c:	0008      	movs	r0, r1
 800750e:	0011      	movs	r1, r2
 8007510:	001a      	movs	r2, r3
 8007512:	2300      	movs	r3, #0
 8007514:	4d05      	ldr	r5, [pc, #20]	; (800752c <_read_r+0x24>)
 8007516:	602b      	str	r3, [r5, #0]
 8007518:	f7fb ff64 	bl	80033e4 <_read>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d103      	bne.n	8007528 <_read_r+0x20>
 8007520:	682b      	ldr	r3, [r5, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d000      	beq.n	8007528 <_read_r+0x20>
 8007526:	6023      	str	r3, [r4, #0]
 8007528:	bd70      	pop	{r4, r5, r6, pc}
 800752a:	46c0      	nop			; (mov r8, r8)
 800752c:	2000030c 	.word	0x2000030c

08007530 <_write_r>:
 8007530:	b570      	push	{r4, r5, r6, lr}
 8007532:	0004      	movs	r4, r0
 8007534:	0008      	movs	r0, r1
 8007536:	0011      	movs	r1, r2
 8007538:	001a      	movs	r2, r3
 800753a:	2300      	movs	r3, #0
 800753c:	4d05      	ldr	r5, [pc, #20]	; (8007554 <_write_r+0x24>)
 800753e:	602b      	str	r3, [r5, #0]
 8007540:	f7fb ff6d 	bl	800341e <_write>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	d103      	bne.n	8007550 <_write_r+0x20>
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d000      	beq.n	8007550 <_write_r+0x20>
 800754e:	6023      	str	r3, [r4, #0]
 8007550:	bd70      	pop	{r4, r5, r6, pc}
 8007552:	46c0      	nop			; (mov r8, r8)
 8007554:	2000030c 	.word	0x2000030c

08007558 <__errno>:
 8007558:	4b01      	ldr	r3, [pc, #4]	; (8007560 <__errno+0x8>)
 800755a:	6818      	ldr	r0, [r3, #0]
 800755c:	4770      	bx	lr
 800755e:	46c0      	nop			; (mov r8, r8)
 8007560:	20000064 	.word	0x20000064

08007564 <__libc_init_array>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	2600      	movs	r6, #0
 8007568:	4c0c      	ldr	r4, [pc, #48]	; (800759c <__libc_init_array+0x38>)
 800756a:	4d0d      	ldr	r5, [pc, #52]	; (80075a0 <__libc_init_array+0x3c>)
 800756c:	1b64      	subs	r4, r4, r5
 800756e:	10a4      	asrs	r4, r4, #2
 8007570:	42a6      	cmp	r6, r4
 8007572:	d109      	bne.n	8007588 <__libc_init_array+0x24>
 8007574:	2600      	movs	r6, #0
 8007576:	f000 fdaf 	bl	80080d8 <_init>
 800757a:	4c0a      	ldr	r4, [pc, #40]	; (80075a4 <__libc_init_array+0x40>)
 800757c:	4d0a      	ldr	r5, [pc, #40]	; (80075a8 <__libc_init_array+0x44>)
 800757e:	1b64      	subs	r4, r4, r5
 8007580:	10a4      	asrs	r4, r4, #2
 8007582:	42a6      	cmp	r6, r4
 8007584:	d105      	bne.n	8007592 <__libc_init_array+0x2e>
 8007586:	bd70      	pop	{r4, r5, r6, pc}
 8007588:	00b3      	lsls	r3, r6, #2
 800758a:	58eb      	ldr	r3, [r5, r3]
 800758c:	4798      	blx	r3
 800758e:	3601      	adds	r6, #1
 8007590:	e7ee      	b.n	8007570 <__libc_init_array+0xc>
 8007592:	00b3      	lsls	r3, r6, #2
 8007594:	58eb      	ldr	r3, [r5, r3]
 8007596:	4798      	blx	r3
 8007598:	3601      	adds	r6, #1
 800759a:	e7f2      	b.n	8007582 <__libc_init_array+0x1e>
 800759c:	08008244 	.word	0x08008244
 80075a0:	08008244 	.word	0x08008244
 80075a4:	08008248 	.word	0x08008248
 80075a8:	08008244 	.word	0x08008244

080075ac <__retarget_lock_init_recursive>:
 80075ac:	4770      	bx	lr

080075ae <__retarget_lock_acquire_recursive>:
 80075ae:	4770      	bx	lr

080075b0 <__retarget_lock_release_recursive>:
 80075b0:	4770      	bx	lr
	...

080075b4 <_free_r>:
 80075b4:	b570      	push	{r4, r5, r6, lr}
 80075b6:	0005      	movs	r5, r0
 80075b8:	2900      	cmp	r1, #0
 80075ba:	d010      	beq.n	80075de <_free_r+0x2a>
 80075bc:	1f0c      	subs	r4, r1, #4
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	da00      	bge.n	80075c6 <_free_r+0x12>
 80075c4:	18e4      	adds	r4, r4, r3
 80075c6:	0028      	movs	r0, r5
 80075c8:	f000 f8e2 	bl	8007790 <__malloc_lock>
 80075cc:	4a1d      	ldr	r2, [pc, #116]	; (8007644 <_free_r+0x90>)
 80075ce:	6813      	ldr	r3, [r2, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d105      	bne.n	80075e0 <_free_r+0x2c>
 80075d4:	6063      	str	r3, [r4, #4]
 80075d6:	6014      	str	r4, [r2, #0]
 80075d8:	0028      	movs	r0, r5
 80075da:	f000 f8e1 	bl	80077a0 <__malloc_unlock>
 80075de:	bd70      	pop	{r4, r5, r6, pc}
 80075e0:	42a3      	cmp	r3, r4
 80075e2:	d908      	bls.n	80075f6 <_free_r+0x42>
 80075e4:	6820      	ldr	r0, [r4, #0]
 80075e6:	1821      	adds	r1, r4, r0
 80075e8:	428b      	cmp	r3, r1
 80075ea:	d1f3      	bne.n	80075d4 <_free_r+0x20>
 80075ec:	6819      	ldr	r1, [r3, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	1809      	adds	r1, r1, r0
 80075f2:	6021      	str	r1, [r4, #0]
 80075f4:	e7ee      	b.n	80075d4 <_free_r+0x20>
 80075f6:	001a      	movs	r2, r3
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <_free_r+0x4e>
 80075fe:	42a3      	cmp	r3, r4
 8007600:	d9f9      	bls.n	80075f6 <_free_r+0x42>
 8007602:	6811      	ldr	r1, [r2, #0]
 8007604:	1850      	adds	r0, r2, r1
 8007606:	42a0      	cmp	r0, r4
 8007608:	d10b      	bne.n	8007622 <_free_r+0x6e>
 800760a:	6820      	ldr	r0, [r4, #0]
 800760c:	1809      	adds	r1, r1, r0
 800760e:	1850      	adds	r0, r2, r1
 8007610:	6011      	str	r1, [r2, #0]
 8007612:	4283      	cmp	r3, r0
 8007614:	d1e0      	bne.n	80075d8 <_free_r+0x24>
 8007616:	6818      	ldr	r0, [r3, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	1841      	adds	r1, r0, r1
 800761c:	6011      	str	r1, [r2, #0]
 800761e:	6053      	str	r3, [r2, #4]
 8007620:	e7da      	b.n	80075d8 <_free_r+0x24>
 8007622:	42a0      	cmp	r0, r4
 8007624:	d902      	bls.n	800762c <_free_r+0x78>
 8007626:	230c      	movs	r3, #12
 8007628:	602b      	str	r3, [r5, #0]
 800762a:	e7d5      	b.n	80075d8 <_free_r+0x24>
 800762c:	6820      	ldr	r0, [r4, #0]
 800762e:	1821      	adds	r1, r4, r0
 8007630:	428b      	cmp	r3, r1
 8007632:	d103      	bne.n	800763c <_free_r+0x88>
 8007634:	6819      	ldr	r1, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	1809      	adds	r1, r1, r0
 800763a:	6021      	str	r1, [r4, #0]
 800763c:	6063      	str	r3, [r4, #4]
 800763e:	6054      	str	r4, [r2, #4]
 8007640:	e7ca      	b.n	80075d8 <_free_r+0x24>
 8007642:	46c0      	nop			; (mov r8, r8)
 8007644:	20000314 	.word	0x20000314

08007648 <sbrk_aligned>:
 8007648:	b570      	push	{r4, r5, r6, lr}
 800764a:	4e0f      	ldr	r6, [pc, #60]	; (8007688 <sbrk_aligned+0x40>)
 800764c:	000d      	movs	r5, r1
 800764e:	6831      	ldr	r1, [r6, #0]
 8007650:	0004      	movs	r4, r0
 8007652:	2900      	cmp	r1, #0
 8007654:	d102      	bne.n	800765c <sbrk_aligned+0x14>
 8007656:	f000 fce1 	bl	800801c <_sbrk_r>
 800765a:	6030      	str	r0, [r6, #0]
 800765c:	0029      	movs	r1, r5
 800765e:	0020      	movs	r0, r4
 8007660:	f000 fcdc 	bl	800801c <_sbrk_r>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	d00a      	beq.n	800767e <sbrk_aligned+0x36>
 8007668:	2303      	movs	r3, #3
 800766a:	1cc5      	adds	r5, r0, #3
 800766c:	439d      	bics	r5, r3
 800766e:	42a8      	cmp	r0, r5
 8007670:	d007      	beq.n	8007682 <sbrk_aligned+0x3a>
 8007672:	1a29      	subs	r1, r5, r0
 8007674:	0020      	movs	r0, r4
 8007676:	f000 fcd1 	bl	800801c <_sbrk_r>
 800767a:	3001      	adds	r0, #1
 800767c:	d101      	bne.n	8007682 <sbrk_aligned+0x3a>
 800767e:	2501      	movs	r5, #1
 8007680:	426d      	negs	r5, r5
 8007682:	0028      	movs	r0, r5
 8007684:	bd70      	pop	{r4, r5, r6, pc}
 8007686:	46c0      	nop			; (mov r8, r8)
 8007688:	20000318 	.word	0x20000318

0800768c <_malloc_r>:
 800768c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800768e:	2203      	movs	r2, #3
 8007690:	1ccb      	adds	r3, r1, #3
 8007692:	4393      	bics	r3, r2
 8007694:	3308      	adds	r3, #8
 8007696:	0006      	movs	r6, r0
 8007698:	001f      	movs	r7, r3
 800769a:	2b0c      	cmp	r3, #12
 800769c:	d238      	bcs.n	8007710 <_malloc_r+0x84>
 800769e:	270c      	movs	r7, #12
 80076a0:	42b9      	cmp	r1, r7
 80076a2:	d837      	bhi.n	8007714 <_malloc_r+0x88>
 80076a4:	0030      	movs	r0, r6
 80076a6:	f000 f873 	bl	8007790 <__malloc_lock>
 80076aa:	4b38      	ldr	r3, [pc, #224]	; (800778c <_malloc_r+0x100>)
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	001c      	movs	r4, r3
 80076b2:	2c00      	cmp	r4, #0
 80076b4:	d133      	bne.n	800771e <_malloc_r+0x92>
 80076b6:	0039      	movs	r1, r7
 80076b8:	0030      	movs	r0, r6
 80076ba:	f7ff ffc5 	bl	8007648 <sbrk_aligned>
 80076be:	0004      	movs	r4, r0
 80076c0:	1c43      	adds	r3, r0, #1
 80076c2:	d15e      	bne.n	8007782 <_malloc_r+0xf6>
 80076c4:	9b00      	ldr	r3, [sp, #0]
 80076c6:	681c      	ldr	r4, [r3, #0]
 80076c8:	0025      	movs	r5, r4
 80076ca:	2d00      	cmp	r5, #0
 80076cc:	d14e      	bne.n	800776c <_malloc_r+0xe0>
 80076ce:	2c00      	cmp	r4, #0
 80076d0:	d051      	beq.n	8007776 <_malloc_r+0xea>
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	0029      	movs	r1, r5
 80076d6:	18e3      	adds	r3, r4, r3
 80076d8:	0030      	movs	r0, r6
 80076da:	9301      	str	r3, [sp, #4]
 80076dc:	f000 fc9e 	bl	800801c <_sbrk_r>
 80076e0:	9b01      	ldr	r3, [sp, #4]
 80076e2:	4283      	cmp	r3, r0
 80076e4:	d147      	bne.n	8007776 <_malloc_r+0xea>
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	0030      	movs	r0, r6
 80076ea:	1aff      	subs	r7, r7, r3
 80076ec:	0039      	movs	r1, r7
 80076ee:	f7ff ffab 	bl	8007648 <sbrk_aligned>
 80076f2:	3001      	adds	r0, #1
 80076f4:	d03f      	beq.n	8007776 <_malloc_r+0xea>
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	19db      	adds	r3, r3, r7
 80076fa:	6023      	str	r3, [r4, #0]
 80076fc:	9b00      	ldr	r3, [sp, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d040      	beq.n	8007786 <_malloc_r+0xfa>
 8007704:	685a      	ldr	r2, [r3, #4]
 8007706:	42a2      	cmp	r2, r4
 8007708:	d133      	bne.n	8007772 <_malloc_r+0xe6>
 800770a:	2200      	movs	r2, #0
 800770c:	605a      	str	r2, [r3, #4]
 800770e:	e014      	b.n	800773a <_malloc_r+0xae>
 8007710:	2b00      	cmp	r3, #0
 8007712:	dac5      	bge.n	80076a0 <_malloc_r+0x14>
 8007714:	230c      	movs	r3, #12
 8007716:	2500      	movs	r5, #0
 8007718:	6033      	str	r3, [r6, #0]
 800771a:	0028      	movs	r0, r5
 800771c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800771e:	6821      	ldr	r1, [r4, #0]
 8007720:	1bc9      	subs	r1, r1, r7
 8007722:	d420      	bmi.n	8007766 <_malloc_r+0xda>
 8007724:	290b      	cmp	r1, #11
 8007726:	d918      	bls.n	800775a <_malloc_r+0xce>
 8007728:	19e2      	adds	r2, r4, r7
 800772a:	6027      	str	r7, [r4, #0]
 800772c:	42a3      	cmp	r3, r4
 800772e:	d112      	bne.n	8007756 <_malloc_r+0xca>
 8007730:	9b00      	ldr	r3, [sp, #0]
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	6863      	ldr	r3, [r4, #4]
 8007736:	6011      	str	r1, [r2, #0]
 8007738:	6053      	str	r3, [r2, #4]
 800773a:	0030      	movs	r0, r6
 800773c:	0025      	movs	r5, r4
 800773e:	f000 f82f 	bl	80077a0 <__malloc_unlock>
 8007742:	2207      	movs	r2, #7
 8007744:	350b      	adds	r5, #11
 8007746:	1d23      	adds	r3, r4, #4
 8007748:	4395      	bics	r5, r2
 800774a:	1aea      	subs	r2, r5, r3
 800774c:	429d      	cmp	r5, r3
 800774e:	d0e4      	beq.n	800771a <_malloc_r+0x8e>
 8007750:	1b5b      	subs	r3, r3, r5
 8007752:	50a3      	str	r3, [r4, r2]
 8007754:	e7e1      	b.n	800771a <_malloc_r+0x8e>
 8007756:	605a      	str	r2, [r3, #4]
 8007758:	e7ec      	b.n	8007734 <_malloc_r+0xa8>
 800775a:	6862      	ldr	r2, [r4, #4]
 800775c:	42a3      	cmp	r3, r4
 800775e:	d1d5      	bne.n	800770c <_malloc_r+0x80>
 8007760:	9b00      	ldr	r3, [sp, #0]
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	e7e9      	b.n	800773a <_malloc_r+0xae>
 8007766:	0023      	movs	r3, r4
 8007768:	6864      	ldr	r4, [r4, #4]
 800776a:	e7a2      	b.n	80076b2 <_malloc_r+0x26>
 800776c:	002c      	movs	r4, r5
 800776e:	686d      	ldr	r5, [r5, #4]
 8007770:	e7ab      	b.n	80076ca <_malloc_r+0x3e>
 8007772:	0013      	movs	r3, r2
 8007774:	e7c4      	b.n	8007700 <_malloc_r+0x74>
 8007776:	230c      	movs	r3, #12
 8007778:	0030      	movs	r0, r6
 800777a:	6033      	str	r3, [r6, #0]
 800777c:	f000 f810 	bl	80077a0 <__malloc_unlock>
 8007780:	e7cb      	b.n	800771a <_malloc_r+0x8e>
 8007782:	6027      	str	r7, [r4, #0]
 8007784:	e7d9      	b.n	800773a <_malloc_r+0xae>
 8007786:	605b      	str	r3, [r3, #4]
 8007788:	deff      	udf	#255	; 0xff
 800778a:	46c0      	nop			; (mov r8, r8)
 800778c:	20000314 	.word	0x20000314

08007790 <__malloc_lock>:
 8007790:	b510      	push	{r4, lr}
 8007792:	4802      	ldr	r0, [pc, #8]	; (800779c <__malloc_lock+0xc>)
 8007794:	f7ff ff0b 	bl	80075ae <__retarget_lock_acquire_recursive>
 8007798:	bd10      	pop	{r4, pc}
 800779a:	46c0      	nop			; (mov r8, r8)
 800779c:	20000310 	.word	0x20000310

080077a0 <__malloc_unlock>:
 80077a0:	b510      	push	{r4, lr}
 80077a2:	4802      	ldr	r0, [pc, #8]	; (80077ac <__malloc_unlock+0xc>)
 80077a4:	f7ff ff04 	bl	80075b0 <__retarget_lock_release_recursive>
 80077a8:	bd10      	pop	{r4, pc}
 80077aa:	46c0      	nop			; (mov r8, r8)
 80077ac:	20000310 	.word	0x20000310

080077b0 <__ssputs_r>:
 80077b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077b2:	b085      	sub	sp, #20
 80077b4:	9301      	str	r3, [sp, #4]
 80077b6:	9203      	str	r2, [sp, #12]
 80077b8:	688e      	ldr	r6, [r1, #8]
 80077ba:	9a01      	ldr	r2, [sp, #4]
 80077bc:	0007      	movs	r7, r0
 80077be:	000c      	movs	r4, r1
 80077c0:	680b      	ldr	r3, [r1, #0]
 80077c2:	4296      	cmp	r6, r2
 80077c4:	d831      	bhi.n	800782a <__ssputs_r+0x7a>
 80077c6:	898a      	ldrh	r2, [r1, #12]
 80077c8:	2190      	movs	r1, #144	; 0x90
 80077ca:	00c9      	lsls	r1, r1, #3
 80077cc:	420a      	tst	r2, r1
 80077ce:	d029      	beq.n	8007824 <__ssputs_r+0x74>
 80077d0:	2003      	movs	r0, #3
 80077d2:	6921      	ldr	r1, [r4, #16]
 80077d4:	1a5b      	subs	r3, r3, r1
 80077d6:	9302      	str	r3, [sp, #8]
 80077d8:	6963      	ldr	r3, [r4, #20]
 80077da:	4343      	muls	r3, r0
 80077dc:	0fdd      	lsrs	r5, r3, #31
 80077de:	18ed      	adds	r5, r5, r3
 80077e0:	9b01      	ldr	r3, [sp, #4]
 80077e2:	9802      	ldr	r0, [sp, #8]
 80077e4:	3301      	adds	r3, #1
 80077e6:	181b      	adds	r3, r3, r0
 80077e8:	106d      	asrs	r5, r5, #1
 80077ea:	42ab      	cmp	r3, r5
 80077ec:	d900      	bls.n	80077f0 <__ssputs_r+0x40>
 80077ee:	001d      	movs	r5, r3
 80077f0:	0552      	lsls	r2, r2, #21
 80077f2:	d529      	bpl.n	8007848 <__ssputs_r+0x98>
 80077f4:	0029      	movs	r1, r5
 80077f6:	0038      	movs	r0, r7
 80077f8:	f7ff ff48 	bl	800768c <_malloc_r>
 80077fc:	1e06      	subs	r6, r0, #0
 80077fe:	d02d      	beq.n	800785c <__ssputs_r+0xac>
 8007800:	9a02      	ldr	r2, [sp, #8]
 8007802:	6921      	ldr	r1, [r4, #16]
 8007804:	f000 fc27 	bl	8008056 <memcpy>
 8007808:	89a2      	ldrh	r2, [r4, #12]
 800780a:	4b19      	ldr	r3, [pc, #100]	; (8007870 <__ssputs_r+0xc0>)
 800780c:	401a      	ands	r2, r3
 800780e:	2380      	movs	r3, #128	; 0x80
 8007810:	4313      	orrs	r3, r2
 8007812:	81a3      	strh	r3, [r4, #12]
 8007814:	9b02      	ldr	r3, [sp, #8]
 8007816:	6126      	str	r6, [r4, #16]
 8007818:	18f6      	adds	r6, r6, r3
 800781a:	6026      	str	r6, [r4, #0]
 800781c:	6165      	str	r5, [r4, #20]
 800781e:	9e01      	ldr	r6, [sp, #4]
 8007820:	1aed      	subs	r5, r5, r3
 8007822:	60a5      	str	r5, [r4, #8]
 8007824:	9b01      	ldr	r3, [sp, #4]
 8007826:	429e      	cmp	r6, r3
 8007828:	d900      	bls.n	800782c <__ssputs_r+0x7c>
 800782a:	9e01      	ldr	r6, [sp, #4]
 800782c:	0032      	movs	r2, r6
 800782e:	9903      	ldr	r1, [sp, #12]
 8007830:	6820      	ldr	r0, [r4, #0]
 8007832:	f000 fbbb 	bl	8007fac <memmove>
 8007836:	2000      	movs	r0, #0
 8007838:	68a3      	ldr	r3, [r4, #8]
 800783a:	1b9b      	subs	r3, r3, r6
 800783c:	60a3      	str	r3, [r4, #8]
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	199b      	adds	r3, r3, r6
 8007842:	6023      	str	r3, [r4, #0]
 8007844:	b005      	add	sp, #20
 8007846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007848:	002a      	movs	r2, r5
 800784a:	0038      	movs	r0, r7
 800784c:	f000 fc0c 	bl	8008068 <_realloc_r>
 8007850:	1e06      	subs	r6, r0, #0
 8007852:	d1df      	bne.n	8007814 <__ssputs_r+0x64>
 8007854:	0038      	movs	r0, r7
 8007856:	6921      	ldr	r1, [r4, #16]
 8007858:	f7ff feac 	bl	80075b4 <_free_r>
 800785c:	230c      	movs	r3, #12
 800785e:	2001      	movs	r0, #1
 8007860:	603b      	str	r3, [r7, #0]
 8007862:	89a2      	ldrh	r2, [r4, #12]
 8007864:	3334      	adds	r3, #52	; 0x34
 8007866:	4313      	orrs	r3, r2
 8007868:	81a3      	strh	r3, [r4, #12]
 800786a:	4240      	negs	r0, r0
 800786c:	e7ea      	b.n	8007844 <__ssputs_r+0x94>
 800786e:	46c0      	nop			; (mov r8, r8)
 8007870:	fffffb7f 	.word	0xfffffb7f

08007874 <_svfiprintf_r>:
 8007874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007876:	b0a1      	sub	sp, #132	; 0x84
 8007878:	9003      	str	r0, [sp, #12]
 800787a:	001d      	movs	r5, r3
 800787c:	898b      	ldrh	r3, [r1, #12]
 800787e:	000f      	movs	r7, r1
 8007880:	0016      	movs	r6, r2
 8007882:	061b      	lsls	r3, r3, #24
 8007884:	d511      	bpl.n	80078aa <_svfiprintf_r+0x36>
 8007886:	690b      	ldr	r3, [r1, #16]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10e      	bne.n	80078aa <_svfiprintf_r+0x36>
 800788c:	2140      	movs	r1, #64	; 0x40
 800788e:	f7ff fefd 	bl	800768c <_malloc_r>
 8007892:	6038      	str	r0, [r7, #0]
 8007894:	6138      	str	r0, [r7, #16]
 8007896:	2800      	cmp	r0, #0
 8007898:	d105      	bne.n	80078a6 <_svfiprintf_r+0x32>
 800789a:	230c      	movs	r3, #12
 800789c:	9a03      	ldr	r2, [sp, #12]
 800789e:	3801      	subs	r0, #1
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	b021      	add	sp, #132	; 0x84
 80078a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078a6:	2340      	movs	r3, #64	; 0x40
 80078a8:	617b      	str	r3, [r7, #20]
 80078aa:	2300      	movs	r3, #0
 80078ac:	ac08      	add	r4, sp, #32
 80078ae:	6163      	str	r3, [r4, #20]
 80078b0:	3320      	adds	r3, #32
 80078b2:	7663      	strb	r3, [r4, #25]
 80078b4:	3310      	adds	r3, #16
 80078b6:	76a3      	strb	r3, [r4, #26]
 80078b8:	9507      	str	r5, [sp, #28]
 80078ba:	0035      	movs	r5, r6
 80078bc:	782b      	ldrb	r3, [r5, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d001      	beq.n	80078c6 <_svfiprintf_r+0x52>
 80078c2:	2b25      	cmp	r3, #37	; 0x25
 80078c4:	d148      	bne.n	8007958 <_svfiprintf_r+0xe4>
 80078c6:	1bab      	subs	r3, r5, r6
 80078c8:	9305      	str	r3, [sp, #20]
 80078ca:	42b5      	cmp	r5, r6
 80078cc:	d00b      	beq.n	80078e6 <_svfiprintf_r+0x72>
 80078ce:	0032      	movs	r2, r6
 80078d0:	0039      	movs	r1, r7
 80078d2:	9803      	ldr	r0, [sp, #12]
 80078d4:	f7ff ff6c 	bl	80077b0 <__ssputs_r>
 80078d8:	3001      	adds	r0, #1
 80078da:	d100      	bne.n	80078de <_svfiprintf_r+0x6a>
 80078dc:	e0af      	b.n	8007a3e <_svfiprintf_r+0x1ca>
 80078de:	6963      	ldr	r3, [r4, #20]
 80078e0:	9a05      	ldr	r2, [sp, #20]
 80078e2:	189b      	adds	r3, r3, r2
 80078e4:	6163      	str	r3, [r4, #20]
 80078e6:	782b      	ldrb	r3, [r5, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d100      	bne.n	80078ee <_svfiprintf_r+0x7a>
 80078ec:	e0a7      	b.n	8007a3e <_svfiprintf_r+0x1ca>
 80078ee:	2201      	movs	r2, #1
 80078f0:	2300      	movs	r3, #0
 80078f2:	4252      	negs	r2, r2
 80078f4:	6062      	str	r2, [r4, #4]
 80078f6:	a904      	add	r1, sp, #16
 80078f8:	3254      	adds	r2, #84	; 0x54
 80078fa:	1852      	adds	r2, r2, r1
 80078fc:	1c6e      	adds	r6, r5, #1
 80078fe:	6023      	str	r3, [r4, #0]
 8007900:	60e3      	str	r3, [r4, #12]
 8007902:	60a3      	str	r3, [r4, #8]
 8007904:	7013      	strb	r3, [r2, #0]
 8007906:	65a3      	str	r3, [r4, #88]	; 0x58
 8007908:	4b55      	ldr	r3, [pc, #340]	; (8007a60 <_svfiprintf_r+0x1ec>)
 800790a:	2205      	movs	r2, #5
 800790c:	0018      	movs	r0, r3
 800790e:	7831      	ldrb	r1, [r6, #0]
 8007910:	9305      	str	r3, [sp, #20]
 8007912:	f000 fb95 	bl	8008040 <memchr>
 8007916:	1c75      	adds	r5, r6, #1
 8007918:	2800      	cmp	r0, #0
 800791a:	d11f      	bne.n	800795c <_svfiprintf_r+0xe8>
 800791c:	6822      	ldr	r2, [r4, #0]
 800791e:	06d3      	lsls	r3, r2, #27
 8007920:	d504      	bpl.n	800792c <_svfiprintf_r+0xb8>
 8007922:	2353      	movs	r3, #83	; 0x53
 8007924:	a904      	add	r1, sp, #16
 8007926:	185b      	adds	r3, r3, r1
 8007928:	2120      	movs	r1, #32
 800792a:	7019      	strb	r1, [r3, #0]
 800792c:	0713      	lsls	r3, r2, #28
 800792e:	d504      	bpl.n	800793a <_svfiprintf_r+0xc6>
 8007930:	2353      	movs	r3, #83	; 0x53
 8007932:	a904      	add	r1, sp, #16
 8007934:	185b      	adds	r3, r3, r1
 8007936:	212b      	movs	r1, #43	; 0x2b
 8007938:	7019      	strb	r1, [r3, #0]
 800793a:	7833      	ldrb	r3, [r6, #0]
 800793c:	2b2a      	cmp	r3, #42	; 0x2a
 800793e:	d016      	beq.n	800796e <_svfiprintf_r+0xfa>
 8007940:	0035      	movs	r5, r6
 8007942:	2100      	movs	r1, #0
 8007944:	200a      	movs	r0, #10
 8007946:	68e3      	ldr	r3, [r4, #12]
 8007948:	782a      	ldrb	r2, [r5, #0]
 800794a:	1c6e      	adds	r6, r5, #1
 800794c:	3a30      	subs	r2, #48	; 0x30
 800794e:	2a09      	cmp	r2, #9
 8007950:	d94e      	bls.n	80079f0 <_svfiprintf_r+0x17c>
 8007952:	2900      	cmp	r1, #0
 8007954:	d111      	bne.n	800797a <_svfiprintf_r+0x106>
 8007956:	e017      	b.n	8007988 <_svfiprintf_r+0x114>
 8007958:	3501      	adds	r5, #1
 800795a:	e7af      	b.n	80078bc <_svfiprintf_r+0x48>
 800795c:	9b05      	ldr	r3, [sp, #20]
 800795e:	6822      	ldr	r2, [r4, #0]
 8007960:	1ac0      	subs	r0, r0, r3
 8007962:	2301      	movs	r3, #1
 8007964:	4083      	lsls	r3, r0
 8007966:	4313      	orrs	r3, r2
 8007968:	002e      	movs	r6, r5
 800796a:	6023      	str	r3, [r4, #0]
 800796c:	e7cc      	b.n	8007908 <_svfiprintf_r+0x94>
 800796e:	9b07      	ldr	r3, [sp, #28]
 8007970:	1d19      	adds	r1, r3, #4
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	9107      	str	r1, [sp, #28]
 8007976:	2b00      	cmp	r3, #0
 8007978:	db01      	blt.n	800797e <_svfiprintf_r+0x10a>
 800797a:	930b      	str	r3, [sp, #44]	; 0x2c
 800797c:	e004      	b.n	8007988 <_svfiprintf_r+0x114>
 800797e:	425b      	negs	r3, r3
 8007980:	60e3      	str	r3, [r4, #12]
 8007982:	2302      	movs	r3, #2
 8007984:	4313      	orrs	r3, r2
 8007986:	6023      	str	r3, [r4, #0]
 8007988:	782b      	ldrb	r3, [r5, #0]
 800798a:	2b2e      	cmp	r3, #46	; 0x2e
 800798c:	d10a      	bne.n	80079a4 <_svfiprintf_r+0x130>
 800798e:	786b      	ldrb	r3, [r5, #1]
 8007990:	2b2a      	cmp	r3, #42	; 0x2a
 8007992:	d135      	bne.n	8007a00 <_svfiprintf_r+0x18c>
 8007994:	9b07      	ldr	r3, [sp, #28]
 8007996:	3502      	adds	r5, #2
 8007998:	1d1a      	adds	r2, r3, #4
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	9207      	str	r2, [sp, #28]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	db2b      	blt.n	80079fa <_svfiprintf_r+0x186>
 80079a2:	9309      	str	r3, [sp, #36]	; 0x24
 80079a4:	4e2f      	ldr	r6, [pc, #188]	; (8007a64 <_svfiprintf_r+0x1f0>)
 80079a6:	2203      	movs	r2, #3
 80079a8:	0030      	movs	r0, r6
 80079aa:	7829      	ldrb	r1, [r5, #0]
 80079ac:	f000 fb48 	bl	8008040 <memchr>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d006      	beq.n	80079c2 <_svfiprintf_r+0x14e>
 80079b4:	2340      	movs	r3, #64	; 0x40
 80079b6:	1b80      	subs	r0, r0, r6
 80079b8:	4083      	lsls	r3, r0
 80079ba:	6822      	ldr	r2, [r4, #0]
 80079bc:	3501      	adds	r5, #1
 80079be:	4313      	orrs	r3, r2
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	7829      	ldrb	r1, [r5, #0]
 80079c4:	2206      	movs	r2, #6
 80079c6:	4828      	ldr	r0, [pc, #160]	; (8007a68 <_svfiprintf_r+0x1f4>)
 80079c8:	1c6e      	adds	r6, r5, #1
 80079ca:	7621      	strb	r1, [r4, #24]
 80079cc:	f000 fb38 	bl	8008040 <memchr>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d03c      	beq.n	8007a4e <_svfiprintf_r+0x1da>
 80079d4:	4b25      	ldr	r3, [pc, #148]	; (8007a6c <_svfiprintf_r+0x1f8>)
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d125      	bne.n	8007a26 <_svfiprintf_r+0x1b2>
 80079da:	2207      	movs	r2, #7
 80079dc:	9b07      	ldr	r3, [sp, #28]
 80079de:	3307      	adds	r3, #7
 80079e0:	4393      	bics	r3, r2
 80079e2:	3308      	adds	r3, #8
 80079e4:	9307      	str	r3, [sp, #28]
 80079e6:	6963      	ldr	r3, [r4, #20]
 80079e8:	9a04      	ldr	r2, [sp, #16]
 80079ea:	189b      	adds	r3, r3, r2
 80079ec:	6163      	str	r3, [r4, #20]
 80079ee:	e764      	b.n	80078ba <_svfiprintf_r+0x46>
 80079f0:	4343      	muls	r3, r0
 80079f2:	0035      	movs	r5, r6
 80079f4:	2101      	movs	r1, #1
 80079f6:	189b      	adds	r3, r3, r2
 80079f8:	e7a6      	b.n	8007948 <_svfiprintf_r+0xd4>
 80079fa:	2301      	movs	r3, #1
 80079fc:	425b      	negs	r3, r3
 80079fe:	e7d0      	b.n	80079a2 <_svfiprintf_r+0x12e>
 8007a00:	2300      	movs	r3, #0
 8007a02:	200a      	movs	r0, #10
 8007a04:	001a      	movs	r2, r3
 8007a06:	3501      	adds	r5, #1
 8007a08:	6063      	str	r3, [r4, #4]
 8007a0a:	7829      	ldrb	r1, [r5, #0]
 8007a0c:	1c6e      	adds	r6, r5, #1
 8007a0e:	3930      	subs	r1, #48	; 0x30
 8007a10:	2909      	cmp	r1, #9
 8007a12:	d903      	bls.n	8007a1c <_svfiprintf_r+0x1a8>
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d0c5      	beq.n	80079a4 <_svfiprintf_r+0x130>
 8007a18:	9209      	str	r2, [sp, #36]	; 0x24
 8007a1a:	e7c3      	b.n	80079a4 <_svfiprintf_r+0x130>
 8007a1c:	4342      	muls	r2, r0
 8007a1e:	0035      	movs	r5, r6
 8007a20:	2301      	movs	r3, #1
 8007a22:	1852      	adds	r2, r2, r1
 8007a24:	e7f1      	b.n	8007a0a <_svfiprintf_r+0x196>
 8007a26:	aa07      	add	r2, sp, #28
 8007a28:	9200      	str	r2, [sp, #0]
 8007a2a:	0021      	movs	r1, r4
 8007a2c:	003a      	movs	r2, r7
 8007a2e:	4b10      	ldr	r3, [pc, #64]	; (8007a70 <_svfiprintf_r+0x1fc>)
 8007a30:	9803      	ldr	r0, [sp, #12]
 8007a32:	e000      	b.n	8007a36 <_svfiprintf_r+0x1c2>
 8007a34:	bf00      	nop
 8007a36:	9004      	str	r0, [sp, #16]
 8007a38:	9b04      	ldr	r3, [sp, #16]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	d1d3      	bne.n	80079e6 <_svfiprintf_r+0x172>
 8007a3e:	89bb      	ldrh	r3, [r7, #12]
 8007a40:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007a42:	065b      	lsls	r3, r3, #25
 8007a44:	d400      	bmi.n	8007a48 <_svfiprintf_r+0x1d4>
 8007a46:	e72c      	b.n	80078a2 <_svfiprintf_r+0x2e>
 8007a48:	2001      	movs	r0, #1
 8007a4a:	4240      	negs	r0, r0
 8007a4c:	e729      	b.n	80078a2 <_svfiprintf_r+0x2e>
 8007a4e:	aa07      	add	r2, sp, #28
 8007a50:	9200      	str	r2, [sp, #0]
 8007a52:	0021      	movs	r1, r4
 8007a54:	003a      	movs	r2, r7
 8007a56:	4b06      	ldr	r3, [pc, #24]	; (8007a70 <_svfiprintf_r+0x1fc>)
 8007a58:	9803      	ldr	r0, [sp, #12]
 8007a5a:	f000 f87b 	bl	8007b54 <_printf_i>
 8007a5e:	e7ea      	b.n	8007a36 <_svfiprintf_r+0x1c2>
 8007a60:	08008208 	.word	0x08008208
 8007a64:	0800820e 	.word	0x0800820e
 8007a68:	08008212 	.word	0x08008212
 8007a6c:	00000000 	.word	0x00000000
 8007a70:	080077b1 	.word	0x080077b1

08007a74 <_printf_common>:
 8007a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a76:	0016      	movs	r6, r2
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	688a      	ldr	r2, [r1, #8]
 8007a7c:	690b      	ldr	r3, [r1, #16]
 8007a7e:	000c      	movs	r4, r1
 8007a80:	9000      	str	r0, [sp, #0]
 8007a82:	4293      	cmp	r3, r2
 8007a84:	da00      	bge.n	8007a88 <_printf_common+0x14>
 8007a86:	0013      	movs	r3, r2
 8007a88:	0022      	movs	r2, r4
 8007a8a:	6033      	str	r3, [r6, #0]
 8007a8c:	3243      	adds	r2, #67	; 0x43
 8007a8e:	7812      	ldrb	r2, [r2, #0]
 8007a90:	2a00      	cmp	r2, #0
 8007a92:	d001      	beq.n	8007a98 <_printf_common+0x24>
 8007a94:	3301      	adds	r3, #1
 8007a96:	6033      	str	r3, [r6, #0]
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	069b      	lsls	r3, r3, #26
 8007a9c:	d502      	bpl.n	8007aa4 <_printf_common+0x30>
 8007a9e:	6833      	ldr	r3, [r6, #0]
 8007aa0:	3302      	adds	r3, #2
 8007aa2:	6033      	str	r3, [r6, #0]
 8007aa4:	6822      	ldr	r2, [r4, #0]
 8007aa6:	2306      	movs	r3, #6
 8007aa8:	0015      	movs	r5, r2
 8007aaa:	401d      	ands	r5, r3
 8007aac:	421a      	tst	r2, r3
 8007aae:	d027      	beq.n	8007b00 <_printf_common+0x8c>
 8007ab0:	0023      	movs	r3, r4
 8007ab2:	3343      	adds	r3, #67	; 0x43
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	1e5a      	subs	r2, r3, #1
 8007ab8:	4193      	sbcs	r3, r2
 8007aba:	6822      	ldr	r2, [r4, #0]
 8007abc:	0692      	lsls	r2, r2, #26
 8007abe:	d430      	bmi.n	8007b22 <_printf_common+0xae>
 8007ac0:	0022      	movs	r2, r4
 8007ac2:	9901      	ldr	r1, [sp, #4]
 8007ac4:	9800      	ldr	r0, [sp, #0]
 8007ac6:	9d08      	ldr	r5, [sp, #32]
 8007ac8:	3243      	adds	r2, #67	; 0x43
 8007aca:	47a8      	blx	r5
 8007acc:	3001      	adds	r0, #1
 8007ace:	d025      	beq.n	8007b1c <_printf_common+0xa8>
 8007ad0:	2206      	movs	r2, #6
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	2500      	movs	r5, #0
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	2b04      	cmp	r3, #4
 8007ada:	d105      	bne.n	8007ae8 <_printf_common+0x74>
 8007adc:	6833      	ldr	r3, [r6, #0]
 8007ade:	68e5      	ldr	r5, [r4, #12]
 8007ae0:	1aed      	subs	r5, r5, r3
 8007ae2:	43eb      	mvns	r3, r5
 8007ae4:	17db      	asrs	r3, r3, #31
 8007ae6:	401d      	ands	r5, r3
 8007ae8:	68a3      	ldr	r3, [r4, #8]
 8007aea:	6922      	ldr	r2, [r4, #16]
 8007aec:	4293      	cmp	r3, r2
 8007aee:	dd01      	ble.n	8007af4 <_printf_common+0x80>
 8007af0:	1a9b      	subs	r3, r3, r2
 8007af2:	18ed      	adds	r5, r5, r3
 8007af4:	2600      	movs	r6, #0
 8007af6:	42b5      	cmp	r5, r6
 8007af8:	d120      	bne.n	8007b3c <_printf_common+0xc8>
 8007afa:	2000      	movs	r0, #0
 8007afc:	e010      	b.n	8007b20 <_printf_common+0xac>
 8007afe:	3501      	adds	r5, #1
 8007b00:	68e3      	ldr	r3, [r4, #12]
 8007b02:	6832      	ldr	r2, [r6, #0]
 8007b04:	1a9b      	subs	r3, r3, r2
 8007b06:	42ab      	cmp	r3, r5
 8007b08:	ddd2      	ble.n	8007ab0 <_printf_common+0x3c>
 8007b0a:	0022      	movs	r2, r4
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	9901      	ldr	r1, [sp, #4]
 8007b10:	9800      	ldr	r0, [sp, #0]
 8007b12:	9f08      	ldr	r7, [sp, #32]
 8007b14:	3219      	adds	r2, #25
 8007b16:	47b8      	blx	r7
 8007b18:	3001      	adds	r0, #1
 8007b1a:	d1f0      	bne.n	8007afe <_printf_common+0x8a>
 8007b1c:	2001      	movs	r0, #1
 8007b1e:	4240      	negs	r0, r0
 8007b20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b22:	2030      	movs	r0, #48	; 0x30
 8007b24:	18e1      	adds	r1, r4, r3
 8007b26:	3143      	adds	r1, #67	; 0x43
 8007b28:	7008      	strb	r0, [r1, #0]
 8007b2a:	0021      	movs	r1, r4
 8007b2c:	1c5a      	adds	r2, r3, #1
 8007b2e:	3145      	adds	r1, #69	; 0x45
 8007b30:	7809      	ldrb	r1, [r1, #0]
 8007b32:	18a2      	adds	r2, r4, r2
 8007b34:	3243      	adds	r2, #67	; 0x43
 8007b36:	3302      	adds	r3, #2
 8007b38:	7011      	strb	r1, [r2, #0]
 8007b3a:	e7c1      	b.n	8007ac0 <_printf_common+0x4c>
 8007b3c:	0022      	movs	r2, r4
 8007b3e:	2301      	movs	r3, #1
 8007b40:	9901      	ldr	r1, [sp, #4]
 8007b42:	9800      	ldr	r0, [sp, #0]
 8007b44:	9f08      	ldr	r7, [sp, #32]
 8007b46:	321a      	adds	r2, #26
 8007b48:	47b8      	blx	r7
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	d0e6      	beq.n	8007b1c <_printf_common+0xa8>
 8007b4e:	3601      	adds	r6, #1
 8007b50:	e7d1      	b.n	8007af6 <_printf_common+0x82>
	...

08007b54 <_printf_i>:
 8007b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b56:	b08b      	sub	sp, #44	; 0x2c
 8007b58:	9206      	str	r2, [sp, #24]
 8007b5a:	000a      	movs	r2, r1
 8007b5c:	3243      	adds	r2, #67	; 0x43
 8007b5e:	9307      	str	r3, [sp, #28]
 8007b60:	9005      	str	r0, [sp, #20]
 8007b62:	9204      	str	r2, [sp, #16]
 8007b64:	7e0a      	ldrb	r2, [r1, #24]
 8007b66:	000c      	movs	r4, r1
 8007b68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b6a:	2a78      	cmp	r2, #120	; 0x78
 8007b6c:	d809      	bhi.n	8007b82 <_printf_i+0x2e>
 8007b6e:	2a62      	cmp	r2, #98	; 0x62
 8007b70:	d80b      	bhi.n	8007b8a <_printf_i+0x36>
 8007b72:	2a00      	cmp	r2, #0
 8007b74:	d100      	bne.n	8007b78 <_printf_i+0x24>
 8007b76:	e0be      	b.n	8007cf6 <_printf_i+0x1a2>
 8007b78:	497c      	ldr	r1, [pc, #496]	; (8007d6c <_printf_i+0x218>)
 8007b7a:	9103      	str	r1, [sp, #12]
 8007b7c:	2a58      	cmp	r2, #88	; 0x58
 8007b7e:	d100      	bne.n	8007b82 <_printf_i+0x2e>
 8007b80:	e093      	b.n	8007caa <_printf_i+0x156>
 8007b82:	0026      	movs	r6, r4
 8007b84:	3642      	adds	r6, #66	; 0x42
 8007b86:	7032      	strb	r2, [r6, #0]
 8007b88:	e022      	b.n	8007bd0 <_printf_i+0x7c>
 8007b8a:	0010      	movs	r0, r2
 8007b8c:	3863      	subs	r0, #99	; 0x63
 8007b8e:	2815      	cmp	r0, #21
 8007b90:	d8f7      	bhi.n	8007b82 <_printf_i+0x2e>
 8007b92:	f7f8 fac1 	bl	8000118 <__gnu_thumb1_case_shi>
 8007b96:	0016      	.short	0x0016
 8007b98:	fff6001f 	.word	0xfff6001f
 8007b9c:	fff6fff6 	.word	0xfff6fff6
 8007ba0:	001ffff6 	.word	0x001ffff6
 8007ba4:	fff6fff6 	.word	0xfff6fff6
 8007ba8:	fff6fff6 	.word	0xfff6fff6
 8007bac:	003600a3 	.word	0x003600a3
 8007bb0:	fff60083 	.word	0xfff60083
 8007bb4:	00b4fff6 	.word	0x00b4fff6
 8007bb8:	0036fff6 	.word	0x0036fff6
 8007bbc:	fff6fff6 	.word	0xfff6fff6
 8007bc0:	0087      	.short	0x0087
 8007bc2:	0026      	movs	r6, r4
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	3642      	adds	r6, #66	; 0x42
 8007bc8:	1d11      	adds	r1, r2, #4
 8007bca:	6019      	str	r1, [r3, #0]
 8007bcc:	6813      	ldr	r3, [r2, #0]
 8007bce:	7033      	strb	r3, [r6, #0]
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e0a2      	b.n	8007d1a <_printf_i+0x1c6>
 8007bd4:	6818      	ldr	r0, [r3, #0]
 8007bd6:	6809      	ldr	r1, [r1, #0]
 8007bd8:	1d02      	adds	r2, r0, #4
 8007bda:	060d      	lsls	r5, r1, #24
 8007bdc:	d50b      	bpl.n	8007bf6 <_printf_i+0xa2>
 8007bde:	6805      	ldr	r5, [r0, #0]
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	2d00      	cmp	r5, #0
 8007be4:	da03      	bge.n	8007bee <_printf_i+0x9a>
 8007be6:	232d      	movs	r3, #45	; 0x2d
 8007be8:	9a04      	ldr	r2, [sp, #16]
 8007bea:	426d      	negs	r5, r5
 8007bec:	7013      	strb	r3, [r2, #0]
 8007bee:	4b5f      	ldr	r3, [pc, #380]	; (8007d6c <_printf_i+0x218>)
 8007bf0:	270a      	movs	r7, #10
 8007bf2:	9303      	str	r3, [sp, #12]
 8007bf4:	e01b      	b.n	8007c2e <_printf_i+0xda>
 8007bf6:	6805      	ldr	r5, [r0, #0]
 8007bf8:	601a      	str	r2, [r3, #0]
 8007bfa:	0649      	lsls	r1, r1, #25
 8007bfc:	d5f1      	bpl.n	8007be2 <_printf_i+0x8e>
 8007bfe:	b22d      	sxth	r5, r5
 8007c00:	e7ef      	b.n	8007be2 <_printf_i+0x8e>
 8007c02:	680d      	ldr	r5, [r1, #0]
 8007c04:	6819      	ldr	r1, [r3, #0]
 8007c06:	1d08      	adds	r0, r1, #4
 8007c08:	6018      	str	r0, [r3, #0]
 8007c0a:	062e      	lsls	r6, r5, #24
 8007c0c:	d501      	bpl.n	8007c12 <_printf_i+0xbe>
 8007c0e:	680d      	ldr	r5, [r1, #0]
 8007c10:	e003      	b.n	8007c1a <_printf_i+0xc6>
 8007c12:	066d      	lsls	r5, r5, #25
 8007c14:	d5fb      	bpl.n	8007c0e <_printf_i+0xba>
 8007c16:	680d      	ldr	r5, [r1, #0]
 8007c18:	b2ad      	uxth	r5, r5
 8007c1a:	4b54      	ldr	r3, [pc, #336]	; (8007d6c <_printf_i+0x218>)
 8007c1c:	2708      	movs	r7, #8
 8007c1e:	9303      	str	r3, [sp, #12]
 8007c20:	2a6f      	cmp	r2, #111	; 0x6f
 8007c22:	d000      	beq.n	8007c26 <_printf_i+0xd2>
 8007c24:	3702      	adds	r7, #2
 8007c26:	0023      	movs	r3, r4
 8007c28:	2200      	movs	r2, #0
 8007c2a:	3343      	adds	r3, #67	; 0x43
 8007c2c:	701a      	strb	r2, [r3, #0]
 8007c2e:	6863      	ldr	r3, [r4, #4]
 8007c30:	60a3      	str	r3, [r4, #8]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	db03      	blt.n	8007c3e <_printf_i+0xea>
 8007c36:	2104      	movs	r1, #4
 8007c38:	6822      	ldr	r2, [r4, #0]
 8007c3a:	438a      	bics	r2, r1
 8007c3c:	6022      	str	r2, [r4, #0]
 8007c3e:	2d00      	cmp	r5, #0
 8007c40:	d102      	bne.n	8007c48 <_printf_i+0xf4>
 8007c42:	9e04      	ldr	r6, [sp, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00c      	beq.n	8007c62 <_printf_i+0x10e>
 8007c48:	9e04      	ldr	r6, [sp, #16]
 8007c4a:	0028      	movs	r0, r5
 8007c4c:	0039      	movs	r1, r7
 8007c4e:	f7f8 faf3 	bl	8000238 <__aeabi_uidivmod>
 8007c52:	9b03      	ldr	r3, [sp, #12]
 8007c54:	3e01      	subs	r6, #1
 8007c56:	5c5b      	ldrb	r3, [r3, r1]
 8007c58:	7033      	strb	r3, [r6, #0]
 8007c5a:	002b      	movs	r3, r5
 8007c5c:	0005      	movs	r5, r0
 8007c5e:	429f      	cmp	r7, r3
 8007c60:	d9f3      	bls.n	8007c4a <_printf_i+0xf6>
 8007c62:	2f08      	cmp	r7, #8
 8007c64:	d109      	bne.n	8007c7a <_printf_i+0x126>
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	07db      	lsls	r3, r3, #31
 8007c6a:	d506      	bpl.n	8007c7a <_printf_i+0x126>
 8007c6c:	6862      	ldr	r2, [r4, #4]
 8007c6e:	6923      	ldr	r3, [r4, #16]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	dc02      	bgt.n	8007c7a <_printf_i+0x126>
 8007c74:	2330      	movs	r3, #48	; 0x30
 8007c76:	3e01      	subs	r6, #1
 8007c78:	7033      	strb	r3, [r6, #0]
 8007c7a:	9b04      	ldr	r3, [sp, #16]
 8007c7c:	1b9b      	subs	r3, r3, r6
 8007c7e:	6123      	str	r3, [r4, #16]
 8007c80:	9b07      	ldr	r3, [sp, #28]
 8007c82:	0021      	movs	r1, r4
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	9805      	ldr	r0, [sp, #20]
 8007c88:	9b06      	ldr	r3, [sp, #24]
 8007c8a:	aa09      	add	r2, sp, #36	; 0x24
 8007c8c:	f7ff fef2 	bl	8007a74 <_printf_common>
 8007c90:	3001      	adds	r0, #1
 8007c92:	d147      	bne.n	8007d24 <_printf_i+0x1d0>
 8007c94:	2001      	movs	r0, #1
 8007c96:	4240      	negs	r0, r0
 8007c98:	b00b      	add	sp, #44	; 0x2c
 8007c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	6809      	ldr	r1, [r1, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	6022      	str	r2, [r4, #0]
 8007ca4:	2278      	movs	r2, #120	; 0x78
 8007ca6:	4932      	ldr	r1, [pc, #200]	; (8007d70 <_printf_i+0x21c>)
 8007ca8:	9103      	str	r1, [sp, #12]
 8007caa:	0021      	movs	r1, r4
 8007cac:	3145      	adds	r1, #69	; 0x45
 8007cae:	700a      	strb	r2, [r1, #0]
 8007cb0:	6819      	ldr	r1, [r3, #0]
 8007cb2:	6822      	ldr	r2, [r4, #0]
 8007cb4:	c920      	ldmia	r1!, {r5}
 8007cb6:	0610      	lsls	r0, r2, #24
 8007cb8:	d402      	bmi.n	8007cc0 <_printf_i+0x16c>
 8007cba:	0650      	lsls	r0, r2, #25
 8007cbc:	d500      	bpl.n	8007cc0 <_printf_i+0x16c>
 8007cbe:	b2ad      	uxth	r5, r5
 8007cc0:	6019      	str	r1, [r3, #0]
 8007cc2:	07d3      	lsls	r3, r2, #31
 8007cc4:	d502      	bpl.n	8007ccc <_printf_i+0x178>
 8007cc6:	2320      	movs	r3, #32
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	6023      	str	r3, [r4, #0]
 8007ccc:	2710      	movs	r7, #16
 8007cce:	2d00      	cmp	r5, #0
 8007cd0:	d1a9      	bne.n	8007c26 <_printf_i+0xd2>
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	4393      	bics	r3, r2
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	e7a4      	b.n	8007c26 <_printf_i+0xd2>
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	680d      	ldr	r5, [r1, #0]
 8007ce0:	1d10      	adds	r0, r2, #4
 8007ce2:	6949      	ldr	r1, [r1, #20]
 8007ce4:	6018      	str	r0, [r3, #0]
 8007ce6:	6813      	ldr	r3, [r2, #0]
 8007ce8:	062e      	lsls	r6, r5, #24
 8007cea:	d501      	bpl.n	8007cf0 <_printf_i+0x19c>
 8007cec:	6019      	str	r1, [r3, #0]
 8007cee:	e002      	b.n	8007cf6 <_printf_i+0x1a2>
 8007cf0:	066d      	lsls	r5, r5, #25
 8007cf2:	d5fb      	bpl.n	8007cec <_printf_i+0x198>
 8007cf4:	8019      	strh	r1, [r3, #0]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	9e04      	ldr	r6, [sp, #16]
 8007cfa:	6123      	str	r3, [r4, #16]
 8007cfc:	e7c0      	b.n	8007c80 <_printf_i+0x12c>
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	1d11      	adds	r1, r2, #4
 8007d02:	6019      	str	r1, [r3, #0]
 8007d04:	6816      	ldr	r6, [r2, #0]
 8007d06:	2100      	movs	r1, #0
 8007d08:	0030      	movs	r0, r6
 8007d0a:	6862      	ldr	r2, [r4, #4]
 8007d0c:	f000 f998 	bl	8008040 <memchr>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	d001      	beq.n	8007d18 <_printf_i+0x1c4>
 8007d14:	1b80      	subs	r0, r0, r6
 8007d16:	6060      	str	r0, [r4, #4]
 8007d18:	6863      	ldr	r3, [r4, #4]
 8007d1a:	6123      	str	r3, [r4, #16]
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9a04      	ldr	r2, [sp, #16]
 8007d20:	7013      	strb	r3, [r2, #0]
 8007d22:	e7ad      	b.n	8007c80 <_printf_i+0x12c>
 8007d24:	0032      	movs	r2, r6
 8007d26:	6923      	ldr	r3, [r4, #16]
 8007d28:	9906      	ldr	r1, [sp, #24]
 8007d2a:	9805      	ldr	r0, [sp, #20]
 8007d2c:	9d07      	ldr	r5, [sp, #28]
 8007d2e:	47a8      	blx	r5
 8007d30:	3001      	adds	r0, #1
 8007d32:	d0af      	beq.n	8007c94 <_printf_i+0x140>
 8007d34:	6823      	ldr	r3, [r4, #0]
 8007d36:	079b      	lsls	r3, r3, #30
 8007d38:	d415      	bmi.n	8007d66 <_printf_i+0x212>
 8007d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d3c:	68e0      	ldr	r0, [r4, #12]
 8007d3e:	4298      	cmp	r0, r3
 8007d40:	daaa      	bge.n	8007c98 <_printf_i+0x144>
 8007d42:	0018      	movs	r0, r3
 8007d44:	e7a8      	b.n	8007c98 <_printf_i+0x144>
 8007d46:	0022      	movs	r2, r4
 8007d48:	2301      	movs	r3, #1
 8007d4a:	9906      	ldr	r1, [sp, #24]
 8007d4c:	9805      	ldr	r0, [sp, #20]
 8007d4e:	9e07      	ldr	r6, [sp, #28]
 8007d50:	3219      	adds	r2, #25
 8007d52:	47b0      	blx	r6
 8007d54:	3001      	adds	r0, #1
 8007d56:	d09d      	beq.n	8007c94 <_printf_i+0x140>
 8007d58:	3501      	adds	r5, #1
 8007d5a:	68e3      	ldr	r3, [r4, #12]
 8007d5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d5e:	1a9b      	subs	r3, r3, r2
 8007d60:	42ab      	cmp	r3, r5
 8007d62:	dcf0      	bgt.n	8007d46 <_printf_i+0x1f2>
 8007d64:	e7e9      	b.n	8007d3a <_printf_i+0x1e6>
 8007d66:	2500      	movs	r5, #0
 8007d68:	e7f7      	b.n	8007d5a <_printf_i+0x206>
 8007d6a:	46c0      	nop			; (mov r8, r8)
 8007d6c:	08008219 	.word	0x08008219
 8007d70:	0800822a 	.word	0x0800822a

08007d74 <__sflush_r>:
 8007d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d76:	898b      	ldrh	r3, [r1, #12]
 8007d78:	0005      	movs	r5, r0
 8007d7a:	000c      	movs	r4, r1
 8007d7c:	071a      	lsls	r2, r3, #28
 8007d7e:	d45c      	bmi.n	8007e3a <__sflush_r+0xc6>
 8007d80:	684a      	ldr	r2, [r1, #4]
 8007d82:	2a00      	cmp	r2, #0
 8007d84:	dc04      	bgt.n	8007d90 <__sflush_r+0x1c>
 8007d86:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007d88:	2a00      	cmp	r2, #0
 8007d8a:	dc01      	bgt.n	8007d90 <__sflush_r+0x1c>
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d90:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007d92:	2f00      	cmp	r7, #0
 8007d94:	d0fa      	beq.n	8007d8c <__sflush_r+0x18>
 8007d96:	2200      	movs	r2, #0
 8007d98:	2080      	movs	r0, #128	; 0x80
 8007d9a:	682e      	ldr	r6, [r5, #0]
 8007d9c:	602a      	str	r2, [r5, #0]
 8007d9e:	001a      	movs	r2, r3
 8007da0:	0140      	lsls	r0, r0, #5
 8007da2:	6a21      	ldr	r1, [r4, #32]
 8007da4:	4002      	ands	r2, r0
 8007da6:	4203      	tst	r3, r0
 8007da8:	d034      	beq.n	8007e14 <__sflush_r+0xa0>
 8007daa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	075b      	lsls	r3, r3, #29
 8007db0:	d506      	bpl.n	8007dc0 <__sflush_r+0x4c>
 8007db2:	6863      	ldr	r3, [r4, #4]
 8007db4:	1ac0      	subs	r0, r0, r3
 8007db6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <__sflush_r+0x4c>
 8007dbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dbe:	1ac0      	subs	r0, r0, r3
 8007dc0:	0002      	movs	r2, r0
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	0028      	movs	r0, r5
 8007dc6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007dc8:	6a21      	ldr	r1, [r4, #32]
 8007dca:	47b8      	blx	r7
 8007dcc:	89a2      	ldrh	r2, [r4, #12]
 8007dce:	1c43      	adds	r3, r0, #1
 8007dd0:	d106      	bne.n	8007de0 <__sflush_r+0x6c>
 8007dd2:	6829      	ldr	r1, [r5, #0]
 8007dd4:	291d      	cmp	r1, #29
 8007dd6:	d82c      	bhi.n	8007e32 <__sflush_r+0xbe>
 8007dd8:	4b2a      	ldr	r3, [pc, #168]	; (8007e84 <__sflush_r+0x110>)
 8007dda:	410b      	asrs	r3, r1
 8007ddc:	07db      	lsls	r3, r3, #31
 8007dde:	d428      	bmi.n	8007e32 <__sflush_r+0xbe>
 8007de0:	2300      	movs	r3, #0
 8007de2:	6063      	str	r3, [r4, #4]
 8007de4:	6923      	ldr	r3, [r4, #16]
 8007de6:	6023      	str	r3, [r4, #0]
 8007de8:	04d2      	lsls	r2, r2, #19
 8007dea:	d505      	bpl.n	8007df8 <__sflush_r+0x84>
 8007dec:	1c43      	adds	r3, r0, #1
 8007dee:	d102      	bne.n	8007df6 <__sflush_r+0x82>
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d100      	bne.n	8007df8 <__sflush_r+0x84>
 8007df6:	6560      	str	r0, [r4, #84]	; 0x54
 8007df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dfa:	602e      	str	r6, [r5, #0]
 8007dfc:	2900      	cmp	r1, #0
 8007dfe:	d0c5      	beq.n	8007d8c <__sflush_r+0x18>
 8007e00:	0023      	movs	r3, r4
 8007e02:	3344      	adds	r3, #68	; 0x44
 8007e04:	4299      	cmp	r1, r3
 8007e06:	d002      	beq.n	8007e0e <__sflush_r+0x9a>
 8007e08:	0028      	movs	r0, r5
 8007e0a:	f7ff fbd3 	bl	80075b4 <_free_r>
 8007e0e:	2000      	movs	r0, #0
 8007e10:	6360      	str	r0, [r4, #52]	; 0x34
 8007e12:	e7bc      	b.n	8007d8e <__sflush_r+0x1a>
 8007e14:	2301      	movs	r3, #1
 8007e16:	0028      	movs	r0, r5
 8007e18:	47b8      	blx	r7
 8007e1a:	1c43      	adds	r3, r0, #1
 8007e1c:	d1c6      	bne.n	8007dac <__sflush_r+0x38>
 8007e1e:	682b      	ldr	r3, [r5, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d0c3      	beq.n	8007dac <__sflush_r+0x38>
 8007e24:	2b1d      	cmp	r3, #29
 8007e26:	d001      	beq.n	8007e2c <__sflush_r+0xb8>
 8007e28:	2b16      	cmp	r3, #22
 8007e2a:	d101      	bne.n	8007e30 <__sflush_r+0xbc>
 8007e2c:	602e      	str	r6, [r5, #0]
 8007e2e:	e7ad      	b.n	8007d8c <__sflush_r+0x18>
 8007e30:	89a2      	ldrh	r2, [r4, #12]
 8007e32:	2340      	movs	r3, #64	; 0x40
 8007e34:	4313      	orrs	r3, r2
 8007e36:	81a3      	strh	r3, [r4, #12]
 8007e38:	e7a9      	b.n	8007d8e <__sflush_r+0x1a>
 8007e3a:	690e      	ldr	r6, [r1, #16]
 8007e3c:	2e00      	cmp	r6, #0
 8007e3e:	d0a5      	beq.n	8007d8c <__sflush_r+0x18>
 8007e40:	680f      	ldr	r7, [r1, #0]
 8007e42:	600e      	str	r6, [r1, #0]
 8007e44:	1bba      	subs	r2, r7, r6
 8007e46:	9201      	str	r2, [sp, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	079b      	lsls	r3, r3, #30
 8007e4c:	d100      	bne.n	8007e50 <__sflush_r+0xdc>
 8007e4e:	694a      	ldr	r2, [r1, #20]
 8007e50:	60a2      	str	r2, [r4, #8]
 8007e52:	9b01      	ldr	r3, [sp, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	dd99      	ble.n	8007d8c <__sflush_r+0x18>
 8007e58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007e5a:	0032      	movs	r2, r6
 8007e5c:	001f      	movs	r7, r3
 8007e5e:	0028      	movs	r0, r5
 8007e60:	9b01      	ldr	r3, [sp, #4]
 8007e62:	6a21      	ldr	r1, [r4, #32]
 8007e64:	47b8      	blx	r7
 8007e66:	2800      	cmp	r0, #0
 8007e68:	dc06      	bgt.n	8007e78 <__sflush_r+0x104>
 8007e6a:	2340      	movs	r3, #64	; 0x40
 8007e6c:	2001      	movs	r0, #1
 8007e6e:	89a2      	ldrh	r2, [r4, #12]
 8007e70:	4240      	negs	r0, r0
 8007e72:	4313      	orrs	r3, r2
 8007e74:	81a3      	strh	r3, [r4, #12]
 8007e76:	e78a      	b.n	8007d8e <__sflush_r+0x1a>
 8007e78:	9b01      	ldr	r3, [sp, #4]
 8007e7a:	1836      	adds	r6, r6, r0
 8007e7c:	1a1b      	subs	r3, r3, r0
 8007e7e:	9301      	str	r3, [sp, #4]
 8007e80:	e7e7      	b.n	8007e52 <__sflush_r+0xde>
 8007e82:	46c0      	nop			; (mov r8, r8)
 8007e84:	dfbffffe 	.word	0xdfbffffe

08007e88 <_fflush_r>:
 8007e88:	690b      	ldr	r3, [r1, #16]
 8007e8a:	b570      	push	{r4, r5, r6, lr}
 8007e8c:	0005      	movs	r5, r0
 8007e8e:	000c      	movs	r4, r1
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d102      	bne.n	8007e9a <_fflush_r+0x12>
 8007e94:	2500      	movs	r5, #0
 8007e96:	0028      	movs	r0, r5
 8007e98:	bd70      	pop	{r4, r5, r6, pc}
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d004      	beq.n	8007ea8 <_fflush_r+0x20>
 8007e9e:	6a03      	ldr	r3, [r0, #32]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d101      	bne.n	8007ea8 <_fflush_r+0x20>
 8007ea4:	f7ff f95c 	bl	8007160 <__sinit>
 8007ea8:	220c      	movs	r2, #12
 8007eaa:	5ea3      	ldrsh	r3, [r4, r2]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d0f1      	beq.n	8007e94 <_fflush_r+0xc>
 8007eb0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007eb2:	07d2      	lsls	r2, r2, #31
 8007eb4:	d404      	bmi.n	8007ec0 <_fflush_r+0x38>
 8007eb6:	059b      	lsls	r3, r3, #22
 8007eb8:	d402      	bmi.n	8007ec0 <_fflush_r+0x38>
 8007eba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ebc:	f7ff fb77 	bl	80075ae <__retarget_lock_acquire_recursive>
 8007ec0:	0028      	movs	r0, r5
 8007ec2:	0021      	movs	r1, r4
 8007ec4:	f7ff ff56 	bl	8007d74 <__sflush_r>
 8007ec8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007eca:	0005      	movs	r5, r0
 8007ecc:	07db      	lsls	r3, r3, #31
 8007ece:	d4e2      	bmi.n	8007e96 <_fflush_r+0xe>
 8007ed0:	89a3      	ldrh	r3, [r4, #12]
 8007ed2:	059b      	lsls	r3, r3, #22
 8007ed4:	d4df      	bmi.n	8007e96 <_fflush_r+0xe>
 8007ed6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ed8:	f7ff fb6a 	bl	80075b0 <__retarget_lock_release_recursive>
 8007edc:	e7db      	b.n	8007e96 <_fflush_r+0xe>
	...

08007ee0 <__swhatbuf_r>:
 8007ee0:	b570      	push	{r4, r5, r6, lr}
 8007ee2:	000e      	movs	r6, r1
 8007ee4:	001d      	movs	r5, r3
 8007ee6:	230e      	movs	r3, #14
 8007ee8:	5ec9      	ldrsh	r1, [r1, r3]
 8007eea:	0014      	movs	r4, r2
 8007eec:	b096      	sub	sp, #88	; 0x58
 8007eee:	2900      	cmp	r1, #0
 8007ef0:	da0c      	bge.n	8007f0c <__swhatbuf_r+0x2c>
 8007ef2:	89b2      	ldrh	r2, [r6, #12]
 8007ef4:	2380      	movs	r3, #128	; 0x80
 8007ef6:	0011      	movs	r1, r2
 8007ef8:	4019      	ands	r1, r3
 8007efa:	421a      	tst	r2, r3
 8007efc:	d013      	beq.n	8007f26 <__swhatbuf_r+0x46>
 8007efe:	2100      	movs	r1, #0
 8007f00:	3b40      	subs	r3, #64	; 0x40
 8007f02:	2000      	movs	r0, #0
 8007f04:	6029      	str	r1, [r5, #0]
 8007f06:	6023      	str	r3, [r4, #0]
 8007f08:	b016      	add	sp, #88	; 0x58
 8007f0a:	bd70      	pop	{r4, r5, r6, pc}
 8007f0c:	466a      	mov	r2, sp
 8007f0e:	f000 f861 	bl	8007fd4 <_fstat_r>
 8007f12:	2800      	cmp	r0, #0
 8007f14:	dbed      	blt.n	8007ef2 <__swhatbuf_r+0x12>
 8007f16:	23f0      	movs	r3, #240	; 0xf0
 8007f18:	9901      	ldr	r1, [sp, #4]
 8007f1a:	021b      	lsls	r3, r3, #8
 8007f1c:	4019      	ands	r1, r3
 8007f1e:	4b03      	ldr	r3, [pc, #12]	; (8007f2c <__swhatbuf_r+0x4c>)
 8007f20:	18c9      	adds	r1, r1, r3
 8007f22:	424b      	negs	r3, r1
 8007f24:	4159      	adcs	r1, r3
 8007f26:	2380      	movs	r3, #128	; 0x80
 8007f28:	00db      	lsls	r3, r3, #3
 8007f2a:	e7ea      	b.n	8007f02 <__swhatbuf_r+0x22>
 8007f2c:	ffffe000 	.word	0xffffe000

08007f30 <__smakebuf_r>:
 8007f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f32:	2602      	movs	r6, #2
 8007f34:	898b      	ldrh	r3, [r1, #12]
 8007f36:	0005      	movs	r5, r0
 8007f38:	000c      	movs	r4, r1
 8007f3a:	4233      	tst	r3, r6
 8007f3c:	d006      	beq.n	8007f4c <__smakebuf_r+0x1c>
 8007f3e:	0023      	movs	r3, r4
 8007f40:	3347      	adds	r3, #71	; 0x47
 8007f42:	6023      	str	r3, [r4, #0]
 8007f44:	6123      	str	r3, [r4, #16]
 8007f46:	2301      	movs	r3, #1
 8007f48:	6163      	str	r3, [r4, #20]
 8007f4a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007f4c:	466a      	mov	r2, sp
 8007f4e:	ab01      	add	r3, sp, #4
 8007f50:	f7ff ffc6 	bl	8007ee0 <__swhatbuf_r>
 8007f54:	9900      	ldr	r1, [sp, #0]
 8007f56:	0007      	movs	r7, r0
 8007f58:	0028      	movs	r0, r5
 8007f5a:	f7ff fb97 	bl	800768c <_malloc_r>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d108      	bne.n	8007f74 <__smakebuf_r+0x44>
 8007f62:	220c      	movs	r2, #12
 8007f64:	5ea3      	ldrsh	r3, [r4, r2]
 8007f66:	059a      	lsls	r2, r3, #22
 8007f68:	d4ef      	bmi.n	8007f4a <__smakebuf_r+0x1a>
 8007f6a:	2203      	movs	r2, #3
 8007f6c:	4393      	bics	r3, r2
 8007f6e:	431e      	orrs	r6, r3
 8007f70:	81a6      	strh	r6, [r4, #12]
 8007f72:	e7e4      	b.n	8007f3e <__smakebuf_r+0xe>
 8007f74:	2380      	movs	r3, #128	; 0x80
 8007f76:	89a2      	ldrh	r2, [r4, #12]
 8007f78:	6020      	str	r0, [r4, #0]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	81a3      	strh	r3, [r4, #12]
 8007f7e:	9b00      	ldr	r3, [sp, #0]
 8007f80:	6120      	str	r0, [r4, #16]
 8007f82:	6163      	str	r3, [r4, #20]
 8007f84:	9b01      	ldr	r3, [sp, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00c      	beq.n	8007fa4 <__smakebuf_r+0x74>
 8007f8a:	0028      	movs	r0, r5
 8007f8c:	230e      	movs	r3, #14
 8007f8e:	5ee1      	ldrsh	r1, [r4, r3]
 8007f90:	f000 f832 	bl	8007ff8 <_isatty_r>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d005      	beq.n	8007fa4 <__smakebuf_r+0x74>
 8007f98:	2303      	movs	r3, #3
 8007f9a:	89a2      	ldrh	r2, [r4, #12]
 8007f9c:	439a      	bics	r2, r3
 8007f9e:	3b02      	subs	r3, #2
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	81a3      	strh	r3, [r4, #12]
 8007fa4:	89a3      	ldrh	r3, [r4, #12]
 8007fa6:	433b      	orrs	r3, r7
 8007fa8:	81a3      	strh	r3, [r4, #12]
 8007faa:	e7ce      	b.n	8007f4a <__smakebuf_r+0x1a>

08007fac <memmove>:
 8007fac:	b510      	push	{r4, lr}
 8007fae:	4288      	cmp	r0, r1
 8007fb0:	d902      	bls.n	8007fb8 <memmove+0xc>
 8007fb2:	188b      	adds	r3, r1, r2
 8007fb4:	4298      	cmp	r0, r3
 8007fb6:	d303      	bcc.n	8007fc0 <memmove+0x14>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	e007      	b.n	8007fcc <memmove+0x20>
 8007fbc:	5c8b      	ldrb	r3, [r1, r2]
 8007fbe:	5483      	strb	r3, [r0, r2]
 8007fc0:	3a01      	subs	r2, #1
 8007fc2:	d2fb      	bcs.n	8007fbc <memmove+0x10>
 8007fc4:	bd10      	pop	{r4, pc}
 8007fc6:	5ccc      	ldrb	r4, [r1, r3]
 8007fc8:	54c4      	strb	r4, [r0, r3]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d1fa      	bne.n	8007fc6 <memmove+0x1a>
 8007fd0:	e7f8      	b.n	8007fc4 <memmove+0x18>
	...

08007fd4 <_fstat_r>:
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	b570      	push	{r4, r5, r6, lr}
 8007fd8:	4d06      	ldr	r5, [pc, #24]	; (8007ff4 <_fstat_r+0x20>)
 8007fda:	0004      	movs	r4, r0
 8007fdc:	0008      	movs	r0, r1
 8007fde:	0011      	movs	r1, r2
 8007fe0:	602b      	str	r3, [r5, #0]
 8007fe2:	f7fb fa42 	bl	800346a <_fstat>
 8007fe6:	1c43      	adds	r3, r0, #1
 8007fe8:	d103      	bne.n	8007ff2 <_fstat_r+0x1e>
 8007fea:	682b      	ldr	r3, [r5, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d000      	beq.n	8007ff2 <_fstat_r+0x1e>
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}
 8007ff4:	2000030c 	.word	0x2000030c

08007ff8 <_isatty_r>:
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	b570      	push	{r4, r5, r6, lr}
 8007ffc:	4d06      	ldr	r5, [pc, #24]	; (8008018 <_isatty_r+0x20>)
 8007ffe:	0004      	movs	r4, r0
 8008000:	0008      	movs	r0, r1
 8008002:	602b      	str	r3, [r5, #0]
 8008004:	f7fb fa3f 	bl	8003486 <_isatty>
 8008008:	1c43      	adds	r3, r0, #1
 800800a:	d103      	bne.n	8008014 <_isatty_r+0x1c>
 800800c:	682b      	ldr	r3, [r5, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d000      	beq.n	8008014 <_isatty_r+0x1c>
 8008012:	6023      	str	r3, [r4, #0]
 8008014:	bd70      	pop	{r4, r5, r6, pc}
 8008016:	46c0      	nop			; (mov r8, r8)
 8008018:	2000030c 	.word	0x2000030c

0800801c <_sbrk_r>:
 800801c:	2300      	movs	r3, #0
 800801e:	b570      	push	{r4, r5, r6, lr}
 8008020:	4d06      	ldr	r5, [pc, #24]	; (800803c <_sbrk_r+0x20>)
 8008022:	0004      	movs	r4, r0
 8008024:	0008      	movs	r0, r1
 8008026:	602b      	str	r3, [r5, #0]
 8008028:	f7fb fa42 	bl	80034b0 <_sbrk>
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	d103      	bne.n	8008038 <_sbrk_r+0x1c>
 8008030:	682b      	ldr	r3, [r5, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d000      	beq.n	8008038 <_sbrk_r+0x1c>
 8008036:	6023      	str	r3, [r4, #0]
 8008038:	bd70      	pop	{r4, r5, r6, pc}
 800803a:	46c0      	nop			; (mov r8, r8)
 800803c:	2000030c 	.word	0x2000030c

08008040 <memchr>:
 8008040:	b2c9      	uxtb	r1, r1
 8008042:	1882      	adds	r2, r0, r2
 8008044:	4290      	cmp	r0, r2
 8008046:	d101      	bne.n	800804c <memchr+0xc>
 8008048:	2000      	movs	r0, #0
 800804a:	4770      	bx	lr
 800804c:	7803      	ldrb	r3, [r0, #0]
 800804e:	428b      	cmp	r3, r1
 8008050:	d0fb      	beq.n	800804a <memchr+0xa>
 8008052:	3001      	adds	r0, #1
 8008054:	e7f6      	b.n	8008044 <memchr+0x4>

08008056 <memcpy>:
 8008056:	2300      	movs	r3, #0
 8008058:	b510      	push	{r4, lr}
 800805a:	429a      	cmp	r2, r3
 800805c:	d100      	bne.n	8008060 <memcpy+0xa>
 800805e:	bd10      	pop	{r4, pc}
 8008060:	5ccc      	ldrb	r4, [r1, r3]
 8008062:	54c4      	strb	r4, [r0, r3]
 8008064:	3301      	adds	r3, #1
 8008066:	e7f8      	b.n	800805a <memcpy+0x4>

08008068 <_realloc_r>:
 8008068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800806a:	0007      	movs	r7, r0
 800806c:	000e      	movs	r6, r1
 800806e:	0014      	movs	r4, r2
 8008070:	2900      	cmp	r1, #0
 8008072:	d105      	bne.n	8008080 <_realloc_r+0x18>
 8008074:	0011      	movs	r1, r2
 8008076:	f7ff fb09 	bl	800768c <_malloc_r>
 800807a:	0005      	movs	r5, r0
 800807c:	0028      	movs	r0, r5
 800807e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008080:	2a00      	cmp	r2, #0
 8008082:	d103      	bne.n	800808c <_realloc_r+0x24>
 8008084:	f7ff fa96 	bl	80075b4 <_free_r>
 8008088:	0025      	movs	r5, r4
 800808a:	e7f7      	b.n	800807c <_realloc_r+0x14>
 800808c:	f000 f81b 	bl	80080c6 <_malloc_usable_size_r>
 8008090:	9001      	str	r0, [sp, #4]
 8008092:	4284      	cmp	r4, r0
 8008094:	d803      	bhi.n	800809e <_realloc_r+0x36>
 8008096:	0035      	movs	r5, r6
 8008098:	0843      	lsrs	r3, r0, #1
 800809a:	42a3      	cmp	r3, r4
 800809c:	d3ee      	bcc.n	800807c <_realloc_r+0x14>
 800809e:	0021      	movs	r1, r4
 80080a0:	0038      	movs	r0, r7
 80080a2:	f7ff faf3 	bl	800768c <_malloc_r>
 80080a6:	1e05      	subs	r5, r0, #0
 80080a8:	d0e8      	beq.n	800807c <_realloc_r+0x14>
 80080aa:	9b01      	ldr	r3, [sp, #4]
 80080ac:	0022      	movs	r2, r4
 80080ae:	429c      	cmp	r4, r3
 80080b0:	d900      	bls.n	80080b4 <_realloc_r+0x4c>
 80080b2:	001a      	movs	r2, r3
 80080b4:	0031      	movs	r1, r6
 80080b6:	0028      	movs	r0, r5
 80080b8:	f7ff ffcd 	bl	8008056 <memcpy>
 80080bc:	0031      	movs	r1, r6
 80080be:	0038      	movs	r0, r7
 80080c0:	f7ff fa78 	bl	80075b4 <_free_r>
 80080c4:	e7da      	b.n	800807c <_realloc_r+0x14>

080080c6 <_malloc_usable_size_r>:
 80080c6:	1f0b      	subs	r3, r1, #4
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	1f18      	subs	r0, r3, #4
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	da01      	bge.n	80080d4 <_malloc_usable_size_r+0xe>
 80080d0:	580b      	ldr	r3, [r1, r0]
 80080d2:	18c0      	adds	r0, r0, r3
 80080d4:	4770      	bx	lr
	...

080080d8 <_init>:
 80080d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080de:	bc08      	pop	{r3}
 80080e0:	469e      	mov	lr, r3
 80080e2:	4770      	bx	lr

080080e4 <_fini>:
 80080e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e6:	46c0      	nop			; (mov r8, r8)
 80080e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ea:	bc08      	pop	{r3}
 80080ec:	469e      	mov	lr, r3
 80080ee:	4770      	bx	lr
