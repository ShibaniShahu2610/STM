
12_I2C_SCANNER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e94  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002f54  08002f54  00012f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fc0  08002fc0  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08002fc0  08002fc0  00012fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fc8  08002fc8  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fc8  08002fc8  00012fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fcc  08002fcc  00012fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08002fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000034  08003004  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003004  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ae40  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018ac  00000000  00000000  0002aedf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a0  00000000  00000000  0002c790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000078a  00000000  00000000  0002d130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001392b  00000000  00000000  0002d8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cfd4  00000000  00000000  000411e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078366  00000000  00000000  0004e1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002260  00000000  00000000  000c6520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000c8780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000034 	.word	0x20000034
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f3c 	.word	0x08002f3c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000038 	.word	0x20000038
 8000104:	08002f3c 	.word	0x08002f3c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fa76 	bl	800099c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f80a 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f8ee 	bl	8000694 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004b8:	f000 f87c 	bl	80005b4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80004bc:	f000 f8ba 	bl	8000634 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  i2c_scan();
 80004c0:	f000 f92c 	bl	800071c <i2c_scan>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <main+0x1c>
	...

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b09d      	sub	sp, #116	; 0x74
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	2438      	movs	r4, #56	; 0x38
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	0018      	movs	r0, r3
 80004d4:	2338      	movs	r3, #56	; 0x38
 80004d6:	001a      	movs	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	f002 fd03 	bl	8002ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004de:	2324      	movs	r3, #36	; 0x24
 80004e0:	18fb      	adds	r3, r7, r3
 80004e2:	0018      	movs	r0, r3
 80004e4:	2314      	movs	r3, #20
 80004e6:	001a      	movs	r2, r3
 80004e8:	2100      	movs	r1, #0
 80004ea:	f002 fcfb 	bl	8002ee4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ee:	003b      	movs	r3, r7
 80004f0:	0018      	movs	r0, r3
 80004f2:	2324      	movs	r3, #36	; 0x24
 80004f4:	001a      	movs	r2, r3
 80004f6:	2100      	movs	r1, #0
 80004f8:	f002 fcf4 	bl	8002ee4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004fc:	4b2b      	ldr	r3, [pc, #172]	; (80005ac <SystemClock_Config+0xe4>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a2b      	ldr	r2, [pc, #172]	; (80005b0 <SystemClock_Config+0xe8>)
 8000502:	401a      	ands	r2, r3
 8000504:	4b29      	ldr	r3, [pc, #164]	; (80005ac <SystemClock_Config+0xe4>)
 8000506:	2180      	movs	r1, #128	; 0x80
 8000508:	0109      	lsls	r1, r1, #4
 800050a:	430a      	orrs	r2, r1
 800050c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800050e:	0021      	movs	r1, r4
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2202      	movs	r2, #2
 8000514:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2201      	movs	r2, #1
 800051a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2210      	movs	r2, #16
 8000520:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2202      	movs	r2, #2
 8000526:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2200      	movs	r2, #0
 800052c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2280      	movs	r2, #128	; 0x80
 8000532:	02d2      	lsls	r2, r2, #11
 8000534:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	03d2      	lsls	r2, r2, #15
 800053c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	187b      	adds	r3, r7, r1
 8000540:	0018      	movs	r0, r3
 8000542:	f000 ffb7 	bl	80014b4 <HAL_RCC_OscConfig>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800054a:	f000 f93f 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054e:	2124      	movs	r1, #36	; 0x24
 8000550:	187b      	adds	r3, r7, r1
 8000552:	220f      	movs	r2, #15
 8000554:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2203      	movs	r2, #3
 800055a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2200      	movs	r2, #0
 800056c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2101      	movs	r1, #1
 8000572:	0018      	movs	r0, r3
 8000574:	f001 fb62 	bl	8001c3c <HAL_RCC_ClockConfig>
 8000578:	1e03      	subs	r3, r0, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800057c:	f000 f926 	bl	80007cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000580:	003b      	movs	r3, r7
 8000582:	2209      	movs	r2, #9
 8000584:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000586:	003b      	movs	r3, r7
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800058c:	003b      	movs	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000592:	003b      	movs	r3, r7
 8000594:	0018      	movs	r0, r3
 8000596:	f001 fd75 	bl	8002084 <HAL_RCCEx_PeriphCLKConfig>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800059e:	f000 f915 	bl	80007cc <Error_Handler>
  }
}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b01d      	add	sp, #116	; 0x74
 80005a8:	bd90      	pop	{r4, r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	40007000 	.word	0x40007000
 80005b0:	ffffe7ff 	.word	0xffffe7ff

080005b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_I2C1_Init+0x74>)
 80005ba:	4a1c      	ldr	r2, [pc, #112]	; (800062c <MX_I2C1_Init+0x78>)
 80005bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <MX_I2C1_Init+0x74>)
 80005c0:	4a1b      	ldr	r2, [pc, #108]	; (8000630 <MX_I2C1_Init+0x7c>)
 80005c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <MX_I2C1_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <MX_I2C1_Init+0x74>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <MX_I2C1_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_I2C1_Init+0x74>)
 80005d8:	2200      	movs	r2, #0
 80005da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_I2C1_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_I2C1_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_I2C1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_I2C1_Init+0x74>)
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fcc9 	bl	8000f88 <HAL_I2C_Init>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005fa:	f000 f8e7 	bl	80007cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <MX_I2C1_Init+0x74>)
 8000600:	2100      	movs	r1, #0
 8000602:	0018      	movs	r0, r3
 8000604:	f000 febe 	bl	8001384 <HAL_I2CEx_ConfigAnalogFilter>
 8000608:	1e03      	subs	r3, r0, #0
 800060a:	d001      	beq.n	8000610 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800060c:	f000 f8de 	bl	80007cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <MX_I2C1_Init+0x74>)
 8000612:	2100      	movs	r1, #0
 8000614:	0018      	movs	r0, r3
 8000616:	f000 ff01 	bl	800141c <HAL_I2CEx_ConfigDigitalFilter>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800061e:	f000 f8d5 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000050 	.word	0x20000050
 800062c:	40005400 	.word	0x40005400
 8000630:	00707cbb 	.word	0x00707cbb

08000634 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_USART1_UART_Init+0x58>)
 800063a:	4a15      	ldr	r2, [pc, #84]	; (8000690 <MX_USART1_UART_Init+0x5c>)
 800063c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_USART1_UART_Init+0x58>)
 8000640:	22e1      	movs	r2, #225	; 0xe1
 8000642:	0252      	lsls	r2, r2, #9
 8000644:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_USART1_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_USART1_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_USART1_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_USART1_UART_Init+0x58>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_USART1_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_USART1_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_USART1_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_USART1_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <MX_USART1_UART_Init+0x58>)
 8000678:	0018      	movs	r0, r3
 800067a:	f001 fe91 	bl	80023a0 <HAL_UART_Init>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000682:	f000 f8a3 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000a4 	.word	0x200000a4
 8000690:	40013800 	.word	0x40013800

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b089      	sub	sp, #36	; 0x24
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	240c      	movs	r4, #12
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	2314      	movs	r3, #20
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f002 fc1d 	bl	8002ee4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_GPIO_Init+0x84>)
 80006ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <MX_GPIO_Init+0x84>)
 80006b0:	2101      	movs	r1, #1
 80006b2:	430a      	orrs	r2, r1
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006b6:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_GPIO_Init+0x84>)
 80006b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ba:	2201      	movs	r2, #1
 80006bc:	4013      	ands	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_GPIO_Init+0x84>)
 80006c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_GPIO_Init+0x84>)
 80006c8:	2102      	movs	r1, #2
 80006ca:	430a      	orrs	r2, r1
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_GPIO_Init+0x84>)
 80006d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d2:	2202      	movs	r2, #2
 80006d4:	4013      	ands	r3, r2
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 80006da:	23a0      	movs	r3, #160	; 0xa0
 80006dc:	05db      	lsls	r3, r3, #23
 80006de:	2200      	movs	r2, #0
 80006e0:	2120      	movs	r1, #32
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 fc18 	bl	8000f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 80006e8:	0021      	movs	r1, r4
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2220      	movs	r2, #32
 80006ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2201      	movs	r2, #1
 80006f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 8000702:	187a      	adds	r2, r7, r1
 8000704:	23a0      	movs	r3, #160	; 0xa0
 8000706:	05db      	lsls	r3, r3, #23
 8000708:	0011      	movs	r1, r2
 800070a:	0018      	movs	r0, r3
 800070c:	f000 fa8e 	bl	8000c2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	b009      	add	sp, #36	; 0x24
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	40021000 	.word	0x40021000

0800071c <i2c_scan>:

/* USER CODE BEGIN 4 */

void i2c_scan(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, StartMSG, sizeof(StartMSG), 10000);
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <i2c_scan+0x94>)
 8000722:	4924      	ldr	r1, [pc, #144]	; (80007b4 <i2c_scan+0x98>)
 8000724:	4824      	ldr	r0, [pc, #144]	; (80007b8 <i2c_scan+0x9c>)
 8000726:	221a      	movs	r2, #26
 8000728:	f001 fe8e 	bl	8002448 <HAL_UART_Transmit>

	for(i=1; i<128; i++)
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <i2c_scan+0xa0>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
 8000732:	e02e      	b.n	8000792 <i2c_scan+0x76>
	    {
	        ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 8000734:	4b21      	ldr	r3, [pc, #132]	; (80007bc <i2c_scan+0xa0>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b29b      	uxth	r3, r3
 800073a:	18db      	adds	r3, r3, r3
 800073c:	b299      	uxth	r1, r3
 800073e:	4820      	ldr	r0, [pc, #128]	; (80007c0 <i2c_scan+0xa4>)
 8000740:	2305      	movs	r3, #5
 8000742:	2203      	movs	r2, #3
 8000744:	f000 fcb6 	bl	80010b4 <HAL_I2C_IsDeviceReady>
 8000748:	0003      	movs	r3, r0
 800074a:	001a      	movs	r2, r3
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <i2c_scan+0xa8>)
 800074e:	601a      	str	r2, [r3, #0]
	        if (ret != HAL_OK) /* No ACK Received At That Address */
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <i2c_scan+0xa8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d007      	beq.n	8000768 <i2c_scan+0x4c>
	        {
	            //HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
	        	HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_SET);
 8000758:	23a0      	movs	r3, #160	; 0xa0
 800075a:	05db      	lsls	r3, r3, #23
 800075c:	2201      	movs	r2, #1
 800075e:	2120      	movs	r1, #32
 8000760:	0018      	movs	r0, r3
 8000762:	f000 fbd9 	bl	8000f18 <HAL_GPIO_WritePin>
 8000766:	e00e      	b.n	8000786 <i2c_scan+0x6a>
	        }
	        else if(ret == HAL_OK)
 8000768:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <i2c_scan+0xa8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d10a      	bne.n	8000786 <i2c_scan+0x6a>
	        {
//	            sprintf(Buffer, "0x%X", i);
//	            HAL_UART_Transmit(&huart1, (uint8_t *)Buffer, sizeof(Buffer), 10000);
	        	HAL_GPIO_TogglePin(BSP_LED_GPIO_Port, BSP_LED_Pin);
 8000770:	23a0      	movs	r3, #160	; 0xa0
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	2120      	movs	r1, #32
 8000776:	0018      	movs	r0, r3
 8000778:	f000 fbeb 	bl	8000f52 <HAL_GPIO_TogglePin>
	        	HAL_Delay(500);
 800077c:	23fa      	movs	r3, #250	; 0xfa
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	0018      	movs	r0, r3
 8000782:	f000 f97b 	bl	8000a7c <HAL_Delay>
	for(i=1; i<128; i++)
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <i2c_scan+0xa0>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <i2c_scan+0xa0>)
 8000790:	701a      	strb	r2, [r3, #0]
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <i2c_scan+0xa0>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b25b      	sxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	dacb      	bge.n	8000734 <i2c_scan+0x18>
	        }
	    }
	    HAL_UART_Transmit(&huart1, EndMSG, sizeof(EndMSG), 10000);
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <i2c_scan+0x94>)
 800079e:	490a      	ldr	r1, [pc, #40]	; (80007c8 <i2c_scan+0xac>)
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <i2c_scan+0x9c>)
 80007a2:	220b      	movs	r2, #11
 80007a4:	f001 fe50 	bl	8002448 <HAL_UART_Transmit>
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	00002710 	.word	0x00002710
 80007b4:	20000000 	.word	0x20000000
 80007b8:	200000a4 	.word	0x200000a4
 80007bc:	2000012c 	.word	0x2000012c
 80007c0:	20000050 	.word	0x20000050
 80007c4:	20000130 	.word	0x20000130
 80007c8:	2000001c 	.word	0x2000001c

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <HAL_MspInit+0x24>)
 80007de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_MspInit+0x24>)
 80007e2:	2101      	movs	r1, #1
 80007e4:	430a      	orrs	r2, r1
 80007e6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <HAL_MspInit+0x24>)
 80007ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <HAL_MspInit+0x24>)
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	0549      	lsls	r1, r1, #21
 80007f2:	430a      	orrs	r2, r1
 80007f4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	240c      	movs	r4, #12
 800080a:	193b      	adds	r3, r7, r4
 800080c:	0018      	movs	r0, r3
 800080e:	2314      	movs	r3, #20
 8000810:	001a      	movs	r2, r3
 8000812:	2100      	movs	r1, #0
 8000814:	f002 fb66 	bl	8002ee4 <memset>
  if(hi2c->Instance==I2C1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a17      	ldr	r2, [pc, #92]	; (800087c <HAL_I2C_MspInit+0x7c>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d128      	bne.n	8000874 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <HAL_I2C_MspInit+0x80>)
 8000824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <HAL_I2C_MspInit+0x80>)
 8000828:	2102      	movs	r1, #2
 800082a:	430a      	orrs	r2, r1
 800082c:	62da      	str	r2, [r3, #44]	; 0x2c
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <HAL_I2C_MspInit+0x80>)
 8000830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000832:	2202      	movs	r2, #2
 8000834:	4013      	ands	r3, r2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BSP_I2C1_SCL_Pin|BSP_I2C1_SDA_Pin;
 800083a:	0021      	movs	r1, r4
 800083c:	187b      	adds	r3, r7, r1
 800083e:	22c0      	movs	r2, #192	; 0xc0
 8000840:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2212      	movs	r2, #18
 8000846:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2203      	movs	r2, #3
 8000852:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2201      	movs	r2, #1
 8000858:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085a:	187b      	adds	r3, r7, r1
 800085c:	4a09      	ldr	r2, [pc, #36]	; (8000884 <HAL_I2C_MspInit+0x84>)
 800085e:	0019      	movs	r1, r3
 8000860:	0010      	movs	r0, r2
 8000862:	f000 f9e3 	bl	8000c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_I2C_MspInit+0x80>)
 8000868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_I2C_MspInit+0x80>)
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	0389      	lsls	r1, r1, #14
 8000870:	430a      	orrs	r2, r1
 8000872:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b009      	add	sp, #36	; 0x24
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	40005400 	.word	0x40005400
 8000880:	40021000 	.word	0x40021000
 8000884:	50000400 	.word	0x50000400

08000888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b089      	sub	sp, #36	; 0x24
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	240c      	movs	r4, #12
 8000892:	193b      	adds	r3, r7, r4
 8000894:	0018      	movs	r0, r3
 8000896:	2314      	movs	r3, #20
 8000898:	001a      	movs	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	f002 fb22 	bl	8002ee4 <memset>
  if(huart->Instance==USART1)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a18      	ldr	r2, [pc, #96]	; (8000908 <HAL_UART_MspInit+0x80>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d12a      	bne.n	8000900 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <HAL_UART_MspInit+0x84>)
 80008ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <HAL_UART_MspInit+0x84>)
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	01c9      	lsls	r1, r1, #7
 80008b4:	430a      	orrs	r2, r1
 80008b6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <HAL_UART_MspInit+0x84>)
 80008ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <HAL_UART_MspInit+0x84>)
 80008be:	2101      	movs	r1, #1
 80008c0:	430a      	orrs	r2, r1
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <HAL_UART_MspInit+0x84>)
 80008c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c8:	2201      	movs	r2, #1
 80008ca:	4013      	ands	r3, r2
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_USART1_TX_Pin|BSP_USART1_RX_Pin;
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	22c0      	movs	r2, #192	; 0xc0
 80008d4:	00d2      	lsls	r2, r2, #3
 80008d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	0021      	movs	r1, r4
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2202      	movs	r2, #2
 80008de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2203      	movs	r2, #3
 80008ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2204      	movs	r2, #4
 80008f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	187a      	adds	r2, r7, r1
 80008f4:	23a0      	movs	r3, #160	; 0xa0
 80008f6:	05db      	lsls	r3, r3, #23
 80008f8:	0011      	movs	r1, r2
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 f996 	bl	8000c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b009      	add	sp, #36	; 0x24
 8000906:	bd90      	pop	{r4, r7, pc}
 8000908:	40013800 	.word	0x40013800
 800090c:	40021000 	.word	0x40021000

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000914:	e7fe      	b.n	8000914 <NMI_Handler+0x4>

08000916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <HardFault_Handler+0x4>

0800091c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000934:	f000 f886 	bl	8000a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000948:	480d      	ldr	r0, [pc, #52]	; (8000980 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800094a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800094c:	f7ff fff7 	bl	800093e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <LoopForever+0x6>)
  ldr r1, =_edata
 8000952:	490d      	ldr	r1, [pc, #52]	; (8000988 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000954:	4a0d      	ldr	r2, [pc, #52]	; (800098c <LoopForever+0xe>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000968:	4c0a      	ldr	r4, [pc, #40]	; (8000994 <LoopForever+0x16>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000976:	f002 fabd 	bl	8002ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097a:	f7ff fd95 	bl	80004a8 <main>

0800097e <LoopForever>:

LoopForever:
    b LoopForever
 800097e:	e7fe      	b.n	800097e <LoopForever>
  ldr   r0, =_estack
 8000980:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000988:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 800098c:	08002fd0 	.word	0x08002fd0
  ldr r2, =_sbss
 8000990:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000994:	20000138 	.word	0x20000138

08000998 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC1_COMP_IRQHandler>
	...

0800099c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <HAL_Init+0x3c>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <HAL_Init+0x3c>)
 80009ae:	2140      	movs	r1, #64	; 0x40
 80009b0:	430a      	orrs	r2, r1
 80009b2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009b4:	2000      	movs	r0, #0
 80009b6:	f000 f811 	bl	80009dc <HAL_InitTick>
 80009ba:	1e03      	subs	r3, r0, #0
 80009bc:	d003      	beq.n	80009c6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
 80009c4:	e001      	b.n	80009ca <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009c6:	f7ff ff07 	bl	80007d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781b      	ldrb	r3, [r3, #0]
}
 80009ce:	0018      	movs	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b002      	add	sp, #8
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	40022000 	.word	0x40022000

080009dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <HAL_InitTick+0x5c>)
 80009e6:	681c      	ldr	r4, [r3, #0]
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_InitTick+0x60>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	0019      	movs	r1, r3
 80009ee:	23fa      	movs	r3, #250	; 0xfa
 80009f0:	0098      	lsls	r0, r3, #2
 80009f2:	f7ff fb89 	bl	8000108 <__udivsi3>
 80009f6:	0003      	movs	r3, r0
 80009f8:	0019      	movs	r1, r3
 80009fa:	0020      	movs	r0, r4
 80009fc:	f7ff fb84 	bl	8000108 <__udivsi3>
 8000a00:	0003      	movs	r3, r0
 8000a02:	0018      	movs	r0, r3
 8000a04:	f000 f905 	bl	8000c12 <HAL_SYSTICK_Config>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	e00f      	b.n	8000a30 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	d80b      	bhi.n	8000a2e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	425b      	negs	r3, r3
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 f8e2 	bl	8000be8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_InitTick+0x64>)
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	0018      	movs	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b003      	add	sp, #12
 8000a36:	bd90      	pop	{r4, r7, pc}
 8000a38:	20000028 	.word	0x20000028
 8000a3c:	20000030 	.word	0x20000030
 8000a40:	2000002c 	.word	0x2000002c

08000a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_IncTick+0x1c>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_IncTick+0x20>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	18d2      	adds	r2, r2, r3
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <HAL_IncTick+0x20>)
 8000a56:	601a      	str	r2, [r3, #0]
}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	20000030 	.word	0x20000030
 8000a64:	20000134 	.word	0x20000134

08000a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a6c:	4b02      	ldr	r3, [pc, #8]	; (8000a78 <HAL_GetTick+0x10>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	0018      	movs	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	20000134 	.word	0x20000134

08000a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a84:	f7ff fff0 	bl	8000a68 <HAL_GetTick>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3301      	adds	r3, #1
 8000a94:	d005      	beq.n	8000aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <HAL_Delay+0x44>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	189b      	adds	r3, r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	f7ff ffe0 	bl	8000a68 <HAL_GetTick>
 8000aa8:	0002      	movs	r2, r0
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d8f7      	bhi.n	8000aa4 <HAL_Delay+0x28>
  {
  }
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b004      	add	sp, #16
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	20000030 	.word	0x20000030

08000ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	0002      	movs	r2, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ad8:	d828      	bhi.n	8000b2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ada:	4a2f      	ldr	r2, [pc, #188]	; (8000b98 <__NVIC_SetPriority+0xd4>)
 8000adc:	1dfb      	adds	r3, r7, #7
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b25b      	sxtb	r3, r3
 8000ae2:	089b      	lsrs	r3, r3, #2
 8000ae4:	33c0      	adds	r3, #192	; 0xc0
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	589b      	ldr	r3, [r3, r2]
 8000aea:	1dfa      	adds	r2, r7, #7
 8000aec:	7812      	ldrb	r2, [r2, #0]
 8000aee:	0011      	movs	r1, r2
 8000af0:	2203      	movs	r2, #3
 8000af2:	400a      	ands	r2, r1
 8000af4:	00d2      	lsls	r2, r2, #3
 8000af6:	21ff      	movs	r1, #255	; 0xff
 8000af8:	4091      	lsls	r1, r2
 8000afa:	000a      	movs	r2, r1
 8000afc:	43d2      	mvns	r2, r2
 8000afe:	401a      	ands	r2, r3
 8000b00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	019b      	lsls	r3, r3, #6
 8000b06:	22ff      	movs	r2, #255	; 0xff
 8000b08:	401a      	ands	r2, r3
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	0018      	movs	r0, r3
 8000b10:	2303      	movs	r3, #3
 8000b12:	4003      	ands	r3, r0
 8000b14:	00db      	lsls	r3, r3, #3
 8000b16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b18:	481f      	ldr	r0, [pc, #124]	; (8000b98 <__NVIC_SetPriority+0xd4>)
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	089b      	lsrs	r3, r3, #2
 8000b22:	430a      	orrs	r2, r1
 8000b24:	33c0      	adds	r3, #192	; 0xc0
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b2a:	e031      	b.n	8000b90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <__NVIC_SetPriority+0xd8>)
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	0019      	movs	r1, r3
 8000b34:	230f      	movs	r3, #15
 8000b36:	400b      	ands	r3, r1
 8000b38:	3b08      	subs	r3, #8
 8000b3a:	089b      	lsrs	r3, r3, #2
 8000b3c:	3306      	adds	r3, #6
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	18d3      	adds	r3, r2, r3
 8000b42:	3304      	adds	r3, #4
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	1dfa      	adds	r2, r7, #7
 8000b48:	7812      	ldrb	r2, [r2, #0]
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	400a      	ands	r2, r1
 8000b50:	00d2      	lsls	r2, r2, #3
 8000b52:	21ff      	movs	r1, #255	; 0xff
 8000b54:	4091      	lsls	r1, r2
 8000b56:	000a      	movs	r2, r1
 8000b58:	43d2      	mvns	r2, r2
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	22ff      	movs	r2, #255	; 0xff
 8000b64:	401a      	ands	r2, r3
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	4003      	ands	r3, r0
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b74:	4809      	ldr	r0, [pc, #36]	; (8000b9c <__NVIC_SetPriority+0xd8>)
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	001c      	movs	r4, r3
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	4023      	ands	r3, r4
 8000b80:	3b08      	subs	r3, #8
 8000b82:	089b      	lsrs	r3, r3, #2
 8000b84:	430a      	orrs	r2, r1
 8000b86:	3306      	adds	r3, #6
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	18c3      	adds	r3, r0, r3
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	601a      	str	r2, [r3, #0]
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b003      	add	sp, #12
 8000b96:	bd90      	pop	{r4, r7, pc}
 8000b98:	e000e100 	.word	0xe000e100
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	1e5a      	subs	r2, r3, #1
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	045b      	lsls	r3, r3, #17
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d301      	bcc.n	8000bb8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e010      	b.n	8000bda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <SysTick_Config+0x44>)
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	3a01      	subs	r2, #1
 8000bbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	425b      	negs	r3, r3
 8000bc4:	2103      	movs	r1, #3
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff ff7c 	bl	8000ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <SysTick_Config+0x44>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <SysTick_Config+0x44>)
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	0018      	movs	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b002      	add	sp, #8
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	1c02      	adds	r2, r0, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b25b      	sxtb	r3, r3
 8000c02:	0011      	movs	r1, r2
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff ff5d 	bl	8000ac4 <__NVIC_SetPriority>
}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b004      	add	sp, #16
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f7ff ffbf 	bl	8000ba0 <SysTick_Config>
 8000c22:	0003      	movs	r3, r0
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b002      	add	sp, #8
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c42:	e14f      	b.n	8000ee4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2101      	movs	r1, #1
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	000a      	movs	r2, r1
 8000c50:	4013      	ands	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d100      	bne.n	8000c5c <HAL_GPIO_Init+0x30>
 8000c5a:	e140      	b.n	8000ede <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2203      	movs	r2, #3
 8000c62:	4013      	ands	r3, r2
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d005      	beq.n	8000c74 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d130      	bne.n	8000cd6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	409a      	lsls	r2, r3
 8000c82:	0013      	movs	r3, r2
 8000c84:	43da      	mvns	r2, r3
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68da      	ldr	r2, [r3, #12]
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	409a      	lsls	r2, r3
 8000c96:	0013      	movs	r3, r2
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000caa:	2201      	movs	r2, #1
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
 8000cb0:	0013      	movs	r3, r2
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	091b      	lsrs	r3, r3, #4
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	409a      	lsls	r2, r3
 8000cc8:	0013      	movs	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2203      	movs	r2, #3
 8000cdc:	4013      	ands	r3, r2
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	d017      	beq.n	8000d12 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	2203      	movs	r2, #3
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	0013      	movs	r3, r2
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	409a      	lsls	r2, r3
 8000d04:	0013      	movs	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2203      	movs	r2, #3
 8000d18:	4013      	ands	r3, r2
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d123      	bne.n	8000d66 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	08da      	lsrs	r2, r3, #3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3208      	adds	r2, #8
 8000d26:	0092      	lsls	r2, r2, #2
 8000d28:	58d3      	ldr	r3, [r2, r3]
 8000d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	2207      	movs	r2, #7
 8000d30:	4013      	ands	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	220f      	movs	r2, #15
 8000d36:	409a      	lsls	r2, r3
 8000d38:	0013      	movs	r3, r2
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	691a      	ldr	r2, [r3, #16]
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	2107      	movs	r1, #7
 8000d4a:	400b      	ands	r3, r1
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	08da      	lsrs	r2, r3, #3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3208      	adds	r2, #8
 8000d60:	0092      	lsls	r2, r2, #2
 8000d62:	6939      	ldr	r1, [r7, #16]
 8000d64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	2203      	movs	r2, #3
 8000d72:	409a      	lsls	r2, r3
 8000d74:	0013      	movs	r3, r2
 8000d76:	43da      	mvns	r2, r3
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2203      	movs	r2, #3
 8000d84:	401a      	ands	r2, r3
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	23c0      	movs	r3, #192	; 0xc0
 8000da0:	029b      	lsls	r3, r3, #10
 8000da2:	4013      	ands	r3, r2
 8000da4:	d100      	bne.n	8000da8 <HAL_GPIO_Init+0x17c>
 8000da6:	e09a      	b.n	8000ede <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da8:	4b54      	ldr	r3, [pc, #336]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dac:	4b53      	ldr	r3, [pc, #332]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000dae:	2101      	movs	r1, #1
 8000db0:	430a      	orrs	r2, r1
 8000db2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000db4:	4a52      	ldr	r2, [pc, #328]	; (8000f00 <HAL_GPIO_Init+0x2d4>)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	089b      	lsrs	r3, r3, #2
 8000dba:	3302      	adds	r3, #2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	589b      	ldr	r3, [r3, r2]
 8000dc0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	220f      	movs	r2, #15
 8000dcc:	409a      	lsls	r2, r3
 8000dce:	0013      	movs	r3, r2
 8000dd0:	43da      	mvns	r2, r3
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	23a0      	movs	r3, #160	; 0xa0
 8000ddc:	05db      	lsls	r3, r3, #23
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d019      	beq.n	8000e16 <HAL_GPIO_Init+0x1ea>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a47      	ldr	r2, [pc, #284]	; (8000f04 <HAL_GPIO_Init+0x2d8>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d013      	beq.n	8000e12 <HAL_GPIO_Init+0x1e6>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a46      	ldr	r2, [pc, #280]	; (8000f08 <HAL_GPIO_Init+0x2dc>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d00d      	beq.n	8000e0e <HAL_GPIO_Init+0x1e2>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a45      	ldr	r2, [pc, #276]	; (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d007      	beq.n	8000e0a <HAL_GPIO_Init+0x1de>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a44      	ldr	r2, [pc, #272]	; (8000f10 <HAL_GPIO_Init+0x2e4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d101      	bne.n	8000e06 <HAL_GPIO_Init+0x1da>
 8000e02:	2305      	movs	r3, #5
 8000e04:	e008      	b.n	8000e18 <HAL_GPIO_Init+0x1ec>
 8000e06:	2306      	movs	r3, #6
 8000e08:	e006      	b.n	8000e18 <HAL_GPIO_Init+0x1ec>
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e004      	b.n	8000e18 <HAL_GPIO_Init+0x1ec>
 8000e0e:	2302      	movs	r3, #2
 8000e10:	e002      	b.n	8000e18 <HAL_GPIO_Init+0x1ec>
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <HAL_GPIO_Init+0x1ec>
 8000e16:	2300      	movs	r3, #0
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	2103      	movs	r1, #3
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	0092      	lsls	r2, r2, #2
 8000e20:	4093      	lsls	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e28:	4935      	ldr	r1, [pc, #212]	; (8000f00 <HAL_GPIO_Init+0x2d4>)
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	3302      	adds	r3, #2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e36:	4b37      	ldr	r3, [pc, #220]	; (8000f14 <HAL_GPIO_Init+0x2e8>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	035b      	lsls	r3, r3, #13
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e5a:	4b2e      	ldr	r3, [pc, #184]	; (8000f14 <HAL_GPIO_Init+0x2e8>)
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e60:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <HAL_GPIO_Init+0x2e8>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	43da      	mvns	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	039b      	lsls	r3, r3, #14
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d003      	beq.n	8000e84 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e84:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <HAL_GPIO_Init+0x2e8>)
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000e8a:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <HAL_GPIO_Init+0x2e8>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	43da      	mvns	r2, r3
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	029b      	lsls	r3, r3, #10
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <HAL_GPIO_Init+0x2e8>)
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <HAL_GPIO_Init+0x2e8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	43da      	mvns	r2, r3
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	025b      	lsls	r3, r3, #9
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_GPIO_Init+0x2e8>)
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	40da      	lsrs	r2, r3
 8000eec:	1e13      	subs	r3, r2, #0
 8000eee:	d000      	beq.n	8000ef2 <HAL_GPIO_Init+0x2c6>
 8000ef0:	e6a8      	b.n	8000c44 <HAL_GPIO_Init+0x18>
  }
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b006      	add	sp, #24
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40010000 	.word	0x40010000
 8000f04:	50000400 	.word	0x50000400
 8000f08:	50000800 	.word	0x50000800
 8000f0c:	50000c00 	.word	0x50000c00
 8000f10:	50001c00 	.word	0x50001c00
 8000f14:	40010400 	.word	0x40010400

08000f18 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	0008      	movs	r0, r1
 8000f22:	0011      	movs	r1, r2
 8000f24:	1cbb      	adds	r3, r7, #2
 8000f26:	1c02      	adds	r2, r0, #0
 8000f28:	801a      	strh	r2, [r3, #0]
 8000f2a:	1c7b      	adds	r3, r7, #1
 8000f2c:	1c0a      	adds	r2, r1, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f30:	1c7b      	adds	r3, r7, #1
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d004      	beq.n	8000f42 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f38:	1cbb      	adds	r3, r7, #2
 8000f3a:	881a      	ldrh	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000f40:	e003      	b.n	8000f4a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000f42:	1cbb      	adds	r3, r7, #2
 8000f44:	881a      	ldrh	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b002      	add	sp, #8
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b084      	sub	sp, #16
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	000a      	movs	r2, r1
 8000f5c:	1cbb      	adds	r3, r7, #2
 8000f5e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f66:	1cbb      	adds	r3, r7, #2
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	041a      	lsls	r2, r3, #16
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	1cb9      	adds	r1, r7, #2
 8000f76:	8809      	ldrh	r1, [r1, #0]
 8000f78:	400b      	ands	r3, r1
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	619a      	str	r2, [r3, #24]
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b004      	add	sp, #16
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e082      	b.n	80010a0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2241      	movs	r2, #65	; 0x41
 8000f9e:	5c9b      	ldrb	r3, [r3, r2]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d107      	bne.n	8000fb6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2240      	movs	r2, #64	; 0x40
 8000faa:	2100      	movs	r1, #0
 8000fac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f7ff fc25 	bl	8000800 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2241      	movs	r2, #65	; 0x41
 8000fba:	2124      	movs	r1, #36	; 0x24
 8000fbc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	438a      	bics	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4934      	ldr	r1, [pc, #208]	; (80010a8 <HAL_I2C_Init+0x120>)
 8000fd8:	400a      	ands	r2, r1
 8000fda:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4931      	ldr	r1, [pc, #196]	; (80010ac <HAL_I2C_Init+0x124>)
 8000fe8:	400a      	ands	r2, r1
 8000fea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d108      	bne.n	8001006 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2180      	movs	r1, #128	; 0x80
 8000ffe:	0209      	lsls	r1, r1, #8
 8001000:	430a      	orrs	r2, r1
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	e007      	b.n	8001016 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2184      	movs	r1, #132	; 0x84
 8001010:	0209      	lsls	r1, r1, #8
 8001012:	430a      	orrs	r2, r1
 8001014:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	2b02      	cmp	r3, #2
 800101c:	d104      	bne.n	8001028 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	491f      	ldr	r1, [pc, #124]	; (80010b0 <HAL_I2C_Init+0x128>)
 8001034:	430a      	orrs	r2, r1
 8001036:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	491a      	ldr	r1, [pc, #104]	; (80010ac <HAL_I2C_Init+0x124>)
 8001044:	400a      	ands	r2, r1
 8001046:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	431a      	orrs	r2, r3
 8001052:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	430a      	orrs	r2, r1
 8001060:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69d9      	ldr	r1, [r3, #28]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a1a      	ldr	r2, [r3, #32]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	430a      	orrs	r2, r1
 8001070:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2101      	movs	r1, #1
 800107e:	430a      	orrs	r2, r1
 8001080:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2241      	movs	r2, #65	; 0x41
 800108c:	2120      	movs	r1, #32
 800108e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2242      	movs	r2, #66	; 0x42
 800109a:	2100      	movs	r1, #0
 800109c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b002      	add	sp, #8
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	f0ffffff 	.word	0xf0ffffff
 80010ac:	ffff7fff 	.word	0xffff7fff
 80010b0:	02008000 	.word	0x02008000

080010b4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	230a      	movs	r3, #10
 80010c2:	18fb      	adds	r3, r7, r3
 80010c4:	1c0a      	adds	r2, r1, #0
 80010c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2241      	movs	r2, #65	; 0x41
 80010d0:	5c9b      	ldrb	r3, [r3, r2]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b20      	cmp	r3, #32
 80010d6:	d000      	beq.n	80010da <HAL_I2C_IsDeviceReady+0x26>
 80010d8:	e0fd      	b.n	80012d6 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	699a      	ldr	r2, [r3, #24]
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	401a      	ands	r2, r3
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d101      	bne.n	80010f2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80010ee:	2302      	movs	r3, #2
 80010f0:	e0f2      	b.n	80012d8 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2240      	movs	r2, #64	; 0x40
 80010f6:	5c9b      	ldrb	r3, [r3, r2]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d101      	bne.n	8001100 <HAL_I2C_IsDeviceReady+0x4c>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e0eb      	b.n	80012d8 <HAL_I2C_IsDeviceReady+0x224>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2240      	movs	r2, #64	; 0x40
 8001104:	2101      	movs	r1, #1
 8001106:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2241      	movs	r2, #65	; 0x41
 800110c:	2124      	movs	r1, #36	; 0x24
 800110e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2200      	movs	r2, #0
 8001114:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d107      	bne.n	800112e <HAL_I2C_IsDeviceReady+0x7a>
 800111e:	230a      	movs	r3, #10
 8001120:	18fb      	adds	r3, r7, r3
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	059b      	lsls	r3, r3, #22
 8001126:	0d9b      	lsrs	r3, r3, #22
 8001128:	4a6d      	ldr	r2, [pc, #436]	; (80012e0 <HAL_I2C_IsDeviceReady+0x22c>)
 800112a:	431a      	orrs	r2, r3
 800112c:	e006      	b.n	800113c <HAL_I2C_IsDeviceReady+0x88>
 800112e:	230a      	movs	r3, #10
 8001130:	18fb      	adds	r3, r7, r3
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	059b      	lsls	r3, r3, #22
 8001136:	0d9b      	lsrs	r3, r3, #22
 8001138:	4a6a      	ldr	r2, [pc, #424]	; (80012e4 <HAL_I2C_IsDeviceReady+0x230>)
 800113a:	431a      	orrs	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001142:	f7ff fc91 	bl	8000a68 <HAL_GetTick>
 8001146:	0003      	movs	r3, r0
 8001148:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	2220      	movs	r2, #32
 8001152:	4013      	ands	r3, r2
 8001154:	3b20      	subs	r3, #32
 8001156:	425a      	negs	r2, r3
 8001158:	4153      	adcs	r3, r2
 800115a:	b2da      	uxtb	r2, r3
 800115c:	231f      	movs	r3, #31
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	2210      	movs	r2, #16
 800116a:	4013      	ands	r3, r2
 800116c:	3b10      	subs	r3, #16
 800116e:	425a      	negs	r2, r3
 8001170:	4153      	adcs	r3, r2
 8001172:	b2da      	uxtb	r2, r3
 8001174:	231e      	movs	r3, #30
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800117a:	e035      	b.n	80011e8 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	d01a      	beq.n	80011b8 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001182:	f7ff fc71 	bl	8000a68 <HAL_GetTick>
 8001186:	0002      	movs	r2, r0
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	d302      	bcc.n	8001198 <HAL_I2C_IsDeviceReady+0xe4>
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d10f      	bne.n	80011b8 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2241      	movs	r2, #65	; 0x41
 800119c:	2120      	movs	r1, #32
 800119e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a4:	2220      	movs	r2, #32
 80011a6:	431a      	orrs	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2240      	movs	r2, #64	; 0x40
 80011b0:	2100      	movs	r1, #0
 80011b2:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e08f      	b.n	80012d8 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	2220      	movs	r2, #32
 80011c0:	4013      	ands	r3, r2
 80011c2:	3b20      	subs	r3, #32
 80011c4:	425a      	negs	r2, r3
 80011c6:	4153      	adcs	r3, r2
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	231f      	movs	r3, #31
 80011cc:	18fb      	adds	r3, r7, r3
 80011ce:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	2210      	movs	r2, #16
 80011d8:	4013      	ands	r3, r2
 80011da:	3b10      	subs	r3, #16
 80011dc:	425a      	negs	r2, r3
 80011de:	4153      	adcs	r3, r2
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	231e      	movs	r3, #30
 80011e4:	18fb      	adds	r3, r7, r3
 80011e6:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80011e8:	231f      	movs	r3, #31
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d104      	bne.n	80011fc <HAL_I2C_IsDeviceReady+0x148>
 80011f2:	231e      	movs	r3, #30
 80011f4:	18fb      	adds	r3, r7, r3
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0bf      	beq.n	800117c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	2210      	movs	r2, #16
 8001204:	4013      	ands	r3, r2
 8001206:	2b10      	cmp	r3, #16
 8001208:	d01a      	beq.n	8001240 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	0013      	movs	r3, r2
 8001214:	2200      	movs	r2, #0
 8001216:	2120      	movs	r1, #32
 8001218:	f000 f866 	bl	80012e8 <I2C_WaitOnFlagUntilTimeout>
 800121c:	1e03      	subs	r3, r0, #0
 800121e:	d001      	beq.n	8001224 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e059      	b.n	80012d8 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2220      	movs	r2, #32
 800122a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2241      	movs	r2, #65	; 0x41
 8001230:	2120      	movs	r1, #32
 8001232:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2240      	movs	r2, #64	; 0x40
 8001238:	2100      	movs	r1, #0
 800123a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	e04b      	b.n	80012d8 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	0013      	movs	r3, r2
 800124a:	2200      	movs	r2, #0
 800124c:	2120      	movs	r1, #32
 800124e:	f000 f84b 	bl	80012e8 <I2C_WaitOnFlagUntilTimeout>
 8001252:	1e03      	subs	r3, r0, #0
 8001254:	d001      	beq.n	800125a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e03e      	b.n	80012d8 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2210      	movs	r2, #16
 8001260:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2220      	movs	r2, #32
 8001268:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	429a      	cmp	r2, r3
 8001270:	d119      	bne.n	80012a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	01c9      	lsls	r1, r1, #7
 8001280:	430a      	orrs	r2, r1
 8001282:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	0013      	movs	r3, r2
 800128e:	2200      	movs	r2, #0
 8001290:	2120      	movs	r1, #32
 8001292:	f000 f829 	bl	80012e8 <I2C_WaitOnFlagUntilTimeout>
 8001296:	1e03      	subs	r3, r0, #0
 8001298:	d001      	beq.n	800129e <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e01c      	b.n	80012d8 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2220      	movs	r2, #32
 80012a4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	3301      	adds	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d900      	bls.n	80012b6 <HAL_I2C_IsDeviceReady+0x202>
 80012b4:	e72f      	b.n	8001116 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2241      	movs	r2, #65	; 0x41
 80012ba:	2120      	movs	r1, #32
 80012bc:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	2220      	movs	r2, #32
 80012c4:	431a      	orrs	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2240      	movs	r2, #64	; 0x40
 80012ce:	2100      	movs	r1, #0
 80012d0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 80012d6:	2302      	movs	r3, #2
  }
}
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	b008      	add	sp, #32
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	02002000 	.word	0x02002000
 80012e4:	02002800 	.word	0x02002800

080012e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	1dfb      	adds	r3, r7, #7
 80012f6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012f8:	e030      	b.n	800135c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	d02d      	beq.n	800135c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001300:	f7ff fbb2 	bl	8000a68 <HAL_GetTick>
 8001304:	0002      	movs	r2, r0
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d302      	bcc.n	8001316 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d122      	bne.n	800135c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	4013      	ands	r3, r2
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	425a      	negs	r2, r3
 8001326:	4153      	adcs	r3, r2
 8001328:	b2db      	uxtb	r3, r3
 800132a:	001a      	movs	r2, r3
 800132c:	1dfb      	adds	r3, r7, #7
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d113      	bne.n	800135c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001338:	2220      	movs	r2, #32
 800133a:	431a      	orrs	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2241      	movs	r2, #65	; 0x41
 8001344:	2120      	movs	r1, #32
 8001346:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2242      	movs	r2, #66	; 0x42
 800134c:	2100      	movs	r1, #0
 800134e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2240      	movs	r2, #64	; 0x40
 8001354:	2100      	movs	r1, #0
 8001356:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e00f      	b.n	800137c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	4013      	ands	r3, r2
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	425a      	negs	r2, r3
 800136c:	4153      	adcs	r3, r2
 800136e:	b2db      	uxtb	r3, r3
 8001370:	001a      	movs	r2, r3
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d0bf      	beq.n	80012fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	0018      	movs	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	b004      	add	sp, #16
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2241      	movs	r2, #65	; 0x41
 8001392:	5c9b      	ldrb	r3, [r3, r2]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b20      	cmp	r3, #32
 8001398:	d138      	bne.n	800140c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2240      	movs	r2, #64	; 0x40
 800139e:	5c9b      	ldrb	r3, [r3, r2]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d101      	bne.n	80013a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80013a4:	2302      	movs	r3, #2
 80013a6:	e032      	b.n	800140e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2240      	movs	r2, #64	; 0x40
 80013ac:	2101      	movs	r1, #1
 80013ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2241      	movs	r2, #65	; 0x41
 80013b4:	2124      	movs	r1, #36	; 0x24
 80013b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2101      	movs	r1, #1
 80013c4:	438a      	bics	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4911      	ldr	r1, [pc, #68]	; (8001418 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80013d4:	400a      	ands	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6819      	ldr	r1, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2101      	movs	r1, #1
 80013f4:	430a      	orrs	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2241      	movs	r2, #65	; 0x41
 80013fc:	2120      	movs	r1, #32
 80013fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2240      	movs	r2, #64	; 0x40
 8001404:	2100      	movs	r1, #0
 8001406:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	e000      	b.n	800140e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800140c:	2302      	movs	r3, #2
  }
}
 800140e:	0018      	movs	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	b002      	add	sp, #8
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	ffffefff 	.word	0xffffefff

0800141c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2241      	movs	r2, #65	; 0x41
 800142a:	5c9b      	ldrb	r3, [r3, r2]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b20      	cmp	r3, #32
 8001430:	d139      	bne.n	80014a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2240      	movs	r2, #64	; 0x40
 8001436:	5c9b      	ldrb	r3, [r3, r2]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800143c:	2302      	movs	r3, #2
 800143e:	e033      	b.n	80014a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2240      	movs	r2, #64	; 0x40
 8001444:	2101      	movs	r1, #1
 8001446:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2241      	movs	r2, #65	; 0x41
 800144c:	2124      	movs	r1, #36	; 0x24
 800144e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2101      	movs	r1, #1
 800145c:	438a      	bics	r2, r1
 800145e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800146c:	4013      	ands	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2101      	movs	r1, #1
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2241      	movs	r2, #65	; 0x41
 8001496:	2120      	movs	r1, #32
 8001498:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2240      	movs	r2, #64	; 0x40
 800149e:	2100      	movs	r1, #0
 80014a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e000      	b.n	80014a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80014a6:	2302      	movs	r3, #2
  }
}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b004      	add	sp, #16
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	fffff0ff 	.word	0xfffff0ff

080014b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b4:	b5b0      	push	{r4, r5, r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d102      	bne.n	80014c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	f000 fbaf 	bl	8001c26 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c8:	4bcf      	ldr	r3, [pc, #828]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	220c      	movs	r2, #12
 80014ce:	4013      	ands	r3, r2
 80014d0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d2:	4bcd      	ldr	r3, [pc, #820]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 80014d4:	68da      	ldr	r2, [r3, #12]
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	025b      	lsls	r3, r3, #9
 80014da:	4013      	ands	r3, r2
 80014dc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2201      	movs	r2, #1
 80014e4:	4013      	ands	r3, r2
 80014e6:	d100      	bne.n	80014ea <HAL_RCC_OscConfig+0x36>
 80014e8:	e07e      	b.n	80015e8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d007      	beq.n	8001500 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014f0:	6a3b      	ldr	r3, [r7, #32]
 80014f2:	2b0c      	cmp	r3, #12
 80014f4:	d112      	bne.n	800151c <HAL_RCC_OscConfig+0x68>
 80014f6:	69fa      	ldr	r2, [r7, #28]
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	025b      	lsls	r3, r3, #9
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d10d      	bne.n	800151c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	4bc1      	ldr	r3, [pc, #772]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	029b      	lsls	r3, r3, #10
 8001508:	4013      	ands	r3, r2
 800150a:	d100      	bne.n	800150e <HAL_RCC_OscConfig+0x5a>
 800150c:	e06b      	b.n	80015e6 <HAL_RCC_OscConfig+0x132>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d167      	bne.n	80015e6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	f000 fb85 	bl	8001c26 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	025b      	lsls	r3, r3, #9
 8001524:	429a      	cmp	r2, r3
 8001526:	d107      	bne.n	8001538 <HAL_RCC_OscConfig+0x84>
 8001528:	4bb7      	ldr	r3, [pc, #732]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4bb6      	ldr	r3, [pc, #728]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 800152e:	2180      	movs	r1, #128	; 0x80
 8001530:	0249      	lsls	r1, r1, #9
 8001532:	430a      	orrs	r2, r1
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e027      	b.n	8001588 <HAL_RCC_OscConfig+0xd4>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	23a0      	movs	r3, #160	; 0xa0
 800153e:	02db      	lsls	r3, r3, #11
 8001540:	429a      	cmp	r2, r3
 8001542:	d10e      	bne.n	8001562 <HAL_RCC_OscConfig+0xae>
 8001544:	4bb0      	ldr	r3, [pc, #704]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4baf      	ldr	r3, [pc, #700]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	02c9      	lsls	r1, r1, #11
 800154e:	430a      	orrs	r2, r1
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	4bad      	ldr	r3, [pc, #692]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	4bac      	ldr	r3, [pc, #688]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	0249      	lsls	r1, r1, #9
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	e012      	b.n	8001588 <HAL_RCC_OscConfig+0xd4>
 8001562:	4ba9      	ldr	r3, [pc, #676]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4ba8      	ldr	r3, [pc, #672]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 8001568:	49a8      	ldr	r1, [pc, #672]	; (800180c <HAL_RCC_OscConfig+0x358>)
 800156a:	400a      	ands	r2, r1
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	4ba6      	ldr	r3, [pc, #664]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	025b      	lsls	r3, r3, #9
 8001576:	4013      	ands	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4ba2      	ldr	r3, [pc, #648]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4ba1      	ldr	r3, [pc, #644]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 8001582:	49a3      	ldr	r1, [pc, #652]	; (8001810 <HAL_RCC_OscConfig+0x35c>)
 8001584:	400a      	ands	r2, r1
 8001586:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d015      	beq.n	80015bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fa6a 	bl	8000a68 <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001598:	e009      	b.n	80015ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800159a:	f7ff fa65 	bl	8000a68 <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b64      	cmp	r3, #100	; 0x64
 80015a6:	d902      	bls.n	80015ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	f000 fb3c 	bl	8001c26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015ae:	4b96      	ldr	r3, [pc, #600]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	029b      	lsls	r3, r3, #10
 80015b6:	4013      	ands	r3, r2
 80015b8:	d0ef      	beq.n	800159a <HAL_RCC_OscConfig+0xe6>
 80015ba:	e015      	b.n	80015e8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fa54 	bl	8000a68 <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c6:	f7ff fa4f 	bl	8000a68 <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b64      	cmp	r3, #100	; 0x64
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e326      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015d8:	4b8b      	ldr	r3, [pc, #556]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	029b      	lsls	r3, r3, #10
 80015e0:	4013      	ands	r3, r2
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x112>
 80015e4:	e000      	b.n	80015e8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2202      	movs	r2, #2
 80015ee:	4013      	ands	r3, r2
 80015f0:	d100      	bne.n	80015f4 <HAL_RCC_OscConfig+0x140>
 80015f2:	e08b      	b.n	800170c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d005      	beq.n	800160c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	2b0c      	cmp	r3, #12
 8001604:	d13e      	bne.n	8001684 <HAL_RCC_OscConfig+0x1d0>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d13b      	bne.n	8001684 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800160c:	4b7e      	ldr	r3, [pc, #504]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2204      	movs	r2, #4
 8001612:	4013      	ands	r3, r2
 8001614:	d004      	beq.n	8001620 <HAL_RCC_OscConfig+0x16c>
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e302      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	4b79      	ldr	r3, [pc, #484]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4a7b      	ldr	r2, [pc, #492]	; (8001814 <HAL_RCC_OscConfig+0x360>)
 8001626:	4013      	ands	r3, r2
 8001628:	0019      	movs	r1, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	021a      	lsls	r2, r3, #8
 8001630:	4b75      	ldr	r3, [pc, #468]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 8001632:	430a      	orrs	r2, r1
 8001634:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001636:	4b74      	ldr	r3, [pc, #464]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2209      	movs	r2, #9
 800163c:	4393      	bics	r3, r2
 800163e:	0019      	movs	r1, r3
 8001640:	4b71      	ldr	r3, [pc, #452]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	430a      	orrs	r2, r1
 8001646:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001648:	f000 fc40 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 800164c:	0001      	movs	r1, r0
 800164e:	4b6e      	ldr	r3, [pc, #440]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	220f      	movs	r2, #15
 8001656:	4013      	ands	r3, r2
 8001658:	4a6f      	ldr	r2, [pc, #444]	; (8001818 <HAL_RCC_OscConfig+0x364>)
 800165a:	5cd3      	ldrb	r3, [r2, r3]
 800165c:	000a      	movs	r2, r1
 800165e:	40da      	lsrs	r2, r3
 8001660:	4b6e      	ldr	r3, [pc, #440]	; (800181c <HAL_RCC_OscConfig+0x368>)
 8001662:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001664:	4b6e      	ldr	r3, [pc, #440]	; (8001820 <HAL_RCC_OscConfig+0x36c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2513      	movs	r5, #19
 800166a:	197c      	adds	r4, r7, r5
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff f9b5 	bl	80009dc <HAL_InitTick>
 8001672:	0003      	movs	r3, r0
 8001674:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001676:	197b      	adds	r3, r7, r5
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d046      	beq.n	800170c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800167e:	197b      	adds	r3, r7, r5
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	e2d0      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d027      	beq.n	80016da <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800168a:	4b5f      	ldr	r3, [pc, #380]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2209      	movs	r2, #9
 8001690:	4393      	bics	r3, r2
 8001692:	0019      	movs	r1, r3
 8001694:	4b5c      	ldr	r3, [pc, #368]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	430a      	orrs	r2, r1
 800169a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff f9e4 	bl	8000a68 <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016a6:	f7ff f9df 	bl	8000a68 <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e2b6      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016b8:	4b53      	ldr	r3, [pc, #332]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2204      	movs	r2, #4
 80016be:	4013      	ands	r3, r2
 80016c0:	d0f1      	beq.n	80016a6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c2:	4b51      	ldr	r3, [pc, #324]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4a53      	ldr	r2, [pc, #332]	; (8001814 <HAL_RCC_OscConfig+0x360>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	0019      	movs	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	021a      	lsls	r2, r3, #8
 80016d2:	4b4d      	ldr	r3, [pc, #308]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 80016d4:	430a      	orrs	r2, r1
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	e018      	b.n	800170c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016da:	4b4b      	ldr	r3, [pc, #300]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4b4a      	ldr	r3, [pc, #296]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 80016e0:	2101      	movs	r1, #1
 80016e2:	438a      	bics	r2, r1
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff f9bf 	bl	8000a68 <HAL_GetTick>
 80016ea:	0003      	movs	r3, r0
 80016ec:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f0:	f7ff f9ba 	bl	8000a68 <HAL_GetTick>
 80016f4:	0002      	movs	r2, r0
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e291      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001702:	4b41      	ldr	r3, [pc, #260]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2204      	movs	r2, #4
 8001708:	4013      	ands	r3, r2
 800170a:	d1f1      	bne.n	80016f0 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2210      	movs	r2, #16
 8001712:	4013      	ands	r3, r2
 8001714:	d100      	bne.n	8001718 <HAL_RCC_OscConfig+0x264>
 8001716:	e0a1      	b.n	800185c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d140      	bne.n	80017a0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800171e:	4b3a      	ldr	r3, [pc, #232]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4013      	ands	r3, r2
 8001728:	d005      	beq.n	8001736 <HAL_RCC_OscConfig+0x282>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e277      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001736:	4b34      	ldr	r3, [pc, #208]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	4a3a      	ldr	r2, [pc, #232]	; (8001824 <HAL_RCC_OscConfig+0x370>)
 800173c:	4013      	ands	r3, r2
 800173e:	0019      	movs	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001744:	4b30      	ldr	r3, [pc, #192]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 8001746:	430a      	orrs	r2, r1
 8001748:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800174a:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	0a19      	lsrs	r1, r3, #8
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	061a      	lsls	r2, r3, #24
 8001758:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 800175a:	430a      	orrs	r2, r1
 800175c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	0b5b      	lsrs	r3, r3, #13
 8001764:	3301      	adds	r3, #1
 8001766:	2280      	movs	r2, #128	; 0x80
 8001768:	0212      	lsls	r2, r2, #8
 800176a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800176c:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	210f      	movs	r1, #15
 8001774:	400b      	ands	r3, r1
 8001776:	4928      	ldr	r1, [pc, #160]	; (8001818 <HAL_RCC_OscConfig+0x364>)
 8001778:	5ccb      	ldrb	r3, [r1, r3]
 800177a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <HAL_RCC_OscConfig+0x368>)
 800177e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_RCC_OscConfig+0x36c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2513      	movs	r5, #19
 8001786:	197c      	adds	r4, r7, r5
 8001788:	0018      	movs	r0, r3
 800178a:	f7ff f927 	bl	80009dc <HAL_InitTick>
 800178e:	0003      	movs	r3, r0
 8001790:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001792:	197b      	adds	r3, r7, r5
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d060      	beq.n	800185c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800179a:	197b      	adds	r3, r7, r5
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	e242      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d03f      	beq.n	8001828 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b16      	ldr	r3, [pc, #88]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 80017ae:	2180      	movs	r1, #128	; 0x80
 80017b0:	0049      	lsls	r1, r1, #1
 80017b2:	430a      	orrs	r2, r1
 80017b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7ff f957 	bl	8000a68 <HAL_GetTick>
 80017ba:	0003      	movs	r3, r0
 80017bc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017c0:	f7ff f952 	bl	8000a68 <HAL_GetTick>
 80017c4:	0002      	movs	r2, r0
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e229      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4013      	ands	r3, r2
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4a10      	ldr	r2, [pc, #64]	; (8001824 <HAL_RCC_OscConfig+0x370>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	0019      	movs	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 80017ee:	430a      	orrs	r2, r1
 80017f0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	0a19      	lsrs	r1, r3, #8
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	061a      	lsls	r2, r3, #24
 8001800:	4b01      	ldr	r3, [pc, #4]	; (8001808 <HAL_RCC_OscConfig+0x354>)
 8001802:	430a      	orrs	r2, r1
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	e029      	b.n	800185c <HAL_RCC_OscConfig+0x3a8>
 8001808:	40021000 	.word	0x40021000
 800180c:	fffeffff 	.word	0xfffeffff
 8001810:	fffbffff 	.word	0xfffbffff
 8001814:	ffffe0ff 	.word	0xffffe0ff
 8001818:	08002f54 	.word	0x08002f54
 800181c:	20000028 	.word	0x20000028
 8001820:	2000002c 	.word	0x2000002c
 8001824:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001828:	4bbd      	ldr	r3, [pc, #756]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4bbc      	ldr	r3, [pc, #752]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 800182e:	49bd      	ldr	r1, [pc, #756]	; (8001b24 <HAL_RCC_OscConfig+0x670>)
 8001830:	400a      	ands	r2, r1
 8001832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff f918 	bl	8000a68 <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800183e:	f7ff f913 	bl	8000a68 <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e1ea      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001850:	4bb3      	ldr	r3, [pc, #716]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4013      	ands	r3, r2
 800185a:	d1f0      	bne.n	800183e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2208      	movs	r2, #8
 8001862:	4013      	ands	r3, r2
 8001864:	d036      	beq.n	80018d4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d019      	beq.n	80018a2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800186e:	4bac      	ldr	r3, [pc, #688]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001870:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001872:	4bab      	ldr	r3, [pc, #684]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001874:	2101      	movs	r1, #1
 8001876:	430a      	orrs	r2, r1
 8001878:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187a:	f7ff f8f5 	bl	8000a68 <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001884:	f7ff f8f0 	bl	8000a68 <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e1c7      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001896:	4ba2      	ldr	r3, [pc, #648]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800189a:	2202      	movs	r2, #2
 800189c:	4013      	ands	r3, r2
 800189e:	d0f1      	beq.n	8001884 <HAL_RCC_OscConfig+0x3d0>
 80018a0:	e018      	b.n	80018d4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a2:	4b9f      	ldr	r3, [pc, #636]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 80018a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018a6:	4b9e      	ldr	r3, [pc, #632]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 80018a8:	2101      	movs	r1, #1
 80018aa:	438a      	bics	r2, r1
 80018ac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ae:	f7ff f8db 	bl	8000a68 <HAL_GetTick>
 80018b2:	0003      	movs	r3, r0
 80018b4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b8:	f7ff f8d6 	bl	8000a68 <HAL_GetTick>
 80018bc:	0002      	movs	r2, r0
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e1ad      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018ca:	4b95      	ldr	r3, [pc, #596]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 80018cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ce:	2202      	movs	r2, #2
 80018d0:	4013      	ands	r3, r2
 80018d2:	d1f1      	bne.n	80018b8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2204      	movs	r2, #4
 80018da:	4013      	ands	r3, r2
 80018dc:	d100      	bne.n	80018e0 <HAL_RCC_OscConfig+0x42c>
 80018de:	e0ae      	b.n	8001a3e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e0:	2027      	movs	r0, #39	; 0x27
 80018e2:	183b      	adds	r3, r7, r0
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e8:	4b8d      	ldr	r3, [pc, #564]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 80018ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	055b      	lsls	r3, r3, #21
 80018f0:	4013      	ands	r3, r2
 80018f2:	d109      	bne.n	8001908 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f4:	4b8a      	ldr	r3, [pc, #552]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 80018f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018f8:	4b89      	ldr	r3, [pc, #548]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	0549      	lsls	r1, r1, #21
 80018fe:	430a      	orrs	r2, r1
 8001900:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001902:	183b      	adds	r3, r7, r0
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	4b87      	ldr	r3, [pc, #540]	; (8001b28 <HAL_RCC_OscConfig+0x674>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4013      	ands	r3, r2
 8001912:	d11a      	bne.n	800194a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001914:	4b84      	ldr	r3, [pc, #528]	; (8001b28 <HAL_RCC_OscConfig+0x674>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b83      	ldr	r3, [pc, #524]	; (8001b28 <HAL_RCC_OscConfig+0x674>)
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	0049      	lsls	r1, r1, #1
 800191e:	430a      	orrs	r2, r1
 8001920:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001922:	f7ff f8a1 	bl	8000a68 <HAL_GetTick>
 8001926:	0003      	movs	r3, r0
 8001928:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192c:	f7ff f89c 	bl	8000a68 <HAL_GetTick>
 8001930:	0002      	movs	r2, r0
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e173      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193e:	4b7a      	ldr	r3, [pc, #488]	; (8001b28 <HAL_RCC_OscConfig+0x674>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4013      	ands	r3, r2
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	429a      	cmp	r2, r3
 8001954:	d107      	bne.n	8001966 <HAL_RCC_OscConfig+0x4b2>
 8001956:	4b72      	ldr	r3, [pc, #456]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001958:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800195a:	4b71      	ldr	r3, [pc, #452]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 800195c:	2180      	movs	r1, #128	; 0x80
 800195e:	0049      	lsls	r1, r1, #1
 8001960:	430a      	orrs	r2, r1
 8001962:	651a      	str	r2, [r3, #80]	; 0x50
 8001964:	e031      	b.n	80019ca <HAL_RCC_OscConfig+0x516>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10c      	bne.n	8001988 <HAL_RCC_OscConfig+0x4d4>
 800196e:	4b6c      	ldr	r3, [pc, #432]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001970:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001972:	4b6b      	ldr	r3, [pc, #428]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001974:	496b      	ldr	r1, [pc, #428]	; (8001b24 <HAL_RCC_OscConfig+0x670>)
 8001976:	400a      	ands	r2, r1
 8001978:	651a      	str	r2, [r3, #80]	; 0x50
 800197a:	4b69      	ldr	r3, [pc, #420]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 800197c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800197e:	4b68      	ldr	r3, [pc, #416]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001980:	496a      	ldr	r1, [pc, #424]	; (8001b2c <HAL_RCC_OscConfig+0x678>)
 8001982:	400a      	ands	r2, r1
 8001984:	651a      	str	r2, [r3, #80]	; 0x50
 8001986:	e020      	b.n	80019ca <HAL_RCC_OscConfig+0x516>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	23a0      	movs	r3, #160	; 0xa0
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	429a      	cmp	r2, r3
 8001992:	d10e      	bne.n	80019b2 <HAL_RCC_OscConfig+0x4fe>
 8001994:	4b62      	ldr	r3, [pc, #392]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001996:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001998:	4b61      	ldr	r3, [pc, #388]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 800199a:	2180      	movs	r1, #128	; 0x80
 800199c:	00c9      	lsls	r1, r1, #3
 800199e:	430a      	orrs	r2, r1
 80019a0:	651a      	str	r2, [r3, #80]	; 0x50
 80019a2:	4b5f      	ldr	r3, [pc, #380]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 80019a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019a6:	4b5e      	ldr	r3, [pc, #376]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 80019a8:	2180      	movs	r1, #128	; 0x80
 80019aa:	0049      	lsls	r1, r1, #1
 80019ac:	430a      	orrs	r2, r1
 80019ae:	651a      	str	r2, [r3, #80]	; 0x50
 80019b0:	e00b      	b.n	80019ca <HAL_RCC_OscConfig+0x516>
 80019b2:	4b5b      	ldr	r3, [pc, #364]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 80019b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 80019b8:	495a      	ldr	r1, [pc, #360]	; (8001b24 <HAL_RCC_OscConfig+0x670>)
 80019ba:	400a      	ands	r2, r1
 80019bc:	651a      	str	r2, [r3, #80]	; 0x50
 80019be:	4b58      	ldr	r3, [pc, #352]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 80019c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019c2:	4b57      	ldr	r3, [pc, #348]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 80019c4:	4959      	ldr	r1, [pc, #356]	; (8001b2c <HAL_RCC_OscConfig+0x678>)
 80019c6:	400a      	ands	r2, r1
 80019c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d015      	beq.n	80019fe <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d2:	f7ff f849 	bl	8000a68 <HAL_GetTick>
 80019d6:	0003      	movs	r3, r0
 80019d8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019da:	e009      	b.n	80019f0 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019dc:	f7ff f844 	bl	8000a68 <HAL_GetTick>
 80019e0:	0002      	movs	r2, r0
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	4a52      	ldr	r2, [pc, #328]	; (8001b30 <HAL_RCC_OscConfig+0x67c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e11a      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019f0:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 80019f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d0ef      	beq.n	80019dc <HAL_RCC_OscConfig+0x528>
 80019fc:	e014      	b.n	8001a28 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fe:	f7ff f833 	bl	8000a68 <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a06:	e009      	b.n	8001a1c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f7ff f82e 	bl	8000a68 <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	4a47      	ldr	r2, [pc, #284]	; (8001b30 <HAL_RCC_OscConfig+0x67c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e104      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a1c:	4b40      	ldr	r3, [pc, #256]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001a1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4013      	ands	r3, r2
 8001a26:	d1ef      	bne.n	8001a08 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a28:	2327      	movs	r3, #39	; 0x27
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d105      	bne.n	8001a3e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a32:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a36:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001a38:	493e      	ldr	r1, [pc, #248]	; (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001a3a:	400a      	ands	r2, r1
 8001a3c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2220      	movs	r2, #32
 8001a44:	4013      	ands	r3, r2
 8001a46:	d049      	beq.n	8001adc <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d026      	beq.n	8001a9e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001a50:	4b33      	ldr	r3, [pc, #204]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001a56:	2101      	movs	r1, #1
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	4b30      	ldr	r3, [pc, #192]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a60:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001a62:	2101      	movs	r1, #1
 8001a64:	430a      	orrs	r2, r1
 8001a66:	635a      	str	r2, [r3, #52]	; 0x34
 8001a68:	4b33      	ldr	r3, [pc, #204]	; (8001b38 <HAL_RCC_OscConfig+0x684>)
 8001a6a:	6a1a      	ldr	r2, [r3, #32]
 8001a6c:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_RCC_OscConfig+0x684>)
 8001a6e:	2180      	movs	r1, #128	; 0x80
 8001a70:	0189      	lsls	r1, r1, #6
 8001a72:	430a      	orrs	r2, r1
 8001a74:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7fe fff7 	bl	8000a68 <HAL_GetTick>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a80:	f7fe fff2 	bl	8000a68 <HAL_GetTick>
 8001a84:	0002      	movs	r2, r0
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e0c9      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a92:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2202      	movs	r2, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d0f1      	beq.n	8001a80 <HAL_RCC_OscConfig+0x5cc>
 8001a9c:	e01e      	b.n	8001adc <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	438a      	bics	r2, r1
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <HAL_RCC_OscConfig+0x684>)
 8001aac:	6a1a      	ldr	r2, [r3, #32]
 8001aae:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <HAL_RCC_OscConfig+0x684>)
 8001ab0:	4922      	ldr	r1, [pc, #136]	; (8001b3c <HAL_RCC_OscConfig+0x688>)
 8001ab2:	400a      	ands	r2, r1
 8001ab4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab6:	f7fe ffd7 	bl	8000a68 <HAL_GetTick>
 8001aba:	0003      	movs	r3, r0
 8001abc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ac0:	f7fe ffd2 	bl	8000a68 <HAL_GetTick>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e0a9      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ad2:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d1f1      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d100      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x632>
 8001ae4:	e09e      	b.n	8001c24 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	2b0c      	cmp	r3, #12
 8001aea:	d100      	bne.n	8001aee <HAL_RCC_OscConfig+0x63a>
 8001aec:	e077      	b.n	8001bde <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d158      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_RCC_OscConfig+0x66c>)
 8001afc:	4910      	ldr	r1, [pc, #64]	; (8001b40 <HAL_RCC_OscConfig+0x68c>)
 8001afe:	400a      	ands	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7fe ffb1 	bl	8000a68 <HAL_GetTick>
 8001b06:	0003      	movs	r3, r0
 8001b08:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b0a:	e01b      	b.n	8001b44 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7fe ffac 	bl	8000a68 <HAL_GetTick>
 8001b10:	0002      	movs	r2, r0
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d914      	bls.n	8001b44 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e083      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	40021000 	.word	0x40021000
 8001b24:	fffffeff 	.word	0xfffffeff
 8001b28:	40007000 	.word	0x40007000
 8001b2c:	fffffbff 	.word	0xfffffbff
 8001b30:	00001388 	.word	0x00001388
 8001b34:	efffffff 	.word	0xefffffff
 8001b38:	40010000 	.word	0x40010000
 8001b3c:	ffffdfff 	.word	0xffffdfff
 8001b40:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b44:	4b3a      	ldr	r3, [pc, #232]	; (8001c30 <HAL_RCC_OscConfig+0x77c>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	049b      	lsls	r3, r3, #18
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d1dd      	bne.n	8001b0c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b50:	4b37      	ldr	r3, [pc, #220]	; (8001c30 <HAL_RCC_OscConfig+0x77c>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	4a37      	ldr	r2, [pc, #220]	; (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	0019      	movs	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <HAL_RCC_OscConfig+0x77c>)
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b70:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <HAL_RCC_OscConfig+0x77c>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b2e      	ldr	r3, [pc, #184]	; (8001c30 <HAL_RCC_OscConfig+0x77c>)
 8001b76:	2180      	movs	r1, #128	; 0x80
 8001b78:	0449      	lsls	r1, r1, #17
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7fe ff73 	bl	8000a68 <HAL_GetTick>
 8001b82:	0003      	movs	r3, r0
 8001b84:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b88:	f7fe ff6e 	bl	8000a68 <HAL_GetTick>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e045      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b9a:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <HAL_RCC_OscConfig+0x77c>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	049b      	lsls	r3, r3, #18
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x6d4>
 8001ba6:	e03d      	b.n	8001c24 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba8:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <HAL_RCC_OscConfig+0x77c>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <HAL_RCC_OscConfig+0x77c>)
 8001bae:	4922      	ldr	r1, [pc, #136]	; (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7fe ff58 	bl	8000a68 <HAL_GetTick>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bbe:	f7fe ff53 	bl	8000a68 <HAL_GetTick>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e02a      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bd0:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <HAL_RCC_OscConfig+0x77c>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	049b      	lsls	r3, r3, #18
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d1f0      	bne.n	8001bbe <HAL_RCC_OscConfig+0x70a>
 8001bdc:	e022      	b.n	8001c24 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e01d      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_RCC_OscConfig+0x77c>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf0:	69fa      	ldr	r2, [r7, #28]
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	025b      	lsls	r3, r3, #9
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d10f      	bne.n	8001c20 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c00:	69fa      	ldr	r2, [r7, #28]
 8001c02:	23f0      	movs	r3, #240	; 0xf0
 8001c04:	039b      	lsls	r3, r3, #14
 8001c06:	401a      	ands	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d107      	bne.n	8001c20 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	23c0      	movs	r3, #192	; 0xc0
 8001c14:	041b      	lsls	r3, r3, #16
 8001c16:	401a      	ands	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	0018      	movs	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b00a      	add	sp, #40	; 0x28
 8001c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	40021000 	.word	0x40021000
 8001c34:	ff02ffff 	.word	0xff02ffff
 8001c38:	feffffff 	.word	0xfeffffff

08001c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c3c:	b5b0      	push	{r4, r5, r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e128      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c50:	4b96      	ldr	r3, [pc, #600]	; (8001eac <HAL_RCC_ClockConfig+0x270>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2201      	movs	r2, #1
 8001c56:	4013      	ands	r3, r2
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d91e      	bls.n	8001c9c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b93      	ldr	r3, [pc, #588]	; (8001eac <HAL_RCC_ClockConfig+0x270>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2201      	movs	r2, #1
 8001c64:	4393      	bics	r3, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	4b90      	ldr	r3, [pc, #576]	; (8001eac <HAL_RCC_ClockConfig+0x270>)
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c70:	f7fe fefa 	bl	8000a68 <HAL_GetTick>
 8001c74:	0003      	movs	r3, r0
 8001c76:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c78:	e009      	b.n	8001c8e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7a:	f7fe fef5 	bl	8000a68 <HAL_GetTick>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	4a8a      	ldr	r2, [pc, #552]	; (8001eb0 <HAL_RCC_ClockConfig+0x274>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e109      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	4b87      	ldr	r3, [pc, #540]	; (8001eac <HAL_RCC_ClockConfig+0x270>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2201      	movs	r2, #1
 8001c94:	4013      	ands	r3, r2
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d1ee      	bne.n	8001c7a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d009      	beq.n	8001cba <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca6:	4b83      	ldr	r3, [pc, #524]	; (8001eb4 <HAL_RCC_ClockConfig+0x278>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	22f0      	movs	r2, #240	; 0xf0
 8001cac:	4393      	bics	r3, r2
 8001cae:	0019      	movs	r1, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	4b7f      	ldr	r3, [pc, #508]	; (8001eb4 <HAL_RCC_ClockConfig+0x278>)
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d100      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0x8a>
 8001cc4:	e089      	b.n	8001dda <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cce:	4b79      	ldr	r3, [pc, #484]	; (8001eb4 <HAL_RCC_ClockConfig+0x278>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	029b      	lsls	r3, r3, #10
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d120      	bne.n	8001d1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0e1      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ce6:	4b73      	ldr	r3, [pc, #460]	; (8001eb4 <HAL_RCC_ClockConfig+0x278>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	049b      	lsls	r3, r3, #18
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d114      	bne.n	8001d1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e0d5      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d106      	bne.n	8001d0c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cfe:	4b6d      	ldr	r3, [pc, #436]	; (8001eb4 <HAL_RCC_ClockConfig+0x278>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2204      	movs	r2, #4
 8001d04:	4013      	ands	r3, r2
 8001d06:	d109      	bne.n	8001d1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0ca      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d0c:	4b69      	ldr	r3, [pc, #420]	; (8001eb4 <HAL_RCC_ClockConfig+0x278>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4013      	ands	r3, r2
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0c2      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1c:	4b65      	ldr	r3, [pc, #404]	; (8001eb4 <HAL_RCC_ClockConfig+0x278>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2203      	movs	r2, #3
 8001d22:	4393      	bics	r3, r2
 8001d24:	0019      	movs	r1, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4b62      	ldr	r3, [pc, #392]	; (8001eb4 <HAL_RCC_ClockConfig+0x278>)
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d30:	f7fe fe9a 	bl	8000a68 <HAL_GetTick>
 8001d34:	0003      	movs	r3, r0
 8001d36:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d111      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d40:	e009      	b.n	8001d56 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d42:	f7fe fe91 	bl	8000a68 <HAL_GetTick>
 8001d46:	0002      	movs	r2, r0
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	4a58      	ldr	r2, [pc, #352]	; (8001eb0 <HAL_RCC_ClockConfig+0x274>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e0a5      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d56:	4b57      	ldr	r3, [pc, #348]	; (8001eb4 <HAL_RCC_ClockConfig+0x278>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d1ef      	bne.n	8001d42 <HAL_RCC_ClockConfig+0x106>
 8001d62:	e03a      	b.n	8001dda <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d111      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d6c:	e009      	b.n	8001d82 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6e:	f7fe fe7b 	bl	8000a68 <HAL_GetTick>
 8001d72:	0002      	movs	r2, r0
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	4a4d      	ldr	r2, [pc, #308]	; (8001eb0 <HAL_RCC_ClockConfig+0x274>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e08f      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d82:	4b4c      	ldr	r3, [pc, #304]	; (8001eb4 <HAL_RCC_ClockConfig+0x278>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	220c      	movs	r2, #12
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d1ef      	bne.n	8001d6e <HAL_RCC_ClockConfig+0x132>
 8001d8e:	e024      	b.n	8001dda <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d11b      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d98:	e009      	b.n	8001dae <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9a:	f7fe fe65 	bl	8000a68 <HAL_GetTick>
 8001d9e:	0002      	movs	r2, r0
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	4a42      	ldr	r2, [pc, #264]	; (8001eb0 <HAL_RCC_ClockConfig+0x274>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e079      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dae:	4b41      	ldr	r3, [pc, #260]	; (8001eb4 <HAL_RCC_ClockConfig+0x278>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	220c      	movs	r2, #12
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d1ef      	bne.n	8001d9a <HAL_RCC_ClockConfig+0x15e>
 8001dba:	e00e      	b.n	8001dda <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dbc:	f7fe fe54 	bl	8000a68 <HAL_GetTick>
 8001dc0:	0002      	movs	r2, r0
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	4a3a      	ldr	r2, [pc, #232]	; (8001eb0 <HAL_RCC_ClockConfig+0x274>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e068      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001dd0:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <HAL_RCC_ClockConfig+0x278>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	220c      	movs	r2, #12
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dda:	4b34      	ldr	r3, [pc, #208]	; (8001eac <HAL_RCC_ClockConfig+0x270>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2201      	movs	r2, #1
 8001de0:	4013      	ands	r3, r2
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d21e      	bcs.n	8001e26 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de8:	4b30      	ldr	r3, [pc, #192]	; (8001eac <HAL_RCC_ClockConfig+0x270>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2201      	movs	r2, #1
 8001dee:	4393      	bics	r3, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	4b2e      	ldr	r3, [pc, #184]	; (8001eac <HAL_RCC_ClockConfig+0x270>)
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dfa:	f7fe fe35 	bl	8000a68 <HAL_GetTick>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	e009      	b.n	8001e18 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e04:	f7fe fe30 	bl	8000a68 <HAL_GetTick>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	4a28      	ldr	r2, [pc, #160]	; (8001eb0 <HAL_RCC_ClockConfig+0x274>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e044      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e18:	4b24      	ldr	r3, [pc, #144]	; (8001eac <HAL_RCC_ClockConfig+0x270>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4013      	ands	r3, r2
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d1ee      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d009      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e30:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_RCC_ClockConfig+0x278>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	4a20      	ldr	r2, [pc, #128]	; (8001eb8 <HAL_RCC_ClockConfig+0x27c>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	0019      	movs	r1, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <HAL_RCC_ClockConfig+0x278>)
 8001e40:	430a      	orrs	r2, r1
 8001e42:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2208      	movs	r2, #8
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d00a      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e4e:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <HAL_RCC_ClockConfig+0x278>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	4a1a      	ldr	r2, [pc, #104]	; (8001ebc <HAL_RCC_ClockConfig+0x280>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	0019      	movs	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	00da      	lsls	r2, r3, #3
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_RCC_ClockConfig+0x278>)
 8001e60:	430a      	orrs	r2, r1
 8001e62:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e64:	f000 f832 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e68:	0001      	movs	r1, r0
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_RCC_ClockConfig+0x278>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	220f      	movs	r2, #15
 8001e72:	4013      	ands	r3, r2
 8001e74:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <HAL_RCC_ClockConfig+0x284>)
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	000a      	movs	r2, r1
 8001e7a:	40da      	lsrs	r2, r3
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_RCC_ClockConfig+0x288>)
 8001e7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_RCC_ClockConfig+0x28c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	250b      	movs	r5, #11
 8001e86:	197c      	adds	r4, r7, r5
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f7fe fda7 	bl	80009dc <HAL_InitTick>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001e92:	197b      	adds	r3, r7, r5
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001e9a:	197b      	adds	r3, r7, r5
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	e000      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b004      	add	sp, #16
 8001ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	40022000 	.word	0x40022000
 8001eb0:	00001388 	.word	0x00001388
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	fffff8ff 	.word	0xfffff8ff
 8001ebc:	ffffc7ff 	.word	0xffffc7ff
 8001ec0:	08002f54 	.word	0x08002f54
 8001ec4:	20000028 	.word	0x20000028
 8001ec8:	2000002c 	.word	0x2000002c

08001ecc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	b5b0      	push	{r4, r5, r7, lr}
 8001ece:	b08e      	sub	sp, #56	; 0x38
 8001ed0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001ed2:	4b4c      	ldr	r3, [pc, #304]	; (8002004 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eda:	230c      	movs	r3, #12
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b0c      	cmp	r3, #12
 8001ee0:	d014      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x40>
 8001ee2:	d900      	bls.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x1a>
 8001ee4:	e07b      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0x112>
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d002      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x24>
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d00b      	beq.n	8001f06 <HAL_RCC_GetSysClockFreq+0x3a>
 8001eee:	e076      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ef0:	4b44      	ldr	r3, [pc, #272]	; (8002004 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2210      	movs	r2, #16
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d002      	beq.n	8001f00 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001efa:	4b43      	ldr	r3, [pc, #268]	; (8002008 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001efc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001efe:	e07c      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001f00:	4b42      	ldr	r3, [pc, #264]	; (800200c <HAL_RCC_GetSysClockFreq+0x140>)
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f04:	e079      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f06:	4b42      	ldr	r3, [pc, #264]	; (8002010 <HAL_RCC_GetSysClockFreq+0x144>)
 8001f08:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f0a:	e076      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0e:	0c9a      	lsrs	r2, r3, #18
 8001f10:	230f      	movs	r3, #15
 8001f12:	401a      	ands	r2, r3
 8001f14:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <HAL_RCC_GetSysClockFreq+0x148>)
 8001f16:	5c9b      	ldrb	r3, [r3, r2]
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1c:	0d9a      	lsrs	r2, r3, #22
 8001f1e:	2303      	movs	r3, #3
 8001f20:	4013      	ands	r3, r2
 8001f22:	3301      	adds	r3, #1
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f26:	4b37      	ldr	r3, [pc, #220]	; (8002004 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	025b      	lsls	r3, r3, #9
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d01a      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	4a35      	ldr	r2, [pc, #212]	; (8002010 <HAL_RCC_GetSysClockFreq+0x144>)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	69b8      	ldr	r0, [r7, #24]
 8001f40:	69f9      	ldr	r1, [r7, #28]
 8001f42:	f7fe f98d 	bl	8000260 <__aeabi_lmul>
 8001f46:	0002      	movs	r2, r0
 8001f48:	000b      	movs	r3, r1
 8001f4a:	0010      	movs	r0, r2
 8001f4c:	0019      	movs	r1, r3
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f7fe f961 	bl	8000220 <__aeabi_uldivmod>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	000b      	movs	r3, r1
 8001f62:	0013      	movs	r3, r2
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
 8001f66:	e037      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f68:	4b26      	ldr	r3, [pc, #152]	; (8002004 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2210      	movs	r2, #16
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d01a      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4a23      	ldr	r2, [pc, #140]	; (8002008 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	68b8      	ldr	r0, [r7, #8]
 8001f80:	68f9      	ldr	r1, [r7, #12]
 8001f82:	f7fe f96d 	bl	8000260 <__aeabi_lmul>
 8001f86:	0002      	movs	r2, r0
 8001f88:	000b      	movs	r3, r1
 8001f8a:	0010      	movs	r0, r2
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f7fe f941 	bl	8000220 <__aeabi_uldivmod>
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	000b      	movs	r3, r1
 8001fa2:	0013      	movs	r3, r2
 8001fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8001fa6:	e017      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001faa:	0018      	movs	r0, r3
 8001fac:	2300      	movs	r3, #0
 8001fae:	0019      	movs	r1, r3
 8001fb0:	4a16      	ldr	r2, [pc, #88]	; (800200c <HAL_RCC_GetSysClockFreq+0x140>)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f7fe f954 	bl	8000260 <__aeabi_lmul>
 8001fb8:	0002      	movs	r2, r0
 8001fba:	000b      	movs	r3, r1
 8001fbc:	0010      	movs	r0, r2
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	001c      	movs	r4, r3
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	001d      	movs	r5, r3
 8001fc8:	0022      	movs	r2, r4
 8001fca:	002b      	movs	r3, r5
 8001fcc:	f7fe f928 	bl	8000220 <__aeabi_uldivmod>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	000b      	movs	r3, r1
 8001fd4:	0013      	movs	r3, r2
 8001fd6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fda:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fdc:	e00d      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	0b5b      	lsrs	r3, r3, #13
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	3301      	adds	r3, #1
 8001fee:	2280      	movs	r2, #128	; 0x80
 8001ff0:	0212      	lsls	r2, r2, #8
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	0013      	movs	r3, r2
 8001ff6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ff8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b00e      	add	sp, #56	; 0x38
 8002002:	bdb0      	pop	{r4, r5, r7, pc}
 8002004:	40021000 	.word	0x40021000
 8002008:	003d0900 	.word	0x003d0900
 800200c:	00f42400 	.word	0x00f42400
 8002010:	007a1200 	.word	0x007a1200
 8002014:	08002f6c 	.word	0x08002f6c

08002018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800201c:	4b02      	ldr	r3, [pc, #8]	; (8002028 <HAL_RCC_GetHCLKFreq+0x10>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	0018      	movs	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	20000028 	.word	0x20000028

0800202c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002030:	f7ff fff2 	bl	8002018 <HAL_RCC_GetHCLKFreq>
 8002034:	0001      	movs	r1, r0
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	2207      	movs	r2, #7
 800203e:	4013      	ands	r3, r2
 8002040:	4a04      	ldr	r2, [pc, #16]	; (8002054 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
 8002044:	40d9      	lsrs	r1, r3
 8002046:	000b      	movs	r3, r1
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	40021000 	.word	0x40021000
 8002054:	08002f64 	.word	0x08002f64

08002058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800205c:	f7ff ffdc 	bl	8002018 <HAL_RCC_GetHCLKFreq>
 8002060:	0001      	movs	r1, r0
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	0adb      	lsrs	r3, r3, #11
 8002068:	2207      	movs	r2, #7
 800206a:	4013      	ands	r3, r2
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <HAL_RCC_GetPCLK2Freq+0x28>)
 800206e:	5cd3      	ldrb	r3, [r2, r3]
 8002070:	40d9      	lsrs	r1, r3
 8002072:	000b      	movs	r3, r1
}
 8002074:	0018      	movs	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	40021000 	.word	0x40021000
 8002080:	08002f64 	.word	0x08002f64

08002084 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800208c:	2317      	movs	r3, #23
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2220      	movs	r2, #32
 800209a:	4013      	ands	r3, r2
 800209c:	d106      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	4013      	ands	r3, r2
 80020a8:	d100      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x28>
 80020aa:	e104      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ac:	4bb1      	ldr	r3, [pc, #708]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	055b      	lsls	r3, r3, #21
 80020b4:	4013      	ands	r3, r2
 80020b6:	d10a      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b8:	4bae      	ldr	r3, [pc, #696]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020bc:	4bad      	ldr	r3, [pc, #692]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020be:	2180      	movs	r1, #128	; 0x80
 80020c0:	0549      	lsls	r1, r1, #21
 80020c2:	430a      	orrs	r2, r1
 80020c4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80020c6:	2317      	movs	r3, #23
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ce:	4baa      	ldr	r3, [pc, #680]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4013      	ands	r3, r2
 80020d8:	d11a      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020da:	4ba7      	ldr	r3, [pc, #668]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4ba6      	ldr	r3, [pc, #664]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80020e0:	2180      	movs	r1, #128	; 0x80
 80020e2:	0049      	lsls	r1, r1, #1
 80020e4:	430a      	orrs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020e8:	f7fe fcbe 	bl	8000a68 <HAL_GetTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	e008      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f2:	f7fe fcb9 	bl	8000a68 <HAL_GetTick>
 80020f6:	0002      	movs	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b64      	cmp	r3, #100	; 0x64
 80020fe:	d901      	bls.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e133      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	4b9c      	ldr	r3, [pc, #624]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4013      	ands	r3, r2
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002110:	4b98      	ldr	r3, [pc, #608]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	23c0      	movs	r3, #192	; 0xc0
 8002116:	039b      	lsls	r3, r3, #14
 8002118:	4013      	ands	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	23c0      	movs	r3, #192	; 0xc0
 8002122:	039b      	lsls	r3, r3, #14
 8002124:	4013      	ands	r3, r2
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	429a      	cmp	r2, r3
 800212a:	d107      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	23c0      	movs	r3, #192	; 0xc0
 8002132:	039b      	lsls	r3, r3, #14
 8002134:	4013      	ands	r3, r2
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	429a      	cmp	r2, r3
 800213a:	d013      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	23c0      	movs	r3, #192	; 0xc0
 8002142:	029b      	lsls	r3, r3, #10
 8002144:	401a      	ands	r2, r3
 8002146:	23c0      	movs	r3, #192	; 0xc0
 8002148:	029b      	lsls	r3, r3, #10
 800214a:	429a      	cmp	r2, r3
 800214c:	d10a      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800214e:	4b89      	ldr	r3, [pc, #548]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	029b      	lsls	r3, r3, #10
 8002156:	401a      	ands	r2, r3
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	029b      	lsls	r3, r3, #10
 800215c:	429a      	cmp	r2, r3
 800215e:	d101      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e103      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002164:	4b83      	ldr	r3, [pc, #524]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002166:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002168:	23c0      	movs	r3, #192	; 0xc0
 800216a:	029b      	lsls	r3, r3, #10
 800216c:	4013      	ands	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d049      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	23c0      	movs	r3, #192	; 0xc0
 800217c:	029b      	lsls	r3, r3, #10
 800217e:	4013      	ands	r3, r2
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	429a      	cmp	r2, r3
 8002184:	d004      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2220      	movs	r2, #32
 800218c:	4013      	ands	r3, r2
 800218e:	d10d      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	23c0      	movs	r3, #192	; 0xc0
 8002196:	029b      	lsls	r3, r3, #10
 8002198:	4013      	ands	r3, r2
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	429a      	cmp	r2, r3
 800219e:	d034      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	4013      	ands	r3, r2
 80021aa:	d02e      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80021ac:	4b71      	ldr	r3, [pc, #452]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b0:	4a72      	ldr	r2, [pc, #456]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021b6:	4b6f      	ldr	r3, [pc, #444]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ba:	4b6e      	ldr	r3, [pc, #440]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	0309      	lsls	r1, r1, #12
 80021c0:	430a      	orrs	r2, r1
 80021c2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021c4:	4b6b      	ldr	r3, [pc, #428]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021c8:	4b6a      	ldr	r3, [pc, #424]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021ca:	496d      	ldr	r1, [pc, #436]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80021cc:	400a      	ands	r2, r1
 80021ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80021d0:	4b68      	ldr	r3, [pc, #416]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4013      	ands	r3, r2
 80021de:	d014      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7fe fc42 	bl	8000a68 <HAL_GetTick>
 80021e4:	0003      	movs	r3, r0
 80021e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021e8:	e009      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ea:	f7fe fc3d 	bl	8000a68 <HAL_GetTick>
 80021ee:	0002      	movs	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	4a63      	ldr	r2, [pc, #396]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d901      	bls.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e0b6      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021fe:	4b5d      	ldr	r3, [pc, #372]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002200:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4013      	ands	r3, r2
 8002208:	d0ef      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	4013      	ands	r3, r2
 8002214:	d01f      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	23c0      	movs	r3, #192	; 0xc0
 800221c:	029b      	lsls	r3, r3, #10
 800221e:	401a      	ands	r2, r3
 8002220:	23c0      	movs	r3, #192	; 0xc0
 8002222:	029b      	lsls	r3, r3, #10
 8002224:	429a      	cmp	r2, r3
 8002226:	d10c      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002228:	4b52      	ldr	r3, [pc, #328]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a56      	ldr	r2, [pc, #344]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800222e:	4013      	ands	r3, r2
 8002230:	0019      	movs	r1, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	23c0      	movs	r3, #192	; 0xc0
 8002238:	039b      	lsls	r3, r3, #14
 800223a:	401a      	ands	r2, r3
 800223c:	4b4d      	ldr	r3, [pc, #308]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800223e:	430a      	orrs	r2, r1
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	4b4c      	ldr	r3, [pc, #304]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002244:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	23c0      	movs	r3, #192	; 0xc0
 800224c:	029b      	lsls	r3, r3, #10
 800224e:	401a      	ands	r2, r3
 8002250:	4b48      	ldr	r3, [pc, #288]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002252:	430a      	orrs	r2, r1
 8002254:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2220      	movs	r2, #32
 800225c:	4013      	ands	r3, r2
 800225e:	d01f      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	23c0      	movs	r3, #192	; 0xc0
 8002266:	029b      	lsls	r3, r3, #10
 8002268:	401a      	ands	r2, r3
 800226a:	23c0      	movs	r3, #192	; 0xc0
 800226c:	029b      	lsls	r3, r3, #10
 800226e:	429a      	cmp	r2, r3
 8002270:	d10c      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002272:	4b40      	ldr	r3, [pc, #256]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a44      	ldr	r2, [pc, #272]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002278:	4013      	ands	r3, r2
 800227a:	0019      	movs	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	23c0      	movs	r3, #192	; 0xc0
 8002282:	039b      	lsls	r3, r3, #14
 8002284:	401a      	ands	r2, r3
 8002286:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	4b39      	ldr	r3, [pc, #228]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800228e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	23c0      	movs	r3, #192	; 0xc0
 8002296:	029b      	lsls	r3, r3, #10
 8002298:	401a      	ands	r2, r3
 800229a:	4b36      	ldr	r3, [pc, #216]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800229c:	430a      	orrs	r2, r1
 800229e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022a0:	2317      	movs	r3, #23
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d105      	bne.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022aa:	4b32      	ldr	r3, [pc, #200]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ae:	4b31      	ldr	r3, [pc, #196]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022b0:	4936      	ldr	r1, [pc, #216]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022b2:	400a      	ands	r2, r1
 80022b4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2201      	movs	r2, #1
 80022bc:	4013      	ands	r3, r2
 80022be:	d009      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022c0:	4b2c      	ldr	r3, [pc, #176]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c4:	2203      	movs	r2, #3
 80022c6:	4393      	bics	r3, r2
 80022c8:	0019      	movs	r1, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	4b29      	ldr	r3, [pc, #164]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022d0:	430a      	orrs	r2, r1
 80022d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2202      	movs	r2, #2
 80022da:	4013      	ands	r3, r2
 80022dc:	d009      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022de:	4b25      	ldr	r3, [pc, #148]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	220c      	movs	r2, #12
 80022e4:	4393      	bics	r3, r2
 80022e6:	0019      	movs	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022ee:	430a      	orrs	r2, r1
 80022f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2204      	movs	r2, #4
 80022f8:	4013      	ands	r3, r2
 80022fa:	d009      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002300:	4a23      	ldr	r2, [pc, #140]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8002302:	4013      	ands	r3, r2
 8002304:	0019      	movs	r1, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800230c:	430a      	orrs	r2, r1
 800230e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2208      	movs	r2, #8
 8002316:	4013      	ands	r3, r2
 8002318:	d009      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800231a:	4b16      	ldr	r3, [pc, #88]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231e:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002320:	4013      	ands	r3, r2
 8002322:	0019      	movs	r1, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699a      	ldr	r2, [r3, #24]
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800232a:	430a      	orrs	r2, r1
 800232c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2240      	movs	r2, #64	; 0x40
 8002334:	4013      	ands	r3, r2
 8002336:	d009      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800233a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233c:	4a16      	ldr	r2, [pc, #88]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800233e:	4013      	ands	r3, r2
 8002340:	0019      	movs	r1, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1a      	ldr	r2, [r3, #32]
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002348:	430a      	orrs	r2, r1
 800234a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2280      	movs	r2, #128	; 0x80
 8002352:	4013      	ands	r3, r2
 8002354:	d009      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235a:	4a10      	ldr	r2, [pc, #64]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800235c:	4013      	ands	r3, r2
 800235e:	0019      	movs	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69da      	ldr	r2, [r3, #28]
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002366:	430a      	orrs	r2, r1
 8002368:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	b006      	add	sp, #24
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	40007000 	.word	0x40007000
 800237c:	fffcffff 	.word	0xfffcffff
 8002380:	fff7ffff 	.word	0xfff7ffff
 8002384:	00001388 	.word	0x00001388
 8002388:	ffcfffff 	.word	0xffcfffff
 800238c:	efffffff 	.word	0xefffffff
 8002390:	fffff3ff 	.word	0xfffff3ff
 8002394:	ffffcfff 	.word	0xffffcfff
 8002398:	fbffffff 	.word	0xfbffffff
 800239c:	fff3ffff 	.word	0xfff3ffff

080023a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e044      	b.n	800243c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d107      	bne.n	80023ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2278      	movs	r2, #120	; 0x78
 80023be:	2100      	movs	r1, #0
 80023c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f7fe fa5f 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2224      	movs	r2, #36	; 0x24
 80023ce:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2101      	movs	r1, #1
 80023dc:	438a      	bics	r2, r1
 80023de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	0018      	movs	r0, r3
 80023e4:	f000 f8d0 	bl	8002588 <UART_SetConfig>
 80023e8:	0003      	movs	r3, r0
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e024      	b.n	800243c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f000 fb47 	bl	8002a90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	490d      	ldr	r1, [pc, #52]	; (8002444 <HAL_UART_Init+0xa4>)
 800240e:	400a      	ands	r2, r1
 8002410:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	212a      	movs	r1, #42	; 0x2a
 800241e:	438a      	bics	r2, r1
 8002420:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2101      	movs	r1, #1
 800242e:	430a      	orrs	r2, r1
 8002430:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	0018      	movs	r0, r3
 8002436:	f000 fbdf 	bl	8002bf8 <UART_CheckIdleState>
 800243a:	0003      	movs	r3, r0
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	b002      	add	sp, #8
 8002442:	bd80      	pop	{r7, pc}
 8002444:	ffffb7ff 	.word	0xffffb7ff

08002448 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	1dbb      	adds	r3, r7, #6
 8002456:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800245c:	2b20      	cmp	r3, #32
 800245e:	d000      	beq.n	8002462 <HAL_UART_Transmit+0x1a>
 8002460:	e08c      	b.n	800257c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_UART_Transmit+0x28>
 8002468:	1dbb      	adds	r3, r7, #6
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e084      	b.n	800257e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	015b      	lsls	r3, r3, #5
 800247c:	429a      	cmp	r2, r3
 800247e:	d109      	bne.n	8002494 <HAL_UART_Transmit+0x4c>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2201      	movs	r2, #1
 800248c:	4013      	ands	r3, r2
 800248e:	d001      	beq.n	8002494 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e074      	b.n	800257e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2284      	movs	r2, #132	; 0x84
 8002498:	2100      	movs	r1, #0
 800249a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2221      	movs	r2, #33	; 0x21
 80024a0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024a2:	f7fe fae1 	bl	8000a68 <HAL_GetTick>
 80024a6:	0003      	movs	r3, r0
 80024a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1dba      	adds	r2, r7, #6
 80024ae:	2150      	movs	r1, #80	; 0x50
 80024b0:	8812      	ldrh	r2, [r2, #0]
 80024b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1dba      	adds	r2, r7, #6
 80024b8:	2152      	movs	r1, #82	; 0x52
 80024ba:	8812      	ldrh	r2, [r2, #0]
 80024bc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	015b      	lsls	r3, r3, #5
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d108      	bne.n	80024dc <HAL_UART_Transmit+0x94>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d104      	bne.n	80024dc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	e003      	b.n	80024e4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024e4:	e02f      	b.n	8002546 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	0013      	movs	r3, r2
 80024f0:	2200      	movs	r2, #0
 80024f2:	2180      	movs	r1, #128	; 0x80
 80024f4:	f000 fc28 	bl	8002d48 <UART_WaitOnFlagUntilTimeout>
 80024f8:	1e03      	subs	r3, r0, #0
 80024fa:	d004      	beq.n	8002506 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e03b      	b.n	800257e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10b      	bne.n	8002524 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	001a      	movs	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	05d2      	lsls	r2, r2, #23
 8002518:	0dd2      	lsrs	r2, r2, #23
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	3302      	adds	r3, #2
 8002520:	61bb      	str	r3, [r7, #24]
 8002522:	e007      	b.n	8002534 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	781a      	ldrb	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3301      	adds	r3, #1
 8002532:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2252      	movs	r2, #82	; 0x52
 8002538:	5a9b      	ldrh	r3, [r3, r2]
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b299      	uxth	r1, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2252      	movs	r2, #82	; 0x52
 8002544:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2252      	movs	r2, #82	; 0x52
 800254a:	5a9b      	ldrh	r3, [r3, r2]
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1c9      	bne.n	80024e6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	0013      	movs	r3, r2
 800255c:	2200      	movs	r2, #0
 800255e:	2140      	movs	r1, #64	; 0x40
 8002560:	f000 fbf2 	bl	8002d48 <UART_WaitOnFlagUntilTimeout>
 8002564:	1e03      	subs	r3, r0, #0
 8002566:	d004      	beq.n	8002572 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e005      	b.n	800257e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2220      	movs	r2, #32
 8002576:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800257c:	2302      	movs	r3, #2
  }
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b008      	add	sp, #32
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002588:	b5b0      	push	{r4, r5, r7, lr}
 800258a:	b08e      	sub	sp, #56	; 0x38
 800258c:	af00      	add	r7, sp, #0
 800258e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002590:	231a      	movs	r3, #26
 8002592:	2218      	movs	r2, #24
 8002594:	189b      	adds	r3, r3, r2
 8002596:	19db      	adds	r3, r3, r7
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4ac6      	ldr	r2, [pc, #792]	; (80028d4 <UART_SetConfig+0x34c>)
 80025bc:	4013      	ands	r3, r2
 80025be:	0019      	movs	r1, r3
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025c6:	430a      	orrs	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4ac1      	ldr	r2, [pc, #772]	; (80028d8 <UART_SetConfig+0x350>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	0019      	movs	r1, r3
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4abb      	ldr	r2, [pc, #748]	; (80028dc <UART_SetConfig+0x354>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d004      	beq.n	80025fc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025f8:	4313      	orrs	r3, r2
 80025fa:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	4ab7      	ldr	r2, [pc, #732]	; (80028e0 <UART_SetConfig+0x358>)
 8002604:	4013      	ands	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800260e:	430a      	orrs	r2, r1
 8002610:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4ab3      	ldr	r2, [pc, #716]	; (80028e4 <UART_SetConfig+0x35c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d131      	bne.n	8002680 <UART_SetConfig+0xf8>
 800261c:	4bb2      	ldr	r3, [pc, #712]	; (80028e8 <UART_SetConfig+0x360>)
 800261e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002620:	2203      	movs	r2, #3
 8002622:	4013      	ands	r3, r2
 8002624:	2b03      	cmp	r3, #3
 8002626:	d01d      	beq.n	8002664 <UART_SetConfig+0xdc>
 8002628:	d823      	bhi.n	8002672 <UART_SetConfig+0xea>
 800262a:	2b02      	cmp	r3, #2
 800262c:	d00c      	beq.n	8002648 <UART_SetConfig+0xc0>
 800262e:	d820      	bhi.n	8002672 <UART_SetConfig+0xea>
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <UART_SetConfig+0xb2>
 8002634:	2b01      	cmp	r3, #1
 8002636:	d00e      	beq.n	8002656 <UART_SetConfig+0xce>
 8002638:	e01b      	b.n	8002672 <UART_SetConfig+0xea>
 800263a:	231b      	movs	r3, #27
 800263c:	2218      	movs	r2, #24
 800263e:	189b      	adds	r3, r3, r2
 8002640:	19db      	adds	r3, r3, r7
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	e09c      	b.n	8002782 <UART_SetConfig+0x1fa>
 8002648:	231b      	movs	r3, #27
 800264a:	2218      	movs	r2, #24
 800264c:	189b      	adds	r3, r3, r2
 800264e:	19db      	adds	r3, r3, r7
 8002650:	2202      	movs	r2, #2
 8002652:	701a      	strb	r2, [r3, #0]
 8002654:	e095      	b.n	8002782 <UART_SetConfig+0x1fa>
 8002656:	231b      	movs	r3, #27
 8002658:	2218      	movs	r2, #24
 800265a:	189b      	adds	r3, r3, r2
 800265c:	19db      	adds	r3, r3, r7
 800265e:	2204      	movs	r2, #4
 8002660:	701a      	strb	r2, [r3, #0]
 8002662:	e08e      	b.n	8002782 <UART_SetConfig+0x1fa>
 8002664:	231b      	movs	r3, #27
 8002666:	2218      	movs	r2, #24
 8002668:	189b      	adds	r3, r3, r2
 800266a:	19db      	adds	r3, r3, r7
 800266c:	2208      	movs	r2, #8
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	e087      	b.n	8002782 <UART_SetConfig+0x1fa>
 8002672:	231b      	movs	r3, #27
 8002674:	2218      	movs	r2, #24
 8002676:	189b      	adds	r3, r3, r2
 8002678:	19db      	adds	r3, r3, r7
 800267a:	2210      	movs	r2, #16
 800267c:	701a      	strb	r2, [r3, #0]
 800267e:	e080      	b.n	8002782 <UART_SetConfig+0x1fa>
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a99      	ldr	r2, [pc, #612]	; (80028ec <UART_SetConfig+0x364>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d131      	bne.n	80026ee <UART_SetConfig+0x166>
 800268a:	4b97      	ldr	r3, [pc, #604]	; (80028e8 <UART_SetConfig+0x360>)
 800268c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268e:	220c      	movs	r2, #12
 8002690:	4013      	ands	r3, r2
 8002692:	2b0c      	cmp	r3, #12
 8002694:	d01d      	beq.n	80026d2 <UART_SetConfig+0x14a>
 8002696:	d823      	bhi.n	80026e0 <UART_SetConfig+0x158>
 8002698:	2b08      	cmp	r3, #8
 800269a:	d00c      	beq.n	80026b6 <UART_SetConfig+0x12e>
 800269c:	d820      	bhi.n	80026e0 <UART_SetConfig+0x158>
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <UART_SetConfig+0x120>
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d00e      	beq.n	80026c4 <UART_SetConfig+0x13c>
 80026a6:	e01b      	b.n	80026e0 <UART_SetConfig+0x158>
 80026a8:	231b      	movs	r3, #27
 80026aa:	2218      	movs	r2, #24
 80026ac:	189b      	adds	r3, r3, r2
 80026ae:	19db      	adds	r3, r3, r7
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
 80026b4:	e065      	b.n	8002782 <UART_SetConfig+0x1fa>
 80026b6:	231b      	movs	r3, #27
 80026b8:	2218      	movs	r2, #24
 80026ba:	189b      	adds	r3, r3, r2
 80026bc:	19db      	adds	r3, r3, r7
 80026be:	2202      	movs	r2, #2
 80026c0:	701a      	strb	r2, [r3, #0]
 80026c2:	e05e      	b.n	8002782 <UART_SetConfig+0x1fa>
 80026c4:	231b      	movs	r3, #27
 80026c6:	2218      	movs	r2, #24
 80026c8:	189b      	adds	r3, r3, r2
 80026ca:	19db      	adds	r3, r3, r7
 80026cc:	2204      	movs	r2, #4
 80026ce:	701a      	strb	r2, [r3, #0]
 80026d0:	e057      	b.n	8002782 <UART_SetConfig+0x1fa>
 80026d2:	231b      	movs	r3, #27
 80026d4:	2218      	movs	r2, #24
 80026d6:	189b      	adds	r3, r3, r2
 80026d8:	19db      	adds	r3, r3, r7
 80026da:	2208      	movs	r2, #8
 80026dc:	701a      	strb	r2, [r3, #0]
 80026de:	e050      	b.n	8002782 <UART_SetConfig+0x1fa>
 80026e0:	231b      	movs	r3, #27
 80026e2:	2218      	movs	r2, #24
 80026e4:	189b      	adds	r3, r3, r2
 80026e6:	19db      	adds	r3, r3, r7
 80026e8:	2210      	movs	r2, #16
 80026ea:	701a      	strb	r2, [r3, #0]
 80026ec:	e049      	b.n	8002782 <UART_SetConfig+0x1fa>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a7a      	ldr	r2, [pc, #488]	; (80028dc <UART_SetConfig+0x354>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d13e      	bne.n	8002776 <UART_SetConfig+0x1ee>
 80026f8:	4b7b      	ldr	r3, [pc, #492]	; (80028e8 <UART_SetConfig+0x360>)
 80026fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026fc:	23c0      	movs	r3, #192	; 0xc0
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	4013      	ands	r3, r2
 8002702:	22c0      	movs	r2, #192	; 0xc0
 8002704:	0112      	lsls	r2, r2, #4
 8002706:	4293      	cmp	r3, r2
 8002708:	d027      	beq.n	800275a <UART_SetConfig+0x1d2>
 800270a:	22c0      	movs	r2, #192	; 0xc0
 800270c:	0112      	lsls	r2, r2, #4
 800270e:	4293      	cmp	r3, r2
 8002710:	d82a      	bhi.n	8002768 <UART_SetConfig+0x1e0>
 8002712:	2280      	movs	r2, #128	; 0x80
 8002714:	0112      	lsls	r2, r2, #4
 8002716:	4293      	cmp	r3, r2
 8002718:	d011      	beq.n	800273e <UART_SetConfig+0x1b6>
 800271a:	2280      	movs	r2, #128	; 0x80
 800271c:	0112      	lsls	r2, r2, #4
 800271e:	4293      	cmp	r3, r2
 8002720:	d822      	bhi.n	8002768 <UART_SetConfig+0x1e0>
 8002722:	2b00      	cmp	r3, #0
 8002724:	d004      	beq.n	8002730 <UART_SetConfig+0x1a8>
 8002726:	2280      	movs	r2, #128	; 0x80
 8002728:	00d2      	lsls	r2, r2, #3
 800272a:	4293      	cmp	r3, r2
 800272c:	d00e      	beq.n	800274c <UART_SetConfig+0x1c4>
 800272e:	e01b      	b.n	8002768 <UART_SetConfig+0x1e0>
 8002730:	231b      	movs	r3, #27
 8002732:	2218      	movs	r2, #24
 8002734:	189b      	adds	r3, r3, r2
 8002736:	19db      	adds	r3, r3, r7
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
 800273c:	e021      	b.n	8002782 <UART_SetConfig+0x1fa>
 800273e:	231b      	movs	r3, #27
 8002740:	2218      	movs	r2, #24
 8002742:	189b      	adds	r3, r3, r2
 8002744:	19db      	adds	r3, r3, r7
 8002746:	2202      	movs	r2, #2
 8002748:	701a      	strb	r2, [r3, #0]
 800274a:	e01a      	b.n	8002782 <UART_SetConfig+0x1fa>
 800274c:	231b      	movs	r3, #27
 800274e:	2218      	movs	r2, #24
 8002750:	189b      	adds	r3, r3, r2
 8002752:	19db      	adds	r3, r3, r7
 8002754:	2204      	movs	r2, #4
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	e013      	b.n	8002782 <UART_SetConfig+0x1fa>
 800275a:	231b      	movs	r3, #27
 800275c:	2218      	movs	r2, #24
 800275e:	189b      	adds	r3, r3, r2
 8002760:	19db      	adds	r3, r3, r7
 8002762:	2208      	movs	r2, #8
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	e00c      	b.n	8002782 <UART_SetConfig+0x1fa>
 8002768:	231b      	movs	r3, #27
 800276a:	2218      	movs	r2, #24
 800276c:	189b      	adds	r3, r3, r2
 800276e:	19db      	adds	r3, r3, r7
 8002770:	2210      	movs	r2, #16
 8002772:	701a      	strb	r2, [r3, #0]
 8002774:	e005      	b.n	8002782 <UART_SetConfig+0x1fa>
 8002776:	231b      	movs	r3, #27
 8002778:	2218      	movs	r2, #24
 800277a:	189b      	adds	r3, r3, r2
 800277c:	19db      	adds	r3, r3, r7
 800277e:	2210      	movs	r2, #16
 8002780:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a55      	ldr	r2, [pc, #340]	; (80028dc <UART_SetConfig+0x354>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d000      	beq.n	800278e <UART_SetConfig+0x206>
 800278c:	e084      	b.n	8002898 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800278e:	231b      	movs	r3, #27
 8002790:	2218      	movs	r2, #24
 8002792:	189b      	adds	r3, r3, r2
 8002794:	19db      	adds	r3, r3, r7
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b08      	cmp	r3, #8
 800279a:	d01d      	beq.n	80027d8 <UART_SetConfig+0x250>
 800279c:	dc20      	bgt.n	80027e0 <UART_SetConfig+0x258>
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d015      	beq.n	80027ce <UART_SetConfig+0x246>
 80027a2:	dc1d      	bgt.n	80027e0 <UART_SetConfig+0x258>
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <UART_SetConfig+0x226>
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d005      	beq.n	80027b8 <UART_SetConfig+0x230>
 80027ac:	e018      	b.n	80027e0 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027ae:	f7ff fc3d 	bl	800202c <HAL_RCC_GetPCLK1Freq>
 80027b2:	0003      	movs	r3, r0
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027b6:	e01c      	b.n	80027f2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027b8:	4b4b      	ldr	r3, [pc, #300]	; (80028e8 <UART_SetConfig+0x360>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2210      	movs	r2, #16
 80027be:	4013      	ands	r3, r2
 80027c0:	d002      	beq.n	80027c8 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80027c2:	4b4b      	ldr	r3, [pc, #300]	; (80028f0 <UART_SetConfig+0x368>)
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80027c6:	e014      	b.n	80027f2 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80027c8:	4b4a      	ldr	r3, [pc, #296]	; (80028f4 <UART_SetConfig+0x36c>)
 80027ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027cc:	e011      	b.n	80027f2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027ce:	f7ff fb7d 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 80027d2:	0003      	movs	r3, r0
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027d6:	e00c      	b.n	80027f2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027de:	e008      	b.n	80027f2 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80027e4:	231a      	movs	r3, #26
 80027e6:	2218      	movs	r2, #24
 80027e8:	189b      	adds	r3, r3, r2
 80027ea:	19db      	adds	r3, r3, r7
 80027ec:	2201      	movs	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]
        break;
 80027f0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d100      	bne.n	80027fa <UART_SetConfig+0x272>
 80027f8:	e132      	b.n	8002a60 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	0013      	movs	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	189b      	adds	r3, r3, r2
 8002804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002806:	429a      	cmp	r2, r3
 8002808:	d305      	bcc.n	8002816 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002812:	429a      	cmp	r2, r3
 8002814:	d906      	bls.n	8002824 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002816:	231a      	movs	r3, #26
 8002818:	2218      	movs	r2, #24
 800281a:	189b      	adds	r3, r3, r2
 800281c:	19db      	adds	r3, r3, r7
 800281e:	2201      	movs	r2, #1
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	e11d      	b.n	8002a60 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	6939      	ldr	r1, [r7, #16]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	000b      	movs	r3, r1
 8002832:	0e1b      	lsrs	r3, r3, #24
 8002834:	0010      	movs	r0, r2
 8002836:	0205      	lsls	r5, r0, #8
 8002838:	431d      	orrs	r5, r3
 800283a:	000b      	movs	r3, r1
 800283c:	021c      	lsls	r4, r3, #8
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	085b      	lsrs	r3, r3, #1
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	68b8      	ldr	r0, [r7, #8]
 800284c:	68f9      	ldr	r1, [r7, #12]
 800284e:	1900      	adds	r0, r0, r4
 8002850:	4169      	adcs	r1, r5
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	2300      	movs	r3, #0
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f7fd fcde 	bl	8000220 <__aeabi_uldivmod>
 8002864:	0002      	movs	r2, r0
 8002866:	000b      	movs	r3, r1
 8002868:	0013      	movs	r3, r2
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800286c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800286e:	23c0      	movs	r3, #192	; 0xc0
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	429a      	cmp	r2, r3
 8002874:	d309      	bcc.n	800288a <UART_SetConfig+0x302>
 8002876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	035b      	lsls	r3, r3, #13
 800287c:	429a      	cmp	r2, r3
 800287e:	d204      	bcs.n	800288a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002886:	60da      	str	r2, [r3, #12]
 8002888:	e0ea      	b.n	8002a60 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 800288a:	231a      	movs	r3, #26
 800288c:	2218      	movs	r2, #24
 800288e:	189b      	adds	r3, r3, r2
 8002890:	19db      	adds	r3, r3, r7
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]
 8002896:	e0e3      	b.n	8002a60 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	69da      	ldr	r2, [r3, #28]
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d000      	beq.n	80028a6 <UART_SetConfig+0x31e>
 80028a4:	e085      	b.n	80029b2 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80028a6:	231b      	movs	r3, #27
 80028a8:	2218      	movs	r2, #24
 80028aa:	189b      	adds	r3, r3, r2
 80028ac:	19db      	adds	r3, r3, r7
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d837      	bhi.n	8002924 <UART_SetConfig+0x39c>
 80028b4:	009a      	lsls	r2, r3, #2
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <UART_SetConfig+0x370>)
 80028b8:	18d3      	adds	r3, r2, r3
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028be:	f7ff fbb5 	bl	800202c <HAL_RCC_GetPCLK1Freq>
 80028c2:	0003      	movs	r3, r0
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028c6:	e036      	b.n	8002936 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028c8:	f7ff fbc6 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 80028cc:	0003      	movs	r3, r0
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028d0:	e031      	b.n	8002936 <UART_SetConfig+0x3ae>
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	efff69f3 	.word	0xefff69f3
 80028d8:	ffffcfff 	.word	0xffffcfff
 80028dc:	40004800 	.word	0x40004800
 80028e0:	fffff4ff 	.word	0xfffff4ff
 80028e4:	40013800 	.word	0x40013800
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40004400 	.word	0x40004400
 80028f0:	003d0900 	.word	0x003d0900
 80028f4:	00f42400 	.word	0x00f42400
 80028f8:	08002f78 	.word	0x08002f78
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028fc:	4b60      	ldr	r3, [pc, #384]	; (8002a80 <UART_SetConfig+0x4f8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2210      	movs	r2, #16
 8002902:	4013      	ands	r3, r2
 8002904:	d002      	beq.n	800290c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002906:	4b5f      	ldr	r3, [pc, #380]	; (8002a84 <UART_SetConfig+0x4fc>)
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800290a:	e014      	b.n	8002936 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 800290c:	4b5e      	ldr	r3, [pc, #376]	; (8002a88 <UART_SetConfig+0x500>)
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002910:	e011      	b.n	8002936 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002912:	f7ff fadb 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8002916:	0003      	movs	r3, r0
 8002918:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800291a:	e00c      	b.n	8002936 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002922:	e008      	b.n	8002936 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002928:	231a      	movs	r3, #26
 800292a:	2218      	movs	r2, #24
 800292c:	189b      	adds	r3, r3, r2
 800292e:	19db      	adds	r3, r3, r7
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]
        break;
 8002934:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	2b00      	cmp	r3, #0
 800293a:	d100      	bne.n	800293e <UART_SetConfig+0x3b6>
 800293c:	e090      	b.n	8002a60 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002940:	005a      	lsls	r2, r3, #1
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	18d2      	adds	r2, r2, r3
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	0019      	movs	r1, r3
 8002950:	0010      	movs	r0, r2
 8002952:	f7fd fbd9 	bl	8000108 <__udivsi3>
 8002956:	0003      	movs	r3, r0
 8002958:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	2b0f      	cmp	r3, #15
 800295e:	d921      	bls.n	80029a4 <UART_SetConfig+0x41c>
 8002960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	025b      	lsls	r3, r3, #9
 8002966:	429a      	cmp	r2, r3
 8002968:	d21c      	bcs.n	80029a4 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800296a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296c:	b29a      	uxth	r2, r3
 800296e:	200e      	movs	r0, #14
 8002970:	2418      	movs	r4, #24
 8002972:	1903      	adds	r3, r0, r4
 8002974:	19db      	adds	r3, r3, r7
 8002976:	210f      	movs	r1, #15
 8002978:	438a      	bics	r2, r1
 800297a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	085b      	lsrs	r3, r3, #1
 8002980:	b29b      	uxth	r3, r3
 8002982:	2207      	movs	r2, #7
 8002984:	4013      	ands	r3, r2
 8002986:	b299      	uxth	r1, r3
 8002988:	1903      	adds	r3, r0, r4
 800298a:	19db      	adds	r3, r3, r7
 800298c:	1902      	adds	r2, r0, r4
 800298e:	19d2      	adds	r2, r2, r7
 8002990:	8812      	ldrh	r2, [r2, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	1902      	adds	r2, r0, r4
 800299c:	19d2      	adds	r2, r2, r7
 800299e:	8812      	ldrh	r2, [r2, #0]
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	e05d      	b.n	8002a60 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80029a4:	231a      	movs	r3, #26
 80029a6:	2218      	movs	r2, #24
 80029a8:	189b      	adds	r3, r3, r2
 80029aa:	19db      	adds	r3, r3, r7
 80029ac:	2201      	movs	r2, #1
 80029ae:	701a      	strb	r2, [r3, #0]
 80029b0:	e056      	b.n	8002a60 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029b2:	231b      	movs	r3, #27
 80029b4:	2218      	movs	r2, #24
 80029b6:	189b      	adds	r3, r3, r2
 80029b8:	19db      	adds	r3, r3, r7
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d822      	bhi.n	8002a06 <UART_SetConfig+0x47e>
 80029c0:	009a      	lsls	r2, r3, #2
 80029c2:	4b32      	ldr	r3, [pc, #200]	; (8002a8c <UART_SetConfig+0x504>)
 80029c4:	18d3      	adds	r3, r2, r3
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029ca:	f7ff fb2f 	bl	800202c <HAL_RCC_GetPCLK1Freq>
 80029ce:	0003      	movs	r3, r0
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029d2:	e021      	b.n	8002a18 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029d4:	f7ff fb40 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 80029d8:	0003      	movs	r3, r0
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029dc:	e01c      	b.n	8002a18 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029de:	4b28      	ldr	r3, [pc, #160]	; (8002a80 <UART_SetConfig+0x4f8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2210      	movs	r2, #16
 80029e4:	4013      	ands	r3, r2
 80029e6:	d002      	beq.n	80029ee <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80029e8:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <UART_SetConfig+0x4fc>)
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80029ec:	e014      	b.n	8002a18 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80029ee:	4b26      	ldr	r3, [pc, #152]	; (8002a88 <UART_SetConfig+0x500>)
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029f2:	e011      	b.n	8002a18 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029f4:	f7ff fa6a 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 80029f8:	0003      	movs	r3, r0
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029fc:	e00c      	b.n	8002a18 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029fe:	2380      	movs	r3, #128	; 0x80
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a04:	e008      	b.n	8002a18 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002a0a:	231a      	movs	r3, #26
 8002a0c:	2218      	movs	r2, #24
 8002a0e:	189b      	adds	r3, r3, r2
 8002a10:	19db      	adds	r3, r3, r7
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]
        break;
 8002a16:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d020      	beq.n	8002a60 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	085a      	lsrs	r2, r3, #1
 8002a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a26:	18d2      	adds	r2, r2, r3
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	0010      	movs	r0, r2
 8002a30:	f7fd fb6a 	bl	8000108 <__udivsi3>
 8002a34:	0003      	movs	r3, r0
 8002a36:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3a:	2b0f      	cmp	r3, #15
 8002a3c:	d90a      	bls.n	8002a54 <UART_SetConfig+0x4cc>
 8002a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	025b      	lsls	r3, r3, #9
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d205      	bcs.n	8002a54 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	e005      	b.n	8002a60 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002a54:	231a      	movs	r3, #26
 8002a56:	2218      	movs	r2, #24
 8002a58:	189b      	adds	r3, r3, r2
 8002a5a:	19db      	adds	r3, r3, r7
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	2200      	movs	r2, #0
 8002a64:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002a6c:	231a      	movs	r3, #26
 8002a6e:	2218      	movs	r2, #24
 8002a70:	189b      	adds	r3, r3, r2
 8002a72:	19db      	adds	r3, r3, r7
 8002a74:	781b      	ldrb	r3, [r3, #0]
}
 8002a76:	0018      	movs	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b00e      	add	sp, #56	; 0x38
 8002a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	40021000 	.word	0x40021000
 8002a84:	003d0900 	.word	0x003d0900
 8002a88:	00f42400 	.word	0x00f42400
 8002a8c:	08002f9c 	.word	0x08002f9c

08002a90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d00b      	beq.n	8002aba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a4a      	ldr	r2, [pc, #296]	; (8002bd4 <UART_AdvFeatureConfig+0x144>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	0019      	movs	r1, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	2202      	movs	r2, #2
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d00b      	beq.n	8002adc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4a43      	ldr	r2, [pc, #268]	; (8002bd8 <UART_AdvFeatureConfig+0x148>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	0019      	movs	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d00b      	beq.n	8002afe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4a3b      	ldr	r2, [pc, #236]	; (8002bdc <UART_AdvFeatureConfig+0x14c>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	0019      	movs	r1, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	2208      	movs	r2, #8
 8002b04:	4013      	ands	r3, r2
 8002b06:	d00b      	beq.n	8002b20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4a34      	ldr	r2, [pc, #208]	; (8002be0 <UART_AdvFeatureConfig+0x150>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	0019      	movs	r1, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	2210      	movs	r2, #16
 8002b26:	4013      	ands	r3, r2
 8002b28:	d00b      	beq.n	8002b42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4a2c      	ldr	r2, [pc, #176]	; (8002be4 <UART_AdvFeatureConfig+0x154>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	0019      	movs	r1, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	2220      	movs	r2, #32
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d00b      	beq.n	8002b64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	4a25      	ldr	r2, [pc, #148]	; (8002be8 <UART_AdvFeatureConfig+0x158>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	0019      	movs	r1, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	2240      	movs	r2, #64	; 0x40
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d01d      	beq.n	8002baa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4a1d      	ldr	r2, [pc, #116]	; (8002bec <UART_AdvFeatureConfig+0x15c>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	0019      	movs	r1, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	035b      	lsls	r3, r3, #13
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d10b      	bne.n	8002baa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4a15      	ldr	r2, [pc, #84]	; (8002bf0 <UART_AdvFeatureConfig+0x160>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	2280      	movs	r2, #128	; 0x80
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d00b      	beq.n	8002bcc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4a0e      	ldr	r2, [pc, #56]	; (8002bf4 <UART_AdvFeatureConfig+0x164>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	605a      	str	r2, [r3, #4]
  }
}
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b002      	add	sp, #8
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	fffdffff 	.word	0xfffdffff
 8002bd8:	fffeffff 	.word	0xfffeffff
 8002bdc:	fffbffff 	.word	0xfffbffff
 8002be0:	ffff7fff 	.word	0xffff7fff
 8002be4:	ffffefff 	.word	0xffffefff
 8002be8:	ffffdfff 	.word	0xffffdfff
 8002bec:	ffefffff 	.word	0xffefffff
 8002bf0:	ff9fffff 	.word	0xff9fffff
 8002bf4:	fff7ffff 	.word	0xfff7ffff

08002bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b092      	sub	sp, #72	; 0x48
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2284      	movs	r2, #132	; 0x84
 8002c04:	2100      	movs	r1, #0
 8002c06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c08:	f7fd ff2e 	bl	8000a68 <HAL_GetTick>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2208      	movs	r2, #8
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d12c      	bne.n	8002c78 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c20:	2280      	movs	r2, #128	; 0x80
 8002c22:	0391      	lsls	r1, r2, #14
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	4a46      	ldr	r2, [pc, #280]	; (8002d40 <UART_CheckIdleState+0x148>)
 8002c28:	9200      	str	r2, [sp, #0]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f000 f88c 	bl	8002d48 <UART_WaitOnFlagUntilTimeout>
 8002c30:	1e03      	subs	r3, r0, #0
 8002c32:	d021      	beq.n	8002c78 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c34:	f3ef 8310 	mrs	r3, PRIMASK
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c3e:	2301      	movs	r3, #1
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	f383 8810 	msr	PRIMASK, r3
}
 8002c48:	46c0      	nop			; (mov r8, r8)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2180      	movs	r1, #128	; 0x80
 8002c56:	438a      	bics	r2, r1
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	f383 8810 	msr	PRIMASK, r3
}
 8002c64:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2278      	movs	r2, #120	; 0x78
 8002c70:	2100      	movs	r1, #0
 8002c72:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e05f      	b.n	8002d38 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2204      	movs	r2, #4
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d146      	bne.n	8002d14 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c88:	2280      	movs	r2, #128	; 0x80
 8002c8a:	03d1      	lsls	r1, r2, #15
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	4a2c      	ldr	r2, [pc, #176]	; (8002d40 <UART_CheckIdleState+0x148>)
 8002c90:	9200      	str	r2, [sp, #0]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f000 f858 	bl	8002d48 <UART_WaitOnFlagUntilTimeout>
 8002c98:	1e03      	subs	r3, r0, #0
 8002c9a:	d03b      	beq.n	8002d14 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002ca0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f383 8810 	msr	PRIMASK, r3
}
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4921      	ldr	r1, [pc, #132]	; (8002d44 <UART_CheckIdleState+0x14c>)
 8002cbe:	400a      	ands	r2, r1
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f383 8810 	msr	PRIMASK, r3
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cce:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8002cd4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd6:	633b      	str	r3, [r7, #48]	; 0x30
 8002cd8:	2301      	movs	r3, #1
 8002cda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f383 8810 	msr	PRIMASK, r3
}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2101      	movs	r1, #1
 8002cf0:	438a      	bics	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	f383 8810 	msr	PRIMASK, r3
}
 8002cfe:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2280      	movs	r2, #128	; 0x80
 8002d04:	2120      	movs	r1, #32
 8002d06:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2278      	movs	r2, #120	; 0x78
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e011      	b.n	8002d38 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2220      	movs	r2, #32
 8002d18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2280      	movs	r2, #128	; 0x80
 8002d1e:	2120      	movs	r1, #32
 8002d20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2278      	movs	r2, #120	; 0x78
 8002d32:	2100      	movs	r1, #0
 8002d34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	0018      	movs	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b010      	add	sp, #64	; 0x40
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	01ffffff 	.word	0x01ffffff
 8002d44:	fffffedf 	.word	0xfffffedf

08002d48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	1dfb      	adds	r3, r7, #7
 8002d56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d58:	e04b      	b.n	8002df2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	d048      	beq.n	8002df2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d60:	f7fd fe82 	bl	8000a68 <HAL_GetTick>
 8002d64:	0002      	movs	r2, r0
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d302      	bcc.n	8002d76 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e04b      	b.n	8002e12 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2204      	movs	r2, #4
 8002d82:	4013      	ands	r3, r2
 8002d84:	d035      	beq.n	8002df2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d111      	bne.n	8002db8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2208      	movs	r2, #8
 8002d9a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f000 f83c 	bl	8002e1c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2284      	movs	r2, #132	; 0x84
 8002da8:	2108      	movs	r1, #8
 8002daa:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2278      	movs	r2, #120	; 0x78
 8002db0:	2100      	movs	r1, #0
 8002db2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e02c      	b.n	8002e12 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d112      	bne.n	8002df2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2280      	movs	r2, #128	; 0x80
 8002dd2:	0112      	lsls	r2, r2, #4
 8002dd4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f000 f81f 	bl	8002e1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2284      	movs	r2, #132	; 0x84
 8002de2:	2120      	movs	r1, #32
 8002de4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2278      	movs	r2, #120	; 0x78
 8002dea:	2100      	movs	r1, #0
 8002dec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e00f      	b.n	8002e12 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	425a      	negs	r2, r3
 8002e02:	4153      	adcs	r3, r2
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	001a      	movs	r2, r3
 8002e08:	1dfb      	adds	r3, r7, #7
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d0a4      	beq.n	8002d5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	0018      	movs	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b004      	add	sp, #16
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08e      	sub	sp, #56	; 0x38
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e24:	f3ef 8310 	mrs	r3, PRIMASK
 8002e28:	617b      	str	r3, [r7, #20]
  return(result);
 8002e2a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e2e:	2301      	movs	r3, #1
 8002e30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f383 8810 	msr	PRIMASK, r3
}
 8002e38:	46c0      	nop			; (mov r8, r8)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4926      	ldr	r1, [pc, #152]	; (8002ee0 <UART_EndRxTransfer+0xc4>)
 8002e46:	400a      	ands	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f383 8810 	msr	PRIMASK, r3
}
 8002e54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e56:	f3ef 8310 	mrs	r3, PRIMASK
 8002e5a:	623b      	str	r3, [r7, #32]
  return(result);
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e5e:	633b      	str	r3, [r7, #48]	; 0x30
 8002e60:	2301      	movs	r3, #1
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	f383 8810 	msr	PRIMASK, r3
}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2101      	movs	r1, #1
 8002e78:	438a      	bics	r2, r1
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	f383 8810 	msr	PRIMASK, r3
}
 8002e86:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d118      	bne.n	8002ec2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e90:	f3ef 8310 	mrs	r3, PRIMASK
 8002e94:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e96:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f383 8810 	msr	PRIMASK, r3
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2110      	movs	r1, #16
 8002eb2:	438a      	bics	r2, r1
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f383 8810 	msr	PRIMASK, r3
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2280      	movs	r2, #128	; 0x80
 8002ec6:	2120      	movs	r1, #32
 8002ec8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b00e      	add	sp, #56	; 0x38
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	fffffedf 	.word	0xfffffedf

08002ee4 <memset>:
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	1882      	adds	r2, r0, r2
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d100      	bne.n	8002eee <memset+0xa>
 8002eec:	4770      	bx	lr
 8002eee:	7019      	strb	r1, [r3, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	e7f9      	b.n	8002ee8 <memset+0x4>

08002ef4 <__libc_init_array>:
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	2600      	movs	r6, #0
 8002ef8:	4c0c      	ldr	r4, [pc, #48]	; (8002f2c <__libc_init_array+0x38>)
 8002efa:	4d0d      	ldr	r5, [pc, #52]	; (8002f30 <__libc_init_array+0x3c>)
 8002efc:	1b64      	subs	r4, r4, r5
 8002efe:	10a4      	asrs	r4, r4, #2
 8002f00:	42a6      	cmp	r6, r4
 8002f02:	d109      	bne.n	8002f18 <__libc_init_array+0x24>
 8002f04:	2600      	movs	r6, #0
 8002f06:	f000 f819 	bl	8002f3c <_init>
 8002f0a:	4c0a      	ldr	r4, [pc, #40]	; (8002f34 <__libc_init_array+0x40>)
 8002f0c:	4d0a      	ldr	r5, [pc, #40]	; (8002f38 <__libc_init_array+0x44>)
 8002f0e:	1b64      	subs	r4, r4, r5
 8002f10:	10a4      	asrs	r4, r4, #2
 8002f12:	42a6      	cmp	r6, r4
 8002f14:	d105      	bne.n	8002f22 <__libc_init_array+0x2e>
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
 8002f18:	00b3      	lsls	r3, r6, #2
 8002f1a:	58eb      	ldr	r3, [r5, r3]
 8002f1c:	4798      	blx	r3
 8002f1e:	3601      	adds	r6, #1
 8002f20:	e7ee      	b.n	8002f00 <__libc_init_array+0xc>
 8002f22:	00b3      	lsls	r3, r6, #2
 8002f24:	58eb      	ldr	r3, [r5, r3]
 8002f26:	4798      	blx	r3
 8002f28:	3601      	adds	r6, #1
 8002f2a:	e7f2      	b.n	8002f12 <__libc_init_array+0x1e>
 8002f2c:	08002fc8 	.word	0x08002fc8
 8002f30:	08002fc8 	.word	0x08002fc8
 8002f34:	08002fcc 	.word	0x08002fcc
 8002f38:	08002fc8 	.word	0x08002fc8

08002f3c <_init>:
 8002f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f42:	bc08      	pop	{r3}
 8002f44:	469e      	mov	lr, r3
 8002f46:	4770      	bx	lr

08002f48 <_fini>:
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4e:	bc08      	pop	{r3}
 8002f50:	469e      	mov	lr, r3
 8002f52:	4770      	bx	lr
