
9_RTC_DATE_TIME1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003488  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035b4  080035b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080035b4  080035b4  000135b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035bc  080035bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035bc  080035bc  000135bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035c0  080035c0  000135c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  080035d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  080035d0  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a1e6  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000199d  00000000  00000000  0002a25d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c8  00000000  00000000  0002bc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c9  00000000  00000000  0002c4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013704  00000000  00000000  0002cb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b5a0  00000000  00000000  00040295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079ea8  00000000  00000000  0004b835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ee8  00000000  00000000  000c56e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000c75c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003530 	.word	0x08003530

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003530 	.word	0x08003530

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 faa4 	bl	80009f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f808 	bl	80004c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f956 	bl	8000764 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004b8:	f000 f924 	bl	8000704 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80004bc:	f000 f87c 	bl	80005b8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <main+0x18>
	...

080004c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b09d      	sub	sp, #116	; 0x74
 80004c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ca:	2438      	movs	r4, #56	; 0x38
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	0018      	movs	r0, r3
 80004d0:	2338      	movs	r3, #56	; 0x38
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f002 ffff 	bl	80034d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004da:	2324      	movs	r3, #36	; 0x24
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	0018      	movs	r0, r3
 80004e0:	2314      	movs	r3, #20
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f002 fff7 	bl	80034d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ea:	003b      	movs	r3, r7
 80004ec:	0018      	movs	r0, r3
 80004ee:	2324      	movs	r3, #36	; 0x24
 80004f0:	001a      	movs	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	f002 fff0 	bl	80034d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f8:	4b2d      	ldr	r3, [pc, #180]	; (80005b0 <SystemClock_Config+0xec>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a2d      	ldr	r2, [pc, #180]	; (80005b4 <SystemClock_Config+0xf0>)
 80004fe:	401a      	ands	r2, r3
 8000500:	4b2b      	ldr	r3, [pc, #172]	; (80005b0 <SystemClock_Config+0xec>)
 8000502:	2180      	movs	r1, #128	; 0x80
 8000504:	0109      	lsls	r1, r1, #4
 8000506:	430a      	orrs	r2, r1
 8000508:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800050a:	0021      	movs	r1, r4
 800050c:	187b      	adds	r3, r7, r1
 800050e:	220a      	movs	r2, #10
 8000510:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2201      	movs	r2, #1
 8000516:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2210      	movs	r2, #16
 800051c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2201      	movs	r2, #1
 8000522:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2202      	movs	r2, #2
 8000528:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	0412      	lsls	r2, r2, #16
 800053c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	187b      	adds	r3, r7, r1
 8000540:	0018      	movs	r0, r3
 8000542:	f000 fd55 	bl	8000ff0 <HAL_RCC_OscConfig>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800054a:	f000 f97f 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054e:	2124      	movs	r1, #36	; 0x24
 8000550:	187b      	adds	r3, r7, r1
 8000552:	220f      	movs	r2, #15
 8000554:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2203      	movs	r2, #3
 800055a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2280      	movs	r2, #128	; 0x80
 8000566:	00d2      	lsls	r2, r2, #3
 8000568:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2280      	movs	r2, #128	; 0x80
 800056e:	00d2      	lsls	r2, r2, #3
 8000570:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2100      	movs	r1, #0
 8000576:	0018      	movs	r0, r3
 8000578:	f001 f8fe 	bl	8001778 <HAL_RCC_ClockConfig>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000580:	f000 f964 	bl	800084c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000584:	003b      	movs	r3, r7
 8000586:	2221      	movs	r2, #33	; 0x21
 8000588:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800058a:	003b      	movs	r3, r7
 800058c:	2200      	movs	r2, #0
 800058e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000590:	003b      	movs	r3, r7
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	0292      	lsls	r2, r2, #10
 8000596:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000598:	003b      	movs	r3, r7
 800059a:	0018      	movs	r0, r3
 800059c:	f001 fb10 	bl	8001bc0 <HAL_RCCEx_PeriphCLKConfig>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80005a4:	f000 f952 	bl	800084c <Error_Handler>
  }
}
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	b01d      	add	sp, #116	; 0x74
 80005ae:	bd90      	pop	{r4, r7, pc}
 80005b0:	40007000 	.word	0x40007000
 80005b4:	ffffe7ff 	.word	0xffffe7ff

080005b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b090      	sub	sp, #64	; 0x40
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005be:	232c      	movs	r3, #44	; 0x2c
 80005c0:	18fb      	adds	r3, r7, r3
 80005c2:	0018      	movs	r0, r3
 80005c4:	2314      	movs	r3, #20
 80005c6:	001a      	movs	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f002 ff85 	bl	80034d8 <memset>
  RTC_DateTypeDef sDate = {0};
 80005ce:	2328      	movs	r3, #40	; 0x28
 80005d0:	18fb      	adds	r3, r7, r3
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80005d6:	003b      	movs	r3, r7
 80005d8:	0018      	movs	r0, r3
 80005da:	2328      	movs	r3, #40	; 0x28
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f002 ff7a 	bl	80034d8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005e4:	4b45      	ldr	r3, [pc, #276]	; (80006fc <MX_RTC_Init+0x144>)
 80005e6:	4a46      	ldr	r2, [pc, #280]	; (8000700 <MX_RTC_Init+0x148>)
 80005e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005ea:	4b44      	ldr	r3, [pc, #272]	; (80006fc <MX_RTC_Init+0x144>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80005f0:	4b42      	ldr	r3, [pc, #264]	; (80006fc <MX_RTC_Init+0x144>)
 80005f2:	227f      	movs	r2, #127	; 0x7f
 80005f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80005f6:	4b41      	ldr	r3, [pc, #260]	; (80006fc <MX_RTC_Init+0x144>)
 80005f8:	22ff      	movs	r2, #255	; 0xff
 80005fa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80005fc:	4b3f      	ldr	r3, [pc, #252]	; (80006fc <MX_RTC_Init+0x144>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000602:	4b3e      	ldr	r3, [pc, #248]	; (80006fc <MX_RTC_Init+0x144>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000608:	4b3c      	ldr	r3, [pc, #240]	; (80006fc <MX_RTC_Init+0x144>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800060e:	4b3b      	ldr	r3, [pc, #236]	; (80006fc <MX_RTC_Init+0x144>)
 8000610:	2200      	movs	r2, #0
 8000612:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000614:	4b39      	ldr	r3, [pc, #228]	; (80006fc <MX_RTC_Init+0x144>)
 8000616:	0018      	movs	r0, r3
 8000618:	f001 fc60 	bl	8001edc <HAL_RTC_Init>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8000620:	f000 f914 	bl	800084c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x14;
 8000624:	212c      	movs	r1, #44	; 0x2c
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2214      	movs	r2, #20
 800062a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x5;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2205      	movs	r2, #5
 8000630:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x1;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2201      	movs	r2, #1
 8000636:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000644:	1879      	adds	r1, r7, r1
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <MX_RTC_Init+0x144>)
 8000648:	2201      	movs	r2, #1
 800064a:	0018      	movs	r0, r3
 800064c:	f001 fce2 	bl	8002014 <HAL_RTC_SetTime>
 8000650:	1e03      	subs	r3, r0, #0
 8000652:	d001      	beq.n	8000658 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000654:	f000 f8fa 	bl	800084c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000658:	2128      	movs	r1, #40	; 0x28
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2203      	movs	r2, #3
 800065e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_MARCH;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2203      	movs	r2, #3
 8000664:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x27;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2227      	movs	r2, #39	; 0x27
 800066a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x24;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2224      	movs	r2, #36	; 0x24
 8000670:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000672:	1879      	adds	r1, r7, r1
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <MX_RTC_Init+0x144>)
 8000676:	2201      	movs	r2, #1
 8000678:	0018      	movs	r0, r3
 800067a:	f001 fd75 	bl	8002168 <HAL_RTC_SetDate>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000682:	f000 f8e3 	bl	800084c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x14;
 8000686:	003b      	movs	r3, r7
 8000688:	2214      	movs	r2, #20
 800068a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x5;
 800068c:	003b      	movs	r3, r7
 800068e:	2205      	movs	r2, #5
 8000690:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000692:	003b      	movs	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000698:	003b      	movs	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800069e:	003b      	movs	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006a4:	003b      	movs	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80006aa:	003b      	movs	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80006b0:	003b      	movs	r3, r7
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80006b6:	003b      	movs	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x27;
 80006bc:	003b      	movs	r3, r7
 80006be:	2220      	movs	r2, #32
 80006c0:	2127      	movs	r1, #39	; 0x27
 80006c2:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80006c4:	003b      	movs	r3, r7
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	0052      	lsls	r2, r2, #1
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80006cc:	0039      	movs	r1, r7
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_RTC_Init+0x144>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fddc 	bl	8002290 <HAL_RTC_SetAlarm_IT>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 80006dc:	f000 f8b6 	bl	800084c <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp_IT(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_RTC_Init+0x144>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	0018      	movs	r0, r3
 80006e8:	f002 f8ec 	bl	80028c4 <HAL_RTCEx_SetTimeStamp_IT>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <MX_RTC_Init+0x13c>
  {
    Error_Handler();
 80006f0:	f000 f8ac 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b010      	add	sp, #64	; 0x40
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000028 	.word	0x20000028
 8000700:	40002800 	.word	0x40002800

08000704 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_USART1_UART_Init+0x58>)
 800070a:	4a15      	ldr	r2, [pc, #84]	; (8000760 <MX_USART1_UART_Init+0x5c>)
 800070c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000710:	22e1      	movs	r2, #225	; 0xe1
 8000712:	0252      	lsls	r2, r2, #9
 8000714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_USART1_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART1_UART_Init+0x58>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART1_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000748:	0018      	movs	r0, r3
 800074a:	f002 f9c3 	bl	8002ad4 <HAL_UART_Init>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000752:	f000 f87b 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2000004c 	.word	0x2000004c
 8000760:	40013800 	.word	0x40013800

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b089      	sub	sp, #36	; 0x24
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	240c      	movs	r4, #12
 800076c:	193b      	adds	r3, r7, r4
 800076e:	0018      	movs	r0, r3
 8000770:	2314      	movs	r3, #20
 8000772:	001a      	movs	r2, r3
 8000774:	2100      	movs	r1, #0
 8000776:	f002 feaf 	bl	80034d8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_GPIO_Init+0x84>)
 800077c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_GPIO_Init+0x84>)
 8000780:	2104      	movs	r1, #4
 8000782:	430a      	orrs	r2, r1
 8000784:	62da      	str	r2, [r3, #44]	; 0x2c
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_GPIO_Init+0x84>)
 8000788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800078a:	2204      	movs	r2, #4
 800078c:	4013      	ands	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_GPIO_Init+0x84>)
 8000794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_GPIO_Init+0x84>)
 8000798:	2101      	movs	r1, #1
 800079a:	430a      	orrs	r2, r1
 800079c:	62da      	str	r2, [r3, #44]	; 0x2c
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_GPIO_Init+0x84>)
 80007a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a2:	2201      	movs	r2, #1
 80007a4:	4013      	ands	r3, r2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 80007aa:	23a0      	movs	r3, #160	; 0xa0
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 fbe4 	bl	8000f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 80007b8:	0021      	movs	r1, r4
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2220      	movs	r2, #32
 80007be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2201      	movs	r2, #1
 80007c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 80007d2:	187a      	adds	r2, r7, r1
 80007d4:	23a0      	movs	r3, #160	; 0xa0
 80007d6:	05db      	lsls	r3, r3, #23
 80007d8:	0011      	movs	r1, r2
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fa5a 	bl	8000c94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b009      	add	sp, #36	; 0x24
 80007e6:	bd90      	pop	{r4, r7, pc}
 80007e8:	40021000 	.word	0x40021000

080007ec <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b08d      	sub	sp, #52	; 0x34
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 80007f4:	2380      	movs	r3, #128	; 0x80
 80007f6:	005a      	lsls	r2, r3, #1
 80007f8:	2408      	movs	r4, #8
 80007fa:	1939      	adds	r1, r7, r4
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	2300      	movs	r3, #0
 8000800:	f001 fea8 	bl	8002554 <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 8000804:	0022      	movs	r2, r4
 8000806:	18bb      	adds	r3, r7, r2
 8000808:	789b      	ldrb	r3, [r3, #2]
 800080a:	2b3a      	cmp	r3, #58	; 0x3a
 800080c:	d903      	bls.n	8000816 <HAL_RTC_AlarmAEventCallback+0x2a>
    sAlarm.AlarmTime.Seconds=0;
 800080e:	18bb      	adds	r3, r7, r2
 8000810:	2200      	movs	r2, #0
 8000812:	709a      	strb	r2, [r3, #2]
 8000814:	e006      	b.n	8000824 <HAL_RTC_AlarmAEventCallback+0x38>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8000816:	2108      	movs	r1, #8
 8000818:	187b      	adds	r3, r7, r1
 800081a:	789b      	ldrb	r3, [r3, #2]
 800081c:	3301      	adds	r3, #1
 800081e:	b2da      	uxtb	r2, r3
 8000820:	187b      	adds	r3, r7, r1
 8000822:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	2308      	movs	r3, #8
 8000828:	18f9      	adds	r1, r7, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	0018      	movs	r0, r3
 8000830:	f001 fd2e 	bl	8002290 <HAL_RTC_SetAlarm_IT>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d1f6      	bne.n	8000826 <HAL_RTC_AlarmAEventCallback+0x3a>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000838:	23a0      	movs	r3, #160	; 0xa0
 800083a:	05db      	lsls	r3, r3, #23
 800083c:	2120      	movs	r1, #32
 800083e:	0018      	movs	r0, r3
 8000840:	f000 fbbb 	bl	8000fba <HAL_GPIO_TogglePin>
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b00d      	add	sp, #52	; 0x34
 800084a:	bd90      	pop	{r4, r7, pc}

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x8>
	...

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <HAL_MspInit+0x24>)
 800085e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_MspInit+0x24>)
 8000862:	2101      	movs	r1, #1
 8000864:	430a      	orrs	r2, r1
 8000866:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000868:	4b04      	ldr	r3, [pc, #16]	; (800087c <HAL_MspInit+0x24>)
 800086a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <HAL_MspInit+0x24>)
 800086e:	2180      	movs	r1, #128	; 0x80
 8000870:	0549      	lsls	r1, r1, #21
 8000872:	430a      	orrs	r2, r1
 8000874:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_RTC_MspInit+0x38>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d10e      	bne.n	80008b0 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <HAL_RTC_MspInit+0x3c>)
 8000894:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_RTC_MspInit+0x3c>)
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	02c9      	lsls	r1, r1, #11
 800089c:	430a      	orrs	r2, r1
 800089e:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	2002      	movs	r0, #2
 80008a6:	f000 f9c3 	bl	8000c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80008aa:	2002      	movs	r0, #2
 80008ac:	f000 f9d5 	bl	8000c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b002      	add	sp, #8
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40002800 	.word	0x40002800
 80008bc:	40021000 	.word	0x40021000

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	240c      	movs	r4, #12
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	0018      	movs	r0, r3
 80008ce:	2314      	movs	r3, #20
 80008d0:	001a      	movs	r2, r3
 80008d2:	2100      	movs	r1, #0
 80008d4:	f002 fe00 	bl	80034d8 <memset>
  if(huart->Instance==USART1)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a18      	ldr	r2, [pc, #96]	; (8000940 <HAL_UART_MspInit+0x80>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d12a      	bne.n	8000938 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <HAL_UART_MspInit+0x84>)
 80008e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <HAL_UART_MspInit+0x84>)
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	01c9      	lsls	r1, r1, #7
 80008ec:	430a      	orrs	r2, r1
 80008ee:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <HAL_UART_MspInit+0x84>)
 80008f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <HAL_UART_MspInit+0x84>)
 80008f6:	2101      	movs	r1, #1
 80008f8:	430a      	orrs	r2, r1
 80008fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_UART_MspInit+0x84>)
 80008fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000900:	2201      	movs	r2, #1
 8000902:	4013      	ands	r3, r2
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_USART1_TX_Pin|BSP_USART1_RX_Pin;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	22c0      	movs	r2, #192	; 0xc0
 800090c:	00d2      	lsls	r2, r2, #3
 800090e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	0021      	movs	r1, r4
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2202      	movs	r2, #2
 8000916:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2203      	movs	r2, #3
 8000922:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2204      	movs	r2, #4
 8000928:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	187a      	adds	r2, r7, r1
 800092c:	23a0      	movs	r3, #160	; 0xa0
 800092e:	05db      	lsls	r3, r3, #23
 8000930:	0011      	movs	r1, r2
 8000932:	0018      	movs	r0, r3
 8000934:	f000 f9ae 	bl	8000c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b009      	add	sp, #36	; 0x24
 800093e:	bd90      	pop	{r4, r7, pc}
 8000940:	40013800 	.word	0x40013800
 8000944:	40021000 	.word	0x40021000

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096c:	f000 f898 	bl	8000aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <RTC_IRQHandler+0x1c>)
 800097e:	0018      	movs	r0, r3
 8000980:	f001 fe7c 	bl	800267c <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_TamperTimeStampIRQHandler(&hrtc);
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <RTC_IRQHandler+0x1c>)
 8000986:	0018      	movs	r0, r3
 8000988:	f002 f816 	bl	80029b8 <HAL_RTCEx_TamperTimeStampIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	20000028 	.word	0x20000028

08000998 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009a6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009a8:	f7ff fff6 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ae:	490d      	ldr	r1, [pc, #52]	; (80009e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <LoopForever+0xe>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c4:	4c0a      	ldr	r4, [pc, #40]	; (80009f0 <LoopForever+0x16>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009d2:	f002 fd89 	bl	80034e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009d6:	f7ff fd67 	bl	80004a8 <main>

080009da <LoopForever>:

LoopForever:
    b LoopForever
 80009da:	e7fe      	b.n	80009da <LoopForever>
  ldr   r0, =_estack
 80009dc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009e8:	080035c4 	.word	0x080035c4
  ldr r2, =_sbss
 80009ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009f0:	200000d8 	.word	0x200000d8

080009f4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC1_COMP_IRQHandler>
	...

080009f8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_Init+0x3c>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <HAL_Init+0x3c>)
 8000a0a:	2140      	movs	r1, #64	; 0x40
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a10:	2000      	movs	r0, #0
 8000a12:	f000 f811 	bl	8000a38 <HAL_InitTick>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d003      	beq.n	8000a22 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	701a      	strb	r2, [r3, #0]
 8000a20:	e001      	b.n	8000a26 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a22:	f7ff ff19 	bl	8000858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
}
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b002      	add	sp, #8
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	40022000 	.word	0x40022000

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <HAL_InitTick+0x5c>)
 8000a42:	681c      	ldr	r4, [r3, #0]
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <HAL_InitTick+0x60>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	0019      	movs	r1, r3
 8000a4a:	23fa      	movs	r3, #250	; 0xfa
 8000a4c:	0098      	lsls	r0, r3, #2
 8000a4e:	f7ff fb5b 	bl	8000108 <__udivsi3>
 8000a52:	0003      	movs	r3, r0
 8000a54:	0019      	movs	r1, r3
 8000a56:	0020      	movs	r0, r4
 8000a58:	f7ff fb56 	bl	8000108 <__udivsi3>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 f90b 	bl	8000c7a <HAL_SYSTICK_Config>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e00f      	b.n	8000a8c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d80b      	bhi.n	8000a8a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	2301      	movs	r3, #1
 8000a76:	425b      	negs	r3, r3
 8000a78:	2200      	movs	r2, #0
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 f8d8 	bl	8000c30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_InitTick+0x64>)
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b003      	add	sp, #12
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x1c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	001a      	movs	r2, r3
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	18d2      	adds	r2, r2, r3
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_IncTick+0x20>)
 8000ab2:	601a      	str	r2, [r3, #0]
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	200000d4 	.word	0x200000d4

08000ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <HAL_GetTick+0x10>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	200000d4 	.word	0x200000d4

08000ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	0002      	movs	r2, r0
 8000ae0:	1dfb      	adds	r3, r7, #7
 8000ae2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ae4:	1dfb      	adds	r3, r7, #7
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b7f      	cmp	r3, #127	; 0x7f
 8000aea:	d809      	bhi.n	8000b00 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aec:	1dfb      	adds	r3, r7, #7
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	001a      	movs	r2, r3
 8000af2:	231f      	movs	r3, #31
 8000af4:	401a      	ands	r2, r3
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <__NVIC_EnableIRQ+0x30>)
 8000af8:	2101      	movs	r1, #1
 8000afa:	4091      	lsls	r1, r2
 8000afc:	000a      	movs	r2, r1
 8000afe:	601a      	str	r2, [r3, #0]
  }
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b002      	add	sp, #8
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	e000e100 	.word	0xe000e100

08000b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	0002      	movs	r2, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b20:	d828      	bhi.n	8000b74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b22:	4a2f      	ldr	r2, [pc, #188]	; (8000be0 <__NVIC_SetPriority+0xd4>)
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b25b      	sxtb	r3, r3
 8000b2a:	089b      	lsrs	r3, r3, #2
 8000b2c:	33c0      	adds	r3, #192	; 0xc0
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	589b      	ldr	r3, [r3, r2]
 8000b32:	1dfa      	adds	r2, r7, #7
 8000b34:	7812      	ldrb	r2, [r2, #0]
 8000b36:	0011      	movs	r1, r2
 8000b38:	2203      	movs	r2, #3
 8000b3a:	400a      	ands	r2, r1
 8000b3c:	00d2      	lsls	r2, r2, #3
 8000b3e:	21ff      	movs	r1, #255	; 0xff
 8000b40:	4091      	lsls	r1, r2
 8000b42:	000a      	movs	r2, r1
 8000b44:	43d2      	mvns	r2, r2
 8000b46:	401a      	ands	r2, r3
 8000b48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	019b      	lsls	r3, r3, #6
 8000b4e:	22ff      	movs	r2, #255	; 0xff
 8000b50:	401a      	ands	r2, r3
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	0018      	movs	r0, r3
 8000b58:	2303      	movs	r3, #3
 8000b5a:	4003      	ands	r3, r0
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b60:	481f      	ldr	r0, [pc, #124]	; (8000be0 <__NVIC_SetPriority+0xd4>)
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	33c0      	adds	r3, #192	; 0xc0
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b72:	e031      	b.n	8000bd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b74:	4a1b      	ldr	r2, [pc, #108]	; (8000be4 <__NVIC_SetPriority+0xd8>)
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	0019      	movs	r1, r3
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	400b      	ands	r3, r1
 8000b80:	3b08      	subs	r3, #8
 8000b82:	089b      	lsrs	r3, r3, #2
 8000b84:	3306      	adds	r3, #6
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	18d3      	adds	r3, r2, r3
 8000b8a:	3304      	adds	r3, #4
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	1dfa      	adds	r2, r7, #7
 8000b90:	7812      	ldrb	r2, [r2, #0]
 8000b92:	0011      	movs	r1, r2
 8000b94:	2203      	movs	r2, #3
 8000b96:	400a      	ands	r2, r1
 8000b98:	00d2      	lsls	r2, r2, #3
 8000b9a:	21ff      	movs	r1, #255	; 0xff
 8000b9c:	4091      	lsls	r1, r2
 8000b9e:	000a      	movs	r2, r1
 8000ba0:	43d2      	mvns	r2, r2
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	019b      	lsls	r3, r3, #6
 8000baa:	22ff      	movs	r2, #255	; 0xff
 8000bac:	401a      	ands	r2, r3
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	4003      	ands	r3, r0
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <__NVIC_SetPriority+0xd8>)
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	001c      	movs	r4, r3
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	4023      	ands	r3, r4
 8000bc8:	3b08      	subs	r3, #8
 8000bca:	089b      	lsrs	r3, r3, #2
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	3306      	adds	r3, #6
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	18c3      	adds	r3, r0, r3
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	601a      	str	r2, [r3, #0]
}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b003      	add	sp, #12
 8000bde:	bd90      	pop	{r4, r7, pc}
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	1e5a      	subs	r2, r3, #1
 8000bf4:	2380      	movs	r3, #128	; 0x80
 8000bf6:	045b      	lsls	r3, r3, #17
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d301      	bcc.n	8000c00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e010      	b.n	8000c22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <SysTick_Config+0x44>)
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	3a01      	subs	r2, #1
 8000c06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c08:	2301      	movs	r3, #1
 8000c0a:	425b      	negs	r3, r3
 8000c0c:	2103      	movs	r1, #3
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f7ff ff7c 	bl	8000b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <SysTick_Config+0x44>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <SysTick_Config+0x44>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	0018      	movs	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b002      	add	sp, #8
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	e000e010 	.word	0xe000e010

08000c30 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	1c02      	adds	r2, r0, #0
 8000c40:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	0011      	movs	r1, r2
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff ff5d 	bl	8000b0c <__NVIC_SetPriority>
}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b004      	add	sp, #16
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	0002      	movs	r2, r0
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff ff33 	bl	8000ad8 <__NVIC_EnableIRQ>
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b002      	add	sp, #8
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff ffaf 	bl	8000be8 <SysTick_Config>
 8000c8a:	0003      	movs	r3, r0
}
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b002      	add	sp, #8
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000caa:	e14f      	b.n	8000f4c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	000a      	movs	r2, r1
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d100      	bne.n	8000cc4 <HAL_GPIO_Init+0x30>
 8000cc2:	e140      	b.n	8000f46 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2203      	movs	r2, #3
 8000cca:	4013      	ands	r3, r2
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d005      	beq.n	8000cdc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d130      	bne.n	8000d3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	0013      	movs	r3, r2
 8000cec:	43da      	mvns	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	409a      	lsls	r2, r3
 8000cfe:	0013      	movs	r3, r2
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d12:	2201      	movs	r2, #1
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
 8000d18:	0013      	movs	r3, r2
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	091b      	lsrs	r3, r3, #4
 8000d28:	2201      	movs	r2, #1
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	0013      	movs	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2203      	movs	r2, #3
 8000d44:	4013      	ands	r3, r2
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d017      	beq.n	8000d7a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	2203      	movs	r2, #3
 8000d56:	409a      	lsls	r2, r3
 8000d58:	0013      	movs	r3, r2
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	0013      	movs	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2203      	movs	r2, #3
 8000d80:	4013      	ands	r3, r2
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d123      	bne.n	8000dce <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	08da      	lsrs	r2, r3, #3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3208      	adds	r2, #8
 8000d8e:	0092      	lsls	r2, r2, #2
 8000d90:	58d3      	ldr	r3, [r2, r3]
 8000d92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	2207      	movs	r2, #7
 8000d98:	4013      	ands	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	220f      	movs	r2, #15
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	43da      	mvns	r2, r3
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	691a      	ldr	r2, [r3, #16]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	2107      	movs	r1, #7
 8000db2:	400b      	ands	r3, r1
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	409a      	lsls	r2, r3
 8000db8:	0013      	movs	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	08da      	lsrs	r2, r3, #3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3208      	adds	r2, #8
 8000dc8:	0092      	lsls	r2, r2, #2
 8000dca:	6939      	ldr	r1, [r7, #16]
 8000dcc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	0013      	movs	r3, r2
 8000dde:	43da      	mvns	r2, r3
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2203      	movs	r2, #3
 8000dec:	401a      	ands	r2, r3
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	409a      	lsls	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	23c0      	movs	r3, #192	; 0xc0
 8000e08:	029b      	lsls	r3, r3, #10
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d100      	bne.n	8000e10 <HAL_GPIO_Init+0x17c>
 8000e0e:	e09a      	b.n	8000f46 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e10:	4b54      	ldr	r3, [pc, #336]	; (8000f64 <HAL_GPIO_Init+0x2d0>)
 8000e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e14:	4b53      	ldr	r3, [pc, #332]	; (8000f64 <HAL_GPIO_Init+0x2d0>)
 8000e16:	2101      	movs	r1, #1
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e1c:	4a52      	ldr	r2, [pc, #328]	; (8000f68 <HAL_GPIO_Init+0x2d4>)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	089b      	lsrs	r3, r3, #2
 8000e22:	3302      	adds	r3, #2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	589b      	ldr	r3, [r3, r2]
 8000e28:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	4013      	ands	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	220f      	movs	r2, #15
 8000e34:	409a      	lsls	r2, r3
 8000e36:	0013      	movs	r3, r2
 8000e38:	43da      	mvns	r2, r3
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	23a0      	movs	r3, #160	; 0xa0
 8000e44:	05db      	lsls	r3, r3, #23
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d019      	beq.n	8000e7e <HAL_GPIO_Init+0x1ea>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a47      	ldr	r2, [pc, #284]	; (8000f6c <HAL_GPIO_Init+0x2d8>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d013      	beq.n	8000e7a <HAL_GPIO_Init+0x1e6>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a46      	ldr	r2, [pc, #280]	; (8000f70 <HAL_GPIO_Init+0x2dc>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d00d      	beq.n	8000e76 <HAL_GPIO_Init+0x1e2>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a45      	ldr	r2, [pc, #276]	; (8000f74 <HAL_GPIO_Init+0x2e0>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d007      	beq.n	8000e72 <HAL_GPIO_Init+0x1de>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a44      	ldr	r2, [pc, #272]	; (8000f78 <HAL_GPIO_Init+0x2e4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d101      	bne.n	8000e6e <HAL_GPIO_Init+0x1da>
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	e008      	b.n	8000e80 <HAL_GPIO_Init+0x1ec>
 8000e6e:	2306      	movs	r3, #6
 8000e70:	e006      	b.n	8000e80 <HAL_GPIO_Init+0x1ec>
 8000e72:	2303      	movs	r3, #3
 8000e74:	e004      	b.n	8000e80 <HAL_GPIO_Init+0x1ec>
 8000e76:	2302      	movs	r3, #2
 8000e78:	e002      	b.n	8000e80 <HAL_GPIO_Init+0x1ec>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e000      	b.n	8000e80 <HAL_GPIO_Init+0x1ec>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	2103      	movs	r1, #3
 8000e84:	400a      	ands	r2, r1
 8000e86:	0092      	lsls	r2, r2, #2
 8000e88:	4093      	lsls	r3, r2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e90:	4935      	ldr	r1, [pc, #212]	; (8000f68 <HAL_GPIO_Init+0x2d4>)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	3302      	adds	r3, #2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e9e:	4b37      	ldr	r3, [pc, #220]	; (8000f7c <HAL_GPIO_Init+0x2e8>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	035b      	lsls	r3, r3, #13
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ec2:	4b2e      	ldr	r3, [pc, #184]	; (8000f7c <HAL_GPIO_Init+0x2e8>)
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ec8:	4b2c      	ldr	r3, [pc, #176]	; (8000f7c <HAL_GPIO_Init+0x2e8>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	43da      	mvns	r2, r3
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	039b      	lsls	r3, r3, #14
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eec:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <HAL_GPIO_Init+0x2e8>)
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000ef2:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <HAL_GPIO_Init+0x2e8>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	43da      	mvns	r2, r3
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	029b      	lsls	r3, r3, #10
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_GPIO_Init+0x2e8>)
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_GPIO_Init+0x2e8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	43da      	mvns	r2, r3
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	025b      	lsls	r3, r3, #9
 8000f34:	4013      	ands	r3, r2
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_GPIO_Init+0x2e8>)
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	40da      	lsrs	r2, r3
 8000f54:	1e13      	subs	r3, r2, #0
 8000f56:	d000      	beq.n	8000f5a <HAL_GPIO_Init+0x2c6>
 8000f58:	e6a8      	b.n	8000cac <HAL_GPIO_Init+0x18>
  }
}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b006      	add	sp, #24
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010000 	.word	0x40010000
 8000f6c:	50000400 	.word	0x50000400
 8000f70:	50000800 	.word	0x50000800
 8000f74:	50000c00 	.word	0x50000c00
 8000f78:	50001c00 	.word	0x50001c00
 8000f7c:	40010400 	.word	0x40010400

08000f80 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	0008      	movs	r0, r1
 8000f8a:	0011      	movs	r1, r2
 8000f8c:	1cbb      	adds	r3, r7, #2
 8000f8e:	1c02      	adds	r2, r0, #0
 8000f90:	801a      	strh	r2, [r3, #0]
 8000f92:	1c7b      	adds	r3, r7, #1
 8000f94:	1c0a      	adds	r2, r1, #0
 8000f96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f98:	1c7b      	adds	r3, r7, #1
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d004      	beq.n	8000faa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa0:	1cbb      	adds	r3, r7, #2
 8000fa2:	881a      	ldrh	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000fa8:	e003      	b.n	8000fb2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000faa:	1cbb      	adds	r3, r7, #2
 8000fac:	881a      	ldrh	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b002      	add	sp, #8
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	000a      	movs	r2, r1
 8000fc4:	1cbb      	adds	r3, r7, #2
 8000fc6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fce:	1cbb      	adds	r3, r7, #2
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	041a      	lsls	r2, r3, #16
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	1cb9      	adds	r1, r7, #2
 8000fde:	8809      	ldrh	r1, [r1, #0]
 8000fe0:	400b      	ands	r3, r1
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	619a      	str	r2, [r3, #24]
}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b004      	add	sp, #16
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d102      	bne.n	8001004 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	f000 fbaf 	bl	8001762 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001004:	4bcf      	ldr	r3, [pc, #828]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	220c      	movs	r2, #12
 800100a:	4013      	ands	r3, r2
 800100c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800100e:	4bcd      	ldr	r3, [pc, #820]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	025b      	lsls	r3, r3, #9
 8001016:	4013      	ands	r3, r2
 8001018:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2201      	movs	r2, #1
 8001020:	4013      	ands	r3, r2
 8001022:	d100      	bne.n	8001026 <HAL_RCC_OscConfig+0x36>
 8001024:	e07e      	b.n	8001124 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	2b08      	cmp	r3, #8
 800102a:	d007      	beq.n	800103c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	2b0c      	cmp	r3, #12
 8001030:	d112      	bne.n	8001058 <HAL_RCC_OscConfig+0x68>
 8001032:	69fa      	ldr	r2, [r7, #28]
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	025b      	lsls	r3, r3, #9
 8001038:	429a      	cmp	r2, r3
 800103a:	d10d      	bne.n	8001058 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103c:	4bc1      	ldr	r3, [pc, #772]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	029b      	lsls	r3, r3, #10
 8001044:	4013      	ands	r3, r2
 8001046:	d100      	bne.n	800104a <HAL_RCC_OscConfig+0x5a>
 8001048:	e06b      	b.n	8001122 <HAL_RCC_OscConfig+0x132>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d167      	bne.n	8001122 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	f000 fb85 	bl	8001762 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	025b      	lsls	r3, r3, #9
 8001060:	429a      	cmp	r2, r3
 8001062:	d107      	bne.n	8001074 <HAL_RCC_OscConfig+0x84>
 8001064:	4bb7      	ldr	r3, [pc, #732]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4bb6      	ldr	r3, [pc, #728]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	0249      	lsls	r1, r1, #9
 800106e:	430a      	orrs	r2, r1
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	e027      	b.n	80010c4 <HAL_RCC_OscConfig+0xd4>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	23a0      	movs	r3, #160	; 0xa0
 800107a:	02db      	lsls	r3, r3, #11
 800107c:	429a      	cmp	r2, r3
 800107e:	d10e      	bne.n	800109e <HAL_RCC_OscConfig+0xae>
 8001080:	4bb0      	ldr	r3, [pc, #704]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4baf      	ldr	r3, [pc, #700]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	02c9      	lsls	r1, r1, #11
 800108a:	430a      	orrs	r2, r1
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	4bad      	ldr	r3, [pc, #692]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4bac      	ldr	r3, [pc, #688]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	0249      	lsls	r1, r1, #9
 8001098:	430a      	orrs	r2, r1
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	e012      	b.n	80010c4 <HAL_RCC_OscConfig+0xd4>
 800109e:	4ba9      	ldr	r3, [pc, #676]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4ba8      	ldr	r3, [pc, #672]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80010a4:	49a8      	ldr	r1, [pc, #672]	; (8001348 <HAL_RCC_OscConfig+0x358>)
 80010a6:	400a      	ands	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	4ba6      	ldr	r3, [pc, #664]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	025b      	lsls	r3, r3, #9
 80010b2:	4013      	ands	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4ba2      	ldr	r3, [pc, #648]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4ba1      	ldr	r3, [pc, #644]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80010be:	49a3      	ldr	r1, [pc, #652]	; (800134c <HAL_RCC_OscConfig+0x35c>)
 80010c0:	400a      	ands	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d015      	beq.n	80010f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010cc:	f7ff fcfa 	bl	8000ac4 <HAL_GetTick>
 80010d0:	0003      	movs	r3, r0
 80010d2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010d4:	e009      	b.n	80010ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d6:	f7ff fcf5 	bl	8000ac4 <HAL_GetTick>
 80010da:	0002      	movs	r2, r0
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b64      	cmp	r3, #100	; 0x64
 80010e2:	d902      	bls.n	80010ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	f000 fb3c 	bl	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010ea:	4b96      	ldr	r3, [pc, #600]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	029b      	lsls	r3, r3, #10
 80010f2:	4013      	ands	r3, r2
 80010f4:	d0ef      	beq.n	80010d6 <HAL_RCC_OscConfig+0xe6>
 80010f6:	e015      	b.n	8001124 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fce4 	bl	8000ac4 <HAL_GetTick>
 80010fc:	0003      	movs	r3, r0
 80010fe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001102:	f7ff fcdf 	bl	8000ac4 <HAL_GetTick>
 8001106:	0002      	movs	r2, r0
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b64      	cmp	r3, #100	; 0x64
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e326      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001114:	4b8b      	ldr	r3, [pc, #556]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	029b      	lsls	r3, r3, #10
 800111c:	4013      	ands	r3, r2
 800111e:	d1f0      	bne.n	8001102 <HAL_RCC_OscConfig+0x112>
 8001120:	e000      	b.n	8001124 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001122:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2202      	movs	r2, #2
 800112a:	4013      	ands	r3, r2
 800112c:	d100      	bne.n	8001130 <HAL_RCC_OscConfig+0x140>
 800112e:	e08b      	b.n	8001248 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	2b04      	cmp	r3, #4
 800113a:	d005      	beq.n	8001148 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	2b0c      	cmp	r3, #12
 8001140:	d13e      	bne.n	80011c0 <HAL_RCC_OscConfig+0x1d0>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d13b      	bne.n	80011c0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001148:	4b7e      	ldr	r3, [pc, #504]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2204      	movs	r2, #4
 800114e:	4013      	ands	r3, r2
 8001150:	d004      	beq.n	800115c <HAL_RCC_OscConfig+0x16c>
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e302      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115c:	4b79      	ldr	r3, [pc, #484]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	4a7b      	ldr	r2, [pc, #492]	; (8001350 <HAL_RCC_OscConfig+0x360>)
 8001162:	4013      	ands	r3, r2
 8001164:	0019      	movs	r1, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	021a      	lsls	r2, r3, #8
 800116c:	4b75      	ldr	r3, [pc, #468]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800116e:	430a      	orrs	r2, r1
 8001170:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001172:	4b74      	ldr	r3, [pc, #464]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2209      	movs	r2, #9
 8001178:	4393      	bics	r3, r2
 800117a:	0019      	movs	r1, r3
 800117c:	4b71      	ldr	r3, [pc, #452]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	430a      	orrs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001184:	f000 fc40 	bl	8001a08 <HAL_RCC_GetSysClockFreq>
 8001188:	0001      	movs	r1, r0
 800118a:	4b6e      	ldr	r3, [pc, #440]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	091b      	lsrs	r3, r3, #4
 8001190:	220f      	movs	r2, #15
 8001192:	4013      	ands	r3, r2
 8001194:	4a6f      	ldr	r2, [pc, #444]	; (8001354 <HAL_RCC_OscConfig+0x364>)
 8001196:	5cd3      	ldrb	r3, [r2, r3]
 8001198:	000a      	movs	r2, r1
 800119a:	40da      	lsrs	r2, r3
 800119c:	4b6e      	ldr	r3, [pc, #440]	; (8001358 <HAL_RCC_OscConfig+0x368>)
 800119e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80011a0:	4b6e      	ldr	r3, [pc, #440]	; (800135c <HAL_RCC_OscConfig+0x36c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2513      	movs	r5, #19
 80011a6:	197c      	adds	r4, r7, r5
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff fc45 	bl	8000a38 <HAL_InitTick>
 80011ae:	0003      	movs	r3, r0
 80011b0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80011b2:	197b      	adds	r3, r7, r5
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d046      	beq.n	8001248 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80011ba:	197b      	adds	r3, r7, r5
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	e2d0      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d027      	beq.n	8001216 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011c6:	4b5f      	ldr	r3, [pc, #380]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2209      	movs	r2, #9
 80011cc:	4393      	bics	r3, r2
 80011ce:	0019      	movs	r1, r3
 80011d0:	4b5c      	ldr	r3, [pc, #368]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	430a      	orrs	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fc74 	bl	8000ac4 <HAL_GetTick>
 80011dc:	0003      	movs	r3, r0
 80011de:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e2:	f7ff fc6f 	bl	8000ac4 <HAL_GetTick>
 80011e6:	0002      	movs	r2, r0
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e2b6      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011f4:	4b53      	ldr	r3, [pc, #332]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2204      	movs	r2, #4
 80011fa:	4013      	ands	r3, r2
 80011fc:	d0f1      	beq.n	80011e2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fe:	4b51      	ldr	r3, [pc, #324]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4a53      	ldr	r2, [pc, #332]	; (8001350 <HAL_RCC_OscConfig+0x360>)
 8001204:	4013      	ands	r3, r2
 8001206:	0019      	movs	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	021a      	lsls	r2, r3, #8
 800120e:	4b4d      	ldr	r3, [pc, #308]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001210:	430a      	orrs	r2, r1
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	e018      	b.n	8001248 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001216:	4b4b      	ldr	r3, [pc, #300]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4b4a      	ldr	r3, [pc, #296]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800121c:	2101      	movs	r1, #1
 800121e:	438a      	bics	r2, r1
 8001220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001222:	f7ff fc4f 	bl	8000ac4 <HAL_GetTick>
 8001226:	0003      	movs	r3, r0
 8001228:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800122c:	f7ff fc4a 	bl	8000ac4 <HAL_GetTick>
 8001230:	0002      	movs	r2, r0
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e291      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800123e:	4b41      	ldr	r3, [pc, #260]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2204      	movs	r2, #4
 8001244:	4013      	ands	r3, r2
 8001246:	d1f1      	bne.n	800122c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2210      	movs	r2, #16
 800124e:	4013      	ands	r3, r2
 8001250:	d100      	bne.n	8001254 <HAL_RCC_OscConfig+0x264>
 8001252:	e0a1      	b.n	8001398 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d140      	bne.n	80012dc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800125a:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4013      	ands	r3, r2
 8001264:	d005      	beq.n	8001272 <HAL_RCC_OscConfig+0x282>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e277      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001272:	4b34      	ldr	r3, [pc, #208]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4a3a      	ldr	r2, [pc, #232]	; (8001360 <HAL_RCC_OscConfig+0x370>)
 8001278:	4013      	ands	r3, r2
 800127a:	0019      	movs	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001280:	4b30      	ldr	r3, [pc, #192]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001282:	430a      	orrs	r2, r1
 8001284:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001286:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	0a19      	lsrs	r1, r3, #8
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	061a      	lsls	r2, r3, #24
 8001294:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001296:	430a      	orrs	r2, r1
 8001298:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	0b5b      	lsrs	r3, r3, #13
 80012a0:	3301      	adds	r3, #1
 80012a2:	2280      	movs	r2, #128	; 0x80
 80012a4:	0212      	lsls	r2, r2, #8
 80012a6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80012a8:	4b26      	ldr	r3, [pc, #152]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	210f      	movs	r1, #15
 80012b0:	400b      	ands	r3, r1
 80012b2:	4928      	ldr	r1, [pc, #160]	; (8001354 <HAL_RCC_OscConfig+0x364>)
 80012b4:	5ccb      	ldrb	r3, [r1, r3]
 80012b6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012b8:	4b27      	ldr	r3, [pc, #156]	; (8001358 <HAL_RCC_OscConfig+0x368>)
 80012ba:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <HAL_RCC_OscConfig+0x36c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2513      	movs	r5, #19
 80012c2:	197c      	adds	r4, r7, r5
 80012c4:	0018      	movs	r0, r3
 80012c6:	f7ff fbb7 	bl	8000a38 <HAL_InitTick>
 80012ca:	0003      	movs	r3, r0
 80012cc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80012ce:	197b      	adds	r3, r7, r5
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d060      	beq.n	8001398 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80012d6:	197b      	adds	r3, r7, r5
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	e242      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69db      	ldr	r3, [r3, #28]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d03f      	beq.n	8001364 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 80012ea:	2180      	movs	r1, #128	; 0x80
 80012ec:	0049      	lsls	r1, r1, #1
 80012ee:	430a      	orrs	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7ff fbe7 	bl	8000ac4 <HAL_GetTick>
 80012f6:	0003      	movs	r3, r0
 80012f8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012fc:	f7ff fbe2 	bl	8000ac4 <HAL_GetTick>
 8001300:	0002      	movs	r2, r0
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e229      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4013      	ands	r3, r2
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <HAL_RCC_OscConfig+0x370>)
 8001320:	4013      	ands	r3, r2
 8001322:	0019      	movs	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800132a:	430a      	orrs	r2, r1
 800132c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	0a19      	lsrs	r1, r3, #8
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	061a      	lsls	r2, r3, #24
 800133c:	4b01      	ldr	r3, [pc, #4]	; (8001344 <HAL_RCC_OscConfig+0x354>)
 800133e:	430a      	orrs	r2, r1
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	e029      	b.n	8001398 <HAL_RCC_OscConfig+0x3a8>
 8001344:	40021000 	.word	0x40021000
 8001348:	fffeffff 	.word	0xfffeffff
 800134c:	fffbffff 	.word	0xfffbffff
 8001350:	ffffe0ff 	.word	0xffffe0ff
 8001354:	08003548 	.word	0x08003548
 8001358:	20000000 	.word	0x20000000
 800135c:	20000004 	.word	0x20000004
 8001360:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001364:	4bbd      	ldr	r3, [pc, #756]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4bbc      	ldr	r3, [pc, #752]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 800136a:	49bd      	ldr	r1, [pc, #756]	; (8001660 <HAL_RCC_OscConfig+0x670>)
 800136c:	400a      	ands	r2, r1
 800136e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fba8 	bl	8000ac4 <HAL_GetTick>
 8001374:	0003      	movs	r3, r0
 8001376:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800137a:	f7ff fba3 	bl	8000ac4 <HAL_GetTick>
 800137e:	0002      	movs	r2, r0
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e1ea      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800138c:	4bb3      	ldr	r3, [pc, #716]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4013      	ands	r3, r2
 8001396:	d1f0      	bne.n	800137a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2208      	movs	r2, #8
 800139e:	4013      	ands	r3, r2
 80013a0:	d036      	beq.n	8001410 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d019      	beq.n	80013de <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013aa:	4bac      	ldr	r3, [pc, #688]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80013ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013ae:	4bab      	ldr	r3, [pc, #684]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80013b0:	2101      	movs	r1, #1
 80013b2:	430a      	orrs	r2, r1
 80013b4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fb85 	bl	8000ac4 <HAL_GetTick>
 80013ba:	0003      	movs	r3, r0
 80013bc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c0:	f7ff fb80 	bl	8000ac4 <HAL_GetTick>
 80013c4:	0002      	movs	r2, r0
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e1c7      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013d2:	4ba2      	ldr	r3, [pc, #648]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80013d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013d6:	2202      	movs	r2, #2
 80013d8:	4013      	ands	r3, r2
 80013da:	d0f1      	beq.n	80013c0 <HAL_RCC_OscConfig+0x3d0>
 80013dc:	e018      	b.n	8001410 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013de:	4b9f      	ldr	r3, [pc, #636]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80013e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013e2:	4b9e      	ldr	r3, [pc, #632]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80013e4:	2101      	movs	r1, #1
 80013e6:	438a      	bics	r2, r1
 80013e8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ea:	f7ff fb6b 	bl	8000ac4 <HAL_GetTick>
 80013ee:	0003      	movs	r3, r0
 80013f0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f4:	f7ff fb66 	bl	8000ac4 <HAL_GetTick>
 80013f8:	0002      	movs	r2, r0
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e1ad      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001406:	4b95      	ldr	r3, [pc, #596]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800140a:	2202      	movs	r2, #2
 800140c:	4013      	ands	r3, r2
 800140e:	d1f1      	bne.n	80013f4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2204      	movs	r2, #4
 8001416:	4013      	ands	r3, r2
 8001418:	d100      	bne.n	800141c <HAL_RCC_OscConfig+0x42c>
 800141a:	e0ae      	b.n	800157a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141c:	2027      	movs	r0, #39	; 0x27
 800141e:	183b      	adds	r3, r7, r0
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001424:	4b8d      	ldr	r3, [pc, #564]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	055b      	lsls	r3, r3, #21
 800142c:	4013      	ands	r3, r2
 800142e:	d109      	bne.n	8001444 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001430:	4b8a      	ldr	r3, [pc, #552]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001434:	4b89      	ldr	r3, [pc, #548]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001436:	2180      	movs	r1, #128	; 0x80
 8001438:	0549      	lsls	r1, r1, #21
 800143a:	430a      	orrs	r2, r1
 800143c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800143e:	183b      	adds	r3, r7, r0
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001444:	4b87      	ldr	r3, [pc, #540]	; (8001664 <HAL_RCC_OscConfig+0x674>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4013      	ands	r3, r2
 800144e:	d11a      	bne.n	8001486 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001450:	4b84      	ldr	r3, [pc, #528]	; (8001664 <HAL_RCC_OscConfig+0x674>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b83      	ldr	r3, [pc, #524]	; (8001664 <HAL_RCC_OscConfig+0x674>)
 8001456:	2180      	movs	r1, #128	; 0x80
 8001458:	0049      	lsls	r1, r1, #1
 800145a:	430a      	orrs	r2, r1
 800145c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145e:	f7ff fb31 	bl	8000ac4 <HAL_GetTick>
 8001462:	0003      	movs	r3, r0
 8001464:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001468:	f7ff fb2c 	bl	8000ac4 <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e173      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147a:	4b7a      	ldr	r3, [pc, #488]	; (8001664 <HAL_RCC_OscConfig+0x674>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4013      	ands	r3, r2
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	429a      	cmp	r2, r3
 8001490:	d107      	bne.n	80014a2 <HAL_RCC_OscConfig+0x4b2>
 8001492:	4b72      	ldr	r3, [pc, #456]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001496:	4b71      	ldr	r3, [pc, #452]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001498:	2180      	movs	r1, #128	; 0x80
 800149a:	0049      	lsls	r1, r1, #1
 800149c:	430a      	orrs	r2, r1
 800149e:	651a      	str	r2, [r3, #80]	; 0x50
 80014a0:	e031      	b.n	8001506 <HAL_RCC_OscConfig+0x516>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x4d4>
 80014aa:	4b6c      	ldr	r3, [pc, #432]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014ae:	4b6b      	ldr	r3, [pc, #428]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014b0:	496b      	ldr	r1, [pc, #428]	; (8001660 <HAL_RCC_OscConfig+0x670>)
 80014b2:	400a      	ands	r2, r1
 80014b4:	651a      	str	r2, [r3, #80]	; 0x50
 80014b6:	4b69      	ldr	r3, [pc, #420]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014ba:	4b68      	ldr	r3, [pc, #416]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014bc:	496a      	ldr	r1, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x678>)
 80014be:	400a      	ands	r2, r1
 80014c0:	651a      	str	r2, [r3, #80]	; 0x50
 80014c2:	e020      	b.n	8001506 <HAL_RCC_OscConfig+0x516>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	23a0      	movs	r3, #160	; 0xa0
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d10e      	bne.n	80014ee <HAL_RCC_OscConfig+0x4fe>
 80014d0:	4b62      	ldr	r3, [pc, #392]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014d4:	4b61      	ldr	r3, [pc, #388]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014d6:	2180      	movs	r1, #128	; 0x80
 80014d8:	00c9      	lsls	r1, r1, #3
 80014da:	430a      	orrs	r2, r1
 80014dc:	651a      	str	r2, [r3, #80]	; 0x50
 80014de:	4b5f      	ldr	r3, [pc, #380]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014e2:	4b5e      	ldr	r3, [pc, #376]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014e4:	2180      	movs	r1, #128	; 0x80
 80014e6:	0049      	lsls	r1, r1, #1
 80014e8:	430a      	orrs	r2, r1
 80014ea:	651a      	str	r2, [r3, #80]	; 0x50
 80014ec:	e00b      	b.n	8001506 <HAL_RCC_OscConfig+0x516>
 80014ee:	4b5b      	ldr	r3, [pc, #364]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014f2:	4b5a      	ldr	r3, [pc, #360]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014f4:	495a      	ldr	r1, [pc, #360]	; (8001660 <HAL_RCC_OscConfig+0x670>)
 80014f6:	400a      	ands	r2, r1
 80014f8:	651a      	str	r2, [r3, #80]	; 0x50
 80014fa:	4b58      	ldr	r3, [pc, #352]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80014fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014fe:	4b57      	ldr	r3, [pc, #348]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001500:	4959      	ldr	r1, [pc, #356]	; (8001668 <HAL_RCC_OscConfig+0x678>)
 8001502:	400a      	ands	r2, r1
 8001504:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d015      	beq.n	800153a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150e:	f7ff fad9 	bl	8000ac4 <HAL_GetTick>
 8001512:	0003      	movs	r3, r0
 8001514:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001516:	e009      	b.n	800152c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001518:	f7ff fad4 	bl	8000ac4 <HAL_GetTick>
 800151c:	0002      	movs	r2, r0
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	4a52      	ldr	r2, [pc, #328]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e11a      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800152c:	4b4b      	ldr	r3, [pc, #300]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 800152e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4013      	ands	r3, r2
 8001536:	d0ef      	beq.n	8001518 <HAL_RCC_OscConfig+0x528>
 8001538:	e014      	b.n	8001564 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153a:	f7ff fac3 	bl	8000ac4 <HAL_GetTick>
 800153e:	0003      	movs	r3, r0
 8001540:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001542:	e009      	b.n	8001558 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001544:	f7ff fabe 	bl	8000ac4 <HAL_GetTick>
 8001548:	0002      	movs	r2, r0
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	4a47      	ldr	r2, [pc, #284]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e104      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001558:	4b40      	ldr	r3, [pc, #256]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 800155a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4013      	ands	r3, r2
 8001562:	d1ef      	bne.n	8001544 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001564:	2327      	movs	r3, #39	; 0x27
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d105      	bne.n	800157a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800156e:	4b3b      	ldr	r3, [pc, #236]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001572:	4b3a      	ldr	r3, [pc, #232]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001574:	493e      	ldr	r1, [pc, #248]	; (8001670 <HAL_RCC_OscConfig+0x680>)
 8001576:	400a      	ands	r2, r1
 8001578:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2220      	movs	r2, #32
 8001580:	4013      	ands	r3, r2
 8001582:	d049      	beq.n	8001618 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d026      	beq.n	80015da <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800158c:	4b33      	ldr	r3, [pc, #204]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	4b32      	ldr	r3, [pc, #200]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001592:	2101      	movs	r1, #1
 8001594:	430a      	orrs	r2, r1
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	4b30      	ldr	r3, [pc, #192]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 800159a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800159c:	4b2f      	ldr	r3, [pc, #188]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 800159e:	2101      	movs	r1, #1
 80015a0:	430a      	orrs	r2, r1
 80015a2:	635a      	str	r2, [r3, #52]	; 0x34
 80015a4:	4b33      	ldr	r3, [pc, #204]	; (8001674 <HAL_RCC_OscConfig+0x684>)
 80015a6:	6a1a      	ldr	r2, [r3, #32]
 80015a8:	4b32      	ldr	r3, [pc, #200]	; (8001674 <HAL_RCC_OscConfig+0x684>)
 80015aa:	2180      	movs	r1, #128	; 0x80
 80015ac:	0189      	lsls	r1, r1, #6
 80015ae:	430a      	orrs	r2, r1
 80015b0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7ff fa87 	bl	8000ac4 <HAL_GetTick>
 80015b6:	0003      	movs	r3, r0
 80015b8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015bc:	f7ff fa82 	bl	8000ac4 <HAL_GetTick>
 80015c0:	0002      	movs	r2, r0
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e0c9      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015ce:	4b23      	ldr	r3, [pc, #140]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2202      	movs	r2, #2
 80015d4:	4013      	ands	r3, r2
 80015d6:	d0f1      	beq.n	80015bc <HAL_RCC_OscConfig+0x5cc>
 80015d8:	e01e      	b.n	8001618 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 80015e0:	2101      	movs	r1, #1
 80015e2:	438a      	bics	r2, r1
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	4b23      	ldr	r3, [pc, #140]	; (8001674 <HAL_RCC_OscConfig+0x684>)
 80015e8:	6a1a      	ldr	r2, [r3, #32]
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <HAL_RCC_OscConfig+0x684>)
 80015ec:	4922      	ldr	r1, [pc, #136]	; (8001678 <HAL_RCC_OscConfig+0x688>)
 80015ee:	400a      	ands	r2, r1
 80015f0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f2:	f7ff fa67 	bl	8000ac4 <HAL_GetTick>
 80015f6:	0003      	movs	r3, r0
 80015f8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015fc:	f7ff fa62 	bl	8000ac4 <HAL_GetTick>
 8001600:	0002      	movs	r2, r0
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e0a9      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2202      	movs	r2, #2
 8001614:	4013      	ands	r3, r2
 8001616:	d1f1      	bne.n	80015fc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	d100      	bne.n	8001622 <HAL_RCC_OscConfig+0x632>
 8001620:	e09e      	b.n	8001760 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	2b0c      	cmp	r3, #12
 8001626:	d100      	bne.n	800162a <HAL_RCC_OscConfig+0x63a>
 8001628:	e077      	b.n	800171a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	2b02      	cmp	r3, #2
 8001630:	d158      	bne.n	80016e4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_RCC_OscConfig+0x66c>)
 8001638:	4910      	ldr	r1, [pc, #64]	; (800167c <HAL_RCC_OscConfig+0x68c>)
 800163a:	400a      	ands	r2, r1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff fa41 	bl	8000ac4 <HAL_GetTick>
 8001642:	0003      	movs	r3, r0
 8001644:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001646:	e01b      	b.n	8001680 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fa3c 	bl	8000ac4 <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d914      	bls.n	8001680 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e083      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	40021000 	.word	0x40021000
 8001660:	fffffeff 	.word	0xfffffeff
 8001664:	40007000 	.word	0x40007000
 8001668:	fffffbff 	.word	0xfffffbff
 800166c:	00001388 	.word	0x00001388
 8001670:	efffffff 	.word	0xefffffff
 8001674:	40010000 	.word	0x40010000
 8001678:	ffffdfff 	.word	0xffffdfff
 800167c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001680:	4b3a      	ldr	r3, [pc, #232]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	049b      	lsls	r3, r3, #18
 8001688:	4013      	ands	r3, r2
 800168a:	d1dd      	bne.n	8001648 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800168c:	4b37      	ldr	r3, [pc, #220]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	4a37      	ldr	r2, [pc, #220]	; (8001770 <HAL_RCC_OscConfig+0x780>)
 8001692:	4013      	ands	r3, r2
 8001694:	0019      	movs	r1, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a4:	431a      	orrs	r2, r3
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 80016a8:	430a      	orrs	r2, r1
 80016aa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ac:	4b2f      	ldr	r3, [pc, #188]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b2e      	ldr	r3, [pc, #184]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 80016b2:	2180      	movs	r1, #128	; 0x80
 80016b4:	0449      	lsls	r1, r1, #17
 80016b6:	430a      	orrs	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ba:	f7ff fa03 	bl	8000ac4 <HAL_GetTick>
 80016be:	0003      	movs	r3, r0
 80016c0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff f9fe 	bl	8000ac4 <HAL_GetTick>
 80016c8:	0002      	movs	r2, r0
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e045      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016d6:	4b25      	ldr	r3, [pc, #148]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	049b      	lsls	r3, r3, #18
 80016de:	4013      	ands	r3, r2
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x6d4>
 80016e2:	e03d      	b.n	8001760 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b20      	ldr	r3, [pc, #128]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 80016ea:	4922      	ldr	r1, [pc, #136]	; (8001774 <HAL_RCC_OscConfig+0x784>)
 80016ec:	400a      	ands	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff f9e8 	bl	8000ac4 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fa:	f7ff f9e3 	bl	8000ac4 <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e02a      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	049b      	lsls	r3, r3, #18
 8001714:	4013      	ands	r3, r2
 8001716:	d1f0      	bne.n	80016fa <HAL_RCC_OscConfig+0x70a>
 8001718:	e022      	b.n	8001760 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e01d      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_RCC_OscConfig+0x77c>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	025b      	lsls	r3, r3, #9
 8001732:	401a      	ands	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	429a      	cmp	r2, r3
 800173a:	d10f      	bne.n	800175c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	23f0      	movs	r3, #240	; 0xf0
 8001740:	039b      	lsls	r3, r3, #14
 8001742:	401a      	ands	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001748:	429a      	cmp	r2, r3
 800174a:	d107      	bne.n	800175c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	23c0      	movs	r3, #192	; 0xc0
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	401a      	ands	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	0018      	movs	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	b00a      	add	sp, #40	; 0x28
 8001768:	bdb0      	pop	{r4, r5, r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	40021000 	.word	0x40021000
 8001770:	ff02ffff 	.word	0xff02ffff
 8001774:	feffffff 	.word	0xfeffffff

08001778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001778:	b5b0      	push	{r4, r5, r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e128      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800178c:	4b96      	ldr	r3, [pc, #600]	; (80019e8 <HAL_RCC_ClockConfig+0x270>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2201      	movs	r2, #1
 8001792:	4013      	ands	r3, r2
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d91e      	bls.n	80017d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b93      	ldr	r3, [pc, #588]	; (80019e8 <HAL_RCC_ClockConfig+0x270>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	4393      	bics	r3, r2
 80017a2:	0019      	movs	r1, r3
 80017a4:	4b90      	ldr	r3, [pc, #576]	; (80019e8 <HAL_RCC_ClockConfig+0x270>)
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017ac:	f7ff f98a 	bl	8000ac4 <HAL_GetTick>
 80017b0:	0003      	movs	r3, r0
 80017b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b4:	e009      	b.n	80017ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b6:	f7ff f985 	bl	8000ac4 <HAL_GetTick>
 80017ba:	0002      	movs	r2, r0
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	4a8a      	ldr	r2, [pc, #552]	; (80019ec <HAL_RCC_ClockConfig+0x274>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e109      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ca:	4b87      	ldr	r3, [pc, #540]	; (80019e8 <HAL_RCC_ClockConfig+0x270>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2201      	movs	r2, #1
 80017d0:	4013      	ands	r3, r2
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d1ee      	bne.n	80017b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2202      	movs	r2, #2
 80017de:	4013      	ands	r3, r2
 80017e0:	d009      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e2:	4b83      	ldr	r3, [pc, #524]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	22f0      	movs	r2, #240	; 0xf0
 80017e8:	4393      	bics	r3, r2
 80017ea:	0019      	movs	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	4b7f      	ldr	r3, [pc, #508]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 80017f2:	430a      	orrs	r2, r1
 80017f4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2201      	movs	r2, #1
 80017fc:	4013      	ands	r3, r2
 80017fe:	d100      	bne.n	8001802 <HAL_RCC_ClockConfig+0x8a>
 8001800:	e089      	b.n	8001916 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800180a:	4b79      	ldr	r3, [pc, #484]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	029b      	lsls	r3, r3, #10
 8001812:	4013      	ands	r3, r2
 8001814:	d120      	bne.n	8001858 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e0e1      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b03      	cmp	r3, #3
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001822:	4b73      	ldr	r3, [pc, #460]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	049b      	lsls	r3, r3, #18
 800182a:	4013      	ands	r3, r2
 800182c:	d114      	bne.n	8001858 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e0d5      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d106      	bne.n	8001848 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800183a:	4b6d      	ldr	r3, [pc, #436]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2204      	movs	r2, #4
 8001840:	4013      	ands	r3, r2
 8001842:	d109      	bne.n	8001858 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0ca      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001848:	4b69      	ldr	r3, [pc, #420]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4013      	ands	r3, r2
 8001852:	d101      	bne.n	8001858 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0c2      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001858:	4b65      	ldr	r3, [pc, #404]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2203      	movs	r2, #3
 800185e:	4393      	bics	r3, r2
 8001860:	0019      	movs	r1, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	4b62      	ldr	r3, [pc, #392]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 8001868:	430a      	orrs	r2, r1
 800186a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800186c:	f7ff f92a 	bl	8000ac4 <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d111      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800187c:	e009      	b.n	8001892 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187e:	f7ff f921 	bl	8000ac4 <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	4a58      	ldr	r2, [pc, #352]	; (80019ec <HAL_RCC_ClockConfig+0x274>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e0a5      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001892:	4b57      	ldr	r3, [pc, #348]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	220c      	movs	r2, #12
 8001898:	4013      	ands	r3, r2
 800189a:	2b08      	cmp	r3, #8
 800189c:	d1ef      	bne.n	800187e <HAL_RCC_ClockConfig+0x106>
 800189e:	e03a      	b.n	8001916 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d111      	bne.n	80018cc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018a8:	e009      	b.n	80018be <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018aa:	f7ff f90b 	bl	8000ac4 <HAL_GetTick>
 80018ae:	0002      	movs	r2, r0
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	4a4d      	ldr	r2, [pc, #308]	; (80019ec <HAL_RCC_ClockConfig+0x274>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e08f      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018be:	4b4c      	ldr	r3, [pc, #304]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	220c      	movs	r2, #12
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d1ef      	bne.n	80018aa <HAL_RCC_ClockConfig+0x132>
 80018ca:	e024      	b.n	8001916 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d11b      	bne.n	800190c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018d4:	e009      	b.n	80018ea <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d6:	f7ff f8f5 	bl	8000ac4 <HAL_GetTick>
 80018da:	0002      	movs	r2, r0
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	4a42      	ldr	r2, [pc, #264]	; (80019ec <HAL_RCC_ClockConfig+0x274>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e079      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ea:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	220c      	movs	r2, #12
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d1ef      	bne.n	80018d6 <HAL_RCC_ClockConfig+0x15e>
 80018f6:	e00e      	b.n	8001916 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f8:	f7ff f8e4 	bl	8000ac4 <HAL_GetTick>
 80018fc:	0002      	movs	r2, r0
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	4a3a      	ldr	r2, [pc, #232]	; (80019ec <HAL_RCC_ClockConfig+0x274>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d901      	bls.n	800190c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e068      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800190c:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	220c      	movs	r2, #12
 8001912:	4013      	ands	r3, r2
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001916:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <HAL_RCC_ClockConfig+0x270>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2201      	movs	r2, #1
 800191c:	4013      	ands	r3, r2
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d21e      	bcs.n	8001962 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001924:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <HAL_RCC_ClockConfig+0x270>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2201      	movs	r2, #1
 800192a:	4393      	bics	r3, r2
 800192c:	0019      	movs	r1, r3
 800192e:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <HAL_RCC_ClockConfig+0x270>)
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001936:	f7ff f8c5 	bl	8000ac4 <HAL_GetTick>
 800193a:	0003      	movs	r3, r0
 800193c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	e009      	b.n	8001954 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001940:	f7ff f8c0 	bl	8000ac4 <HAL_GetTick>
 8001944:	0002      	movs	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	4a28      	ldr	r2, [pc, #160]	; (80019ec <HAL_RCC_ClockConfig+0x274>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e044      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001954:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <HAL_RCC_ClockConfig+0x270>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2201      	movs	r2, #1
 800195a:	4013      	ands	r3, r2
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d1ee      	bne.n	8001940 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2204      	movs	r2, #4
 8001968:	4013      	ands	r3, r2
 800196a:	d009      	beq.n	8001980 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800196c:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	4a20      	ldr	r2, [pc, #128]	; (80019f4 <HAL_RCC_ClockConfig+0x27c>)
 8001972:	4013      	ands	r3, r2
 8001974:	0019      	movs	r1, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 800197c:	430a      	orrs	r2, r1
 800197e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2208      	movs	r2, #8
 8001986:	4013      	ands	r3, r2
 8001988:	d00a      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800198a:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	4a1a      	ldr	r2, [pc, #104]	; (80019f8 <HAL_RCC_ClockConfig+0x280>)
 8001990:	4013      	ands	r3, r2
 8001992:	0019      	movs	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	00da      	lsls	r2, r3, #3
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 800199c:	430a      	orrs	r2, r1
 800199e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019a0:	f000 f832 	bl	8001a08 <HAL_RCC_GetSysClockFreq>
 80019a4:	0001      	movs	r1, r0
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_RCC_ClockConfig+0x278>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	091b      	lsrs	r3, r3, #4
 80019ac:	220f      	movs	r2, #15
 80019ae:	4013      	ands	r3, r2
 80019b0:	4a12      	ldr	r2, [pc, #72]	; (80019fc <HAL_RCC_ClockConfig+0x284>)
 80019b2:	5cd3      	ldrb	r3, [r2, r3]
 80019b4:	000a      	movs	r2, r1
 80019b6:	40da      	lsrs	r2, r3
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <HAL_RCC_ClockConfig+0x288>)
 80019ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_RCC_ClockConfig+0x28c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	250b      	movs	r5, #11
 80019c2:	197c      	adds	r4, r7, r5
 80019c4:	0018      	movs	r0, r3
 80019c6:	f7ff f837 	bl	8000a38 <HAL_InitTick>
 80019ca:	0003      	movs	r3, r0
 80019cc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80019ce:	197b      	adds	r3, r7, r5
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80019d6:	197b      	adds	r3, r7, r5
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	e000      	b.n	80019de <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	0018      	movs	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b004      	add	sp, #16
 80019e4:	bdb0      	pop	{r4, r5, r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	40022000 	.word	0x40022000
 80019ec:	00001388 	.word	0x00001388
 80019f0:	40021000 	.word	0x40021000
 80019f4:	fffff8ff 	.word	0xfffff8ff
 80019f8:	ffffc7ff 	.word	0xffffc7ff
 80019fc:	08003548 	.word	0x08003548
 8001a00:	20000000 	.word	0x20000000
 8001a04:	20000004 	.word	0x20000004

08001a08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	b08e      	sub	sp, #56	; 0x38
 8001a0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a0e:	4b4c      	ldr	r3, [pc, #304]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a16:	230c      	movs	r3, #12
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b0c      	cmp	r3, #12
 8001a1c:	d014      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0x40>
 8001a1e:	d900      	bls.n	8001a22 <HAL_RCC_GetSysClockFreq+0x1a>
 8001a20:	e07b      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x112>
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d002      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x24>
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d00b      	beq.n	8001a42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a2a:	e076      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a2c:	4b44      	ldr	r3, [pc, #272]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2210      	movs	r2, #16
 8001a32:	4013      	ands	r3, r2
 8001a34:	d002      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a36:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a38:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001a3a:	e07c      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001a3c:	4b42      	ldr	r3, [pc, #264]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x140>)
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a40:	e079      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a42:	4b42      	ldr	r3, [pc, #264]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x144>)
 8001a44:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a46:	e076      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4a:	0c9a      	lsrs	r2, r3, #18
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	401a      	ands	r2, r3
 8001a50:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x148>)
 8001a52:	5c9b      	ldrb	r3, [r3, r2]
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a58:	0d9a      	lsrs	r2, r3, #22
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	3301      	adds	r3, #1
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a62:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	025b      	lsls	r3, r3, #9
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d01a      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	4a35      	ldr	r2, [pc, #212]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x144>)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	69b8      	ldr	r0, [r7, #24]
 8001a7c:	69f9      	ldr	r1, [r7, #28]
 8001a7e:	f7fe fbef 	bl	8000260 <__aeabi_lmul>
 8001a82:	0002      	movs	r2, r0
 8001a84:	000b      	movs	r3, r1
 8001a86:	0010      	movs	r0, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f7fe fbc3 	bl	8000220 <__aeabi_uldivmod>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	000b      	movs	r3, r1
 8001a9e:	0013      	movs	r3, r2
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8001aa2:	e037      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001aa4:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2210      	movs	r2, #16
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d01a      	beq.n	8001ae4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4a23      	ldr	r2, [pc, #140]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	68b8      	ldr	r0, [r7, #8]
 8001abc:	68f9      	ldr	r1, [r7, #12]
 8001abe:	f7fe fbcf 	bl	8000260 <__aeabi_lmul>
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	000b      	movs	r3, r1
 8001ac6:	0010      	movs	r0, r2
 8001ac8:	0019      	movs	r1, r3
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f7fe fba3 	bl	8000220 <__aeabi_uldivmod>
 8001ada:	0002      	movs	r2, r0
 8001adc:	000b      	movs	r3, r1
 8001ade:	0013      	movs	r3, r2
 8001ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ae2:	e017      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	2300      	movs	r3, #0
 8001aea:	0019      	movs	r1, r3
 8001aec:	4a16      	ldr	r2, [pc, #88]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x140>)
 8001aee:	2300      	movs	r3, #0
 8001af0:	f7fe fbb6 	bl	8000260 <__aeabi_lmul>
 8001af4:	0002      	movs	r2, r0
 8001af6:	000b      	movs	r3, r1
 8001af8:	0010      	movs	r0, r2
 8001afa:	0019      	movs	r1, r3
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	001c      	movs	r4, r3
 8001b00:	2300      	movs	r3, #0
 8001b02:	001d      	movs	r5, r3
 8001b04:	0022      	movs	r2, r4
 8001b06:	002b      	movs	r3, r5
 8001b08:	f7fe fb8a 	bl	8000220 <__aeabi_uldivmod>
 8001b0c:	0002      	movs	r2, r0
 8001b0e:	000b      	movs	r3, r1
 8001b10:	0013      	movs	r3, r2
 8001b12:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b18:	e00d      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	0b5b      	lsrs	r3, r3, #13
 8001b20:	2207      	movs	r2, #7
 8001b22:	4013      	ands	r3, r2
 8001b24:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	2280      	movs	r2, #128	; 0x80
 8001b2c:	0212      	lsls	r2, r2, #8
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	0013      	movs	r3, r2
 8001b32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b34:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b00e      	add	sp, #56	; 0x38
 8001b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	003d0900 	.word	0x003d0900
 8001b48:	00f42400 	.word	0x00f42400
 8001b4c:	007a1200 	.word	0x007a1200
 8001b50:	08003560 	.word	0x08003560

08001b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b58:	4b02      	ldr	r3, [pc, #8]	; (8001b64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	20000000 	.word	0x20000000

08001b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b6c:	f7ff fff2 	bl	8001b54 <HAL_RCC_GetHCLKFreq>
 8001b70:	0001      	movs	r1, r0
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	0a1b      	lsrs	r3, r3, #8
 8001b78:	2207      	movs	r2, #7
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	40d9      	lsrs	r1, r3
 8001b82:	000b      	movs	r3, r1
}
 8001b84:	0018      	movs	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	08003558 	.word	0x08003558

08001b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b98:	f7ff ffdc 	bl	8001b54 <HAL_RCC_GetHCLKFreq>
 8001b9c:	0001      	movs	r1, r0
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	0adb      	lsrs	r3, r3, #11
 8001ba4:	2207      	movs	r2, #7
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001baa:	5cd3      	ldrb	r3, [r2, r3]
 8001bac:	40d9      	lsrs	r1, r3
 8001bae:	000b      	movs	r3, r1
}
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	08003558 	.word	0x08003558

08001bc0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001bc8:	2317      	movs	r3, #23
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d106      	bne.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	4013      	ands	r3, r2
 8001be4:	d100      	bne.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001be6:	e104      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be8:	4bb1      	ldr	r3, [pc, #708]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	055b      	lsls	r3, r3, #21
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d10a      	bne.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf4:	4bae      	ldr	r3, [pc, #696]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bf8:	4bad      	ldr	r3, [pc, #692]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bfa:	2180      	movs	r1, #128	; 0x80
 8001bfc:	0549      	lsls	r1, r1, #21
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c02:	2317      	movs	r3, #23
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	2201      	movs	r2, #1
 8001c08:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0a:	4baa      	ldr	r3, [pc, #680]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4013      	ands	r3, r2
 8001c14:	d11a      	bne.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c16:	4ba7      	ldr	r3, [pc, #668]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4ba6      	ldr	r3, [pc, #664]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001c1c:	2180      	movs	r1, #128	; 0x80
 8001c1e:	0049      	lsls	r1, r1, #1
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c24:	f7fe ff4e 	bl	8000ac4 <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2c:	e008      	b.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2e:	f7fe ff49 	bl	8000ac4 <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b64      	cmp	r3, #100	; 0x64
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e133      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	4b9c      	ldr	r3, [pc, #624]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001c4c:	4b98      	ldr	r3, [pc, #608]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	23c0      	movs	r3, #192	; 0xc0
 8001c52:	039b      	lsls	r3, r3, #14
 8001c54:	4013      	ands	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	23c0      	movs	r3, #192	; 0xc0
 8001c5e:	039b      	lsls	r3, r3, #14
 8001c60:	4013      	ands	r3, r2
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d107      	bne.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	23c0      	movs	r3, #192	; 0xc0
 8001c6e:	039b      	lsls	r3, r3, #14
 8001c70:	4013      	ands	r3, r2
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	23c0      	movs	r3, #192	; 0xc0
 8001c7e:	029b      	lsls	r3, r3, #10
 8001c80:	401a      	ands	r2, r3
 8001c82:	23c0      	movs	r3, #192	; 0xc0
 8001c84:	029b      	lsls	r3, r3, #10
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d10a      	bne.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001c8a:	4b89      	ldr	r3, [pc, #548]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	029b      	lsls	r3, r3, #10
 8001c92:	401a      	ands	r2, r3
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	029b      	lsls	r3, r3, #10
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e103      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001ca0:	4b83      	ldr	r3, [pc, #524]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ca2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ca4:	23c0      	movs	r3, #192	; 0xc0
 8001ca6:	029b      	lsls	r3, r3, #10
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d049      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	23c0      	movs	r3, #192	; 0xc0
 8001cb8:	029b      	lsls	r3, r3, #10
 8001cba:	4013      	ands	r3, r2
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d004      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d10d      	bne.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	23c0      	movs	r3, #192	; 0xc0
 8001cd2:	029b      	lsls	r3, r3, #10
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d034      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d02e      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ce8:	4b71      	ldr	r3, [pc, #452]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cec:	4a72      	ldr	r2, [pc, #456]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cf2:	4b6f      	ldr	r3, [pc, #444]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cf6:	4b6e      	ldr	r3, [pc, #440]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	0309      	lsls	r1, r1, #12
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d00:	4b6b      	ldr	r3, [pc, #428]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d04:	4b6a      	ldr	r3, [pc, #424]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d06:	496d      	ldr	r1, [pc, #436]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001d08:	400a      	ands	r2, r1
 8001d0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001d0c:	4b68      	ldr	r3, [pc, #416]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d014      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7fe fed2 	bl	8000ac4 <HAL_GetTick>
 8001d20:	0003      	movs	r3, r0
 8001d22:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d24:	e009      	b.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7fe fecd 	bl	8000ac4 <HAL_GetTick>
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	4a63      	ldr	r2, [pc, #396]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e0b6      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d3a:	4b5d      	ldr	r3, [pc, #372]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4013      	ands	r3, r2
 8001d44:	d0ef      	beq.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d01f      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	23c0      	movs	r3, #192	; 0xc0
 8001d58:	029b      	lsls	r3, r3, #10
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	23c0      	movs	r3, #192	; 0xc0
 8001d5e:	029b      	lsls	r3, r3, #10
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d10c      	bne.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001d64:	4b52      	ldr	r3, [pc, #328]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a56      	ldr	r2, [pc, #344]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	23c0      	movs	r3, #192	; 0xc0
 8001d74:	039b      	lsls	r3, r3, #14
 8001d76:	401a      	ands	r2, r3
 8001d78:	4b4d      	ldr	r3, [pc, #308]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	4b4c      	ldr	r3, [pc, #304]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d80:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	23c0      	movs	r3, #192	; 0xc0
 8001d88:	029b      	lsls	r3, r3, #10
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2220      	movs	r2, #32
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d01f      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	23c0      	movs	r3, #192	; 0xc0
 8001da2:	029b      	lsls	r3, r3, #10
 8001da4:	401a      	ands	r2, r3
 8001da6:	23c0      	movs	r3, #192	; 0xc0
 8001da8:	029b      	lsls	r3, r3, #10
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001dae:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a44      	ldr	r2, [pc, #272]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	0019      	movs	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	23c0      	movs	r3, #192	; 0xc0
 8001dbe:	039b      	lsls	r3, r3, #14
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	4b3b      	ldr	r3, [pc, #236]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dca:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	23c0      	movs	r3, #192	; 0xc0
 8001dd2:	029b      	lsls	r3, r3, #10
 8001dd4:	401a      	ands	r2, r3
 8001dd6:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ddc:	2317      	movs	r3, #23
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d105      	bne.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de6:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dea:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dec:	4936      	ldr	r1, [pc, #216]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001dee:	400a      	ands	r2, r1
 8001df0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2201      	movs	r2, #1
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d009      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dfc:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e00:	2203      	movs	r2, #3
 8001e02:	4393      	bics	r3, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2202      	movs	r2, #2
 8001e16:	4013      	ands	r3, r2
 8001e18:	d009      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e1a:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	220c      	movs	r2, #12
 8001e20:	4393      	bics	r3, r2
 8001e22:	0019      	movs	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2204      	movs	r2, #4
 8001e34:	4013      	ands	r3, r2
 8001e36:	d009      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e38:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3c:	4a23      	ldr	r2, [pc, #140]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	0019      	movs	r1, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2208      	movs	r2, #8
 8001e52:	4013      	ands	r3, r2
 8001e54:	d009      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	0019      	movs	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699a      	ldr	r2, [r3, #24]
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e66:	430a      	orrs	r2, r1
 8001e68:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2240      	movs	r2, #64	; 0x40
 8001e70:	4013      	ands	r3, r2
 8001e72:	d009      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e78:	4a16      	ldr	r2, [pc, #88]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1a      	ldr	r2, [r3, #32]
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e84:	430a      	orrs	r2, r1
 8001e86:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2280      	movs	r2, #128	; 0x80
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001e92:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e96:	4a10      	ldr	r2, [pc, #64]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69da      	ldr	r2, [r3, #28]
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b006      	add	sp, #24
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	fffcffff 	.word	0xfffcffff
 8001ebc:	fff7ffff 	.word	0xfff7ffff
 8001ec0:	00001388 	.word	0x00001388
 8001ec4:	ffcfffff 	.word	0xffcfffff
 8001ec8:	efffffff 	.word	0xefffffff
 8001ecc:	fffff3ff 	.word	0xfffff3ff
 8001ed0:	ffffcfff 	.word	0xffffcfff
 8001ed4:	fbffffff 	.word	0xfbffffff
 8001ed8:	fff3ffff 	.word	0xfff3ffff

08001edc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001edc:	b5b0      	push	{r4, r5, r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ee4:	230f      	movs	r3, #15
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e088      	b.n	8002008 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2221      	movs	r2, #33	; 0x21
 8001efa:	5c9b      	ldrb	r3, [r3, r2]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d107      	bne.n	8001f12 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2220      	movs	r2, #32
 8001f06:	2100      	movs	r1, #0
 8001f08:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7fe fcb7 	bl	8000880 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2221      	movs	r2, #33	; 0x21
 8001f16:	2102      	movs	r1, #2
 8001f18:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2210      	movs	r2, #16
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b10      	cmp	r3, #16
 8001f26:	d05f      	beq.n	8001fe8 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	22ca      	movs	r2, #202	; 0xca
 8001f2e:	625a      	str	r2, [r3, #36]	; 0x24
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2253      	movs	r2, #83	; 0x53
 8001f36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001f38:	250f      	movs	r5, #15
 8001f3a:	197c      	adds	r4, r7, r5
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f000 fc12 	bl	8002768 <RTC_EnterInitMode>
 8001f44:	0003      	movs	r3, r0
 8001f46:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8001f48:	0028      	movs	r0, r5
 8001f4a:	183b      	adds	r3, r7, r0
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d12c      	bne.n	8001fac <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	492c      	ldr	r1, [pc, #176]	; (8002010 <HAL_RTC_Init+0x134>)
 8001f5e:	400a      	ands	r2, r1
 8001f60:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6899      	ldr	r1, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	68d2      	ldr	r2, [r2, #12]
 8001f88:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6919      	ldr	r1, [r3, #16]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	041a      	lsls	r2, r3, #16
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001f9e:	183c      	adds	r4, r7, r0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f000 fc24 	bl	80027f0 <RTC_ExitInitMode>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8001fac:	230f      	movs	r3, #15
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d113      	bne.n	8001fde <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2103      	movs	r1, #3
 8001fc2:	438a      	bics	r2, r1
 8001fc4:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69da      	ldr	r2, [r3, #28]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	22ff      	movs	r2, #255	; 0xff
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24
 8001fe6:	e003      	b.n	8001ff0 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001fe8:	230f      	movs	r3, #15
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8001ff0:	230f      	movs	r3, #15
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d103      	bne.n	8002002 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2221      	movs	r2, #33	; 0x21
 8001ffe:	2101      	movs	r1, #1
 8002000:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002002:	230f      	movs	r3, #15
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	781b      	ldrb	r3, [r3, #0]
}
 8002008:	0018      	movs	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	b004      	add	sp, #16
 800200e:	bdb0      	pop	{r4, r5, r7, pc}
 8002010:	ff8fffbf 	.word	0xff8fffbf

08002014 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002014:	b5b0      	push	{r4, r5, r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2220      	movs	r2, #32
 8002028:	5c9b      	ldrb	r3, [r3, r2]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_RTC_SetTime+0x1e>
 800202e:	2302      	movs	r3, #2
 8002030:	e092      	b.n	8002158 <HAL_RTC_SetTime+0x144>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2220      	movs	r2, #32
 8002036:	2101      	movs	r1, #1
 8002038:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2221      	movs	r2, #33	; 0x21
 800203e:	2102      	movs	r1, #2
 8002040:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d125      	bne.n	8002094 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2240      	movs	r2, #64	; 0x40
 8002050:	4013      	ands	r3, r2
 8002052:	d102      	bne.n	800205a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2200      	movs	r2, #0
 8002058:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	0018      	movs	r0, r3
 8002060:	f000 fbf0 	bl	8002844 <RTC_ByteToBcd2>
 8002064:	0003      	movs	r3, r0
 8002066:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	785b      	ldrb	r3, [r3, #1]
 800206c:	0018      	movs	r0, r3
 800206e:	f000 fbe9 	bl	8002844 <RTC_ByteToBcd2>
 8002072:	0003      	movs	r3, r0
 8002074:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002076:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	789b      	ldrb	r3, [r3, #2]
 800207c:	0018      	movs	r0, r3
 800207e:	f000 fbe1 	bl	8002844 <RTC_ByteToBcd2>
 8002082:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002084:	0022      	movs	r2, r4
 8002086:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	78db      	ldrb	r3, [r3, #3]
 800208c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800208e:	4313      	orrs	r3, r2
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	e017      	b.n	80020c4 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2240      	movs	r2, #64	; 0x40
 800209c:	4013      	ands	r3, r2
 800209e:	d102      	bne.n	80020a6 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2200      	movs	r2, #0
 80020a4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	785b      	ldrb	r3, [r3, #1]
 80020b0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80020b2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80020b8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	78db      	ldrb	r3, [r3, #3]
 80020be:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80020c0:	4313      	orrs	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	22ca      	movs	r2, #202	; 0xca
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2253      	movs	r2, #83	; 0x53
 80020d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80020d4:	2513      	movs	r5, #19
 80020d6:	197c      	adds	r4, r7, r5
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	0018      	movs	r0, r3
 80020dc:	f000 fb44 	bl	8002768 <RTC_EnterInitMode>
 80020e0:	0003      	movs	r3, r0
 80020e2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80020e4:	0028      	movs	r0, r5
 80020e6:	183b      	adds	r3, r7, r0
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d120      	bne.n	8002130 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	491a      	ldr	r1, [pc, #104]	; (8002160 <HAL_RTC_SetTime+0x14c>)
 80020f6:	400a      	ands	r2, r1
 80020f8:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4917      	ldr	r1, [pc, #92]	; (8002164 <HAL_RTC_SetTime+0x150>)
 8002106:	400a      	ands	r2, r1
 8002108:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6899      	ldr	r1, [r3, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	431a      	orrs	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002122:	183c      	adds	r4, r7, r0
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	0018      	movs	r0, r3
 8002128:	f000 fb62 	bl	80027f0 <RTC_ExitInitMode>
 800212c:	0003      	movs	r3, r0
 800212e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002130:	2313      	movs	r3, #19
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d103      	bne.n	8002142 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2221      	movs	r2, #33	; 0x21
 800213e:	2101      	movs	r1, #1
 8002140:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	22ff      	movs	r2, #255	; 0xff
 8002148:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2220      	movs	r2, #32
 800214e:	2100      	movs	r1, #0
 8002150:	5499      	strb	r1, [r3, r2]

  return status;
 8002152:	2313      	movs	r3, #19
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	781b      	ldrb	r3, [r3, #0]
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	b006      	add	sp, #24
 800215e:	bdb0      	pop	{r4, r5, r7, pc}
 8002160:	007f7f7f 	.word	0x007f7f7f
 8002164:	fffbffff 	.word	0xfffbffff

08002168 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002168:	b5b0      	push	{r4, r5, r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2220      	movs	r2, #32
 800217c:	5c9b      	ldrb	r3, [r3, r2]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_RTC_SetDate+0x1e>
 8002182:	2302      	movs	r3, #2
 8002184:	e07e      	b.n	8002284 <HAL_RTC_SetDate+0x11c>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2220      	movs	r2, #32
 800218a:	2101      	movs	r1, #1
 800218c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2221      	movs	r2, #33	; 0x21
 8002192:	2102      	movs	r1, #2
 8002194:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10e      	bne.n	80021ba <HAL_RTC_SetDate+0x52>
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	785b      	ldrb	r3, [r3, #1]
 80021a0:	001a      	movs	r2, r3
 80021a2:	2310      	movs	r3, #16
 80021a4:	4013      	ands	r3, r2
 80021a6:	d008      	beq.n	80021ba <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	785b      	ldrb	r3, [r3, #1]
 80021ac:	2210      	movs	r2, #16
 80021ae:	4393      	bics	r3, r2
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	330a      	adds	r3, #10
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d11c      	bne.n	80021fa <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	78db      	ldrb	r3, [r3, #3]
 80021c4:	0018      	movs	r0, r3
 80021c6:	f000 fb3d 	bl	8002844 <RTC_ByteToBcd2>
 80021ca:	0003      	movs	r3, r0
 80021cc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	785b      	ldrb	r3, [r3, #1]
 80021d2:	0018      	movs	r0, r3
 80021d4:	f000 fb36 	bl	8002844 <RTC_ByteToBcd2>
 80021d8:	0003      	movs	r3, r0
 80021da:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80021dc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	789b      	ldrb	r3, [r3, #2]
 80021e2:	0018      	movs	r0, r3
 80021e4:	f000 fb2e 	bl	8002844 <RTC_ByteToBcd2>
 80021e8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80021ea:	0022      	movs	r2, r4
 80021ec:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	e00e      	b.n	8002218 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	78db      	ldrb	r3, [r3, #3]
 80021fe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	785b      	ldrb	r3, [r3, #1]
 8002204:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002206:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800220c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002214:	4313      	orrs	r3, r2
 8002216:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	22ca      	movs	r2, #202	; 0xca
 800221e:	625a      	str	r2, [r3, #36]	; 0x24
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2253      	movs	r2, #83	; 0x53
 8002226:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002228:	2513      	movs	r5, #19
 800222a:	197c      	adds	r4, r7, r5
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	0018      	movs	r0, r3
 8002230:	f000 fa9a 	bl	8002768 <RTC_EnterInitMode>
 8002234:	0003      	movs	r3, r0
 8002236:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002238:	0028      	movs	r0, r5
 800223a:	183b      	adds	r3, r7, r0
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10c      	bne.n	800225c <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4910      	ldr	r1, [pc, #64]	; (800228c <HAL_RTC_SetDate+0x124>)
 800224a:	400a      	ands	r2, r1
 800224c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800224e:	183c      	adds	r4, r7, r0
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	0018      	movs	r0, r3
 8002254:	f000 facc 	bl	80027f0 <RTC_ExitInitMode>
 8002258:	0003      	movs	r3, r0
 800225a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800225c:	2313      	movs	r3, #19
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d103      	bne.n	800226e <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2221      	movs	r2, #33	; 0x21
 800226a:	2101      	movs	r1, #1
 800226c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	22ff      	movs	r2, #255	; 0xff
 8002274:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2220      	movs	r2, #32
 800227a:	2100      	movs	r1, #0
 800227c:	5499      	strb	r1, [r3, r2]

  return status;
 800227e:	2313      	movs	r3, #19
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	781b      	ldrb	r3, [r3, #0]
}
 8002284:	0018      	movs	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	b006      	add	sp, #24
 800228a:	bdb0      	pop	{r4, r5, r7, pc}
 800228c:	00ffff3f 	.word	0x00ffff3f

08002290 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800229c:	4ba7      	ldr	r3, [pc, #668]	; (800253c <HAL_RTC_SetAlarm_IT+0x2ac>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	22fa      	movs	r2, #250	; 0xfa
 80022a2:	01d1      	lsls	r1, r2, #7
 80022a4:	0018      	movs	r0, r3
 80022a6:	f7fd ff2f 	bl	8000108 <__udivsi3>
 80022aa:	0003      	movs	r3, r0
 80022ac:	001a      	movs	r2, r3
 80022ae:	0013      	movs	r3, r2
 80022b0:	015b      	lsls	r3, r3, #5
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	189b      	adds	r3, r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2220      	movs	r2, #32
 80022c8:	5c9b      	ldrb	r3, [r3, r2]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_RTC_SetAlarm_IT+0x42>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e130      	b.n	8002534 <HAL_RTC_SetAlarm_IT+0x2a4>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2220      	movs	r2, #32
 80022d6:	2101      	movs	r1, #1
 80022d8:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2221      	movs	r2, #33	; 0x21
 80022de:	2102      	movs	r1, #2
 80022e0:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d136      	bne.n	8002356 <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2240      	movs	r2, #64	; 0x40
 80022f0:	4013      	ands	r3, r2
 80022f2:	d102      	bne.n	80022fa <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2200      	movs	r2, #0
 80022f8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	0018      	movs	r0, r3
 8002300:	f000 faa0 	bl	8002844 <RTC_ByteToBcd2>
 8002304:	0003      	movs	r3, r0
 8002306:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	785b      	ldrb	r3, [r3, #1]
 800230c:	0018      	movs	r0, r3
 800230e:	f000 fa99 	bl	8002844 <RTC_ByteToBcd2>
 8002312:	0003      	movs	r3, r0
 8002314:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002316:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	789b      	ldrb	r3, [r3, #2]
 800231c:	0018      	movs	r0, r3
 800231e:	f000 fa91 	bl	8002844 <RTC_ByteToBcd2>
 8002322:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002324:	0022      	movs	r2, r4
 8002326:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	78db      	ldrb	r3, [r3, #3]
 800232c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800232e:	431a      	orrs	r2, r3
 8002330:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2220      	movs	r2, #32
 8002336:	5c9b      	ldrb	r3, [r3, r2]
 8002338:	0018      	movs	r0, r3
 800233a:	f000 fa83 	bl	8002844 <RTC_ByteToBcd2>
 800233e:	0003      	movs	r3, r0
 8002340:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002342:	0022      	movs	r2, r4
 8002344:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800234a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002350:	4313      	orrs	r3, r2
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	e022      	b.n	800239c <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2240      	movs	r2, #64	; 0x40
 800235e:	4013      	ands	r3, r2
 8002360:	d102      	bne.n	8002368 <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2200      	movs	r2, #0
 8002366:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	785b      	ldrb	r3, [r3, #1]
 8002372:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002374:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800237a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	78db      	ldrb	r3, [r3, #3]
 8002380:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002382:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2120      	movs	r1, #32
 8002388:	5c5b      	ldrb	r3, [r3, r1]
 800238a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800238c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002392:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002398:	4313      	orrs	r3, r2
 800239a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	22ca      	movs	r2, #202	; 0xca
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2253      	movs	r2, #83	; 0x53
 80023b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d146      	bne.n	8002452 <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	495c      	ldr	r1, [pc, #368]	; (8002540 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80023d0:	400a      	ands	r2, r1
 80023d2:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	22ff      	movs	r2, #255	; 0xff
 80023dc:	401a      	ands	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4958      	ldr	r1, [pc, #352]	; (8002544 <HAL_RTC_SetAlarm_IT+0x2b4>)
 80023e4:	430a      	orrs	r2, r1
 80023e6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10d      	bne.n	8002410 <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	22ff      	movs	r2, #255	; 0xff
 80023fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2221      	movs	r2, #33	; 0x21
 8002400:	2103      	movs	r1, #3
 8002402:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	2100      	movs	r1, #0
 800240a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e091      	b.n	8002534 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2201      	movs	r2, #1
 8002418:	4013      	ands	r3, r2
 800241a:	d0e5      	beq.n	80023e8 <HAL_RTC_SetAlarm_IT+0x158>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2180      	movs	r1, #128	; 0x80
 8002438:	0049      	lsls	r1, r1, #1
 800243a:	430a      	orrs	r2, r1
 800243c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2180      	movs	r1, #128	; 0x80
 800244a:	0149      	lsls	r1, r1, #5
 800244c:	430a      	orrs	r2, r1
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	e055      	b.n	80024fe <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	493a      	ldr	r1, [pc, #232]	; (8002548 <HAL_RTC_SetAlarm_IT+0x2b8>)
 800245e:	400a      	ands	r2, r1
 8002460:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	22ff      	movs	r2, #255	; 0xff
 800246a:	401a      	ands	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4936      	ldr	r1, [pc, #216]	; (800254c <HAL_RTC_SetAlarm_IT+0x2bc>)
 8002472:	430a      	orrs	r2, r1
 8002474:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002476:	4b31      	ldr	r3, [pc, #196]	; (800253c <HAL_RTC_SetAlarm_IT+0x2ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	22fa      	movs	r2, #250	; 0xfa
 800247c:	01d1      	lsls	r1, r2, #7
 800247e:	0018      	movs	r0, r3
 8002480:	f7fd fe42 	bl	8000108 <__udivsi3>
 8002484:	0003      	movs	r3, r0
 8002486:	001a      	movs	r2, r3
 8002488:	0013      	movs	r3, r2
 800248a:	015b      	lsls	r3, r3, #5
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	189b      	adds	r3, r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3b01      	subs	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10d      	bne.n	80024be <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	22ff      	movs	r2, #255	; 0xff
 80024a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2221      	movs	r2, #33	; 0x21
 80024ae:	2103      	movs	r1, #3
 80024b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2220      	movs	r2, #32
 80024b6:	2100      	movs	r1, #0
 80024b8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e03a      	b.n	8002534 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2202      	movs	r2, #2
 80024c6:	4013      	ands	r3, r2
 80024c8:	d0e5      	beq.n	8002496 <HAL_RTC_SetAlarm_IT+0x206>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	69fa      	ldr	r2, [r7, #28]
 80024d0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2180      	movs	r1, #128	; 0x80
 80024e6:	0089      	lsls	r1, r1, #2
 80024e8:	430a      	orrs	r2, r1
 80024ea:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2180      	movs	r1, #128	; 0x80
 80024f8:	0189      	lsls	r1, r1, #6
 80024fa:	430a      	orrs	r2, r1
 80024fc:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80024fe:	4b14      	ldr	r3, [pc, #80]	; (8002550 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	4b13      	ldr	r3, [pc, #76]	; (8002550 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8002504:	2180      	movs	r1, #128	; 0x80
 8002506:	0289      	lsls	r1, r1, #10
 8002508:	430a      	orrs	r2, r1
 800250a:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800250c:	4b10      	ldr	r3, [pc, #64]	; (8002550 <HAL_RTC_SetAlarm_IT+0x2c0>)
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8002512:	2180      	movs	r1, #128	; 0x80
 8002514:	0289      	lsls	r1, r1, #10
 8002516:	430a      	orrs	r2, r1
 8002518:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	22ff      	movs	r2, #255	; 0xff
 8002520:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2221      	movs	r2, #33	; 0x21
 8002526:	2101      	movs	r1, #1
 8002528:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2220      	movs	r2, #32
 800252e:	2100      	movs	r1, #0
 8002530:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	0018      	movs	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	b009      	add	sp, #36	; 0x24
 800253a:	bd90      	pop	{r4, r7, pc}
 800253c:	20000000 	.word	0x20000000
 8002540:	fffffeff 	.word	0xfffffeff
 8002544:	fffffe7f 	.word	0xfffffe7f
 8002548:	fffffdff 	.word	0xfffffdff
 800254c:	fffffd7f 	.word	0xfffffd7f
 8002550:	40010400 	.word	0x40010400

08002554 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
  uint32_t subsecondtmpreg = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	429a      	cmp	r2, r3
 8002572:	d10e      	bne.n	8002592 <HAL_RTC_GetAlarm+0x3e>
  {
    sAlarm->Alarm = RTC_ALARM_A;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2280      	movs	r2, #128	; 0x80
 8002578:	0052      	lsls	r2, r2, #1
 800257a:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	045b      	lsls	r3, r3, #17
 800258c:	0c5b      	lsrs	r3, r3, #17
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	e00d      	b.n	80025ae <HAL_RTC_GetAlarm+0x5a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2280      	movs	r2, #128	; 0x80
 8002596:	0092      	lsls	r2, r2, #2
 8002598:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a8:	045b      	lsls	r3, r3, #17
 80025aa:	0c5b      	lsrs	r3, r3, #17
 80025ac:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_ALRMAR_HU_Pos);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	223f      	movs	r2, #63	; 0x3f
 80025b6:	4013      	ands	r3, r2
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	227f      	movs	r2, #127	; 0x7f
 80025c6:	4013      	ands	r3, r2
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	227f      	movs	r2, #127	; 0x7f
 80025d4:	4013      	ands	r3, r2
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_TR_PM_Pos);
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	0d9b      	lsrs	r3, r3, #22
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2201      	movs	r2, #1
 80025e4:	4013      	ands	r3, r2
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_ALRMAR_DU_Pos);
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	0e1b      	lsrs	r3, r3, #24
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	223f      	movs	r2, #63	; 0x3f
 80025fa:	4013      	ands	r3, r2
 80025fc:	b2d9      	uxtb	r1, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2220      	movs	r2, #32
 8002602:	5499      	strb	r1, [r3, r2]
  sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	05db      	lsls	r3, r3, #23
 800260a:	401a      	ands	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	4a19      	ldr	r2, [pc, #100]	; (8002678 <HAL_RTC_GetAlarm+0x124>)
 8002614:	401a      	ands	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d125      	bne.n	800266c <HAL_RTC_GetAlarm+0x118>
  {
    sAlarm->AlarmTime.Hours   = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	0018      	movs	r0, r3
 8002626:	f000 f92e 	bl	8002886 <RTC_Bcd2ToByte>
 800262a:	0003      	movs	r3, r0
 800262c:	001a      	movs	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	785b      	ldrb	r3, [r3, #1]
 8002636:	0018      	movs	r0, r3
 8002638:	f000 f925 	bl	8002886 <RTC_Bcd2ToByte>
 800263c:	0003      	movs	r3, r0
 800263e:	001a      	movs	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	789b      	ldrb	r3, [r3, #2]
 8002648:	0018      	movs	r0, r3
 800264a:	f000 f91c 	bl	8002886 <RTC_Bcd2ToByte>
 800264e:	0003      	movs	r3, r0
 8002650:	001a      	movs	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2220      	movs	r2, #32
 800265a:	5c9b      	ldrb	r3, [r3, r2]
 800265c:	0018      	movs	r0, r3
 800265e:	f000 f912 	bl	8002886 <RTC_Bcd2ToByte>
 8002662:	0003      	movs	r3, r0
 8002664:	0019      	movs	r1, r3
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2220      	movs	r2, #32
 800266a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	0018      	movs	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	b006      	add	sp, #24
 8002674:	bd80      	pop	{r7, pc}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	80808080 	.word	0x80808080

0800267c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002684:	4b21      	ldr	r3, [pc, #132]	; (800270c <HAL_RTC_AlarmIRQHandler+0x90>)
 8002686:	2280      	movs	r2, #128	; 0x80
 8002688:	0292      	lsls	r2, r2, #10
 800268a:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	015b      	lsls	r3, r3, #5
 8002696:	4013      	ands	r3, r2
 8002698:	d014      	beq.n	80026c4 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4013      	ands	r3, r2
 80026a6:	d00d      	beq.n	80026c4 <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	22ff      	movs	r2, #255	; 0xff
 80026b0:	401a      	ands	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4916      	ldr	r1, [pc, #88]	; (8002710 <HAL_RTC_AlarmIRQHandler+0x94>)
 80026b8:	430a      	orrs	r2, r1
 80026ba:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	0018      	movs	r0, r3
 80026c0:	f7fe f894 	bl	80007ec <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	019b      	lsls	r3, r3, #6
 80026ce:	4013      	ands	r3, r2
 80026d0:	d014      	beq.n	80026fc <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4013      	ands	r3, r2
 80026de:	d00d      	beq.n	80026fc <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	22ff      	movs	r2, #255	; 0xff
 80026e8:	401a      	ands	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4909      	ldr	r1, [pc, #36]	; (8002714 <HAL_RTC_AlarmIRQHandler+0x98>)
 80026f0:	430a      	orrs	r2, r1
 80026f2:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 f9e4 	bl	8002ac4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2221      	movs	r2, #33	; 0x21
 8002700:	2101      	movs	r1, #1
 8002702:	5499      	strb	r1, [r3, r2]
}
 8002704:	46c0      	nop			; (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	b002      	add	sp, #8
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40010400 	.word	0x40010400
 8002710:	fffffe7f 	.word	0xfffffe7f
 8002714:	fffffd7f 	.word	0xfffffd7f

08002718 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0e      	ldr	r2, [pc, #56]	; (8002764 <HAL_RTC_WaitForSynchro+0x4c>)
 800272a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800272c:	f7fe f9ca 	bl	8000ac4 <HAL_GetTick>
 8002730:	0003      	movs	r3, r0
 8002732:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002734:	e00a      	b.n	800274c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002736:	f7fe f9c5 	bl	8000ac4 <HAL_GetTick>
 800273a:	0002      	movs	r2, r0
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1ad2      	subs	r2, r2, r3
 8002740:	23fa      	movs	r3, #250	; 0xfa
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	429a      	cmp	r2, r3
 8002746:	d901      	bls.n	800274c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e006      	b.n	800275a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	4013      	ands	r3, r2
 8002756:	d0ee      	beq.n	8002736 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	0018      	movs	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	b004      	add	sp, #16
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	00017f5f 	.word	0x00017f5f

08002768 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002774:	230f      	movs	r3, #15
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2240      	movs	r2, #64	; 0x40
 8002784:	4013      	ands	r3, r2
 8002786:	d12c      	bne.n	80027e2 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2180      	movs	r1, #128	; 0x80
 8002794:	430a      	orrs	r2, r1
 8002796:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002798:	f7fe f994 	bl	8000ac4 <HAL_GetTick>
 800279c:	0003      	movs	r3, r0
 800279e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80027a0:	e014      	b.n	80027cc <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80027a2:	f7fe f98f 	bl	8000ac4 <HAL_GetTick>
 80027a6:	0002      	movs	r2, r0
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	1ad2      	subs	r2, r2, r3
 80027ac:	200f      	movs	r0, #15
 80027ae:	183b      	adds	r3, r7, r0
 80027b0:	1839      	adds	r1, r7, r0
 80027b2:	7809      	ldrb	r1, [r1, #0]
 80027b4:	7019      	strb	r1, [r3, #0]
 80027b6:	23fa      	movs	r3, #250	; 0xfa
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d906      	bls.n	80027cc <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2221      	movs	r2, #33	; 0x21
 80027c2:	2104      	movs	r1, #4
 80027c4:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80027c6:	183b      	adds	r3, r7, r0
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2240      	movs	r2, #64	; 0x40
 80027d4:	4013      	ands	r3, r2
 80027d6:	d104      	bne.n	80027e2 <RTC_EnterInitMode+0x7a>
 80027d8:	230f      	movs	r3, #15
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d1df      	bne.n	80027a2 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80027e2:	230f      	movs	r3, #15
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	781b      	ldrb	r3, [r3, #0]
}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b004      	add	sp, #16
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80027f0:	b590      	push	{r4, r7, lr}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027f8:	240f      	movs	r4, #15
 80027fa:	193b      	adds	r3, r7, r4
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2180      	movs	r1, #128	; 0x80
 800280c:	438a      	bics	r2, r1
 800280e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2220      	movs	r2, #32
 8002818:	4013      	ands	r3, r2
 800281a:	d10c      	bne.n	8002836 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	0018      	movs	r0, r3
 8002820:	f7ff ff7a 	bl	8002718 <HAL_RTC_WaitForSynchro>
 8002824:	1e03      	subs	r3, r0, #0
 8002826:	d006      	beq.n	8002836 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2221      	movs	r2, #33	; 0x21
 800282c:	2104      	movs	r1, #4
 800282e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002830:	193b      	adds	r3, r7, r4
 8002832:	2201      	movs	r2, #1
 8002834:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002836:	230f      	movs	r3, #15
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	781b      	ldrb	r3, [r3, #0]
}
 800283c:	0018      	movs	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	b005      	add	sp, #20
 8002842:	bd90      	pop	{r4, r7, pc}

08002844 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	0002      	movs	r2, r0
 800284c:	1dfb      	adds	r3, r7, #7
 800284e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002854:	e007      	b.n	8002866 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3301      	adds	r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800285c:	1dfb      	adds	r3, r7, #7
 800285e:	1dfa      	adds	r2, r7, #7
 8002860:	7812      	ldrb	r2, [r2, #0]
 8002862:	3a0a      	subs	r2, #10
 8002864:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8002866:	1dfb      	adds	r3, r7, #7
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b09      	cmp	r3, #9
 800286c:	d8f3      	bhi.n	8002856 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	b2da      	uxtb	r2, r3
 8002876:	1dfb      	adds	r3, r7, #7
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	4313      	orrs	r3, r2
 800287c:	b2db      	uxtb	r3, r3
}
 800287e:	0018      	movs	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	b004      	add	sp, #16
 8002884:	bd80      	pop	{r7, pc}

08002886 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	0002      	movs	r2, r0
 800288e:	1dfb      	adds	r3, r7, #7
 8002890:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002896:	1dfb      	adds	r3, r7, #7
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	b2db      	uxtb	r3, r3
 800289e:	001a      	movs	r2, r3
 80028a0:	0013      	movs	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	189b      	adds	r3, r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	1dfb      	adds	r3, r7, #7
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	210f      	movs	r1, #15
 80028b4:	400b      	ands	r3, r1
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	18d3      	adds	r3, r2, r3
 80028ba:	b2db      	uxtb	r3, r3
}
 80028bc:	0018      	movs	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	b004      	add	sp, #16
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_RTCEx_SetTimeStamp_IT>:
  * @note Although unused, parameter RTC_TimeStampPin has been kept for portability
  *       reasons.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp_IT(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
  /* Prevent compilation warning due to unused argument(s) if assert_param check
     is disabled */
  UNUSED(RTC_TimeStampPin);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	5c9b      	ldrb	r3, [r3, r2]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_RTCEx_SetTimeStamp_IT+0x1e>
 80028de:	2302      	movs	r3, #2
 80028e0:	e05e      	b.n	80029a0 <HAL_RTCEx_SetTimeStamp_IT+0xdc>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2220      	movs	r2, #32
 80028e6:	2101      	movs	r1, #1
 80028e8:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2221      	movs	r2, #33	; 0x21
 80028ee:	2102      	movs	r1, #2
 80028f0:	5499      	strb	r1, [r3, r2]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	4a2b      	ldr	r2, [pc, #172]	; (80029a8 <HAL_RTCEx_SetTimeStamp_IT+0xe4>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	22ca      	movs	r2, #202	; 0xca
 800290c:	625a      	str	r2, [r3, #36]	; 0x24
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2253      	movs	r2, #83	; 0x53
 8002914:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	22ff      	movs	r2, #255	; 0xff
 8002926:	401a      	ands	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	491f      	ldr	r1, [pc, #124]	; (80029ac <HAL_RTCEx_SetTimeStamp_IT+0xe8>)
 800292e:	430a      	orrs	r2, r1
 8002930:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	22ff      	movs	r2, #255	; 0xff
 800293a:	401a      	ands	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	491b      	ldr	r1, [pc, #108]	; (80029b0 <HAL_RTCEx_SetTimeStamp_IT+0xec>)
 8002942:	430a      	orrs	r2, r1
 8002944:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2180      	movs	r1, #128	; 0x80
 8002952:	0109      	lsls	r1, r1, #4
 8002954:	430a      	orrs	r2, r1
 8002956:	609a      	str	r2, [r3, #8]

  /* Enable IT Timestamp */
  __HAL_RTC_TIMESTAMP_ENABLE_IT(hrtc, RTC_IT_TS);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2180      	movs	r1, #128	; 0x80
 8002964:	0209      	lsls	r1, r1, #8
 8002966:	430a      	orrs	r2, r1
 8002968:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	22ff      	movs	r2, #255	; 0xff
 8002970:	625a      	str	r2, [r3, #36]	; 0x24

  /* RTC Timestamp Interrupt Configuration: EXTI configuration */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT();
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <HAL_RTCEx_SetTimeStamp_IT+0xf0>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <HAL_RTCEx_SetTimeStamp_IT+0xf0>)
 8002978:	2180      	movs	r1, #128	; 0x80
 800297a:	0309      	lsls	r1, r1, #12
 800297c:	430a      	orrs	r2, r1
 800297e:	601a      	str	r2, [r3, #0]
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_EDGE();
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <HAL_RTCEx_SetTimeStamp_IT+0xf0>)
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_RTCEx_SetTimeStamp_IT+0xf0>)
 8002986:	2180      	movs	r1, #128	; 0x80
 8002988:	0309      	lsls	r1, r1, #12
 800298a:	430a      	orrs	r2, r1
 800298c:	609a      	str	r2, [r3, #8]

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2221      	movs	r2, #33	; 0x21
 8002992:	2101      	movs	r1, #1
 8002994:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2220      	movs	r2, #32
 800299a:	2100      	movs	r1, #0
 800299c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	0018      	movs	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b006      	add	sp, #24
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	fffff7f7 	.word	0xfffff7f7
 80029ac:	fffff77f 	.word	0xfffff77f
 80029b0:	ffffef7f 	.word	0xffffef7f
 80029b4:	40010400 	.word	0x40010400

080029b8 <HAL_RTCEx_TamperTimeStampIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_TamperTimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's Flag for RTC Timestamp and Tamper */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG();
 80029c0:	4b2e      	ldr	r3, [pc, #184]	; (8002a7c <HAL_RTCEx_TamperTimeStampIRQHandler+0xc4>)
 80029c2:	2280      	movs	r2, #128	; 0x80
 80029c4:	0312      	lsls	r2, r2, #12
 80029c6:	615a      	str	r2, [r3, #20]

  /* Get the Timestamp interrupt source enable status */
  if (__HAL_RTC_TIMESTAMP_GET_IT_SOURCE(hrtc, RTC_IT_TS) != 0U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	4013      	ands	r3, r2
 80029d4:	d014      	beq.n	8002a00 <HAL_RTCEx_TamperTimeStampIRQHandler+0x48>
  {
    /* Get the pending status of the Timestamp Interrupt */
    if (__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSF) != 0U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	4013      	ands	r3, r2
 80029e2:	d00d      	beq.n	8002a00 <HAL_RTCEx_TamperTimeStampIRQHandler+0x48>
    {
      /* Timestamp callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->TimeStampEventCallback(hrtc);
#else
      HAL_RTCEx_TimeStampEventCallback(hrtc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	0018      	movs	r0, r3
 80029e8:	f000 f854 	bl	8002a94 <HAL_RTCEx_TimeStampEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Timestamp interrupt pending bit after returning from callback
         as RTC_TSTR and RTC_TSDR registers are cleared when TSF bit is reset */
      __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	22ff      	movs	r2, #255	; 0xff
 80029f4:	401a      	ands	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4921      	ldr	r1, [pc, #132]	; (8002a80 <HAL_RTCEx_TamperTimeStampIRQHandler+0xc8>)
 80029fc:	430a      	orrs	r2, r1
 80029fe:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RTC_TAMPER1_SUPPORT)
  /* Get the Tamper 1 interrupt source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP1) != 0U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <HAL_RTCEx_TamperTimeStampIRQHandler+0xcc>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d014      	beq.n	8002a36 <HAL_RTCEx_TamperTimeStampIRQHandler+0x7e>
  {
    /* Get the pending status of the Tamper 1 Interrupt */
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP1F) != 0U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	019b      	lsls	r3, r3, #6
 8002a16:	4013      	ands	r3, r2
 8002a18:	d00d      	beq.n	8002a36 <HAL_RTCEx_TamperTimeStampIRQHandler+0x7e>
    {
      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP1F);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	22ff      	movs	r2, #255	; 0xff
 8002a22:	401a      	ands	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4917      	ldr	r1, [pc, #92]	; (8002a88 <HAL_RTCEx_TamperTimeStampIRQHandler+0xd0>)
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	60da      	str	r2, [r3, #12]

      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper1EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper1EventCallback(hrtc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	0018      	movs	r0, r3
 8002a32:	f000 f837 	bl	8002aa4 <HAL_RTCEx_Tamper1EventCallback>
    }
  }
#endif /* RTC_TAMPER1_SUPPORT */

  /* Get the Tamper 2 interrupt source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP2) != 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	4a13      	ldr	r2, [pc, #76]	; (8002a8c <HAL_RTCEx_TamperTimeStampIRQHandler+0xd4>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d014      	beq.n	8002a6c <HAL_RTCEx_TamperTimeStampIRQHandler+0xb4>
  {
    /* Get the pending status of the Tamper 2 Interrupt */
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP2F) != 0U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	2380      	movs	r3, #128	; 0x80
 8002a4a:	01db      	lsls	r3, r3, #7
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d00d      	beq.n	8002a6c <HAL_RTCEx_TamperTimeStampIRQHandler+0xb4>
    {
      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP2F);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	22ff      	movs	r2, #255	; 0xff
 8002a58:	401a      	ands	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	490c      	ldr	r1, [pc, #48]	; (8002a90 <HAL_RTCEx_TamperTimeStampIRQHandler+0xd8>)
 8002a60:	430a      	orrs	r2, r1
 8002a62:	60da      	str	r2, [r3, #12]

      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper2EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper2EventCallback(hrtc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	0018      	movs	r0, r3
 8002a68:	f000 f824 	bl	8002ab4 <HAL_RTCEx_Tamper2EventCallback>
    }
  }
#endif /* RTC_TAMPER3_SUPPORT */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2221      	movs	r2, #33	; 0x21
 8002a70:	2101      	movs	r1, #1
 8002a72:	5499      	strb	r1, [r3, r2]
}
 8002a74:	46c0      	nop			; (mov r8, r8)
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b002      	add	sp, #8
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40010400 	.word	0x40010400
 8002a80:	fffff77f 	.word	0xfffff77f
 8002a84:	00010004 	.word	0x00010004
 8002a88:	ffffdf7f 	.word	0xffffdf7f
 8002a8c:	00080004 	.word	0x00080004
 8002a90:	ffffbf7f 	.word	0xffffbf7f

08002a94 <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b002      	add	sp, #8
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8002aac:	46c0      	nop			; (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b002      	add	sp, #8
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_RTCEx_Tamper2EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 8002abc:	46c0      	nop			; (mov r8, r8)
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b002      	add	sp, #8
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002acc:	46c0      	nop			; (mov r8, r8)
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b002      	add	sp, #8
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e044      	b.n	8002b70 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d107      	bne.n	8002afe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2278      	movs	r2, #120	; 0x78
 8002af2:	2100      	movs	r1, #0
 8002af4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7fd fee1 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2224      	movs	r2, #36	; 0x24
 8002b02:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2101      	movs	r1, #1
 8002b10:	438a      	bics	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f000 f830 	bl	8002b7c <UART_SetConfig>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e024      	b.n	8002b70 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	0018      	movs	r0, r3
 8002b32:	f000 faa7 	bl	8003084 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	490d      	ldr	r1, [pc, #52]	; (8002b78 <HAL_UART_Init+0xa4>)
 8002b42:	400a      	ands	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	212a      	movs	r1, #42	; 0x2a
 8002b52:	438a      	bics	r2, r1
 8002b54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2101      	movs	r1, #1
 8002b62:	430a      	orrs	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f000 fb3f 	bl	80031ec <UART_CheckIdleState>
 8002b6e:	0003      	movs	r3, r0
}
 8002b70:	0018      	movs	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b002      	add	sp, #8
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	ffffb7ff 	.word	0xffffb7ff

08002b7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b7c:	b5b0      	push	{r4, r5, r7, lr}
 8002b7e:	b08e      	sub	sp, #56	; 0x38
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b84:	231a      	movs	r3, #26
 8002b86:	2218      	movs	r2, #24
 8002b88:	189b      	adds	r3, r3, r2
 8002b8a:	19db      	adds	r3, r3, r7
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4ac6      	ldr	r2, [pc, #792]	; (8002ec8 <UART_SetConfig+0x34c>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4ac1      	ldr	r2, [pc, #772]	; (8002ecc <UART_SetConfig+0x350>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	0019      	movs	r1, r3
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4abb      	ldr	r2, [pc, #748]	; (8002ed0 <UART_SetConfig+0x354>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bec:	4313      	orrs	r3, r2
 8002bee:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	4ab7      	ldr	r2, [pc, #732]	; (8002ed4 <UART_SetConfig+0x358>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c02:	430a      	orrs	r2, r1
 8002c04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4ab3      	ldr	r2, [pc, #716]	; (8002ed8 <UART_SetConfig+0x35c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d131      	bne.n	8002c74 <UART_SetConfig+0xf8>
 8002c10:	4bb2      	ldr	r3, [pc, #712]	; (8002edc <UART_SetConfig+0x360>)
 8002c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c14:	2203      	movs	r2, #3
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d01d      	beq.n	8002c58 <UART_SetConfig+0xdc>
 8002c1c:	d823      	bhi.n	8002c66 <UART_SetConfig+0xea>
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d00c      	beq.n	8002c3c <UART_SetConfig+0xc0>
 8002c22:	d820      	bhi.n	8002c66 <UART_SetConfig+0xea>
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <UART_SetConfig+0xb2>
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d00e      	beq.n	8002c4a <UART_SetConfig+0xce>
 8002c2c:	e01b      	b.n	8002c66 <UART_SetConfig+0xea>
 8002c2e:	231b      	movs	r3, #27
 8002c30:	2218      	movs	r2, #24
 8002c32:	189b      	adds	r3, r3, r2
 8002c34:	19db      	adds	r3, r3, r7
 8002c36:	2201      	movs	r2, #1
 8002c38:	701a      	strb	r2, [r3, #0]
 8002c3a:	e09c      	b.n	8002d76 <UART_SetConfig+0x1fa>
 8002c3c:	231b      	movs	r3, #27
 8002c3e:	2218      	movs	r2, #24
 8002c40:	189b      	adds	r3, r3, r2
 8002c42:	19db      	adds	r3, r3, r7
 8002c44:	2202      	movs	r2, #2
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e095      	b.n	8002d76 <UART_SetConfig+0x1fa>
 8002c4a:	231b      	movs	r3, #27
 8002c4c:	2218      	movs	r2, #24
 8002c4e:	189b      	adds	r3, r3, r2
 8002c50:	19db      	adds	r3, r3, r7
 8002c52:	2204      	movs	r2, #4
 8002c54:	701a      	strb	r2, [r3, #0]
 8002c56:	e08e      	b.n	8002d76 <UART_SetConfig+0x1fa>
 8002c58:	231b      	movs	r3, #27
 8002c5a:	2218      	movs	r2, #24
 8002c5c:	189b      	adds	r3, r3, r2
 8002c5e:	19db      	adds	r3, r3, r7
 8002c60:	2208      	movs	r2, #8
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	e087      	b.n	8002d76 <UART_SetConfig+0x1fa>
 8002c66:	231b      	movs	r3, #27
 8002c68:	2218      	movs	r2, #24
 8002c6a:	189b      	adds	r3, r3, r2
 8002c6c:	19db      	adds	r3, r3, r7
 8002c6e:	2210      	movs	r2, #16
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	e080      	b.n	8002d76 <UART_SetConfig+0x1fa>
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a99      	ldr	r2, [pc, #612]	; (8002ee0 <UART_SetConfig+0x364>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d131      	bne.n	8002ce2 <UART_SetConfig+0x166>
 8002c7e:	4b97      	ldr	r3, [pc, #604]	; (8002edc <UART_SetConfig+0x360>)
 8002c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c82:	220c      	movs	r2, #12
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d01d      	beq.n	8002cc6 <UART_SetConfig+0x14a>
 8002c8a:	d823      	bhi.n	8002cd4 <UART_SetConfig+0x158>
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d00c      	beq.n	8002caa <UART_SetConfig+0x12e>
 8002c90:	d820      	bhi.n	8002cd4 <UART_SetConfig+0x158>
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <UART_SetConfig+0x120>
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d00e      	beq.n	8002cb8 <UART_SetConfig+0x13c>
 8002c9a:	e01b      	b.n	8002cd4 <UART_SetConfig+0x158>
 8002c9c:	231b      	movs	r3, #27
 8002c9e:	2218      	movs	r2, #24
 8002ca0:	189b      	adds	r3, r3, r2
 8002ca2:	19db      	adds	r3, r3, r7
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
 8002ca8:	e065      	b.n	8002d76 <UART_SetConfig+0x1fa>
 8002caa:	231b      	movs	r3, #27
 8002cac:	2218      	movs	r2, #24
 8002cae:	189b      	adds	r3, r3, r2
 8002cb0:	19db      	adds	r3, r3, r7
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	e05e      	b.n	8002d76 <UART_SetConfig+0x1fa>
 8002cb8:	231b      	movs	r3, #27
 8002cba:	2218      	movs	r2, #24
 8002cbc:	189b      	adds	r3, r3, r2
 8002cbe:	19db      	adds	r3, r3, r7
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	701a      	strb	r2, [r3, #0]
 8002cc4:	e057      	b.n	8002d76 <UART_SetConfig+0x1fa>
 8002cc6:	231b      	movs	r3, #27
 8002cc8:	2218      	movs	r2, #24
 8002cca:	189b      	adds	r3, r3, r2
 8002ccc:	19db      	adds	r3, r3, r7
 8002cce:	2208      	movs	r2, #8
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e050      	b.n	8002d76 <UART_SetConfig+0x1fa>
 8002cd4:	231b      	movs	r3, #27
 8002cd6:	2218      	movs	r2, #24
 8002cd8:	189b      	adds	r3, r3, r2
 8002cda:	19db      	adds	r3, r3, r7
 8002cdc:	2210      	movs	r2, #16
 8002cde:	701a      	strb	r2, [r3, #0]
 8002ce0:	e049      	b.n	8002d76 <UART_SetConfig+0x1fa>
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a7a      	ldr	r2, [pc, #488]	; (8002ed0 <UART_SetConfig+0x354>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d13e      	bne.n	8002d6a <UART_SetConfig+0x1ee>
 8002cec:	4b7b      	ldr	r3, [pc, #492]	; (8002edc <UART_SetConfig+0x360>)
 8002cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cf0:	23c0      	movs	r3, #192	; 0xc0
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	22c0      	movs	r2, #192	; 0xc0
 8002cf8:	0112      	lsls	r2, r2, #4
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d027      	beq.n	8002d4e <UART_SetConfig+0x1d2>
 8002cfe:	22c0      	movs	r2, #192	; 0xc0
 8002d00:	0112      	lsls	r2, r2, #4
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d82a      	bhi.n	8002d5c <UART_SetConfig+0x1e0>
 8002d06:	2280      	movs	r2, #128	; 0x80
 8002d08:	0112      	lsls	r2, r2, #4
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d011      	beq.n	8002d32 <UART_SetConfig+0x1b6>
 8002d0e:	2280      	movs	r2, #128	; 0x80
 8002d10:	0112      	lsls	r2, r2, #4
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d822      	bhi.n	8002d5c <UART_SetConfig+0x1e0>
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d004      	beq.n	8002d24 <UART_SetConfig+0x1a8>
 8002d1a:	2280      	movs	r2, #128	; 0x80
 8002d1c:	00d2      	lsls	r2, r2, #3
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00e      	beq.n	8002d40 <UART_SetConfig+0x1c4>
 8002d22:	e01b      	b.n	8002d5c <UART_SetConfig+0x1e0>
 8002d24:	231b      	movs	r3, #27
 8002d26:	2218      	movs	r2, #24
 8002d28:	189b      	adds	r3, r3, r2
 8002d2a:	19db      	adds	r3, r3, r7
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	e021      	b.n	8002d76 <UART_SetConfig+0x1fa>
 8002d32:	231b      	movs	r3, #27
 8002d34:	2218      	movs	r2, #24
 8002d36:	189b      	adds	r3, r3, r2
 8002d38:	19db      	adds	r3, r3, r7
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	701a      	strb	r2, [r3, #0]
 8002d3e:	e01a      	b.n	8002d76 <UART_SetConfig+0x1fa>
 8002d40:	231b      	movs	r3, #27
 8002d42:	2218      	movs	r2, #24
 8002d44:	189b      	adds	r3, r3, r2
 8002d46:	19db      	adds	r3, r3, r7
 8002d48:	2204      	movs	r2, #4
 8002d4a:	701a      	strb	r2, [r3, #0]
 8002d4c:	e013      	b.n	8002d76 <UART_SetConfig+0x1fa>
 8002d4e:	231b      	movs	r3, #27
 8002d50:	2218      	movs	r2, #24
 8002d52:	189b      	adds	r3, r3, r2
 8002d54:	19db      	adds	r3, r3, r7
 8002d56:	2208      	movs	r2, #8
 8002d58:	701a      	strb	r2, [r3, #0]
 8002d5a:	e00c      	b.n	8002d76 <UART_SetConfig+0x1fa>
 8002d5c:	231b      	movs	r3, #27
 8002d5e:	2218      	movs	r2, #24
 8002d60:	189b      	adds	r3, r3, r2
 8002d62:	19db      	adds	r3, r3, r7
 8002d64:	2210      	movs	r2, #16
 8002d66:	701a      	strb	r2, [r3, #0]
 8002d68:	e005      	b.n	8002d76 <UART_SetConfig+0x1fa>
 8002d6a:	231b      	movs	r3, #27
 8002d6c:	2218      	movs	r2, #24
 8002d6e:	189b      	adds	r3, r3, r2
 8002d70:	19db      	adds	r3, r3, r7
 8002d72:	2210      	movs	r2, #16
 8002d74:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a55      	ldr	r2, [pc, #340]	; (8002ed0 <UART_SetConfig+0x354>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d000      	beq.n	8002d82 <UART_SetConfig+0x206>
 8002d80:	e084      	b.n	8002e8c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d82:	231b      	movs	r3, #27
 8002d84:	2218      	movs	r2, #24
 8002d86:	189b      	adds	r3, r3, r2
 8002d88:	19db      	adds	r3, r3, r7
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d01d      	beq.n	8002dcc <UART_SetConfig+0x250>
 8002d90:	dc20      	bgt.n	8002dd4 <UART_SetConfig+0x258>
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d015      	beq.n	8002dc2 <UART_SetConfig+0x246>
 8002d96:	dc1d      	bgt.n	8002dd4 <UART_SetConfig+0x258>
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <UART_SetConfig+0x226>
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d005      	beq.n	8002dac <UART_SetConfig+0x230>
 8002da0:	e018      	b.n	8002dd4 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002da2:	f7fe fee1 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8002da6:	0003      	movs	r3, r0
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002daa:	e01c      	b.n	8002de6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dac:	4b4b      	ldr	r3, [pc, #300]	; (8002edc <UART_SetConfig+0x360>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2210      	movs	r2, #16
 8002db2:	4013      	ands	r3, r2
 8002db4:	d002      	beq.n	8002dbc <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002db6:	4b4b      	ldr	r3, [pc, #300]	; (8002ee4 <UART_SetConfig+0x368>)
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002dba:	e014      	b.n	8002de6 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002dbc:	4b4a      	ldr	r3, [pc, #296]	; (8002ee8 <UART_SetConfig+0x36c>)
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dc0:	e011      	b.n	8002de6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dc2:	f7fe fe21 	bl	8001a08 <HAL_RCC_GetSysClockFreq>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dca:	e00c      	b.n	8002de6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dd2:	e008      	b.n	8002de6 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002dd8:	231a      	movs	r3, #26
 8002dda:	2218      	movs	r2, #24
 8002ddc:	189b      	adds	r3, r3, r2
 8002dde:	19db      	adds	r3, r3, r7
 8002de0:	2201      	movs	r2, #1
 8002de2:	701a      	strb	r2, [r3, #0]
        break;
 8002de4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d100      	bne.n	8002dee <UART_SetConfig+0x272>
 8002dec:	e132      	b.n	8003054 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	0013      	movs	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	189b      	adds	r3, r3, r2
 8002df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d305      	bcc.n	8002e0a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d906      	bls.n	8002e18 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002e0a:	231a      	movs	r3, #26
 8002e0c:	2218      	movs	r2, #24
 8002e0e:	189b      	adds	r3, r3, r2
 8002e10:	19db      	adds	r3, r3, r7
 8002e12:	2201      	movs	r2, #1
 8002e14:	701a      	strb	r2, [r3, #0]
 8002e16:	e11d      	b.n	8003054 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	6939      	ldr	r1, [r7, #16]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	000b      	movs	r3, r1
 8002e26:	0e1b      	lsrs	r3, r3, #24
 8002e28:	0010      	movs	r0, r2
 8002e2a:	0205      	lsls	r5, r0, #8
 8002e2c:	431d      	orrs	r5, r3
 8002e2e:	000b      	movs	r3, r1
 8002e30:	021c      	lsls	r4, r3, #8
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	085b      	lsrs	r3, r3, #1
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68b8      	ldr	r0, [r7, #8]
 8002e40:	68f9      	ldr	r1, [r7, #12]
 8002e42:	1900      	adds	r0, r0, r4
 8002e44:	4169      	adcs	r1, r5
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f7fd f9e4 	bl	8000220 <__aeabi_uldivmod>
 8002e58:	0002      	movs	r2, r0
 8002e5a:	000b      	movs	r3, r1
 8002e5c:	0013      	movs	r3, r2
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e62:	23c0      	movs	r3, #192	; 0xc0
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d309      	bcc.n	8002e7e <UART_SetConfig+0x302>
 8002e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	035b      	lsls	r3, r3, #13
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d204      	bcs.n	8002e7e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e7a:	60da      	str	r2, [r3, #12]
 8002e7c:	e0ea      	b.n	8003054 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002e7e:	231a      	movs	r3, #26
 8002e80:	2218      	movs	r2, #24
 8002e82:	189b      	adds	r3, r3, r2
 8002e84:	19db      	adds	r3, r3, r7
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
 8002e8a:	e0e3      	b.n	8003054 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	69da      	ldr	r2, [r3, #28]
 8002e90:	2380      	movs	r3, #128	; 0x80
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d000      	beq.n	8002e9a <UART_SetConfig+0x31e>
 8002e98:	e085      	b.n	8002fa6 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002e9a:	231b      	movs	r3, #27
 8002e9c:	2218      	movs	r2, #24
 8002e9e:	189b      	adds	r3, r3, r2
 8002ea0:	19db      	adds	r3, r3, r7
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d837      	bhi.n	8002f18 <UART_SetConfig+0x39c>
 8002ea8:	009a      	lsls	r2, r3, #2
 8002eaa:	4b10      	ldr	r3, [pc, #64]	; (8002eec <UART_SetConfig+0x370>)
 8002eac:	18d3      	adds	r3, r2, r3
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eb2:	f7fe fe59 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002eba:	e036      	b.n	8002f2a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ebc:	f7fe fe6a 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ec4:	e031      	b.n	8002f2a <UART_SetConfig+0x3ae>
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	efff69f3 	.word	0xefff69f3
 8002ecc:	ffffcfff 	.word	0xffffcfff
 8002ed0:	40004800 	.word	0x40004800
 8002ed4:	fffff4ff 	.word	0xfffff4ff
 8002ed8:	40013800 	.word	0x40013800
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40004400 	.word	0x40004400
 8002ee4:	003d0900 	.word	0x003d0900
 8002ee8:	00f42400 	.word	0x00f42400
 8002eec:	0800356c 	.word	0x0800356c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ef0:	4b60      	ldr	r3, [pc, #384]	; (8003074 <UART_SetConfig+0x4f8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2210      	movs	r2, #16
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d002      	beq.n	8002f00 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002efa:	4b5f      	ldr	r3, [pc, #380]	; (8003078 <UART_SetConfig+0x4fc>)
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002efe:	e014      	b.n	8002f2a <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002f00:	4b5e      	ldr	r3, [pc, #376]	; (800307c <UART_SetConfig+0x500>)
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f04:	e011      	b.n	8002f2a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f06:	f7fe fd7f 	bl	8001a08 <HAL_RCC_GetSysClockFreq>
 8002f0a:	0003      	movs	r3, r0
 8002f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f0e:	e00c      	b.n	8002f2a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	021b      	lsls	r3, r3, #8
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f16:	e008      	b.n	8002f2a <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002f1c:	231a      	movs	r3, #26
 8002f1e:	2218      	movs	r2, #24
 8002f20:	189b      	adds	r3, r3, r2
 8002f22:	19db      	adds	r3, r3, r7
 8002f24:	2201      	movs	r2, #1
 8002f26:	701a      	strb	r2, [r3, #0]
        break;
 8002f28:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d100      	bne.n	8002f32 <UART_SetConfig+0x3b6>
 8002f30:	e090      	b.n	8003054 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	005a      	lsls	r2, r3, #1
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	085b      	lsrs	r3, r3, #1
 8002f3c:	18d2      	adds	r2, r2, r3
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	0019      	movs	r1, r3
 8002f44:	0010      	movs	r0, r2
 8002f46:	f7fd f8df 	bl	8000108 <__udivsi3>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f50:	2b0f      	cmp	r3, #15
 8002f52:	d921      	bls.n	8002f98 <UART_SetConfig+0x41c>
 8002f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	025b      	lsls	r3, r3, #9
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d21c      	bcs.n	8002f98 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	200e      	movs	r0, #14
 8002f64:	2418      	movs	r4, #24
 8002f66:	1903      	adds	r3, r0, r4
 8002f68:	19db      	adds	r3, r3, r7
 8002f6a:	210f      	movs	r1, #15
 8002f6c:	438a      	bics	r2, r1
 8002f6e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f72:	085b      	lsrs	r3, r3, #1
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2207      	movs	r2, #7
 8002f78:	4013      	ands	r3, r2
 8002f7a:	b299      	uxth	r1, r3
 8002f7c:	1903      	adds	r3, r0, r4
 8002f7e:	19db      	adds	r3, r3, r7
 8002f80:	1902      	adds	r2, r0, r4
 8002f82:	19d2      	adds	r2, r2, r7
 8002f84:	8812      	ldrh	r2, [r2, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	1902      	adds	r2, r0, r4
 8002f90:	19d2      	adds	r2, r2, r7
 8002f92:	8812      	ldrh	r2, [r2, #0]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	e05d      	b.n	8003054 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002f98:	231a      	movs	r3, #26
 8002f9a:	2218      	movs	r2, #24
 8002f9c:	189b      	adds	r3, r3, r2
 8002f9e:	19db      	adds	r3, r3, r7
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
 8002fa4:	e056      	b.n	8003054 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fa6:	231b      	movs	r3, #27
 8002fa8:	2218      	movs	r2, #24
 8002faa:	189b      	adds	r3, r3, r2
 8002fac:	19db      	adds	r3, r3, r7
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d822      	bhi.n	8002ffa <UART_SetConfig+0x47e>
 8002fb4:	009a      	lsls	r2, r3, #2
 8002fb6:	4b32      	ldr	r3, [pc, #200]	; (8003080 <UART_SetConfig+0x504>)
 8002fb8:	18d3      	adds	r3, r2, r3
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fbe:	f7fe fdd3 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8002fc2:	0003      	movs	r3, r0
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fc6:	e021      	b.n	800300c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fc8:	f7fe fde4 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fd0:	e01c      	b.n	800300c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fd2:	4b28      	ldr	r3, [pc, #160]	; (8003074 <UART_SetConfig+0x4f8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2210      	movs	r2, #16
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d002      	beq.n	8002fe2 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002fdc:	4b26      	ldr	r3, [pc, #152]	; (8003078 <UART_SetConfig+0x4fc>)
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002fe0:	e014      	b.n	800300c <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002fe2:	4b26      	ldr	r3, [pc, #152]	; (800307c <UART_SetConfig+0x500>)
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fe6:	e011      	b.n	800300c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fe8:	f7fe fd0e 	bl	8001a08 <HAL_RCC_GetSysClockFreq>
 8002fec:	0003      	movs	r3, r0
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ff0:	e00c      	b.n	800300c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ff8:	e008      	b.n	800300c <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002ffe:	231a      	movs	r3, #26
 8003000:	2218      	movs	r2, #24
 8003002:	189b      	adds	r3, r3, r2
 8003004:	19db      	adds	r3, r3, r7
 8003006:	2201      	movs	r2, #1
 8003008:	701a      	strb	r2, [r3, #0]
        break;
 800300a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800300c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d020      	beq.n	8003054 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	085a      	lsrs	r2, r3, #1
 8003018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301a:	18d2      	adds	r2, r2, r3
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	0019      	movs	r1, r3
 8003022:	0010      	movs	r0, r2
 8003024:	f7fd f870 	bl	8000108 <__udivsi3>
 8003028:	0003      	movs	r3, r0
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302e:	2b0f      	cmp	r3, #15
 8003030:	d90a      	bls.n	8003048 <UART_SetConfig+0x4cc>
 8003032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003034:	2380      	movs	r3, #128	; 0x80
 8003036:	025b      	lsls	r3, r3, #9
 8003038:	429a      	cmp	r2, r3
 800303a:	d205      	bcs.n	8003048 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	b29a      	uxth	r2, r3
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	e005      	b.n	8003054 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003048:	231a      	movs	r3, #26
 800304a:	2218      	movs	r2, #24
 800304c:	189b      	adds	r3, r3, r2
 800304e:	19db      	adds	r3, r3, r7
 8003050:	2201      	movs	r2, #1
 8003052:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	2200      	movs	r2, #0
 8003058:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	2200      	movs	r2, #0
 800305e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003060:	231a      	movs	r3, #26
 8003062:	2218      	movs	r2, #24
 8003064:	189b      	adds	r3, r3, r2
 8003066:	19db      	adds	r3, r3, r7
 8003068:	781b      	ldrb	r3, [r3, #0]
}
 800306a:	0018      	movs	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	b00e      	add	sp, #56	; 0x38
 8003070:	bdb0      	pop	{r4, r5, r7, pc}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	40021000 	.word	0x40021000
 8003078:	003d0900 	.word	0x003d0900
 800307c:	00f42400 	.word	0x00f42400
 8003080:	08003590 	.word	0x08003590

08003084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	2201      	movs	r2, #1
 8003092:	4013      	ands	r3, r2
 8003094:	d00b      	beq.n	80030ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4a4a      	ldr	r2, [pc, #296]	; (80031c8 <UART_AdvFeatureConfig+0x144>)
 800309e:	4013      	ands	r3, r2
 80030a0:	0019      	movs	r1, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	2202      	movs	r2, #2
 80030b4:	4013      	ands	r3, r2
 80030b6:	d00b      	beq.n	80030d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4a43      	ldr	r2, [pc, #268]	; (80031cc <UART_AdvFeatureConfig+0x148>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	0019      	movs	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	2204      	movs	r2, #4
 80030d6:	4013      	ands	r3, r2
 80030d8:	d00b      	beq.n	80030f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4a3b      	ldr	r2, [pc, #236]	; (80031d0 <UART_AdvFeatureConfig+0x14c>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	0019      	movs	r1, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	2208      	movs	r2, #8
 80030f8:	4013      	ands	r3, r2
 80030fa:	d00b      	beq.n	8003114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	4a34      	ldr	r2, [pc, #208]	; (80031d4 <UART_AdvFeatureConfig+0x150>)
 8003104:	4013      	ands	r3, r2
 8003106:	0019      	movs	r1, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	2210      	movs	r2, #16
 800311a:	4013      	ands	r3, r2
 800311c:	d00b      	beq.n	8003136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4a2c      	ldr	r2, [pc, #176]	; (80031d8 <UART_AdvFeatureConfig+0x154>)
 8003126:	4013      	ands	r3, r2
 8003128:	0019      	movs	r1, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	2220      	movs	r2, #32
 800313c:	4013      	ands	r3, r2
 800313e:	d00b      	beq.n	8003158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	4a25      	ldr	r2, [pc, #148]	; (80031dc <UART_AdvFeatureConfig+0x158>)
 8003148:	4013      	ands	r3, r2
 800314a:	0019      	movs	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	2240      	movs	r2, #64	; 0x40
 800315e:	4013      	ands	r3, r2
 8003160:	d01d      	beq.n	800319e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4a1d      	ldr	r2, [pc, #116]	; (80031e0 <UART_AdvFeatureConfig+0x15c>)
 800316a:	4013      	ands	r3, r2
 800316c:	0019      	movs	r1, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800317e:	2380      	movs	r3, #128	; 0x80
 8003180:	035b      	lsls	r3, r3, #13
 8003182:	429a      	cmp	r2, r3
 8003184:	d10b      	bne.n	800319e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4a15      	ldr	r2, [pc, #84]	; (80031e4 <UART_AdvFeatureConfig+0x160>)
 800318e:	4013      	ands	r3, r2
 8003190:	0019      	movs	r1, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	2280      	movs	r2, #128	; 0x80
 80031a4:	4013      	ands	r3, r2
 80031a6:	d00b      	beq.n	80031c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4a0e      	ldr	r2, [pc, #56]	; (80031e8 <UART_AdvFeatureConfig+0x164>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	0019      	movs	r1, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	605a      	str	r2, [r3, #4]
  }
}
 80031c0:	46c0      	nop			; (mov r8, r8)
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b002      	add	sp, #8
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	fffdffff 	.word	0xfffdffff
 80031cc:	fffeffff 	.word	0xfffeffff
 80031d0:	fffbffff 	.word	0xfffbffff
 80031d4:	ffff7fff 	.word	0xffff7fff
 80031d8:	ffffefff 	.word	0xffffefff
 80031dc:	ffffdfff 	.word	0xffffdfff
 80031e0:	ffefffff 	.word	0xffefffff
 80031e4:	ff9fffff 	.word	0xff9fffff
 80031e8:	fff7ffff 	.word	0xfff7ffff

080031ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b092      	sub	sp, #72	; 0x48
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2284      	movs	r2, #132	; 0x84
 80031f8:	2100      	movs	r1, #0
 80031fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031fc:	f7fd fc62 	bl	8000ac4 <HAL_GetTick>
 8003200:	0003      	movs	r3, r0
 8003202:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2208      	movs	r2, #8
 800320c:	4013      	ands	r3, r2
 800320e:	2b08      	cmp	r3, #8
 8003210:	d12c      	bne.n	800326c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003214:	2280      	movs	r2, #128	; 0x80
 8003216:	0391      	lsls	r1, r2, #14
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4a46      	ldr	r2, [pc, #280]	; (8003334 <UART_CheckIdleState+0x148>)
 800321c:	9200      	str	r2, [sp, #0]
 800321e:	2200      	movs	r2, #0
 8003220:	f000 f88c 	bl	800333c <UART_WaitOnFlagUntilTimeout>
 8003224:	1e03      	subs	r3, r0, #0
 8003226:	d021      	beq.n	800326c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003228:	f3ef 8310 	mrs	r3, PRIMASK
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003230:	63bb      	str	r3, [r7, #56]	; 0x38
 8003232:	2301      	movs	r3, #1
 8003234:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003238:	f383 8810 	msr	PRIMASK, r3
}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2180      	movs	r1, #128	; 0x80
 800324a:	438a      	bics	r2, r1
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	f383 8810 	msr	PRIMASK, r3
}
 8003258:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2220      	movs	r2, #32
 800325e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2278      	movs	r2, #120	; 0x78
 8003264:	2100      	movs	r1, #0
 8003266:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e05f      	b.n	800332c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2204      	movs	r2, #4
 8003274:	4013      	ands	r3, r2
 8003276:	2b04      	cmp	r3, #4
 8003278:	d146      	bne.n	8003308 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800327a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327c:	2280      	movs	r2, #128	; 0x80
 800327e:	03d1      	lsls	r1, r2, #15
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	4a2c      	ldr	r2, [pc, #176]	; (8003334 <UART_CheckIdleState+0x148>)
 8003284:	9200      	str	r2, [sp, #0]
 8003286:	2200      	movs	r2, #0
 8003288:	f000 f858 	bl	800333c <UART_WaitOnFlagUntilTimeout>
 800328c:	1e03      	subs	r3, r0, #0
 800328e:	d03b      	beq.n	8003308 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003290:	f3ef 8310 	mrs	r3, PRIMASK
 8003294:	60fb      	str	r3, [r7, #12]
  return(result);
 8003296:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003298:	637b      	str	r3, [r7, #52]	; 0x34
 800329a:	2301      	movs	r3, #1
 800329c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f383 8810 	msr	PRIMASK, r3
}
 80032a4:	46c0      	nop			; (mov r8, r8)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4921      	ldr	r1, [pc, #132]	; (8003338 <UART_CheckIdleState+0x14c>)
 80032b2:	400a      	ands	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f383 8810 	msr	PRIMASK, r3
}
 80032c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c2:	f3ef 8310 	mrs	r3, PRIMASK
 80032c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80032c8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ca:	633b      	str	r3, [r7, #48]	; 0x30
 80032cc:	2301      	movs	r3, #1
 80032ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f383 8810 	msr	PRIMASK, r3
}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2101      	movs	r1, #1
 80032e4:	438a      	bics	r2, r1
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	f383 8810 	msr	PRIMASK, r3
}
 80032f2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	2120      	movs	r1, #32
 80032fa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2278      	movs	r2, #120	; 0x78
 8003300:	2100      	movs	r1, #0
 8003302:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e011      	b.n	800332c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2280      	movs	r2, #128	; 0x80
 8003312:	2120      	movs	r1, #32
 8003314:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2278      	movs	r2, #120	; 0x78
 8003326:	2100      	movs	r1, #0
 8003328:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	0018      	movs	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	b010      	add	sp, #64	; 0x40
 8003332:	bd80      	pop	{r7, pc}
 8003334:	01ffffff 	.word	0x01ffffff
 8003338:	fffffedf 	.word	0xfffffedf

0800333c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	1dfb      	adds	r3, r7, #7
 800334a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800334c:	e04b      	b.n	80033e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	3301      	adds	r3, #1
 8003352:	d048      	beq.n	80033e6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003354:	f7fd fbb6 	bl	8000ac4 <HAL_GetTick>
 8003358:	0002      	movs	r2, r0
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	429a      	cmp	r2, r3
 8003362:	d302      	bcc.n	800336a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e04b      	b.n	8003406 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2204      	movs	r2, #4
 8003376:	4013      	ands	r3, r2
 8003378:	d035      	beq.n	80033e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	2208      	movs	r2, #8
 8003382:	4013      	ands	r3, r2
 8003384:	2b08      	cmp	r3, #8
 8003386:	d111      	bne.n	80033ac <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2208      	movs	r2, #8
 800338e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	0018      	movs	r0, r3
 8003394:	f000 f83c 	bl	8003410 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2284      	movs	r2, #132	; 0x84
 800339c:	2108      	movs	r1, #8
 800339e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2278      	movs	r2, #120	; 0x78
 80033a4:	2100      	movs	r1, #0
 80033a6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e02c      	b.n	8003406 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69da      	ldr	r2, [r3, #28]
 80033b2:	2380      	movs	r3, #128	; 0x80
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	401a      	ands	r2, r3
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	429a      	cmp	r2, r3
 80033be:	d112      	bne.n	80033e6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2280      	movs	r2, #128	; 0x80
 80033c6:	0112      	lsls	r2, r2, #4
 80033c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	0018      	movs	r0, r3
 80033ce:	f000 f81f 	bl	8003410 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2284      	movs	r2, #132	; 0x84
 80033d6:	2120      	movs	r1, #32
 80033d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2278      	movs	r2, #120	; 0x78
 80033de:	2100      	movs	r1, #0
 80033e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e00f      	b.n	8003406 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	4013      	ands	r3, r2
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	425a      	negs	r2, r3
 80033f6:	4153      	adcs	r3, r2
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	001a      	movs	r2, r3
 80033fc:	1dfb      	adds	r3, r7, #7
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d0a4      	beq.n	800334e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	0018      	movs	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	b004      	add	sp, #16
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08e      	sub	sp, #56	; 0x38
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003418:	f3ef 8310 	mrs	r3, PRIMASK
 800341c:	617b      	str	r3, [r7, #20]
  return(result);
 800341e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003420:	637b      	str	r3, [r7, #52]	; 0x34
 8003422:	2301      	movs	r3, #1
 8003424:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	f383 8810 	msr	PRIMASK, r3
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4926      	ldr	r1, [pc, #152]	; (80034d4 <UART_EndRxTransfer+0xc4>)
 800343a:	400a      	ands	r2, r1
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003440:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f383 8810 	msr	PRIMASK, r3
}
 8003448:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800344a:	f3ef 8310 	mrs	r3, PRIMASK
 800344e:	623b      	str	r3, [r7, #32]
  return(result);
 8003450:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003452:	633b      	str	r3, [r7, #48]	; 0x30
 8003454:	2301      	movs	r3, #1
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	f383 8810 	msr	PRIMASK, r3
}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2101      	movs	r1, #1
 800346c:	438a      	bics	r2, r1
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003472:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003476:	f383 8810 	msr	PRIMASK, r3
}
 800347a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003480:	2b01      	cmp	r3, #1
 8003482:	d118      	bne.n	80034b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003484:	f3ef 8310 	mrs	r3, PRIMASK
 8003488:	60bb      	str	r3, [r7, #8]
  return(result);
 800348a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800348c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800348e:	2301      	movs	r3, #1
 8003490:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f383 8810 	msr	PRIMASK, r3
}
 8003498:	46c0      	nop			; (mov r8, r8)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2110      	movs	r1, #16
 80034a6:	438a      	bics	r2, r1
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f383 8810 	msr	PRIMASK, r3
}
 80034b4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2280      	movs	r2, #128	; 0x80
 80034ba:	2120      	movs	r1, #32
 80034bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b00e      	add	sp, #56	; 0x38
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	fffffedf 	.word	0xfffffedf

080034d8 <memset>:
 80034d8:	0003      	movs	r3, r0
 80034da:	1882      	adds	r2, r0, r2
 80034dc:	4293      	cmp	r3, r2
 80034de:	d100      	bne.n	80034e2 <memset+0xa>
 80034e0:	4770      	bx	lr
 80034e2:	7019      	strb	r1, [r3, #0]
 80034e4:	3301      	adds	r3, #1
 80034e6:	e7f9      	b.n	80034dc <memset+0x4>

080034e8 <__libc_init_array>:
 80034e8:	b570      	push	{r4, r5, r6, lr}
 80034ea:	2600      	movs	r6, #0
 80034ec:	4c0c      	ldr	r4, [pc, #48]	; (8003520 <__libc_init_array+0x38>)
 80034ee:	4d0d      	ldr	r5, [pc, #52]	; (8003524 <__libc_init_array+0x3c>)
 80034f0:	1b64      	subs	r4, r4, r5
 80034f2:	10a4      	asrs	r4, r4, #2
 80034f4:	42a6      	cmp	r6, r4
 80034f6:	d109      	bne.n	800350c <__libc_init_array+0x24>
 80034f8:	2600      	movs	r6, #0
 80034fa:	f000 f819 	bl	8003530 <_init>
 80034fe:	4c0a      	ldr	r4, [pc, #40]	; (8003528 <__libc_init_array+0x40>)
 8003500:	4d0a      	ldr	r5, [pc, #40]	; (800352c <__libc_init_array+0x44>)
 8003502:	1b64      	subs	r4, r4, r5
 8003504:	10a4      	asrs	r4, r4, #2
 8003506:	42a6      	cmp	r6, r4
 8003508:	d105      	bne.n	8003516 <__libc_init_array+0x2e>
 800350a:	bd70      	pop	{r4, r5, r6, pc}
 800350c:	00b3      	lsls	r3, r6, #2
 800350e:	58eb      	ldr	r3, [r5, r3]
 8003510:	4798      	blx	r3
 8003512:	3601      	adds	r6, #1
 8003514:	e7ee      	b.n	80034f4 <__libc_init_array+0xc>
 8003516:	00b3      	lsls	r3, r6, #2
 8003518:	58eb      	ldr	r3, [r5, r3]
 800351a:	4798      	blx	r3
 800351c:	3601      	adds	r6, #1
 800351e:	e7f2      	b.n	8003506 <__libc_init_array+0x1e>
 8003520:	080035bc 	.word	0x080035bc
 8003524:	080035bc 	.word	0x080035bc
 8003528:	080035c0 	.word	0x080035c0
 800352c:	080035bc 	.word	0x080035bc

08003530 <_init>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003536:	bc08      	pop	{r3}
 8003538:	469e      	mov	lr, r3
 800353a:	4770      	bx	lr

0800353c <_fini>:
 800353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003542:	bc08      	pop	{r3}
 8003544:	469e      	mov	lr, r3
 8003546:	4770      	bx	lr
