
19_KEYPAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080038bc  080038bc  000138bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003970  08003970  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003970  08003970  00013970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003978  08003978  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003978  08003978  00013978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800397c  0800397c  0001397c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000078  080039f8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080039f8  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c36  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017d2  00000000  00000000  00028d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  0002a4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005a4  00000000  00000000  0002ac58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000146c9  00000000  00000000  0002b1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f29  00000000  00000000  0003f8c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007955b  00000000  00000000  000497ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020c0  00000000  00000000  000c2d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000c4e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080038a4 	.word	0x080038a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	080038a4 	.word	0x080038a4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c2:	f000 fa99 	bl	80009f8 <HAL_Init>
  /* USER CODE BEGIN Init */
//  keypad_init();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c6:	f000 f817 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ca:	f000 f8b7 	bl	800063c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004ce:	f000 f885 	bl	80005dc <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  char key = keypad_scan();
 80004d2:	1dfc      	adds	r4, r7, #7
 80004d4:	f000 f8f8 	bl	80006c8 <keypad_scan>
 80004d8:	0003      	movs	r3, r0
 80004da:	7023      	strb	r3, [r4, #0]
	      if (key != 0) {
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d0f6      	beq.n	80004d2 <main+0x16>
	        printf("Key Pressed: %c\r\n", key);
 80004e4:	1dfb      	adds	r3, r7, #7
 80004e6:	781a      	ldrb	r2, [r3, #0]
 80004e8:	4b02      	ldr	r3, [pc, #8]	; (80004f4 <main+0x38>)
 80004ea:	0011      	movs	r1, r2
 80004ec:	0018      	movs	r0, r3
 80004ee:	f002 fb33 	bl	8002b58 <iprintf>
  {
 80004f2:	e7ee      	b.n	80004d2 <main+0x16>
 80004f4:	080038bc 	.word	0x080038bc

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b09d      	sub	sp, #116	; 0x74
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	2438      	movs	r4, #56	; 0x38
 8000500:	193b      	adds	r3, r7, r4
 8000502:	0018      	movs	r0, r3
 8000504:	2338      	movs	r3, #56	; 0x38
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f002 fb81 	bl	8002c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050e:	2324      	movs	r3, #36	; 0x24
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	0018      	movs	r0, r3
 8000514:	2314      	movs	r3, #20
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f002 fb79 	bl	8002c10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800051e:	003b      	movs	r3, r7
 8000520:	0018      	movs	r0, r3
 8000522:	2324      	movs	r3, #36	; 0x24
 8000524:	001a      	movs	r2, r3
 8000526:	2100      	movs	r1, #0
 8000528:	f002 fb72 	bl	8002c10 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052c:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <SystemClock_Config+0xdc>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a29      	ldr	r2, [pc, #164]	; (80005d8 <SystemClock_Config+0xe0>)
 8000532:	401a      	ands	r2, r3
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <SystemClock_Config+0xdc>)
 8000536:	2180      	movs	r1, #128	; 0x80
 8000538:	0109      	lsls	r1, r1, #4
 800053a:	430a      	orrs	r2, r1
 800053c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800053e:	0021      	movs	r1, r4
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2202      	movs	r2, #2
 8000544:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2201      	movs	r2, #1
 800054a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2210      	movs	r2, #16
 8000550:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2202      	movs	r2, #2
 8000556:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2280      	movs	r2, #128	; 0x80
 8000562:	02d2      	lsls	r2, r2, #11
 8000564:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2280      	movs	r2, #128	; 0x80
 800056a:	03d2      	lsls	r2, r2, #15
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	187b      	adds	r3, r7, r1
 8000570:	0018      	movs	r0, r3
 8000572:	f000 fd15 	bl	8000fa0 <HAL_RCC_OscConfig>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800057a:	f000 f903 	bl	8000784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057e:	2124      	movs	r1, #36	; 0x24
 8000580:	187b      	adds	r3, r7, r1
 8000582:	220f      	movs	r2, #15
 8000584:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2203      	movs	r2, #3
 800058a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2101      	movs	r1, #1
 80005a2:	0018      	movs	r0, r3
 80005a4:	f001 f8c0 	bl	8001728 <HAL_RCC_ClockConfig>
 80005a8:	1e03      	subs	r3, r0, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005ac:	f000 f8ea 	bl	8000784 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005b0:	003b      	movs	r3, r7
 80005b2:	2201      	movs	r2, #1
 80005b4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005b6:	003b      	movs	r3, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005bc:	003b      	movs	r3, r7
 80005be:	0018      	movs	r0, r3
 80005c0:	f001 fad6 	bl	8001b70 <HAL_RCCEx_PeriphCLKConfig>
 80005c4:	1e03      	subs	r3, r0, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80005c8:	f000 f8dc 	bl	8000784 <Error_Handler>
  }
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b01d      	add	sp, #116	; 0x74
 80005d2:	bd90      	pop	{r4, r7, pc}
 80005d4:	40007000 	.word	0x40007000
 80005d8:	ffffe7ff 	.word	0xffffe7ff

080005dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e0:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_USART1_UART_Init+0x58>)
 80005e2:	4a15      	ldr	r2, [pc, #84]	; (8000638 <MX_USART1_UART_Init+0x5c>)
 80005e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005e6:	4b13      	ldr	r3, [pc, #76]	; (8000634 <MX_USART1_UART_Init+0x58>)
 80005e8:	22e1      	movs	r2, #225	; 0xe1
 80005ea:	0252      	lsls	r2, r2, #9
 80005ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_USART1_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_USART1_UART_Init+0x58>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_USART1_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_USART1_UART_Init+0x58>)
 8000602:	220c      	movs	r2, #12
 8000604:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <MX_USART1_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_USART1_UART_Init+0x58>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <MX_USART1_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_USART1_UART_Init+0x58>)
 800061a:	2200      	movs	r2, #0
 800061c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <MX_USART1_UART_Init+0x58>)
 8000620:	0018      	movs	r0, r3
 8000622:	f001 fc33 	bl	8001e8c <HAL_UART_Init>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800062a:	f000 f8ab 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000094 	.word	0x20000094
 8000638:	40013800 	.word	0x40013800

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	0018      	movs	r0, r3
 8000646:	2314      	movs	r3, #20
 8000648:	001a      	movs	r2, r3
 800064a:	2100      	movs	r1, #0
 800064c:	f002 fae0 	bl	8002c10 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <MX_GPIO_Init+0x88>)
 8000652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <MX_GPIO_Init+0x88>)
 8000656:	2101      	movs	r1, #1
 8000658:	430a      	orrs	r2, r1
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <MX_GPIO_Init+0x88>)
 800065e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000660:	2201      	movs	r2, #1
 8000662:	4013      	ands	r3, r2
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BSP_R4_OUTPUT_Pin|BSP_R3_OUTPUT_Pin|BSP_R2_OUTPUT_Pin|BSP_R1_OUTPUT_Pin, GPIO_PIN_RESET);
 8000668:	23a0      	movs	r3, #160	; 0xa0
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	2200      	movs	r2, #0
 800066e:	21f0      	movs	r1, #240	; 0xf0
 8000670:	0018      	movs	r0, r3
 8000672:	f000 fc78 	bl	8000f66 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BSP_C4_INPUT_Pin BSP_C3_INPUT_Pin BSP_C2_INPUT_Pin BSP_C1_INPUT_Pin */
  GPIO_InitStruct.Pin = BSP_C4_INPUT_Pin|BSP_C3_INPUT_Pin|BSP_C2_INPUT_Pin|BSP_C1_INPUT_Pin;
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	220f      	movs	r2, #15
 800067a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2202      	movs	r2, #2
 8000686:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	1d3a      	adds	r2, r7, #4
 800068a:	23a0      	movs	r3, #160	; 0xa0
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fad5 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : BSP_R4_OUTPUT_Pin BSP_R3_OUTPUT_Pin BSP_R2_OUTPUT_Pin BSP_R1_OUTPUT_Pin */
  GPIO_InitStruct.Pin = BSP_R4_OUTPUT_Pin|BSP_R3_OUTPUT_Pin|BSP_R2_OUTPUT_Pin|BSP_R1_OUTPUT_Pin;
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	22f0      	movs	r2, #240	; 0xf0
 800069a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2201      	movs	r2, #1
 80006a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	1d3a      	adds	r2, r7, #4
 80006b0:	23a0      	movs	r3, #160	; 0xa0
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	0011      	movs	r1, r2
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 fac2 	bl	8000c40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b006      	add	sp, #24
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000

080006c8 <keypad_scan>:
//  GPIO_InitStruct.Pull = GPIO_PULLUP;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
//}

char keypad_scan(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
  char key = 0;
 80006ce:	230f      	movs	r3, #15
 80006d0:	18fb      	adds	r3, r7, r3
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
  // Scan rows
  for (int i = 0; i < 4; i++) {
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	e046      	b.n	800076a <keypad_scan+0xa2>
    HAL_GPIO_WritePin(R1_PORT, R1_PIN << i, GPIO_PIN_RESET); // Select row
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	409a      	lsls	r2, r3
 80006e2:	0013      	movs	r3, r2
 80006e4:	b299      	uxth	r1, r3
 80006e6:	23a0      	movs	r3, #160	; 0xa0
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	2200      	movs	r2, #0
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 fc3a 	bl	8000f66 <HAL_GPIO_WritePin>
    for (int j = 0; j < 4; j++) {
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	e027      	b.n	8000748 <keypad_scan+0x80>
      if (HAL_GPIO_ReadPin(C1_PORT, C1_PIN << j) == GPIO_PIN_RESET) {
 80006f8:	2208      	movs	r2, #8
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	409a      	lsls	r2, r3
 80006fe:	0013      	movs	r3, r2
 8000700:	b29a      	uxth	r2, r3
 8000702:	23a0      	movs	r3, #160	; 0xa0
 8000704:	05db      	lsls	r3, r3, #23
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f000 fc0f 	bl	8000f2c <HAL_GPIO_ReadPin>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d117      	bne.n	8000742 <keypad_scan+0x7a>
        key = keys[i][j]; // Key pressed
 8000712:	230f      	movs	r3, #15
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	491a      	ldr	r1, [pc, #104]	; (8000780 <keypad_scan+0xb8>)
 8000718:	68ba      	ldr	r2, [r7, #8]
 800071a:	0092      	lsls	r2, r2, #2
 800071c:	1889      	adds	r1, r1, r2
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	188a      	adds	r2, r1, r2
 8000722:	7812      	ldrb	r2, [r2, #0]
 8000724:	701a      	strb	r2, [r3, #0]
        while (HAL_GPIO_ReadPin(C1_PORT, C1_PIN << j) == GPIO_PIN_RESET); // Wait for key release
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	2208      	movs	r2, #8
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	409a      	lsls	r2, r3
 800072e:	0013      	movs	r3, r2
 8000730:	b29a      	uxth	r2, r3
 8000732:	23a0      	movs	r3, #160	; 0xa0
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f000 fbf7 	bl	8000f2c <HAL_GPIO_ReadPin>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d0f2      	beq.n	8000728 <keypad_scan+0x60>
    for (int j = 0; j < 4; j++) {
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	3301      	adds	r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b03      	cmp	r3, #3
 800074c:	ddd4      	ble.n	80006f8 <keypad_scan+0x30>
      }
    }
    HAL_GPIO_WritePin(R1_PORT, R1_PIN << i, GPIO_PIN_SET); // Deselect row
 800074e:	2280      	movs	r2, #128	; 0x80
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	409a      	lsls	r2, r3
 8000754:	0013      	movs	r3, r2
 8000756:	b299      	uxth	r1, r3
 8000758:	23a0      	movs	r3, #160	; 0xa0
 800075a:	05db      	lsls	r3, r3, #23
 800075c:	2201      	movs	r2, #1
 800075e:	0018      	movs	r0, r3
 8000760:	f000 fc01 	bl	8000f66 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	3301      	adds	r3, #1
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	2b03      	cmp	r3, #3
 800076e:	ddb5      	ble.n	80006dc <keypad_scan+0x14>
  }
  return key;
 8000770:	230f      	movs	r3, #15
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	781b      	ldrb	r3, [r3, #0]
}
 8000776:	0018      	movs	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	b004      	add	sp, #16
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	20000000 	.word	0x20000000

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <Error_Handler+0x8>
	...

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <HAL_MspInit+0x24>)
 8000796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_MspInit+0x24>)
 800079a:	2101      	movs	r1, #1
 800079c:	430a      	orrs	r2, r1
 800079e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <HAL_MspInit+0x24>)
 80007a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <HAL_MspInit+0x24>)
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	0549      	lsls	r1, r1, #21
 80007aa:	430a      	orrs	r2, r1
 80007ac:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000

080007b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b089      	sub	sp, #36	; 0x24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	240c      	movs	r4, #12
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	0018      	movs	r0, r3
 80007c6:	2314      	movs	r3, #20
 80007c8:	001a      	movs	r2, r3
 80007ca:	2100      	movs	r1, #0
 80007cc:	f002 fa20 	bl	8002c10 <memset>
  if(huart->Instance==USART1)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a18      	ldr	r2, [pc, #96]	; (8000838 <HAL_UART_MspInit+0x80>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d12a      	bne.n	8000830 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <HAL_UART_MspInit+0x84>)
 80007dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <HAL_UART_MspInit+0x84>)
 80007e0:	2180      	movs	r1, #128	; 0x80
 80007e2:	01c9      	lsls	r1, r1, #7
 80007e4:	430a      	orrs	r2, r1
 80007e6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <HAL_UART_MspInit+0x84>)
 80007ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <HAL_UART_MspInit+0x84>)
 80007ee:	2101      	movs	r1, #1
 80007f0:	430a      	orrs	r2, r1
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <HAL_UART_MspInit+0x84>)
 80007f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f8:	2201      	movs	r2, #1
 80007fa:	4013      	ands	r3, r2
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_USART1_TX_Pin|BSP_USART1_RX_Pin;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	22c0      	movs	r2, #192	; 0xc0
 8000804:	00d2      	lsls	r2, r2, #3
 8000806:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	0021      	movs	r1, r4
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2202      	movs	r2, #2
 800080e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2203      	movs	r2, #3
 800081a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2204      	movs	r2, #4
 8000820:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000822:	187a      	adds	r2, r7, r1
 8000824:	23a0      	movs	r3, #160	; 0xa0
 8000826:	05db      	lsls	r3, r3, #23
 8000828:	0011      	movs	r1, r2
 800082a:	0018      	movs	r0, r3
 800082c:	f000 fa08 	bl	8000c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	b009      	add	sp, #36	; 0x24
 8000836:	bd90      	pop	{r4, r7, pc}
 8000838:	40013800 	.word	0x40013800
 800083c:	40021000 	.word	0x40021000

08000840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000844:	e7fe      	b.n	8000844 <NMI_Handler+0x4>

08000846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <HardFault_Handler+0x4>

0800084c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000864:	f000 f91c 	bl	8000aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	e00a      	b.n	8000896 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000880:	e000      	b.n	8000884 <_read+0x16>
 8000882:	bf00      	nop
 8000884:	0001      	movs	r1, r0
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	1c5a      	adds	r2, r3, #1
 800088a:	60ba      	str	r2, [r7, #8]
 800088c:	b2ca      	uxtb	r2, r1
 800088e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	3301      	adds	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	429a      	cmp	r2, r3
 800089c:	dbf0      	blt.n	8000880 <_read+0x12>
  }

  return len;
 800089e:	687b      	ldr	r3, [r7, #4]
}
 80008a0:	0018      	movs	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b006      	add	sp, #24
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&huart1, (const unsigned char *) ptr, len, 2000);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	23fa      	movs	r3, #250	; 0xfa
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	4804      	ldr	r0, [pc, #16]	; (80008d0 <_write+0x28>)
 80008c0:	f001 fb38 	bl	8001f34 <HAL_UART_Transmit>
  return len;
 80008c4:	687b      	ldr	r3, [r7, #4]
}
 80008c6:	0018      	movs	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b004      	add	sp, #16
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	20000094 	.word	0x20000094

080008d4 <_close>:

int _close(int file)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008dc:	2301      	movs	r3, #1
 80008de:	425b      	negs	r3, r3
}
 80008e0:	0018      	movs	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b002      	add	sp, #8
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	2280      	movs	r2, #128	; 0x80
 80008f6:	0192      	lsls	r2, r2, #6
 80008f8:	605a      	str	r2, [r3, #4]
  return 0;
 80008fa:	2300      	movs	r3, #0
}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	b002      	add	sp, #8
 8000902:	bd80      	pop	{r7, pc}

08000904 <_isatty>:

int _isatty(int file)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800090c:	2301      	movs	r3, #1
}
 800090e:	0018      	movs	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	b002      	add	sp, #8
 8000914:	bd80      	pop	{r7, pc}

08000916 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b084      	sub	sp, #16
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000922:	2300      	movs	r3, #0
}
 8000924:	0018      	movs	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	b004      	add	sp, #16
 800092a:	bd80      	pop	{r7, pc}

0800092c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <_sbrk+0x5c>)
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <_sbrk+0x60>)
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <_sbrk+0x64>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <_sbrk+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	18d3      	adds	r3, r2, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	429a      	cmp	r2, r3
 800095a:	d207      	bcs.n	800096c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800095c:	f002 f9ae 	bl	8002cbc <__errno>
 8000960:	0003      	movs	r3, r0
 8000962:	220c      	movs	r2, #12
 8000964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000966:	2301      	movs	r3, #1
 8000968:	425b      	negs	r3, r3
 800096a:	e009      	b.n	8000980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	18d2      	adds	r2, r2, r3
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <_sbrk+0x64>)
 800097c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800097e:	68fb      	ldr	r3, [r7, #12]
}
 8000980:	0018      	movs	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	b006      	add	sp, #24
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20002000 	.word	0x20002000
 800098c:	00000400 	.word	0x00000400
 8000990:	2000011c 	.word	0x2000011c
 8000994:	20000270 	.word	0x20000270

08000998 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009a6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009a8:	f7ff fff6 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ae:	490d      	ldr	r1, [pc, #52]	; (80009e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <LoopForever+0xe>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c4:	4c0a      	ldr	r4, [pc, #40]	; (80009f0 <LoopForever+0x16>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009d2:	f002 f979 	bl	8002cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009d6:	f7ff fd71 	bl	80004bc <main>

080009da <LoopForever>:

LoopForever:
    b LoopForever
 80009da:	e7fe      	b.n	80009da <LoopForever>
  ldr   r0, =_estack
 80009dc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80009e8:	08003980 	.word	0x08003980
  ldr r2, =_sbss
 80009ec:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80009f0:	20000270 	.word	0x20000270

080009f4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC1_COMP_IRQHandler>
	...

080009f8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_Init+0x3c>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <HAL_Init+0x3c>)
 8000a0a:	2140      	movs	r1, #64	; 0x40
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a10:	2000      	movs	r0, #0
 8000a12:	f000 f811 	bl	8000a38 <HAL_InitTick>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d003      	beq.n	8000a22 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	701a      	strb	r2, [r3, #0]
 8000a20:	e001      	b.n	8000a26 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a22:	f7ff feb5 	bl	8000790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
}
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b002      	add	sp, #8
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	40022000 	.word	0x40022000

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <HAL_InitTick+0x5c>)
 8000a42:	681c      	ldr	r4, [r3, #0]
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <HAL_InitTick+0x60>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	0019      	movs	r1, r3
 8000a4a:	23fa      	movs	r3, #250	; 0xfa
 8000a4c:	0098      	lsls	r0, r3, #2
 8000a4e:	f7ff fb65 	bl	800011c <__udivsi3>
 8000a52:	0003      	movs	r3, r0
 8000a54:	0019      	movs	r1, r3
 8000a56:	0020      	movs	r0, r4
 8000a58:	f7ff fb60 	bl	800011c <__udivsi3>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 f8e1 	bl	8000c26 <HAL_SYSTICK_Config>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e00f      	b.n	8000a8c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d80b      	bhi.n	8000a8a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	2301      	movs	r3, #1
 8000a76:	425b      	negs	r3, r3
 8000a78:	2200      	movs	r2, #0
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 f8be 	bl	8000bfc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_InitTick+0x64>)
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b003      	add	sp, #12
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	20000010 	.word	0x20000010
 8000a98:	20000018 	.word	0x20000018
 8000a9c:	20000014 	.word	0x20000014

08000aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x1c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	001a      	movs	r2, r3
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	18d2      	adds	r2, r2, r3
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_IncTick+0x20>)
 8000ab2:	601a      	str	r2, [r3, #0]
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	20000018 	.word	0x20000018
 8000ac0:	20000120 	.word	0x20000120

08000ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <HAL_GetTick+0x10>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	20000120 	.word	0x20000120

08000ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	0002      	movs	r2, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b7f      	cmp	r3, #127	; 0x7f
 8000aec:	d828      	bhi.n	8000b40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aee:	4a2f      	ldr	r2, [pc, #188]	; (8000bac <__NVIC_SetPriority+0xd4>)
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b25b      	sxtb	r3, r3
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	33c0      	adds	r3, #192	; 0xc0
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	589b      	ldr	r3, [r3, r2]
 8000afe:	1dfa      	adds	r2, r7, #7
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	0011      	movs	r1, r2
 8000b04:	2203      	movs	r2, #3
 8000b06:	400a      	ands	r2, r1
 8000b08:	00d2      	lsls	r2, r2, #3
 8000b0a:	21ff      	movs	r1, #255	; 0xff
 8000b0c:	4091      	lsls	r1, r2
 8000b0e:	000a      	movs	r2, r1
 8000b10:	43d2      	mvns	r2, r2
 8000b12:	401a      	ands	r2, r3
 8000b14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	22ff      	movs	r2, #255	; 0xff
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	0018      	movs	r0, r3
 8000b24:	2303      	movs	r3, #3
 8000b26:	4003      	ands	r3, r0
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2c:	481f      	ldr	r0, [pc, #124]	; (8000bac <__NVIC_SetPriority+0xd4>)
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	b25b      	sxtb	r3, r3
 8000b34:	089b      	lsrs	r3, r3, #2
 8000b36:	430a      	orrs	r2, r1
 8000b38:	33c0      	adds	r3, #192	; 0xc0
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b3e:	e031      	b.n	8000ba4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b40:	4a1b      	ldr	r2, [pc, #108]	; (8000bb0 <__NVIC_SetPriority+0xd8>)
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	0019      	movs	r1, r3
 8000b48:	230f      	movs	r3, #15
 8000b4a:	400b      	ands	r3, r1
 8000b4c:	3b08      	subs	r3, #8
 8000b4e:	089b      	lsrs	r3, r3, #2
 8000b50:	3306      	adds	r3, #6
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	18d3      	adds	r3, r2, r3
 8000b56:	3304      	adds	r3, #4
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	1dfa      	adds	r2, r7, #7
 8000b5c:	7812      	ldrb	r2, [r2, #0]
 8000b5e:	0011      	movs	r1, r2
 8000b60:	2203      	movs	r2, #3
 8000b62:	400a      	ands	r2, r1
 8000b64:	00d2      	lsls	r2, r2, #3
 8000b66:	21ff      	movs	r1, #255	; 0xff
 8000b68:	4091      	lsls	r1, r2
 8000b6a:	000a      	movs	r2, r1
 8000b6c:	43d2      	mvns	r2, r2
 8000b6e:	401a      	ands	r2, r3
 8000b70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	019b      	lsls	r3, r3, #6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	401a      	ands	r2, r3
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	0018      	movs	r0, r3
 8000b80:	2303      	movs	r3, #3
 8000b82:	4003      	ands	r3, r0
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b88:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <__NVIC_SetPriority+0xd8>)
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	001c      	movs	r4, r3
 8000b90:	230f      	movs	r3, #15
 8000b92:	4023      	ands	r3, r4
 8000b94:	3b08      	subs	r3, #8
 8000b96:	089b      	lsrs	r3, r3, #2
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	3306      	adds	r3, #6
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	18c3      	adds	r3, r0, r3
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	601a      	str	r2, [r3, #0]
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b003      	add	sp, #12
 8000baa:	bd90      	pop	{r4, r7, pc}
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	1e5a      	subs	r2, r3, #1
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	045b      	lsls	r3, r3, #17
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d301      	bcc.n	8000bcc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e010      	b.n	8000bee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <SysTick_Config+0x44>)
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	425b      	negs	r3, r3
 8000bd8:	2103      	movs	r1, #3
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f7ff ff7c 	bl	8000ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <SysTick_Config+0x44>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <SysTick_Config+0x44>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	0018      	movs	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b002      	add	sp, #8
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	210f      	movs	r1, #15
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	1c02      	adds	r2, r0, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	0011      	movs	r1, r2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff ff5d 	bl	8000ad8 <__NVIC_SetPriority>
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b004      	add	sp, #16
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff ffbf 	bl	8000bb4 <SysTick_Config>
 8000c36:	0003      	movs	r3, r0
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b002      	add	sp, #8
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c56:	e14f      	b.n	8000ef8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	4091      	lsls	r1, r2
 8000c62:	000a      	movs	r2, r1
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d100      	bne.n	8000c70 <HAL_GPIO_Init+0x30>
 8000c6e:	e140      	b.n	8000ef2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2203      	movs	r2, #3
 8000c76:	4013      	ands	r3, r2
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d005      	beq.n	8000c88 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2203      	movs	r2, #3
 8000c82:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d130      	bne.n	8000cea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	2203      	movs	r2, #3
 8000c94:	409a      	lsls	r2, r3
 8000c96:	0013      	movs	r3, r2
 8000c98:	43da      	mvns	r2, r3
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	409a      	lsls	r2, r3
 8000caa:	0013      	movs	r3, r2
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
 8000cc4:	0013      	movs	r3, r2
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	091b      	lsrs	r3, r3, #4
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
 8000cdc:	0013      	movs	r3, r2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2203      	movs	r2, #3
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d017      	beq.n	8000d26 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	2203      	movs	r2, #3
 8000d02:	409a      	lsls	r2, r3
 8000d04:	0013      	movs	r3, r2
 8000d06:	43da      	mvns	r2, r3
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	409a      	lsls	r2, r3
 8000d18:	0013      	movs	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d123      	bne.n	8000d7a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	08da      	lsrs	r2, r3, #3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3208      	adds	r2, #8
 8000d3a:	0092      	lsls	r2, r2, #2
 8000d3c:	58d3      	ldr	r3, [r2, r3]
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	2207      	movs	r2, #7
 8000d44:	4013      	ands	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	220f      	movs	r2, #15
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	691a      	ldr	r2, [r3, #16]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	2107      	movs	r1, #7
 8000d5e:	400b      	ands	r3, r1
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	409a      	lsls	r2, r3
 8000d64:	0013      	movs	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	08da      	lsrs	r2, r3, #3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3208      	adds	r2, #8
 8000d74:	0092      	lsls	r2, r2, #2
 8000d76:	6939      	ldr	r1, [r7, #16]
 8000d78:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	409a      	lsls	r2, r3
 8000d88:	0013      	movs	r3, r2
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2203      	movs	r2, #3
 8000d98:	401a      	ands	r2, r3
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	23c0      	movs	r3, #192	; 0xc0
 8000db4:	029b      	lsls	r3, r3, #10
 8000db6:	4013      	ands	r3, r2
 8000db8:	d100      	bne.n	8000dbc <HAL_GPIO_Init+0x17c>
 8000dba:	e09a      	b.n	8000ef2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbc:	4b54      	ldr	r3, [pc, #336]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dc0:	4b53      	ldr	r3, [pc, #332]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dc8:	4a52      	ldr	r2, [pc, #328]	; (8000f14 <HAL_GPIO_Init+0x2d4>)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	089b      	lsrs	r3, r3, #2
 8000dce:	3302      	adds	r3, #2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	589b      	ldr	r3, [r3, r2]
 8000dd4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	2203      	movs	r2, #3
 8000dda:	4013      	ands	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	220f      	movs	r2, #15
 8000de0:	409a      	lsls	r2, r3
 8000de2:	0013      	movs	r3, r2
 8000de4:	43da      	mvns	r2, r3
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	23a0      	movs	r3, #160	; 0xa0
 8000df0:	05db      	lsls	r3, r3, #23
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d019      	beq.n	8000e2a <HAL_GPIO_Init+0x1ea>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a47      	ldr	r2, [pc, #284]	; (8000f18 <HAL_GPIO_Init+0x2d8>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d013      	beq.n	8000e26 <HAL_GPIO_Init+0x1e6>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a46      	ldr	r2, [pc, #280]	; (8000f1c <HAL_GPIO_Init+0x2dc>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00d      	beq.n	8000e22 <HAL_GPIO_Init+0x1e2>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a45      	ldr	r2, [pc, #276]	; (8000f20 <HAL_GPIO_Init+0x2e0>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d007      	beq.n	8000e1e <HAL_GPIO_Init+0x1de>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a44      	ldr	r2, [pc, #272]	; (8000f24 <HAL_GPIO_Init+0x2e4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d101      	bne.n	8000e1a <HAL_GPIO_Init+0x1da>
 8000e16:	2305      	movs	r3, #5
 8000e18:	e008      	b.n	8000e2c <HAL_GPIO_Init+0x1ec>
 8000e1a:	2306      	movs	r3, #6
 8000e1c:	e006      	b.n	8000e2c <HAL_GPIO_Init+0x1ec>
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e004      	b.n	8000e2c <HAL_GPIO_Init+0x1ec>
 8000e22:	2302      	movs	r3, #2
 8000e24:	e002      	b.n	8000e2c <HAL_GPIO_Init+0x1ec>
 8000e26:	2301      	movs	r3, #1
 8000e28:	e000      	b.n	8000e2c <HAL_GPIO_Init+0x1ec>
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	2103      	movs	r1, #3
 8000e30:	400a      	ands	r2, r1
 8000e32:	0092      	lsls	r2, r2, #2
 8000e34:	4093      	lsls	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e3c:	4935      	ldr	r1, [pc, #212]	; (8000f14 <HAL_GPIO_Init+0x2d4>)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	3302      	adds	r3, #2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4a:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <HAL_GPIO_Init+0x2e8>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	43da      	mvns	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	035b      	lsls	r3, r3, #13
 8000e62:	4013      	ands	r3, r2
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e6e:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <HAL_GPIO_Init+0x2e8>)
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e74:	4b2c      	ldr	r3, [pc, #176]	; (8000f28 <HAL_GPIO_Init+0x2e8>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	43da      	mvns	r2, r3
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	039b      	lsls	r3, r3, #14
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e98:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <HAL_GPIO_Init+0x2e8>)
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000e9e:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <HAL_GPIO_Init+0x2e8>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	029b      	lsls	r3, r3, #10
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <HAL_GPIO_Init+0x2e8>)
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_GPIO_Init+0x2e8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	43da      	mvns	r2, r3
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	025b      	lsls	r3, r3, #9
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_GPIO_Init+0x2e8>)
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	40da      	lsrs	r2, r3
 8000f00:	1e13      	subs	r3, r2, #0
 8000f02:	d000      	beq.n	8000f06 <HAL_GPIO_Init+0x2c6>
 8000f04:	e6a8      	b.n	8000c58 <HAL_GPIO_Init+0x18>
  }
}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b006      	add	sp, #24
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40010000 	.word	0x40010000
 8000f18:	50000400 	.word	0x50000400
 8000f1c:	50000800 	.word	0x50000800
 8000f20:	50000c00 	.word	0x50000c00
 8000f24:	50001c00 	.word	0x50001c00
 8000f28:	40010400 	.word	0x40010400

08000f2c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	000a      	movs	r2, r1
 8000f36:	1cbb      	adds	r3, r7, #2
 8000f38:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	1cba      	adds	r2, r7, #2
 8000f40:	8812      	ldrh	r2, [r2, #0]
 8000f42:	4013      	ands	r3, r2
 8000f44:	d004      	beq.n	8000f50 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000f46:	230f      	movs	r3, #15
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	e003      	b.n	8000f58 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f50:	230f      	movs	r3, #15
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000f58:	230f      	movs	r3, #15
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	781b      	ldrb	r3, [r3, #0]
}
 8000f5e:	0018      	movs	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b004      	add	sp, #16
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	0008      	movs	r0, r1
 8000f70:	0011      	movs	r1, r2
 8000f72:	1cbb      	adds	r3, r7, #2
 8000f74:	1c02      	adds	r2, r0, #0
 8000f76:	801a      	strh	r2, [r3, #0]
 8000f78:	1c7b      	adds	r3, r7, #1
 8000f7a:	1c0a      	adds	r2, r1, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f7e:	1c7b      	adds	r3, r7, #1
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d004      	beq.n	8000f90 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f86:	1cbb      	adds	r3, r7, #2
 8000f88:	881a      	ldrh	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000f8e:	e003      	b.n	8000f98 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000f90:	1cbb      	adds	r3, r7, #2
 8000f92:	881a      	ldrh	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b002      	add	sp, #8
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d102      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f000 fbaf 	bl	8001712 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fb4:	4bcf      	ldr	r3, [pc, #828]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	220c      	movs	r2, #12
 8000fba:	4013      	ands	r3, r2
 8000fbc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fbe:	4bcd      	ldr	r3, [pc, #820]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	025b      	lsls	r3, r3, #9
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d100      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x36>
 8000fd4:	e07e      	b.n	80010d4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fd6:	6a3b      	ldr	r3, [r7, #32]
 8000fd8:	2b08      	cmp	r3, #8
 8000fda:	d007      	beq.n	8000fec <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fdc:	6a3b      	ldr	r3, [r7, #32]
 8000fde:	2b0c      	cmp	r3, #12
 8000fe0:	d112      	bne.n	8001008 <HAL_RCC_OscConfig+0x68>
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	025b      	lsls	r3, r3, #9
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d10d      	bne.n	8001008 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fec:	4bc1      	ldr	r3, [pc, #772]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	029b      	lsls	r3, r3, #10
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d100      	bne.n	8000ffa <HAL_RCC_OscConfig+0x5a>
 8000ff8:	e06b      	b.n	80010d2 <HAL_RCC_OscConfig+0x132>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d167      	bne.n	80010d2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	f000 fb85 	bl	8001712 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	025b      	lsls	r3, r3, #9
 8001010:	429a      	cmp	r2, r3
 8001012:	d107      	bne.n	8001024 <HAL_RCC_OscConfig+0x84>
 8001014:	4bb7      	ldr	r3, [pc, #732]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4bb6      	ldr	r3, [pc, #728]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 800101a:	2180      	movs	r1, #128	; 0x80
 800101c:	0249      	lsls	r1, r1, #9
 800101e:	430a      	orrs	r2, r1
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	e027      	b.n	8001074 <HAL_RCC_OscConfig+0xd4>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	23a0      	movs	r3, #160	; 0xa0
 800102a:	02db      	lsls	r3, r3, #11
 800102c:	429a      	cmp	r2, r3
 800102e:	d10e      	bne.n	800104e <HAL_RCC_OscConfig+0xae>
 8001030:	4bb0      	ldr	r3, [pc, #704]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4baf      	ldr	r3, [pc, #700]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 8001036:	2180      	movs	r1, #128	; 0x80
 8001038:	02c9      	lsls	r1, r1, #11
 800103a:	430a      	orrs	r2, r1
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	4bad      	ldr	r3, [pc, #692]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	4bac      	ldr	r3, [pc, #688]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 8001044:	2180      	movs	r1, #128	; 0x80
 8001046:	0249      	lsls	r1, r1, #9
 8001048:	430a      	orrs	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	e012      	b.n	8001074 <HAL_RCC_OscConfig+0xd4>
 800104e:	4ba9      	ldr	r3, [pc, #676]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	4ba8      	ldr	r3, [pc, #672]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 8001054:	49a8      	ldr	r1, [pc, #672]	; (80012f8 <HAL_RCC_OscConfig+0x358>)
 8001056:	400a      	ands	r2, r1
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	4ba6      	ldr	r3, [pc, #664]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	2380      	movs	r3, #128	; 0x80
 8001060:	025b      	lsls	r3, r3, #9
 8001062:	4013      	ands	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4ba2      	ldr	r3, [pc, #648]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4ba1      	ldr	r3, [pc, #644]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 800106e:	49a3      	ldr	r1, [pc, #652]	; (80012fc <HAL_RCC_OscConfig+0x35c>)
 8001070:	400a      	ands	r2, r1
 8001072:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d015      	beq.n	80010a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fd22 	bl	8000ac4 <HAL_GetTick>
 8001080:	0003      	movs	r3, r0
 8001082:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001084:	e009      	b.n	800109a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001086:	f7ff fd1d 	bl	8000ac4 <HAL_GetTick>
 800108a:	0002      	movs	r2, r0
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b64      	cmp	r3, #100	; 0x64
 8001092:	d902      	bls.n	800109a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	f000 fb3c 	bl	8001712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800109a:	4b96      	ldr	r3, [pc, #600]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	029b      	lsls	r3, r3, #10
 80010a2:	4013      	ands	r3, r2
 80010a4:	d0ef      	beq.n	8001086 <HAL_RCC_OscConfig+0xe6>
 80010a6:	e015      	b.n	80010d4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fd0c 	bl	8000ac4 <HAL_GetTick>
 80010ac:	0003      	movs	r3, r0
 80010ae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b2:	f7ff fd07 	bl	8000ac4 <HAL_GetTick>
 80010b6:	0002      	movs	r2, r0
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b64      	cmp	r3, #100	; 0x64
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e326      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010c4:	4b8b      	ldr	r3, [pc, #556]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	029b      	lsls	r3, r3, #10
 80010cc:	4013      	ands	r3, r2
 80010ce:	d1f0      	bne.n	80010b2 <HAL_RCC_OscConfig+0x112>
 80010d0:	e000      	b.n	80010d4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2202      	movs	r2, #2
 80010da:	4013      	ands	r3, r2
 80010dc:	d100      	bne.n	80010e0 <HAL_RCC_OscConfig+0x140>
 80010de:	e08b      	b.n	80011f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010e6:	6a3b      	ldr	r3, [r7, #32]
 80010e8:	2b04      	cmp	r3, #4
 80010ea:	d005      	beq.n	80010f8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010ec:	6a3b      	ldr	r3, [r7, #32]
 80010ee:	2b0c      	cmp	r3, #12
 80010f0:	d13e      	bne.n	8001170 <HAL_RCC_OscConfig+0x1d0>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d13b      	bne.n	8001170 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80010f8:	4b7e      	ldr	r3, [pc, #504]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2204      	movs	r2, #4
 80010fe:	4013      	ands	r3, r2
 8001100:	d004      	beq.n	800110c <HAL_RCC_OscConfig+0x16c>
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e302      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110c:	4b79      	ldr	r3, [pc, #484]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	4a7b      	ldr	r2, [pc, #492]	; (8001300 <HAL_RCC_OscConfig+0x360>)
 8001112:	4013      	ands	r3, r2
 8001114:	0019      	movs	r1, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	021a      	lsls	r2, r3, #8
 800111c:	4b75      	ldr	r3, [pc, #468]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 800111e:	430a      	orrs	r2, r1
 8001120:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001122:	4b74      	ldr	r3, [pc, #464]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2209      	movs	r2, #9
 8001128:	4393      	bics	r3, r2
 800112a:	0019      	movs	r1, r3
 800112c:	4b71      	ldr	r3, [pc, #452]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	430a      	orrs	r2, r1
 8001132:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001134:	f000 fc40 	bl	80019b8 <HAL_RCC_GetSysClockFreq>
 8001138:	0001      	movs	r1, r0
 800113a:	4b6e      	ldr	r3, [pc, #440]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	220f      	movs	r2, #15
 8001142:	4013      	ands	r3, r2
 8001144:	4a6f      	ldr	r2, [pc, #444]	; (8001304 <HAL_RCC_OscConfig+0x364>)
 8001146:	5cd3      	ldrb	r3, [r2, r3]
 8001148:	000a      	movs	r2, r1
 800114a:	40da      	lsrs	r2, r3
 800114c:	4b6e      	ldr	r3, [pc, #440]	; (8001308 <HAL_RCC_OscConfig+0x368>)
 800114e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001150:	4b6e      	ldr	r3, [pc, #440]	; (800130c <HAL_RCC_OscConfig+0x36c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2513      	movs	r5, #19
 8001156:	197c      	adds	r4, r7, r5
 8001158:	0018      	movs	r0, r3
 800115a:	f7ff fc6d 	bl	8000a38 <HAL_InitTick>
 800115e:	0003      	movs	r3, r0
 8001160:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001162:	197b      	adds	r3, r7, r5
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d046      	beq.n	80011f8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800116a:	197b      	adds	r3, r7, r5
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	e2d0      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d027      	beq.n	80011c6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001176:	4b5f      	ldr	r3, [pc, #380]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2209      	movs	r2, #9
 800117c:	4393      	bics	r3, r2
 800117e:	0019      	movs	r1, r3
 8001180:	4b5c      	ldr	r3, [pc, #368]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	430a      	orrs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fc9c 	bl	8000ac4 <HAL_GetTick>
 800118c:	0003      	movs	r3, r0
 800118e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001192:	f7ff fc97 	bl	8000ac4 <HAL_GetTick>
 8001196:	0002      	movs	r2, r0
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e2b6      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011a4:	4b53      	ldr	r3, [pc, #332]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2204      	movs	r2, #4
 80011aa:	4013      	ands	r3, r2
 80011ac:	d0f1      	beq.n	8001192 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ae:	4b51      	ldr	r3, [pc, #324]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	4a53      	ldr	r2, [pc, #332]	; (8001300 <HAL_RCC_OscConfig+0x360>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	0019      	movs	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	021a      	lsls	r2, r3, #8
 80011be:	4b4d      	ldr	r3, [pc, #308]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 80011c0:	430a      	orrs	r2, r1
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	e018      	b.n	80011f8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011c6:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4b4a      	ldr	r3, [pc, #296]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 80011cc:	2101      	movs	r1, #1
 80011ce:	438a      	bics	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d2:	f7ff fc77 	bl	8000ac4 <HAL_GetTick>
 80011d6:	0003      	movs	r3, r0
 80011d8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011dc:	f7ff fc72 	bl	8000ac4 <HAL_GetTick>
 80011e0:	0002      	movs	r2, r0
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e291      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011ee:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2204      	movs	r2, #4
 80011f4:	4013      	ands	r3, r2
 80011f6:	d1f1      	bne.n	80011dc <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2210      	movs	r2, #16
 80011fe:	4013      	ands	r3, r2
 8001200:	d100      	bne.n	8001204 <HAL_RCC_OscConfig+0x264>
 8001202:	e0a1      	b.n	8001348 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d140      	bne.n	800128c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800120a:	4b3a      	ldr	r3, [pc, #232]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4013      	ands	r3, r2
 8001214:	d005      	beq.n	8001222 <HAL_RCC_OscConfig+0x282>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e277      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001222:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	4a3a      	ldr	r2, [pc, #232]	; (8001310 <HAL_RCC_OscConfig+0x370>)
 8001228:	4013      	ands	r3, r2
 800122a:	0019      	movs	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 8001232:	430a      	orrs	r2, r1
 8001234:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001236:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	0a19      	lsrs	r1, r3, #8
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	061a      	lsls	r2, r3, #24
 8001244:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 8001246:	430a      	orrs	r2, r1
 8001248:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	0b5b      	lsrs	r3, r3, #13
 8001250:	3301      	adds	r3, #1
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	0212      	lsls	r2, r2, #8
 8001256:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001258:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	091b      	lsrs	r3, r3, #4
 800125e:	210f      	movs	r1, #15
 8001260:	400b      	ands	r3, r1
 8001262:	4928      	ldr	r1, [pc, #160]	; (8001304 <HAL_RCC_OscConfig+0x364>)
 8001264:	5ccb      	ldrb	r3, [r1, r3]
 8001266:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001268:	4b27      	ldr	r3, [pc, #156]	; (8001308 <HAL_RCC_OscConfig+0x368>)
 800126a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <HAL_RCC_OscConfig+0x36c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2513      	movs	r5, #19
 8001272:	197c      	adds	r4, r7, r5
 8001274:	0018      	movs	r0, r3
 8001276:	f7ff fbdf 	bl	8000a38 <HAL_InitTick>
 800127a:	0003      	movs	r3, r0
 800127c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800127e:	197b      	adds	r3, r7, r5
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d060      	beq.n	8001348 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001286:	197b      	adds	r3, r7, r5
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	e242      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d03f      	beq.n	8001314 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	0049      	lsls	r1, r1, #1
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a2:	f7ff fc0f 	bl	8000ac4 <HAL_GetTick>
 80012a6:	0003      	movs	r3, r0
 80012a8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ac:	f7ff fc0a 	bl	8000ac4 <HAL_GetTick>
 80012b0:	0002      	movs	r2, r0
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e229      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4013      	ands	r3, r2
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	4a10      	ldr	r2, [pc, #64]	; (8001310 <HAL_RCC_OscConfig+0x370>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	0019      	movs	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 80012da:	430a      	orrs	r2, r1
 80012dc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	0a19      	lsrs	r1, r3, #8
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	061a      	lsls	r2, r3, #24
 80012ec:	4b01      	ldr	r3, [pc, #4]	; (80012f4 <HAL_RCC_OscConfig+0x354>)
 80012ee:	430a      	orrs	r2, r1
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	e029      	b.n	8001348 <HAL_RCC_OscConfig+0x3a8>
 80012f4:	40021000 	.word	0x40021000
 80012f8:	fffeffff 	.word	0xfffeffff
 80012fc:	fffbffff 	.word	0xfffbffff
 8001300:	ffffe0ff 	.word	0xffffe0ff
 8001304:	080038d0 	.word	0x080038d0
 8001308:	20000010 	.word	0x20000010
 800130c:	20000014 	.word	0x20000014
 8001310:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001314:	4bbd      	ldr	r3, [pc, #756]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4bbc      	ldr	r3, [pc, #752]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 800131a:	49bd      	ldr	r1, [pc, #756]	; (8001610 <HAL_RCC_OscConfig+0x670>)
 800131c:	400a      	ands	r2, r1
 800131e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fbd0 	bl	8000ac4 <HAL_GetTick>
 8001324:	0003      	movs	r3, r0
 8001326:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800132a:	f7ff fbcb 	bl	8000ac4 <HAL_GetTick>
 800132e:	0002      	movs	r2, r0
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e1ea      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800133c:	4bb3      	ldr	r3, [pc, #716]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4013      	ands	r3, r2
 8001346:	d1f0      	bne.n	800132a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2208      	movs	r2, #8
 800134e:	4013      	ands	r3, r2
 8001350:	d036      	beq.n	80013c0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d019      	beq.n	800138e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800135a:	4bac      	ldr	r3, [pc, #688]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 800135c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800135e:	4bab      	ldr	r3, [pc, #684]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 8001360:	2101      	movs	r1, #1
 8001362:	430a      	orrs	r2, r1
 8001364:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001366:	f7ff fbad 	bl	8000ac4 <HAL_GetTick>
 800136a:	0003      	movs	r3, r0
 800136c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001370:	f7ff fba8 	bl	8000ac4 <HAL_GetTick>
 8001374:	0002      	movs	r2, r0
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e1c7      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001382:	4ba2      	ldr	r3, [pc, #648]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 8001384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001386:	2202      	movs	r2, #2
 8001388:	4013      	ands	r3, r2
 800138a:	d0f1      	beq.n	8001370 <HAL_RCC_OscConfig+0x3d0>
 800138c:	e018      	b.n	80013c0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800138e:	4b9f      	ldr	r3, [pc, #636]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 8001390:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001392:	4b9e      	ldr	r3, [pc, #632]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 8001394:	2101      	movs	r1, #1
 8001396:	438a      	bics	r2, r1
 8001398:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139a:	f7ff fb93 	bl	8000ac4 <HAL_GetTick>
 800139e:	0003      	movs	r3, r0
 80013a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a4:	f7ff fb8e 	bl	8000ac4 <HAL_GetTick>
 80013a8:	0002      	movs	r2, r0
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e1ad      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013b6:	4b95      	ldr	r3, [pc, #596]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 80013b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013ba:	2202      	movs	r2, #2
 80013bc:	4013      	ands	r3, r2
 80013be:	d1f1      	bne.n	80013a4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2204      	movs	r2, #4
 80013c6:	4013      	ands	r3, r2
 80013c8:	d100      	bne.n	80013cc <HAL_RCC_OscConfig+0x42c>
 80013ca:	e0ae      	b.n	800152a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013cc:	2027      	movs	r0, #39	; 0x27
 80013ce:	183b      	adds	r3, r7, r0
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d4:	4b8d      	ldr	r3, [pc, #564]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 80013d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	055b      	lsls	r3, r3, #21
 80013dc:	4013      	ands	r3, r2
 80013de:	d109      	bne.n	80013f4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e0:	4b8a      	ldr	r3, [pc, #552]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 80013e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013e4:	4b89      	ldr	r3, [pc, #548]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	0549      	lsls	r1, r1, #21
 80013ea:	430a      	orrs	r2, r1
 80013ec:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80013ee:	183b      	adds	r3, r7, r0
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f4:	4b87      	ldr	r3, [pc, #540]	; (8001614 <HAL_RCC_OscConfig+0x674>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4013      	ands	r3, r2
 80013fe:	d11a      	bne.n	8001436 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001400:	4b84      	ldr	r3, [pc, #528]	; (8001614 <HAL_RCC_OscConfig+0x674>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b83      	ldr	r3, [pc, #524]	; (8001614 <HAL_RCC_OscConfig+0x674>)
 8001406:	2180      	movs	r1, #128	; 0x80
 8001408:	0049      	lsls	r1, r1, #1
 800140a:	430a      	orrs	r2, r1
 800140c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800140e:	f7ff fb59 	bl	8000ac4 <HAL_GetTick>
 8001412:	0003      	movs	r3, r0
 8001414:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001418:	f7ff fb54 	bl	8000ac4 <HAL_GetTick>
 800141c:	0002      	movs	r2, r0
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	; 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e173      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142a:	4b7a      	ldr	r3, [pc, #488]	; (8001614 <HAL_RCC_OscConfig+0x674>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4013      	ands	r3, r2
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	429a      	cmp	r2, r3
 8001440:	d107      	bne.n	8001452 <HAL_RCC_OscConfig+0x4b2>
 8001442:	4b72      	ldr	r3, [pc, #456]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 8001444:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001446:	4b71      	ldr	r3, [pc, #452]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 8001448:	2180      	movs	r1, #128	; 0x80
 800144a:	0049      	lsls	r1, r1, #1
 800144c:	430a      	orrs	r2, r1
 800144e:	651a      	str	r2, [r3, #80]	; 0x50
 8001450:	e031      	b.n	80014b6 <HAL_RCC_OscConfig+0x516>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10c      	bne.n	8001474 <HAL_RCC_OscConfig+0x4d4>
 800145a:	4b6c      	ldr	r3, [pc, #432]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 800145c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800145e:	4b6b      	ldr	r3, [pc, #428]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 8001460:	496b      	ldr	r1, [pc, #428]	; (8001610 <HAL_RCC_OscConfig+0x670>)
 8001462:	400a      	ands	r2, r1
 8001464:	651a      	str	r2, [r3, #80]	; 0x50
 8001466:	4b69      	ldr	r3, [pc, #420]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 8001468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800146a:	4b68      	ldr	r3, [pc, #416]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 800146c:	496a      	ldr	r1, [pc, #424]	; (8001618 <HAL_RCC_OscConfig+0x678>)
 800146e:	400a      	ands	r2, r1
 8001470:	651a      	str	r2, [r3, #80]	; 0x50
 8001472:	e020      	b.n	80014b6 <HAL_RCC_OscConfig+0x516>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	23a0      	movs	r3, #160	; 0xa0
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	429a      	cmp	r2, r3
 800147e:	d10e      	bne.n	800149e <HAL_RCC_OscConfig+0x4fe>
 8001480:	4b62      	ldr	r3, [pc, #392]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 8001482:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001484:	4b61      	ldr	r3, [pc, #388]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	00c9      	lsls	r1, r1, #3
 800148a:	430a      	orrs	r2, r1
 800148c:	651a      	str	r2, [r3, #80]	; 0x50
 800148e:	4b5f      	ldr	r3, [pc, #380]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 8001490:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001492:	4b5e      	ldr	r3, [pc, #376]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	0049      	lsls	r1, r1, #1
 8001498:	430a      	orrs	r2, r1
 800149a:	651a      	str	r2, [r3, #80]	; 0x50
 800149c:	e00b      	b.n	80014b6 <HAL_RCC_OscConfig+0x516>
 800149e:	4b5b      	ldr	r3, [pc, #364]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 80014a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014a2:	4b5a      	ldr	r3, [pc, #360]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 80014a4:	495a      	ldr	r1, [pc, #360]	; (8001610 <HAL_RCC_OscConfig+0x670>)
 80014a6:	400a      	ands	r2, r1
 80014a8:	651a      	str	r2, [r3, #80]	; 0x50
 80014aa:	4b58      	ldr	r3, [pc, #352]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 80014ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014ae:	4b57      	ldr	r3, [pc, #348]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 80014b0:	4959      	ldr	r1, [pc, #356]	; (8001618 <HAL_RCC_OscConfig+0x678>)
 80014b2:	400a      	ands	r2, r1
 80014b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d015      	beq.n	80014ea <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014be:	f7ff fb01 	bl	8000ac4 <HAL_GetTick>
 80014c2:	0003      	movs	r3, r0
 80014c4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014c6:	e009      	b.n	80014dc <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c8:	f7ff fafc 	bl	8000ac4 <HAL_GetTick>
 80014cc:	0002      	movs	r2, r0
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	4a52      	ldr	r2, [pc, #328]	; (800161c <HAL_RCC_OscConfig+0x67c>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e11a      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014dc:	4b4b      	ldr	r3, [pc, #300]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 80014de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4013      	ands	r3, r2
 80014e6:	d0ef      	beq.n	80014c8 <HAL_RCC_OscConfig+0x528>
 80014e8:	e014      	b.n	8001514 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7ff faeb 	bl	8000ac4 <HAL_GetTick>
 80014ee:	0003      	movs	r3, r0
 80014f0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014f2:	e009      	b.n	8001508 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f4:	f7ff fae6 	bl	8000ac4 <HAL_GetTick>
 80014f8:	0002      	movs	r2, r0
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	4a47      	ldr	r2, [pc, #284]	; (800161c <HAL_RCC_OscConfig+0x67c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e104      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001508:	4b40      	ldr	r3, [pc, #256]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 800150a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4013      	ands	r3, r2
 8001512:	d1ef      	bne.n	80014f4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001514:	2327      	movs	r3, #39	; 0x27
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d105      	bne.n	800152a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800151e:	4b3b      	ldr	r3, [pc, #236]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 8001520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001522:	4b3a      	ldr	r3, [pc, #232]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 8001524:	493e      	ldr	r1, [pc, #248]	; (8001620 <HAL_RCC_OscConfig+0x680>)
 8001526:	400a      	ands	r2, r1
 8001528:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2220      	movs	r2, #32
 8001530:	4013      	ands	r3, r2
 8001532:	d049      	beq.n	80015c8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d026      	beq.n	800158a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800153c:	4b33      	ldr	r3, [pc, #204]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	4b32      	ldr	r3, [pc, #200]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 8001542:	2101      	movs	r1, #1
 8001544:	430a      	orrs	r2, r1
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	4b30      	ldr	r3, [pc, #192]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 800154a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154c:	4b2f      	ldr	r3, [pc, #188]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 800154e:	2101      	movs	r1, #1
 8001550:	430a      	orrs	r2, r1
 8001552:	635a      	str	r2, [r3, #52]	; 0x34
 8001554:	4b33      	ldr	r3, [pc, #204]	; (8001624 <HAL_RCC_OscConfig+0x684>)
 8001556:	6a1a      	ldr	r2, [r3, #32]
 8001558:	4b32      	ldr	r3, [pc, #200]	; (8001624 <HAL_RCC_OscConfig+0x684>)
 800155a:	2180      	movs	r1, #128	; 0x80
 800155c:	0189      	lsls	r1, r1, #6
 800155e:	430a      	orrs	r2, r1
 8001560:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff faaf 	bl	8000ac4 <HAL_GetTick>
 8001566:	0003      	movs	r3, r0
 8001568:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800156c:	f7ff faaa 	bl	8000ac4 <HAL_GetTick>
 8001570:	0002      	movs	r2, r0
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0c9      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2202      	movs	r2, #2
 8001584:	4013      	ands	r3, r2
 8001586:	d0f1      	beq.n	800156c <HAL_RCC_OscConfig+0x5cc>
 8001588:	e01e      	b.n	80015c8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 8001590:	2101      	movs	r1, #1
 8001592:	438a      	bics	r2, r1
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	4b23      	ldr	r3, [pc, #140]	; (8001624 <HAL_RCC_OscConfig+0x684>)
 8001598:	6a1a      	ldr	r2, [r3, #32]
 800159a:	4b22      	ldr	r3, [pc, #136]	; (8001624 <HAL_RCC_OscConfig+0x684>)
 800159c:	4922      	ldr	r1, [pc, #136]	; (8001628 <HAL_RCC_OscConfig+0x688>)
 800159e:	400a      	ands	r2, r1
 80015a0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a2:	f7ff fa8f 	bl	8000ac4 <HAL_GetTick>
 80015a6:	0003      	movs	r3, r0
 80015a8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015ac:	f7ff fa8a 	bl	8000ac4 <HAL_GetTick>
 80015b0:	0002      	movs	r2, r0
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e0a9      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2202      	movs	r2, #2
 80015c4:	4013      	ands	r3, r2
 80015c6:	d1f1      	bne.n	80015ac <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d100      	bne.n	80015d2 <HAL_RCC_OscConfig+0x632>
 80015d0:	e09e      	b.n	8001710 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	2b0c      	cmp	r3, #12
 80015d6:	d100      	bne.n	80015da <HAL_RCC_OscConfig+0x63a>
 80015d8:	e077      	b.n	80016ca <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d158      	bne.n	8001694 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_RCC_OscConfig+0x66c>)
 80015e8:	4910      	ldr	r1, [pc, #64]	; (800162c <HAL_RCC_OscConfig+0x68c>)
 80015ea:	400a      	ands	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff fa69 	bl	8000ac4 <HAL_GetTick>
 80015f2:	0003      	movs	r3, r0
 80015f4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015f6:	e01b      	b.n	8001630 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fa64 	bl	8000ac4 <HAL_GetTick>
 80015fc:	0002      	movs	r2, r0
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d914      	bls.n	8001630 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e083      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	40021000 	.word	0x40021000
 8001610:	fffffeff 	.word	0xfffffeff
 8001614:	40007000 	.word	0x40007000
 8001618:	fffffbff 	.word	0xfffffbff
 800161c:	00001388 	.word	0x00001388
 8001620:	efffffff 	.word	0xefffffff
 8001624:	40010000 	.word	0x40010000
 8001628:	ffffdfff 	.word	0xffffdfff
 800162c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001630:	4b3a      	ldr	r3, [pc, #232]	; (800171c <HAL_RCC_OscConfig+0x77c>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	049b      	lsls	r3, r3, #18
 8001638:	4013      	ands	r3, r2
 800163a:	d1dd      	bne.n	80015f8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800163c:	4b37      	ldr	r3, [pc, #220]	; (800171c <HAL_RCC_OscConfig+0x77c>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	4a37      	ldr	r2, [pc, #220]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 8001642:	4013      	ands	r3, r2
 8001644:	0019      	movs	r1, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001654:	431a      	orrs	r2, r3
 8001656:	4b31      	ldr	r3, [pc, #196]	; (800171c <HAL_RCC_OscConfig+0x77c>)
 8001658:	430a      	orrs	r2, r1
 800165a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165c:	4b2f      	ldr	r3, [pc, #188]	; (800171c <HAL_RCC_OscConfig+0x77c>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b2e      	ldr	r3, [pc, #184]	; (800171c <HAL_RCC_OscConfig+0x77c>)
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	0449      	lsls	r1, r1, #17
 8001666:	430a      	orrs	r2, r1
 8001668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff fa2b 	bl	8000ac4 <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff fa26 	bl	8000ac4 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e045      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001686:	4b25      	ldr	r3, [pc, #148]	; (800171c <HAL_RCC_OscConfig+0x77c>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	049b      	lsls	r3, r3, #18
 800168e:	4013      	ands	r3, r2
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x6d4>
 8001692:	e03d      	b.n	8001710 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001694:	4b21      	ldr	r3, [pc, #132]	; (800171c <HAL_RCC_OscConfig+0x77c>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_RCC_OscConfig+0x77c>)
 800169a:	4922      	ldr	r1, [pc, #136]	; (8001724 <HAL_RCC_OscConfig+0x784>)
 800169c:	400a      	ands	r2, r1
 800169e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fa10 	bl	8000ac4 <HAL_GetTick>
 80016a4:	0003      	movs	r3, r0
 80016a6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016aa:	f7ff fa0b 	bl	8000ac4 <HAL_GetTick>
 80016ae:	0002      	movs	r2, r0
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e02a      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_RCC_OscConfig+0x77c>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	049b      	lsls	r3, r3, #18
 80016c4:	4013      	ands	r3, r2
 80016c6:	d1f0      	bne.n	80016aa <HAL_RCC_OscConfig+0x70a>
 80016c8:	e022      	b.n	8001710 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e01d      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_RCC_OscConfig+0x77c>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016dc:	69fa      	ldr	r2, [r7, #28]
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	025b      	lsls	r3, r3, #9
 80016e2:	401a      	ands	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d10f      	bne.n	800170c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	23f0      	movs	r3, #240	; 0xf0
 80016f0:	039b      	lsls	r3, r3, #14
 80016f2:	401a      	ands	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d107      	bne.n	800170c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	23c0      	movs	r3, #192	; 0xc0
 8001700:	041b      	lsls	r3, r3, #16
 8001702:	401a      	ands	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	0018      	movs	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	b00a      	add	sp, #40	; 0x28
 8001718:	bdb0      	pop	{r4, r5, r7, pc}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	40021000 	.word	0x40021000
 8001720:	ff02ffff 	.word	0xff02ffff
 8001724:	feffffff 	.word	0xfeffffff

08001728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001728:	b5b0      	push	{r4, r5, r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e128      	b.n	800198e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800173c:	4b96      	ldr	r3, [pc, #600]	; (8001998 <HAL_RCC_ClockConfig+0x270>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2201      	movs	r2, #1
 8001742:	4013      	ands	r3, r2
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d91e      	bls.n	8001788 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b93      	ldr	r3, [pc, #588]	; (8001998 <HAL_RCC_ClockConfig+0x270>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2201      	movs	r2, #1
 8001750:	4393      	bics	r3, r2
 8001752:	0019      	movs	r1, r3
 8001754:	4b90      	ldr	r3, [pc, #576]	; (8001998 <HAL_RCC_ClockConfig+0x270>)
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800175c:	f7ff f9b2 	bl	8000ac4 <HAL_GetTick>
 8001760:	0003      	movs	r3, r0
 8001762:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001764:	e009      	b.n	800177a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001766:	f7ff f9ad 	bl	8000ac4 <HAL_GetTick>
 800176a:	0002      	movs	r2, r0
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	4a8a      	ldr	r2, [pc, #552]	; (800199c <HAL_RCC_ClockConfig+0x274>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e109      	b.n	800198e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b87      	ldr	r3, [pc, #540]	; (8001998 <HAL_RCC_ClockConfig+0x270>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2201      	movs	r2, #1
 8001780:	4013      	ands	r3, r2
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d1ee      	bne.n	8001766 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2202      	movs	r2, #2
 800178e:	4013      	ands	r3, r2
 8001790:	d009      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001792:	4b83      	ldr	r3, [pc, #524]	; (80019a0 <HAL_RCC_ClockConfig+0x278>)
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	22f0      	movs	r2, #240	; 0xf0
 8001798:	4393      	bics	r3, r2
 800179a:	0019      	movs	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	4b7f      	ldr	r3, [pc, #508]	; (80019a0 <HAL_RCC_ClockConfig+0x278>)
 80017a2:	430a      	orrs	r2, r1
 80017a4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2201      	movs	r2, #1
 80017ac:	4013      	ands	r3, r2
 80017ae:	d100      	bne.n	80017b2 <HAL_RCC_ClockConfig+0x8a>
 80017b0:	e089      	b.n	80018c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017ba:	4b79      	ldr	r3, [pc, #484]	; (80019a0 <HAL_RCC_ClockConfig+0x278>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	029b      	lsls	r3, r3, #10
 80017c2:	4013      	ands	r3, r2
 80017c4:	d120      	bne.n	8001808 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0e1      	b.n	800198e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017d2:	4b73      	ldr	r3, [pc, #460]	; (80019a0 <HAL_RCC_ClockConfig+0x278>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	049b      	lsls	r3, r3, #18
 80017da:	4013      	ands	r3, r2
 80017dc:	d114      	bne.n	8001808 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e0d5      	b.n	800198e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d106      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ea:	4b6d      	ldr	r3, [pc, #436]	; (80019a0 <HAL_RCC_ClockConfig+0x278>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2204      	movs	r2, #4
 80017f0:	4013      	ands	r3, r2
 80017f2:	d109      	bne.n	8001808 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0ca      	b.n	800198e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017f8:	4b69      	ldr	r3, [pc, #420]	; (80019a0 <HAL_RCC_ClockConfig+0x278>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4013      	ands	r3, r2
 8001802:	d101      	bne.n	8001808 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0c2      	b.n	800198e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001808:	4b65      	ldr	r3, [pc, #404]	; (80019a0 <HAL_RCC_ClockConfig+0x278>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2203      	movs	r2, #3
 800180e:	4393      	bics	r3, r2
 8001810:	0019      	movs	r1, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	4b62      	ldr	r3, [pc, #392]	; (80019a0 <HAL_RCC_ClockConfig+0x278>)
 8001818:	430a      	orrs	r2, r1
 800181a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800181c:	f7ff f952 	bl	8000ac4 <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d111      	bne.n	8001850 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800182c:	e009      	b.n	8001842 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182e:	f7ff f949 	bl	8000ac4 <HAL_GetTick>
 8001832:	0002      	movs	r2, r0
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	4a58      	ldr	r2, [pc, #352]	; (800199c <HAL_RCC_ClockConfig+0x274>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e0a5      	b.n	800198e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001842:	4b57      	ldr	r3, [pc, #348]	; (80019a0 <HAL_RCC_ClockConfig+0x278>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	220c      	movs	r2, #12
 8001848:	4013      	ands	r3, r2
 800184a:	2b08      	cmp	r3, #8
 800184c:	d1ef      	bne.n	800182e <HAL_RCC_ClockConfig+0x106>
 800184e:	e03a      	b.n	80018c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b03      	cmp	r3, #3
 8001856:	d111      	bne.n	800187c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001858:	e009      	b.n	800186e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185a:	f7ff f933 	bl	8000ac4 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	4a4d      	ldr	r2, [pc, #308]	; (800199c <HAL_RCC_ClockConfig+0x274>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e08f      	b.n	800198e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800186e:	4b4c      	ldr	r3, [pc, #304]	; (80019a0 <HAL_RCC_ClockConfig+0x278>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	220c      	movs	r2, #12
 8001874:	4013      	ands	r3, r2
 8001876:	2b0c      	cmp	r3, #12
 8001878:	d1ef      	bne.n	800185a <HAL_RCC_ClockConfig+0x132>
 800187a:	e024      	b.n	80018c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d11b      	bne.n	80018bc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001884:	e009      	b.n	800189a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001886:	f7ff f91d 	bl	8000ac4 <HAL_GetTick>
 800188a:	0002      	movs	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	4a42      	ldr	r2, [pc, #264]	; (800199c <HAL_RCC_ClockConfig+0x274>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e079      	b.n	800198e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800189a:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <HAL_RCC_ClockConfig+0x278>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	220c      	movs	r2, #12
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d1ef      	bne.n	8001886 <HAL_RCC_ClockConfig+0x15e>
 80018a6:	e00e      	b.n	80018c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a8:	f7ff f90c 	bl	8000ac4 <HAL_GetTick>
 80018ac:	0002      	movs	r2, r0
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	4a3a      	ldr	r2, [pc, #232]	; (800199c <HAL_RCC_ClockConfig+0x274>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e068      	b.n	800198e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80018bc:	4b38      	ldr	r3, [pc, #224]	; (80019a0 <HAL_RCC_ClockConfig+0x278>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	220c      	movs	r2, #12
 80018c2:	4013      	ands	r3, r2
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c6:	4b34      	ldr	r3, [pc, #208]	; (8001998 <HAL_RCC_ClockConfig+0x270>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2201      	movs	r2, #1
 80018cc:	4013      	ands	r3, r2
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d21e      	bcs.n	8001912 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d4:	4b30      	ldr	r3, [pc, #192]	; (8001998 <HAL_RCC_ClockConfig+0x270>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2201      	movs	r2, #1
 80018da:	4393      	bics	r3, r2
 80018dc:	0019      	movs	r1, r3
 80018de:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <HAL_RCC_ClockConfig+0x270>)
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018e6:	f7ff f8ed 	bl	8000ac4 <HAL_GetTick>
 80018ea:	0003      	movs	r3, r0
 80018ec:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	e009      	b.n	8001904 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f0:	f7ff f8e8 	bl	8000ac4 <HAL_GetTick>
 80018f4:	0002      	movs	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	4a28      	ldr	r2, [pc, #160]	; (800199c <HAL_RCC_ClockConfig+0x274>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e044      	b.n	800198e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001904:	4b24      	ldr	r3, [pc, #144]	; (8001998 <HAL_RCC_ClockConfig+0x270>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2201      	movs	r2, #1
 800190a:	4013      	ands	r3, r2
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d1ee      	bne.n	80018f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2204      	movs	r2, #4
 8001918:	4013      	ands	r3, r2
 800191a:	d009      	beq.n	8001930 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800191c:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_RCC_ClockConfig+0x278>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <HAL_RCC_ClockConfig+0x27c>)
 8001922:	4013      	ands	r3, r2
 8001924:	0019      	movs	r1, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_RCC_ClockConfig+0x278>)
 800192c:	430a      	orrs	r2, r1
 800192e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2208      	movs	r2, #8
 8001936:	4013      	ands	r3, r2
 8001938:	d00a      	beq.n	8001950 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800193a:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_RCC_ClockConfig+0x278>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	4a1a      	ldr	r2, [pc, #104]	; (80019a8 <HAL_RCC_ClockConfig+0x280>)
 8001940:	4013      	ands	r3, r2
 8001942:	0019      	movs	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	00da      	lsls	r2, r3, #3
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_RCC_ClockConfig+0x278>)
 800194c:	430a      	orrs	r2, r1
 800194e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001950:	f000 f832 	bl	80019b8 <HAL_RCC_GetSysClockFreq>
 8001954:	0001      	movs	r1, r0
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_RCC_ClockConfig+0x278>)
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	091b      	lsrs	r3, r3, #4
 800195c:	220f      	movs	r2, #15
 800195e:	4013      	ands	r3, r2
 8001960:	4a12      	ldr	r2, [pc, #72]	; (80019ac <HAL_RCC_ClockConfig+0x284>)
 8001962:	5cd3      	ldrb	r3, [r2, r3]
 8001964:	000a      	movs	r2, r1
 8001966:	40da      	lsrs	r2, r3
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HAL_RCC_ClockConfig+0x288>)
 800196a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HAL_RCC_ClockConfig+0x28c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	250b      	movs	r5, #11
 8001972:	197c      	adds	r4, r7, r5
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff f85f 	bl	8000a38 <HAL_InitTick>
 800197a:	0003      	movs	r3, r0
 800197c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800197e:	197b      	adds	r3, r7, r5
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001986:	197b      	adds	r3, r7, r5
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	e000      	b.n	800198e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	0018      	movs	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	b004      	add	sp, #16
 8001994:	bdb0      	pop	{r4, r5, r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	40022000 	.word	0x40022000
 800199c:	00001388 	.word	0x00001388
 80019a0:	40021000 	.word	0x40021000
 80019a4:	fffff8ff 	.word	0xfffff8ff
 80019a8:	ffffc7ff 	.word	0xffffc7ff
 80019ac:	080038d0 	.word	0x080038d0
 80019b0:	20000010 	.word	0x20000010
 80019b4:	20000014 	.word	0x20000014

080019b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b8:	b5b0      	push	{r4, r5, r7, lr}
 80019ba:	b08e      	sub	sp, #56	; 0x38
 80019bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80019be:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x138>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019c6:	230c      	movs	r3, #12
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b0c      	cmp	r3, #12
 80019cc:	d014      	beq.n	80019f8 <HAL_RCC_GetSysClockFreq+0x40>
 80019ce:	d900      	bls.n	80019d2 <HAL_RCC_GetSysClockFreq+0x1a>
 80019d0:	e07b      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x112>
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d002      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0x24>
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d00b      	beq.n	80019f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019da:	e076      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80019dc:	4b44      	ldr	r3, [pc, #272]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x138>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2210      	movs	r2, #16
 80019e2:	4013      	ands	r3, r2
 80019e4:	d002      	beq.n	80019ec <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80019e6:	4b43      	ldr	r3, [pc, #268]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80019e8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80019ea:	e07c      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80019ec:	4b42      	ldr	r3, [pc, #264]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x140>)
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019f0:	e079      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019f2:	4b42      	ldr	r3, [pc, #264]	; (8001afc <HAL_RCC_GetSysClockFreq+0x144>)
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019f6:	e076      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80019f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019fa:	0c9a      	lsrs	r2, r3, #18
 80019fc:	230f      	movs	r3, #15
 80019fe:	401a      	ands	r2, r3
 8001a00:	4b3f      	ldr	r3, [pc, #252]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x148>)
 8001a02:	5c9b      	ldrb	r3, [r3, r2]
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a08:	0d9a      	lsrs	r2, r3, #22
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	3301      	adds	r3, #1
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a12:	4b37      	ldr	r3, [pc, #220]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	025b      	lsls	r3, r3, #9
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d01a      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	4a35      	ldr	r2, [pc, #212]	; (8001afc <HAL_RCC_GetSysClockFreq+0x144>)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	69b8      	ldr	r0, [r7, #24]
 8001a2c:	69f9      	ldr	r1, [r7, #28]
 8001a2e:	f7fe fc21 	bl	8000274 <__aeabi_lmul>
 8001a32:	0002      	movs	r2, r0
 8001a34:	000b      	movs	r3, r1
 8001a36:	0010      	movs	r0, r2
 8001a38:	0019      	movs	r1, r3
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f7fe fbf5 	bl	8000234 <__aeabi_uldivmod>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	000b      	movs	r3, r1
 8001a4e:	0013      	movs	r3, r2
 8001a50:	637b      	str	r3, [r7, #52]	; 0x34
 8001a52:	e037      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a54:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2210      	movs	r2, #16
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d01a      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4a23      	ldr	r2, [pc, #140]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	68b8      	ldr	r0, [r7, #8]
 8001a6c:	68f9      	ldr	r1, [r7, #12]
 8001a6e:	f7fe fc01 	bl	8000274 <__aeabi_lmul>
 8001a72:	0002      	movs	r2, r0
 8001a74:	000b      	movs	r3, r1
 8001a76:	0010      	movs	r0, r2
 8001a78:	0019      	movs	r1, r3
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f7fe fbd5 	bl	8000234 <__aeabi_uldivmod>
 8001a8a:	0002      	movs	r2, r0
 8001a8c:	000b      	movs	r3, r1
 8001a8e:	0013      	movs	r3, r2
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
 8001a92:	e017      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a96:	0018      	movs	r0, r3
 8001a98:	2300      	movs	r3, #0
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	4a16      	ldr	r2, [pc, #88]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x140>)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f7fe fbe8 	bl	8000274 <__aeabi_lmul>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	000b      	movs	r3, r1
 8001aa8:	0010      	movs	r0, r2
 8001aaa:	0019      	movs	r1, r3
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	001c      	movs	r4, r3
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	001d      	movs	r5, r3
 8001ab4:	0022      	movs	r2, r4
 8001ab6:	002b      	movs	r3, r5
 8001ab8:	f7fe fbbc 	bl	8000234 <__aeabi_uldivmod>
 8001abc:	0002      	movs	r2, r0
 8001abe:	000b      	movs	r3, r1
 8001ac0:	0013      	movs	r3, r2
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ac8:	e00d      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	0b5b      	lsrs	r3, r3, #13
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	0212      	lsls	r2, r2, #8
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	0013      	movs	r3, r2
 8001ae2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ae4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ae8:	0018      	movs	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b00e      	add	sp, #56	; 0x38
 8001aee:	bdb0      	pop	{r4, r5, r7, pc}
 8001af0:	40021000 	.word	0x40021000
 8001af4:	003d0900 	.word	0x003d0900
 8001af8:	00f42400 	.word	0x00f42400
 8001afc:	007a1200 	.word	0x007a1200
 8001b00:	080038e8 	.word	0x080038e8

08001b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b08:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	20000010 	.word	0x20000010

08001b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b1c:	f7ff fff2 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b20:	0001      	movs	r1, r0
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	0a1b      	lsrs	r3, r3, #8
 8001b28:	2207      	movs	r2, #7
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b2e:	5cd3      	ldrb	r3, [r2, r3]
 8001b30:	40d9      	lsrs	r1, r3
 8001b32:	000b      	movs	r3, r1
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	080038e0 	.word	0x080038e0

08001b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b48:	f7ff ffdc 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b4c:	0001      	movs	r1, r0
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	0adb      	lsrs	r3, r3, #11
 8001b54:	2207      	movs	r2, #7
 8001b56:	4013      	ands	r3, r2
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b5a:	5cd3      	ldrb	r3, [r2, r3]
 8001b5c:	40d9      	lsrs	r1, r3
 8001b5e:	000b      	movs	r3, r1
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	080038e0 	.word	0x080038e0

08001b70 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001b78:	2317      	movs	r3, #23
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2220      	movs	r2, #32
 8001b86:	4013      	ands	r3, r2
 8001b88:	d106      	bne.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	4013      	ands	r3, r2
 8001b94:	d100      	bne.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001b96:	e104      	b.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b98:	4bb1      	ldr	r3, [pc, #708]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	055b      	lsls	r3, r3, #21
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d10a      	bne.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba4:	4bae      	ldr	r3, [pc, #696]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ba8:	4bad      	ldr	r3, [pc, #692]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001baa:	2180      	movs	r1, #128	; 0x80
 8001bac:	0549      	lsls	r1, r1, #21
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001bb2:	2317      	movs	r3, #23
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bba:	4baa      	ldr	r3, [pc, #680]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d11a      	bne.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc6:	4ba7      	ldr	r3, [pc, #668]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4ba6      	ldr	r3, [pc, #664]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	0049      	lsls	r1, r1, #1
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd4:	f7fe ff76 	bl	8000ac4 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bde:	f7fe ff71 	bl	8000ac4 <HAL_GetTick>
 8001be2:	0002      	movs	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b64      	cmp	r3, #100	; 0x64
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e133      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf0:	4b9c      	ldr	r3, [pc, #624]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001bfc:	4b98      	ldr	r3, [pc, #608]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	23c0      	movs	r3, #192	; 0xc0
 8001c02:	039b      	lsls	r3, r3, #14
 8001c04:	4013      	ands	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	23c0      	movs	r3, #192	; 0xc0
 8001c0e:	039b      	lsls	r3, r3, #14
 8001c10:	4013      	ands	r3, r2
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d107      	bne.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	23c0      	movs	r3, #192	; 0xc0
 8001c1e:	039b      	lsls	r3, r3, #14
 8001c20:	4013      	ands	r3, r2
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d013      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	23c0      	movs	r3, #192	; 0xc0
 8001c2e:	029b      	lsls	r3, r3, #10
 8001c30:	401a      	ands	r2, r3
 8001c32:	23c0      	movs	r3, #192	; 0xc0
 8001c34:	029b      	lsls	r3, r3, #10
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d10a      	bne.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001c3a:	4b89      	ldr	r3, [pc, #548]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	029b      	lsls	r3, r3, #10
 8001c42:	401a      	ands	r2, r3
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	029b      	lsls	r3, r3, #10
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e103      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001c50:	4b83      	ldr	r3, [pc, #524]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c54:	23c0      	movs	r3, #192	; 0xc0
 8001c56:	029b      	lsls	r3, r3, #10
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d049      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	23c0      	movs	r3, #192	; 0xc0
 8001c68:	029b      	lsls	r3, r3, #10
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d004      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2220      	movs	r2, #32
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d10d      	bne.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	23c0      	movs	r3, #192	; 0xc0
 8001c82:	029b      	lsls	r3, r3, #10
 8001c84:	4013      	ands	r3, r2
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d034      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	4013      	ands	r3, r2
 8001c96:	d02e      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001c98:	4b71      	ldr	r3, [pc, #452]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c9c:	4a72      	ldr	r2, [pc, #456]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ca2:	4b6f      	ldr	r3, [pc, #444]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ca4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ca6:	4b6e      	ldr	r3, [pc, #440]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	0309      	lsls	r1, r1, #12
 8001cac:	430a      	orrs	r2, r1
 8001cae:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cb0:	4b6b      	ldr	r3, [pc, #428]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cb4:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cb6:	496d      	ldr	r1, [pc, #436]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001cb8:	400a      	ands	r2, r1
 8001cba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001cbc:	4b68      	ldr	r3, [pc, #416]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d014      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7fe fefa 	bl	8000ac4 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cd4:	e009      	b.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd6:	f7fe fef5 	bl	8000ac4 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	4a63      	ldr	r2, [pc, #396]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e0b6      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cea:	4b5d      	ldr	r3, [pc, #372]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d0ef      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d01f      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	23c0      	movs	r3, #192	; 0xc0
 8001d08:	029b      	lsls	r3, r3, #10
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	23c0      	movs	r3, #192	; 0xc0
 8001d0e:	029b      	lsls	r3, r3, #10
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d10c      	bne.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001d14:	4b52      	ldr	r3, [pc, #328]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a56      	ldr	r2, [pc, #344]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	0019      	movs	r1, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	23c0      	movs	r3, #192	; 0xc0
 8001d24:	039b      	lsls	r3, r3, #14
 8001d26:	401a      	ands	r2, r3
 8001d28:	4b4d      	ldr	r3, [pc, #308]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	4b4c      	ldr	r3, [pc, #304]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d30:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	23c0      	movs	r3, #192	; 0xc0
 8001d38:	029b      	lsls	r3, r3, #10
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	4b48      	ldr	r3, [pc, #288]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2220      	movs	r2, #32
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d01f      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	23c0      	movs	r3, #192	; 0xc0
 8001d52:	029b      	lsls	r3, r3, #10
 8001d54:	401a      	ands	r2, r3
 8001d56:	23c0      	movs	r3, #192	; 0xc0
 8001d58:	029b      	lsls	r3, r3, #10
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001d5e:	4b40      	ldr	r3, [pc, #256]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a44      	ldr	r2, [pc, #272]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	0019      	movs	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	23c0      	movs	r3, #192	; 0xc0
 8001d6e:	039b      	lsls	r3, r3, #14
 8001d70:	401a      	ands	r2, r3
 8001d72:	4b3b      	ldr	r3, [pc, #236]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	4b39      	ldr	r3, [pc, #228]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d7a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	23c0      	movs	r3, #192	; 0xc0
 8001d82:	029b      	lsls	r3, r3, #10
 8001d84:	401a      	ands	r2, r3
 8001d86:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d8c:	2317      	movs	r3, #23
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d105      	bne.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d96:	4b32      	ldr	r3, [pc, #200]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d9a:	4b31      	ldr	r3, [pc, #196]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d9c:	4936      	ldr	r1, [pc, #216]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001d9e:	400a      	ands	r2, r1
 8001da0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2201      	movs	r2, #1
 8001da8:	4013      	ands	r3, r2
 8001daa:	d009      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dac:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db0:	2203      	movs	r2, #3
 8001db2:	4393      	bics	r3, r2
 8001db4:	0019      	movs	r1, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d009      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dca:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	220c      	movs	r2, #12
 8001dd0:	4393      	bics	r3, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2204      	movs	r2, #4
 8001de4:	4013      	ands	r3, r2
 8001de6:	d009      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001de8:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dec:	4a23      	ldr	r2, [pc, #140]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2208      	movs	r2, #8
 8001e02:	4013      	ands	r3, r2
 8001e04:	d009      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e06:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	4a1d      	ldr	r2, [pc, #116]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	0019      	movs	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699a      	ldr	r2, [r3, #24]
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e16:	430a      	orrs	r2, r1
 8001e18:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2240      	movs	r2, #64	; 0x40
 8001e20:	4013      	ands	r3, r2
 8001e22:	d009      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e28:	4a16      	ldr	r2, [pc, #88]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1a      	ldr	r2, [r3, #32]
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e34:	430a      	orrs	r2, r1
 8001e36:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2280      	movs	r2, #128	; 0x80
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d009      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e46:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69da      	ldr	r2, [r3, #28]
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e52:	430a      	orrs	r2, r1
 8001e54:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b006      	add	sp, #24
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40007000 	.word	0x40007000
 8001e68:	fffcffff 	.word	0xfffcffff
 8001e6c:	fff7ffff 	.word	0xfff7ffff
 8001e70:	00001388 	.word	0x00001388
 8001e74:	ffcfffff 	.word	0xffcfffff
 8001e78:	efffffff 	.word	0xefffffff
 8001e7c:	fffff3ff 	.word	0xfffff3ff
 8001e80:	ffffcfff 	.word	0xffffcfff
 8001e84:	fbffffff 	.word	0xfbffffff
 8001e88:	fff3ffff 	.word	0xfff3ffff

08001e8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e044      	b.n	8001f28 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d107      	bne.n	8001eb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2278      	movs	r2, #120	; 0x78
 8001eaa:	2100      	movs	r1, #0
 8001eac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f7fe fc81 	bl	80007b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2224      	movs	r2, #36	; 0x24
 8001eba:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	438a      	bics	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f000 f8d0 	bl	8002074 <UART_SetConfig>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e024      	b.n	8001f28 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f000 fb47 	bl	800257c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	490d      	ldr	r1, [pc, #52]	; (8001f30 <HAL_UART_Init+0xa4>)
 8001efa:	400a      	ands	r2, r1
 8001efc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	212a      	movs	r1, #42	; 0x2a
 8001f0a:	438a      	bics	r2, r1
 8001f0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2101      	movs	r1, #1
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	0018      	movs	r0, r3
 8001f22:	f000 fbdf 	bl	80026e4 <UART_CheckIdleState>
 8001f26:	0003      	movs	r3, r0
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b002      	add	sp, #8
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	ffffb7ff 	.word	0xffffb7ff

08001f34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	; 0x28
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	1dbb      	adds	r3, r7, #6
 8001f42:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	d000      	beq.n	8001f4e <HAL_UART_Transmit+0x1a>
 8001f4c:	e08c      	b.n	8002068 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_UART_Transmit+0x28>
 8001f54:	1dbb      	adds	r3, r7, #6
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e084      	b.n	800206a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	015b      	lsls	r3, r3, #5
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d109      	bne.n	8001f80 <HAL_UART_Transmit+0x4c>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d105      	bne.n	8001f80 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2201      	movs	r2, #1
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d001      	beq.n	8001f80 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e074      	b.n	800206a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2284      	movs	r2, #132	; 0x84
 8001f84:	2100      	movs	r1, #0
 8001f86:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2221      	movs	r2, #33	; 0x21
 8001f8c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f8e:	f7fe fd99 	bl	8000ac4 <HAL_GetTick>
 8001f92:	0003      	movs	r3, r0
 8001f94:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	1dba      	adds	r2, r7, #6
 8001f9a:	2150      	movs	r1, #80	; 0x50
 8001f9c:	8812      	ldrh	r2, [r2, #0]
 8001f9e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1dba      	adds	r2, r7, #6
 8001fa4:	2152      	movs	r1, #82	; 0x52
 8001fa6:	8812      	ldrh	r2, [r2, #0]
 8001fa8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	015b      	lsls	r3, r3, #5
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d108      	bne.n	8001fc8 <HAL_UART_Transmit+0x94>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d104      	bne.n	8001fc8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	e003      	b.n	8001fd0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fd0:	e02f      	b.n	8002032 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	0013      	movs	r3, r2
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2180      	movs	r1, #128	; 0x80
 8001fe0:	f000 fc28 	bl	8002834 <UART_WaitOnFlagUntilTimeout>
 8001fe4:	1e03      	subs	r3, r0, #0
 8001fe6:	d004      	beq.n	8001ff2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2220      	movs	r2, #32
 8001fec:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e03b      	b.n	800206a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10b      	bne.n	8002010 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	001a      	movs	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	05d2      	lsls	r2, r2, #23
 8002004:	0dd2      	lsrs	r2, r2, #23
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	3302      	adds	r3, #2
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	e007      	b.n	8002020 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	781a      	ldrb	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3301      	adds	r3, #1
 800201e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2252      	movs	r2, #82	; 0x52
 8002024:	5a9b      	ldrh	r3, [r3, r2]
 8002026:	b29b      	uxth	r3, r3
 8002028:	3b01      	subs	r3, #1
 800202a:	b299      	uxth	r1, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2252      	movs	r2, #82	; 0x52
 8002030:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2252      	movs	r2, #82	; 0x52
 8002036:	5a9b      	ldrh	r3, [r3, r2]
 8002038:	b29b      	uxth	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1c9      	bne.n	8001fd2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	0013      	movs	r3, r2
 8002048:	2200      	movs	r2, #0
 800204a:	2140      	movs	r1, #64	; 0x40
 800204c:	f000 fbf2 	bl	8002834 <UART_WaitOnFlagUntilTimeout>
 8002050:	1e03      	subs	r3, r0, #0
 8002052:	d004      	beq.n	800205e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2220      	movs	r2, #32
 8002058:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e005      	b.n	800206a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2220      	movs	r2, #32
 8002062:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	e000      	b.n	800206a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002068:	2302      	movs	r3, #2
  }
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b008      	add	sp, #32
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002074:	b5b0      	push	{r4, r5, r7, lr}
 8002076:	b08e      	sub	sp, #56	; 0x38
 8002078:	af00      	add	r7, sp, #0
 800207a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800207c:	231a      	movs	r3, #26
 800207e:	2218      	movs	r2, #24
 8002080:	189b      	adds	r3, r3, r2
 8002082:	19db      	adds	r3, r3, r7
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	431a      	orrs	r2, r3
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	431a      	orrs	r2, r3
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	4313      	orrs	r3, r2
 800209e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4ac6      	ldr	r2, [pc, #792]	; (80023c0 <UART_SetConfig+0x34c>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	0019      	movs	r1, r3
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020b2:	430a      	orrs	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4ac1      	ldr	r2, [pc, #772]	; (80023c4 <UART_SetConfig+0x350>)
 80020be:	4013      	ands	r3, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4abb      	ldr	r2, [pc, #748]	; (80023c8 <UART_SetConfig+0x354>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d004      	beq.n	80020e8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020e4:	4313      	orrs	r3, r2
 80020e6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	4ab7      	ldr	r2, [pc, #732]	; (80023cc <UART_SetConfig+0x358>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	0019      	movs	r1, r3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020fa:	430a      	orrs	r2, r1
 80020fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4ab3      	ldr	r2, [pc, #716]	; (80023d0 <UART_SetConfig+0x35c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d131      	bne.n	800216c <UART_SetConfig+0xf8>
 8002108:	4bb2      	ldr	r3, [pc, #712]	; (80023d4 <UART_SetConfig+0x360>)
 800210a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210c:	2203      	movs	r2, #3
 800210e:	4013      	ands	r3, r2
 8002110:	2b03      	cmp	r3, #3
 8002112:	d01d      	beq.n	8002150 <UART_SetConfig+0xdc>
 8002114:	d823      	bhi.n	800215e <UART_SetConfig+0xea>
 8002116:	2b02      	cmp	r3, #2
 8002118:	d00c      	beq.n	8002134 <UART_SetConfig+0xc0>
 800211a:	d820      	bhi.n	800215e <UART_SetConfig+0xea>
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <UART_SetConfig+0xb2>
 8002120:	2b01      	cmp	r3, #1
 8002122:	d00e      	beq.n	8002142 <UART_SetConfig+0xce>
 8002124:	e01b      	b.n	800215e <UART_SetConfig+0xea>
 8002126:	231b      	movs	r3, #27
 8002128:	2218      	movs	r2, #24
 800212a:	189b      	adds	r3, r3, r2
 800212c:	19db      	adds	r3, r3, r7
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
 8002132:	e09c      	b.n	800226e <UART_SetConfig+0x1fa>
 8002134:	231b      	movs	r3, #27
 8002136:	2218      	movs	r2, #24
 8002138:	189b      	adds	r3, r3, r2
 800213a:	19db      	adds	r3, r3, r7
 800213c:	2202      	movs	r2, #2
 800213e:	701a      	strb	r2, [r3, #0]
 8002140:	e095      	b.n	800226e <UART_SetConfig+0x1fa>
 8002142:	231b      	movs	r3, #27
 8002144:	2218      	movs	r2, #24
 8002146:	189b      	adds	r3, r3, r2
 8002148:	19db      	adds	r3, r3, r7
 800214a:	2204      	movs	r2, #4
 800214c:	701a      	strb	r2, [r3, #0]
 800214e:	e08e      	b.n	800226e <UART_SetConfig+0x1fa>
 8002150:	231b      	movs	r3, #27
 8002152:	2218      	movs	r2, #24
 8002154:	189b      	adds	r3, r3, r2
 8002156:	19db      	adds	r3, r3, r7
 8002158:	2208      	movs	r2, #8
 800215a:	701a      	strb	r2, [r3, #0]
 800215c:	e087      	b.n	800226e <UART_SetConfig+0x1fa>
 800215e:	231b      	movs	r3, #27
 8002160:	2218      	movs	r2, #24
 8002162:	189b      	adds	r3, r3, r2
 8002164:	19db      	adds	r3, r3, r7
 8002166:	2210      	movs	r2, #16
 8002168:	701a      	strb	r2, [r3, #0]
 800216a:	e080      	b.n	800226e <UART_SetConfig+0x1fa>
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a99      	ldr	r2, [pc, #612]	; (80023d8 <UART_SetConfig+0x364>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d131      	bne.n	80021da <UART_SetConfig+0x166>
 8002176:	4b97      	ldr	r3, [pc, #604]	; (80023d4 <UART_SetConfig+0x360>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	220c      	movs	r2, #12
 800217c:	4013      	ands	r3, r2
 800217e:	2b0c      	cmp	r3, #12
 8002180:	d01d      	beq.n	80021be <UART_SetConfig+0x14a>
 8002182:	d823      	bhi.n	80021cc <UART_SetConfig+0x158>
 8002184:	2b08      	cmp	r3, #8
 8002186:	d00c      	beq.n	80021a2 <UART_SetConfig+0x12e>
 8002188:	d820      	bhi.n	80021cc <UART_SetConfig+0x158>
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <UART_SetConfig+0x120>
 800218e:	2b04      	cmp	r3, #4
 8002190:	d00e      	beq.n	80021b0 <UART_SetConfig+0x13c>
 8002192:	e01b      	b.n	80021cc <UART_SetConfig+0x158>
 8002194:	231b      	movs	r3, #27
 8002196:	2218      	movs	r2, #24
 8002198:	189b      	adds	r3, r3, r2
 800219a:	19db      	adds	r3, r3, r7
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	e065      	b.n	800226e <UART_SetConfig+0x1fa>
 80021a2:	231b      	movs	r3, #27
 80021a4:	2218      	movs	r2, #24
 80021a6:	189b      	adds	r3, r3, r2
 80021a8:	19db      	adds	r3, r3, r7
 80021aa:	2202      	movs	r2, #2
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	e05e      	b.n	800226e <UART_SetConfig+0x1fa>
 80021b0:	231b      	movs	r3, #27
 80021b2:	2218      	movs	r2, #24
 80021b4:	189b      	adds	r3, r3, r2
 80021b6:	19db      	adds	r3, r3, r7
 80021b8:	2204      	movs	r2, #4
 80021ba:	701a      	strb	r2, [r3, #0]
 80021bc:	e057      	b.n	800226e <UART_SetConfig+0x1fa>
 80021be:	231b      	movs	r3, #27
 80021c0:	2218      	movs	r2, #24
 80021c2:	189b      	adds	r3, r3, r2
 80021c4:	19db      	adds	r3, r3, r7
 80021c6:	2208      	movs	r2, #8
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	e050      	b.n	800226e <UART_SetConfig+0x1fa>
 80021cc:	231b      	movs	r3, #27
 80021ce:	2218      	movs	r2, #24
 80021d0:	189b      	adds	r3, r3, r2
 80021d2:	19db      	adds	r3, r3, r7
 80021d4:	2210      	movs	r2, #16
 80021d6:	701a      	strb	r2, [r3, #0]
 80021d8:	e049      	b.n	800226e <UART_SetConfig+0x1fa>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a7a      	ldr	r2, [pc, #488]	; (80023c8 <UART_SetConfig+0x354>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d13e      	bne.n	8002262 <UART_SetConfig+0x1ee>
 80021e4:	4b7b      	ldr	r3, [pc, #492]	; (80023d4 <UART_SetConfig+0x360>)
 80021e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021e8:	23c0      	movs	r3, #192	; 0xc0
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	4013      	ands	r3, r2
 80021ee:	22c0      	movs	r2, #192	; 0xc0
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d027      	beq.n	8002246 <UART_SetConfig+0x1d2>
 80021f6:	22c0      	movs	r2, #192	; 0xc0
 80021f8:	0112      	lsls	r2, r2, #4
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d82a      	bhi.n	8002254 <UART_SetConfig+0x1e0>
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	0112      	lsls	r2, r2, #4
 8002202:	4293      	cmp	r3, r2
 8002204:	d011      	beq.n	800222a <UART_SetConfig+0x1b6>
 8002206:	2280      	movs	r2, #128	; 0x80
 8002208:	0112      	lsls	r2, r2, #4
 800220a:	4293      	cmp	r3, r2
 800220c:	d822      	bhi.n	8002254 <UART_SetConfig+0x1e0>
 800220e:	2b00      	cmp	r3, #0
 8002210:	d004      	beq.n	800221c <UART_SetConfig+0x1a8>
 8002212:	2280      	movs	r2, #128	; 0x80
 8002214:	00d2      	lsls	r2, r2, #3
 8002216:	4293      	cmp	r3, r2
 8002218:	d00e      	beq.n	8002238 <UART_SetConfig+0x1c4>
 800221a:	e01b      	b.n	8002254 <UART_SetConfig+0x1e0>
 800221c:	231b      	movs	r3, #27
 800221e:	2218      	movs	r2, #24
 8002220:	189b      	adds	r3, r3, r2
 8002222:	19db      	adds	r3, r3, r7
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	e021      	b.n	800226e <UART_SetConfig+0x1fa>
 800222a:	231b      	movs	r3, #27
 800222c:	2218      	movs	r2, #24
 800222e:	189b      	adds	r3, r3, r2
 8002230:	19db      	adds	r3, r3, r7
 8002232:	2202      	movs	r2, #2
 8002234:	701a      	strb	r2, [r3, #0]
 8002236:	e01a      	b.n	800226e <UART_SetConfig+0x1fa>
 8002238:	231b      	movs	r3, #27
 800223a:	2218      	movs	r2, #24
 800223c:	189b      	adds	r3, r3, r2
 800223e:	19db      	adds	r3, r3, r7
 8002240:	2204      	movs	r2, #4
 8002242:	701a      	strb	r2, [r3, #0]
 8002244:	e013      	b.n	800226e <UART_SetConfig+0x1fa>
 8002246:	231b      	movs	r3, #27
 8002248:	2218      	movs	r2, #24
 800224a:	189b      	adds	r3, r3, r2
 800224c:	19db      	adds	r3, r3, r7
 800224e:	2208      	movs	r2, #8
 8002250:	701a      	strb	r2, [r3, #0]
 8002252:	e00c      	b.n	800226e <UART_SetConfig+0x1fa>
 8002254:	231b      	movs	r3, #27
 8002256:	2218      	movs	r2, #24
 8002258:	189b      	adds	r3, r3, r2
 800225a:	19db      	adds	r3, r3, r7
 800225c:	2210      	movs	r2, #16
 800225e:	701a      	strb	r2, [r3, #0]
 8002260:	e005      	b.n	800226e <UART_SetConfig+0x1fa>
 8002262:	231b      	movs	r3, #27
 8002264:	2218      	movs	r2, #24
 8002266:	189b      	adds	r3, r3, r2
 8002268:	19db      	adds	r3, r3, r7
 800226a:	2210      	movs	r2, #16
 800226c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a55      	ldr	r2, [pc, #340]	; (80023c8 <UART_SetConfig+0x354>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d000      	beq.n	800227a <UART_SetConfig+0x206>
 8002278:	e084      	b.n	8002384 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800227a:	231b      	movs	r3, #27
 800227c:	2218      	movs	r2, #24
 800227e:	189b      	adds	r3, r3, r2
 8002280:	19db      	adds	r3, r3, r7
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d01d      	beq.n	80022c4 <UART_SetConfig+0x250>
 8002288:	dc20      	bgt.n	80022cc <UART_SetConfig+0x258>
 800228a:	2b04      	cmp	r3, #4
 800228c:	d015      	beq.n	80022ba <UART_SetConfig+0x246>
 800228e:	dc1d      	bgt.n	80022cc <UART_SetConfig+0x258>
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <UART_SetConfig+0x226>
 8002294:	2b02      	cmp	r3, #2
 8002296:	d005      	beq.n	80022a4 <UART_SetConfig+0x230>
 8002298:	e018      	b.n	80022cc <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800229a:	f7ff fc3d 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 800229e:	0003      	movs	r3, r0
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022a2:	e01c      	b.n	80022de <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022a4:	4b4b      	ldr	r3, [pc, #300]	; (80023d4 <UART_SetConfig+0x360>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2210      	movs	r2, #16
 80022aa:	4013      	ands	r3, r2
 80022ac:	d002      	beq.n	80022b4 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80022ae:	4b4b      	ldr	r3, [pc, #300]	; (80023dc <UART_SetConfig+0x368>)
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80022b2:	e014      	b.n	80022de <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80022b4:	4b4a      	ldr	r3, [pc, #296]	; (80023e0 <UART_SetConfig+0x36c>)
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022b8:	e011      	b.n	80022de <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022ba:	f7ff fb7d 	bl	80019b8 <HAL_RCC_GetSysClockFreq>
 80022be:	0003      	movs	r3, r0
 80022c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022c2:	e00c      	b.n	80022de <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022ca:	e008      	b.n	80022de <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80022d0:	231a      	movs	r3, #26
 80022d2:	2218      	movs	r2, #24
 80022d4:	189b      	adds	r3, r3, r2
 80022d6:	19db      	adds	r3, r3, r7
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
        break;
 80022dc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80022de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d100      	bne.n	80022e6 <UART_SetConfig+0x272>
 80022e4:	e132      	b.n	800254c <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	0013      	movs	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	189b      	adds	r3, r3, r2
 80022f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d305      	bcc.n	8002302 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80022fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022fe:	429a      	cmp	r2, r3
 8002300:	d906      	bls.n	8002310 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002302:	231a      	movs	r3, #26
 8002304:	2218      	movs	r2, #24
 8002306:	189b      	adds	r3, r3, r2
 8002308:	19db      	adds	r3, r3, r7
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	e11d      	b.n	800254c <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	6939      	ldr	r1, [r7, #16]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	000b      	movs	r3, r1
 800231e:	0e1b      	lsrs	r3, r3, #24
 8002320:	0010      	movs	r0, r2
 8002322:	0205      	lsls	r5, r0, #8
 8002324:	431d      	orrs	r5, r3
 8002326:	000b      	movs	r3, r1
 8002328:	021c      	lsls	r4, r3, #8
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	085b      	lsrs	r3, r3, #1
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68b8      	ldr	r0, [r7, #8]
 8002338:	68f9      	ldr	r1, [r7, #12]
 800233a:	1900      	adds	r0, r0, r4
 800233c:	4169      	adcs	r1, r5
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	2300      	movs	r3, #0
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f7fd ff72 	bl	8000234 <__aeabi_uldivmod>
 8002350:	0002      	movs	r2, r0
 8002352:	000b      	movs	r3, r1
 8002354:	0013      	movs	r3, r2
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800235a:	23c0      	movs	r3, #192	; 0xc0
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	429a      	cmp	r2, r3
 8002360:	d309      	bcc.n	8002376 <UART_SetConfig+0x302>
 8002362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	035b      	lsls	r3, r3, #13
 8002368:	429a      	cmp	r2, r3
 800236a:	d204      	bcs.n	8002376 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002372:	60da      	str	r2, [r3, #12]
 8002374:	e0ea      	b.n	800254c <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002376:	231a      	movs	r3, #26
 8002378:	2218      	movs	r2, #24
 800237a:	189b      	adds	r3, r3, r2
 800237c:	19db      	adds	r3, r3, r7
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	e0e3      	b.n	800254c <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	69da      	ldr	r2, [r3, #28]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	429a      	cmp	r2, r3
 800238e:	d000      	beq.n	8002392 <UART_SetConfig+0x31e>
 8002390:	e085      	b.n	800249e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002392:	231b      	movs	r3, #27
 8002394:	2218      	movs	r2, #24
 8002396:	189b      	adds	r3, r3, r2
 8002398:	19db      	adds	r3, r3, r7
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b08      	cmp	r3, #8
 800239e:	d837      	bhi.n	8002410 <UART_SetConfig+0x39c>
 80023a0:	009a      	lsls	r2, r3, #2
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <UART_SetConfig+0x370>)
 80023a4:	18d3      	adds	r3, r2, r3
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023aa:	f7ff fbb5 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 80023ae:	0003      	movs	r3, r0
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023b2:	e036      	b.n	8002422 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023b4:	f7ff fbc6 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
 80023b8:	0003      	movs	r3, r0
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023bc:	e031      	b.n	8002422 <UART_SetConfig+0x3ae>
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	efff69f3 	.word	0xefff69f3
 80023c4:	ffffcfff 	.word	0xffffcfff
 80023c8:	40004800 	.word	0x40004800
 80023cc:	fffff4ff 	.word	0xfffff4ff
 80023d0:	40013800 	.word	0x40013800
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40004400 	.word	0x40004400
 80023dc:	003d0900 	.word	0x003d0900
 80023e0:	00f42400 	.word	0x00f42400
 80023e4:	080038f4 	.word	0x080038f4
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023e8:	4b60      	ldr	r3, [pc, #384]	; (800256c <UART_SetConfig+0x4f8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2210      	movs	r2, #16
 80023ee:	4013      	ands	r3, r2
 80023f0:	d002      	beq.n	80023f8 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80023f2:	4b5f      	ldr	r3, [pc, #380]	; (8002570 <UART_SetConfig+0x4fc>)
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80023f6:	e014      	b.n	8002422 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80023f8:	4b5e      	ldr	r3, [pc, #376]	; (8002574 <UART_SetConfig+0x500>)
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023fc:	e011      	b.n	8002422 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023fe:	f7ff fadb 	bl	80019b8 <HAL_RCC_GetSysClockFreq>
 8002402:	0003      	movs	r3, r0
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002406:	e00c      	b.n	8002422 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800240e:	e008      	b.n	8002422 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002414:	231a      	movs	r3, #26
 8002416:	2218      	movs	r2, #24
 8002418:	189b      	adds	r3, r3, r2
 800241a:	19db      	adds	r3, r3, r7
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
        break;
 8002420:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d100      	bne.n	800242a <UART_SetConfig+0x3b6>
 8002428:	e090      	b.n	800254c <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	005a      	lsls	r2, r3, #1
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	18d2      	adds	r2, r2, r3
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	0019      	movs	r1, r3
 800243c:	0010      	movs	r0, r2
 800243e:	f7fd fe6d 	bl	800011c <__udivsi3>
 8002442:	0003      	movs	r3, r0
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002448:	2b0f      	cmp	r3, #15
 800244a:	d921      	bls.n	8002490 <UART_SetConfig+0x41c>
 800244c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	025b      	lsls	r3, r3, #9
 8002452:	429a      	cmp	r2, r3
 8002454:	d21c      	bcs.n	8002490 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002458:	b29a      	uxth	r2, r3
 800245a:	200e      	movs	r0, #14
 800245c:	2418      	movs	r4, #24
 800245e:	1903      	adds	r3, r0, r4
 8002460:	19db      	adds	r3, r3, r7
 8002462:	210f      	movs	r1, #15
 8002464:	438a      	bics	r2, r1
 8002466:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246a:	085b      	lsrs	r3, r3, #1
 800246c:	b29b      	uxth	r3, r3
 800246e:	2207      	movs	r2, #7
 8002470:	4013      	ands	r3, r2
 8002472:	b299      	uxth	r1, r3
 8002474:	1903      	adds	r3, r0, r4
 8002476:	19db      	adds	r3, r3, r7
 8002478:	1902      	adds	r2, r0, r4
 800247a:	19d2      	adds	r2, r2, r7
 800247c:	8812      	ldrh	r2, [r2, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	1902      	adds	r2, r0, r4
 8002488:	19d2      	adds	r2, r2, r7
 800248a:	8812      	ldrh	r2, [r2, #0]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	e05d      	b.n	800254c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002490:	231a      	movs	r3, #26
 8002492:	2218      	movs	r2, #24
 8002494:	189b      	adds	r3, r3, r2
 8002496:	19db      	adds	r3, r3, r7
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
 800249c:	e056      	b.n	800254c <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800249e:	231b      	movs	r3, #27
 80024a0:	2218      	movs	r2, #24
 80024a2:	189b      	adds	r3, r3, r2
 80024a4:	19db      	adds	r3, r3, r7
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d822      	bhi.n	80024f2 <UART_SetConfig+0x47e>
 80024ac:	009a      	lsls	r2, r3, #2
 80024ae:	4b32      	ldr	r3, [pc, #200]	; (8002578 <UART_SetConfig+0x504>)
 80024b0:	18d3      	adds	r3, r2, r3
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024b6:	f7ff fb2f 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 80024ba:	0003      	movs	r3, r0
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024be:	e021      	b.n	8002504 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80024c0:	f7ff fb40 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
 80024c4:	0003      	movs	r3, r0
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024c8:	e01c      	b.n	8002504 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024ca:	4b28      	ldr	r3, [pc, #160]	; (800256c <UART_SetConfig+0x4f8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2210      	movs	r2, #16
 80024d0:	4013      	ands	r3, r2
 80024d2:	d002      	beq.n	80024da <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80024d4:	4b26      	ldr	r3, [pc, #152]	; (8002570 <UART_SetConfig+0x4fc>)
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80024d8:	e014      	b.n	8002504 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80024da:	4b26      	ldr	r3, [pc, #152]	; (8002574 <UART_SetConfig+0x500>)
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024de:	e011      	b.n	8002504 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024e0:	f7ff fa6a 	bl	80019b8 <HAL_RCC_GetSysClockFreq>
 80024e4:	0003      	movs	r3, r0
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024e8:	e00c      	b.n	8002504 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024f0:	e008      	b.n	8002504 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80024f6:	231a      	movs	r3, #26
 80024f8:	2218      	movs	r2, #24
 80024fa:	189b      	adds	r3, r3, r2
 80024fc:	19db      	adds	r3, r3, r7
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
        break;
 8002502:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002506:	2b00      	cmp	r3, #0
 8002508:	d020      	beq.n	800254c <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	085a      	lsrs	r2, r3, #1
 8002510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002512:	18d2      	adds	r2, r2, r3
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	0019      	movs	r1, r3
 800251a:	0010      	movs	r0, r2
 800251c:	f7fd fdfe 	bl	800011c <__udivsi3>
 8002520:	0003      	movs	r3, r0
 8002522:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002526:	2b0f      	cmp	r3, #15
 8002528:	d90a      	bls.n	8002540 <UART_SetConfig+0x4cc>
 800252a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	025b      	lsls	r3, r3, #9
 8002530:	429a      	cmp	r2, r3
 8002532:	d205      	bcs.n	8002540 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	b29a      	uxth	r2, r3
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	e005      	b.n	800254c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002540:	231a      	movs	r3, #26
 8002542:	2218      	movs	r2, #24
 8002544:	189b      	adds	r3, r3, r2
 8002546:	19db      	adds	r3, r3, r7
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	2200      	movs	r2, #0
 8002550:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	2200      	movs	r2, #0
 8002556:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002558:	231a      	movs	r3, #26
 800255a:	2218      	movs	r2, #24
 800255c:	189b      	adds	r3, r3, r2
 800255e:	19db      	adds	r3, r3, r7
 8002560:	781b      	ldrb	r3, [r3, #0]
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b00e      	add	sp, #56	; 0x38
 8002568:	bdb0      	pop	{r4, r5, r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	40021000 	.word	0x40021000
 8002570:	003d0900 	.word	0x003d0900
 8002574:	00f42400 	.word	0x00f42400
 8002578:	08003918 	.word	0x08003918

0800257c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	2201      	movs	r2, #1
 800258a:	4013      	ands	r3, r2
 800258c:	d00b      	beq.n	80025a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4a4a      	ldr	r2, [pc, #296]	; (80026c0 <UART_AdvFeatureConfig+0x144>)
 8002596:	4013      	ands	r3, r2
 8002598:	0019      	movs	r1, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	2202      	movs	r2, #2
 80025ac:	4013      	ands	r3, r2
 80025ae:	d00b      	beq.n	80025c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4a43      	ldr	r2, [pc, #268]	; (80026c4 <UART_AdvFeatureConfig+0x148>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	0019      	movs	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	2204      	movs	r2, #4
 80025ce:	4013      	ands	r3, r2
 80025d0:	d00b      	beq.n	80025ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4a3b      	ldr	r2, [pc, #236]	; (80026c8 <UART_AdvFeatureConfig+0x14c>)
 80025da:	4013      	ands	r3, r2
 80025dc:	0019      	movs	r1, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	2208      	movs	r2, #8
 80025f0:	4013      	ands	r3, r2
 80025f2:	d00b      	beq.n	800260c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4a34      	ldr	r2, [pc, #208]	; (80026cc <UART_AdvFeatureConfig+0x150>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	0019      	movs	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	2210      	movs	r2, #16
 8002612:	4013      	ands	r3, r2
 8002614:	d00b      	beq.n	800262e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4a2c      	ldr	r2, [pc, #176]	; (80026d0 <UART_AdvFeatureConfig+0x154>)
 800261e:	4013      	ands	r3, r2
 8002620:	0019      	movs	r1, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	2220      	movs	r2, #32
 8002634:	4013      	ands	r3, r2
 8002636:	d00b      	beq.n	8002650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	4a25      	ldr	r2, [pc, #148]	; (80026d4 <UART_AdvFeatureConfig+0x158>)
 8002640:	4013      	ands	r3, r2
 8002642:	0019      	movs	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	2240      	movs	r2, #64	; 0x40
 8002656:	4013      	ands	r3, r2
 8002658:	d01d      	beq.n	8002696 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <UART_AdvFeatureConfig+0x15c>)
 8002662:	4013      	ands	r3, r2
 8002664:	0019      	movs	r1, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	035b      	lsls	r3, r3, #13
 800267a:	429a      	cmp	r2, r3
 800267c:	d10b      	bne.n	8002696 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	4a15      	ldr	r2, [pc, #84]	; (80026dc <UART_AdvFeatureConfig+0x160>)
 8002686:	4013      	ands	r3, r2
 8002688:	0019      	movs	r1, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	2280      	movs	r2, #128	; 0x80
 800269c:	4013      	ands	r3, r2
 800269e:	d00b      	beq.n	80026b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4a0e      	ldr	r2, [pc, #56]	; (80026e0 <UART_AdvFeatureConfig+0x164>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	0019      	movs	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	605a      	str	r2, [r3, #4]
  }
}
 80026b8:	46c0      	nop			; (mov r8, r8)
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b002      	add	sp, #8
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	fffdffff 	.word	0xfffdffff
 80026c4:	fffeffff 	.word	0xfffeffff
 80026c8:	fffbffff 	.word	0xfffbffff
 80026cc:	ffff7fff 	.word	0xffff7fff
 80026d0:	ffffefff 	.word	0xffffefff
 80026d4:	ffffdfff 	.word	0xffffdfff
 80026d8:	ffefffff 	.word	0xffefffff
 80026dc:	ff9fffff 	.word	0xff9fffff
 80026e0:	fff7ffff 	.word	0xfff7ffff

080026e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b092      	sub	sp, #72	; 0x48
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2284      	movs	r2, #132	; 0x84
 80026f0:	2100      	movs	r1, #0
 80026f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80026f4:	f7fe f9e6 	bl	8000ac4 <HAL_GetTick>
 80026f8:	0003      	movs	r3, r0
 80026fa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2208      	movs	r2, #8
 8002704:	4013      	ands	r3, r2
 8002706:	2b08      	cmp	r3, #8
 8002708:	d12c      	bne.n	8002764 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800270a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800270c:	2280      	movs	r2, #128	; 0x80
 800270e:	0391      	lsls	r1, r2, #14
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	4a46      	ldr	r2, [pc, #280]	; (800282c <UART_CheckIdleState+0x148>)
 8002714:	9200      	str	r2, [sp, #0]
 8002716:	2200      	movs	r2, #0
 8002718:	f000 f88c 	bl	8002834 <UART_WaitOnFlagUntilTimeout>
 800271c:	1e03      	subs	r3, r0, #0
 800271e:	d021      	beq.n	8002764 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002720:	f3ef 8310 	mrs	r3, PRIMASK
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002728:	63bb      	str	r3, [r7, #56]	; 0x38
 800272a:	2301      	movs	r3, #1
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800272e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002730:	f383 8810 	msr	PRIMASK, r3
}
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2180      	movs	r1, #128	; 0x80
 8002742:	438a      	bics	r2, r1
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002748:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	f383 8810 	msr	PRIMASK, r3
}
 8002750:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2278      	movs	r2, #120	; 0x78
 800275c:	2100      	movs	r1, #0
 800275e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e05f      	b.n	8002824 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2204      	movs	r2, #4
 800276c:	4013      	ands	r3, r2
 800276e:	2b04      	cmp	r3, #4
 8002770:	d146      	bne.n	8002800 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002774:	2280      	movs	r2, #128	; 0x80
 8002776:	03d1      	lsls	r1, r2, #15
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4a2c      	ldr	r2, [pc, #176]	; (800282c <UART_CheckIdleState+0x148>)
 800277c:	9200      	str	r2, [sp, #0]
 800277e:	2200      	movs	r2, #0
 8002780:	f000 f858 	bl	8002834 <UART_WaitOnFlagUntilTimeout>
 8002784:	1e03      	subs	r3, r0, #0
 8002786:	d03b      	beq.n	8002800 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002788:	f3ef 8310 	mrs	r3, PRIMASK
 800278c:	60fb      	str	r3, [r7, #12]
  return(result);
 800278e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002790:	637b      	str	r3, [r7, #52]	; 0x34
 8002792:	2301      	movs	r3, #1
 8002794:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f383 8810 	msr	PRIMASK, r3
}
 800279c:	46c0      	nop			; (mov r8, r8)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4921      	ldr	r1, [pc, #132]	; (8002830 <UART_CheckIdleState+0x14c>)
 80027aa:	400a      	ands	r2, r1
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f383 8810 	msr	PRIMASK, r3
}
 80027b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ba:	f3ef 8310 	mrs	r3, PRIMASK
 80027be:	61bb      	str	r3, [r7, #24]
  return(result);
 80027c0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c2:	633b      	str	r3, [r7, #48]	; 0x30
 80027c4:	2301      	movs	r3, #1
 80027c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f383 8810 	msr	PRIMASK, r3
}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2101      	movs	r1, #1
 80027dc:	438a      	bics	r2, r1
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	f383 8810 	msr	PRIMASK, r3
}
 80027ea:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2280      	movs	r2, #128	; 0x80
 80027f0:	2120      	movs	r1, #32
 80027f2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2278      	movs	r2, #120	; 0x78
 80027f8:	2100      	movs	r1, #0
 80027fa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e011      	b.n	8002824 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2280      	movs	r2, #128	; 0x80
 800280a:	2120      	movs	r1, #32
 800280c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2278      	movs	r2, #120	; 0x78
 800281e:	2100      	movs	r1, #0
 8002820:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	0018      	movs	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	b010      	add	sp, #64	; 0x40
 800282a:	bd80      	pop	{r7, pc}
 800282c:	01ffffff 	.word	0x01ffffff
 8002830:	fffffedf 	.word	0xfffffedf

08002834 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	1dfb      	adds	r3, r7, #7
 8002842:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002844:	e04b      	b.n	80028de <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	3301      	adds	r3, #1
 800284a:	d048      	beq.n	80028de <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284c:	f7fe f93a 	bl	8000ac4 <HAL_GetTick>
 8002850:	0002      	movs	r2, r0
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	429a      	cmp	r2, r3
 800285a:	d302      	bcc.n	8002862 <UART_WaitOnFlagUntilTimeout+0x2e>
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e04b      	b.n	80028fe <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2204      	movs	r2, #4
 800286e:	4013      	ands	r3, r2
 8002870:	d035      	beq.n	80028de <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	2208      	movs	r2, #8
 800287a:	4013      	ands	r3, r2
 800287c:	2b08      	cmp	r3, #8
 800287e:	d111      	bne.n	80028a4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2208      	movs	r2, #8
 8002886:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	0018      	movs	r0, r3
 800288c:	f000 f83c 	bl	8002908 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2284      	movs	r2, #132	; 0x84
 8002894:	2108      	movs	r1, #8
 8002896:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2278      	movs	r2, #120	; 0x78
 800289c:	2100      	movs	r1, #0
 800289e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e02c      	b.n	80028fe <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69da      	ldr	r2, [r3, #28]
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	401a      	ands	r2, r3
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d112      	bne.n	80028de <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2280      	movs	r2, #128	; 0x80
 80028be:	0112      	lsls	r2, r2, #4
 80028c0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	0018      	movs	r0, r3
 80028c6:	f000 f81f 	bl	8002908 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2284      	movs	r2, #132	; 0x84
 80028ce:	2120      	movs	r1, #32
 80028d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2278      	movs	r2, #120	; 0x78
 80028d6:	2100      	movs	r1, #0
 80028d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e00f      	b.n	80028fe <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	4013      	ands	r3, r2
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	425a      	negs	r2, r3
 80028ee:	4153      	adcs	r3, r2
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	001a      	movs	r2, r3
 80028f4:	1dfb      	adds	r3, r7, #7
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d0a4      	beq.n	8002846 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	0018      	movs	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	b004      	add	sp, #16
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08e      	sub	sp, #56	; 0x38
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002910:	f3ef 8310 	mrs	r3, PRIMASK
 8002914:	617b      	str	r3, [r7, #20]
  return(result);
 8002916:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002918:	637b      	str	r3, [r7, #52]	; 0x34
 800291a:	2301      	movs	r3, #1
 800291c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	f383 8810 	msr	PRIMASK, r3
}
 8002924:	46c0      	nop			; (mov r8, r8)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4926      	ldr	r1, [pc, #152]	; (80029cc <UART_EndRxTransfer+0xc4>)
 8002932:	400a      	ands	r2, r1
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002938:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f383 8810 	msr	PRIMASK, r3
}
 8002940:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002942:	f3ef 8310 	mrs	r3, PRIMASK
 8002946:	623b      	str	r3, [r7, #32]
  return(result);
 8002948:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294a:	633b      	str	r3, [r7, #48]	; 0x30
 800294c:	2301      	movs	r3, #1
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	f383 8810 	msr	PRIMASK, r3
}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2101      	movs	r1, #1
 8002964:	438a      	bics	r2, r1
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296e:	f383 8810 	msr	PRIMASK, r3
}
 8002972:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002978:	2b01      	cmp	r3, #1
 800297a:	d118      	bne.n	80029ae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800297c:	f3ef 8310 	mrs	r3, PRIMASK
 8002980:	60bb      	str	r3, [r7, #8]
  return(result);
 8002982:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002986:	2301      	movs	r3, #1
 8002988:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f383 8810 	msr	PRIMASK, r3
}
 8002990:	46c0      	nop			; (mov r8, r8)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2110      	movs	r1, #16
 800299e:	438a      	bics	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f383 8810 	msr	PRIMASK, r3
}
 80029ac:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2280      	movs	r2, #128	; 0x80
 80029b2:	2120      	movs	r1, #32
 80029b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b00e      	add	sp, #56	; 0x38
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	fffffedf 	.word	0xfffffedf

080029d0 <std>:
 80029d0:	2300      	movs	r3, #0
 80029d2:	b510      	push	{r4, lr}
 80029d4:	0004      	movs	r4, r0
 80029d6:	6003      	str	r3, [r0, #0]
 80029d8:	6043      	str	r3, [r0, #4]
 80029da:	6083      	str	r3, [r0, #8]
 80029dc:	8181      	strh	r1, [r0, #12]
 80029de:	6643      	str	r3, [r0, #100]	; 0x64
 80029e0:	81c2      	strh	r2, [r0, #14]
 80029e2:	6103      	str	r3, [r0, #16]
 80029e4:	6143      	str	r3, [r0, #20]
 80029e6:	6183      	str	r3, [r0, #24]
 80029e8:	0019      	movs	r1, r3
 80029ea:	2208      	movs	r2, #8
 80029ec:	305c      	adds	r0, #92	; 0x5c
 80029ee:	f000 f90f 	bl	8002c10 <memset>
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <std+0x50>)
 80029f4:	6224      	str	r4, [r4, #32]
 80029f6:	6263      	str	r3, [r4, #36]	; 0x24
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <std+0x54>)
 80029fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80029fc:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <std+0x58>)
 80029fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <std+0x5c>)
 8002a02:	6323      	str	r3, [r4, #48]	; 0x30
 8002a04:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <std+0x60>)
 8002a06:	429c      	cmp	r4, r3
 8002a08:	d005      	beq.n	8002a16 <std+0x46>
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <std+0x64>)
 8002a0c:	429c      	cmp	r4, r3
 8002a0e:	d002      	beq.n	8002a16 <std+0x46>
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <std+0x68>)
 8002a12:	429c      	cmp	r4, r3
 8002a14:	d103      	bne.n	8002a1e <std+0x4e>
 8002a16:	0020      	movs	r0, r4
 8002a18:	3058      	adds	r0, #88	; 0x58
 8002a1a:	f000 f979 	bl	8002d10 <__retarget_lock_init_recursive>
 8002a1e:	bd10      	pop	{r4, pc}
 8002a20:	08002b79 	.word	0x08002b79
 8002a24:	08002ba1 	.word	0x08002ba1
 8002a28:	08002bd9 	.word	0x08002bd9
 8002a2c:	08002c05 	.word	0x08002c05
 8002a30:	20000124 	.word	0x20000124
 8002a34:	2000018c 	.word	0x2000018c
 8002a38:	200001f4 	.word	0x200001f4

08002a3c <stdio_exit_handler>:
 8002a3c:	b510      	push	{r4, lr}
 8002a3e:	4a03      	ldr	r2, [pc, #12]	; (8002a4c <stdio_exit_handler+0x10>)
 8002a40:	4903      	ldr	r1, [pc, #12]	; (8002a50 <stdio_exit_handler+0x14>)
 8002a42:	4804      	ldr	r0, [pc, #16]	; (8002a54 <stdio_exit_handler+0x18>)
 8002a44:	f000 f86c 	bl	8002b20 <_fwalk_sglue>
 8002a48:	bd10      	pop	{r4, pc}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	2000001c 	.word	0x2000001c
 8002a50:	080035b1 	.word	0x080035b1
 8002a54:	20000028 	.word	0x20000028

08002a58 <cleanup_stdio>:
 8002a58:	6841      	ldr	r1, [r0, #4]
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <cleanup_stdio+0x30>)
 8002a5c:	b510      	push	{r4, lr}
 8002a5e:	0004      	movs	r4, r0
 8002a60:	4299      	cmp	r1, r3
 8002a62:	d001      	beq.n	8002a68 <cleanup_stdio+0x10>
 8002a64:	f000 fda4 	bl	80035b0 <_fflush_r>
 8002a68:	68a1      	ldr	r1, [r4, #8]
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <cleanup_stdio+0x34>)
 8002a6c:	4299      	cmp	r1, r3
 8002a6e:	d002      	beq.n	8002a76 <cleanup_stdio+0x1e>
 8002a70:	0020      	movs	r0, r4
 8002a72:	f000 fd9d 	bl	80035b0 <_fflush_r>
 8002a76:	68e1      	ldr	r1, [r4, #12]
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <cleanup_stdio+0x38>)
 8002a7a:	4299      	cmp	r1, r3
 8002a7c:	d002      	beq.n	8002a84 <cleanup_stdio+0x2c>
 8002a7e:	0020      	movs	r0, r4
 8002a80:	f000 fd96 	bl	80035b0 <_fflush_r>
 8002a84:	bd10      	pop	{r4, pc}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	20000124 	.word	0x20000124
 8002a8c:	2000018c 	.word	0x2000018c
 8002a90:	200001f4 	.word	0x200001f4

08002a94 <global_stdio_init.part.0>:
 8002a94:	b510      	push	{r4, lr}
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <global_stdio_init.part.0+0x28>)
 8002a98:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <global_stdio_init.part.0+0x2c>)
 8002a9a:	2104      	movs	r1, #4
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	4809      	ldr	r0, [pc, #36]	; (8002ac4 <global_stdio_init.part.0+0x30>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f7ff ff95 	bl	80029d0 <std>
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	2109      	movs	r1, #9
 8002aaa:	4807      	ldr	r0, [pc, #28]	; (8002ac8 <global_stdio_init.part.0+0x34>)
 8002aac:	f7ff ff90 	bl	80029d0 <std>
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	2112      	movs	r1, #18
 8002ab4:	4805      	ldr	r0, [pc, #20]	; (8002acc <global_stdio_init.part.0+0x38>)
 8002ab6:	f7ff ff8b 	bl	80029d0 <std>
 8002aba:	bd10      	pop	{r4, pc}
 8002abc:	2000025c 	.word	0x2000025c
 8002ac0:	08002a3d 	.word	0x08002a3d
 8002ac4:	20000124 	.word	0x20000124
 8002ac8:	2000018c 	.word	0x2000018c
 8002acc:	200001f4 	.word	0x200001f4

08002ad0 <__sfp_lock_acquire>:
 8002ad0:	b510      	push	{r4, lr}
 8002ad2:	4802      	ldr	r0, [pc, #8]	; (8002adc <__sfp_lock_acquire+0xc>)
 8002ad4:	f000 f91d 	bl	8002d12 <__retarget_lock_acquire_recursive>
 8002ad8:	bd10      	pop	{r4, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	20000265 	.word	0x20000265

08002ae0 <__sfp_lock_release>:
 8002ae0:	b510      	push	{r4, lr}
 8002ae2:	4802      	ldr	r0, [pc, #8]	; (8002aec <__sfp_lock_release+0xc>)
 8002ae4:	f000 f916 	bl	8002d14 <__retarget_lock_release_recursive>
 8002ae8:	bd10      	pop	{r4, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	20000265 	.word	0x20000265

08002af0 <__sinit>:
 8002af0:	b510      	push	{r4, lr}
 8002af2:	0004      	movs	r4, r0
 8002af4:	f7ff ffec 	bl	8002ad0 <__sfp_lock_acquire>
 8002af8:	6a23      	ldr	r3, [r4, #32]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <__sinit+0x14>
 8002afe:	f7ff ffef 	bl	8002ae0 <__sfp_lock_release>
 8002b02:	bd10      	pop	{r4, pc}
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <__sinit+0x28>)
 8002b06:	6223      	str	r3, [r4, #32]
 8002b08:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <__sinit+0x2c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f6      	bne.n	8002afe <__sinit+0xe>
 8002b10:	f7ff ffc0 	bl	8002a94 <global_stdio_init.part.0>
 8002b14:	e7f3      	b.n	8002afe <__sinit+0xe>
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	08002a59 	.word	0x08002a59
 8002b1c:	2000025c 	.word	0x2000025c

08002b20 <_fwalk_sglue>:
 8002b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b22:	0014      	movs	r4, r2
 8002b24:	2600      	movs	r6, #0
 8002b26:	9000      	str	r0, [sp, #0]
 8002b28:	9101      	str	r1, [sp, #4]
 8002b2a:	68a5      	ldr	r5, [r4, #8]
 8002b2c:	6867      	ldr	r7, [r4, #4]
 8002b2e:	3f01      	subs	r7, #1
 8002b30:	d504      	bpl.n	8002b3c <_fwalk_sglue+0x1c>
 8002b32:	6824      	ldr	r4, [r4, #0]
 8002b34:	2c00      	cmp	r4, #0
 8002b36:	d1f8      	bne.n	8002b2a <_fwalk_sglue+0xa>
 8002b38:	0030      	movs	r0, r6
 8002b3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002b3c:	89ab      	ldrh	r3, [r5, #12]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d908      	bls.n	8002b54 <_fwalk_sglue+0x34>
 8002b42:	220e      	movs	r2, #14
 8002b44:	5eab      	ldrsh	r3, [r5, r2]
 8002b46:	3301      	adds	r3, #1
 8002b48:	d004      	beq.n	8002b54 <_fwalk_sglue+0x34>
 8002b4a:	0029      	movs	r1, r5
 8002b4c:	9800      	ldr	r0, [sp, #0]
 8002b4e:	9b01      	ldr	r3, [sp, #4]
 8002b50:	4798      	blx	r3
 8002b52:	4306      	orrs	r6, r0
 8002b54:	3568      	adds	r5, #104	; 0x68
 8002b56:	e7ea      	b.n	8002b2e <_fwalk_sglue+0xe>

08002b58 <iprintf>:
 8002b58:	b40f      	push	{r0, r1, r2, r3}
 8002b5a:	b507      	push	{r0, r1, r2, lr}
 8002b5c:	4905      	ldr	r1, [pc, #20]	; (8002b74 <iprintf+0x1c>)
 8002b5e:	ab04      	add	r3, sp, #16
 8002b60:	6808      	ldr	r0, [r1, #0]
 8002b62:	cb04      	ldmia	r3!, {r2}
 8002b64:	6881      	ldr	r1, [r0, #8]
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	f000 f9fc 	bl	8002f64 <_vfiprintf_r>
 8002b6c:	b003      	add	sp, #12
 8002b6e:	bc08      	pop	{r3}
 8002b70:	b004      	add	sp, #16
 8002b72:	4718      	bx	r3
 8002b74:	20000074 	.word	0x20000074

08002b78 <__sread>:
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	000c      	movs	r4, r1
 8002b7c:	250e      	movs	r5, #14
 8002b7e:	5f49      	ldrsh	r1, [r1, r5]
 8002b80:	f000 f874 	bl	8002c6c <_read_r>
 8002b84:	2800      	cmp	r0, #0
 8002b86:	db03      	blt.n	8002b90 <__sread+0x18>
 8002b88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b8a:	181b      	adds	r3, r3, r0
 8002b8c:	6563      	str	r3, [r4, #84]	; 0x54
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}
 8002b90:	89a3      	ldrh	r3, [r4, #12]
 8002b92:	4a02      	ldr	r2, [pc, #8]	; (8002b9c <__sread+0x24>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	81a3      	strh	r3, [r4, #12]
 8002b98:	e7f9      	b.n	8002b8e <__sread+0x16>
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	ffffefff 	.word	0xffffefff

08002ba0 <__swrite>:
 8002ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba2:	001f      	movs	r7, r3
 8002ba4:	898b      	ldrh	r3, [r1, #12]
 8002ba6:	0005      	movs	r5, r0
 8002ba8:	000c      	movs	r4, r1
 8002baa:	0016      	movs	r6, r2
 8002bac:	05db      	lsls	r3, r3, #23
 8002bae:	d505      	bpl.n	8002bbc <__swrite+0x1c>
 8002bb0:	230e      	movs	r3, #14
 8002bb2:	5ec9      	ldrsh	r1, [r1, r3]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	f000 f844 	bl	8002c44 <_lseek_r>
 8002bbc:	89a3      	ldrh	r3, [r4, #12]
 8002bbe:	4a05      	ldr	r2, [pc, #20]	; (8002bd4 <__swrite+0x34>)
 8002bc0:	0028      	movs	r0, r5
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	81a3      	strh	r3, [r4, #12]
 8002bc6:	0032      	movs	r2, r6
 8002bc8:	230e      	movs	r3, #14
 8002bca:	5ee1      	ldrsh	r1, [r4, r3]
 8002bcc:	003b      	movs	r3, r7
 8002bce:	f000 f861 	bl	8002c94 <_write_r>
 8002bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bd4:	ffffefff 	.word	0xffffefff

08002bd8 <__sseek>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	000c      	movs	r4, r1
 8002bdc:	250e      	movs	r5, #14
 8002bde:	5f49      	ldrsh	r1, [r1, r5]
 8002be0:	f000 f830 	bl	8002c44 <_lseek_r>
 8002be4:	89a3      	ldrh	r3, [r4, #12]
 8002be6:	1c42      	adds	r2, r0, #1
 8002be8:	d103      	bne.n	8002bf2 <__sseek+0x1a>
 8002bea:	4a05      	ldr	r2, [pc, #20]	; (8002c00 <__sseek+0x28>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	81a3      	strh	r3, [r4, #12]
 8002bf0:	bd70      	pop	{r4, r5, r6, pc}
 8002bf2:	2280      	movs	r2, #128	; 0x80
 8002bf4:	0152      	lsls	r2, r2, #5
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	81a3      	strh	r3, [r4, #12]
 8002bfa:	6560      	str	r0, [r4, #84]	; 0x54
 8002bfc:	e7f8      	b.n	8002bf0 <__sseek+0x18>
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	ffffefff 	.word	0xffffefff

08002c04 <__sclose>:
 8002c04:	b510      	push	{r4, lr}
 8002c06:	230e      	movs	r3, #14
 8002c08:	5ec9      	ldrsh	r1, [r1, r3]
 8002c0a:	f000 f809 	bl	8002c20 <_close_r>
 8002c0e:	bd10      	pop	{r4, pc}

08002c10 <memset>:
 8002c10:	0003      	movs	r3, r0
 8002c12:	1882      	adds	r2, r0, r2
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d100      	bne.n	8002c1a <memset+0xa>
 8002c18:	4770      	bx	lr
 8002c1a:	7019      	strb	r1, [r3, #0]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	e7f9      	b.n	8002c14 <memset+0x4>

08002c20 <_close_r>:
 8002c20:	2300      	movs	r3, #0
 8002c22:	b570      	push	{r4, r5, r6, lr}
 8002c24:	4d06      	ldr	r5, [pc, #24]	; (8002c40 <_close_r+0x20>)
 8002c26:	0004      	movs	r4, r0
 8002c28:	0008      	movs	r0, r1
 8002c2a:	602b      	str	r3, [r5, #0]
 8002c2c:	f7fd fe52 	bl	80008d4 <_close>
 8002c30:	1c43      	adds	r3, r0, #1
 8002c32:	d103      	bne.n	8002c3c <_close_r+0x1c>
 8002c34:	682b      	ldr	r3, [r5, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d000      	beq.n	8002c3c <_close_r+0x1c>
 8002c3a:	6023      	str	r3, [r4, #0]
 8002c3c:	bd70      	pop	{r4, r5, r6, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	20000260 	.word	0x20000260

08002c44 <_lseek_r>:
 8002c44:	b570      	push	{r4, r5, r6, lr}
 8002c46:	0004      	movs	r4, r0
 8002c48:	0008      	movs	r0, r1
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	001a      	movs	r2, r3
 8002c4e:	2300      	movs	r3, #0
 8002c50:	4d05      	ldr	r5, [pc, #20]	; (8002c68 <_lseek_r+0x24>)
 8002c52:	602b      	str	r3, [r5, #0]
 8002c54:	f7fd fe5f 	bl	8000916 <_lseek>
 8002c58:	1c43      	adds	r3, r0, #1
 8002c5a:	d103      	bne.n	8002c64 <_lseek_r+0x20>
 8002c5c:	682b      	ldr	r3, [r5, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d000      	beq.n	8002c64 <_lseek_r+0x20>
 8002c62:	6023      	str	r3, [r4, #0]
 8002c64:	bd70      	pop	{r4, r5, r6, pc}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	20000260 	.word	0x20000260

08002c6c <_read_r>:
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	0004      	movs	r4, r0
 8002c70:	0008      	movs	r0, r1
 8002c72:	0011      	movs	r1, r2
 8002c74:	001a      	movs	r2, r3
 8002c76:	2300      	movs	r3, #0
 8002c78:	4d05      	ldr	r5, [pc, #20]	; (8002c90 <_read_r+0x24>)
 8002c7a:	602b      	str	r3, [r5, #0]
 8002c7c:	f7fd fdf7 	bl	800086e <_read>
 8002c80:	1c43      	adds	r3, r0, #1
 8002c82:	d103      	bne.n	8002c8c <_read_r+0x20>
 8002c84:	682b      	ldr	r3, [r5, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d000      	beq.n	8002c8c <_read_r+0x20>
 8002c8a:	6023      	str	r3, [r4, #0]
 8002c8c:	bd70      	pop	{r4, r5, r6, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	20000260 	.word	0x20000260

08002c94 <_write_r>:
 8002c94:	b570      	push	{r4, r5, r6, lr}
 8002c96:	0004      	movs	r4, r0
 8002c98:	0008      	movs	r0, r1
 8002c9a:	0011      	movs	r1, r2
 8002c9c:	001a      	movs	r2, r3
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	4d05      	ldr	r5, [pc, #20]	; (8002cb8 <_write_r+0x24>)
 8002ca2:	602b      	str	r3, [r5, #0]
 8002ca4:	f7fd fe00 	bl	80008a8 <_write>
 8002ca8:	1c43      	adds	r3, r0, #1
 8002caa:	d103      	bne.n	8002cb4 <_write_r+0x20>
 8002cac:	682b      	ldr	r3, [r5, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d000      	beq.n	8002cb4 <_write_r+0x20>
 8002cb2:	6023      	str	r3, [r4, #0]
 8002cb4:	bd70      	pop	{r4, r5, r6, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	20000260 	.word	0x20000260

08002cbc <__errno>:
 8002cbc:	4b01      	ldr	r3, [pc, #4]	; (8002cc4 <__errno+0x8>)
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	4770      	bx	lr
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	20000074 	.word	0x20000074

08002cc8 <__libc_init_array>:
 8002cc8:	b570      	push	{r4, r5, r6, lr}
 8002cca:	2600      	movs	r6, #0
 8002ccc:	4c0c      	ldr	r4, [pc, #48]	; (8002d00 <__libc_init_array+0x38>)
 8002cce:	4d0d      	ldr	r5, [pc, #52]	; (8002d04 <__libc_init_array+0x3c>)
 8002cd0:	1b64      	subs	r4, r4, r5
 8002cd2:	10a4      	asrs	r4, r4, #2
 8002cd4:	42a6      	cmp	r6, r4
 8002cd6:	d109      	bne.n	8002cec <__libc_init_array+0x24>
 8002cd8:	2600      	movs	r6, #0
 8002cda:	f000 fde3 	bl	80038a4 <_init>
 8002cde:	4c0a      	ldr	r4, [pc, #40]	; (8002d08 <__libc_init_array+0x40>)
 8002ce0:	4d0a      	ldr	r5, [pc, #40]	; (8002d0c <__libc_init_array+0x44>)
 8002ce2:	1b64      	subs	r4, r4, r5
 8002ce4:	10a4      	asrs	r4, r4, #2
 8002ce6:	42a6      	cmp	r6, r4
 8002ce8:	d105      	bne.n	8002cf6 <__libc_init_array+0x2e>
 8002cea:	bd70      	pop	{r4, r5, r6, pc}
 8002cec:	00b3      	lsls	r3, r6, #2
 8002cee:	58eb      	ldr	r3, [r5, r3]
 8002cf0:	4798      	blx	r3
 8002cf2:	3601      	adds	r6, #1
 8002cf4:	e7ee      	b.n	8002cd4 <__libc_init_array+0xc>
 8002cf6:	00b3      	lsls	r3, r6, #2
 8002cf8:	58eb      	ldr	r3, [r5, r3]
 8002cfa:	4798      	blx	r3
 8002cfc:	3601      	adds	r6, #1
 8002cfe:	e7f2      	b.n	8002ce6 <__libc_init_array+0x1e>
 8002d00:	08003978 	.word	0x08003978
 8002d04:	08003978 	.word	0x08003978
 8002d08:	0800397c 	.word	0x0800397c
 8002d0c:	08003978 	.word	0x08003978

08002d10 <__retarget_lock_init_recursive>:
 8002d10:	4770      	bx	lr

08002d12 <__retarget_lock_acquire_recursive>:
 8002d12:	4770      	bx	lr

08002d14 <__retarget_lock_release_recursive>:
 8002d14:	4770      	bx	lr
	...

08002d18 <_free_r>:
 8002d18:	b570      	push	{r4, r5, r6, lr}
 8002d1a:	0005      	movs	r5, r0
 8002d1c:	2900      	cmp	r1, #0
 8002d1e:	d010      	beq.n	8002d42 <_free_r+0x2a>
 8002d20:	1f0c      	subs	r4, r1, #4
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	da00      	bge.n	8002d2a <_free_r+0x12>
 8002d28:	18e4      	adds	r4, r4, r3
 8002d2a:	0028      	movs	r0, r5
 8002d2c:	f000 f8e2 	bl	8002ef4 <__malloc_lock>
 8002d30:	4a1d      	ldr	r2, [pc, #116]	; (8002da8 <_free_r+0x90>)
 8002d32:	6813      	ldr	r3, [r2, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d105      	bne.n	8002d44 <_free_r+0x2c>
 8002d38:	6063      	str	r3, [r4, #4]
 8002d3a:	6014      	str	r4, [r2, #0]
 8002d3c:	0028      	movs	r0, r5
 8002d3e:	f000 f8e1 	bl	8002f04 <__malloc_unlock>
 8002d42:	bd70      	pop	{r4, r5, r6, pc}
 8002d44:	42a3      	cmp	r3, r4
 8002d46:	d908      	bls.n	8002d5a <_free_r+0x42>
 8002d48:	6820      	ldr	r0, [r4, #0]
 8002d4a:	1821      	adds	r1, r4, r0
 8002d4c:	428b      	cmp	r3, r1
 8002d4e:	d1f3      	bne.n	8002d38 <_free_r+0x20>
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	1809      	adds	r1, r1, r0
 8002d56:	6021      	str	r1, [r4, #0]
 8002d58:	e7ee      	b.n	8002d38 <_free_r+0x20>
 8002d5a:	001a      	movs	r2, r3
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <_free_r+0x4e>
 8002d62:	42a3      	cmp	r3, r4
 8002d64:	d9f9      	bls.n	8002d5a <_free_r+0x42>
 8002d66:	6811      	ldr	r1, [r2, #0]
 8002d68:	1850      	adds	r0, r2, r1
 8002d6a:	42a0      	cmp	r0, r4
 8002d6c:	d10b      	bne.n	8002d86 <_free_r+0x6e>
 8002d6e:	6820      	ldr	r0, [r4, #0]
 8002d70:	1809      	adds	r1, r1, r0
 8002d72:	1850      	adds	r0, r2, r1
 8002d74:	6011      	str	r1, [r2, #0]
 8002d76:	4283      	cmp	r3, r0
 8002d78:	d1e0      	bne.n	8002d3c <_free_r+0x24>
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	1841      	adds	r1, r0, r1
 8002d80:	6011      	str	r1, [r2, #0]
 8002d82:	6053      	str	r3, [r2, #4]
 8002d84:	e7da      	b.n	8002d3c <_free_r+0x24>
 8002d86:	42a0      	cmp	r0, r4
 8002d88:	d902      	bls.n	8002d90 <_free_r+0x78>
 8002d8a:	230c      	movs	r3, #12
 8002d8c:	602b      	str	r3, [r5, #0]
 8002d8e:	e7d5      	b.n	8002d3c <_free_r+0x24>
 8002d90:	6820      	ldr	r0, [r4, #0]
 8002d92:	1821      	adds	r1, r4, r0
 8002d94:	428b      	cmp	r3, r1
 8002d96:	d103      	bne.n	8002da0 <_free_r+0x88>
 8002d98:	6819      	ldr	r1, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	1809      	adds	r1, r1, r0
 8002d9e:	6021      	str	r1, [r4, #0]
 8002da0:	6063      	str	r3, [r4, #4]
 8002da2:	6054      	str	r4, [r2, #4]
 8002da4:	e7ca      	b.n	8002d3c <_free_r+0x24>
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	20000268 	.word	0x20000268

08002dac <sbrk_aligned>:
 8002dac:	b570      	push	{r4, r5, r6, lr}
 8002dae:	4e0f      	ldr	r6, [pc, #60]	; (8002dec <sbrk_aligned+0x40>)
 8002db0:	000d      	movs	r5, r1
 8002db2:	6831      	ldr	r1, [r6, #0]
 8002db4:	0004      	movs	r4, r0
 8002db6:	2900      	cmp	r1, #0
 8002db8:	d102      	bne.n	8002dc0 <sbrk_aligned+0x14>
 8002dba:	f000 fccb 	bl	8003754 <_sbrk_r>
 8002dbe:	6030      	str	r0, [r6, #0]
 8002dc0:	0029      	movs	r1, r5
 8002dc2:	0020      	movs	r0, r4
 8002dc4:	f000 fcc6 	bl	8003754 <_sbrk_r>
 8002dc8:	1c43      	adds	r3, r0, #1
 8002dca:	d00a      	beq.n	8002de2 <sbrk_aligned+0x36>
 8002dcc:	2303      	movs	r3, #3
 8002dce:	1cc5      	adds	r5, r0, #3
 8002dd0:	439d      	bics	r5, r3
 8002dd2:	42a8      	cmp	r0, r5
 8002dd4:	d007      	beq.n	8002de6 <sbrk_aligned+0x3a>
 8002dd6:	1a29      	subs	r1, r5, r0
 8002dd8:	0020      	movs	r0, r4
 8002dda:	f000 fcbb 	bl	8003754 <_sbrk_r>
 8002dde:	3001      	adds	r0, #1
 8002de0:	d101      	bne.n	8002de6 <sbrk_aligned+0x3a>
 8002de2:	2501      	movs	r5, #1
 8002de4:	426d      	negs	r5, r5
 8002de6:	0028      	movs	r0, r5
 8002de8:	bd70      	pop	{r4, r5, r6, pc}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	2000026c 	.word	0x2000026c

08002df0 <_malloc_r>:
 8002df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002df2:	2203      	movs	r2, #3
 8002df4:	1ccb      	adds	r3, r1, #3
 8002df6:	4393      	bics	r3, r2
 8002df8:	3308      	adds	r3, #8
 8002dfa:	0006      	movs	r6, r0
 8002dfc:	001f      	movs	r7, r3
 8002dfe:	2b0c      	cmp	r3, #12
 8002e00:	d238      	bcs.n	8002e74 <_malloc_r+0x84>
 8002e02:	270c      	movs	r7, #12
 8002e04:	42b9      	cmp	r1, r7
 8002e06:	d837      	bhi.n	8002e78 <_malloc_r+0x88>
 8002e08:	0030      	movs	r0, r6
 8002e0a:	f000 f873 	bl	8002ef4 <__malloc_lock>
 8002e0e:	4b38      	ldr	r3, [pc, #224]	; (8002ef0 <_malloc_r+0x100>)
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	001c      	movs	r4, r3
 8002e16:	2c00      	cmp	r4, #0
 8002e18:	d133      	bne.n	8002e82 <_malloc_r+0x92>
 8002e1a:	0039      	movs	r1, r7
 8002e1c:	0030      	movs	r0, r6
 8002e1e:	f7ff ffc5 	bl	8002dac <sbrk_aligned>
 8002e22:	0004      	movs	r4, r0
 8002e24:	1c43      	adds	r3, r0, #1
 8002e26:	d15e      	bne.n	8002ee6 <_malloc_r+0xf6>
 8002e28:	9b00      	ldr	r3, [sp, #0]
 8002e2a:	681c      	ldr	r4, [r3, #0]
 8002e2c:	0025      	movs	r5, r4
 8002e2e:	2d00      	cmp	r5, #0
 8002e30:	d14e      	bne.n	8002ed0 <_malloc_r+0xe0>
 8002e32:	2c00      	cmp	r4, #0
 8002e34:	d051      	beq.n	8002eda <_malloc_r+0xea>
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	0029      	movs	r1, r5
 8002e3a:	18e3      	adds	r3, r4, r3
 8002e3c:	0030      	movs	r0, r6
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	f000 fc88 	bl	8003754 <_sbrk_r>
 8002e44:	9b01      	ldr	r3, [sp, #4]
 8002e46:	4283      	cmp	r3, r0
 8002e48:	d147      	bne.n	8002eda <_malloc_r+0xea>
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	0030      	movs	r0, r6
 8002e4e:	1aff      	subs	r7, r7, r3
 8002e50:	0039      	movs	r1, r7
 8002e52:	f7ff ffab 	bl	8002dac <sbrk_aligned>
 8002e56:	3001      	adds	r0, #1
 8002e58:	d03f      	beq.n	8002eda <_malloc_r+0xea>
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	19db      	adds	r3, r3, r7
 8002e5e:	6023      	str	r3, [r4, #0]
 8002e60:	9b00      	ldr	r3, [sp, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d040      	beq.n	8002eea <_malloc_r+0xfa>
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	42a2      	cmp	r2, r4
 8002e6c:	d133      	bne.n	8002ed6 <_malloc_r+0xe6>
 8002e6e:	2200      	movs	r2, #0
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	e014      	b.n	8002e9e <_malloc_r+0xae>
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	dac5      	bge.n	8002e04 <_malloc_r+0x14>
 8002e78:	230c      	movs	r3, #12
 8002e7a:	2500      	movs	r5, #0
 8002e7c:	6033      	str	r3, [r6, #0]
 8002e7e:	0028      	movs	r0, r5
 8002e80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e82:	6821      	ldr	r1, [r4, #0]
 8002e84:	1bc9      	subs	r1, r1, r7
 8002e86:	d420      	bmi.n	8002eca <_malloc_r+0xda>
 8002e88:	290b      	cmp	r1, #11
 8002e8a:	d918      	bls.n	8002ebe <_malloc_r+0xce>
 8002e8c:	19e2      	adds	r2, r4, r7
 8002e8e:	6027      	str	r7, [r4, #0]
 8002e90:	42a3      	cmp	r3, r4
 8002e92:	d112      	bne.n	8002eba <_malloc_r+0xca>
 8002e94:	9b00      	ldr	r3, [sp, #0]
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	6863      	ldr	r3, [r4, #4]
 8002e9a:	6011      	str	r1, [r2, #0]
 8002e9c:	6053      	str	r3, [r2, #4]
 8002e9e:	0030      	movs	r0, r6
 8002ea0:	0025      	movs	r5, r4
 8002ea2:	f000 f82f 	bl	8002f04 <__malloc_unlock>
 8002ea6:	2207      	movs	r2, #7
 8002ea8:	350b      	adds	r5, #11
 8002eaa:	1d23      	adds	r3, r4, #4
 8002eac:	4395      	bics	r5, r2
 8002eae:	1aea      	subs	r2, r5, r3
 8002eb0:	429d      	cmp	r5, r3
 8002eb2:	d0e4      	beq.n	8002e7e <_malloc_r+0x8e>
 8002eb4:	1b5b      	subs	r3, r3, r5
 8002eb6:	50a3      	str	r3, [r4, r2]
 8002eb8:	e7e1      	b.n	8002e7e <_malloc_r+0x8e>
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	e7ec      	b.n	8002e98 <_malloc_r+0xa8>
 8002ebe:	6862      	ldr	r2, [r4, #4]
 8002ec0:	42a3      	cmp	r3, r4
 8002ec2:	d1d5      	bne.n	8002e70 <_malloc_r+0x80>
 8002ec4:	9b00      	ldr	r3, [sp, #0]
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	e7e9      	b.n	8002e9e <_malloc_r+0xae>
 8002eca:	0023      	movs	r3, r4
 8002ecc:	6864      	ldr	r4, [r4, #4]
 8002ece:	e7a2      	b.n	8002e16 <_malloc_r+0x26>
 8002ed0:	002c      	movs	r4, r5
 8002ed2:	686d      	ldr	r5, [r5, #4]
 8002ed4:	e7ab      	b.n	8002e2e <_malloc_r+0x3e>
 8002ed6:	0013      	movs	r3, r2
 8002ed8:	e7c4      	b.n	8002e64 <_malloc_r+0x74>
 8002eda:	230c      	movs	r3, #12
 8002edc:	0030      	movs	r0, r6
 8002ede:	6033      	str	r3, [r6, #0]
 8002ee0:	f000 f810 	bl	8002f04 <__malloc_unlock>
 8002ee4:	e7cb      	b.n	8002e7e <_malloc_r+0x8e>
 8002ee6:	6027      	str	r7, [r4, #0]
 8002ee8:	e7d9      	b.n	8002e9e <_malloc_r+0xae>
 8002eea:	605b      	str	r3, [r3, #4]
 8002eec:	deff      	udf	#255	; 0xff
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	20000268 	.word	0x20000268

08002ef4 <__malloc_lock>:
 8002ef4:	b510      	push	{r4, lr}
 8002ef6:	4802      	ldr	r0, [pc, #8]	; (8002f00 <__malloc_lock+0xc>)
 8002ef8:	f7ff ff0b 	bl	8002d12 <__retarget_lock_acquire_recursive>
 8002efc:	bd10      	pop	{r4, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	20000264 	.word	0x20000264

08002f04 <__malloc_unlock>:
 8002f04:	b510      	push	{r4, lr}
 8002f06:	4802      	ldr	r0, [pc, #8]	; (8002f10 <__malloc_unlock+0xc>)
 8002f08:	f7ff ff04 	bl	8002d14 <__retarget_lock_release_recursive>
 8002f0c:	bd10      	pop	{r4, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	20000264 	.word	0x20000264

08002f14 <__sfputc_r>:
 8002f14:	6893      	ldr	r3, [r2, #8]
 8002f16:	b510      	push	{r4, lr}
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	6093      	str	r3, [r2, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	da04      	bge.n	8002f2a <__sfputc_r+0x16>
 8002f20:	6994      	ldr	r4, [r2, #24]
 8002f22:	42a3      	cmp	r3, r4
 8002f24:	db07      	blt.n	8002f36 <__sfputc_r+0x22>
 8002f26:	290a      	cmp	r1, #10
 8002f28:	d005      	beq.n	8002f36 <__sfputc_r+0x22>
 8002f2a:	6813      	ldr	r3, [r2, #0]
 8002f2c:	1c58      	adds	r0, r3, #1
 8002f2e:	6010      	str	r0, [r2, #0]
 8002f30:	7019      	strb	r1, [r3, #0]
 8002f32:	0008      	movs	r0, r1
 8002f34:	bd10      	pop	{r4, pc}
 8002f36:	f000 fb66 	bl	8003606 <__swbuf_r>
 8002f3a:	0001      	movs	r1, r0
 8002f3c:	e7f9      	b.n	8002f32 <__sfputc_r+0x1e>

08002f3e <__sfputs_r>:
 8002f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f40:	0006      	movs	r6, r0
 8002f42:	000f      	movs	r7, r1
 8002f44:	0014      	movs	r4, r2
 8002f46:	18d5      	adds	r5, r2, r3
 8002f48:	42ac      	cmp	r4, r5
 8002f4a:	d101      	bne.n	8002f50 <__sfputs_r+0x12>
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	e007      	b.n	8002f60 <__sfputs_r+0x22>
 8002f50:	7821      	ldrb	r1, [r4, #0]
 8002f52:	003a      	movs	r2, r7
 8002f54:	0030      	movs	r0, r6
 8002f56:	f7ff ffdd 	bl	8002f14 <__sfputc_r>
 8002f5a:	3401      	adds	r4, #1
 8002f5c:	1c43      	adds	r3, r0, #1
 8002f5e:	d1f3      	bne.n	8002f48 <__sfputs_r+0xa>
 8002f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f64 <_vfiprintf_r>:
 8002f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f66:	b0a1      	sub	sp, #132	; 0x84
 8002f68:	000f      	movs	r7, r1
 8002f6a:	0015      	movs	r5, r2
 8002f6c:	001e      	movs	r6, r3
 8002f6e:	9003      	str	r0, [sp, #12]
 8002f70:	2800      	cmp	r0, #0
 8002f72:	d004      	beq.n	8002f7e <_vfiprintf_r+0x1a>
 8002f74:	6a03      	ldr	r3, [r0, #32]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <_vfiprintf_r+0x1a>
 8002f7a:	f7ff fdb9 	bl	8002af0 <__sinit>
 8002f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f80:	07db      	lsls	r3, r3, #31
 8002f82:	d405      	bmi.n	8002f90 <_vfiprintf_r+0x2c>
 8002f84:	89bb      	ldrh	r3, [r7, #12]
 8002f86:	059b      	lsls	r3, r3, #22
 8002f88:	d402      	bmi.n	8002f90 <_vfiprintf_r+0x2c>
 8002f8a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002f8c:	f7ff fec1 	bl	8002d12 <__retarget_lock_acquire_recursive>
 8002f90:	89bb      	ldrh	r3, [r7, #12]
 8002f92:	071b      	lsls	r3, r3, #28
 8002f94:	d502      	bpl.n	8002f9c <_vfiprintf_r+0x38>
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d113      	bne.n	8002fc4 <_vfiprintf_r+0x60>
 8002f9c:	0039      	movs	r1, r7
 8002f9e:	9803      	ldr	r0, [sp, #12]
 8002fa0:	f000 fb74 	bl	800368c <__swsetup_r>
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	d00d      	beq.n	8002fc4 <_vfiprintf_r+0x60>
 8002fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002faa:	07db      	lsls	r3, r3, #31
 8002fac:	d503      	bpl.n	8002fb6 <_vfiprintf_r+0x52>
 8002fae:	2001      	movs	r0, #1
 8002fb0:	4240      	negs	r0, r0
 8002fb2:	b021      	add	sp, #132	; 0x84
 8002fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fb6:	89bb      	ldrh	r3, [r7, #12]
 8002fb8:	059b      	lsls	r3, r3, #22
 8002fba:	d4f8      	bmi.n	8002fae <_vfiprintf_r+0x4a>
 8002fbc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002fbe:	f7ff fea9 	bl	8002d14 <__retarget_lock_release_recursive>
 8002fc2:	e7f4      	b.n	8002fae <_vfiprintf_r+0x4a>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	ac08      	add	r4, sp, #32
 8002fc8:	6163      	str	r3, [r4, #20]
 8002fca:	3320      	adds	r3, #32
 8002fcc:	7663      	strb	r3, [r4, #25]
 8002fce:	3310      	adds	r3, #16
 8002fd0:	76a3      	strb	r3, [r4, #26]
 8002fd2:	9607      	str	r6, [sp, #28]
 8002fd4:	002e      	movs	r6, r5
 8002fd6:	7833      	ldrb	r3, [r6, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <_vfiprintf_r+0x7c>
 8002fdc:	2b25      	cmp	r3, #37	; 0x25
 8002fde:	d148      	bne.n	8003072 <_vfiprintf_r+0x10e>
 8002fe0:	1b73      	subs	r3, r6, r5
 8002fe2:	9305      	str	r3, [sp, #20]
 8002fe4:	42ae      	cmp	r6, r5
 8002fe6:	d00b      	beq.n	8003000 <_vfiprintf_r+0x9c>
 8002fe8:	002a      	movs	r2, r5
 8002fea:	0039      	movs	r1, r7
 8002fec:	9803      	ldr	r0, [sp, #12]
 8002fee:	f7ff ffa6 	bl	8002f3e <__sfputs_r>
 8002ff2:	3001      	adds	r0, #1
 8002ff4:	d100      	bne.n	8002ff8 <_vfiprintf_r+0x94>
 8002ff6:	e0af      	b.n	8003158 <_vfiprintf_r+0x1f4>
 8002ff8:	6963      	ldr	r3, [r4, #20]
 8002ffa:	9a05      	ldr	r2, [sp, #20]
 8002ffc:	189b      	adds	r3, r3, r2
 8002ffe:	6163      	str	r3, [r4, #20]
 8003000:	7833      	ldrb	r3, [r6, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d100      	bne.n	8003008 <_vfiprintf_r+0xa4>
 8003006:	e0a7      	b.n	8003158 <_vfiprintf_r+0x1f4>
 8003008:	2201      	movs	r2, #1
 800300a:	2300      	movs	r3, #0
 800300c:	4252      	negs	r2, r2
 800300e:	6062      	str	r2, [r4, #4]
 8003010:	a904      	add	r1, sp, #16
 8003012:	3254      	adds	r2, #84	; 0x54
 8003014:	1852      	adds	r2, r2, r1
 8003016:	1c75      	adds	r5, r6, #1
 8003018:	6023      	str	r3, [r4, #0]
 800301a:	60e3      	str	r3, [r4, #12]
 800301c:	60a3      	str	r3, [r4, #8]
 800301e:	7013      	strb	r3, [r2, #0]
 8003020:	65a3      	str	r3, [r4, #88]	; 0x58
 8003022:	4b59      	ldr	r3, [pc, #356]	; (8003188 <_vfiprintf_r+0x224>)
 8003024:	2205      	movs	r2, #5
 8003026:	0018      	movs	r0, r3
 8003028:	7829      	ldrb	r1, [r5, #0]
 800302a:	9305      	str	r3, [sp, #20]
 800302c:	f000 fba4 	bl	8003778 <memchr>
 8003030:	1c6e      	adds	r6, r5, #1
 8003032:	2800      	cmp	r0, #0
 8003034:	d11f      	bne.n	8003076 <_vfiprintf_r+0x112>
 8003036:	6822      	ldr	r2, [r4, #0]
 8003038:	06d3      	lsls	r3, r2, #27
 800303a:	d504      	bpl.n	8003046 <_vfiprintf_r+0xe2>
 800303c:	2353      	movs	r3, #83	; 0x53
 800303e:	a904      	add	r1, sp, #16
 8003040:	185b      	adds	r3, r3, r1
 8003042:	2120      	movs	r1, #32
 8003044:	7019      	strb	r1, [r3, #0]
 8003046:	0713      	lsls	r3, r2, #28
 8003048:	d504      	bpl.n	8003054 <_vfiprintf_r+0xf0>
 800304a:	2353      	movs	r3, #83	; 0x53
 800304c:	a904      	add	r1, sp, #16
 800304e:	185b      	adds	r3, r3, r1
 8003050:	212b      	movs	r1, #43	; 0x2b
 8003052:	7019      	strb	r1, [r3, #0]
 8003054:	782b      	ldrb	r3, [r5, #0]
 8003056:	2b2a      	cmp	r3, #42	; 0x2a
 8003058:	d016      	beq.n	8003088 <_vfiprintf_r+0x124>
 800305a:	002e      	movs	r6, r5
 800305c:	2100      	movs	r1, #0
 800305e:	200a      	movs	r0, #10
 8003060:	68e3      	ldr	r3, [r4, #12]
 8003062:	7832      	ldrb	r2, [r6, #0]
 8003064:	1c75      	adds	r5, r6, #1
 8003066:	3a30      	subs	r2, #48	; 0x30
 8003068:	2a09      	cmp	r2, #9
 800306a:	d94e      	bls.n	800310a <_vfiprintf_r+0x1a6>
 800306c:	2900      	cmp	r1, #0
 800306e:	d111      	bne.n	8003094 <_vfiprintf_r+0x130>
 8003070:	e017      	b.n	80030a2 <_vfiprintf_r+0x13e>
 8003072:	3601      	adds	r6, #1
 8003074:	e7af      	b.n	8002fd6 <_vfiprintf_r+0x72>
 8003076:	9b05      	ldr	r3, [sp, #20]
 8003078:	6822      	ldr	r2, [r4, #0]
 800307a:	1ac0      	subs	r0, r0, r3
 800307c:	2301      	movs	r3, #1
 800307e:	4083      	lsls	r3, r0
 8003080:	4313      	orrs	r3, r2
 8003082:	0035      	movs	r5, r6
 8003084:	6023      	str	r3, [r4, #0]
 8003086:	e7cc      	b.n	8003022 <_vfiprintf_r+0xbe>
 8003088:	9b07      	ldr	r3, [sp, #28]
 800308a:	1d19      	adds	r1, r3, #4
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	9107      	str	r1, [sp, #28]
 8003090:	2b00      	cmp	r3, #0
 8003092:	db01      	blt.n	8003098 <_vfiprintf_r+0x134>
 8003094:	930b      	str	r3, [sp, #44]	; 0x2c
 8003096:	e004      	b.n	80030a2 <_vfiprintf_r+0x13e>
 8003098:	425b      	negs	r3, r3
 800309a:	60e3      	str	r3, [r4, #12]
 800309c:	2302      	movs	r3, #2
 800309e:	4313      	orrs	r3, r2
 80030a0:	6023      	str	r3, [r4, #0]
 80030a2:	7833      	ldrb	r3, [r6, #0]
 80030a4:	2b2e      	cmp	r3, #46	; 0x2e
 80030a6:	d10a      	bne.n	80030be <_vfiprintf_r+0x15a>
 80030a8:	7873      	ldrb	r3, [r6, #1]
 80030aa:	2b2a      	cmp	r3, #42	; 0x2a
 80030ac:	d135      	bne.n	800311a <_vfiprintf_r+0x1b6>
 80030ae:	9b07      	ldr	r3, [sp, #28]
 80030b0:	3602      	adds	r6, #2
 80030b2:	1d1a      	adds	r2, r3, #4
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	9207      	str	r2, [sp, #28]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	db2b      	blt.n	8003114 <_vfiprintf_r+0x1b0>
 80030bc:	9309      	str	r3, [sp, #36]	; 0x24
 80030be:	4d33      	ldr	r5, [pc, #204]	; (800318c <_vfiprintf_r+0x228>)
 80030c0:	2203      	movs	r2, #3
 80030c2:	0028      	movs	r0, r5
 80030c4:	7831      	ldrb	r1, [r6, #0]
 80030c6:	f000 fb57 	bl	8003778 <memchr>
 80030ca:	2800      	cmp	r0, #0
 80030cc:	d006      	beq.n	80030dc <_vfiprintf_r+0x178>
 80030ce:	2340      	movs	r3, #64	; 0x40
 80030d0:	1b40      	subs	r0, r0, r5
 80030d2:	4083      	lsls	r3, r0
 80030d4:	6822      	ldr	r2, [r4, #0]
 80030d6:	3601      	adds	r6, #1
 80030d8:	4313      	orrs	r3, r2
 80030da:	6023      	str	r3, [r4, #0]
 80030dc:	7831      	ldrb	r1, [r6, #0]
 80030de:	2206      	movs	r2, #6
 80030e0:	482b      	ldr	r0, [pc, #172]	; (8003190 <_vfiprintf_r+0x22c>)
 80030e2:	1c75      	adds	r5, r6, #1
 80030e4:	7621      	strb	r1, [r4, #24]
 80030e6:	f000 fb47 	bl	8003778 <memchr>
 80030ea:	2800      	cmp	r0, #0
 80030ec:	d043      	beq.n	8003176 <_vfiprintf_r+0x212>
 80030ee:	4b29      	ldr	r3, [pc, #164]	; (8003194 <_vfiprintf_r+0x230>)
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d125      	bne.n	8003140 <_vfiprintf_r+0x1dc>
 80030f4:	2207      	movs	r2, #7
 80030f6:	9b07      	ldr	r3, [sp, #28]
 80030f8:	3307      	adds	r3, #7
 80030fa:	4393      	bics	r3, r2
 80030fc:	3308      	adds	r3, #8
 80030fe:	9307      	str	r3, [sp, #28]
 8003100:	6963      	ldr	r3, [r4, #20]
 8003102:	9a04      	ldr	r2, [sp, #16]
 8003104:	189b      	adds	r3, r3, r2
 8003106:	6163      	str	r3, [r4, #20]
 8003108:	e764      	b.n	8002fd4 <_vfiprintf_r+0x70>
 800310a:	4343      	muls	r3, r0
 800310c:	002e      	movs	r6, r5
 800310e:	2101      	movs	r1, #1
 8003110:	189b      	adds	r3, r3, r2
 8003112:	e7a6      	b.n	8003062 <_vfiprintf_r+0xfe>
 8003114:	2301      	movs	r3, #1
 8003116:	425b      	negs	r3, r3
 8003118:	e7d0      	b.n	80030bc <_vfiprintf_r+0x158>
 800311a:	2300      	movs	r3, #0
 800311c:	200a      	movs	r0, #10
 800311e:	001a      	movs	r2, r3
 8003120:	3601      	adds	r6, #1
 8003122:	6063      	str	r3, [r4, #4]
 8003124:	7831      	ldrb	r1, [r6, #0]
 8003126:	1c75      	adds	r5, r6, #1
 8003128:	3930      	subs	r1, #48	; 0x30
 800312a:	2909      	cmp	r1, #9
 800312c:	d903      	bls.n	8003136 <_vfiprintf_r+0x1d2>
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0c5      	beq.n	80030be <_vfiprintf_r+0x15a>
 8003132:	9209      	str	r2, [sp, #36]	; 0x24
 8003134:	e7c3      	b.n	80030be <_vfiprintf_r+0x15a>
 8003136:	4342      	muls	r2, r0
 8003138:	002e      	movs	r6, r5
 800313a:	2301      	movs	r3, #1
 800313c:	1852      	adds	r2, r2, r1
 800313e:	e7f1      	b.n	8003124 <_vfiprintf_r+0x1c0>
 8003140:	aa07      	add	r2, sp, #28
 8003142:	9200      	str	r2, [sp, #0]
 8003144:	0021      	movs	r1, r4
 8003146:	003a      	movs	r2, r7
 8003148:	4b13      	ldr	r3, [pc, #76]	; (8003198 <_vfiprintf_r+0x234>)
 800314a:	9803      	ldr	r0, [sp, #12]
 800314c:	e000      	b.n	8003150 <_vfiprintf_r+0x1ec>
 800314e:	bf00      	nop
 8003150:	9004      	str	r0, [sp, #16]
 8003152:	9b04      	ldr	r3, [sp, #16]
 8003154:	3301      	adds	r3, #1
 8003156:	d1d3      	bne.n	8003100 <_vfiprintf_r+0x19c>
 8003158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800315a:	07db      	lsls	r3, r3, #31
 800315c:	d405      	bmi.n	800316a <_vfiprintf_r+0x206>
 800315e:	89bb      	ldrh	r3, [r7, #12]
 8003160:	059b      	lsls	r3, r3, #22
 8003162:	d402      	bmi.n	800316a <_vfiprintf_r+0x206>
 8003164:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003166:	f7ff fdd5 	bl	8002d14 <__retarget_lock_release_recursive>
 800316a:	89bb      	ldrh	r3, [r7, #12]
 800316c:	065b      	lsls	r3, r3, #25
 800316e:	d500      	bpl.n	8003172 <_vfiprintf_r+0x20e>
 8003170:	e71d      	b.n	8002fae <_vfiprintf_r+0x4a>
 8003172:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003174:	e71d      	b.n	8002fb2 <_vfiprintf_r+0x4e>
 8003176:	aa07      	add	r2, sp, #28
 8003178:	9200      	str	r2, [sp, #0]
 800317a:	0021      	movs	r1, r4
 800317c:	003a      	movs	r2, r7
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <_vfiprintf_r+0x234>)
 8003180:	9803      	ldr	r0, [sp, #12]
 8003182:	f000 f87b 	bl	800327c <_printf_i>
 8003186:	e7e3      	b.n	8003150 <_vfiprintf_r+0x1ec>
 8003188:	0800393c 	.word	0x0800393c
 800318c:	08003942 	.word	0x08003942
 8003190:	08003946 	.word	0x08003946
 8003194:	00000000 	.word	0x00000000
 8003198:	08002f3f 	.word	0x08002f3f

0800319c <_printf_common>:
 800319c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800319e:	0016      	movs	r6, r2
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	688a      	ldr	r2, [r1, #8]
 80031a4:	690b      	ldr	r3, [r1, #16]
 80031a6:	000c      	movs	r4, r1
 80031a8:	9000      	str	r0, [sp, #0]
 80031aa:	4293      	cmp	r3, r2
 80031ac:	da00      	bge.n	80031b0 <_printf_common+0x14>
 80031ae:	0013      	movs	r3, r2
 80031b0:	0022      	movs	r2, r4
 80031b2:	6033      	str	r3, [r6, #0]
 80031b4:	3243      	adds	r2, #67	; 0x43
 80031b6:	7812      	ldrb	r2, [r2, #0]
 80031b8:	2a00      	cmp	r2, #0
 80031ba:	d001      	beq.n	80031c0 <_printf_common+0x24>
 80031bc:	3301      	adds	r3, #1
 80031be:	6033      	str	r3, [r6, #0]
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	069b      	lsls	r3, r3, #26
 80031c4:	d502      	bpl.n	80031cc <_printf_common+0x30>
 80031c6:	6833      	ldr	r3, [r6, #0]
 80031c8:	3302      	adds	r3, #2
 80031ca:	6033      	str	r3, [r6, #0]
 80031cc:	6822      	ldr	r2, [r4, #0]
 80031ce:	2306      	movs	r3, #6
 80031d0:	0015      	movs	r5, r2
 80031d2:	401d      	ands	r5, r3
 80031d4:	421a      	tst	r2, r3
 80031d6:	d027      	beq.n	8003228 <_printf_common+0x8c>
 80031d8:	0023      	movs	r3, r4
 80031da:	3343      	adds	r3, #67	; 0x43
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	1e5a      	subs	r2, r3, #1
 80031e0:	4193      	sbcs	r3, r2
 80031e2:	6822      	ldr	r2, [r4, #0]
 80031e4:	0692      	lsls	r2, r2, #26
 80031e6:	d430      	bmi.n	800324a <_printf_common+0xae>
 80031e8:	0022      	movs	r2, r4
 80031ea:	9901      	ldr	r1, [sp, #4]
 80031ec:	9800      	ldr	r0, [sp, #0]
 80031ee:	9d08      	ldr	r5, [sp, #32]
 80031f0:	3243      	adds	r2, #67	; 0x43
 80031f2:	47a8      	blx	r5
 80031f4:	3001      	adds	r0, #1
 80031f6:	d025      	beq.n	8003244 <_printf_common+0xa8>
 80031f8:	2206      	movs	r2, #6
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	2500      	movs	r5, #0
 80031fe:	4013      	ands	r3, r2
 8003200:	2b04      	cmp	r3, #4
 8003202:	d105      	bne.n	8003210 <_printf_common+0x74>
 8003204:	6833      	ldr	r3, [r6, #0]
 8003206:	68e5      	ldr	r5, [r4, #12]
 8003208:	1aed      	subs	r5, r5, r3
 800320a:	43eb      	mvns	r3, r5
 800320c:	17db      	asrs	r3, r3, #31
 800320e:	401d      	ands	r5, r3
 8003210:	68a3      	ldr	r3, [r4, #8]
 8003212:	6922      	ldr	r2, [r4, #16]
 8003214:	4293      	cmp	r3, r2
 8003216:	dd01      	ble.n	800321c <_printf_common+0x80>
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	18ed      	adds	r5, r5, r3
 800321c:	2600      	movs	r6, #0
 800321e:	42b5      	cmp	r5, r6
 8003220:	d120      	bne.n	8003264 <_printf_common+0xc8>
 8003222:	2000      	movs	r0, #0
 8003224:	e010      	b.n	8003248 <_printf_common+0xac>
 8003226:	3501      	adds	r5, #1
 8003228:	68e3      	ldr	r3, [r4, #12]
 800322a:	6832      	ldr	r2, [r6, #0]
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	42ab      	cmp	r3, r5
 8003230:	ddd2      	ble.n	80031d8 <_printf_common+0x3c>
 8003232:	0022      	movs	r2, r4
 8003234:	2301      	movs	r3, #1
 8003236:	9901      	ldr	r1, [sp, #4]
 8003238:	9800      	ldr	r0, [sp, #0]
 800323a:	9f08      	ldr	r7, [sp, #32]
 800323c:	3219      	adds	r2, #25
 800323e:	47b8      	blx	r7
 8003240:	3001      	adds	r0, #1
 8003242:	d1f0      	bne.n	8003226 <_printf_common+0x8a>
 8003244:	2001      	movs	r0, #1
 8003246:	4240      	negs	r0, r0
 8003248:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800324a:	2030      	movs	r0, #48	; 0x30
 800324c:	18e1      	adds	r1, r4, r3
 800324e:	3143      	adds	r1, #67	; 0x43
 8003250:	7008      	strb	r0, [r1, #0]
 8003252:	0021      	movs	r1, r4
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	3145      	adds	r1, #69	; 0x45
 8003258:	7809      	ldrb	r1, [r1, #0]
 800325a:	18a2      	adds	r2, r4, r2
 800325c:	3243      	adds	r2, #67	; 0x43
 800325e:	3302      	adds	r3, #2
 8003260:	7011      	strb	r1, [r2, #0]
 8003262:	e7c1      	b.n	80031e8 <_printf_common+0x4c>
 8003264:	0022      	movs	r2, r4
 8003266:	2301      	movs	r3, #1
 8003268:	9901      	ldr	r1, [sp, #4]
 800326a:	9800      	ldr	r0, [sp, #0]
 800326c:	9f08      	ldr	r7, [sp, #32]
 800326e:	321a      	adds	r2, #26
 8003270:	47b8      	blx	r7
 8003272:	3001      	adds	r0, #1
 8003274:	d0e6      	beq.n	8003244 <_printf_common+0xa8>
 8003276:	3601      	adds	r6, #1
 8003278:	e7d1      	b.n	800321e <_printf_common+0x82>
	...

0800327c <_printf_i>:
 800327c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327e:	b08b      	sub	sp, #44	; 0x2c
 8003280:	9206      	str	r2, [sp, #24]
 8003282:	000a      	movs	r2, r1
 8003284:	3243      	adds	r2, #67	; 0x43
 8003286:	9307      	str	r3, [sp, #28]
 8003288:	9005      	str	r0, [sp, #20]
 800328a:	9204      	str	r2, [sp, #16]
 800328c:	7e0a      	ldrb	r2, [r1, #24]
 800328e:	000c      	movs	r4, r1
 8003290:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003292:	2a78      	cmp	r2, #120	; 0x78
 8003294:	d809      	bhi.n	80032aa <_printf_i+0x2e>
 8003296:	2a62      	cmp	r2, #98	; 0x62
 8003298:	d80b      	bhi.n	80032b2 <_printf_i+0x36>
 800329a:	2a00      	cmp	r2, #0
 800329c:	d100      	bne.n	80032a0 <_printf_i+0x24>
 800329e:	e0be      	b.n	800341e <_printf_i+0x1a2>
 80032a0:	497c      	ldr	r1, [pc, #496]	; (8003494 <_printf_i+0x218>)
 80032a2:	9103      	str	r1, [sp, #12]
 80032a4:	2a58      	cmp	r2, #88	; 0x58
 80032a6:	d100      	bne.n	80032aa <_printf_i+0x2e>
 80032a8:	e093      	b.n	80033d2 <_printf_i+0x156>
 80032aa:	0026      	movs	r6, r4
 80032ac:	3642      	adds	r6, #66	; 0x42
 80032ae:	7032      	strb	r2, [r6, #0]
 80032b0:	e022      	b.n	80032f8 <_printf_i+0x7c>
 80032b2:	0010      	movs	r0, r2
 80032b4:	3863      	subs	r0, #99	; 0x63
 80032b6:	2815      	cmp	r0, #21
 80032b8:	d8f7      	bhi.n	80032aa <_printf_i+0x2e>
 80032ba:	f7fc ff25 	bl	8000108 <__gnu_thumb1_case_shi>
 80032be:	0016      	.short	0x0016
 80032c0:	fff6001f 	.word	0xfff6001f
 80032c4:	fff6fff6 	.word	0xfff6fff6
 80032c8:	001ffff6 	.word	0x001ffff6
 80032cc:	fff6fff6 	.word	0xfff6fff6
 80032d0:	fff6fff6 	.word	0xfff6fff6
 80032d4:	003600a3 	.word	0x003600a3
 80032d8:	fff60083 	.word	0xfff60083
 80032dc:	00b4fff6 	.word	0x00b4fff6
 80032e0:	0036fff6 	.word	0x0036fff6
 80032e4:	fff6fff6 	.word	0xfff6fff6
 80032e8:	0087      	.short	0x0087
 80032ea:	0026      	movs	r6, r4
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	3642      	adds	r6, #66	; 0x42
 80032f0:	1d11      	adds	r1, r2, #4
 80032f2:	6019      	str	r1, [r3, #0]
 80032f4:	6813      	ldr	r3, [r2, #0]
 80032f6:	7033      	strb	r3, [r6, #0]
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0a2      	b.n	8003442 <_printf_i+0x1c6>
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	6809      	ldr	r1, [r1, #0]
 8003300:	1d02      	adds	r2, r0, #4
 8003302:	060d      	lsls	r5, r1, #24
 8003304:	d50b      	bpl.n	800331e <_printf_i+0xa2>
 8003306:	6805      	ldr	r5, [r0, #0]
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	2d00      	cmp	r5, #0
 800330c:	da03      	bge.n	8003316 <_printf_i+0x9a>
 800330e:	232d      	movs	r3, #45	; 0x2d
 8003310:	9a04      	ldr	r2, [sp, #16]
 8003312:	426d      	negs	r5, r5
 8003314:	7013      	strb	r3, [r2, #0]
 8003316:	4b5f      	ldr	r3, [pc, #380]	; (8003494 <_printf_i+0x218>)
 8003318:	270a      	movs	r7, #10
 800331a:	9303      	str	r3, [sp, #12]
 800331c:	e01b      	b.n	8003356 <_printf_i+0xda>
 800331e:	6805      	ldr	r5, [r0, #0]
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	0649      	lsls	r1, r1, #25
 8003324:	d5f1      	bpl.n	800330a <_printf_i+0x8e>
 8003326:	b22d      	sxth	r5, r5
 8003328:	e7ef      	b.n	800330a <_printf_i+0x8e>
 800332a:	680d      	ldr	r5, [r1, #0]
 800332c:	6819      	ldr	r1, [r3, #0]
 800332e:	1d08      	adds	r0, r1, #4
 8003330:	6018      	str	r0, [r3, #0]
 8003332:	062e      	lsls	r6, r5, #24
 8003334:	d501      	bpl.n	800333a <_printf_i+0xbe>
 8003336:	680d      	ldr	r5, [r1, #0]
 8003338:	e003      	b.n	8003342 <_printf_i+0xc6>
 800333a:	066d      	lsls	r5, r5, #25
 800333c:	d5fb      	bpl.n	8003336 <_printf_i+0xba>
 800333e:	680d      	ldr	r5, [r1, #0]
 8003340:	b2ad      	uxth	r5, r5
 8003342:	4b54      	ldr	r3, [pc, #336]	; (8003494 <_printf_i+0x218>)
 8003344:	2708      	movs	r7, #8
 8003346:	9303      	str	r3, [sp, #12]
 8003348:	2a6f      	cmp	r2, #111	; 0x6f
 800334a:	d000      	beq.n	800334e <_printf_i+0xd2>
 800334c:	3702      	adds	r7, #2
 800334e:	0023      	movs	r3, r4
 8003350:	2200      	movs	r2, #0
 8003352:	3343      	adds	r3, #67	; 0x43
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	6863      	ldr	r3, [r4, #4]
 8003358:	60a3      	str	r3, [r4, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	db03      	blt.n	8003366 <_printf_i+0xea>
 800335e:	2104      	movs	r1, #4
 8003360:	6822      	ldr	r2, [r4, #0]
 8003362:	438a      	bics	r2, r1
 8003364:	6022      	str	r2, [r4, #0]
 8003366:	2d00      	cmp	r5, #0
 8003368:	d102      	bne.n	8003370 <_printf_i+0xf4>
 800336a:	9e04      	ldr	r6, [sp, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00c      	beq.n	800338a <_printf_i+0x10e>
 8003370:	9e04      	ldr	r6, [sp, #16]
 8003372:	0028      	movs	r0, r5
 8003374:	0039      	movs	r1, r7
 8003376:	f7fc ff57 	bl	8000228 <__aeabi_uidivmod>
 800337a:	9b03      	ldr	r3, [sp, #12]
 800337c:	3e01      	subs	r6, #1
 800337e:	5c5b      	ldrb	r3, [r3, r1]
 8003380:	7033      	strb	r3, [r6, #0]
 8003382:	002b      	movs	r3, r5
 8003384:	0005      	movs	r5, r0
 8003386:	429f      	cmp	r7, r3
 8003388:	d9f3      	bls.n	8003372 <_printf_i+0xf6>
 800338a:	2f08      	cmp	r7, #8
 800338c:	d109      	bne.n	80033a2 <_printf_i+0x126>
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	07db      	lsls	r3, r3, #31
 8003392:	d506      	bpl.n	80033a2 <_printf_i+0x126>
 8003394:	6862      	ldr	r2, [r4, #4]
 8003396:	6923      	ldr	r3, [r4, #16]
 8003398:	429a      	cmp	r2, r3
 800339a:	dc02      	bgt.n	80033a2 <_printf_i+0x126>
 800339c:	2330      	movs	r3, #48	; 0x30
 800339e:	3e01      	subs	r6, #1
 80033a0:	7033      	strb	r3, [r6, #0]
 80033a2:	9b04      	ldr	r3, [sp, #16]
 80033a4:	1b9b      	subs	r3, r3, r6
 80033a6:	6123      	str	r3, [r4, #16]
 80033a8:	9b07      	ldr	r3, [sp, #28]
 80033aa:	0021      	movs	r1, r4
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	9805      	ldr	r0, [sp, #20]
 80033b0:	9b06      	ldr	r3, [sp, #24]
 80033b2:	aa09      	add	r2, sp, #36	; 0x24
 80033b4:	f7ff fef2 	bl	800319c <_printf_common>
 80033b8:	3001      	adds	r0, #1
 80033ba:	d147      	bne.n	800344c <_printf_i+0x1d0>
 80033bc:	2001      	movs	r0, #1
 80033be:	4240      	negs	r0, r0
 80033c0:	b00b      	add	sp, #44	; 0x2c
 80033c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033c4:	2220      	movs	r2, #32
 80033c6:	6809      	ldr	r1, [r1, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	6022      	str	r2, [r4, #0]
 80033cc:	2278      	movs	r2, #120	; 0x78
 80033ce:	4932      	ldr	r1, [pc, #200]	; (8003498 <_printf_i+0x21c>)
 80033d0:	9103      	str	r1, [sp, #12]
 80033d2:	0021      	movs	r1, r4
 80033d4:	3145      	adds	r1, #69	; 0x45
 80033d6:	700a      	strb	r2, [r1, #0]
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	6822      	ldr	r2, [r4, #0]
 80033dc:	c920      	ldmia	r1!, {r5}
 80033de:	0610      	lsls	r0, r2, #24
 80033e0:	d402      	bmi.n	80033e8 <_printf_i+0x16c>
 80033e2:	0650      	lsls	r0, r2, #25
 80033e4:	d500      	bpl.n	80033e8 <_printf_i+0x16c>
 80033e6:	b2ad      	uxth	r5, r5
 80033e8:	6019      	str	r1, [r3, #0]
 80033ea:	07d3      	lsls	r3, r2, #31
 80033ec:	d502      	bpl.n	80033f4 <_printf_i+0x178>
 80033ee:	2320      	movs	r3, #32
 80033f0:	4313      	orrs	r3, r2
 80033f2:	6023      	str	r3, [r4, #0]
 80033f4:	2710      	movs	r7, #16
 80033f6:	2d00      	cmp	r5, #0
 80033f8:	d1a9      	bne.n	800334e <_printf_i+0xd2>
 80033fa:	2220      	movs	r2, #32
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	4393      	bics	r3, r2
 8003400:	6023      	str	r3, [r4, #0]
 8003402:	e7a4      	b.n	800334e <_printf_i+0xd2>
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	680d      	ldr	r5, [r1, #0]
 8003408:	1d10      	adds	r0, r2, #4
 800340a:	6949      	ldr	r1, [r1, #20]
 800340c:	6018      	str	r0, [r3, #0]
 800340e:	6813      	ldr	r3, [r2, #0]
 8003410:	062e      	lsls	r6, r5, #24
 8003412:	d501      	bpl.n	8003418 <_printf_i+0x19c>
 8003414:	6019      	str	r1, [r3, #0]
 8003416:	e002      	b.n	800341e <_printf_i+0x1a2>
 8003418:	066d      	lsls	r5, r5, #25
 800341a:	d5fb      	bpl.n	8003414 <_printf_i+0x198>
 800341c:	8019      	strh	r1, [r3, #0]
 800341e:	2300      	movs	r3, #0
 8003420:	9e04      	ldr	r6, [sp, #16]
 8003422:	6123      	str	r3, [r4, #16]
 8003424:	e7c0      	b.n	80033a8 <_printf_i+0x12c>
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	1d11      	adds	r1, r2, #4
 800342a:	6019      	str	r1, [r3, #0]
 800342c:	6816      	ldr	r6, [r2, #0]
 800342e:	2100      	movs	r1, #0
 8003430:	0030      	movs	r0, r6
 8003432:	6862      	ldr	r2, [r4, #4]
 8003434:	f000 f9a0 	bl	8003778 <memchr>
 8003438:	2800      	cmp	r0, #0
 800343a:	d001      	beq.n	8003440 <_printf_i+0x1c4>
 800343c:	1b80      	subs	r0, r0, r6
 800343e:	6060      	str	r0, [r4, #4]
 8003440:	6863      	ldr	r3, [r4, #4]
 8003442:	6123      	str	r3, [r4, #16]
 8003444:	2300      	movs	r3, #0
 8003446:	9a04      	ldr	r2, [sp, #16]
 8003448:	7013      	strb	r3, [r2, #0]
 800344a:	e7ad      	b.n	80033a8 <_printf_i+0x12c>
 800344c:	0032      	movs	r2, r6
 800344e:	6923      	ldr	r3, [r4, #16]
 8003450:	9906      	ldr	r1, [sp, #24]
 8003452:	9805      	ldr	r0, [sp, #20]
 8003454:	9d07      	ldr	r5, [sp, #28]
 8003456:	47a8      	blx	r5
 8003458:	3001      	adds	r0, #1
 800345a:	d0af      	beq.n	80033bc <_printf_i+0x140>
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	079b      	lsls	r3, r3, #30
 8003460:	d415      	bmi.n	800348e <_printf_i+0x212>
 8003462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003464:	68e0      	ldr	r0, [r4, #12]
 8003466:	4298      	cmp	r0, r3
 8003468:	daaa      	bge.n	80033c0 <_printf_i+0x144>
 800346a:	0018      	movs	r0, r3
 800346c:	e7a8      	b.n	80033c0 <_printf_i+0x144>
 800346e:	0022      	movs	r2, r4
 8003470:	2301      	movs	r3, #1
 8003472:	9906      	ldr	r1, [sp, #24]
 8003474:	9805      	ldr	r0, [sp, #20]
 8003476:	9e07      	ldr	r6, [sp, #28]
 8003478:	3219      	adds	r2, #25
 800347a:	47b0      	blx	r6
 800347c:	3001      	adds	r0, #1
 800347e:	d09d      	beq.n	80033bc <_printf_i+0x140>
 8003480:	3501      	adds	r5, #1
 8003482:	68e3      	ldr	r3, [r4, #12]
 8003484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	42ab      	cmp	r3, r5
 800348a:	dcf0      	bgt.n	800346e <_printf_i+0x1f2>
 800348c:	e7e9      	b.n	8003462 <_printf_i+0x1e6>
 800348e:	2500      	movs	r5, #0
 8003490:	e7f7      	b.n	8003482 <_printf_i+0x206>
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	0800394d 	.word	0x0800394d
 8003498:	0800395e 	.word	0x0800395e

0800349c <__sflush_r>:
 800349c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800349e:	898b      	ldrh	r3, [r1, #12]
 80034a0:	0005      	movs	r5, r0
 80034a2:	000c      	movs	r4, r1
 80034a4:	071a      	lsls	r2, r3, #28
 80034a6:	d45c      	bmi.n	8003562 <__sflush_r+0xc6>
 80034a8:	684a      	ldr	r2, [r1, #4]
 80034aa:	2a00      	cmp	r2, #0
 80034ac:	dc04      	bgt.n	80034b8 <__sflush_r+0x1c>
 80034ae:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80034b0:	2a00      	cmp	r2, #0
 80034b2:	dc01      	bgt.n	80034b8 <__sflush_r+0x1c>
 80034b4:	2000      	movs	r0, #0
 80034b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034b8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80034ba:	2f00      	cmp	r7, #0
 80034bc:	d0fa      	beq.n	80034b4 <__sflush_r+0x18>
 80034be:	2200      	movs	r2, #0
 80034c0:	2080      	movs	r0, #128	; 0x80
 80034c2:	682e      	ldr	r6, [r5, #0]
 80034c4:	602a      	str	r2, [r5, #0]
 80034c6:	001a      	movs	r2, r3
 80034c8:	0140      	lsls	r0, r0, #5
 80034ca:	6a21      	ldr	r1, [r4, #32]
 80034cc:	4002      	ands	r2, r0
 80034ce:	4203      	tst	r3, r0
 80034d0:	d034      	beq.n	800353c <__sflush_r+0xa0>
 80034d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034d4:	89a3      	ldrh	r3, [r4, #12]
 80034d6:	075b      	lsls	r3, r3, #29
 80034d8:	d506      	bpl.n	80034e8 <__sflush_r+0x4c>
 80034da:	6863      	ldr	r3, [r4, #4]
 80034dc:	1ac0      	subs	r0, r0, r3
 80034de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <__sflush_r+0x4c>
 80034e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034e6:	1ac0      	subs	r0, r0, r3
 80034e8:	0002      	movs	r2, r0
 80034ea:	2300      	movs	r3, #0
 80034ec:	0028      	movs	r0, r5
 80034ee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80034f0:	6a21      	ldr	r1, [r4, #32]
 80034f2:	47b8      	blx	r7
 80034f4:	89a2      	ldrh	r2, [r4, #12]
 80034f6:	1c43      	adds	r3, r0, #1
 80034f8:	d106      	bne.n	8003508 <__sflush_r+0x6c>
 80034fa:	6829      	ldr	r1, [r5, #0]
 80034fc:	291d      	cmp	r1, #29
 80034fe:	d82c      	bhi.n	800355a <__sflush_r+0xbe>
 8003500:	4b2a      	ldr	r3, [pc, #168]	; (80035ac <__sflush_r+0x110>)
 8003502:	410b      	asrs	r3, r1
 8003504:	07db      	lsls	r3, r3, #31
 8003506:	d428      	bmi.n	800355a <__sflush_r+0xbe>
 8003508:	2300      	movs	r3, #0
 800350a:	6063      	str	r3, [r4, #4]
 800350c:	6923      	ldr	r3, [r4, #16]
 800350e:	6023      	str	r3, [r4, #0]
 8003510:	04d2      	lsls	r2, r2, #19
 8003512:	d505      	bpl.n	8003520 <__sflush_r+0x84>
 8003514:	1c43      	adds	r3, r0, #1
 8003516:	d102      	bne.n	800351e <__sflush_r+0x82>
 8003518:	682b      	ldr	r3, [r5, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d100      	bne.n	8003520 <__sflush_r+0x84>
 800351e:	6560      	str	r0, [r4, #84]	; 0x54
 8003520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003522:	602e      	str	r6, [r5, #0]
 8003524:	2900      	cmp	r1, #0
 8003526:	d0c5      	beq.n	80034b4 <__sflush_r+0x18>
 8003528:	0023      	movs	r3, r4
 800352a:	3344      	adds	r3, #68	; 0x44
 800352c:	4299      	cmp	r1, r3
 800352e:	d002      	beq.n	8003536 <__sflush_r+0x9a>
 8003530:	0028      	movs	r0, r5
 8003532:	f7ff fbf1 	bl	8002d18 <_free_r>
 8003536:	2000      	movs	r0, #0
 8003538:	6360      	str	r0, [r4, #52]	; 0x34
 800353a:	e7bc      	b.n	80034b6 <__sflush_r+0x1a>
 800353c:	2301      	movs	r3, #1
 800353e:	0028      	movs	r0, r5
 8003540:	47b8      	blx	r7
 8003542:	1c43      	adds	r3, r0, #1
 8003544:	d1c6      	bne.n	80034d4 <__sflush_r+0x38>
 8003546:	682b      	ldr	r3, [r5, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0c3      	beq.n	80034d4 <__sflush_r+0x38>
 800354c:	2b1d      	cmp	r3, #29
 800354e:	d001      	beq.n	8003554 <__sflush_r+0xb8>
 8003550:	2b16      	cmp	r3, #22
 8003552:	d101      	bne.n	8003558 <__sflush_r+0xbc>
 8003554:	602e      	str	r6, [r5, #0]
 8003556:	e7ad      	b.n	80034b4 <__sflush_r+0x18>
 8003558:	89a2      	ldrh	r2, [r4, #12]
 800355a:	2340      	movs	r3, #64	; 0x40
 800355c:	4313      	orrs	r3, r2
 800355e:	81a3      	strh	r3, [r4, #12]
 8003560:	e7a9      	b.n	80034b6 <__sflush_r+0x1a>
 8003562:	690e      	ldr	r6, [r1, #16]
 8003564:	2e00      	cmp	r6, #0
 8003566:	d0a5      	beq.n	80034b4 <__sflush_r+0x18>
 8003568:	680f      	ldr	r7, [r1, #0]
 800356a:	600e      	str	r6, [r1, #0]
 800356c:	1bba      	subs	r2, r7, r6
 800356e:	9201      	str	r2, [sp, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	079b      	lsls	r3, r3, #30
 8003574:	d100      	bne.n	8003578 <__sflush_r+0xdc>
 8003576:	694a      	ldr	r2, [r1, #20]
 8003578:	60a2      	str	r2, [r4, #8]
 800357a:	9b01      	ldr	r3, [sp, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	dd99      	ble.n	80034b4 <__sflush_r+0x18>
 8003580:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003582:	0032      	movs	r2, r6
 8003584:	001f      	movs	r7, r3
 8003586:	0028      	movs	r0, r5
 8003588:	9b01      	ldr	r3, [sp, #4]
 800358a:	6a21      	ldr	r1, [r4, #32]
 800358c:	47b8      	blx	r7
 800358e:	2800      	cmp	r0, #0
 8003590:	dc06      	bgt.n	80035a0 <__sflush_r+0x104>
 8003592:	2340      	movs	r3, #64	; 0x40
 8003594:	2001      	movs	r0, #1
 8003596:	89a2      	ldrh	r2, [r4, #12]
 8003598:	4240      	negs	r0, r0
 800359a:	4313      	orrs	r3, r2
 800359c:	81a3      	strh	r3, [r4, #12]
 800359e:	e78a      	b.n	80034b6 <__sflush_r+0x1a>
 80035a0:	9b01      	ldr	r3, [sp, #4]
 80035a2:	1836      	adds	r6, r6, r0
 80035a4:	1a1b      	subs	r3, r3, r0
 80035a6:	9301      	str	r3, [sp, #4]
 80035a8:	e7e7      	b.n	800357a <__sflush_r+0xde>
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	dfbffffe 	.word	0xdfbffffe

080035b0 <_fflush_r>:
 80035b0:	690b      	ldr	r3, [r1, #16]
 80035b2:	b570      	push	{r4, r5, r6, lr}
 80035b4:	0005      	movs	r5, r0
 80035b6:	000c      	movs	r4, r1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d102      	bne.n	80035c2 <_fflush_r+0x12>
 80035bc:	2500      	movs	r5, #0
 80035be:	0028      	movs	r0, r5
 80035c0:	bd70      	pop	{r4, r5, r6, pc}
 80035c2:	2800      	cmp	r0, #0
 80035c4:	d004      	beq.n	80035d0 <_fflush_r+0x20>
 80035c6:	6a03      	ldr	r3, [r0, #32]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <_fflush_r+0x20>
 80035cc:	f7ff fa90 	bl	8002af0 <__sinit>
 80035d0:	220c      	movs	r2, #12
 80035d2:	5ea3      	ldrsh	r3, [r4, r2]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f1      	beq.n	80035bc <_fflush_r+0xc>
 80035d8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035da:	07d2      	lsls	r2, r2, #31
 80035dc:	d404      	bmi.n	80035e8 <_fflush_r+0x38>
 80035de:	059b      	lsls	r3, r3, #22
 80035e0:	d402      	bmi.n	80035e8 <_fflush_r+0x38>
 80035e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035e4:	f7ff fb95 	bl	8002d12 <__retarget_lock_acquire_recursive>
 80035e8:	0028      	movs	r0, r5
 80035ea:	0021      	movs	r1, r4
 80035ec:	f7ff ff56 	bl	800349c <__sflush_r>
 80035f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035f2:	0005      	movs	r5, r0
 80035f4:	07db      	lsls	r3, r3, #31
 80035f6:	d4e2      	bmi.n	80035be <_fflush_r+0xe>
 80035f8:	89a3      	ldrh	r3, [r4, #12]
 80035fa:	059b      	lsls	r3, r3, #22
 80035fc:	d4df      	bmi.n	80035be <_fflush_r+0xe>
 80035fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003600:	f7ff fb88 	bl	8002d14 <__retarget_lock_release_recursive>
 8003604:	e7db      	b.n	80035be <_fflush_r+0xe>

08003606 <__swbuf_r>:
 8003606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003608:	0006      	movs	r6, r0
 800360a:	000d      	movs	r5, r1
 800360c:	0014      	movs	r4, r2
 800360e:	2800      	cmp	r0, #0
 8003610:	d004      	beq.n	800361c <__swbuf_r+0x16>
 8003612:	6a03      	ldr	r3, [r0, #32]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <__swbuf_r+0x16>
 8003618:	f7ff fa6a 	bl	8002af0 <__sinit>
 800361c:	69a3      	ldr	r3, [r4, #24]
 800361e:	60a3      	str	r3, [r4, #8]
 8003620:	89a3      	ldrh	r3, [r4, #12]
 8003622:	071b      	lsls	r3, r3, #28
 8003624:	d528      	bpl.n	8003678 <__swbuf_r+0x72>
 8003626:	6923      	ldr	r3, [r4, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d025      	beq.n	8003678 <__swbuf_r+0x72>
 800362c:	6923      	ldr	r3, [r4, #16]
 800362e:	6820      	ldr	r0, [r4, #0]
 8003630:	b2ef      	uxtb	r7, r5
 8003632:	1ac0      	subs	r0, r0, r3
 8003634:	6963      	ldr	r3, [r4, #20]
 8003636:	b2ed      	uxtb	r5, r5
 8003638:	4283      	cmp	r3, r0
 800363a:	dc05      	bgt.n	8003648 <__swbuf_r+0x42>
 800363c:	0021      	movs	r1, r4
 800363e:	0030      	movs	r0, r6
 8003640:	f7ff ffb6 	bl	80035b0 <_fflush_r>
 8003644:	2800      	cmp	r0, #0
 8003646:	d11d      	bne.n	8003684 <__swbuf_r+0x7e>
 8003648:	68a3      	ldr	r3, [r4, #8]
 800364a:	3001      	adds	r0, #1
 800364c:	3b01      	subs	r3, #1
 800364e:	60a3      	str	r3, [r4, #8]
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	6022      	str	r2, [r4, #0]
 8003656:	701f      	strb	r7, [r3, #0]
 8003658:	6963      	ldr	r3, [r4, #20]
 800365a:	4283      	cmp	r3, r0
 800365c:	d004      	beq.n	8003668 <__swbuf_r+0x62>
 800365e:	89a3      	ldrh	r3, [r4, #12]
 8003660:	07db      	lsls	r3, r3, #31
 8003662:	d507      	bpl.n	8003674 <__swbuf_r+0x6e>
 8003664:	2d0a      	cmp	r5, #10
 8003666:	d105      	bne.n	8003674 <__swbuf_r+0x6e>
 8003668:	0021      	movs	r1, r4
 800366a:	0030      	movs	r0, r6
 800366c:	f7ff ffa0 	bl	80035b0 <_fflush_r>
 8003670:	2800      	cmp	r0, #0
 8003672:	d107      	bne.n	8003684 <__swbuf_r+0x7e>
 8003674:	0028      	movs	r0, r5
 8003676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003678:	0021      	movs	r1, r4
 800367a:	0030      	movs	r0, r6
 800367c:	f000 f806 	bl	800368c <__swsetup_r>
 8003680:	2800      	cmp	r0, #0
 8003682:	d0d3      	beq.n	800362c <__swbuf_r+0x26>
 8003684:	2501      	movs	r5, #1
 8003686:	426d      	negs	r5, r5
 8003688:	e7f4      	b.n	8003674 <__swbuf_r+0x6e>
	...

0800368c <__swsetup_r>:
 800368c:	4b30      	ldr	r3, [pc, #192]	; (8003750 <__swsetup_r+0xc4>)
 800368e:	b570      	push	{r4, r5, r6, lr}
 8003690:	0005      	movs	r5, r0
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	000c      	movs	r4, r1
 8003696:	2800      	cmp	r0, #0
 8003698:	d004      	beq.n	80036a4 <__swsetup_r+0x18>
 800369a:	6a03      	ldr	r3, [r0, #32]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <__swsetup_r+0x18>
 80036a0:	f7ff fa26 	bl	8002af0 <__sinit>
 80036a4:	230c      	movs	r3, #12
 80036a6:	5ee2      	ldrsh	r2, [r4, r3]
 80036a8:	b293      	uxth	r3, r2
 80036aa:	0711      	lsls	r1, r2, #28
 80036ac:	d423      	bmi.n	80036f6 <__swsetup_r+0x6a>
 80036ae:	06d9      	lsls	r1, r3, #27
 80036b0:	d407      	bmi.n	80036c2 <__swsetup_r+0x36>
 80036b2:	2309      	movs	r3, #9
 80036b4:	2001      	movs	r0, #1
 80036b6:	602b      	str	r3, [r5, #0]
 80036b8:	3337      	adds	r3, #55	; 0x37
 80036ba:	4313      	orrs	r3, r2
 80036bc:	81a3      	strh	r3, [r4, #12]
 80036be:	4240      	negs	r0, r0
 80036c0:	bd70      	pop	{r4, r5, r6, pc}
 80036c2:	075b      	lsls	r3, r3, #29
 80036c4:	d513      	bpl.n	80036ee <__swsetup_r+0x62>
 80036c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036c8:	2900      	cmp	r1, #0
 80036ca:	d008      	beq.n	80036de <__swsetup_r+0x52>
 80036cc:	0023      	movs	r3, r4
 80036ce:	3344      	adds	r3, #68	; 0x44
 80036d0:	4299      	cmp	r1, r3
 80036d2:	d002      	beq.n	80036da <__swsetup_r+0x4e>
 80036d4:	0028      	movs	r0, r5
 80036d6:	f7ff fb1f 	bl	8002d18 <_free_r>
 80036da:	2300      	movs	r3, #0
 80036dc:	6363      	str	r3, [r4, #52]	; 0x34
 80036de:	2224      	movs	r2, #36	; 0x24
 80036e0:	89a3      	ldrh	r3, [r4, #12]
 80036e2:	4393      	bics	r3, r2
 80036e4:	81a3      	strh	r3, [r4, #12]
 80036e6:	2300      	movs	r3, #0
 80036e8:	6063      	str	r3, [r4, #4]
 80036ea:	6923      	ldr	r3, [r4, #16]
 80036ec:	6023      	str	r3, [r4, #0]
 80036ee:	2308      	movs	r3, #8
 80036f0:	89a2      	ldrh	r2, [r4, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	81a3      	strh	r3, [r4, #12]
 80036f6:	6923      	ldr	r3, [r4, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10b      	bne.n	8003714 <__swsetup_r+0x88>
 80036fc:	21a0      	movs	r1, #160	; 0xa0
 80036fe:	2280      	movs	r2, #128	; 0x80
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	0089      	lsls	r1, r1, #2
 8003704:	0092      	lsls	r2, r2, #2
 8003706:	400b      	ands	r3, r1
 8003708:	4293      	cmp	r3, r2
 800370a:	d003      	beq.n	8003714 <__swsetup_r+0x88>
 800370c:	0021      	movs	r1, r4
 800370e:	0028      	movs	r0, r5
 8003710:	f000 f866 	bl	80037e0 <__smakebuf_r>
 8003714:	220c      	movs	r2, #12
 8003716:	5ea3      	ldrsh	r3, [r4, r2]
 8003718:	2001      	movs	r0, #1
 800371a:	001a      	movs	r2, r3
 800371c:	b299      	uxth	r1, r3
 800371e:	4002      	ands	r2, r0
 8003720:	4203      	tst	r3, r0
 8003722:	d00f      	beq.n	8003744 <__swsetup_r+0xb8>
 8003724:	2200      	movs	r2, #0
 8003726:	60a2      	str	r2, [r4, #8]
 8003728:	6962      	ldr	r2, [r4, #20]
 800372a:	4252      	negs	r2, r2
 800372c:	61a2      	str	r2, [r4, #24]
 800372e:	2000      	movs	r0, #0
 8003730:	6922      	ldr	r2, [r4, #16]
 8003732:	4282      	cmp	r2, r0
 8003734:	d1c4      	bne.n	80036c0 <__swsetup_r+0x34>
 8003736:	0609      	lsls	r1, r1, #24
 8003738:	d5c2      	bpl.n	80036c0 <__swsetup_r+0x34>
 800373a:	2240      	movs	r2, #64	; 0x40
 800373c:	4313      	orrs	r3, r2
 800373e:	81a3      	strh	r3, [r4, #12]
 8003740:	3801      	subs	r0, #1
 8003742:	e7bd      	b.n	80036c0 <__swsetup_r+0x34>
 8003744:	0788      	lsls	r0, r1, #30
 8003746:	d400      	bmi.n	800374a <__swsetup_r+0xbe>
 8003748:	6962      	ldr	r2, [r4, #20]
 800374a:	60a2      	str	r2, [r4, #8]
 800374c:	e7ef      	b.n	800372e <__swsetup_r+0xa2>
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	20000074 	.word	0x20000074

08003754 <_sbrk_r>:
 8003754:	2300      	movs	r3, #0
 8003756:	b570      	push	{r4, r5, r6, lr}
 8003758:	4d06      	ldr	r5, [pc, #24]	; (8003774 <_sbrk_r+0x20>)
 800375a:	0004      	movs	r4, r0
 800375c:	0008      	movs	r0, r1
 800375e:	602b      	str	r3, [r5, #0]
 8003760:	f7fd f8e4 	bl	800092c <_sbrk>
 8003764:	1c43      	adds	r3, r0, #1
 8003766:	d103      	bne.n	8003770 <_sbrk_r+0x1c>
 8003768:	682b      	ldr	r3, [r5, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d000      	beq.n	8003770 <_sbrk_r+0x1c>
 800376e:	6023      	str	r3, [r4, #0]
 8003770:	bd70      	pop	{r4, r5, r6, pc}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	20000260 	.word	0x20000260

08003778 <memchr>:
 8003778:	b2c9      	uxtb	r1, r1
 800377a:	1882      	adds	r2, r0, r2
 800377c:	4290      	cmp	r0, r2
 800377e:	d101      	bne.n	8003784 <memchr+0xc>
 8003780:	2000      	movs	r0, #0
 8003782:	4770      	bx	lr
 8003784:	7803      	ldrb	r3, [r0, #0]
 8003786:	428b      	cmp	r3, r1
 8003788:	d0fb      	beq.n	8003782 <memchr+0xa>
 800378a:	3001      	adds	r0, #1
 800378c:	e7f6      	b.n	800377c <memchr+0x4>
	...

08003790 <__swhatbuf_r>:
 8003790:	b570      	push	{r4, r5, r6, lr}
 8003792:	000e      	movs	r6, r1
 8003794:	001d      	movs	r5, r3
 8003796:	230e      	movs	r3, #14
 8003798:	5ec9      	ldrsh	r1, [r1, r3]
 800379a:	0014      	movs	r4, r2
 800379c:	b096      	sub	sp, #88	; 0x58
 800379e:	2900      	cmp	r1, #0
 80037a0:	da0c      	bge.n	80037bc <__swhatbuf_r+0x2c>
 80037a2:	89b2      	ldrh	r2, [r6, #12]
 80037a4:	2380      	movs	r3, #128	; 0x80
 80037a6:	0011      	movs	r1, r2
 80037a8:	4019      	ands	r1, r3
 80037aa:	421a      	tst	r2, r3
 80037ac:	d013      	beq.n	80037d6 <__swhatbuf_r+0x46>
 80037ae:	2100      	movs	r1, #0
 80037b0:	3b40      	subs	r3, #64	; 0x40
 80037b2:	2000      	movs	r0, #0
 80037b4:	6029      	str	r1, [r5, #0]
 80037b6:	6023      	str	r3, [r4, #0]
 80037b8:	b016      	add	sp, #88	; 0x58
 80037ba:	bd70      	pop	{r4, r5, r6, pc}
 80037bc:	466a      	mov	r2, sp
 80037be:	f000 f84d 	bl	800385c <_fstat_r>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	dbed      	blt.n	80037a2 <__swhatbuf_r+0x12>
 80037c6:	23f0      	movs	r3, #240	; 0xf0
 80037c8:	9901      	ldr	r1, [sp, #4]
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	4019      	ands	r1, r3
 80037ce:	4b03      	ldr	r3, [pc, #12]	; (80037dc <__swhatbuf_r+0x4c>)
 80037d0:	18c9      	adds	r1, r1, r3
 80037d2:	424b      	negs	r3, r1
 80037d4:	4159      	adcs	r1, r3
 80037d6:	2380      	movs	r3, #128	; 0x80
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	e7ea      	b.n	80037b2 <__swhatbuf_r+0x22>
 80037dc:	ffffe000 	.word	0xffffe000

080037e0 <__smakebuf_r>:
 80037e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037e2:	2602      	movs	r6, #2
 80037e4:	898b      	ldrh	r3, [r1, #12]
 80037e6:	0005      	movs	r5, r0
 80037e8:	000c      	movs	r4, r1
 80037ea:	4233      	tst	r3, r6
 80037ec:	d006      	beq.n	80037fc <__smakebuf_r+0x1c>
 80037ee:	0023      	movs	r3, r4
 80037f0:	3347      	adds	r3, #71	; 0x47
 80037f2:	6023      	str	r3, [r4, #0]
 80037f4:	6123      	str	r3, [r4, #16]
 80037f6:	2301      	movs	r3, #1
 80037f8:	6163      	str	r3, [r4, #20]
 80037fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80037fc:	466a      	mov	r2, sp
 80037fe:	ab01      	add	r3, sp, #4
 8003800:	f7ff ffc6 	bl	8003790 <__swhatbuf_r>
 8003804:	9900      	ldr	r1, [sp, #0]
 8003806:	0007      	movs	r7, r0
 8003808:	0028      	movs	r0, r5
 800380a:	f7ff faf1 	bl	8002df0 <_malloc_r>
 800380e:	2800      	cmp	r0, #0
 8003810:	d108      	bne.n	8003824 <__smakebuf_r+0x44>
 8003812:	220c      	movs	r2, #12
 8003814:	5ea3      	ldrsh	r3, [r4, r2]
 8003816:	059a      	lsls	r2, r3, #22
 8003818:	d4ef      	bmi.n	80037fa <__smakebuf_r+0x1a>
 800381a:	2203      	movs	r2, #3
 800381c:	4393      	bics	r3, r2
 800381e:	431e      	orrs	r6, r3
 8003820:	81a6      	strh	r6, [r4, #12]
 8003822:	e7e4      	b.n	80037ee <__smakebuf_r+0xe>
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	89a2      	ldrh	r2, [r4, #12]
 8003828:	6020      	str	r0, [r4, #0]
 800382a:	4313      	orrs	r3, r2
 800382c:	81a3      	strh	r3, [r4, #12]
 800382e:	9b00      	ldr	r3, [sp, #0]
 8003830:	6120      	str	r0, [r4, #16]
 8003832:	6163      	str	r3, [r4, #20]
 8003834:	9b01      	ldr	r3, [sp, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00c      	beq.n	8003854 <__smakebuf_r+0x74>
 800383a:	0028      	movs	r0, r5
 800383c:	230e      	movs	r3, #14
 800383e:	5ee1      	ldrsh	r1, [r4, r3]
 8003840:	f000 f81e 	bl	8003880 <_isatty_r>
 8003844:	2800      	cmp	r0, #0
 8003846:	d005      	beq.n	8003854 <__smakebuf_r+0x74>
 8003848:	2303      	movs	r3, #3
 800384a:	89a2      	ldrh	r2, [r4, #12]
 800384c:	439a      	bics	r2, r3
 800384e:	3b02      	subs	r3, #2
 8003850:	4313      	orrs	r3, r2
 8003852:	81a3      	strh	r3, [r4, #12]
 8003854:	89a3      	ldrh	r3, [r4, #12]
 8003856:	433b      	orrs	r3, r7
 8003858:	81a3      	strh	r3, [r4, #12]
 800385a:	e7ce      	b.n	80037fa <__smakebuf_r+0x1a>

0800385c <_fstat_r>:
 800385c:	2300      	movs	r3, #0
 800385e:	b570      	push	{r4, r5, r6, lr}
 8003860:	4d06      	ldr	r5, [pc, #24]	; (800387c <_fstat_r+0x20>)
 8003862:	0004      	movs	r4, r0
 8003864:	0008      	movs	r0, r1
 8003866:	0011      	movs	r1, r2
 8003868:	602b      	str	r3, [r5, #0]
 800386a:	f7fd f83d 	bl	80008e8 <_fstat>
 800386e:	1c43      	adds	r3, r0, #1
 8003870:	d103      	bne.n	800387a <_fstat_r+0x1e>
 8003872:	682b      	ldr	r3, [r5, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d000      	beq.n	800387a <_fstat_r+0x1e>
 8003878:	6023      	str	r3, [r4, #0]
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	20000260 	.word	0x20000260

08003880 <_isatty_r>:
 8003880:	2300      	movs	r3, #0
 8003882:	b570      	push	{r4, r5, r6, lr}
 8003884:	4d06      	ldr	r5, [pc, #24]	; (80038a0 <_isatty_r+0x20>)
 8003886:	0004      	movs	r4, r0
 8003888:	0008      	movs	r0, r1
 800388a:	602b      	str	r3, [r5, #0]
 800388c:	f7fd f83a 	bl	8000904 <_isatty>
 8003890:	1c43      	adds	r3, r0, #1
 8003892:	d103      	bne.n	800389c <_isatty_r+0x1c>
 8003894:	682b      	ldr	r3, [r5, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d000      	beq.n	800389c <_isatty_r+0x1c>
 800389a:	6023      	str	r3, [r4, #0]
 800389c:	bd70      	pop	{r4, r5, r6, pc}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	20000260 	.word	0x20000260

080038a4 <_init>:
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038aa:	bc08      	pop	{r3}
 80038ac:	469e      	mov	lr, r3
 80038ae:	4770      	bx	lr

080038b0 <_fini>:
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b6:	bc08      	pop	{r3}
 80038b8:	469e      	mov	lr, r3
 80038ba:	4770      	bx	lr
